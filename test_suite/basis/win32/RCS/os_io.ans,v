head	1.8;
access;
symbols
	MLWorks_21c0_1999_03_25:1.8
	MLWorks_20c1_1998_08_20:1.8
	MLWorks_20c0_1998_08_04:1.8
	MLWorks_20b2c2_1998_06_19:1.8
	MLWorks_20b2_Windows_1998_06_12:1.8
	MLWorks_20b1c1_1998_05_07:1.7
	MLWorks_20b0_1998_04_07:1.7
	MLWorks_20b0_1998_03_20:1.7
	MLWorks_20m2_1998_02_16:1.7
	MLWorks_20m1_1997_10_23:1.6
	MLWorks_11r1:1.6.1.1.1.1.1
	MLWorks_11c0_1997_09_09:1.6.1.1.1.1
	MLWorks_10r3:1.6.1.1.3
	MLWorks_10r2_551:1.6.1.1.2
	MLWorks_11:1.6.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.6.1.1
	MLWorks_20m0_1997_06_20:1.6
	MLWorks_1_0_r2c2_1997_06_14:1.6.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.6.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.6.1
	MLWorks_BugFix_1997_04_24:1.6
	MLWorks_1_0_r2_Win32_1997_04_11:1.6
	MLWorks_1_0_r2_Unix_1997_04_04:1.6
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.2.3.1.1
	MLWorks_gui_1996_12_18:1.2.4
	MLWorks_1_0_Win32_1996_12_17:1.2.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.2.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.2.1.1
	MLWorks_1_0_Irix_1996_11_28:1.2.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.2.2
	MLWorks_1_0_Unix_1996_11_14:1.2.1
	MLWorks_Open_Beta2_1996_10_11:1.1.3
	MLWorks_License_dev:1.1.2
	MLWorks_1_open_beta_1996_09_13:1.1.1
	MLWorks_Open_Beta_1996_08_22:1.1
	MLWorks_Beta_1996_07_02:1.1;
locks; strict;
comment	@# @;


1.8
date	98.05.22.12.59.11;	author jont;	state Exp;
branches;
next	1.7;

1.7
date	98.01.22.16.22.52;	author jont;	state Exp;
branches;
next	1.6;

1.6
date	97.04.02.21.58.26;	author jont;	state Exp;
branches
	1.6.1.1;
next	1.5;

1.5
date	97.03.12.17.24.04;	author jont;	state Exp;
branches;
next	1.4;

1.4
date	97.01.15.15.54.31;	author io;	state Exp;
branches;
next	1.3;

1.3
date	97.01.13.13.33.18;	author io;	state Exp;
branches;
next	1.2;

1.2
date	96.11.11.09.56.12;	author matthew;	state Exp;
branches
	1.2.1.1
	1.2.2.1
	1.2.3.1
	1.2.4.1;
next	1.1;

1.1
date	96.06.14.14.59.29;	author stephenb;	state Exp;
branches
	1.1.1.1
	1.1.2.1
	1.1.3.1;
next	;

1.1.1.1
date	96.09.13.11.38.00;	author hope;	state Exp;
branches;
next	;

1.1.2.1
date	96.10.07.16.29.20;	author hope;	state Exp;
branches;
next	;

1.1.3.1
date	96.10.17.11.50.07;	author hope;	state Exp;
branches;
next	;

1.2.1.1
date	96.11.14.13.17.31;	author hope;	state Exp;
branches
	1.2.1.1.1.1;
next	;

1.2.1.1.1.1
date	96.11.28.15.27.59;	author hope;	state Exp;
branches;
next	;

1.2.2.1
date	96.11.22.18.35.19;	author hope;	state Exp;
branches;
next	;

1.2.3.1
date	96.12.17.18.14.17;	author hope;	state Exp;
branches
	1.2.3.1.1.1;
next	;

1.2.3.1.1.1
date	97.02.24.12.07.11;	author hope;	state Exp;
branches;
next	;

1.2.4.1
date	96.12.18.10.09.16;	author hope;	state Exp;
branches;
next	;

1.6.1.1
date	97.05.12.11.07.50;	author hope;	state Exp;
branches
	1.6.1.1.1.1
	1.6.1.1.2.1
	1.6.1.1.3.1;
next	;

1.6.1.1.1.1
date	97.07.28.18.50.54;	author daveb;	state Exp;
branches
	1.6.1.1.1.1.1.1;
next	;

1.6.1.1.1.1.1.1
date	97.10.07.12.14.47;	author jkbrook;	state Exp;
branches;
next	;

1.6.1.1.2.1
date	97.09.08.17.42.39;	author daveb;	state Exp;
branches;
next	;

1.6.1.1.3.1
date	97.09.09.14.42.05;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
@


1.8
log
@Slight answer file revision
@
text
@structure OSIO_ = struct ... end
structure Win32_ = struct ... end
val kind_a : bool = true
val kind_b : bool = true
val kind_c : bool = true
val kind_e : bool = true
val poll_a : bool = true
@


1.7
log
@[Bug #30323]
Remove unnecessary uses of Shell.Build.loadSource
@
text
@d1 1
@


1.6
log
@Modify to stop displaying syserror type
@
text
@a1 2
structure OS = struct ... end
structure Time = struct ... end
@


1.6.1.1
log
@branched from 1.6
@
text
@@


1.6.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@@


1.6.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@@


1.6.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@@


1.6.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@


1.5
log
@Fixing bug 1910
@
text
@d1 3
a3 187
val it : unit = ()
structure Win32_ =
  struct
    eqtype file_desc = file_desc
    datatype hkey =
      HKEY of word32
    datatype iodesc =
      IODESC of int
    datatype priority =
      BACKGROUND |
      HIGH |
      NORMAL |
      REAL_TIME
    datatype regsam =
      KEY_ALL_ACCESS |
      KEY_CREATE_LINK |
      KEY_CREATE_SUB_KEY |
      KEY_ENUMERATE_SUB_KEYS |
      KEY_EXECUTE |
      KEY_NOTIFY |
      KEY_QUERY_VALUE |
      KEY_READ |
      KEY_SET_VALUE |
      KEY_WRITE
    eqtype syserror = int
    eqtype word = word32
    val BACKGROUND : Win32_.priority
    val HIGH : Win32_.priority
    val HKEY : Win32_.word -> Win32_.hkey
    val HKEY_CLASSES_ROOT : Win32_.hkey = HKEY 0w2147483648
    val HKEY_CURRENT_USER : Win32_.hkey = HKEY 0w2147483649
    val HKEY_LOCAL_MACHINE : Win32_.hkey = HKEY 0w2147483650
    val HKEY_USERS : Win32_.hkey = HKEY 0w2147483651
    val IODESC : int -> Win32_.iodesc
    val KEY_ALL_ACCESS : Win32_.regsam
    val KEY_CREATE_LINK : Win32_.regsam
    val KEY_CREATE_SUB_KEY : Win32_.regsam
    val KEY_ENUMERATE_SUB_KEYS : Win32_.regsam
    val KEY_EXECUTE : Win32_.regsam
    val KEY_NOTIFY : Win32_.regsam
    val KEY_QUERY_VALUE : Win32_.regsam
    val KEY_READ : Win32_.regsam
    val KEY_SET_VALUE : Win32_.regsam
    val KEY_WRITE : Win32_.regsam
    val NORMAL : Win32_.priority
    val REAL_TIME : Win32_.priority
    exception SysErr of (string * int option)
    val convertSamValues : Win32_.regsam -> int = fn
    val create_process : (string * Win32_.priority) -> int = fn
    val fdToIOD : Win32_.file_desc -> Win32_.iodesc = fn
    val regCloseKey : Win32_.hkey -> unit = fn
    val regOpenKeyEx : (Win32_.hkey * string * Win32_.regsam) -> Win32_.hkey option = fn
    val regQueryValueEx : (Win32_.hkey * string) -> string = fn
  end
val it : unit = ()
structure OS =
  struct
    structure FileSys =
      struct
        datatype access_mode =
          A_EXEC |
          A_READ |
          A_WRITE
        eqtype dirstream = dirstream
        eqtype file_id = file_id
        val A_EXEC : OS.FileSys.access_mode
        val A_READ : OS.FileSys.access_mode
        val A_WRITE : OS.FileSys.access_mode
        val access : (string * OS.FileSys.access_mode list) -> bool = fn
        val chDir : string -> unit = fn
        val closeDir : OS.FileSys.dirstream -> unit = fn
        val compare : (OS.FileSys.file_id * OS.FileSys.file_id) -> order = fn
        val fileId : string -> OS.FileSys.file_id = fn
        val fileSize : string -> int = fn
        val fullPath : string -> string = fn
        val getDir : unit -> string = fn
        val hash : OS.FileSys.file_id -> word = fn
        val isDir : string -> bool = fn
        val isLink : string -> bool = fn
        val mkDir : string -> unit = fn
        val modTime : string -> time(hidden) = fn
        val openDir : string -> OS.FileSys.dirstream = fn
        val readDir : OS.FileSys.dirstream -> string = fn
        val readLink : string -> string = fn
        val realPath : string -> string = fn
        val remove : string -> unit = fn
        val rename : {new: string, old: string} -> unit = fn
        val rewindDir : OS.FileSys.dirstream -> unit = fn
        val rmDir : string -> unit = fn
        val setTime : (string * time(hidden) option) -> unit = fn
        val tmpName : unit -> string = fn
      end
    structure IO =
      struct
        structure Kind = struct ... end
        eqtype iodesc = iodesc
        eqtype iodesc_kind = iodesc_kind
        eqtype poll_desc = poll_desc
        eqtype poll_info = poll_info
        exception Poll
        val compare : (Win32_.iodesc * Win32_.iodesc) -> order = fn
        val hash : Win32_.iodesc -> word = fn
        val infoToPollDesc : OS.IO.poll_info -> OS.IO.poll_desc = fn
        val isIn : OS.IO.poll_info -> bool = fn
        val isOut : OS.IO.poll_info -> bool = fn
        val isPri : OS.IO.poll_info -> bool = fn
        val kind : Win32_.iodesc -> OS.IO.iodesc_kind = fn
        val poll : (OS.IO.poll_desc list * time(hidden) option) -> OS.IO.poll_info list = fn
        val pollDesc : Win32_.iodesc -> OS.IO.poll_desc option = fn
        val pollIn : OS.IO.poll_desc -> OS.IO.poll_desc = fn
        val pollOut : OS.IO.poll_desc -> OS.IO.poll_desc = fn
        val pollPri : OS.IO.poll_desc -> OS.IO.poll_desc = fn
        val pollToIODesc : OS.IO.poll_desc -> Win32_.iodesc = fn
      end
    structure Path =
      struct
        exception Path
        val base : string -> string = fn
        val concat : (string * string) -> string = fn
        val currentArc : string = "."
        val dir : string -> string = fn
        val ext : string -> string option = fn
        val file : string -> string = fn
        val fromString : string -> {arcs: string list, isAbs: bool, vol: string} = fn
        val fromUnixPath : string -> string = fn
        val getParent : string -> string = fn
        val getVolume : string -> string = fn
        val isAbsolute : string -> bool = fn
        val isCanonical : string -> bool = fn
        val isRelative : string -> bool = fn
        val isRoot : string -> bool = fn
        val joinBaseExt : {base: string, ext: string option} -> string = fn
        val joinDirFile : {dir: string, file: string} -> string = fn
        val mkAbsolute : (string * string) -> string = fn
        val mkCanonical : string -> string = fn
        val mkRelative : (string * string) -> string = fn
        val parentArc : string = ".."
        val splitBaseExt : string -> {base: string, ext: string option} = fn
        val splitDirFile : string -> {dir: string, file: string} = fn
        val toString : {arcs: string list, isAbs: bool, vol: string} -> string = fn
        val toUnixPath : string -> string = fn
        val validVolume : {isAbs: bool, vol: string} -> bool = fn
      end
    structure Process =
      struct
        eqtype status = int
        val atExit : (unit -> unit) -> unit = fn
        val exit : int -> 'a = fn
        val failure : int = 1
        val getEnv : string -> string option = fn
        val success : int = 0
        val system : string -> int = fn
        val terminate : int -> 'a = fn
      end
    eqtype syserror = int
    exception SysErr of (string * syserror option)
    val errorMsg : int -> string = fn
    val errorName : int -> string = fn
    val syserror : string -> int option = fn
  end
val it : unit = ()
structure Time =
  struct
    eqtype time = time
    val + : (Time.time * Time.time) -> Time.time = fn
    val - : (Time.time * Time.time) -> Time.time = fn
    val < : (Time.time * Time.time) -> bool = fn
    val <= : (Time.time * Time.time) -> bool = fn
    val > : (Time.time * Time.time) -> bool = fn
    val >= : (Time.time * Time.time) -> bool = fn
    exception Time
    val compare : (Time.time * Time.time) -> order = fn
    val fmt : int -> Time.time -> string = fn
    val fromMicroseconds : int -> Time.time = fn
    val fromMilliseconds : int -> Time.time = fn
    val fromReal : real -> Time.time = fn
    val fromSeconds : int -> Time.time = fn
    val fromString : string -> Time.time option = fn
    val now : unit -> Time.time = fn
    val scan : ('a -> (char * 'a) option) -> 'a -> (Time.time * 'a) option = fn
    val toMicroseconds : Time.time -> int = fn
    val toMilliseconds : Time.time -> int = fn
    val toReal : Time.time -> real = fn
    val toSeconds : Time.time -> int = fn
    val toString : Time.time -> string = fn
    val zeroTime : Time.time = TIME (0, 0, 0)
  end
@


1.4
log
@[Bug #1892]
rename __word{8,16,32}{array,vector} to __word{8,16,32}_{array,vector}
@
text
@a1 7
val it : unit = ()
Compiling basis.general
Compiling basis.__general
Compiling basis.toplevel
Compiling win_nt.win32
Compiling win_nt._win32
Compiling win_nt.__win32
d4 5
a8 2
    datatype file_desc =
      FILE_DESC of int
d14 11
d26 1
a27 1
    val FILE_DESC : int -> Win32_.file_desc
d29 16
d48 1
d50 4
a53 1
    val environment : unit -> string list = fn
a55 45
Compiling basis.string_cvt
Compiling basis.__pre_basis
Compiling basis.__pre_string_cvt
Compiling basis.__string_cvt
Compiling basis.__pre_int
Compiling basis.__pre_int32
Compiling basis.integer
Compiling basis.__integer
Compiling basis.__position
Compiling basis.char
Compiling basis.__char
Compiling basis.math
Compiling basis.__math
Compiling basis.ieee_real
Compiling basis.__ieee_real
Compiling basis.__prereal
Compiling basis.real
Compiling basis.__real
Compiling basis.time
Compiling win_nt.__time
Compiling basis.os_file_sys
Compiling basis.os_path
Compiling basis.os_process
Compiling basis.os_io
Compiling basis.os
Compiling win_nt._os
Compiling basis.list
Compiling basis.__list
Compiling basis.string
Compiling basis.__string
Compiling win_nt.__os_path
Compiling basis.__preword32
Compiling basis.__preword
Compiling basis.word
Compiling basis.__word
Compiling basis.__word32
Compiling win_nt._os_file_sys
Compiling win_nt.__os_file_sys
Compiling win_nt._os_io
Compiling win_nt.__os_io
Compiling basis.__exit
Compiling basis.exit
Compiling basis._os_process
Compiling basis.__os_process
Compiling win_nt.__os
d72 1
a72 1
        val compare : (OS.FileSys.file_id * OS.FileSys.file_id) -> order(hidden) = fn
d90 1
a90 1
        val setTime : (string * time(hidden) MLWorks.Option.option) -> unit = fn
d96 1
a96 1
        eqtype iodesc = file_desc
d101 2
a102 2
        val compare : (Win32_.file_desc * Win32_.file_desc) -> order(hidden) = fn
        val hash : Win32_.file_desc -> word = fn
d107 3
a109 3
        val kind : Win32_.file_desc -> OS.IO.iodesc_kind = fn
        val poll : (OS.IO.poll_desc list * time(hidden) MLWorks.Option.option) -> OS.IO.poll_info list = fn
        val pollDesc : Win32_.file_desc -> OS.IO.poll_desc MLWorks.Option.option = fn
d113 1
a113 1
        val pollToIODesc : OS.IO.poll_desc -> Win32_.file_desc = fn
d122 1
a122 1
        val ext : string -> string MLWorks.Option.option = fn
d125 1
d132 1
a132 1
        val joinBaseExt : {base: string, ext: string MLWorks.Option.option} -> string = fn
d138 1
a138 1
        val splitBaseExt : string -> {base: string, ext: string MLWorks.Option.option} = fn
d141 1
d150 1
a150 1
        val getEnv : string -> string MLWorks.Option.option = fn
d159 1
a159 1
    val syserror : string -> int MLWorks.Option.option = fn
d172 1
a172 1
    val compare : (Time.time * Time.time) -> order(hidden) = fn
d178 1
a178 1
    val fromString : string -> Time.time MLWorks.Option.option = fn
d180 1
a180 1
    val scan : ('a -> (char * 'a) MLWorks.Option.option) -> 'a -> (Time.time * 'a) MLWorks.Option.option = fn
a187 32
val it : unit = ()
structure TopLevel =
  struct
    datatype 'a option =
      NONE |
      SOME of 'a
    datatype order =
      EQUAL |
      GREATER |
      LESS
    exception Domain
    val EQUAL : order
    exception Fail of string
    val GREATER : order
    val LESS : order
    val NONE : 'a option
    val SOME : 'a -> 'a option
  end
datatype 'a option =
  NONE |
  SOME of 'a
datatype order =
  EQUAL |
  GREATER |
  LESS
exception Domain
val EQUAL : order
exception Fail of string
val GREATER : order
val LESS : order
val NONE : 'a option
val SOME : 'a -> 'a option
@


1.3
log
@[Bug #1757]
renamed __ieeereal to __ieee_real
        __char{array,vector} to __char_{array,vector}
@
text
@d33 2
a34 2
Compiling basis.__preinteger
Compiling basis.__preint32
@


1.2
log
@Changing io_desc to iodesc
@
text
@d42 2
a43 2
Compiling basis.ieeereal
Compiling basis.__ieeereal
@


1.2.4.1
log
@branched from 1.2
@
text
@@


1.2.3.1
log
@branched from 1.2
@
text
@@


1.2.3.1.1.1
log
@branched from 1.2.3.1
@
text
@@


1.2.2.1
log
@branched from 1.2
@
text
@@


1.2.1.1
log
@branched from 1.2
@
text
@@


1.2.1.1.1.1
log
@branched from 1.2.1.1
@
text
@@


1.1
log
@new unit
@
text
@d114 2
a115 2
        eqtype io_desc = file_desc
        eqtype io_desc_kind = io_desc_kind
d125 1
a125 1
        val kind : Win32_.file_desc -> OS.IO.io_desc_kind = fn
@


1.1.3.1
log
@branched from 1.1
@
text
@@


1.1.2.1
log
@branched from 1.1
@
text
@@


1.1.1.1
log
@branched from 1.1
@
text
@@
