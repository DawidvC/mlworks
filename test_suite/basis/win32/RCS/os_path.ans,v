head	1.7;
access;
symbols
	MLWorks_21c0_1999_03_25:1.7
	MLWorks_20c1_1998_08_20:1.6
	MLWorks_20c0_1998_08_04:1.6
	MLWorks_20b2c2_1998_06_19:1.6
	MLWorks_20b2_Windows_1998_06_12:1.6
	MLWorks_20b1c1_1998_05_07:1.6
	MLWorks_20b0_1998_04_07:1.6
	MLWorks_20b0_1998_03_20:1.6
	MLWorks_20m2_1998_02_16:1.5
	MLWorks_20m1_1997_10_23:1.4
	MLWorks_11r1:1.3.1.1.1.2.1
	MLWorks_11c0_1997_09_09:1.3.1.1.1.2
	MLWorks_10r3:1.3.1.1.3
	MLWorks_10r2_551:1.3.1.1.2
	MLWorks_11:1.3.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.3.1.1
	MLWorks_20m0_1997_06_20:1.3
	MLWorks_1_0_r2c2_1997_06_14:1.3.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.3.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.3.1
	MLWorks_BugFix_1997_04_24:1.3
	MLWorks_1_0_r2_Win32_1997_04_11:1.3
	MLWorks_1_0_r2_Unix_1997_04_04:1.3
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.2.5.1.1
	MLWorks_gui_1996_12_18:1.2.6
	MLWorks_1_0_Win32_1996_12_17:1.2.5
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.2.3.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.2.3.1
	MLWorks_1_0_Irix_1996_11_28:1.2.3.1.1
	MLWorks_1_0_Win32_1996_11_22:1.2.4
	MLWorks_1_0_Unix_1996_11_14:1.2.3
	MLWorks_Open_Beta2_1996_10_11:1.2.2
	MLWorks_License_dev:1.2.1
	MLWorks_1_open_beta_1996_09_13:1.1.1
	MLWorks_Open_Beta_1996_08_22:1.1
	MLWorks_Beta_1996_07_02:1.1;
locks; strict;
comment	@# @;


1.7
date	99.03.17.11.45.39;	author daveb;	state Exp;
branches;
next	1.6;

1.6
date	98.03.05.15.23.27;	author jont;	state Exp;
branches;
next	1.5;

1.5
date	98.01.22.16.27.27;	author jont;	state Exp;
branches;
next	1.4;

1.4
date	97.08.11.14.46.55;	author jont;	state Exp;
branches;
next	1.3;

1.3
date	97.03.05.17.25.07;	author jont;	state Exp;
branches
	1.3.1.1;
next	1.2;

1.2
date	96.10.01.13.04.43;	author io;	state Exp;
branches
	1.2.1.1
	1.2.2.1
	1.2.3.1
	1.2.4.1
	1.2.5.1
	1.2.6.1;
next	1.1;

1.1
date	96.06.20.11.37.35;	author andreww;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.09.13.11.38.49;	author hope;	state Exp;
branches;
next	;

1.2.1.1
date	96.10.07.16.30.16;	author hope;	state Exp;
branches;
next	;

1.2.2.1
date	96.10.17.11.50.52;	author hope;	state Exp;
branches;
next	;

1.2.3.1
date	96.11.14.13.18.17;	author hope;	state Exp;
branches
	1.2.3.1.1.1;
next	;

1.2.3.1.1.1
date	96.11.28.15.28.48;	author hope;	state Exp;
branches;
next	;

1.2.4.1
date	96.11.22.18.36.03;	author hope;	state Exp;
branches;
next	;

1.2.5.1
date	96.12.17.18.15.04;	author hope;	state Exp;
branches
	1.2.5.1.1.1;
next	;

1.2.5.1.1.1
date	97.02.24.12.08.03;	author hope;	state Exp;
branches;
next	;

1.2.6.1
date	96.12.18.10.10.02;	author hope;	state Exp;
branches;
next	;

1.3.1.1
date	97.05.12.11.08.44;	author hope;	state Exp;
branches
	1.3.1.1.1.1
	1.3.1.1.2.1
	1.3.1.1.3.1;
next	;

1.3.1.1.1.1
date	97.07.28.18.50.47;	author daveb;	state Exp;
branches;
next	1.3.1.1.1.2;

1.3.1.1.1.2
date	97.08.12.09.38.02;	author johnh;	state Exp;
branches
	1.3.1.1.1.2.1.1;
next	;

1.3.1.1.1.2.1.1
date	97.10.07.12.15.35;	author jkbrook;	state Exp;
branches;
next	;

1.3.1.1.2.1
date	97.09.08.17.42.33;	author daveb;	state Exp;
branches;
next	;

1.3.1.1.3.1
date	97.09.09.14.41.59;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
answer file for test file of win_nt/__os_path.sml
@


1.7
log
@[Bug #30092]
Added tests for invalid arcs.
@
text
@val fromUnixPath_a : bool = true
val fromUnixPath_b : bool = true
val fromUnixPath_c : bool = true
val fromUnixPath_d : bool = true
val fromUnixPath_e : bool = true
val fromUnixPath_f : bool = true
val fromUnixPath_g : bool = true
val fromUnixPath_h : bool = true
val fromUnixPath_i : bool = true
val fromUnixPath_j : bool = true
val test10a : string = "OK"
val test11a : string = "OK"
val test12 : string = "OK"
val test12a : string = "OK"
val test13 : string = "OK"
val test14 : string = "OK"
val test15 : string = "OK"
val test16 : string = "OK"
val test17 : string = "OK"
val test18 : string = "OK"
val test19 : string = "OK"
val test1a : string = "OK"
val test1b : string = "OK"
val test1c : string = "OK"
val test1d : string = "OK"
val test1e : string = "OK"
val test1f : string = "OK"
val test1g : string = "OK"
val test1h : string = "OK"
val test1i : string = "OK"
val test1j : string = "OK"
val test1k : string = "OK"
val test1l : string = "OK"
val test1m : string = "OK"
val test1n : string = "OK"
val test2a : string = "OK"
val test2b : string = "OK"
val test2c : string = "OK"
val test2d : string = "OK"
val test2e : string = "OK"
val test2f : string = "OK"
val test2g : string = "OK"
val test2h : string = "OK"
val test2i : string = "OK"
val test2j : string = "OK"
val test2k : string = "OK"
val test2l : string = "OK"
val test2m : string = "OK"
val test2n : string = "OK"
val test2o : string = "OK"
val test2p : string = "OK"
val test2q : string = "OK"
val test3b : string = "OK"
val test3c : string = "OK"
val test3d : string = "OK"
val test3e : string = "OK"
val test3f : string = "OK"
val test3g : string = "OK"
val test3h : string = "OK"
val test4a : string = "OK"
val test4b : string = "OK"
val test5a : string = "OK"
val test6a : string = "OK"
val test6b : string = "OK"
val test7a : string = "OK"
val test7b : string = "OK"
val test7c : string = "OK"
val test8a : string = "OK"
val test8b : string = "OK"
val test8c : string = "OK"
val test9a : string = "OK"
val toUnixPath_a : bool = true
val toUnixPath_b : bool = true
val toUnixPath_c : bool = true
val toUnixPath_d : bool = true
val toUnixPath_e : bool = true
val toUnixPath_f : bool = true
val toUnixPath_g : bool = true
val toUnixPath_h : bool = true
val toUnixPath_i : bool = true
val toUnixPath_j : bool = true
@


1.6
log
@[Bug #30323]
Modify after removal of loadSource
@
text
@d14 1
d52 1
@


1.5
log
@[Bug #30323]
Remove unnecessary uses of Shell.Build.loadSource
@
text
@a0 1
structure OSPath_ = struct ... end
@


1.4
log
@[Bug #30245]
Fix problems with basis structures changing
@
text
@a0 3
structure List = struct ... end
structure String = struct ... end
structure Char = struct ... end
@


1.3
log
@[Bug #1939]
Add tests for toUnixPath and fromUnixPath
@
text
@d1 4
a4 195
val it : unit = ()
structure List =
  struct
    val @@ : ('a list * 'a list) -> 'a list = fn
    exception Empty
    val all : ('a -> bool) -> 'a list -> bool = fn
    val app : ('a -> unit) -> 'a list -> unit = fn
    val concat : 'a list list -> 'a list = fn
    val drop : ('a list * int) -> 'a list = fn
    val exists : ('a -> bool) -> 'a list -> bool = fn
    val filter : ('a -> bool) -> 'a list -> 'a list = fn
    val find : ('a -> bool) -> 'a list -> 'a option = fn
    val foldl : (('a * 'b) -> 'b) -> 'b -> 'a list -> 'b = fn
    val foldr : (('a * 'b) -> 'b) -> 'b -> 'a list -> 'b = fn
    val hd : 'a list -> 'a = fn
    val last : 'a list -> 'a = fn
    val length : 'a list -> int = fn
    val map : ('a -> 'b) -> 'a list -> 'b list = fn
    val mapPartial : ('a -> 'b option) -> 'a list -> 'b list = fn
    val nth : ('a list * int) -> 'a = fn
    val null : 'a list -> bool = fn
    val partition : ('a -> bool) -> 'a list -> ('a list * 'a list) = fn
    val rev : 'a list -> 'a list = fn
    val revAppend : ('a list * 'a list) -> 'a list = fn
    val tabulate : (int * (int -> 'a)) -> 'a list = fn
    val take : ('a list * int) -> 'a list = fn
    val tl : 'a list -> 'a list = fn
  end
val it : unit = ()
structure String =
  struct
    structure Char =
      struct
        eqtype char = char
        eqtype string = string
        val < : (char * char) -> bool = fn
        val <= : (char * char) -> bool = fn
        val > : (char * char) -> bool = fn
        val >= : (char * char) -> bool = fn
        val chr : int -> char = fn
        val compare : (char * char) -> order = fn
        val contains : string -> char -> bool = fn
        val fromCString : string -> char option = fn
        val fromString : string -> char option = fn
        val isAlpha : char -> bool = fn
        val isAlphaNum : char -> bool = fn
        val isAscii : char -> bool = fn
        val isCntrl : char -> bool = fn
        val isDigit : char -> bool = fn
        val isGraph : char -> bool = fn
        val isHexDigit : char -> bool = fn
        val isLower : char -> bool = fn
        val isPrint : char -> bool = fn
        val isPunct : char -> bool = fn
        val isSpace : char -> bool = fn
        val isUpper : char -> bool = fn
        val maxChar : char = #"\255"
        val maxOrd : int = 255
        val minChar : char = #"\000"
        val notContains : string -> char -> bool = fn
        val ord : char -> int = fn
        val pred : char -> char = fn
        val scan : ('a -> (char * 'a) option) -> 'a -> (char * 'a) option = fn
        val succ : char -> char = fn
        val toCString : char -> string = fn
        val toLower : char -> char = fn
        val toString : char -> string = fn
        val toUpper : char -> char = fn
      end
    eqtype char = char
    eqtype string = string
    val < : (string * string) -> bool = fn
    val <= : (string * string) -> bool = fn
    val > : (string * string) -> bool = fn
    val >= : (string * string) -> bool = fn
    val ^ : (string * string) -> string = fn
    val collate : ((char * char) -> order) -> (string * string) -> order = fn
    val compare : (string * string) -> order = fn
    val concat : string list -> string = fn
    val explode : string -> char list = fn
    val extract : (string * int * int option) -> string = fn
    val fields : (char -> bool) -> string -> string list = fn
    val fromCString : string -> string option = fn
    val fromString : string -> string option = fn
    val implode : char list -> string = fn
    val isPrefix : string -> string -> bool = fn
    val maxSize : int = 16777195
    val size : string -> int = fn
    val str : char -> string = fn
    val sub : (string * int) -> char = fn
    val substring : (string * int * int) -> string = fn
    val toCString : string -> string = fn
    val toString : string -> string = fn
    val tokens : (char -> bool) -> string -> string list = fn
    val translate : (char -> string) -> string -> string = fn
  end
val it : unit = ()
signature OS_PATH =
  sig
    exception Path
    val parentArc : string
    val currentArc : string
    val validVolume : {vol:string,isAbs:bool} -> bool
    val fromString : string -> {arcs:string list,vol:string,isAbs:bool}
    val toString : {arcs:string list,vol:string,isAbs:bool} -> string
    val getVolume : string -> string
    val getParent : string -> string
    val splitDirFile : string -> {file:string,dir:string}
    val joinDirFile : {file:string,dir:string} -> string
    val dir : string -> string
    val file : string -> string
    val splitBaseExt : string -> {ext:string option,base:string}
    val joinBaseExt : {ext:string option,base:string} -> string
    val base : string -> string
    val ext : string -> string option
    val mkCanonical : string -> string
    val isCanonical : string -> bool
    val mkAbsolute : string * string -> string
    val mkRelative : string * string -> string
    val isAbsolute : string -> bool
    val isRelative : string -> bool
    val isRoot : string -> bool
    val concat : string * string -> string
    val fromUnixPath : string -> string
    val toUnixPath : string -> string
  end
val it : unit = ()
structure Char =
  struct
    eqtype char = char
    eqtype string = string
    val < : (char * char) -> bool = fn
    val <= : (char * char) -> bool = fn
    val > : (char * char) -> bool = fn
    val >= : (char * char) -> bool = fn
    val chr : int -> char = fn
    val compare : (char * char) -> order = fn
    val contains : string -> char -> bool = fn
    val fromCString : string -> char option = fn
    val fromString : string -> char option = fn
    val isAlpha : char -> bool = fn
    val isAlphaNum : char -> bool = fn
    val isAscii : char -> bool = fn
    val isCntrl : char -> bool = fn
    val isDigit : char -> bool = fn
    val isGraph : char -> bool = fn
    val isHexDigit : char -> bool = fn
    val isLower : char -> bool = fn
    val isPrint : char -> bool = fn
    val isPunct : char -> bool = fn
    val isSpace : char -> bool = fn
    val isUpper : char -> bool = fn
    val maxChar : char = #"\255"
    val maxOrd : int = 255
    val minChar : char = #"\000"
    val notContains : string -> char -> bool = fn
    val ord : char -> int = fn
    val pred : char -> char = fn
    val scan : ('a -> (char * 'a) option) -> 'a -> (char * 'a) option = fn
    val succ : char -> char = fn
    val toCString : char -> string = fn
    val toLower : char -> char = fn
    val toString : char -> string = fn
    val toUpper : char -> char = fn
  end
val it : unit = ()
structure OSPath_ =
  struct
    exception Path
    val base : string -> string = fn
    val concat : (string * string) -> string = fn
    val currentArc : string = "."
    val dir : string -> string = fn
    val ext : string -> string option = fn
    val file : string -> string = fn
    val fromString : string -> {arcs: string list, isAbs: bool, vol: string} = fn
    val fromUnixPath : string -> string = fn
    val getParent : string -> string = fn
    val getVolume : string -> string = fn
    val isAbsolute : string -> bool = fn
    val isCanonical : string -> bool = fn
    val isRelative : string -> bool = fn
    val isRoot : string -> bool = fn
    val joinBaseExt : {base: string, ext: string option} -> string = fn
    val joinDirFile : {dir: string, file: string} -> string = fn
    val mkAbsolute : (string * string) -> string = fn
    val mkCanonical : string -> string = fn
    val mkRelative : (string * string) -> string = fn
    val parentArc : string = ".."
    val splitBaseExt : string -> {base: string, ext: string option} = fn
    val splitDirFile : string -> {dir: string, file: string} = fn
    val toString : {arcs: string list, isAbs: bool, vol: string} -> string = fn
    val toUnixPath : string -> string = fn
    val validVolume : {isAbs: bool, vol: string} -> bool = fn
  end
@


1.3.1.1
log
@branched from 1.3
@
text
@@


1.3.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@@


1.3.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@@


1.3.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@@


1.3.1.1.1.2
log
@[Bug #30086]
[Bug #30245]
Merging - Fix problems with basis structures changing
@
text
@d1 195
a195 4
structure List = struct ... end
structure String = struct ... end
structure Char = struct ... end
structure OSPath_ = struct ... end
@


1.3.1.1.1.2.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@


1.2
log
@[Bug #1626]
updating toCString
@
text
@a1 37
Compiling basis.general
Compiling basis.__general
Compiling basis.toplevel
structure TopLevel =
  struct
    datatype 'a option =
      NONE |
      SOME of 'a
    datatype order =
      EQUAL |
      GREATER |
      LESS
    exception Domain
    val EQUAL : order
    exception Fail of string
    val GREATER : order
    val LESS : order
    val NONE : 'a option
    val SOME : 'a -> 'a option
  end
datatype 'a option =
  NONE |
  SOME of 'a
datatype order =
  EQUAL |
  GREATER |
  LESS
exception Domain
val EQUAL : order
exception Fail of string
val GREATER : order
val LESS : order
val NONE : 'a option
val SOME : 'a -> 'a option
val it : unit = ()
Compiling basis.list
Compiling basis.__list
a29 12
Compiling basis.__pre_basis
Compiling basis.string_cvt
Compiling basis.__pre_string_cvt
Compiling basis.__string_cvt
Compiling basis.char
Compiling basis.string
Compiling basis.__preinteger
Compiling basis.__preint32
Compiling basis.integer
Compiling basis.__integer
Compiling basis.__char
Compiling basis.__string
d87 1
a87 1
    val maxSize : int = 8388606
a97 1
Compiling basis.os_path
d124 2
a135 2
    exception Dummy of char
    exception ToString of char
a148 1
    val isOctDigit : char -> bool = fn
a152 1
    val makestring : char -> string = fn
a159 1
    val scanc : ('a -> (char * 'a) option) -> 'a -> (char * 'a) option = fn
a166 1
Compiling win_nt.__os_path
d177 1
d193 1
d196 10
d265 10
@


1.2.6.1
log
@branched from 1.2
@
text
@@


1.2.5.1
log
@branched from 1.2
@
text
@@


1.2.5.1.1.1
log
@branched from 1.2.5.1
@
text
@@


1.2.4.1
log
@branched from 1.2
@
text
@@


1.2.3.1
log
@branched from 1.2
@
text
@@


1.2.3.1.1.1
log
@branched from 1.2.3.1
@
text
@@


1.2.2.1
log
@branched from 1.2
@
text
@@


1.2.1.1
log
@branched from 1.2
@
text
@@


1.1
log
@new unit
answer file for test file of win_nt/__os_path.sml
@
text
@d114 1
a114 1
        val toCString : char -> string option = fn
d214 1
a214 1
    val toCString : char -> string option = fn
@


1.1.1.1
log
@branched from 1.1
@
text
@@
