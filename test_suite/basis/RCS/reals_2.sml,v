head	1.6;
access;
symbols
	MLWorks_21c0_1999_03_25:1.6
	MLWorks_20c1_1998_08_20:1.6
	MLWorks_20c0_1998_08_04:1.6
	MLWorks_20b2c2_1998_06_19:1.6
	MLWorks_20b2_Windows_1998_06_12:1.6
	MLWorks_20b1c1_1998_05_07:1.6
	MLWorks_20b0_1998_04_07:1.5
	MLWorks_20b0_1998_03_20:1.5
	MLWorks_20m2_1998_02_16:1.4
	MLWorks_20m1_1997_10_23:1.3
	MLWorks_11r1:1.2.1.1.1.1.1
	MLWorks_11c0_1997_09_09:1.2.1.1.1.1
	MLWorks_10r3:1.2.1.1.3
	MLWorks_10r2_551:1.2.1.1.2
	MLWorks_11:1.2.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.2.1.1
	MLWorks_20m0_1997_06_20:1.3
	MLWorks_1_0_r2c2_1997_06_14:1.2.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.2.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.2.1
	MLWorks_BugFix_1997_04_24:1.2
	MLWorks_1_0_r2_Win32_1997_04_11:1.2
	MLWorks_1_0_r2_Unix_1997_04_04:1.2;
locks; strict;
comment	@ *  @;


1.6
date	98.04.21.09.28.37;	author mitchell;	state Exp;
branches;
next	1.5;

1.5
date	98.02.18.11.56.01;	author mitchell;	state Exp;
branches;
next	1.4;

1.4
date	97.11.21.10.48.38;	author daveb;	state Exp;
branches;
next	1.3;

1.3
date	97.05.28.15.56.52;	author matthew;	state Exp;
branches;
next	1.2;

1.2
date	97.03.14.11.20.32;	author matthew;	state Exp;
branches
	1.2.1.1;
next	1.1;

1.1
date	97.03.03.14.57.12;	author matthew;	state Exp;
branches;
next	;

1.2.1.1
date	97.05.12.11.08.07;	author hope;	state Exp;
branches
	1.2.1.1.1.1
	1.2.1.1.2.1
	1.2.1.1.3.1;
next	;

1.2.1.1.1.1
date	97.07.28.18.49.23;	author daveb;	state Exp;
branches
	1.2.1.1.1.1.1.1;
next	;

1.2.1.1.1.1.1.1
date	97.10.07.12.13.57;	author jkbrook;	state Exp;
branches;
next	;

1.2.1.1.2.1
date	97.09.08.17.41.05;	author daveb;	state Exp;
branches;
next	;

1.2.1.1.3.1
date	97.09.09.14.40.31;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
@


1.6
log
@[Bug #30336]
Fix tests to agree with change in spec of toString and fmt
@
text
@(*  ==== Testing ====
 * this tests that the Exact Real conversion functions work properly.
 *  Copyright (C) 1997 The Harlequin Group Ltd.
 *
    Result: OK
 *
 *
 *  Revision Log
 *  ------------
 *  $Log: reals_2.sml,v $
 *  Revision 1.5  1998/02/18  11:56:01  mitchell
 *  [Bug #30349]
 *  Fix test to avoid non-unit sequence warning
 *
 *  Revision 1.4  1997/11/21  10:48:38  daveb
 *  [Bug #30323]
 *
 *  Revision 1.3  1997/05/28  15:56:52  matthew
 *  Updating
 *
 *  Revision 1.2  1997/03/14  11:20:32  matthew
 *  Adding printing of ~nan test
 *
 *  Revision 1.1  1997/03/03  14:57:12  matthew
 *  new unit
 *
 *
 *
*)


(* Functions for testing the various conversion functions *)
(* fmt *)

fun opt (SOME x) = x | opt NONE = raise Div
val from = opt o Real.fromString
val exact = Real.fmt (StringCvt.EXACT);
val rep = MLWorks.Internal.Value.real_to_string;
fun equal (x,y) = (Real.isNan x andalso Real.isNan y) orelse rep x = rep y
fun test1 x = equal (opt (Real.fromString ("   " ^ exact x ^ "foobar")),x)
fun test2 s = s = exact (from s)
fun test_read s =
  let
    val sz = size s
    fun getc i = if i >= sz then NONE else SOME (String.sub (s,i),i+1)
    fun mkstring (src,acc) =
      case getc src of
        NONE => implode (rev acc)
      | SOME (c,src) => mkstring (src,c::acc)
  in
    case Real.scan getc 0 of
      SOME (r,src) => SOME (rep r,mkstring (src,[]))
    | _ => NONE
  end;

fun check_overflow f =
  (ignore(f ()); false) handle Overflow => true

val t1 = map test1 [0.0, 0.0/0.0, ~(0.0/0.0),1E34,Real.nextAfter(1E34,1E35),
                    Real.nextAfter (1.0,2.0), Real.nextAfter(1.0,0.0),
                    from "nan", from "+inf"]
val t2 = map test2 ["0.1E1",exact (Real.nextAfter (1.0,2.0)),
                    "nan"]
val t3 = equal (from "nan", from "nan")

val t4 = [test_read "nan" = SOME (rep (from "nan"),""),
          test_read "nanfoo" = SOME (rep (from "nan"),"foo"),
          test_read "foo" = NONE,
          test_read "1.23E10" = SOME (rep (from "1.23E10"),""),
          test_read "1.23Efoo" = SOME (rep (from "1.23"),"Efoo")]

val t5 = [test_read "1.0" = SOME  (rep 1.0,""),
          test_read ".1" = SOME  (rep 0.1,""),
          test_read "1.0E0" = SOME  (rep 1.0,""),
          test_read "0.1E1" = SOME  (rep 1.0,""),
          test_read "10E~1" = SOME  (rep 1.0,""),
          test_read "1" = SOME  (rep 1.0,""),
          test_read "1foo" = SOME  (rep 1.0,"foo"),
          test_read "1.0foo" = SOME  (rep 1.0,"foo"),
          test_read "1E00foo" = SOME  (rep 1.0,"foo"),
          test_read "1.0E00foo" = SOME  (rep 1.0,"foo")]

val t6 = [test_read "  foo" = NONE,
          test_read "  1." = SOME  (rep 1.0,"."),
          test_read "  1.E" = SOME  (rep 1.0,".E"),
          test_read "  1.E23" = SOME  (rep 1.0,".E23")]

val t7 = [check_overflow (fn () => test_read ("1E1234455678988976563"))]
          
val t8 = [equal (Real.realFloor 1.0,1.0),
          equal (Real.realCeil 1.0,1.0),
          equal (Real.realTrunc 1.0,1.0),
          equal (Real.realFloor 1.5,1.0),
          equal (Real.realCeil 1.5,2.0)]
val t9 = [equal (Real.realTrunc 1.0,1.0),
          Real.== (Real.realFloor (~(0.0)),0.0),
          Real.== (Real.realCeil (~(0.0)),0.0),
          Real.== (Real.realTrunc (~(0.0)),0.0),
          equal (Real.realFloor Real.posInf,Real.posInf),
          equal (Real.realCeil Real.posInf,Real.posInf),
          equal (Real.realTrunc Real.posInf,Real.posInf)]
fun deccheck x =
  let
    fun chk x = equal (x, Real.fromDecimal (Real.toDecimal (x)))
  in
    chk x andalso chk (Real.nextAfter (x,Real.posInf))
  end

val t10 = map deccheck [1.0,~1.0,0.0,~(0.0),
                        opt (Real.fromString "nan"),
                        Real.minPos, Real.minNormalPos,
                        Real.maxFinite, Real.posInf, Real.negInf]
@


1.5
log
@[Bug #30349]
Fix test to avoid non-unit sequence warning
@
text
@d11 4
d39 1
a39 1
fun equal (x,y) = rep x = rep y
d61 1
a61 2
                    from "nan", from "+inf",
                    from "nan(1234)"]
d63 2
a64 2
                    "nan(1234)"]
val t3 = equal (from "nan", from "nan(0)")
d66 1
a66 1
val t4 = [test_read "nan(1234)" = SOME (rep (from "nan(1234)"),""),
d88 1
a88 2
val t7 = [check_overflow (fn () => test_read ("nan(1234455678988976563)")),
          check_overflow (fn () => test_read ("1E1234455678988976563"))]
d110 1
a110 1
                        opt (Real.fromString "nan(1234)"),
@


1.4
log
@[Bug #30323]
@
text
@d11 3
d53 1
a53 1
  (f (); false) handle Overflow => true
@


1.3
log
@Updating
@
text
@d11 3
a23 4
Shell.Options.set (Shell.Options.ValuePrinter.maximumStrDepth,0);
Shell.Build.loadSource "basis.__real";
Shell.Build.loadSource "basis.__string";
Shell.Build.loadSource "basis.__string_cvt";
@


1.2
log
@Adding printing of ~nan test
@
text
@d11 3
d21 1
@


1.2.1.1
log
@branched from 1.2
@
text
@a10 3
 *  Revision 1.2  1997/03/14  11:20:32  matthew
 *  Adding printing of ~nan test
 *
@


1.2.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a10 3
 *  Revision 1.2.1.1  1997/05/12  11:08:07  hope
 *  branched from 1.2
 *
@


1.2.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a10 3
 *  Revision 1.2.1.1  1997/05/12  11:08:07  hope
 *  branched from 1.2
 *
@


1.2.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a10 3
 *  Revision 1.2.1.1  1997/05/12  11:08:07  hope
 *  branched from 1.2
 *
@


1.2.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a10 3
 *  Revision 1.2.1.1.1.1  1997/07/28  18:49:23  daveb
 *  branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.1
log
@new unit
@
text
@d11 3
d49 1
a49 1
val t1 = map test1 [0.0, 0.0/0.0, 0.0/0.0,1E34,Real.nextAfter(1E34,1E35),
@
