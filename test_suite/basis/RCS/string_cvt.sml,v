head	1.5;
access;
symbols
	MLWorks_21c0_1999_03_25:1.5
	MLWorks_20c1_1998_08_20:1.5
	MLWorks_20c0_1998_08_04:1.5
	MLWorks_20b2c2_1998_06_19:1.5
	MLWorks_20b2_Windows_1998_06_12:1.5
	MLWorks_20b1c1_1998_05_07:1.5
	MLWorks_20b0_1998_04_07:1.5
	MLWorks_20b0_1998_03_20:1.5
	MLWorks_20m2_1998_02_16:1.5
	MLWorks_20m1_1997_10_23:1.4
	MLWorks_11r1:1.3.5.1.1.1.1
	MLWorks_11c0_1997_09_09:1.3.5.1.1.1
	MLWorks_10r3:1.3.5.1.3
	MLWorks_10r2_551:1.3.5.1.2
	MLWorks_11:1.3.5.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.3.5.1
	MLWorks_20m0_1997_06_20:1.4
	MLWorks_1_0_r2c2_1997_06_14:1.3.5.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.3.5.1
	MLWorks_1_0_r2c1_1997_05_12:1.3.5
	MLWorks_BugFix_1997_04_24:1.3
	MLWorks_1_0_r2_Win32_1997_04_11:1.3
	MLWorks_1_0_r2_Unix_1997_04_04:1.3
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.3.3.1.1
	MLWorks_gui_1996_12_18:1.3.4
	MLWorks_1_0_Win32_1996_12_17:1.3.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.3.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.3.1.1
	MLWorks_1_0_Irix_1996_11_28:1.3.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.3.2
	MLWorks_1_0_Unix_1996_11_14:1.3.1
	MLWorks_Open_Beta2_1996_10_11:1.1.3
	MLWorks_License_dev:1.1.2
	MLWorks_1_open_beta_1996_09_13:1.1.1
	MLWorks_Open_Beta_1996_08_22:1.1
	MLWorks_Beta_1996_07_02:1.1
	MLWorks_Beta_1996_06_07:1.1
	MLWorks_Beta_1996_06_06:1.1
	MLWorks_Beta_1996_06_05:1.1;
locks; strict;
comment	@ *  @;


1.5
date	97.11.21.10.49.11;	author daveb;	state Exp;
branches;
next	1.4;

1.4
date	97.05.28.11.19.58;	author jont;	state Exp;
branches;
next	1.3;

1.3
date	96.11.06.12.05.31;	author matthew;	state Exp;
branches
	1.3.1.1
	1.3.2.1
	1.3.3.1
	1.3.4.1
	1.3.5.1;
next	1.2;

1.2
date	96.10.22.13.21.21;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	96.06.04.19.45.26;	author io;	state Exp;
branches
	1.1.1.1
	1.1.2.1
	1.1.3.1;
next	;

1.1.1.1
date	96.09.13.11.38.06;	author hope;	state Exp;
branches;
next	;

1.1.2.1
date	96.10.07.16.29.27;	author hope;	state Exp;
branches;
next	;

1.1.3.1
date	96.10.17.11.50.12;	author hope;	state Exp;
branches;
next	;

1.3.1.1
date	96.11.14.13.17.36;	author hope;	state Exp;
branches
	1.3.1.1.1.1;
next	;

1.3.1.1.1.1
date	96.11.28.15.28.06;	author hope;	state Exp;
branches;
next	;

1.3.2.1
date	96.11.22.18.35.24;	author hope;	state Exp;
branches;
next	;

1.3.3.1
date	96.12.17.18.14.22;	author hope;	state Exp;
branches
	1.3.3.1.1.1;
next	;

1.3.3.1.1.1
date	97.02.24.12.07.18;	author hope;	state Exp;
branches;
next	;

1.3.4.1
date	96.12.18.10.09.21;	author hope;	state Exp;
branches;
next	;

1.3.5.1
date	97.05.12.11.07.55;	author hope;	state Exp;
branches
	1.3.5.1.1.1
	1.3.5.1.2.1
	1.3.5.1.3.1;
next	;

1.3.5.1.1.1
date	97.07.28.18.49.38;	author daveb;	state Exp;
branches
	1.3.5.1.1.1.1.1;
next	;

1.3.5.1.1.1.1.1
date	97.10.07.12.14.05;	author jkbrook;	state Exp;
branches;
next	;

1.3.5.1.2.1
date	97.09.08.17.41.22;	author daveb;	state Exp;
branches;
next	;

1.3.5.1.3.1
date	97.09.09.14.40.48;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
stringcvt->string_cvt
@


1.5
log
@[Bug #30323]
@
text
@(* test/stringcvt.sml -- 1995-10-26 
 * modified for MLWorks Fri May 24 10:19:54 1996
 * Result: OK
 * $Log: string_cvt.sml,v $
 *  Revision 1.4  1997/05/28  11:19:58  jont
 *  [Bug #30090]
 *  Remove uses of MLWorks.IO
 *
 *  Revision 1.3  1996/11/06  12:05:31  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
 *  Revision 1.2  1996/10/22  13:21:21  jont
 *  Remove references to toplevel
 *
 *  Revision 1.1  1996/06/04  19:45:26  io
 *  new unit
 *  stringcvt->string_cvt
 *
 *  Revision 1.3  1996/05/28  13:12:51  jont
 *  Inlining auxil.sml
 *
 *  Revision 1.2  1996/05/24  09:21:37  io
 *  fix...
 *
 *)

infix 1 seq
fun e1 seq e2 = e2;
fun check b = if b then "OK" else "WRONG";
fun check' f = (if f () then "OK" else "WRONG") handle _ => "EXN";

fun range (from, to) p = 
    let open Int
    in
	(from > to) orelse (p from) andalso (range (from+1, to) p)
    end;

fun checkrange bounds = check o range bounds;

local 
    open StringCvt
    (* Read all upper case letters, skip lowercase letters, scan an
     * integer, and return the excess characters: *)

    fun triple getc src =
	let open StringCvt
	    val (str1, src1) = splitl Char.isUpper getc src
	    val src2         = dropl Char.isLower getc src1
	in case Int.scan DEC getc src2 of
	    NONE            => NONE
	  | SOME (i, src3)  => 
		let val str2 = takel (fn _ => true) getc src3
		in SOME((str1, i, str2), src3) end
	end

    fun testtrip (s, res) = scanString triple s = res;
in

val test1 = 
    check'(fn _ =>
	   padLeft #"#" 0 "abcdef" = "abcdef"
	   andalso padLeft #"#" 6 "abcdef" = "abcdef"
	   andalso padLeft #"#" 7 "abcdef" = "#abcdef"
	   andalso padLeft #"#" 10 "abcdef" = "####abcdef"
	   andalso padLeft #"#" ~3 "abcdef" = "abcdef");

val test2 = 
    check'(fn _ =>
	   padRight #"#" 0 "abcdef" = "abcdef"
	   andalso padRight #"#" 6 "abcdef" = "abcdef"
	   andalso padRight #"#" 7 "abcdef" = "abcdef#"
	   andalso padRight #"#" 10 "abcdef" = "abcdef####"
	   andalso padRight #"#" ~3 "abcdef" = "abcdef");

val test3 = 
    check'(fn _ =>
    testtrip ("", NONE)
    andalso testtrip(" a1", NONE)
    andalso testtrip(" A1", NONE)
    andalso testtrip("ABC A1", NONE)
    andalso testtrip("ABC a1", NONE)
    andalso testtrip(" *1", NONE)
    andalso testtrip("ABC *1", NONE));

val test4 = 
    check'(fn _ =>
    testtrip ("1", SOME("", 1, ""))
    andalso testtrip ("1", SOME("", 1, ""))
    andalso testtrip (" 1", SOME("", 1, ""))
    andalso testtrip (" 1  ", SOME("", 1, "  ")));

val test5 =
    check'(fn _ =>
    testtrip ("1a123+ +&D", SOME("", 1, "a123+ +&D"))
    andalso testtrip ("1a123+ +&D", SOME("", 1, "a123+ +&D"))
    andalso testtrip ("a1a123+ +&D", SOME("", 1, "a123+ +&D"))
    andalso testtrip ("a1a123+ +&D", SOME("", 1, "a123+ +&D"))
    andalso testtrip ("azbc1a123+ +&D", SOME("", 1, "a123+ +&D"))
    andalso testtrip ("azbc1a123+ +&D", SOME("", 1, "a123+ +&D"))
    andalso testtrip ("azbc  1a123+ +&D", SOME("", 1, "a123+ +&D"))
    andalso testtrip ("azbc  1a123+ +&D", SOME("", 1, "a123+ +&D")))

val test6 = 
    check'(fn _ =>
    testtrip ("~1234a123+ +&D", SOME("", ~1234, "a123+ +&D"))
    andalso testtrip ("~1234a123+ +&D", SOME("", ~1234, "a123+ +&D"))
    andalso testtrip ("a~1234a123+ +&D", SOME("", ~1234, "a123+ +&D"))
    andalso testtrip ("a~1234a123+ +&D", SOME("", ~1234, "a123+ +&D"))
    andalso testtrip ("azbc~1234a123+ +&D", SOME("", ~1234, "a123+ +&D"))
    andalso testtrip ("azbc~1234a123+ +&D", SOME("", ~1234, "a123+ +&D"))
    andalso testtrip ("azbc  ~1234a123+ +&D", SOME("", ~1234, "a123+ +&D"))
    andalso testtrip ("azbc  ~1234a123+ +&D", SOME("", ~1234, "a123+ +&D")))

val test7 =
    check'(fn _ =>
    testtrip ("A1a123+ +&D", SOME("A", 1, "a123+ +&D"))
    andalso testtrip ("ABCDEFG1a123+ +&D", SOME("ABCDEFG", 1, "a123+ +&D"))
    andalso testtrip ("Aa1a123+ +&D", SOME("A", 1, "a123+ +&D"))
    andalso testtrip ("ABCDEFGa1a123+ +&D", SOME("ABCDEFG", 1, "a123+ +&D"))
    andalso testtrip ("Aazbc1a123+ +&D", SOME("A", 1, "a123+ +&D"))
    andalso testtrip ("ABCDEFGazbc1a123+ +&D", SOME("ABCDEFG", 1, "a123+ +&D"))
    andalso testtrip ("Aazbc  1a123+ +&D", SOME("A", 1, "a123+ +&D"))
    andalso testtrip ("ABCDEFGazbc  1a123+ +&D", SOME("ABCDEFG", 1, "a123+ +&D")))

val test8 = 
    check'(fn _ =>
    testtrip ("A~1234a123+ +&D", SOME("A", ~1234, "a123+ +&D"))
    andalso 
    testtrip ("ABCDEFG~1234a123+ +&D", SOME("ABCDEFG", ~1234, "a123+ +&D"))
    andalso testtrip ("Aa~1234a123+ +&D", SOME("A", ~1234, "a123+ +&D"))
    andalso 
    testtrip ("ABCDEFGa~1234a123+ +&D", SOME("ABCDEFG", ~1234, "a123+ +&D"))
    andalso testtrip ("Aazbc~1234a123+ +&D", SOME("A", ~1234, "a123+ +&D"))
    andalso 
    testtrip ("ABCDEFGazbc~1234a123+ +&D", SOME("ABCDEFG", ~1234, "a123+ +&D"))
    andalso testtrip ("Aazbc  ~1234a123+ +&D", SOME("A", ~1234, "a123+ +&D"))
    andalso 
    testtrip ("ABCDEFGazbc  ~1234a123+ +&D", SOME("ABCDEFG", ~1234, "a123+ +&D")))

val test9 = 
    check'(fn _ =>
    let fun getstring b getc src = 
	    SOME(takel (fn _ => b) getc src, src)
	fun dup 0 s = s
	  | dup n s = dup (n-1) (s^s);
	val longstring = dup 13 "abAB12 %^&"
    in 
	scanString (getstring true) longstring = SOME longstring 
	andalso scanString (getstring false) longstring = SOME ""
    end)

end
@


1.4
log
@[Bug #30090]
Remove uses of MLWorks.IO
@
text
@d5 4
a26 5

Shell.Build.loadSource "basis.__char";
Shell.Build.loadSource "basis.__string_cvt";
Shell.Build.loadSource "basis.__int";
Shell.Options.set (Shell.Options.ValuePrinter.maximumSeqSize,20000);
@


1.3
log
@[Bug #1728]
__integer becomes __int
@
text
@d5 4
a28 3
val output = MLWorks.IO.output
val std_out = MLWorks.IO.std_out
val flush_out = MLWorks.IO.flush_out
a30 1
fun say s = (output(std_out, s); flush_out std_out);
@


1.3.5.1
log
@branched from 1.3
@
text
@a4 4
 *  Revision 1.3  1996/11/06  12:05:31  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
@


1.3.5.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a4 3
 *  Revision 1.3.5.1  1997/05/12  11:07:55  hope
 *  branched from 1.3
 *
@


1.3.5.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a4 3
 *  Revision 1.3.5.1  1997/05/12  11:07:55  hope
 *  branched from 1.3
 *
@


1.3.5.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a4 3
 *  Revision 1.3.5.1  1997/05/12  11:07:55  hope
 *  branched from 1.3
 *
@


1.3.5.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a4 3
 *  Revision 1.3.5.1.1.1  1997/07/28  18:49:38  daveb
 *  branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.3.4.1
log
@branched from 1.3
@
text
@a4 4
 *  Revision 1.3  1996/11/06  12:05:31  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
@


1.3.3.1
log
@branched from 1.3
@
text
@a4 4
 *  Revision 1.3  1996/11/06  12:05:31  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
@


1.3.3.1.1.1
log
@branched from 1.3.3.1
@
text
@a4 3
 *  Revision 1.3.3.1  1996/12/17  18:14:22  hope
 *  branched from 1.3
 *
@


1.3.2.1
log
@branched from 1.3
@
text
@a4 4
 *  Revision 1.3  1996/11/06  12:05:31  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
@


1.3.1.1
log
@branched from 1.3
@
text
@a4 4
 *  Revision 1.3  1996/11/06  12:05:31  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
@


1.3.1.1.1.1
log
@branched from 1.3.1.1
@
text
@a4 3
 *  Revision 1.3.1.1  1996/11/14  13:17:36  hope
 *  branched from 1.3
 *
@


1.2
log
@Remove references to toplevel
@
text
@d5 3
d22 1
a22 1
Shell.Build.loadSource "basis.__integer";
@


1.1
log
@new unit
stringcvt->string_cvt
@
text
@d4 5
a8 1
 * $Log: basis:stringcvt.sml,v $
a18 1
Shell.Build.loadSource "basis.toplevel";
@


1.1.3.1
log
@branched from 1.1
@
text
@d4 1
a4 5
 * $Log: string_cvt.sml,v $
 *  Revision 1.1  1996/06/04  19:45:26  io
 *  new unit
 *  stringcvt->string_cvt
 *
@


1.1.2.1
log
@branched from 1.1
@
text
@d4 1
a4 5
 * $Log: string_cvt.sml,v $
 *  Revision 1.1  1996/06/04  19:45:26  io
 *  new unit
 *  stringcvt->string_cvt
 *
@


1.1.1.1
log
@branched from 1.1
@
text
@d4 1
a4 5
 * $Log: string_cvt.sml,v $
 *  Revision 1.1  1996/06/04  19:45:26  io
 *  new unit
 *  stringcvt->string_cvt
 *
@
