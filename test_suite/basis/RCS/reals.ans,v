head	1.14;
access;
symbols
	MLWorks_21c0_1999_03_25:1.14
	MLWorks_20c1_1998_08_20:1.14
	MLWorks_20c0_1998_08_04:1.14
	MLWorks_20b2c2_1998_06_19:1.14
	MLWorks_20b2_Windows_1998_06_12:1.14
	MLWorks_20b1c1_1998_05_07:1.14
	MLWorks_20b0_1998_04_07:1.14
	MLWorks_20b0_1998_03_20:1.14
	MLWorks_20m2_1998_02_16:1.14
	MLWorks_20m1_1997_10_23:1.13
	MLWorks_11r1:1.11.1.1.1.1.1
	MLWorks_11c0_1997_09_09:1.11.1.1.1.1
	MLWorks_10r3:1.11.1.1.3
	MLWorks_10r2_551:1.11.1.1.2
	MLWorks_11:1.11.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.11.1.1
	MLWorks_20m0_1997_06_20:1.12
	MLWorks_1_0_r2c2_1997_06_14:1.11.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.11.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.11.1
	MLWorks_BugFix_1997_04_24:1.11
	MLWorks_1_0_r2_Win32_1997_04_11:1.11
	MLWorks_1_0_r2_Unix_1997_04_04:1.11
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.10.3.1.1
	MLWorks_gui_1996_12_18:1.10.4
	MLWorks_1_0_Win32_1996_12_17:1.10.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.10.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.10.1.1
	MLWorks_1_0_Irix_1996_11_28:1.10.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.10.2
	MLWorks_1_0_Unix_1996_11_14:1.10.1
	MLWorks_Open_Beta2_1996_10_11:1.7.3
	MLWorks_License_dev:1.7.2
	MLWorks_1_open_beta_1996_09_13:1.7.1
	MLWorks_Open_Beta_1996_08_22:1.5
	MLWorks_Beta_1996_07_02:1.3
	MLWorks_Beta_1996_06_07:1.3
	MLWorks_Beta_1996_06_06:1.3
	MLWorks_Beta_1996_06_05:1.3
	MLWorks_Beta_1996_06_03:1.2
	MLWorks_Beta_1996_05_31:1.2
	MLWorks_Beta_1996_05_30:1.2;
locks; strict;
comment	@# @;


1.14
date	97.11.25.19.24.07;	author daveb;	state Exp;
branches;
next	1.13;

1.13
date	97.09.19.14.06.43;	author daveb;	state Exp;
branches;
next	1.12;

1.12
date	97.05.28.16.01.03;	author matthew;	state Exp;
branches;
next	1.11;

1.11
date	97.03.06.13.51.46;	author matthew;	state Exp;
branches
	1.11.1.1;
next	1.10;

1.10
date	96.11.08.10.37.24;	author matthew;	state Exp;
branches
	1.10.1.1
	1.10.2.1
	1.10.3.1
	1.10.4.1;
next	1.9;

1.9
date	96.11.06.15.24.32;	author andreww;	state Exp;
branches;
next	1.8;

1.8
date	96.10.22.13.28.18;	author jont;	state Exp;
branches;
next	1.7;

1.7
date	96.09.09.11.14.02;	author io;	state Exp;
branches
	1.7.1.1
	1.7.2.1
	1.7.3.1;
next	1.6;

1.6
date	96.09.07.00.02.25;	author io;	state Exp;
branches;
next	1.5;

1.5
date	96.08.14.11.46.14;	author io;	state Exp;
branches;
next	1.4;

1.4
date	96.07.04.18.22.59;	author andreww;	state Exp;
branches;
next	1.3;

1.3
date	96.06.05.01.23.37;	author io;	state Exp;
branches;
next	1.2;

1.2
date	96.05.23.12.49.24;	author matthew;	state Exp;
branches;
next	1.1;

1.1
date	96.05.22.16.35.25;	author matthew;	state Exp;
branches;
next	;

1.7.1.1
date	96.09.13.11.38.47;	author hope;	state Exp;
branches;
next	;

1.7.2.1
date	96.10.07.16.30.14;	author hope;	state Exp;
branches;
next	;

1.7.3.1
date	96.10.17.11.50.50;	author hope;	state Exp;
branches;
next	;

1.10.1.1
date	96.11.14.13.18.16;	author hope;	state Exp;
branches
	1.10.1.1.1.1;
next	;

1.10.1.1.1.1
date	96.11.28.15.28.47;	author hope;	state Exp;
branches;
next	;

1.10.2.1
date	96.11.22.18.36.02;	author hope;	state Exp;
branches;
next	;

1.10.3.1
date	96.12.17.18.15.01;	author hope;	state Exp;
branches
	1.10.3.1.1.1;
next	;

1.10.3.1.1.1
date	97.02.24.12.08.01;	author hope;	state Exp;
branches;
next	;

1.10.4.1
date	96.12.18.10.10.00;	author hope;	state Exp;
branches;
next	;

1.11.1.1
date	97.05.12.11.08.42;	author hope;	state Exp;
branches
	1.11.1.1.1.1
	1.11.1.1.2.1
	1.11.1.1.3.1;
next	;

1.11.1.1.1.1
date	97.07.28.18.50.42;	author daveb;	state Exp;
branches
	1.11.1.1.1.1.1.1;
next	;

1.11.1.1.1.1.1.1
date	97.10.07.12.15.32;	author jkbrook;	state Exp;
branches;
next	;

1.11.1.1.2.1
date	97.09.08.17.42.28;	author daveb;	state Exp;
branches;
next	;

1.11.1.1.3.1
date	97.09.09.14.41.53;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
New test
@


1.14
log
@[Bug #30323]
@
text
@infix 1 seq
val seq : ('a * 'b) -> 'b = fn
val say : string -> unit = fn
val check : bool -> string = fn
val check' : (unit -> bool) -> string = fn
val range : (int * int) -> (int -> bool) -> bool = fn
val checkrange : (int * int) -> (int -> bool) -> string = fn
val chk : (string * real) -> string = fn
val test1 : string = "OK"
val test10 : string list = ["OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", ..]
val test11 : string list = ["OK", "OK", "OK", "OK"]
val test2 : string = "OK"
val test3 : string = "OK"
val test4 : string = "OK"
val test5 : string = "OK"
val test6 : string = "OK"
val test7 : string = "OK"
val test8 : string = "OK"
val test9 : string list = ["OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", ..]
@


1.13
log
@[Bug #30214]
Updated for negative zero literals.
@
text
@a0 3
val it : unit = ()
val it : unit = ()
structure Int = struct ... end
a7 5
val it : unit = ()
structure LargeReal = struct ... end
structure Real = struct ... end
val it : unit = ()
structure List = struct ... end
@


1.12
log
@Updating
@
text
@d19 1
@


1.11
log
@Updating


Updating
@
text
@d2 2
a3 33
structure Int =
  struct
    eqtype int = int
    val * : (int * int) -> int = fn
    val + : (int * int) -> int = fn
    val - : (int * int) -> int = fn
    val < : (int * int) -> bool = fn
    val <= : (int * int) -> bool = fn
    val > : (int * int) -> bool = fn
    val >= : (int * int) -> bool = fn
    val abs : int -> int = fn
    val compare : (int * int) -> order = fn
    val div : (int * int) -> int = fn
    val fmt : radix(hidden) -> int -> string = fn
    val fromInt : int -> int = fn
    val fromLarge : MLWorks.Internal.Types.int32 -> int = fn
    val fromString : string -> int option = fn
    val max : (int * int) -> int = fn
    val maxInt : int option = SOME 536870911
    val min : (int * int) -> int = fn
    val minInt : int option = SOME ~536870912
    val mod : (int * int) -> int = fn
    val precision : int option = SOME 30
    val quot : (int * int) -> int = fn
    val rem : (int * int) -> int = fn
    val sameSign : (int * int) -> bool = fn
    val scan : radix(hidden) -> ('a -> (char * 'a) option) -> 'a -> (int * 'a) option = fn
    val sign : int -> int = fn
    val toInt : int -> int = fn
    val toLarge : int -> MLWorks.Internal.Types.int32 = fn
    val toString : int -> string = fn
    val ~ : int -> int = fn
  end
a4 2
val flush_out : MLWorks.IO.outstream -> unit = fn
val output : (MLWorks.IO.outstream * string) -> unit = fn
a5 1
val std_out : MLWorks.IO.outstream = FLEXOUT(FLEXOUTSTREAM(ref(RIGIDOUTSTREAM {close_out=fn, closed_out=fn, flush_out=fn, output=fn})))
d12 2
a13 174
structure LargeReal =
  struct
    structure Math =
      struct
        type real = real
        val acos : real -> real = fn
        val asin : real -> real = fn
        val atan : real -> real = fn
        val atan2 : (real * real) -> real = fn
        val cos : real -> real = fn
        val cosh : real -> real = fn
        val e : real = 2.718281828
        val exp : real -> real = fn
        val ln : real -> real = fn
        val log10 : real -> real = fn
        val pi : real = 3.141592654
        val pow : (real * real) -> real = fn
        val sin : real -> real = fn
        val sinh : real -> real = fn
        val sqrt : real -> real = fn
        val tan : real -> real = fn
        val tanh : real -> real = fn
      end
    type real = real
    val != : (real * real) -> bool = fn
    val * : (real * real) -> real = fn
    val *+ : (real * real * real) -> real = fn
    val *- : (real * real * real) -> real = fn
    val + : (real * real) -> real = fn
    val - : (real * real) -> real = fn
    val / : (real * real) -> real = fn
    val < : (real * real) -> bool = fn
    val <= : (real * real) -> bool = fn
    val <> : (real * real) -> bool = fn
    val == : (real * real) -> bool = fn
    val > : (real * real) -> bool = fn
    val >= : (real * real) -> bool = fn
    val ?= : (real * real) -> bool = fn
    val abs : real -> real = fn
    val ceil : real -> int = fn
    val checkFloat : real -> real = fn
    val class : real -> float_class(hidden) = fn
    val compare : (real * real) -> order = fn
    val compareReal : (real * real) -> real_order(hidden) = fn
    val copySign : (real * real) -> real = fn
    val floor : real -> int = fn
    val fmt : realfmt(hidden) -> real -> string = fn
    val fromDecimal : {digits: int list, exp: int, kind: float_class(hidden), sign: bool} -> real = fn
    val fromInt : int -> real = fn
    val fromLarge : rounding_mode(hidden) -> real -> real = fn
    val fromLargeInt : MLWorks.Internal.Types.int32 -> real = fn
    val fromManExp : {exp: int, man: real} -> real = fn
    val fromString : string -> real option = fn
    val isFinite : real -> bool = fn
    val isNan : real -> bool = fn
    val isNormal : real -> bool = fn
    val max : (real * real) -> real = fn
    val maxFinite : real = 1.797693135E308
    val min : (real * real) -> real = fn
    val minNormalPos : real = 2.225073859E~308
    val minPos : real = 4.940656458E~324
    val negInf : real = ~inf
    val nextAfter : (real * real) -> real = fn
    val posInf : real = inf
    val precision : int = 53
    val radix : int = 2
    val realCeil : real -> real = fn
    val realFloor : real -> real = fn
    val realMod : real -> real = fn
    val realTrunc : real -> real = fn
    val rem : (real * real) -> real = fn
    val round : real -> int = fn
    val sameSign : (real * real) -> bool = fn
    val scan : ('a -> (char * 'a) option) -> 'a -> (real * 'a) option = fn
    val sign : real -> int = fn
    val signBit : real -> bool = fn
    val split : real -> {frac: real, whole: real} = fn
    val toDecimal : real -> {digits: int list, exp: int, kind: float_class(hidden), sign: bool} = fn
    val toInt : rounding_mode(hidden) -> real -> int = fn
    val toLarge : real -> real = fn
    val toLargeInt : rounding_mode(hidden) -> real -> MLWorks.Internal.Types.int32 = fn
    val toManExp : real -> {exp: int, man: real} = fn
    val toString : real -> string = fn
    val trunc : real -> int = fn
    val unordered : (real * real) -> bool = fn
    val ~ : real -> real = fn
  end
structure Real =
  struct
    structure Math =
      struct
        type real = real
        val acos : real -> real = fn
        val asin : real -> real = fn
        val atan : real -> real = fn
        val atan2 : (real * real) -> real = fn
        val cos : real -> real = fn
        val cosh : real -> real = fn
        val e : real = 2.718281828
        val exp : real -> real = fn
        val ln : real -> real = fn
        val log10 : real -> real = fn
        val pi : real = 3.141592654
        val pow : (real * real) -> real = fn
        val sin : real -> real = fn
        val sinh : real -> real = fn
        val sqrt : real -> real = fn
        val tan : real -> real = fn
        val tanh : real -> real = fn
      end
    type real = real
    val != : (real * real) -> bool = fn
    val * : (real * real) -> real = fn
    val *+ : (real * real * real) -> real = fn
    val *- : (real * real * real) -> real = fn
    val + : (real * real) -> real = fn
    val - : (real * real) -> real = fn
    val / : (real * real) -> real = fn
    val < : (real * real) -> bool = fn
    val <= : (real * real) -> bool = fn
    val <> : (real * real) -> bool = fn
    val == : (real * real) -> bool = fn
    val > : (real * real) -> bool = fn
    val >= : (real * real) -> bool = fn
    val ?= : (real * real) -> bool = fn
    val abs : real -> real = fn
    val ceil : real -> int = fn
    val checkFloat : real -> real = fn
    val class : real -> float_class(hidden) = fn
    val compare : (real * real) -> order = fn
    val compareReal : (real * real) -> real_order(hidden) = fn
    val copySign : (real * real) -> real = fn
    val floor : real -> int = fn
    val fmt : realfmt(hidden) -> real -> string = fn
    val fromDecimal : {digits: int list, exp: int, kind: float_class(hidden), sign: bool} -> real = fn
    val fromInt : int -> real = fn
    val fromLarge : rounding_mode(hidden) -> real -> real = fn
    val fromLargeInt : MLWorks.Internal.Types.int32 -> real = fn
    val fromManExp : {exp: int, man: real} -> real = fn
    val fromString : string -> real option = fn
    val isFinite : real -> bool = fn
    val isNan : real -> bool = fn
    val isNormal : real -> bool = fn
    val max : (real * real) -> real = fn
    val maxFinite : real = 1.797693135E308
    val min : (real * real) -> real = fn
    val minNormalPos : real = 2.225073859E~308
    val minPos : real = 4.940656458E~324
    val negInf : real = ~inf
    val nextAfter : (real * real) -> real = fn
    val posInf : real = inf
    val precision : int = 53
    val radix : int = 2
    val realCeil : real -> real = fn
    val realFloor : real -> real = fn
    val realMod : real -> real = fn
    val realTrunc : real -> real = fn
    val rem : (real * real) -> real = fn
    val round : real -> int = fn
    val sameSign : (real * real) -> bool = fn
    val scan : ('a -> (char * 'a) option) -> 'a -> (real * 'a) option = fn
    val sign : real -> int = fn
    val signBit : real -> bool = fn
    val split : real -> {frac: real, whole: real} = fn
    val toDecimal : real -> {digits: int list, exp: int, kind: float_class(hidden), sign: bool} = fn
    val toInt : rounding_mode(hidden) -> real -> int = fn
    val toLarge : real -> real = fn
    val toLargeInt : rounding_mode(hidden) -> real -> MLWorks.Internal.Types.int32 = fn
    val toManExp : real -> {exp: int, man: real} = fn
    val toString : real -> string = fn
    val trunc : real -> int = fn
    val unordered : (real * real) -> bool = fn
    val ~ : real -> real = fn
  end
d15 1
a15 27
structure List =
  struct
    val @@ : ('a list * 'a list) -> 'a list = fn
    exception Empty
    val all : ('a -> bool) -> 'a list -> bool = fn
    val app : ('a -> unit) -> 'a list -> unit = fn
    val concat : 'a list list -> 'a list = fn
    val drop : ('a list * int) -> 'a list = fn
    val exists : ('a -> bool) -> 'a list -> bool = fn
    val filter : ('a -> bool) -> 'a list -> 'a list = fn
    val find : ('a -> bool) -> 'a list -> 'a option = fn
    val foldl : (('a * 'b) -> 'b) -> 'b -> 'a list -> 'b = fn
    val foldr : (('a * 'b) -> 'b) -> 'b -> 'a list -> 'b = fn
    val hd : 'a list -> 'a = fn
    val last : 'a list -> 'a = fn
    val length : 'a list -> int = fn
    val map : ('a -> 'b) -> 'a list -> 'b list = fn
    val mapPartial : ('a -> 'b option) -> 'a list -> 'b list = fn
    val nth : ('a list * int) -> 'a = fn
    val null : 'a list -> bool = fn
    val partition : ('a -> bool) -> 'a list -> ('a list * 'a list) = fn
    val rev : 'a list -> 'a list = fn
    val revAppend : ('a list * 'a list) -> 'a list = fn
    val tabulate : (int * (int -> 'a)) -> 'a list = fn
    val take : ('a list * int) -> 'a list = fn
    val tl : 'a list -> 'a list = fn
  end
@


1.11.1.1
log
@branched from 1.11
@
text
@@


1.11.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@@


1.11.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@@


1.11.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@@


1.11.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@


1.10
log
@Updating
@
text
@d70 1
a82 1
    val ?<> : (real * real) -> bool = fn
a90 1
    val equal : (real * real) -> bool = fn
d93 1
d112 4
d123 1
d157 1
a169 1
    val ?<> : (real * real) -> bool = fn
a177 1
    val equal : (real * real) -> bool = fn
d180 1
d199 4
d210 1
@


1.10.4.1
log
@branched from 1.10
@
text
@@


1.10.3.1
log
@branched from 1.10
@
text
@@


1.10.3.1.1.1
log
@branched from 1.10.3.1
@
text
@@


1.10.2.1
log
@branched from 1.10
@
text
@@


1.10.1.1
log
@branched from 1.10
@
text
@@


1.10.1.1.1.1
log
@branched from 1.10.1.1
@
text
@@


1.9
log
@[Bug #1711]
reals no longer eqtype
@
text
@d239 1
a239 1
val test1 : string = "WRONG"
d242 1
a242 1
val test3 : string = "WRONG"
@


1.8
log
@Remove references to toplevel
@
text
@d46 82
d132 1
a132 1
        eqtype real = real
d151 1
a151 1
    eqtype real = real
d160 2
d164 2
d173 1
d179 1
a179 1
    val fromSci : {exp: int, man: real} -> real = fn
d204 1
a204 1
    val toSci : real -> {exp: int, man: real} = fn
a206 1
    val unequal : (real * real) -> bool = fn
d239 1
a239 1
val test1 : string = "OK"
d242 1
a242 1
val test3 : string = "OK"
@


1.7
log
@remove banner
@
text
@a1 1
val it : unit = ()
@


1.7.3.1
log
@branched from 1.7
@
text
@@


1.7.2.1
log
@branched from 1.7
@
text
@@


1.7.1.1
log
@branched from 1.7
@
text
@@


1.6
log
@updating for commercial version flyer
@
text
@a0 2
commercial version may be purchased directly from Harlequin.

@


1.5
log
@switch off Compiling messages...
@
text
@d1 2
@


1.4
log
@updating.
@
text
@a1 1
Compiling basis.toplevel
a2 8
Compiling basis.string_cvt
Compiling basis.__pre_basis
Compiling basis.__pre_string_cvt
Compiling basis.__string_cvt
Compiling basis.__preinteger
Compiling basis.__preint32
Compiling basis.integer
Compiling basis.__integer
a46 9
Compiling basis.general
Compiling basis.__general
Compiling basis.math
Compiling basis.__math
Compiling basis.ieeereal
Compiling basis.__ieeereal
Compiling basis.__prereal
Compiling basis.real
Compiling basis.__real
a125 2
Compiling basis.list
Compiling basis.__list
@


1.3
log
@stringcvt->string_cvt
@
text
@a1 2
Compiling basis.general
Compiling basis.__general
a2 31
structure TopLevel =
  struct
    datatype 'a option =
      NONE |
      SOME of 'a
    datatype order =
      EQUAL |
      GREATER |
      LESS
    exception Domain
    val EQUAL : order
    exception Fail of string
    val GREATER : order
    val LESS : order
    val NONE : 'a option
    val SOME : 'a -> 'a option
  end
datatype 'a option =
  NONE |
  SOME of 'a
datatype order =
  EQUAL |
  GREATER |
  LESS
exception Domain
val EQUAL : order
exception Fail of string
val GREATER : order
val LESS : order
val NONE : 'a option
val SOME : 'a -> 'a option
d56 2
@


1.2
log
@Updating
@
text
@d37 4
a40 3
Compiling basis.stringcvt
Compiling basis.__pre_char
Compiling basis.__stringcvt
@


1.1
log
@new unit
New test
@
text
@d151 1
a151 1
    val negInf : real = ~Infinity
d153 1
a153 1
    val posInf : real = Infinity
@
