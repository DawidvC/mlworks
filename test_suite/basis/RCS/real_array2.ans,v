head	1.3;
access;
symbols
	MLWorks_21c0_1999_03_25:1.3
	MLWorks_20c1_1998_08_20:1.3
	MLWorks_20c0_1998_08_04:1.3
	MLWorks_20b2c2_1998_06_19:1.3
	MLWorks_20b2_Windows_1998_06_12:1.3
	MLWorks_20b1c1_1998_05_07:1.3
	MLWorks_20b0_1998_04_07:1.2
	MLWorks_20b0_1998_03_20:1.2
	MLWorks_20m2_1998_02_16:1.2
	MLWorks_20m1_1997_10_23:1.1
	MLWorks_11r1:1.1.1.1.1
	MLWorks_11c0_1997_09_09:1.1.1.1
	MLWorks_11:1.1.1;
locks; strict;
comment	@# @;


1.3
date	98.04.21.12.27.17;	author mitchell;	state Exp;
branches;
next	1.2;

1.2
date	97.11.25.19.23.09;	author daveb;	state Exp;
branches;
next	1.1;

1.1
date	97.08.08.15.29.12;	author brucem;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.08.13.16.21.49;	author johnh;	state Exp;
branches
	1.1.1.1.1.1;
next	;

1.1.1.1.1.1
date	97.10.07.12.15.03;	author jkbrook;	state Exp;
branches;
next	;


desc
@new unit
Answerfile
@


1.3
log
@[Bug #30336]
Fix tests to agree with change in spec of toString and fmt
@
text
@val allreg : 'a -> {base: 'a, col: int, ncols: 'b option, nrows: 'c option, row: int} = fn
val iprint : RealArray2.array -> unit = fn
val maken : (int * int) -> RealArray2.array = fn
val mkreg : ('a * 'b * 'c * 'd * 'e) -> {base: 'a, col: 'c, ncols: 'e option, nrows: 'd option, row: 'b} = fn
tabulate RowMajor

  0   1   2   3   4   5 
  6   7   8   9  10  11 
 12  13  14  15  16  17 
 18  19  20  21  22  23 

  0   0   0   0   0   0 
  1   1   1   1   1   1 
  2   2   2   2   2   2 
  3   3   3   3   3   3 

  0   1   2   3   4   5 
  0   1   2   3   4   5 
  0   1   2   3   4   5 
  0   1   2   3   4   5 
tabulate ColMajor 

  0   4   8  12  16  20 
  1   5   9  13  17  21 
  2   6  10  14  18  22 
  3   7  11  15  19  23 

  0   0   0   0   0   0 
  1   1   1   1   1   1 
  2   2   2   2   2   2 
  3   3   3   3   3   3 

  0   1   2   3   4   5 
  0   1   2   3   4   5 
  0   1   2   3   4   5 
  0   1   2   3   4   5 
val copytest : (int * int * int * int * int * int) -> unit = fn
copy test

  0   1   2   3   4   5   6   7 
  8   9  10  11  12  13  14  15 
 16  17  18  19   0   1  22  23 
 24  25  26  27   8   9  30  31 
 32  33  34  35  16  17  38  39 
 40  41  42  43  44  45  46  47 

  0   1   2   3   4   5   6   7 
  8   9  10  11  12  13  14  15 
  0   1  18  19  20  21  22  23 
  8   9  26  27  28  29  30  31 
 16  17  34  35  36  37  38  39 
 40  41  42  43  44  45  46  47 

 18  19   2   3   4   5   6   7 
 26  27  10  11  12  13  14  15 
 34  35  18  19  20  21  22  23 
 24  25  26  27  28  29  30  31 
 32  33  34  35  36  37  38  39 
 40  41  42  43  44  45  46  47 

  0   1   2   3   4   5   6   7 
  8   0   1   2  12  13  14  15 
 16   8   9  10  20  21  22  23 
 24  16  17  18  28  29  30  31 
 32  33  34  35  36  37  38  39 
 40  41  42  43  44  45  46  47 

  9  10  11   3   4   5   6   7 
 17  18  19  11  12  13  14  15 
 25  26  27  19  20  21  22  23 
 24  25  26  27  28  29  30  31 
 32  33  34  35  36  37  38  39 
 40  41  42  43  44  45  46  47 
val it : string = "OK"
val it : string = "OK"
val it : string = "OK"
val it : string = "OK"
val copytest2 : (int * int * int * int * int * int) -> unit = fn
copy test2

  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   1   0   0   0   0 
  0   0   0   0   8   9   0   0   0   0 
  0   0   0   0  16  17   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 

  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   1   0   0   0   0   0   0   0   0 
  8   9   0   0   0   0   0   0   0   0 
 16  17   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 

 18  19   0   0   0   0   0   0   0   0 
 26  27   0   0   0   0   0   0   0   0 
 34  35   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 

  0   0   0   0   0   0   0   0   0   0 
  0   0   1   2   0   0   0   0   0   0 
  0   8   9  10   0   0   0   0   0   0 
  0  16  17  18   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 

  9  10  11   0   0   0   0   0   0   0 
 17  18  19   0   0   0   0   0   0   0 
 25  26  27   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
val it : string = "OK"
app test
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 
0 6 12 18 1 7 13 19 2 8 14 20 3 9 15 21 4 10 16 22 5 11 17 23 
0 7 14 21 
0 7 14 21 
8 9 13 15 19 20 
13 19 8 20 9 15 
modify test
val it : unit = ()

  0   2   4   6   8  10 
 12   0  16  18  20  22 
 24  26   0  30  32  34 
 36  38  40   0  44  46 

  0   1   2   3   4   5 
  6   0  16  18  20  11 
 12  26   0  30  32  17 
 18  38  40   0  44  23 
modify RowMajor

  0   1   2   3   4   5 
  6   7   8   9  10  11 
 12  13  14  15  16  17 
 18  19  20  21  22  23 
modify ColMajor

  0   4   8  12  16  20 
  1   5   9  13  17  21 
  2   6  10  14  18  22 
  3   7  11  15  19  23 
fold test
val fold1 : real list = [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, ..]
val fold2 : real list = [0.0, 4.0, 8.0, 12.0, 1.0, 5.0, 9.0, 13.0, 2.0, 6.0, ..]
val fold3 : string = "OK"
val fold4 : string = "OK"
val fold5 : string = "OK"
val fold6 : real list = [0.0, 4.0, 8.0, 12.0, 1.0, 5.0, 9.0, 13.0, 2.0, 6.0, ..]
@


1.2
log
@[Bug #30323]
@
text
@d7 14
a20 14
0.0 1.0 2.0 3.0 4.0 5.0 
6.0 7.0 8.0 9.0 10.0 11.0 
12.0 13.0 14.0 15.0 16.0 17.0 
18.0 19.0 20.0 21.0 22.0 23.0 

0.0 0.0 0.0 0.0 0.0 0.0 
1.0 1.0 1.0 1.0 1.0 1.0 
2.0 2.0 2.0 2.0 2.0 2.0 
3.0 3.0 3.0 3.0 3.0 3.0 

0.0 1.0 2.0 3.0 4.0 5.0 
0.0 1.0 2.0 3.0 4.0 5.0 
0.0 1.0 2.0 3.0 4.0 5.0 
0.0 1.0 2.0 3.0 4.0 5.0 
d23 14
a36 14
0.0 4.0 8.0 12.0 16.0 20.0 
1.0 5.0 9.0 13.0 17.0 21.0 
2.0 6.0 10.0 14.0 18.0 22.0 
3.0 7.0 11.0 15.0 19.0 23.0 

0.0 0.0 0.0 0.0 0.0 0.0 
1.0 1.0 1.0 1.0 1.0 1.0 
2.0 2.0 2.0 2.0 2.0 2.0 
3.0 3.0 3.0 3.0 3.0 3.0 

0.0 1.0 2.0 3.0 4.0 5.0 
0.0 1.0 2.0 3.0 4.0 5.0 
0.0 1.0 2.0 3.0 4.0 5.0 
0.0 1.0 2.0 3.0 4.0 5.0 
d40 34
a73 34
0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 
8.0 9.0 10.0 11.0 12.0 13.0 14.0 15.0 
16.0 17.0 18.0 19.0 0.0 1.0 22.0 23.0 
24.0 25.0 26.0 27.0 8.0 9.0 30.0 31.0 
32.0 33.0 34.0 35.0 16.0 17.0 38.0 39.0 
40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 

0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 
8.0 9.0 10.0 11.0 12.0 13.0 14.0 15.0 
0.0 1.0 18.0 19.0 20.0 21.0 22.0 23.0 
8.0 9.0 26.0 27.0 28.0 29.0 30.0 31.0 
16.0 17.0 34.0 35.0 36.0 37.0 38.0 39.0 
40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 

18.0 19.0 2.0 3.0 4.0 5.0 6.0 7.0 
26.0 27.0 10.0 11.0 12.0 13.0 14.0 15.0 
34.0 35.0 18.0 19.0 20.0 21.0 22.0 23.0 
24.0 25.0 26.0 27.0 28.0 29.0 30.0 31.0 
32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 
40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 

0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 
8.0 0.0 1.0 2.0 12.0 13.0 14.0 15.0 
16.0 8.0 9.0 10.0 20.0 21.0 22.0 23.0 
24.0 16.0 17.0 18.0 28.0 29.0 30.0 31.0 
32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 
40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 

9.0 10.0 11.0 3.0 4.0 5.0 6.0 7.0 
17.0 18.0 19.0 11.0 12.0 13.0 14.0 15.0 
25.0 26.0 27.0 19.0 20.0 21.0 22.0 23.0 
24.0 25.0 26.0 27.0 28.0 29.0 30.0 31.0 
32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 
40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 
d81 54
a134 54
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 
0.0 0.0 0.0 0.0 8.0 9.0 0.0 0.0 0.0 0.0 
0.0 0.0 0.0 0.0 16.0 17.0 0.0 0.0 0.0 0.0 
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 

0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
8.0 9.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
16.0 17.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 

18.0 19.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
26.0 27.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
34.0 35.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 

0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
0.0 0.0 1.0 2.0 0.0 0.0 0.0 0.0 0.0 0.0 
0.0 8.0 9.0 10.0 0.0 0.0 0.0 0.0 0.0 0.0 
0.0 16.0 17.0 18.0 0.0 0.0 0.0 0.0 0.0 0.0 
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 

9.0 10.0 11.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
17.0 18.0 19.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
25.0 26.0 27.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
d137 6
a142 6
0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 15.0 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 
0.0 6.0 12.0 18.0 1.0 7.0 13.0 19.0 2.0 8.0 14.0 20.0 3.0 9.0 15.0 21.0 4.0 10.0 16.0 22.0 5.0 11.0 17.0 23.0 
0.0 7.0 14.0 21.0 
0.0 7.0 14.0 21.0 
8.0 9.0 13.0 15.0 19.0 20.0 
13.0 19.0 8.0 20.0 9.0 15.0 
d146 9
a154 9
0.0 2.0 4.0 6.0 8.0 10.0 
12.0 0.0 16.0 18.0 20.0 22.0 
24.0 26.0 0.0 30.0 32.0 34.0 
36.0 38.0 40.0 0.0 44.0 46.0 

0.0 1.0 2.0 3.0 4.0 5.0 
6.0 0.0 16.0 18.0 20.0 11.0 
12.0 26.0 0.0 30.0 32.0 17.0 
18.0 38.0 40.0 0.0 44.0 23.0 
d157 4
a160 4
0.0 1.0 2.0 3.0 4.0 5.0 
6.0 7.0 8.0 9.0 10.0 11.0 
12.0 13.0 14.0 15.0 16.0 17.0 
18.0 19.0 20.0 21.0 22.0 23.0 
d163 4
a166 4
0.0 4.0 8.0 12.0 16.0 20.0 
1.0 5.0 9.0 13.0 17.0 21.0 
2.0 6.0 10.0 14.0 18.0 22.0 
3.0 7.0 11.0 15.0 19.0 23.0 
@


1.1
log
@new unit
Answerfile
@
text
@a0 3
structure RealArray2 = struct ... end
structure LargeReal = struct ... end
structure Real = struct ... end
@


1.1.1.1
log
@branched from *NoSuchBranch* for label MLWorks_11
@
text
@@


1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@
