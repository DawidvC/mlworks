head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	96.06.19.13.34.14;	author stephenb;	state Exp;
branches;
next	;


desc
@new unit
@


1.1
log
@new unit
@
text
@val it : unit = ()
Compiling basis.general
Compiling basis.__general
Compiling basis.toplevel
Compiling basis.string_cvt
Compiling basis.__pre_basis
Compiling basis.__pre_string_cvt
Compiling basis.__string_cvt
Compiling basis.__preinteger
Compiling basis.__preint32
Compiling basis.integer
Compiling basis.__integer
Compiling basis.__position
Compiling basis.char
Compiling basis.__char
Compiling basis.math
Compiling basis.__math
Compiling basis.ieeereal
Compiling basis.__ieeereal
Compiling basis.__prereal
Compiling basis.real
Compiling basis.__real
Compiling basis.time
Compiling unix.__time
Compiling basis.os_file_sys
Compiling basis.os_path
Compiling basis.os_process
Compiling basis.os_io
Compiling basis.os
Compiling basis.__preword32
Compiling basis.__preword
Compiling basis.word
Compiling basis.__word32
Compiling unix.unixos
Compiling unix._os
Compiling unix._unixos
Compiling unix.__unixos
Compiling basis.list
Compiling basis.__list
Compiling basis.string
Compiling basis.__string
Compiling unix.__os_path
Compiling basis.__word
Compiling unix._os_file_sys
Compiling unix.__os_file_sys
Compiling basis.__exit
Compiling basis.exit
Compiling basis._os_process
Compiling basis.__os_process
Compiling unix._os_io
Compiling unix.__os_io
Compiling unix.__os
structure OS =
  struct
    structure FileSys =
      struct
        datatype access_mode =
          A_EXEC |
          A_READ |
          A_WRITE
        eqtype dirstream = dirstream
        eqtype file_id = file_id
        val A_EXEC : OS.FileSys.access_mode
        val A_READ : OS.FileSys.access_mode
        val A_WRITE : OS.FileSys.access_mode
        val access : (string * OS.FileSys.access_mode list) -> bool = fn
        val chDir : string -> unit = fn
        val closeDir : OS.FileSys.dirstream -> unit = fn
        val compare : (OS.FileSys.file_id * OS.FileSys.file_id) -> order(hidden) = fn
        val fileId : string -> OS.FileSys.file_id = fn
        val fileSize : string -> int = fn
        val fullPath : string -> string = fn
        val getDir : unit -> string = fn
        val hash : OS.FileSys.file_id -> word = fn
        val isDir : string -> bool = fn
        val isLink : string -> bool = fn
        val mkDir : string -> unit = fn
        val modTime : string -> time(hidden) = fn
        val openDir : string -> OS.FileSys.dirstream = fn
        val readDir : OS.FileSys.dirstream -> string = fn
        val readLink : string -> string = fn
        val realPath : string -> string = fn
        val remove : string -> unit = fn
        val rename : {new: string, old: string} -> unit = fn
        val rewindDir : OS.FileSys.dirstream -> unit = fn
        val rmDir : string -> unit = fn
        val setTime : (string * time(hidden) MLWorks.Option.option) -> unit = fn
        val tmpName : unit -> string = fn
      end
    structure IO =
      struct
        structure Kind = struct ... end
        eqtype io_desc = file_desc
        eqtype io_desc_kind = io_desc_kind
        eqtype poll_desc = poll_desc
        eqtype poll_info = poll_info
        exception Poll
        val compare : (OS.IO.io_desc * OS.IO.io_desc) -> order(hidden) = fn
        val hash : OS.IO.io_desc -> word = fn
        val infoToPollDesc : OS.IO.poll_info -> OS.IO.poll_desc = fn
        val isIn : OS.IO.poll_info -> bool = fn
        val isOut : OS.IO.poll_info -> bool = fn
        val isPri : OS.IO.poll_info -> bool = fn
        val kind : OS.IO.io_desc -> OS.IO.io_desc_kind = fn
        val poll : (OS.IO.poll_desc list * time(hidden) MLWorks.Option.option) -> OS.IO.poll_info list = fn
        val pollDesc : OS.IO.io_desc -> OS.IO.poll_desc MLWorks.Option.option = fn
        val pollIn : OS.IO.poll_desc -> OS.IO.poll_desc = fn
        val pollOut : OS.IO.poll_desc -> OS.IO.poll_desc = fn
        val pollPri : OS.IO.poll_desc -> OS.IO.poll_desc = fn
        val pollToIODesc : OS.IO.poll_desc -> OS.IO.io_desc = fn
      end
    structure Path =
      struct
        exception Path
        val base : string -> string = fn
        val concat : (string * string) -> string = fn
        val currentArc : string = "."
        val dir : string -> string = fn
        val ext : string -> string MLWorks.Option.option = fn
        val file : string -> string = fn
        val fromString : string -> {arcs: string list, isAbs: bool, vol: string} = fn
        val getParent : string -> string = fn
        val getVolume : string -> string = fn
        val isAbsolute : string -> bool = fn
        val isCanonical : string -> bool = fn
        val isRelative : string -> bool = fn
        val isRoot : string -> bool = fn
        val joinBaseExt : {base: string, ext: string MLWorks.Option.option} -> string = fn
        val joinDirFile : {dir: string, file: string} -> string = fn
        val mkAbsolute : (string * string) -> string = fn
        val mkCanonical : string -> string = fn
        val mkRelative : (string * string) -> string = fn
        val parentArc : string = ".."
        val splitBaseExt : string -> {base: string, ext: string MLWorks.Option.option} = fn
        val splitDirFile : string -> {dir: string, file: string} = fn
        val toString : {arcs: string list, isAbs: bool, vol: string} -> string = fn
        val validVolume : {isAbs: bool, vol: string} -> bool = fn
      end
    structure Process =
      struct
        eqtype status = int
        val atExit : (unit -> unit) -> unit = fn
        val exit : int -> 'a = fn
        val failure : int = 1
        val getEnv : string -> string MLWorks.Option.option = fn
        val success : int = 0
        val system : string -> int = fn
        val terminate : int -> 'a = fn
      end
    eqtype syserror = int
    exception SysErr of (string * syserror option)
    val errorMsg : int -> string = fn
    val errorName : int -> string = fn
    val syserror : string -> int MLWorks.Option.option = fn
  end
exception Path
val base : string -> string = fn
val concat : (string * string) -> string = fn
val currentArc : string = "."
val dir : string -> string = fn
val ext : string -> string MLWorks.Option.option = fn
val file : string -> string = fn
val fromString : string -> {arcs: string list, isAbs: bool, vol: string} = fn
val getParent : string -> string = fn
val getVolume : string -> string = fn
val isAbsolute : string -> bool = fn
val isCanonical : string -> bool = fn
val isRelative : string -> bool = fn
val isRoot : string -> bool = fn
val joinBaseExt : {base: string, ext: string MLWorks.Option.option} -> string = fn
val joinDirFile : {dir: string, file: string} -> string = fn
val mkAbsolute : (string * string) -> string = fn
val mkCanonical : string -> string = fn
val mkRelative : (string * string) -> string = fn
val parentArc : string = ".."
val splitBaseExt : string -> {base: string, ext: string MLWorks.Option.option} = fn
val splitDirFile : string -> {dir: string, file: string} = fn
val toString : {arcs: string list, isAbs: bool, vol: string} -> string = fn
val validVolume : {isAbs: bool, vol: string} -> bool = fn
val a : bool = true
val b : bool = true
val c : bool = true
val d : bool = true
val e : bool = true
val f : bool = true
val g : bool = true
val h : bool = true
val i : bool = true
val i : bool = true
val j : bool = true
val k : bool = true
val l : bool = true
@
