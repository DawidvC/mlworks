head	1.3;
access;
symbols
	MLWorks_21c0_1999_03_25:1.3
	MLWorks_20c1_1998_08_20:1.3
	MLWorks_20c0_1998_08_04:1.3
	MLWorks_20b2c2_1998_06_19:1.2
	MLWorks_20b2_Windows_1998_06_12:1.2
	MLWorks_20b1c1_1998_05_07:1.2
	MLWorks_20b0_1998_04_07:1.2
	MLWorks_20b0_1998_03_20:1.2
	MLWorks_20m2_1998_02_16:1.2
	MLWorks_20m1_1997_10_23:1.1
	MLWorks_20m0_1997_06_20:1.1;
locks; strict;
comment	@# @;


1.3
date	98.07.08.14.40.07;	author jont;	state Exp;
branches;
next	1.2;

1.2
date	97.11.25.19.25.46;	author daveb;	state Exp;
branches;
next	1.1;

1.1
date	97.05.23.12.40.23;	author jkbrook;	state Exp;
branches;
next	;


desc
@new unit
Answer file for sys_word.sml
@


1.3
log
@[Bug #70106]
Avoid getting LargeWord into answers, since it can appear as flags
@
text
@val it : bool = true
@


1.2
log
@[Bug #30323]
@
text
@d1 1
a1 1
val it : LargeWord.word = 0w3
@


1.1
log
@new unit
Answer file for sys_word.sml
@
text
@d1 1
a1 39
val it : unit = ()
structure SysWord =
  struct
    eqtype word = word32
    val * : (SysWord.word * SysWord.word) -> SysWord.word = fn
    val + : (SysWord.word * SysWord.word) -> SysWord.word = fn
    val - : (SysWord.word * SysWord.word) -> SysWord.word = fn
    val < : (SysWord.word * SysWord.word) -> bool = fn
    val << : (SysWord.word * word) -> SysWord.word = fn
    val <= : (SysWord.word * SysWord.word) -> bool = fn
    val > : (SysWord.word * SysWord.word) -> bool = fn
    val >= : (SysWord.word * SysWord.word) -> bool = fn
    val >> : (SysWord.word * word) -> SysWord.word = fn
    val andb : (SysWord.word * SysWord.word) -> SysWord.word = fn
    val compare : (SysWord.word * SysWord.word) -> order = fn
    val div : (SysWord.word * SysWord.word) -> SysWord.word = fn
    val fmt : radix(hidden) -> SysWord.word -> string = fn
    val fromInt : int -> SysWord.word = fn
    val fromLargeInt : MLWorks.Internal.Types.int32 -> SysWord.word = fn
    val fromLargeWord : SysWord.word -> SysWord.word = fn
    val fromString : string -> SysWord.word option = fn
    val max : (SysWord.word * SysWord.word) -> SysWord.word = fn
    val min : (SysWord.word * SysWord.word) -> SysWord.word = fn
    val mod : (SysWord.word * SysWord.word) -> SysWord.word = fn
    val notb : SysWord.word -> SysWord.word = fn
    val orb : (SysWord.word * SysWord.word) -> SysWord.word = fn
    val scan : radix(hidden) -> ('a -> (char * 'a) option) -> 'a -> (SysWord.word * 'a) option = fn
    val toInt : SysWord.word -> int = fn
    val toIntX : SysWord.word -> int = fn
    val toLargeInt : SysWord.word -> MLWorks.Internal.Types.int32 = fn
    val toLargeIntX : SysWord.word -> MLWorks.Internal.Types.int32 = fn
    val toLargeWord : SysWord.word -> SysWord.word = fn
    val toLargeWordX : SysWord.word -> SysWord.word = fn
    val toString : SysWord.word -> string = fn
    val wordSize : int = 32
    val xorb : (SysWord.word * SysWord.word) -> SysWord.word = fn
    val ~>> : (SysWord.word * word) -> SysWord.word = fn
  end
val it : SysWord.word = 0w3
@
