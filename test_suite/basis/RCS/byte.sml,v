head	1.7;
access;
symbols
	MLWorks_21c0_1999_03_25:1.7
	MLWorks_20c1_1998_08_20:1.7
	MLWorks_20c0_1998_08_04:1.7
	MLWorks_20b2c2_1998_06_19:1.7
	MLWorks_20b2_Windows_1998_06_12:1.7
	MLWorks_20b1c1_1998_05_07:1.7
	MLWorks_20b0_1998_04_07:1.7
	MLWorks_20b0_1998_03_20:1.7
	MLWorks_20m2_1998_02_16:1.6
	MLWorks_20m1_1997_10_23:1.5
	MLWorks_11r1:1.4.1.1.1.1.1
	MLWorks_11c0_1997_09_09:1.4.1.1.1.1
	MLWorks_10r3:1.4.1.1.3
	MLWorks_10r2_551:1.4.1.1.2
	MLWorks_11:1.4.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.4.1.1
	MLWorks_20m0_1997_06_20:1.5
	MLWorks_1_0_r2c2_1997_06_14:1.4.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.4.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.4.1
	MLWorks_BugFix_1997_04_24:1.4
	MLWorks_1_0_r2_Win32_1997_04_11:1.4
	MLWorks_1_0_r2_Unix_1997_04_04:1.4
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.3.3.1.1
	MLWorks_gui_1996_12_18:1.3.4
	MLWorks_1_0_Win32_1996_12_17:1.3.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.3.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.3.1.1
	MLWorks_1_0_Irix_1996_11_28:1.3.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.3.2
	MLWorks_1_0_Unix_1996_11_14:1.3.1
	MLWorks_Open_Beta2_1996_10_11:1.2.3
	MLWorks_License_dev:1.2.2
	MLWorks_1_open_beta_1996_09_13:1.2.1
	MLWorks_Open_Beta_1996_08_22:1.2
	MLWorks_Beta_1996_07_02:1.2
	MLWorks_Beta_1996_06_07:1.2
	MLWorks_Beta_1996_06_06:1.2
	MLWorks_Beta_1996_06_05:1.2
	MLWorks_Beta_1996_06_03:1.2
	MLWorks_Beta_1996_05_31:1.2
	MLWorks_Beta_1996_05_30:1.2;
locks; strict;
comment	@ *  @;


1.7
date	98.02.18.11.56.01;	author mitchell;	state Exp;
branches;
next	1.6;

1.6
date	97.11.21.10.43.22;	author daveb;	state Exp;
branches;
next	1.5;

1.5
date	97.05.28.11.34.32;	author matthew;	state Exp;
branches;
next	1.4;

1.4
date	97.01.15.15.52.09;	author io;	state Exp;
branches
	1.4.1.1;
next	1.3;

1.3
date	96.10.22.13.20.06;	author jont;	state Exp;
branches
	1.3.1.1
	1.3.2.1
	1.3.3.1
	1.3.4.1;
next	1.2;

1.2
date	96.05.24.13.15.04;	author io;	state Exp;
branches
	1.2.1.1
	1.2.2.1
	1.2.3.1;
next	1.1;

1.1
date	96.05.23.10.35.01;	author io;	state Exp;
branches;
next	;

1.2.1.1
date	96.09.13.11.37.57;	author hope;	state Exp;
branches;
next	;

1.2.2.1
date	96.10.07.16.29.17;	author hope;	state Exp;
branches;
next	;

1.2.3.1
date	96.10.17.11.50.04;	author hope;	state Exp;
branches;
next	;

1.3.1.1
date	96.11.14.13.17.28;	author hope;	state Exp;
branches
	1.3.1.1.1.1;
next	;

1.3.1.1.1.1
date	96.11.28.15.27.56;	author hope;	state Exp;
branches;
next	;

1.3.2.1
date	96.11.22.18.35.16;	author hope;	state Exp;
branches;
next	;

1.3.3.1
date	96.12.17.18.14.14;	author hope;	state Exp;
branches
	1.3.3.1.1.1;
next	;

1.3.3.1.1.1
date	97.02.24.12.07.08;	author hope;	state Exp;
branches;
next	;

1.3.4.1
date	96.12.18.10.09.13;	author hope;	state Exp;
branches;
next	;

1.4.1.1
date	97.05.12.11.07.46;	author hope;	state Exp;
branches
	1.4.1.1.1.1
	1.4.1.1.2.1
	1.4.1.1.3.1;
next	;

1.4.1.1.1.1
date	97.07.28.18.50.11;	author daveb;	state Exp;
branches
	1.4.1.1.1.1.1.1;
next	;

1.4.1.1.1.1.1.1
date	97.10.07.12.14.25;	author jkbrook;	state Exp;
branches;
next	;

1.4.1.1.2.1
date	97.09.08.17.42.01;	author daveb;	state Exp;
branches;
next	;

1.4.1.1.3.1
date	97.09.09.14.41.26;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
@


1.7
log
@[Bug #30349]
Fix test to avoid non-unit sequence warning
@
text
@(*  ==== Testing ====
 *
    Result: OK
 *
 *  Copyright (C) 1996 Harlequin Ltd.
 *
 *  Revision Log
 *  ------------
 *  $Log: byte.sml,v $
 *  Revision 1.6  1997/11/21  10:43:22  daveb
 *  [Bug #30323]
 *
 *  Revision 1.5  1997/05/28  11:34:32  matthew
 *  Updating
 *
 *  Revision 1.4  1997/01/15  15:52:09  io
 *  [Bug #1892]
 *  rename __word{8,16,32}{array,vector} to __word{8,16,32}_{array,vector}
 *
 *  Revision 1.3  1996/10/22  13:20:06  jont
 *  Remove references to toplevel
 *
 *  Revision 1.2  1996/05/24  13:15:04  io
 *  ** No reason given. **
 *
 *  Revision 1.1  1996/05/23  10:35:01  io
 *  new unit
 *
 *)

local
  fun print_result s res = print (s^":"^res^"\n")
  fun check' s f = print_result s ((if (f ()) then "OK" else "WRONG") handle exn => "FAIL:"^General.exnName exn)
  fun checkexn' s exn f = 
    let val result = (ignore(f ()); "FAIL") handle ex =>
      if General.exnName ex = General.exnName exn then 
        "OKEXN" 
      else 
        "BADEXN:" ^ (General.exnName ex)
    in
      print_result s result
    end
  fun check s b = print_result s (if b then "OK" else "WRONG")
  fun range (from, to) p = 
    (from > to) orelse (p from) andalso (range (from+1, to) p)
  fun checkrange bounds = (fn x=> if x then "OK" else "WRONG") o range bounds
    
  val test1 = print_result "test1" 
    (checkrange (0,Char.maxOrd)
     (fn i => 
      (Word8.toInt o Byte.charToByte o Byte.byteToChar o Word8.fromInt) i = i))
  val test1a = print_result "test1a" 
    (checkrange (0,Char.maxOrd)
     (fn i=>
      (Char.ord o Byte.byteToChar o Byte.charToByte o Char.chr) i = i))
  val test2 = print_result "test2"
    (checkrange (0, Char.maxOrd) 
     (fn i=>
      (Word8.toInt o Byte.charToByte o Char.chr) i = i))
  val test3 = print_result "test3" 
    (checkrange (0,255) 
     (fn i => (Char.ord o Byte.byteToChar o Word8.fromInt) i = i))
  val test4 = print_result "test4" 
    (checkrange (0, Char.maxOrd) 
     (fn i => (Char.ord o Char.chr) i = i))
  val test5 = check "test5" 
    ("" = Byte.bytesToString (Word8Vector.fromList []))
  val test5a = check "test5a"
    ("abc\000def" = (Byte.bytesToString o Byte.stringToBytes) "abc\000def")
  val test6 = check "test6"
    ("ABDC" = (Byte.bytesToString o Word8Vector.fromList o map Word8.fromInt)
     [65,66,68,67])
  val test7 = check "test7" 
    ("" = Byte.unpackString (Word8Array.fromList [], 0, SOME 0))
  val arr = Word8Array.tabulate(10, fn i => Word8.fromInt(i+65))
  val test8 = check "test8" 
    ("" = Byte.unpackString(arr, 0, SOME 0))
  val test9 = check "test9" 
    ("" = Byte.unpackString(arr, 10, SOME 0) andalso
     "" = Byte.unpackString(arr, 10, NONE))
  val test10 = check "test10"
    ("BCDE" = Byte.unpackString(arr, 1, SOME 4))
  val test10d = checkexn' "test10d" Subscript
    (fn _=> Byte.unpackString(arr, ~1, SOME 0))
  val test10e = checkexn' "test10e" Subscript
    (fn _=>Byte.unpackString(arr, 11, SOME 0))
  val test10f = checkexn' "test10f" Subscript
    (fn _=>Byte.unpackString(arr, 0, SOME ~1))
  val test10g = checkexn' "test10g" Subscript
    (fn _=>Byte.unpackString(arr, 0, SOME 11))
  val test10h = checkexn' "test10h" Subscript
    (fn _=>Byte.unpackString(arr, 10, SOME 1))
  val test10i = checkexn' "test10i" Subscript
    (fn _=>Byte.unpackString(arr, ~1, NONE))
  val test10j = checkexn' "test10j" Subscript
    (fn _=>Byte.unpackString(arr, 11, NONE))
    
  val vec = Word8Vector.tabulate(10, fn i => Word8.fromInt(i+65))
  val test11a = check "test11a" 
    ("" = Byte.unpackStringVec(vec, 0, SOME 0))
  val test11b = check "test11b" 
    ("" = Byte.unpackStringVec(vec, 10, SOME 0) andalso
     "" = Byte.unpackStringVec(vec, 10, NONE))
  val test11c = check "test11c" 
    ("BCDE" = Byte.unpackStringVec(vec, 1, SOME 4))
  val test11d = checkexn' "test11d"  Subscript
    (fn _=>Byte.unpackStringVec(vec, ~1, SOME 0))
  val test11e = checkexn' "test11e" Subscript
    (fn _=>Byte.unpackStringVec(vec, 11, SOME 0))
  val test11f = checkexn' "test11f" Subscript
    (fn _=>Byte.unpackStringVec(vec, 0, SOME ~1))
  val test11g = checkexn' "test11g" Subscript 
    (fn _=>Byte.unpackStringVec(vec, 0, SOME 11))
  val test11h = checkexn' "test11h" Subscript 
    (fn _=>Byte.unpackStringVec(vec, 10, SOME 1))
  val test11i = checkexn' "test11i" Subscript 
    (fn _=>Byte.unpackStringVec(vec, ~1, NONE))
  val test11j = checkexn' "test11j" Subscript 
    (fn _=>Byte.unpackStringVec(vec, 11, NONE))
in
  val it = ()
end
@


1.6
log
@[Bug #30323]
@
text
@d10 3
d35 1
a35 1
    let val result = (f (); "FAIL") handle ex =>
@


1.5
log
@Updating
@
text
@d10 3
a26 8
Shell.Options.set (Shell.Options.ValuePrinter.maximumStrDepth,0);

Shell.Build.loadSource "basis.__byte";
Shell.Build.loadSource "basis.__general";
Shell.Build.loadSource "basis.__word8";
Shell.Build.loadSource "basis.__word8_vector";
Shell.Build.loadSource "basis.__word8_array";
Shell.Build.loadSource "basis.__char";
@


1.4
log
@[Bug #1892]
rename __word{8,16,32}{array,vector} to __word{8,16,32}_{array,vector}
@
text
@d10 4
d24 2
d34 2
a35 3
  open MLWorks.IO
  fun print s res = (output(std_out,s^":"^res^"\n"))
  fun check' s f = print s ((if (f ()) then "OK" else "WRONG") handle exn => "FAIL:"^General.exnName exn)
d43 1
a43 1
      print s result
d45 1
a45 1
  fun check s b = print s (if b then "OK" else "WRONG")
d50 1
a50 1
  val test1 = print "test1" 
d54 1
a54 1
  val test1a = print "test1a" 
d58 1
a58 1
  val test2 = print "test2"
d62 1
a62 1
  val test3 = print "test3" 
d65 1
a65 1
  val test4 = print "test4" 
@


1.4.1.1
log
@branched from 1.4
@
text
@a9 4
 *  Revision 1.4  1997/01/15  15:52:09  io
 *  [Bug #1892]
 *  rename __word{8,16,32}{array,vector} to __word{8,16,32}_{array,vector}
 *
@


1.4.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a9 3
 *  Revision 1.4.1.1  1997/05/12  11:07:46  hope
 *  branched from 1.4
 *
@


1.4.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a9 3
 *  Revision 1.4.1.1  1997/05/12  11:07:46  hope
 *  branched from 1.4
 *
@


1.4.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a9 3
 *  Revision 1.4.1.1  1997/05/12  11:07:46  hope
 *  branched from 1.4
 *
@


1.4.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a9 3
 *  Revision 1.4.1.1.1.1  1997/07/28  18:50:11  daveb
 *  branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.3
log
@Remove references to toplevel
@
text
@d10 3
d23 2
a24 2
Shell.Build.loadSource "basis.__word8vector";
Shell.Build.loadSource "basis.__word8array";
@


1.3.4.1
log
@branched from 1.3
@
text
@a9 3
 *  Revision 1.3  1996/10/22  13:20:06  jont
 *  Remove references to toplevel
 *
@


1.3.3.1
log
@branched from 1.3
@
text
@a9 3
 *  Revision 1.3  1996/10/22  13:20:06  jont
 *  Remove references to toplevel
 *
@


1.3.3.1.1.1
log
@branched from 1.3.3.1
@
text
@a9 3
 *  Revision 1.3.3.1  1996/12/17  18:14:14  hope
 *  branched from 1.3
 *
@


1.3.2.1
log
@branched from 1.3
@
text
@a9 3
 *  Revision 1.3  1996/10/22  13:20:06  jont
 *  Remove references to toplevel
 *
@


1.3.1.1
log
@branched from 1.3
@
text
@a9 3
 *  Revision 1.3  1996/10/22  13:20:06  jont
 *  Remove references to toplevel
 *
@


1.3.1.1.1.1
log
@branched from 1.3.1.1
@
text
@a9 3
 *  Revision 1.3.1.1  1996/11/14  13:17:28  hope
 *  branched from 1.3
 *
@


1.2
log
@** No reason given. **
@
text
@d9 4
a12 1
 *  $Log: basis:byte.sml,v $
a17 1
Shell.Build.loadSource "basis.toplevel";
@


1.2.3.1
log
@branched from 1.2
@
text
@d9 1
a9 4
 *  $Log: byte.sml,v $
 *  Revision 1.2  1996/05/24  13:15:04  io
 *  ** No reason given. **
 *
@


1.2.2.1
log
@branched from 1.2
@
text
@d9 1
a9 4
 *  $Log: byte.sml,v $
 *  Revision 1.2  1996/05/24  13:15:04  io
 *  ** No reason given. **
 *
@


1.2.1.1
log
@branched from 1.2
@
text
@d9 1
a9 4
 *  $Log: byte.sml,v $
 *  Revision 1.2  1996/05/24  13:15:04  io
 *  ** No reason given. **
 *
@


1.1
log
@new unit
@
text
@d9 4
a12 1
 *  $Log$
d14 1
a16 1
Shell.Build.loadSource "basis.__byte";
d21 1
@
