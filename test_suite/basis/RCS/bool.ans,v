head	1.12;
access;
symbols
	MLWorks_21c0_1999_03_25:1.12
	MLWorks_20c1_1998_08_20:1.12
	MLWorks_20c0_1998_08_04:1.12
	MLWorks_20b2c2_1998_06_19:1.12
	MLWorks_20b2_Windows_1998_06_12:1.12
	MLWorks_20b1c1_1998_05_07:1.12
	MLWorks_20b0_1998_04_07:1.12
	MLWorks_20b0_1998_03_20:1.12
	MLWorks_20m2_1998_02_16:1.12
	MLWorks_20m1_1997_10_23:1.11
	MLWorks_11r1:1.10.1.1.1.1.1
	MLWorks_11c0_1997_09_09:1.10.1.1.1.1
	MLWorks_10r3:1.10.1.1.3
	MLWorks_10r2_551:1.10.1.1.2
	MLWorks_11:1.10.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.10.1.1
	MLWorks_20m0_1997_06_20:1.11
	MLWorks_1_0_r2c2_1997_06_14:1.10.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.10.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.10.1
	MLWorks_BugFix_1997_04_24:1.10
	MLWorks_1_0_r2_Win32_1997_04_11:1.10
	MLWorks_1_0_r2_Unix_1997_04_04:1.10
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.9.3.1.1
	MLWorks_gui_1996_12_18:1.9.4
	MLWorks_1_0_Win32_1996_12_17:1.9.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.9.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.9.1.1
	MLWorks_1_0_Irix_1996_11_28:1.9.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.9.2
	MLWorks_1_0_Unix_1996_11_14:1.9.1
	MLWorks_Open_Beta2_1996_10_11:1.8.3
	MLWorks_License_dev:1.8.2
	MLWorks_1_open_beta_1996_09_13:1.8.1
	MLWorks_Open_Beta_1996_08_22:1.6
	MLWorks_Beta_1996_07_02:1.4
	MLWorks_Beta_1996_06_07:1.3
	MLWorks_Beta_1996_06_06:1.3
	MLWorks_Beta_1996_06_05:1.3
	MLWorks_Beta_1996_06_03:1.2
	MLWorks_Beta_1996_05_31:1.2
	MLWorks_Beta_1996_05_30:1.2;
locks; strict;
comment	@# @;


1.12
date	97.11.25.19.17.54;	author daveb;	state Exp;
branches;
next	1.11;

1.11
date	97.05.28.11.29.44;	author matthew;	state Exp;
branches;
next	1.10;

1.10
date	97.03.06.13.50.57;	author matthew;	state Exp;
branches
	1.10.1.1;
next	1.9;

1.9
date	96.10.22.13.26.32;	author jont;	state Exp;
branches
	1.9.1.1
	1.9.2.1
	1.9.3.1
	1.9.4.1;
next	1.8;

1.8
date	96.09.09.11.14.00;	author io;	state Exp;
branches
	1.8.1.1
	1.8.2.1
	1.8.3.1;
next	1.7;

1.7
date	96.09.07.00.02.24;	author io;	state Exp;
branches;
next	1.6;

1.6
date	96.08.14.11.15.14;	author io;	state Exp;
branches;
next	1.5;

1.5
date	96.07.04.17.59.18;	author andreww;	state Exp;
branches;
next	1.4;

1.4
date	96.06.25.09.27.28;	author io;	state Exp;
branches;
next	1.3;

1.3
date	96.06.04.23.29.40;	author io;	state Exp;
branches;
next	1.2;

1.2
date	96.05.16.09.57.11;	author io;	state Exp;
branches;
next	1.1;

1.1
date	96.05.08.19.15.39;	author io;	state Exp;
branches;
next	;

1.8.1.1
date	96.09.13.11.37.45;	author hope;	state Exp;
branches;
next	;

1.8.2.1
date	96.10.07.16.29.01;	author hope;	state Exp;
branches;
next	;

1.8.3.1
date	96.10.17.11.49.49;	author hope;	state Exp;
branches;
next	;

1.9.1.1
date	96.11.14.13.17.13;	author hope;	state Exp;
branches
	1.9.1.1.1.1;
next	;

1.9.1.1.1.1
date	96.11.28.15.27.42;	author hope;	state Exp;
branches;
next	;

1.9.2.1
date	96.11.22.18.35.02;	author hope;	state Exp;
branches;
next	;

1.9.3.1
date	96.12.17.18.13.59;	author hope;	state Exp;
branches
	1.9.3.1.1.1;
next	;

1.9.3.1.1.1
date	97.02.24.12.06.50;	author hope;	state Exp;
branches;
next	;

1.9.4.1
date	96.12.18.10.08.57;	author hope;	state Exp;
branches;
next	;

1.10.1.1
date	97.05.12.11.07.31;	author hope;	state Exp;
branches
	1.10.1.1.1.1
	1.10.1.1.2.1
	1.10.1.1.3.1;
next	;

1.10.1.1.1.1
date	97.07.28.18.49.56;	author daveb;	state Exp;
branches
	1.10.1.1.1.1.1.1;
next	;

1.10.1.1.1.1.1.1
date	97.10.07.12.15.09;	author jkbrook;	state Exp;
branches;
next	;

1.10.1.1.2.1
date	97.09.08.17.41.44;	author daveb;	state Exp;
branches;
next	;

1.10.1.1.3.1
date	97.09.09.14.41.09;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
@


1.12
log
@[Bug #30323]
@
text
@fromString:OK
not:OK
toString:OK
val it : unit = ()
@


1.11
log
@Updating.

Updating.
@
text
@a0 5
val it : unit = ()
val it : unit = ()
structure Bool = struct ... end
val it : unit = ()
structure StringCvt = struct ... end
@


1.10
log
@Updating


Updating
@
text
@a1 8
structure Bool =
  struct
    eqtype bool = bool
    val fromString : string -> bool option = fn
    val not : bool -> bool = fn
    val scan : ('a -> (char * 'a) option) -> 'a -> (bool * 'a) option = fn
    val toString : bool -> string = fn
  end
d3 3
a5 31
structure StringCvt =
  struct
    eqtype cs = int
    datatype radix =
      BIN |
      DEC |
      HEX |
      OCT
    type ('a, 'b) reader = 'b -> ('a * 'b) option
    datatype realfmt =
      EXACT |
      FIX of int option |
      GEN of int option |
      SCI of int option
    val BIN : StringCvt.radix
    val DEC : StringCvt.radix
    val EXACT : StringCvt.realfmt
    val FIX : int option -> StringCvt.realfmt
    val GEN : int option -> StringCvt.realfmt
    val HEX : StringCvt.radix
    val OCT : StringCvt.radix
    val SCI : int option -> StringCvt.realfmt
    val dropl : (char -> bool) -> ('a -> (char * 'a) option) -> 'a -> 'a = fn
    val padLeft : char -> int -> string -> string = fn
    val padRight : char -> int -> string -> string = fn
    val scanList : ((char list -> (char * char list) option) -> char list -> ('a * 'b) option) -> char list -> 'a option = fn
    val scanString : ((int -> (char * int) option) -> int -> ('a * int) option) -> string -> 'a option = fn
    val skipWS : ('a -> (char * 'a) option) -> 'a -> 'a = fn
    val splitl : (char -> bool) -> ('a -> (char * 'a) option) -> 'a -> (string * 'a) = fn
    val takel : (char -> bool) -> ('a -> (char * 'a) option) -> 'a -> string = fn
  end
@


1.10.1.1
log
@branched from 1.10
@
text
@@


1.10.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@@


1.10.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@@


1.10.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@@


1.10.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@


1.9
log
@Remove references to toplevel
@
text
@d21 1
d27 1
@


1.9.4.1
log
@branched from 1.9
@
text
@@


1.9.3.1
log
@branched from 1.9
@
text
@@


1.9.3.1.1.1
log
@branched from 1.9.3.1
@
text
@@


1.9.2.1
log
@branched from 1.9
@
text
@@


1.9.1.1
log
@branched from 1.9
@
text
@@


1.9.1.1.1.1
log
@branched from 1.9.1.1
@
text
@@


1.8
log
@remove banner
@
text
@a1 1
val it : unit = ()
@


1.8.3.1
log
@branched from 1.8
@
text
@@


1.8.2.1
log
@branched from 1.8
@
text
@@


1.8.1.1
log
@branched from 1.8
@
text
@@


1.7
log
@updating for commercial version flyer
@
text
@a0 2
commercial version may be purchased directly from Harlequin.

@


1.6
log
@switch off Compiling messages...
@
text
@d1 2
@


1.5
log
@updating
@
text
@a1 1
Compiling basis.toplevel
a2 13
Compiling basis.string_cvt
Compiling basis.__pre_basis
Compiling basis.__pre_string_cvt
Compiling basis.__string_cvt
Compiling basis.bool
Compiling basis.char
Compiling basis.__preinteger
Compiling basis.__preint32
Compiling basis.integer
Compiling basis.__integer
Compiling basis.__pre_char
Compiling basis.__char
Compiling basis.__bool
@


1.4
log
@add __pre_char again
@
text
@a1 2
Compiling basis.general
Compiling basis.__general
a2 31
structure TopLevel =
  struct
    datatype 'a option =
      NONE |
      SOME of 'a
    datatype order =
      EQUAL |
      GREATER |
      LESS
    exception Domain
    val EQUAL : order
    exception Fail of string
    val GREATER : order
    val LESS : order
    val NONE : 'a option
    val SOME : 'a -> 'a option
  end
datatype 'a option =
  NONE |
  SOME of 'a
datatype order =
  EQUAL |
  GREATER |
  LESS
exception Domain
val EQUAL : order
exception Fail of string
val GREATER : order
val LESS : order
val NONE : 'a option
val SOME : 'a -> 'a option
@


1.3
log
@update
@
text
@d47 1
@


1.2
log
@revise to toplevel changes
@
text
@d37 4
a40 3
Compiling basis.stringcvt
Compiling basis.__pre_char
Compiling basis.__stringcvt
d42 6
d51 1
@


1.1
log
@new unit
@
text
@a1 3
Compiling basis.word
Compiling basis.__word
Compiling basis.__word8
@
