head	1.21;
access;
symbols
	MLWorks_21c0_1999_03_25:1.21
	MLWorks_20c1_1998_08_20:1.20
	MLWorks_20c0_1998_08_04:1.20
	MLWorks_20b2c2_1998_06_19:1.20
	MLWorks_20b2_Windows_1998_06_12:1.20
	MLWorks_20b1c1_1998_05_07:1.20
	MLWorks_20b0_1998_04_07:1.20
	MLWorks_20b0_1998_03_20:1.20
	MLWorks_20m2_1998_02_16:1.20
	MLWorks_20m1_1997_10_23:1.19
	MLWorks_11r1:1.15.1.1.1.1.1
	MLWorks_11c0_1997_09_09:1.15.1.1.1.1
	MLWorks_10r3:1.15.1.1.3
	MLWorks_10r2_551:1.15.1.1.2
	MLWorks_11:1.15.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.15.1.1
	MLWorks_20m0_1997_06_20:1.17
	MLWorks_1_0_r2c2_1997_06_14:1.15.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.15.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.15.1
	MLWorks_BugFix_1997_04_24:1.15
	MLWorks_1_0_r2_Win32_1997_04_11:1.15
	MLWorks_1_0_r2_Unix_1997_04_04:1.15
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.14.5.1.1
	MLWorks_gui_1996_12_18:1.14.6
	MLWorks_1_0_Win32_1996_12_17:1.14.5
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.14.3.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.14.3.1
	MLWorks_1_0_Irix_1996_11_28:1.14.3.1.1
	MLWorks_1_0_Win32_1996_11_22:1.14.4
	MLWorks_1_0_Unix_1996_11_14:1.14.3
	MLWorks_Open_Beta2_1996_10_11:1.14.2
	MLWorks_License_dev:1.14.1
	MLWorks_1_open_beta_1996_09_13:1.11.1
	MLWorks_Open_Beta_1996_08_22:1.9
	MLWorks_Beta_1996_07_02:1.7
	MLWorks_Beta_1996_06_07:1.6
	MLWorks_Beta_1996_06_06:1.6
	MLWorks_Beta_1996_06_05:1.6
	MLWorks_Beta_1996_06_03:1.5
	MLWorks_Beta_1996_05_31:1.5
	MLWorks_Beta_1996_05_30:1.4;
locks; strict;
comment	@# @;


1.21
date	98.10.09.14.30.12;	author jont;	state Exp;
branches;
next	1.20;

1.20
date	97.11.25.19.18.47;	author daveb;	state Exp;
branches;
next	1.19;

1.19
date	97.09.25.09.47.51;	author brucem;	state Exp;
branches;
next	1.18;

1.18
date	97.09.11.14.43.05;	author jont;	state Exp;
branches;
next	1.17;

1.17
date	97.06.12.10.29.00;	author matthew;	state Exp;
branches;
next	1.16;

1.16
date	97.05.07.13.30.00;	author daveb;	state Exp;
branches;
next	1.15;

1.15
date	97.03.03.14.49.21;	author daveb;	state Exp;
branches
	1.15.1.1;
next	1.14;

1.14
date	96.10.07.11.20.54;	author stephenb;	state Exp;
branches
	1.14.1.1
	1.14.2.1
	1.14.3.1
	1.14.4.1
	1.14.5.1
	1.14.6.1;
next	1.13;

1.13
date	96.10.02.11.37.41;	author stephenb;	state Exp;
branches;
next	1.12;

1.12
date	96.10.01.13.03.21;	author io;	state Exp;
branches;
next	1.11;

1.11
date	96.09.09.11.14.00;	author io;	state Exp;
branches
	1.11.1.1;
next	1.10;

1.10
date	96.09.07.00.02.24;	author io;	state Exp;
branches;
next	1.9;

1.9
date	96.08.14.11.16.49;	author io;	state Exp;
branches;
next	1.8;

1.8
date	96.07.04.18.01.03;	author andreww;	state Exp;
branches;
next	1.7;

1.7
date	96.06.25.09.45.57;	author io;	state Exp;
branches;
next	1.6;

1.6
date	96.06.05.00.03.01;	author io;	state Exp;
branches;
next	1.5;

1.5
date	96.05.30.15.03.54;	author stephenb;	state Exp;
branches;
next	1.4;

1.4
date	96.05.23.10.38.33;	author matthew;	state Exp;
branches;
next	1.3;

1.3
date	96.05.19.17.30.37;	author io;	state Exp;
branches;
next	1.2;

1.2
date	96.05.16.13.51.59;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	96.05.10.17.02.39;	author jont;	state Exp;
branches;
next	;

1.11.1.1
date	96.09.13.11.38.51;	author hope;	state Exp;
branches;
next	;

1.14.1.1
date	96.10.07.16.30.19;	author hope;	state Exp;
branches;
next	;

1.14.2.1
date	96.10.17.11.50.54;	author hope;	state Exp;
branches;
next	;

1.14.3.1
date	96.11.14.13.18.20;	author hope;	state Exp;
branches
	1.14.3.1.1.1;
next	;

1.14.3.1.1.1
date	96.11.28.15.28.51;	author hope;	state Exp;
branches;
next	;

1.14.4.1
date	96.11.22.18.36.07;	author hope;	state Exp;
branches;
next	;

1.14.5.1
date	96.12.17.18.15.07;	author hope;	state Exp;
branches
	1.14.5.1.1.1;
next	;

1.14.5.1.1.1
date	97.02.24.12.08.06;	author hope;	state Exp;
branches;
next	;

1.14.6.1
date	96.12.18.10.10.04;	author hope;	state Exp;
branches;
next	;

1.15.1.1
date	97.05.12.11.08.46;	author hope;	state Exp;
branches
	1.15.1.1.1.1
	1.15.1.1.2.1
	1.15.1.1.3.1;
next	;

1.15.1.1.1.1
date	97.07.28.18.49.31;	author daveb;	state Exp;
branches
	1.15.1.1.1.1.1.1;
next	;

1.15.1.1.1.1.1.1
date	97.10.07.12.14.54;	author jkbrook;	state Exp;
branches;
next	;

1.15.1.1.2.1
date	97.09.08.17.41.13;	author daveb;	state Exp;
branches;
next	;

1.15.1.1.3.1
date	97.09.09.14.40.40;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
@


1.21
log
@[Bug #30489]
Add test for empty string to Date.fmt
@
text
@date succeeded.
Date fmt succeeded
dateStart succeeded.
dateEnd succeeded.
Mon Jan  1 00:00:00 1900
Mon Jan  1 00:00:00 1900
Carrying over start of 1900 succeeded.
1900 is not a leap year
1984 is a leap year
1983 is not a leap year
2000 is a leap year
1600 is a leap year
Day of the week succeeded.
Date.toTime raised exception Date ok.
Offset of timeLocal is correct (NONE).
Offset of timeUniv is correct (SOME 0).
localOffset matches my calculation ok.
val x : bool = true
@


1.20
log
@[Bug #30323]
@
text
@d18 1
@


1.19
log
@[Bug #30269]
Test has changed (after DATE was revised).
@
text
@a0 4
structure Date = struct ... end
structure Time = struct ... end
structure Int = struct ... end
structure Char = struct ... end
@


1.18
log
@[Bug #20102]
New answer required following Date.fmt changes
@
text
@d3 1
d5 1
d7 15
a21 4
val date : Date.date = DATE {day=9, hour=16, isDst=NONE, minute=30, month=May, second=10, wday=SOME Thu, yday=NONE, year=1996}
val date' : Date.date = DATE {day=9, hour=16, isDst=NONE, minute=30, month=May, second=10, wday=SOME Thu, yday=NONE, year=1996}
val time_a : bool = true
val time_b : bool = true
@


1.17
log
@Updatign
@
text
@d1 3
a3 122
val it : unit = ()
structure Date =
  struct
    datatype date =
      DATE of {day: int, hour: int, isDst: bool option, minute: int, month: month, second: int, wday: weekday option, yday: int option, year: int}
    datatype month =
      Apr |
      Aug |
      Dec |
      Feb |
      Jan |
      Jul |
      Jun |
      Mar |
      May |
      Nov |
      Oct |
      Sep
    datatype weekday =
      Fri |
      Mon |
      Sat |
      Sun |
      Thu |
      Tue |
      Wed
    val Apr : Date.month
    val Aug : Date.month
    val DATE : {day: int, hour: int, isDst: bool option, minute: int, month: Date.month, second: int, wday: Date.weekday option, yday: int option, year: int} -> Date.date
    exception Date
    val Dec : Date.month
    val Feb : Date.month
    val Fri : Date.weekday
    val Jan : Date.month
    val Jul : Date.month
    val Jun : Date.month
    val Mar : Date.month
    val May : Date.month
    val Mon : Date.weekday
    val Nov : Date.month
    val Oct : Date.month
    val Sat : Date.weekday
    val Sep : Date.month
    val Sun : Date.weekday
    val Thu : Date.weekday
    val Tue : Date.weekday
    val Wed : Date.weekday
    val compare : (Date.date * Date.date) -> order = fn
    val fmt : string -> Date.date -> string = fn
    val fromString : string -> Date.date option = fn
    val fromTime : time(hidden) -> Date.date = fn
    val fromUTC : time(hidden) -> Date.date = fn
    val scan : ('a -> (char * 'a) option) -> 'a -> (Date.date * 'a) option = fn
    val toString : Date.date -> string = fn
    val toTime : Date.date -> time(hidden) = fn
  end
val it : unit = ()
structure Time =
  struct
    eqtype time = time
    val + : (Time.time * Time.time) -> Time.time = fn
    val - : (Time.time * Time.time) -> Time.time = fn
    val < : (Time.time * Time.time) -> bool = fn
    val <= : (Time.time * Time.time) -> bool = fn
    val > : (Time.time * Time.time) -> bool = fn
    val >= : (Time.time * Time.time) -> bool = fn
    exception Time
    val compare : (Time.time * Time.time) -> order = fn
    val fmt : int -> Time.time -> string = fn
    val fromMicroseconds : int -> Time.time = fn
    val fromMilliseconds : int -> Time.time = fn
    val fromReal : real -> Time.time = fn
    val fromSeconds : int -> Time.time = fn
    val fromString : string -> Time.time option = fn
    val now : unit -> Time.time = fn
    val scan : ('a -> (char * 'a) option) -> 'a -> (Time.time * 'a) option = fn
    val toMicroseconds : Time.time -> int = fn
    val toMilliseconds : Time.time -> int = fn
    val toReal : Time.time -> real = fn
    val toSeconds : Time.time -> int = fn
    val toString : Time.time -> string = fn
    val zeroTime : Time.time = TIME (0, 0, 0)
  end
val it : unit = ()
structure Char =
  struct
    eqtype char = char
    eqtype string = string
    val < : (char * char) -> bool = fn
    val <= : (char * char) -> bool = fn
    val > : (char * char) -> bool = fn
    val >= : (char * char) -> bool = fn
    val chr : int -> char = fn
    val compare : (char * char) -> order = fn
    val contains : string -> char -> bool = fn
    val fromCString : string -> char option = fn
    val fromString : string -> char option = fn
    val isAlpha : char -> bool = fn
    val isAlphaNum : char -> bool = fn
    val isAscii : char -> bool = fn
    val isCntrl : char -> bool = fn
    val isDigit : char -> bool = fn
    val isGraph : char -> bool = fn
    val isHexDigit : char -> bool = fn
    val isLower : char -> bool = fn
    val isPrint : char -> bool = fn
    val isPunct : char -> bool = fn
    val isSpace : char -> bool = fn
    val isUpper : char -> bool = fn
    val maxChar : char = #"\255"
    val maxOrd : int = 255
    val minChar : char = #"\000"
    val notContains : string -> char -> bool = fn
    val ord : char -> int = fn
    val pred : char -> char = fn
    val scan : ('a -> (char * 'a) option) -> 'a -> (char * 'a) option = fn
    val succ : char -> char = fn
    val toCString : char -> string = fn
    val toLower : char -> char = fn
    val toString : char -> string = fn
    val toUpper : char -> char = fn
  end
a6 4
val dateEnd : Date.date = DATE {day=31, hour=23, isDst=SOME false, minute=59, month=Dec, second=59, wday=SOME Tue, yday=SOME 364, year=2030}
val dateEnd' : Date.date = DATE {day=31, hour=23, isDst=SOME false, minute=59, month=Dec, second=59, wday=SOME Tue, yday=SOME 364, year=2030}
val dateStart : Date.date = DATE {day=1, hour=0, isDst=SOME false, minute=0, month=Jan, second=0, wday=SOME Thu, yday=SOME 0, year=1970}
val dateStart' : Date.date = DATE {day=1, hour=0, isDst=SOME false, minute=0, month=Jan, second=0, wday=SOME Thu, yday=SOME 0, year=1970}
@


1.16
log
@[Bug #30112]
Updated test.
@
text
@a0 1
Date fmt succeeded
d123 1
@


1.15
log
@[Bug #1937]
Corrected type of Date.scan.
@
text
@d1 1
a1 1
val it : unit = ()
a123 1
Date scan succeeded
d125 5
a129 2
val date_string : string = "Thu May  9 16:30:10 1996"
val getc : (string * int) -> (char * (string * int)) option = fn
@


1.15.1.1
log
@branched from 1.15
@
text
@@


1.15.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@@


1.15.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@@


1.15.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@@


1.15.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@


1.14
log
@Change to use fromUTC to avoid a bug in SunOS when using fromTime
on the equivalent of Time.zeroTime.
@
text
@d54 1
a54 1
    val scan : {getc: 'a -> (char * 'a) option} -> 'a -> (Date.date * 'a) option = fn
@


1.14.6.1
log
@branched from 1.14
@
text
@@


1.14.5.1
log
@branched from 1.14
@
text
@@


1.14.5.1.1.1
log
@branched from 1.14.5.1
@
text
@@


1.14.4.1
log
@branched from 1.14
@
text
@@


1.14.3.1
log
@branched from 1.14
@
text
@@


1.14.3.1.1.1
log
@branched from 1.14.3.1
@
text
@@


1.14.2.1
log
@branched from 1.14
@
text
@@


1.14.1.1
log
@branched from 1.14
@
text
@@


1.13
log
@Add Date.toTime tests.
@
text
@d119 1
a119 1
    val toCString : char -> string option = fn
@


1.12
log
@[Bug #1626]
toCString updates
@
text
@a2 1
val it : unit = ()
d59 27
d119 1
a119 1
    val toCString : char -> string = fn
d128 2
@


1.11
log
@remove banner
@
text
@d93 1
a93 1
    val toCString : char -> string option = fn
@


1.11.1.1
log
@branched from 1.11
@
text
@@


1.10
log
@updating for commercial version flyer
@
text
@a0 2
commercial version may be purchased directly from Harlequin.

@


1.9
log
@switch off Compiling messages...
@
text
@d1 2
@


1.8
log
@updating.
@
text
@a2 1
Compiling basis.toplevel
a3 28
Compiling basis.string_cvt
Compiling basis.__pre_basis
Compiling basis.__pre_string_cvt
Compiling basis.__string_cvt
Compiling basis.__preinteger
Compiling basis.__preint32
Compiling basis.integer
Compiling basis.__integer
Compiling basis.char
Compiling basis.__pre_char
Compiling basis.__char
Compiling basis.general
Compiling basis.__general
Compiling basis.math
Compiling basis.__math
Compiling basis.ieeereal
Compiling basis.__ieeereal
Compiling basis.__prereal
Compiling basis.real
Compiling basis.__real
Compiling basis.time
Compiling unix.__time
Compiling basis.date
Compiling basis.string
Compiling basis.list
Compiling basis.__list
Compiling basis.__string
Compiling basis.__date
@


1.7
log
@add __pre_char again
@
text
@a2 2
Compiling basis.general
Compiling basis.__general
a3 31
structure TopLevel =
  struct
    datatype 'a option =
      NONE |
      SOME of 'a
    datatype order =
      EQUAL |
      GREATER |
      LESS
    exception Domain
    val EQUAL : order
    exception Fail of string
    val GREATER : order
    val LESS : order
    val NONE : 'a option
    val SOME : 'a -> 'a option
  end
datatype 'a option =
  NONE |
  SOME of 'a
datatype order =
  EQUAL |
  GREATER |
  LESS
exception Domain
val EQUAL : order
exception Fail of string
val GREATER : order
val LESS : order
val NONE : 'a option
val SOME : 'a -> 'a option
d16 2
@


1.6
log
@revising
@
text
@d47 1
a127 2
    exception Dummy of char
    exception ToString of char
a140 1
    val isOctDigit : char -> bool = fn
a144 1
    val makestring : char -> string = fn
a151 1
    val scanc : ('a -> (char * 'a) option) -> 'a -> (char * 'a) option = fn
@


1.5
log
@The list of files loaded has changed due to new Timer implementation.
@
text
@d38 4
a41 3
Compiling basis.stringcvt
Compiling basis.__pre_char
Compiling basis.__stringcvt
d58 4
d127 2
d142 1
d147 1
d155 1
@


1.4
log
@Updating
@
text
@d47 7
@


1.3
log
@revise for from|toCString
@
text
@a124 1
    val isDigit2 : char -> bool = fn
@


1.2
log
@Updating because chars have moved, and years are in full
@
text
@d118 1
d141 1
@


1.1
log
@new unit
@
text
@d45 2
a46 2
Compiling basis.chars
Compiling basis.__chars
a114 1
    exception Chr
d145 1
a145 1
val date : Date.date = DATE {day=9, hour=16, isDst=NONE, minute=30, month=May, second=10, wday=SOME Thu, yday=NONE, year=96}
@
