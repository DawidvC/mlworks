head	1.13;
access;
symbols
	MLWorks_21c0_1999_03_25:1.13
	MLWorks_20c1_1998_08_20:1.13
	MLWorks_20c0_1998_08_04:1.13
	MLWorks_20b2c2_1998_06_19:1.13
	MLWorks_20b2_Windows_1998_06_12:1.13
	MLWorks_20b1c1_1998_05_07:1.13
	MLWorks_20b0_1998_04_07:1.13
	MLWorks_20b0_1998_03_20:1.13
	MLWorks_20m2_1998_02_16:1.13
	MLWorks_20m1_1997_10_23:1.12
	MLWorks_11r1:1.9.5.1.1.1.1
	MLWorks_11c0_1997_09_09:1.9.5.1.1.1
	MLWorks_10r3:1.9.5.1.3
	MLWorks_10r2_551:1.9.5.1.2
	MLWorks_11:1.9.5.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.9.5.1
	MLWorks_20m0_1997_06_20:1.10
	MLWorks_1_0_r2c2_1997_06_14:1.9.5.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.9.5.1
	MLWorks_1_0_r2c1_1997_05_12:1.9.5
	MLWorks_BugFix_1997_04_24:1.9
	MLWorks_1_0_r2_Win32_1997_04_11:1.9
	MLWorks_1_0_r2_Unix_1997_04_04:1.9
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.9.3.1.1
	MLWorks_gui_1996_12_18:1.9.4
	MLWorks_1_0_Win32_1996_12_17:1.9.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.9.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.9.1.1
	MLWorks_1_0_Irix_1996_11_28:1.9.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.9.2
	MLWorks_1_0_Unix_1996_11_14:1.9.1
	MLWorks_Open_Beta2_1996_10_11:1.6.3
	MLWorks_License_dev:1.6.2
	MLWorks_1_open_beta_1996_09_13:1.6.1
	MLWorks_Open_Beta_1996_08_22:1.4
	MLWorks_Beta_1996_07_02:1.2
	MLWorks_Beta_1996_06_07:1.2
	MLWorks_Beta_1996_06_06:1.2
	MLWorks_Beta_1996_06_05:1.2
	MLWorks_Beta_1996_06_03:1.1
	MLWorks_Beta_1996_05_31:1.1
	MLWorks_Beta_1996_05_30:1.1;
locks; strict;
comment	@# @;


1.13
date	97.11.25.19.19.59;	author daveb;	state Exp;
branches;
next	1.12;

1.12
date	97.10.09.15.41.04;	author jont;	state Exp;
branches;
next	1.11;

1.11
date	97.09.25.13.41.10;	author jont;	state Exp;
branches;
next	1.10;

1.10
date	97.05.28.16.16.57;	author jont;	state Exp;
branches;
next	1.9;

1.9
date	96.11.08.10.37.54;	author matthew;	state Exp;
branches
	1.9.1.1
	1.9.2.1
	1.9.3.1
	1.9.4.1
	1.9.5.1;
next	1.8;

1.8
date	96.11.05.13.34.15;	author andreww;	state Exp;
branches;
next	1.7;

1.7
date	96.10.22.13.28.00;	author jont;	state Exp;
branches;
next	1.6;

1.6
date	96.09.09.11.14.00;	author io;	state Exp;
branches
	1.6.1.1
	1.6.2.1
	1.6.3.1;
next	1.5;

1.5
date	96.09.07.00.02.25;	author io;	state Exp;
branches;
next	1.4;

1.4
date	96.08.14.11.18.40;	author io;	state Exp;
branches;
next	1.3;

1.3
date	96.07.04.18.06.41;	author andreww;	state Exp;
branches;
next	1.2;

1.2
date	96.06.05.00.03.45;	author io;	state Exp;
branches;
next	1.1;

1.1
date	96.05.22.16.35.00;	author matthew;	state Exp;
branches;
next	;

1.6.1.1
date	96.09.13.11.37.56;	author hope;	state Exp;
branches;
next	;

1.6.2.1
date	96.10.07.16.29.16;	author hope;	state Exp;
branches;
next	;

1.6.3.1
date	96.10.17.11.50.02;	author hope;	state Exp;
branches;
next	;

1.9.1.1
date	96.11.14.13.17.27;	author hope;	state Exp;
branches
	1.9.1.1.1.1;
next	;

1.9.1.1.1.1
date	96.11.28.15.27.55;	author hope;	state Exp;
branches;
next	;

1.9.2.1
date	96.11.22.18.35.15;	author hope;	state Exp;
branches;
next	;

1.9.3.1
date	96.12.17.18.14.13;	author hope;	state Exp;
branches
	1.9.3.1.1.1;
next	;

1.9.3.1.1.1
date	97.02.24.12.07.07;	author hope;	state Exp;
branches;
next	;

1.9.4.1
date	96.12.18.10.09.12;	author hope;	state Exp;
branches;
next	;

1.9.5.1
date	97.05.12.11.07.45;	author hope;	state Exp;
branches
	1.9.5.1.1.1
	1.9.5.1.2.1
	1.9.5.1.3.1;
next	;

1.9.5.1.1.1
date	97.07.28.18.49.47;	author daveb;	state Exp;
branches
	1.9.5.1.1.1.1.1;
next	;

1.9.5.1.1.1.1.1
date	97.10.07.12.14.10;	author jkbrook;	state Exp;
branches;
next	1.9.5.1.1.1.1.2;

1.9.5.1.1.1.1.2
date	97.10.07.17.32.01;	author jkbrook;	state Exp;
branches;
next	1.9.5.1.1.1.1.3;

1.9.5.1.1.1.1.3
date	97.10.12.16.23.51;	author jkbrook;	state Exp;
branches;
next	;

1.9.5.1.2.1
date	97.09.08.17.41.33;	author daveb;	state Exp;
branches;
next	;

1.9.5.1.3.1
date	97.09.09.14.41.00;	author daveb;	state Exp;
branches;
next	1.9.5.1.3.2;

1.9.5.1.3.2
date	97.09.25.16.11.20;	author jkbrook;	state Exp;
branches;
next	1.9.5.1.3.3;

1.9.5.1.3.3
date	97.10.12.16.34.53;	author jkbrook;	state Exp;
branches;
next	;


desc
@new unit
New test
@


1.13
log
@[Bug #30323]
Removed Shell.Build.loadSource.
@
text
@val check : bool -> string = fn
val check' : (unit -> bool) -> string = fn
val range : (int * int) -> (int -> bool) -> bool = fn
val checkrange : (int * int) -> (int -> bool) -> string = fn
val nan : real = nan
val test0a : string = "OK"
val test0b : string = "OK"
val test10a : string = "OK"
val test10b : string = "OK"
val test10c : string = "OK"
val test10d : string = "OK"
val test10e : string = "OK"
val test12A : string = "OK"
val test12B : string = "OK"
val test12C : string = "OK"
val test12D : string = "OK"
val test12E : string = "OK"
val test12F : string = "OK"
val test12G : string = "OK"
val test12H : string = "OK"
val test12I : string = "OK"
val test12J : string = "OK"
val test12K : string = "OK"
val test12L : string = "OK"
val test12M : string = "OK"
val test12N : string = "OK"
val test12O : string = "OK"
val test12P : string = "OK"
val test12Q : string = "OK"
val test12R : string = "OK"
val test12S : string = "OK"
val test12T : string = "OK"
val test12U : string = "OK"
val test12V : string = "OK"
val test12W : string = "OK"
val test12X : string = "OK"
val test12Y : string = "OK"
val test12Z : string = "OK"
val test12a : string = "OK"
val test12aa : string = "OK"
val test12ab : string = "OK"
val test12ac : string = "OK"
val test12ad : string = "OK"
val test12ae : string = "OK"
val test12af : string = "OK"
val test12ag : string = "OK"
val test12ah : string = "OK"
val test12ai : string = "OK"
val test12aj : string = "OK"
val test12ak : string = "OK"
val test12al : string = "OK"
val test12b : string = "OK"
val test12c : string = "OK"
val test12d : string = "OK"
val test12e : string = "OK"
val test12f : string = "OK"
val test12g : string = "OK"
val test12h : string = "OK"
val test12i : string = "OK"
val test12j : string = "OK"
val test12k : string = "OK"
val test12l : string = "OK"
val test12m : string = "OK"
val test12n : string = "OK"
val test12o : string = "OK"
val test12p : string = "OK"
val test12q : string = "OK"
val test12r : string = "OK"
val test12s : string = "OK"
val test12t : string = "OK"
val test12u : string = "OK"
val test12v : string = "OK"
val test12w : string = "OK"
val test12x : string = "OK"
val test12y : string = "OK"
val test12z : string = "OK"
val test13a : string = "OK"
val test13b : string = "OK"
val test13c : string = "OK"
val test13d : string = "OK"
val test13e : string = "OK"
val test1a : string = "OK"
val test1b : string = "OK"
val test1c : string = "OK"
val test2a : string = "OK"
val test2b : string = "OK"
val test2c : string = "OK"
val test2d : string = "OK"
val test3a : string = "OK"
val test3b : string = "OK"
val test3c : string = "OK"
val test3d : string = "OK"
val test4a : string = "OK"
val test4b : string = "OK"
val test4c : string = "OK"
val test4d : string = "OK"
val test4e : string = "OK"
val test4f : string = "OK"
val test4g : string = "OK"
val test5a : string = "OK"
val test5b : string = "OK"
val test5c : string = "OK"
val test5d : string = "OK"
val test5e : string = "OK"
val test6a : string = "OK"
val test6b : string = "OK"
val test6c : string = "OK"
val test6d : string = "OK"
val test6e : string = "OK"
val test7a : string = "OK"
val test7b : string = "OK"
val test7c : string = "OK"
val test7d : string = "OK"
val test7e : string = "OK"
val test8a : string = "OK"
val test8b : string = "OK"
val test8c : string = "OK"
val test8d : string = "OK"
val test8e : string = "OK"
val test8f : string = "OK"
val test8g : string = "OK"
val test8h : string = "OK"
val test8i : string = "OK"
val test8j : string = "OK"
val test8k : string = "OK"
val test8l : string = "OK"
val test9a : string = "OK"
val test9b : string = "OK"
val test9c : string = "OK"
@


1.12
log
@[Bug #30279]
Remove duplicated test names 12j and 12k
Add further tests for integer exponents
@
text
@a1 1
structure Int = struct ... end
a4 1
structure Math = struct ... end
@


1.11
log
@[Bug #70012]
Improved testing of pow function
@
text
@a0 36
val it : unit = ()
structure Int =
  struct
    eqtype int = int
    val * : (int * int) -> int = fn
    val + : (int * int) -> int = fn
    val - : (int * int) -> int = fn
    val < : (int * int) -> bool = fn
    val <= : (int * int) -> bool = fn
    val > : (int * int) -> bool = fn
    val >= : (int * int) -> bool = fn
    val abs : int -> int = fn
    val compare : (int * int) -> order = fn
    val div : (int * int) -> int = fn
    val fmt : radix(hidden) -> int -> string = fn
    val fromInt : int -> int = fn
    val fromLarge : MLWorks.Internal.Types.int32 -> int = fn
    val fromString : string -> int option = fn
    val max : (int * int) -> int = fn
    val maxInt : int option = SOME 536870911
    val min : (int * int) -> int = fn
    val minInt : int option = SOME ~536870912
    val mod : (int * int) -> int = fn
    val precision : int option = SOME 30
    val quot : (int * int) -> int = fn
    val rem : (int * int) -> int = fn
    val sameSign : (int * int) -> bool = fn
    val scan : radix(hidden) -> ('a -> (char * 'a) option) -> 'a -> (int * 'a) option = fn
    val sign : int -> int = fn
    val toInt : int -> int = fn
    val toLarge : int -> MLWorks.Internal.Types.int32 = fn
    val toString : int -> string = fn
    val ~ : int -> int = fn
  end
infix 1 seq
val seq : ('a * 'b) -> 'b = fn
d2 1
d6 1
a6 23
val it : unit = ()
structure Math =
  struct
    type real = real
    val acos : real -> real = fn
    val asin : real -> real = fn
    val atan : real -> real = fn
    val atan2 : (real * real) -> real = fn
    val cos : real -> real = fn
    val cosh : real -> real = fn
    val e : real = 2.718281828
    val exp : real -> real = fn
    val ln : real -> real = fn
    val log10 : real -> real = fn
    val pi : real = 3.141592654
    val pow : (real * real) -> real = fn
    val sin : real -> real = fn
    val sinh : real -> real = fn
    val sqrt : real -> real = fn
    val tan : real -> real = fn
    val tanh : real -> real = fn
  end
val it : unit = ()
d32 1
a32 1
val test12R : string = "WRONG"
d50 4
@


1.10
log
@[Bug #30090]
Remove uses of MLWorks.IO
@
text
@d64 1
d72 26
d99 8
d120 12
@


1.9
log
@Updating
@
text
@a35 2
val flush_out : MLWorks.IO.outstream -> unit = fn
val output : (MLWorks.IO.outstream * string) -> unit = fn
a36 2
val std_out : MLWorks.IO.outstream = FLEXOUT(FLEXOUTSTREAM(ref(RIGIDOUTSTREAM {close_out=fn, closed_out=fn, flush_out=fn, output=fn})))
val say : string -> unit = fn
@


1.9.5.1
log
@branched from 1.9
@
text
@@


1.9.5.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@@


1.9.5.1.3.2
log
@[Bug #70012]
Merging from trunk:
Make pow tests reflect special-cases list in Basis document
@
text
@a67 1
val nan : real = nan
a74 26
val test12A : string = "OK"
val test12B : string = "OK"
val test12C : string = "OK"
val test12D : string = "OK"
val test12E : string = "OK"
val test12F : string = "OK"
val test12G : string = "OK"
val test12H : string = "OK"
val test12I : string = "OK"
val test12J : string = "OK"
val test12K : string = "OK"
val test12L : string = "OK"
val test12M : string = "OK"
val test12N : string = "OK"
val test12O : string = "OK"
val test12P : string = "OK"
val test12Q : string = "OK"
val test12R : string = "WRONG"
val test12S : string = "OK"
val test12T : string = "OK"
val test12U : string = "OK"
val test12V : string = "OK"
val test12W : string = "OK"
val test12X : string = "OK"
val test12Y : string = "OK"
val test12Z : string = "OK"
a75 8
val test12aa : string = "OK"
val test12ab : string = "OK"
val test12ac : string = "OK"
val test12ad : string = "OK"
val test12ae : string = "OK"
val test12af : string = "OK"
val test12ag : string = "OK"
val test12ah : string = "OK"
a88 12
val test12o : string = "OK"
val test12p : string = "OK"
val test12q : string = "OK"
val test12r : string = "OK"
val test12s : string = "OK"
val test12t : string = "OK"
val test12u : string = "OK"
val test12v : string = "OK"
val test12w : string = "OK"
val test12x : string = "OK"
val test12y : string = "OK"
val test12z : string = "OK"
@


1.9.5.1.3.3
log
@[Bug #30279]
Remove duplicated test names 12j and 12k
Add further tests for integer exponents
@
text
@d1 40
a41 1
structure Int = struct ... end
d45 23
a67 1
structure Math = struct ... end
d93 1
a93 1
val test12R : string = "OK"
a110 4
val test12ai : string = "OK"
val test12aj : string = "OK"
val test12ak : string = "OK"
val test12al : string = "OK"
@


1.9.5.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@@


1.9.5.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@@


1.9.5.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@


1.9.5.1.1.1.1.2
log
@[Bug #70012]
Merging from MLWorks_10r3:
Make pow tests reflect special-cases list in Basis document
@
text
@a67 1
val nan : real = nan
a74 26
val test12A : string = "OK"
val test12B : string = "OK"
val test12C : string = "OK"
val test12D : string = "OK"
val test12E : string = "OK"
val test12F : string = "OK"
val test12G : string = "OK"
val test12H : string = "OK"
val test12I : string = "OK"
val test12J : string = "OK"
val test12K : string = "OK"
val test12L : string = "OK"
val test12M : string = "OK"
val test12N : string = "OK"
val test12O : string = "OK"
val test12P : string = "OK"
val test12Q : string = "OK"
val test12R : string = "WRONG"
val test12S : string = "OK"
val test12T : string = "OK"
val test12U : string = "OK"
val test12V : string = "OK"
val test12W : string = "OK"
val test12X : string = "OK"
val test12Y : string = "OK"
val test12Z : string = "OK"
a75 8
val test12aa : string = "OK"
val test12ab : string = "OK"
val test12ac : string = "OK"
val test12ad : string = "OK"
val test12ae : string = "OK"
val test12af : string = "OK"
val test12ag : string = "OK"
val test12ah : string = "OK"
a88 12
val test12o : string = "OK"
val test12p : string = "OK"
val test12q : string = "OK"
val test12r : string = "OK"
val test12s : string = "OK"
val test12t : string = "OK"
val test12u : string = "OK"
val test12v : string = "OK"
val test12w : string = "OK"
val test12x : string = "OK"
val test12y : string = "OK"
val test12z : string = "OK"
@


1.9.5.1.1.1.1.3
log
@[Bug #30279]
Merging from trunk:
Remove duplicated test names 12j and 12k
Add further tests for integer exponents
@
text
@d1 40
a41 1
structure Int = struct ... end
d45 23
a67 1
structure Math = struct ... end
d93 1
a93 1
val test12R : string = "OK"
a110 4
val test12ai : string = "OK"
val test12aj : string = "OK"
val test12ak : string = "OK"
val test12al : string = "OK"
@


1.9.4.1
log
@branched from 1.9
@
text
@@


1.9.3.1
log
@branched from 1.9
@
text
@@


1.9.3.1.1.1
log
@branched from 1.9.3.1
@
text
@@


1.9.2.1
log
@branched from 1.9
@
text
@@


1.9.1.1
log
@branched from 1.9
@
text
@@


1.9.1.1.1.1
log
@branched from 1.9.1.1
@
text
@@


1.8
log
@[Bug #1711]
reals no longer equality type.
@
text
@a0 9
sqrt: DOMAIN error
sqrt: DOMAIN error
sqrt: DOMAIN error
sqrt: DOMAIN error
sqrt: DOMAIN error
log: SING error
sqrt: DOMAIN error
neg**non-integral: DOMAIN error
neg**non-integral: DOMAIN error
@


1.7
log
@Remove references to toplevel
@
text
@d1 9
d57 1
a57 1
    eqtype real = real
d76 1
@


1.6
log
@remove banner
@
text
@a1 1
val it : unit = ()
@


1.6.3.1
log
@branched from 1.6
@
text
@@


1.6.2.1
log
@branched from 1.6
@
text
@@


1.6.1.1
log
@branched from 1.6
@
text
@@


1.5
log
@updating for commercial version flyer
@
text
@a0 2
commercial version may be purchased directly from Harlequin.

@


1.4
log
@switch off Compiling messages...
@
text
@d1 2
@


1.3
log
@updating.
@
text
@a1 1
Compiling basis.toplevel
a2 8
Compiling basis.string_cvt
Compiling basis.__pre_basis
Compiling basis.__pre_string_cvt
Compiling basis.__string_cvt
Compiling basis.__preinteger
Compiling basis.__preint32
Compiling basis.integer
Compiling basis.__integer
a46 4
Compiling basis.general
Compiling basis.__general
Compiling basis.math
Compiling basis.__math
@


1.2
log
@revising
@
text
@a1 2
Compiling basis.general
Compiling basis.__general
a2 31
structure TopLevel =
  struct
    datatype 'a option =
      NONE |
      SOME of 'a
    datatype order =
      EQUAL |
      GREATER |
      LESS
    exception Domain
    val EQUAL : order
    exception Fail of string
    val GREATER : order
    val LESS : order
    val NONE : 'a option
    val SOME : 'a -> 'a option
  end
datatype 'a option =
  NONE |
  SOME of 'a
datatype order =
  EQUAL |
  GREATER |
  LESS
exception Domain
val EQUAL : order
exception Fail of string
val GREATER : order
val LESS : order
val NONE : 'a option
val SOME : 'a -> 'a option
d56 2
@


1.1
log
@new unit
New test
@
text
@d37 4
a40 3
Compiling basis.stringcvt
Compiling basis.__pre_char
Compiling basis.__stringcvt
@
