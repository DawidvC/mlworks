head	1.14;
access;
symbols
	MLWorks_21c0_1999_03_25:1.14
	MLWorks_20c1_1998_08_20:1.14
	MLWorks_20c0_1998_08_04:1.14
	MLWorks_20b2c2_1998_06_19:1.14
	MLWorks_20b2_Windows_1998_06_12:1.14
	MLWorks_20b1c1_1998_05_07:1.14
	MLWorks_20b0_1998_04_07:1.14
	MLWorks_20b0_1998_03_20:1.14
	MLWorks_20m2_1998_02_16:1.14
	MLWorks_20m1_1997_10_23:1.13
	MLWorks_11r1:1.12.1.1.1.1.1
	MLWorks_11c0_1997_09_09:1.12.1.1.1.1
	MLWorks_10r3:1.12.1.1.3
	MLWorks_10r2_551:1.12.1.1.2
	MLWorks_11:1.12.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.12.1.1
	MLWorks_20m0_1997_06_20:1.13
	MLWorks_1_0_r2c2_1997_06_14:1.12.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.12.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.12.1
	MLWorks_BugFix_1997_04_24:1.12
	MLWorks_1_0_r2_Win32_1997_04_11:1.12
	MLWorks_1_0_r2_Unix_1997_04_04:1.12
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.11.3.1.1
	MLWorks_gui_1996_12_18:1.11.4
	MLWorks_1_0_Win32_1996_12_17:1.11.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.11.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.11.1.1
	MLWorks_1_0_Irix_1996_11_28:1.11.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.11.2
	MLWorks_1_0_Unix_1996_11_14:1.11.1
	MLWorks_Open_Beta2_1996_10_11:1.10.2
	MLWorks_License_dev:1.10.1
	MLWorks_1_open_beta_1996_09_13:1.9.1
	MLWorks_Open_Beta_1996_08_22:1.7
	MLWorks_Beta_1996_07_02:1.4
	MLWorks_Beta_1996_06_07:1.3
	MLWorks_Beta_1996_06_06:1.3
	MLWorks_Beta_1996_06_05:1.3
	MLWorks_Beta_1996_06_03:1.2
	MLWorks_Beta_1996_05_31:1.2
	MLWorks_Beta_1996_05_30:1.2;
locks; strict;
comment	@# @;


1.14
date	97.11.25.19.18.04;	author daveb;	state Exp;
branches;
next	1.13;

1.13
date	97.05.28.11.36.13;	author matthew;	state Exp;
branches;
next	1.12;

1.12
date	97.01.30.15.58.27;	author andreww;	state Exp;
branches
	1.12.1.1;
next	1.11;

1.11
date	96.10.22.13.27.01;	author jont;	state Exp;
branches
	1.11.1.1
	1.11.2.1
	1.11.3.1
	1.11.4.1;
next	1.10;

1.10
date	96.10.01.12.51.24;	author io;	state Exp;
branches
	1.10.1.1
	1.10.2.1;
next	1.9;

1.9
date	96.09.09.11.14.00;	author io;	state Exp;
branches
	1.9.1.1;
next	1.8;

1.8
date	96.09.07.00.02.24;	author io;	state Exp;
branches;
next	1.7;

1.7
date	96.08.14.11.15.52;	author io;	state Exp;
branches;
next	1.6;

1.6
date	96.07.29.23.59.03;	author io;	state Exp;
branches;
next	1.5;

1.5
date	96.07.04.17.59.56;	author andreww;	state Exp;
branches;
next	1.4;

1.4
date	96.06.25.09.45.10;	author io;	state Exp;
branches;
next	1.3;

1.3
date	96.06.04.23.36.53;	author io;	state Exp;
branches;
next	1.2;

1.2
date	96.05.24.13.40.24;	author io;	state Exp;
branches;
next	1.1;

1.1
date	96.05.24.09.39.26;	author io;	state Exp;
branches;
next	;

1.9.1.1
date	96.09.13.11.38.20;	author hope;	state Exp;
branches;
next	;

1.10.1.1
date	96.10.07.16.29.41;	author hope;	state Exp;
branches;
next	;

1.10.2.1
date	96.10.17.11.50.24;	author hope;	state Exp;
branches;
next	;

1.11.1.1
date	96.11.14.13.17.49;	author hope;	state Exp;
branches
	1.11.1.1.1.1;
next	;

1.11.1.1.1.1
date	96.11.28.15.28.19;	author hope;	state Exp;
branches;
next	;

1.11.2.1
date	96.11.22.18.35.37;	author hope;	state Exp;
branches;
next	;

1.11.3.1
date	96.12.17.18.14.36;	author hope;	state Exp;
branches
	1.11.3.1.1.1;
next	;

1.11.3.1.1.1
date	97.02.24.12.07.32;	author hope;	state Exp;
branches;
next	;

1.11.4.1
date	96.12.18.10.09.34;	author hope;	state Exp;
branches;
next	;

1.12.1.1
date	97.05.12.11.08.10;	author hope;	state Exp;
branches
	1.12.1.1.1.1
	1.12.1.1.2.1
	1.12.1.1.3.1;
next	;

1.12.1.1.1.1
date	97.07.28.18.50.38;	author daveb;	state Exp;
branches
	1.12.1.1.1.1.1.1;
next	;

1.12.1.1.1.1.1.1
date	97.10.07.12.15.31;	author jkbrook;	state Exp;
branches;
next	;

1.12.1.1.2.1
date	97.09.08.17.42.24;	author daveb;	state Exp;
branches;
next	;

1.12.1.1.3.1
date	97.09.09.14.41.50;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
@


1.14
log
@[Bug #30323]
@
text
@test1:OK
test1a:OK
test2:OK
test3:OK
test4:OK
test5:OK
test5a:OK
test6:OK
test7:OK
test8:OK
test9:OK
test10:OK
test10d:OKEXN
test10e:OKEXN
test10f:OKEXN
test10g:OKEXN
test10h:OKEXN
test10i:OKEXN
test10j:OKEXN
test11a:OK
test11b:OK
test11c:OK
test11d:OKEXN
test11e:OKEXN
test11f:OKEXN
test11g:OKEXN
test11h:OKEXN
test11i:OKEXN
test11j:OKEXN
val it : unit = ()
@


1.13
log
@Updating
@
text
@a0 13
val it : unit = ()
val it : unit = ()
structure Byte = struct ... end
val it : unit = ()
structure General = struct ... end
val it : unit = ()
structure Word8 = struct ... end
val it : unit = ()
structure Word8Vector = struct ... end
val it : unit = ()
structure Word8Array = struct ... end
val it : unit = ()
structure Char = struct ... end
@


1.12
log
@[Bug #1904]
mono vectors no longer equality types.
@
text
@d2 12
a13 187
structure Byte =
  struct
    val byteToChar : MLWorks.Internal.Types.word8 -> char = fn
    val bytesToString : vector(hidden) -> string = fn
    val charToByte : char -> MLWorks.Internal.Types.word8 = fn
    val packString : (substring(hidden) * array(hidden) * int) -> unit = fn
    val stringToBytes : string -> vector(hidden) = fn
    val unpackString : (array(hidden) * int * int option) -> string = fn
    val unpackStringVec : (vector(hidden) * int * int option) -> string = fn
  end
val it : unit = ()
structure General =
  struct
    type exn = exn
    datatype 'a option =
      NONE |
      SOME of 'a
    datatype order =
      EQUAL |
      GREATER |
      LESS
    eqtype unit = unit
    val ! : 'a ref -> 'a = fn
    val := : ('a ref * 'a) -> unit = fn
    val <> : (''a * ''a) -> bool = fn
    exception Bind
    exception Chr
    exception Div
    exception Domain
    val EQUAL : order
    exception Fail of string
    val GREATER : order
    val LESS : order
    exception Match
    val NONE : 'a option
    exception Option
    exception Overflow
    val SOME : 'a -> 'a option
    exception Size
    exception Subscript
    val before : ('a * unit) -> 'a = fn
    val exnMessage : exn -> string = fn
    val exnName : exn -> string = fn
    val getOpt : ('a option * 'a) -> 'a = fn
    val ignore : 'a -> unit = fn
    val isSome : 'a option -> bool = fn
    val o : (('a -> 'b) * ('c -> 'a)) -> 'c -> 'b = fn
    val valOf : 'a option -> 'a = fn
  end
val it : unit = ()
structure Word8 =
  struct
    eqtype word = word8
    val * : (Word8.word * Word8.word) -> Word8.word = fn
    val + : (Word8.word * Word8.word) -> Word8.word = fn
    val - : (Word8.word * Word8.word) -> Word8.word = fn
    val < : (Word8.word * Word8.word) -> bool = fn
    val << : (Word8.word * word) -> Word8.word = fn
    val <= : (Word8.word * Word8.word) -> bool = fn
    val > : (Word8.word * Word8.word) -> bool = fn
    val >= : (Word8.word * Word8.word) -> bool = fn
    val >> : (Word8.word * word) -> Word8.word = fn
    val andb : (Word8.word * Word8.word) -> Word8.word = fn
    val compare : (Word8.word * Word8.word) -> order = fn
    val div : (Word8.word * Word8.word) -> Word8.word = fn
    val fmt : radix(hidden) -> Word8.word -> string = fn
    val fromInt : int -> Word8.word = fn
    val fromLargeInt : MLWorks.Internal.Types.int32 -> Word8.word = fn
    val fromLargeWord : MLWorks.Internal.Types.word32 -> Word8.word = fn
    val fromString : string -> Word8.word option = fn
    val max : (Word8.word * Word8.word) -> Word8.word = fn
    val min : (Word8.word * Word8.word) -> Word8.word = fn
    val mod : (Word8.word * Word8.word) -> Word8.word = fn
    val notb : Word8.word -> Word8.word = fn
    val orb : (Word8.word * Word8.word) -> Word8.word = fn
    val scan : radix(hidden) -> ('a -> (char * 'a) option) -> 'a -> (Word8.word * 'a) option = fn
    val toInt : Word8.word -> int = fn
    val toIntX : Word8.word -> int = fn
    val toLargeInt : Word8.word -> MLWorks.Internal.Types.int32 = fn
    val toLargeIntX : Word8.word -> MLWorks.Internal.Types.int32 = fn
    val toLargeWord : Word8.word -> MLWorks.Internal.Types.word32 = fn
    val toLargeWordX : Word8.word -> MLWorks.Internal.Types.word32 = fn
    val toString : Word8.word -> string = fn
    val wordSize : int = 8
    val xorb : (Word8.word * Word8.word) -> Word8.word = fn
    val ~>> : (Word8.word * word) -> Word8.word = fn
  end
val it : unit = ()
structure Word8Vector =
  struct
    eqtype elem = word8
    type vector = vector
    val app : (Word8.word -> unit) -> Word8Vector.vector -> unit = fn
    val appi : ((int * Word8.word) -> unit) -> (Word8Vector.vector * int * int option) -> unit = fn
    val concat : Word8Vector.vector list -> Word8Vector.vector = fn
    val extract : (Word8Vector.vector * int * int option) -> Word8Vector.vector = fn
    val foldl : ((Word8.word * 'a) -> 'a) -> 'a -> Word8Vector.vector -> 'a = fn
    val foldli : ((int * Word8.word * 'a) -> 'a) -> 'a -> (Word8Vector.vector * int * int option) -> 'a = fn
    val foldr : ((Word8.word * 'a) -> 'a) -> 'a -> Word8Vector.vector -> 'a = fn
    val foldri : ((int * Word8.word * 'a) -> 'a) -> 'a -> (Word8Vector.vector * int * int option) -> 'a = fn
    val fromList : Word8.word list -> Word8Vector.vector = fn
    val length : Word8Vector.vector -> int = fn
    val maxLen : int = 16777196
    val sub : (Word8Vector.vector * int) -> Word8.word = fn
    val tabulate : (int * (int -> Word8.word)) -> Word8Vector.vector = fn
  end
val it : unit = ()
structure Word8Array =
  struct
    structure Vector =
      struct
        eqtype elem = word8
        type vector = vector
        val app : (Word8.word -> unit) -> Word8Vector.vector -> unit = fn
        val appi : ((int * Word8.word) -> unit) -> (Word8Vector.vector * int * int option) -> unit = fn
        val concat : Word8Vector.vector list -> Word8Vector.vector = fn
        val extract : (Word8Vector.vector * int * int option) -> Word8Vector.vector = fn
        val foldl : ((Word8.word * 'a) -> 'a) -> 'a -> Word8Vector.vector -> 'a = fn
        val foldli : ((int * Word8.word * 'a) -> 'a) -> 'a -> (Word8Vector.vector * int * int option) -> 'a = fn
        val foldr : ((Word8.word * 'a) -> 'a) -> 'a -> Word8Vector.vector -> 'a = fn
        val foldri : ((int * Word8.word * 'a) -> 'a) -> 'a -> (Word8Vector.vector * int * int option) -> 'a = fn
        val fromList : Word8.word list -> Word8Vector.vector = fn
        val length : Word8Vector.vector -> int = fn
        val maxLen : int = 16777196
        val sub : (Word8Vector.vector * int) -> Word8.word = fn
        val tabulate : (int * (int -> Word8.word)) -> Word8Vector.vector = fn
      end
    eqtype array = array
    eqtype elem = word8
    val app : (Word8.word -> unit) -> Word8Array.array -> unit = fn
    val appi : ((int * Word8.word) -> unit) -> (Word8Array.array * int * int option) -> unit = fn
    val array : (int * Word8.word) -> Word8Array.array = fn
    val copy : {di: int, dst: Word8Array.array, len: int option, si: int, src: Word8Array.array} -> unit = fn
    val copyVec : {di: int, dst: Word8Array.array, len: int option, si: int, src: Word8Vector.vector} -> unit = fn
    val extract : (Word8Array.array * int * int option) -> Word8Vector.vector = fn
    val foldl : ((Word8.word * 'a) -> 'a) -> 'a -> Word8Array.array -> 'a = fn
    val foldli : ((int * Word8.word * 'a) -> 'a) -> 'a -> (Word8Array.array * int * int option) -> 'a = fn
    val foldr : ((Word8.word * 'a) -> 'a) -> 'a -> Word8Array.array -> 'a = fn
    val foldri : ((int * Word8.word * 'a) -> 'a) -> 'a -> (Word8Array.array * int * int option) -> 'a = fn
    val fromList : Word8.word list -> Word8Array.array = fn
    val length : Word8Array.array -> int = fn
    val maxLen : int = 16777196
    val modify : (Word8.word -> Word8.word) -> Word8Array.array -> unit = fn
    val modifyi : ((int * Word8.word) -> Word8.word) -> (Word8Array.array * int * int option) -> unit = fn
    val sub : (Word8Array.array * int) -> Word8.word = fn
    val tabulate : (int * (int -> Word8.word)) -> Word8Array.array = fn
    val update : (Word8Array.array * int * Word8.word) -> unit = fn
  end
val it : unit = ()
structure Char =
  struct
    eqtype char = char
    eqtype string = string
    val < : (char * char) -> bool = fn
    val <= : (char * char) -> bool = fn
    val > : (char * char) -> bool = fn
    val >= : (char * char) -> bool = fn
    val chr : int -> char = fn
    val compare : (char * char) -> order = fn
    val contains : string -> char -> bool = fn
    val fromCString : string -> char option = fn
    val fromString : string -> char option = fn
    val isAlpha : char -> bool = fn
    val isAlphaNum : char -> bool = fn
    val isAscii : char -> bool = fn
    val isCntrl : char -> bool = fn
    val isDigit : char -> bool = fn
    val isGraph : char -> bool = fn
    val isHexDigit : char -> bool = fn
    val isLower : char -> bool = fn
    val isPrint : char -> bool = fn
    val isPunct : char -> bool = fn
    val isSpace : char -> bool = fn
    val isUpper : char -> bool = fn
    val maxChar : char = #"\255"
    val maxOrd : int = 255
    val minChar : char = #"\000"
    val notContains : string -> char -> bool = fn
    val ord : char -> int = fn
    val pred : char -> char = fn
    val scan : ('a -> (char * 'a) option) -> 'a -> (char * 'a) option = fn
    val succ : char -> char = fn
    val toCString : char -> string = fn
    val toLower : char -> char = fn
    val toString : char -> string = fn
    val toUpper : char -> char = fn
  end
@


1.12.1.1
log
@branched from 1.12
@
text
@@


1.12.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@@


1.12.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@@


1.12.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@@


1.12.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@


1.11
log
@Remove references to toplevel
@
text
@d93 1
a93 1
    eqtype vector = vector
d114 1
a114 1
        eqtype vector = vector
@


1.11.4.1
log
@branched from 1.11
@
text
@@


1.11.3.1
log
@branched from 1.11
@
text
@@


1.11.3.1.1.1
log
@branched from 1.11.3.1
@
text
@@


1.11.2.1
log
@branched from 1.11
@
text
@@


1.11.1.1
log
@branched from 1.11
@
text
@@


1.11.1.1.1.1
log
@branched from 1.11.1.1
@
text
@@


1.10
log
@[Bug #1626]
update toCString
@
text
@a12 1
val it : unit = ()
@


1.10.2.1
log
@branched from 1.10
@
text
@@


1.10.1.1
log
@branched from 1.10
@
text
@@


1.9
log
@remove banner
@
text
@d185 1
a185 1
    val toCString : char -> string option = fn
@


1.9.1.1
log
@branched from 1.9
@
text
@@


1.8
log
@updating for commercial version flyer
@
text
@a0 2
commercial version may be purchased directly from Harlequin.

@


1.7
log
@switch off Compiling messages...
@
text
@d1 2
@


1.6
log
@[Bug #1509]
@
text
@a1 32
Compiling basis.toplevel
Compiling basis.general
Compiling basis.__general
Compiling basis.string_cvt
Compiling basis.__pre_basis
Compiling basis.__pre_string_cvt
Compiling basis.__string_cvt
Compiling basis.__preinteger
Compiling basis.__preword32
Compiling basis.__preint32
Compiling basis.__preword
Compiling basis.word
Compiling basis.__word
Compiling basis.__word8
Compiling basis.mono_vector
Compiling basis.mono_array
Compiling basis.list
Compiling basis.__list
Compiling basis.__word8vector
Compiling basis.__word8array
Compiling basis.integer
Compiling basis.__integer
Compiling basis.char
Compiling basis.string
Compiling basis.substring
Compiling basis.__pre_char
Compiling basis.__string
Compiling basis.__substring
Compiling basis.byte
Compiling basis.__char
Compiling basis.__charvector
Compiling basis.__byte
d5 1
a5 1
    val bytesToString : string -> string = fn
d8 1
a8 1
    val stringToBytes : string -> string = fn
d10 1
a10 1
    val unpackStringVec : (string * int * int option) -> string = fn
d94 11
a104 11
    eqtype vector = string
    val app : (Word8.word -> unit) -> string -> unit = fn
    val appi : ((int * Word8.word) -> unit) -> (string * int * int option) -> unit = fn
    val concat : string list -> string = fn
    val extract : (string * int * int option) -> string = fn
    val foldl : ((Word8.word * 'a) -> 'a) -> 'a -> string -> 'a = fn
    val foldli : ((int * Word8.word * 'a) -> 'a) -> 'a -> (string * int * int option) -> 'a = fn
    val foldr : ((Word8.word * 'a) -> 'a) -> 'a -> string -> 'a = fn
    val foldri : ((int * Word8.word * 'a) -> 'a) -> 'a -> (string * int * int option) -> 'a = fn
    val fromList : Word8.word list -> string = fn
    val length : string -> int = fn
d106 2
a107 2
    val sub : (string * int) -> Word8.word = fn
    val tabulate : (int * (int -> Word8.word)) -> string = fn
d115 11
a125 11
        eqtype vector = string
        val app : (Word8.word -> unit) -> string -> unit = fn
        val appi : ((int * Word8.word) -> unit) -> (string * int * int option) -> unit = fn
        val concat : string list -> string = fn
        val extract : (string * int * int option) -> string = fn
        val foldl : ((Word8.word * 'a) -> 'a) -> 'a -> string -> 'a = fn
        val foldli : ((int * Word8.word * 'a) -> 'a) -> 'a -> (string * int * int option) -> 'a = fn
        val foldr : ((Word8.word * 'a) -> 'a) -> 'a -> string -> 'a = fn
        val foldri : ((int * Word8.word * 'a) -> 'a) -> 'a -> (string * int * int option) -> 'a = fn
        val fromList : Word8.word list -> string = fn
        val length : string -> int = fn
d127 2
a128 2
        val sub : (string * int) -> Word8.word = fn
        val tabulate : (int * (int -> Word8.word)) -> string = fn
d136 2
a137 2
    val copyVec : {di: int, dst: Word8Array.array, len: int option, si: int, src: string} -> unit = fn
    val extract : (Word8Array.array * int * int option) -> string = fn
@


1.5
log
@updating.
@
text
@a23 1
Compiling basis.substring
d26 1
@


1.4
log
@add __pre_char again
@
text
@d2 1
a4 1
Compiling basis.toplevel
d41 2
a42 2
    val unpackString : (array(hidden) * int * int MLWorks.Option.option) -> string = fn
    val unpackStringVec : (string * int * int MLWorks.Option.option) -> string = fn
a44 31
structure TopLevel =
  struct
    datatype 'a option =
      NONE |
      SOME of 'a
    datatype order =
      EQUAL |
      GREATER |
      LESS
    exception Domain
    val EQUAL : order
    exception Fail of string
    val GREATER : order
    val LESS : order
    val NONE : 'a option
    val SOME : 'a -> 'a option
  end
datatype 'a option =
  NONE |
  SOME of 'a
datatype order =
  EQUAL |
  GREATER |
  LESS
exception Domain
val EQUAL : order
exception Fail of string
val GREATER : order
val LESS : order
val NONE : 'a option
val SOME : 'a -> 'a option
@


1.3
log
@update
@
text
@d27 1
a27 1
Compiling basis.__char
d31 1
a222 2
    exception Dummy of char
    exception ToString of char
a235 1
    val isOctDigit : char -> bool = fn
a239 1
    val makestring : char -> string = fn
a246 1
    val scanc : ('a -> (char * 'a) option) -> 'a -> (char * 'a) option = fn
@


1.2
log
@** No reason given. **
@
text
@d5 4
a8 3
Compiling basis.stringcvt
Compiling basis.__pre_char
Compiling basis.__stringcvt
d26 1
a27 1
Compiling basis.string
d222 2
d237 1
d242 1
d250 1
@


1.1
log
@new unit
@
text
@d5 38
a111 38
  end
val it : unit = ()
Compiling basis.stringcvt
Compiling basis.__pre_char
Compiling basis.__stringcvt
Compiling basis.__preinteger
Compiling basis.__preword32
Compiling basis.__preint32
Compiling basis.__preword
Compiling basis.word
Compiling basis.__word
Compiling basis.__word8
Compiling basis.mono_vector
Compiling basis.mono_array
Compiling basis.list
Compiling basis.__list
Compiling basis.__word8vector
Compiling basis.__word8array
Compiling basis.integer
Compiling basis.__integer
Compiling basis.substring
Compiling basis.char
Compiling basis.__char
Compiling basis.string
Compiling basis.__string
Compiling basis.__substring
Compiling basis.byte
Compiling basis.__charvector
Compiling basis.__byte
structure Byte =
  struct
    val byteToChar : MLWorks.Internal.Types.word8 -> char = fn
    val bytesToString : string -> string = fn
    val charToByte : char -> MLWorks.Internal.Types.word8 = fn
    val packString : (substring(hidden) * array(hidden) * int) -> unit = fn
    val stringToBytes : string -> string = fn
    val unpackString : (array(hidden) * int * int option) -> string = fn
    val unpackStringVec : (string * int * int option) -> string = fn
@
