head	1.10;
access;
symbols
	MLWorks_21c0_1999_03_25:1.10
	MLWorks_20c1_1998_08_20:1.10
	MLWorks_20c0_1998_08_04:1.10
	MLWorks_20b2c2_1998_06_19:1.10
	MLWorks_20b2_Windows_1998_06_12:1.10
	MLWorks_20b1c1_1998_05_07:1.10
	MLWorks_20b0_1998_04_07:1.10
	MLWorks_20b0_1998_03_20:1.10
	MLWorks_20m2_1998_02_16:1.9
	MLWorks_20m1_1997_10_23:1.8
	MLWorks_11r1:1.6.1.1.1.1.1
	MLWorks_11c0_1997_09_09:1.6.1.1.1.1
	MLWorks_10r3:1.6.1.1.3
	MLWorks_10r2_551:1.6.1.1.2
	MLWorks_11:1.6.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.6.1.1
	MLWorks_20m0_1997_06_20:1.7
	MLWorks_1_0_r2c2_1997_06_14:1.6.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.6.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.6.1
	MLWorks_BugFix_1997_04_24:1.6
	MLWorks_1_0_r2_Win32_1997_04_11:1.6
	MLWorks_1_0_r2_Unix_1997_04_04:1.6
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.4.3.1.1
	MLWorks_gui_1996_12_18:1.4.4
	MLWorks_1_0_Win32_1996_12_17:1.4.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.4.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.4.1.1
	MLWorks_1_0_Irix_1996_11_28:1.4.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.4.2
	MLWorks_1_0_Unix_1996_11_14:1.4.1
	MLWorks_Open_Beta2_1996_10_11:1.2.3
	MLWorks_License_dev:1.2.2
	MLWorks_1_open_beta_1996_09_13:1.2.1
	MLWorks_Open_Beta_1996_08_22:1.2
	MLWorks_Beta_1996_07_02:1.1
	MLWorks_Beta_1996_06_07:1.1
	MLWorks_Beta_1996_06_06:1.1
	MLWorks_Beta_1996_06_05:1.1
	MLWorks_Beta_1996_06_03:1.1
	MLWorks_Beta_1996_05_31:1.1
	MLWorks_Beta_1996_05_30:1.1;
locks; strict;
comment	@ *  @;


1.10
date	98.02.18.11.56.02;	author mitchell;	state Exp;
branches;
next	1.9;

1.9
date	97.11.21.10.51.42;	author daveb;	state Exp;
branches;
next	1.8;

1.8
date	97.08.08.14.00.01;	author brucem;	state Exp;
branches;
next	1.7;

1.7
date	97.05.28.11.27.16;	author jont;	state Exp;
branches;
next	1.6;

1.6
date	97.01.30.16.36.32;	author andreww;	state Exp;
branches
	1.6.1.1;
next	1.5;

1.5
date	97.01.15.16.03.14;	author io;	state Exp;
branches;
next	1.4;

1.4
date	96.11.06.12.06.36;	author matthew;	state Exp;
branches
	1.4.1.1
	1.4.2.1
	1.4.3.1
	1.4.4.1;
next	1.3;

1.3
date	96.10.22.13.23.34;	author jont;	state Exp;
branches;
next	1.2;

1.2
date	96.08.14.12.47.46;	author io;	state Exp;
branches
	1.2.1.1
	1.2.2.1
	1.2.3.1;
next	1.1;

1.1
date	96.05.22.15.17.15;	author matthew;	state Exp;
branches;
next	;

1.2.1.1
date	96.09.13.11.37.59;	author hope;	state Exp;
branches;
next	;

1.2.2.1
date	96.10.07.16.29.19;	author hope;	state Exp;
branches;
next	;

1.2.3.1
date	96.10.17.11.50.06;	author hope;	state Exp;
branches;
next	;

1.4.1.1
date	96.11.14.13.17.30;	author hope;	state Exp;
branches
	1.4.1.1.1.1;
next	;

1.4.1.1.1.1
date	96.11.28.15.27.59;	author hope;	state Exp;
branches;
next	;

1.4.2.1
date	96.11.22.18.35.18;	author hope;	state Exp;
branches;
next	;

1.4.3.1
date	96.12.17.18.14.16;	author hope;	state Exp;
branches
	1.4.3.1.1.1;
next	;

1.4.3.1.1.1
date	97.02.24.12.07.11;	author hope;	state Exp;
branches;
next	;

1.4.4.1
date	96.12.18.10.09.15;	author hope;	state Exp;
branches;
next	;

1.6.1.1
date	97.05.12.11.07.49;	author hope;	state Exp;
branches
	1.6.1.1.1.1
	1.6.1.1.2.1
	1.6.1.1.3.1;
next	;

1.6.1.1.1.1
date	97.07.28.18.50.24;	author daveb;	state Exp;
branches
	1.6.1.1.1.1.1.1;
next	;

1.6.1.1.1.1.1.1
date	97.10.07.12.14.31;	author jkbrook;	state Exp;
branches;
next	;

1.6.1.1.2.1
date	97.09.08.17.42.14;	author daveb;	state Exp;
branches;
next	;

1.6.1.1.3.1
date	97.09.09.14.41.40;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
New test
@


1.10
log
@[Bug #30349]
Fix test to avoid non-unit sequence warning
@
text
@(*  ==== Testing ====
 *
 *  Result: OK
 *
 *  Revision Log
 *  ------------
 *  $Log: word8vectors.sml,v $
 *  Revision 1.9  1997/11/21  10:51:42  daveb
 *  [Bug #30323]
 *
 *  Revision 1.8  1997/08/08  14:00:01  brucem
 *  [Bug #30086]
 *  Test map and mapi.
 *
 *  Revision 1.7  1997/05/28  11:27:16  jont
 *  [Bug #30090]
 *  Remove uses of MLWorks.IO
 *
 *  Revision 1.6  1997/01/30  16:36:32  andreww
 *  [Bug #1904]
 *  monovectors no longer equality types.
 *
 *  Revision 1.5  1997/01/15  16:03:14  io
 *  [Bug #1892]
 *  rename __word{8,16,32}{array,vector} to __word{8,16,32}_{array,vector}
 *
 *  Revision 1.4  1996/11/06  12:06:36  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
 *  Revision 1.3  1996/10/22  13:23:34  jont
 *  Remove references to toplevel
 *
 *  Revision 1.2  1996/08/14  12:47:46  io
 *  switch off Compiling messages...
 *
 *  Revision 1.1  1996/05/22  15:17:15  matthew
 *  new unit
 *  New test
 *
*)

(* test/vector.sml -- some test cases for Vector 
   PS 1994-12-10, 1995-06-14 
   modified for MLWorks Fri May 17 11:46:10 1996
   *)


infix 1 seq
fun e1 seq e2 = e2;
fun check b = if b then "OK" else "WRONG";
fun check' f = (if f () then "OK" else "WRONG") handle _ => "EXN";
fun checkexn' e f = (ignore(f ()); "WRONG")
   handle e' => if (General.exnName e= General.exnName e')
                then "OKEXN" else "WRONG EXN"

fun range (from, to) p = 
    let open Int
    in
	(from > to) orelse (p from) andalso (range (from+1, to) p)
    end;

fun checkrange bounds = check o range bounds;


local
    open Word8Vector;
    val i2w = Word8.fromInt;
    val w2i = Word8.toInt;
    infix 9 sub;

  infix ==;
  fun a == b =
    let
      val len = Word8Vector.length a
      fun scan i = if i=len then true
                   else (Word8Vector.sub(a,i) = Word8Vector.sub(b,i)
                         andalso scan (i+1))
    in
      len = Word8Vector.length b
      andalso scan 0
    end


in

val a = fromList (List.map i2w [0,1,2,3,4,5,6]);
val b = fromList (List.map i2w [44,55,66]);
val c = fromList (List.map i2w [0,1,2,3,4,5,6]);

val fromList' = fn l => fromList (List.map i2w l)

val test1 = check'(fn _ => not(a==b));
val test2 = check'(fn _ => a==c);

val d = tabulate(100, fn i => i2w (i mod 7));

val test3 = check'(fn _ => d sub 27 = i2w 6);

val test4a = (tabulate(maxLen+1, i2w) seq "WRONG")
             handle Size => "OK" | _ => "WRONG";

val test4b = (tabulate(~1, i2w)       seq "WRONG")
             handle Size => "OK" | _ => "WRONG";

val test4c = check'(fn _ => length (tabulate(0, fn i => i2w (i div 0))) = 0);

val test5 = check'(fn _ => length (fromList []) = 0 andalso length a = 7);

val test6a = (c sub ~1 seq "WRONG") handle Subscript => "OK" | _ => "WRONG";
val test6b = (c sub 7  seq "WRONG") handle Subscript => "OK" | _ => "WRONG";
val test6c = check'(fn _ => c sub 0 = i2w 0);

val e = concat [d, b, d];

val test7 = check'(fn _ => length e = 203);

val test8 = check'(fn _ => length (concat []) = 0);

val f = Word8Vector.extract(e, 100, SOME 3)  

val test9 = check'(fn _ => f == b);

val test9a = check'(fn _ => e == extract(e, 0, SOME (length e)) 
		    andalso e == extract(e, 0, NONE));
val test9b = check'(fn _ => fromList [] == extract(e, 100, SOME 0));
val test9c = (extract(e, ~1, SOME (length e))  seq "WRONG") 
             handle Subscript => "OK" | _ => "WRONG"
val test9d = (extract(e, length e + 1, SOME 0)  seq "WRONG") 
             handle Subscript => "OK" | _ => "WRONG"
val test9e = (extract(e, 0, SOME (length e+1)) seq "WRONG") 
             handle Subscript => "OK" | _ => "WRONG"
val test9f = (extract(e, 20, SOME ~1)        seq "WRONG") 
             handle Subscript => "OK" | _ => "WRONG"
val test9g = (extract(e, ~1, NONE)  seq "WRONG") 
             handle Subscript => "OK" | _ => "WRONG"

val test9h = (extract(e, length e + 1, NONE)  seq "WRONG") 
             handle Subscript => "OK" | _ => "WRONG"
val test9i = check'(fn _ => fromList [] == extract(e, length e, SOME 0)
		    andalso fromList [] == extract(e, length e, NONE));

  (* Test map and mapi *)
  val v = (fromList' [0, 1, 2, 3, 4, 5, 6, 7]) ;

  val add1 = (fn i => i2w (w2i i+1)) ;

  val addi = (fn (i, j) => i2w (i+ w2i j)) ;

  val testAa = check'
         (fn _ => (map add1 v) == fromList' [1, 2, 3, 4, 5, 6, 7, 8]) ;
  val testAb = check'
         (fn _ => (map add1 (fromList' [])) == (fromList' [])) ;
  val testAc = check'
         (fn _ => (mapi addi (v, 0, NONE)) == fromList' [0,2,4,6,8,10,12,14]);
  val testAd = check'
         (fn _ => (mapi addi (v, 1, NONE)) == fromList' [2,4,6,8,10,12,14]);
  val testAe = check'
         (fn _ => (mapi addi (v, 7, NONE)) == fromList' [14]);
  val testAf = 
         (ignore(mapi addi (v, ~1, NONE)); "WRONG") handle Subscript => "OKEXN"
                                                  | _ => "WRONG EXN" ;
  val testAga = check'
         (fn _ => (mapi addi (v, 8, NONE)) == fromList' [])
  val testAgb =
         (ignore(mapi addi (v, 9, NONE)); "WRONG") handle Subscript => "OKEXN"
                                                  | _ => "WRONG EXN" ;
  val testAh =
         check' (fn _ => mapi addi (v, 0, SOME 2) == fromList' [0, 2]) ;
  val testAi =
         check' (fn _ => mapi addi (v, 6, SOME 2) == fromList' [12,14]) ;
  val testAj =
         (ignore(mapi addi (v,7,SOME 2)); "WRONG") handle Subscript => "OKEXN"
                                                 | _ => "WRONG EXN" ;
  val testAk = check'
         (fn _ => mapi addi (v, 2, SOME 0) == fromList' [])
  val testAl =
         (ignore(mapi addi (v, 2, SOME ~1)); "WRONG") handle Subscript => "OKEXN"
                                                 | _ => "WRONG EXN" ;

end;
@


1.9
log
@[Bug #30323]
@
text
@d8 3
d53 1
a53 1
fun checkexn' e f = (f () ; "WRONG")
d161 1
a161 1
         (mapi addi (v, ~1, NONE) ; "WRONG") handle Subscript => "OKEXN"
d166 1
a166 1
         (mapi addi (v, 9, NONE) ; "WRONG") handle Subscript => "OKEXN"
d173 1
a173 1
         (mapi addi (v,7,SOME 2) ; "WRONG") handle Subscript => "OKEXN"
d178 1
a178 1
         (mapi addi (v, 2, SOME ~1) ; "WRONG") handle Subscript => "OKEXN"
@


1.8
log
@[Bug #30086]
Test map and mapi.
@
text
@d8 4
a43 10

local 
  val _ = Shell.Options.set(Shell.Options.ValuePrinter.maximumStrDepth, 0);
in
  val _ = (
    Shell.Build.loadSource "basis.__int";
    Shell.Build.loadSource "basis.__word8_vector";
    Shell.Build.loadSource "basis.__word8" ;
    Shell.Build.loadSource "basis.__list" )
end
@


1.7
log
@[Bug #30090]
Remove uses of MLWorks.IO
@
text
@d8 4
d41 11
a51 1
Shell.Build.loadSource "basis.__int";
d56 3
a67 2
Shell.Build.loadSource "basis.__word8_vector";
Shell.Build.loadSource "basis.__word8";
d72 1
d90 5
a94 3
val a = fromList (map i2w [0,1,2,3,4,5,6]);
val b = fromList (map i2w [44,55,66]);
val c = fromList (map i2w [0,1,2,3,4,5,6]);
d145 39
@


1.6
log
@[Bug #1904]
monovectors no longer equality types.
@
text
@d8 4
a37 3
val output = MLWorks.IO.output
val std_out = MLWorks.IO.std_out
val flush_out = MLWorks.IO.flush_out
a39 1
fun say s = (output(std_out, s); flush_out std_out);
@


1.6.1.1
log
@branched from 1.6
@
text
@a7 4
 *  Revision 1.6  1997/01/30  16:36:32  andreww
 *  [Bug #1904]
 *  monovectors no longer equality types.
 *
@


1.6.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a7 3
 *  Revision 1.6.1.1  1997/05/12  11:07:49  hope
 *  branched from 1.6
 *
@


1.6.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a7 3
 *  Revision 1.6.1.1  1997/05/12  11:07:49  hope
 *  branched from 1.6
 *
@


1.6.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a7 3
 *  Revision 1.6.1.1  1997/05/12  11:07:49  hope
 *  branched from 1.6
 *
@


1.6.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a7 3
 *  Revision 1.6.1.1.1.1  1997/07/28  18:50:24  daveb
 *  branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.5
log
@[Bug #1892]
rename __word{8,16,32}{array,vector} to __word{8,16,32}_{array,vector}
@
text
@d8 4
d58 14
d78 2
a79 2
val test1 = check'(fn _ => a<>b);
val test2 = check'(fn _ => a=c);
d107 1
a107 1
val test9 = check'(fn _ => f = b);
d109 3
a111 3
val test9a = check'(fn _ => e = extract(e, 0, SOME (length e)) 
		    andalso e = extract(e, 0, NONE));
val test9b = check'(fn _ => fromList [] = extract(e, 100, SOME 0));
d125 2
a126 2
val test9i = check'(fn _ => fromList [] = extract(e, length e, SOME 0)
		    andalso fromList [] = extract(e, length e, NONE));
@


1.4
log
@[Bug #1728]
__integer becomes __int
@
text
@d8 4
d47 1
a47 1
Shell.Build.loadSource "basis.__word8vector";
@


1.4.4.1
log
@branched from 1.4
@
text
@a7 4
 *  Revision 1.4  1996/11/06  12:06:36  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
@


1.4.3.1
log
@branched from 1.4
@
text
@a7 4
 *  Revision 1.4  1996/11/06  12:06:36  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
@


1.4.3.1.1.1
log
@branched from 1.4.3.1
@
text
@a7 3
 *  Revision 1.4.3.1  1996/12/17  18:14:16  hope
 *  branched from 1.4
 *
@


1.4.2.1
log
@branched from 1.4
@
text
@a7 4
 *  Revision 1.4  1996/11/06  12:06:36  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
@


1.4.1.1
log
@branched from 1.4
@
text
@a7 4
 *  Revision 1.4  1996/11/06  12:06:36  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
@


1.4.1.1.1.1
log
@branched from 1.4.1.1
@
text
@a7 3
 *  Revision 1.4.1.1  1996/11/14  13:17:30  hope
 *  branched from 1.4
 *
@


1.3
log
@Remove references to toplevel
@
text
@d8 3
d25 1
a25 1
Shell.Build.loadSource "basis.__integer";
@


1.2
log
@switch off Compiling messages...
@
text
@d8 3
d21 1
a21 1
Shell.Build.loadSource "basis.toplevel";
@


1.2.3.1
log
@branched from 1.2
@
text
@a7 3
 *  Revision 1.2  1996/08/14  12:47:46  io
 *  switch off Compiling messages...
 *
@


1.2.2.1
log
@branched from 1.2
@
text
@a7 3
 *  Revision 1.2  1996/08/14  12:47:46  io
 *  switch off Compiling messages...
 *
@


1.2.1.1
log
@branched from 1.2
@
text
@a7 3
 *  Revision 1.2  1996/08/14  12:47:46  io
 *  switch off Compiling messages...
 *
@


1.1
log
@new unit
New test
@
text
@d7 5
a11 1
 *  $Log: basis:char.sml,v $
d77 1
a77 1
val f = MLWorks.String.substring (e, 100, 3);
@
