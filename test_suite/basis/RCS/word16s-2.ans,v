head	1.10;
access;
symbols
	MLWorks_21c0_1999_03_25:1.10
	MLWorks_20c1_1998_08_20:1.10
	MLWorks_20c0_1998_08_04:1.10
	MLWorks_20b2c2_1998_06_19:1.10
	MLWorks_20b2_Windows_1998_06_12:1.10
	MLWorks_20b1c1_1998_05_07:1.10
	MLWorks_20b0_1998_04_07:1.10
	MLWorks_20b0_1998_03_20:1.10
	MLWorks_20m2_1998_02_16:1.10
	MLWorks_20m1_1997_10_23:1.9
	MLWorks_11r1:1.8.5.1.1.1.1
	MLWorks_11c0_1997_09_09:1.8.5.1.1.1
	MLWorks_10r3:1.8.5.1.3
	MLWorks_10r2_551:1.8.5.1.2
	MLWorks_11:1.8.5.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.8.5.1
	MLWorks_20m0_1997_06_20:1.9
	MLWorks_1_0_r2c2_1997_06_14:1.8.5.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.8.5.1
	MLWorks_1_0_r2c1_1997_05_12:1.8.5
	MLWorks_BugFix_1997_04_24:1.8
	MLWorks_1_0_r2_Win32_1997_04_11:1.8
	MLWorks_1_0_r2_Unix_1997_04_04:1.8
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.8.3.1.1
	MLWorks_gui_1996_12_18:1.8.4
	MLWorks_1_0_Win32_1996_12_17:1.8.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.8.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.8.1.1
	MLWorks_1_0_Irix_1996_11_28:1.8.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.8.2
	MLWorks_1_0_Unix_1996_11_14:1.8.1
	MLWorks_Open_Beta2_1996_10_11:1.7.3
	MLWorks_License_dev:1.7.2
	MLWorks_1_open_beta_1996_09_13:1.7.1
	MLWorks_Open_Beta_1996_08_22:1.5
	MLWorks_Beta_1996_07_02:1.3
	MLWorks_Beta_1996_06_07:1.3
	MLWorks_Beta_1996_06_06:1.3
	MLWorks_Beta_1996_06_05:1.3
	MLWorks_Beta_1996_06_03:1.2
	MLWorks_Beta_1996_05_31:1.2
	MLWorks_Beta_1996_05_30:1.2;
locks; strict;
comment	@# @;


1.10
date	97.11.25.19.26.54;	author daveb;	state Exp;
branches;
next	1.9;

1.9
date	97.05.28.16.19.10;	author jont;	state Exp;
branches;
next	1.8;

1.8
date	96.10.22.13.30.11;	author jont;	state Exp;
branches
	1.8.1.1
	1.8.2.1
	1.8.3.1
	1.8.4.1
	1.8.5.1;
next	1.7;

1.7
date	96.09.09.11.14.03;	author io;	state Exp;
branches
	1.7.1.1
	1.7.2.1
	1.7.3.1;
next	1.6;

1.6
date	96.09.07.00.02.27;	author io;	state Exp;
branches;
next	1.5;

1.5
date	96.08.14.12.15.38;	author io;	state Exp;
branches;
next	1.4;

1.4
date	96.07.04.18.33.44;	author andreww;	state Exp;
branches;
next	1.3;

1.3
date	96.06.05.02.30.16;	author io;	state Exp;
branches;
next	1.2;

1.2
date	96.05.23.08.55.20;	author matthew;	state Exp;
branches;
next	1.1;

1.1
date	96.05.22.15.27.37;	author matthew;	state Exp;
branches;
next	;

1.7.1.1
date	96.09.13.11.38.45;	author hope;	state Exp;
branches;
next	;

1.7.2.1
date	96.10.07.16.30.13;	author hope;	state Exp;
branches;
next	;

1.7.3.1
date	96.10.17.11.50.49;	author hope;	state Exp;
branches;
next	;

1.8.1.1
date	96.11.14.13.18.14;	author hope;	state Exp;
branches
	1.8.1.1.1.1;
next	;

1.8.1.1.1.1
date	96.11.28.15.28.45;	author hope;	state Exp;
branches;
next	;

1.8.2.1
date	96.11.22.18.36.00;	author hope;	state Exp;
branches;
next	;

1.8.3.1
date	96.12.17.18.14.59;	author hope;	state Exp;
branches
	1.8.3.1.1.1;
next	;

1.8.3.1.1.1
date	97.02.24.12.08.00;	author hope;	state Exp;
branches;
next	;

1.8.4.1
date	96.12.18.10.09.59;	author hope;	state Exp;
branches;
next	;

1.8.5.1
date	97.05.12.11.08.40;	author hope;	state Exp;
branches
	1.8.5.1.1.1
	1.8.5.1.2.1
	1.8.5.1.3.1;
next	;

1.8.5.1.1.1
date	97.07.28.18.50.40;	author daveb;	state Exp;
branches
	1.8.5.1.1.1.1.1;
next	;

1.8.5.1.1.1.1.1
date	97.10.07.12.14.39;	author jkbrook;	state Exp;
branches;
next	;

1.8.5.1.2.1
date	97.09.08.17.42.27;	author daveb;	state Exp;
branches;
next	;

1.8.5.1.3.1
date	97.09.09.14.41.52;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
New test
@


1.10
log
@[Bug #30323]
@
text
@infix 1 seq
val seq : ('a * 'b) -> 'b = fn
val check : bool -> string = fn
val check' : (unit -> bool) -> string = fn
val range : (int * int) -> (int -> bool) -> bool = fn
val checkrange : (int * int) -> (int -> bool) -> string = fn
val ashift : (Word16.word * int) -> Word16.word = fn
val maxnegint : int = ~32768
val maxposint : int = 32767
val pwr2 : int -> int = fn
val rwp : int -> int -> int = fn
val shift : (Word16.word * int) -> Word16.word = fn
val signExtend : Word16.word -> int = fn
val test1 : string = "OK"
val test10a : string = "OK"
val test10d : string = "OK"
val test10e : string = "OK"
val test10f : string = "OK"
val test11a : string = "OK"
val test11b : string = "OK"
val test11c : string = "OK"
val test11d : string = "OK"
val test11e : string = "OK"
val test11f : string = "OK"
val test11g : string = "OK"
val test11h : string = "OK"
val test11i : string = "OK"
val test12a : string = "OK"
val test12b : string = "OK"
val test12c : string = "OK"
val test12d : string = "OK"
val test12e : string = "OK"
val test12f : string = "OK"
val test12g : string = "OK"
val test12h : string = "OK"
val test12i : string = "OK"
val test12j : string = "OK"
val test12k : string = "OK"
val test12l : string = "OK"
val test12m : string = "OK"
val test12n : string = "OK"
val test12o : string = "OK"
val test12p : string = "OK"
val test12q : string = "OK"
val test13a : string = "OK"
val test13b : string = "OK"
val test3 : string = "OK"
val test5a : string = "OK"
val test5b : string = "OK"
val test6a : string = "OK"
val test6b : string = "OK"
val test7a : string = "OK"
val test7b : string = "OK"
val test8a : string = "OK"
val test8b : string = "OK"
val test9a : string = "OK"
val test9c : string = "OK"
val test9d : string = "OK"
val test9e : string = "OK"
val test9f : string = "OK"
@


1.9
log
@[Bug #30090]
Remove uses of MLWorks.IO
@
text
@a0 34
val it : unit = ()
structure Int =
  struct
    eqtype int = int
    val * : (int * int) -> int = fn
    val + : (int * int) -> int = fn
    val - : (int * int) -> int = fn
    val < : (int * int) -> bool = fn
    val <= : (int * int) -> bool = fn
    val > : (int * int) -> bool = fn
    val >= : (int * int) -> bool = fn
    val abs : int -> int = fn
    val compare : (int * int) -> order = fn
    val div : (int * int) -> int = fn
    val fmt : radix(hidden) -> int -> string = fn
    val fromInt : int -> int = fn
    val fromLarge : MLWorks.Internal.Types.int32 -> int = fn
    val fromString : string -> int option = fn
    val max : (int * int) -> int = fn
    val maxInt : int option = SOME 536870911
    val min : (int * int) -> int = fn
    val minInt : int option = SOME ~536870912
    val mod : (int * int) -> int = fn
    val precision : int option = SOME 30
    val quot : (int * int) -> int = fn
    val rem : (int * int) -> int = fn
    val sameSign : (int * int) -> bool = fn
    val scan : radix(hidden) -> ('a -> (char * 'a) option) -> 'a -> (int * 'a) option = fn
    val sign : int -> int = fn
    val toInt : int -> int = fn
    val toLarge : int -> MLWorks.Internal.Types.int32 = fn
    val toString : int -> string = fn
    val ~ : int -> int = fn
  end
a6 76
val it : unit = ()
structure Word16 =
  struct
    eqtype word = word16
    val * : (Word16.word * Word16.word) -> Word16.word = fn
    val + : (Word16.word * Word16.word) -> Word16.word = fn
    val - : (Word16.word * Word16.word) -> Word16.word = fn
    val < : (Word16.word * Word16.word) -> bool = fn
    val << : (Word16.word * word) -> Word16.word = fn
    val <= : (Word16.word * Word16.word) -> bool = fn
    val > : (Word16.word * Word16.word) -> bool = fn
    val >= : (Word16.word * Word16.word) -> bool = fn
    val >> : (Word16.word * word) -> Word16.word = fn
    val andb : (Word16.word * Word16.word) -> Word16.word = fn
    val compare : (Word16.word * Word16.word) -> order = fn
    val div : (Word16.word * Word16.word) -> Word16.word = fn
    val fmt : radix(hidden) -> Word16.word -> string = fn
    val fromInt : int -> Word16.word = fn
    val fromLargeInt : MLWorks.Internal.Types.int32 -> Word16.word = fn
    val fromLargeWord : MLWorks.Internal.Types.word32 -> Word16.word = fn
    val fromString : string -> Word16.word option = fn
    val max : (Word16.word * Word16.word) -> Word16.word = fn
    val min : (Word16.word * Word16.word) -> Word16.word = fn
    val mod : (Word16.word * Word16.word) -> Word16.word = fn
    val notb : Word16.word -> Word16.word = fn
    val orb : (Word16.word * Word16.word) -> Word16.word = fn
    val scan : radix(hidden) -> ('a -> (char * 'a) option) -> 'a -> (Word16.word * 'a) option = fn
    val toInt : Word16.word -> int = fn
    val toIntX : Word16.word -> int = fn
    val toLargeInt : Word16.word -> MLWorks.Internal.Types.int32 = fn
    val toLargeIntX : Word16.word -> MLWorks.Internal.Types.int32 = fn
    val toLargeWord : Word16.word -> MLWorks.Internal.Types.word32 = fn
    val toLargeWordX : Word16.word -> MLWorks.Internal.Types.word32 = fn
    val toString : Word16.word -> string = fn
    val wordSize : int = 16
    val xorb : (Word16.word * Word16.word) -> Word16.word = fn
    val ~>> : (Word16.word * word) -> Word16.word = fn
  end
val it : unit = ()
structure Word =
  struct
    eqtype word = word
    val * : (word * word) -> word = fn
    val + : (word * word) -> word = fn
    val - : (word * word) -> word = fn
    val < : (word * word) -> bool = fn
    val << : (word * word) -> word = fn
    val <= : (word * word) -> bool = fn
    val > : (word * word) -> bool = fn
    val >= : (word * word) -> bool = fn
    val >> : (word * word) -> word = fn
    val andb : (word * word) -> word = fn
    val compare : (word * word) -> order = fn
    val div : (word * word) -> word = fn
    val fmt : radix(hidden) -> word -> string = fn
    val fromInt : int -> word = fn
    val fromLargeInt : MLWorks.Internal.Types.int32 -> word = fn
    val fromLargeWord : MLWorks.Internal.Types.word32 -> word = fn
    val fromString : string -> word option = fn
    val max : (word * word) -> word = fn
    val min : (word * word) -> word = fn
    val mod : (word * word) -> word = fn
    val notb : word -> word = fn
    val orb : (word * word) -> word = fn
    val scan : radix(hidden) -> ('a -> (char * 'a) option) -> 'a -> (word * 'a) option = fn
    val toInt : word -> int = fn
    val toIntX : word -> int = fn
    val toLargeInt : word -> MLWorks.Internal.Types.int32 = fn
    val toLargeIntX : word -> MLWorks.Internal.Types.int32 = fn
    val toLargeWord : word -> MLWorks.Internal.Types.word32 = fn
    val toLargeWordX : word -> MLWorks.Internal.Types.word32 = fn
    val toString : word -> string = fn
    val wordSize : int = 30
    val xorb : (word * word) -> word = fn
    val ~>> : (word * word) -> word = fn
  end
@


1.8
log
@Remove references to toplevel
@
text
@a35 2
val flush_out : MLWorks.IO.outstream -> unit = fn
val output : (MLWorks.IO.outstream * string) -> unit = fn
a36 2
val std_out : MLWorks.IO.outstream = FLEXOUT(FLEXOUTSTREAM(ref(RIGIDOUTSTREAM {close_out=fn, closed_out=fn, flush_out=fn, output=fn})))
val say : string -> unit = fn
@


1.8.5.1
log
@branched from 1.8
@
text
@@


1.8.5.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@@


1.8.5.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@@


1.8.5.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@@


1.8.5.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@


1.8.4.1
log
@branched from 1.8
@
text
@@


1.8.3.1
log
@branched from 1.8
@
text
@@


1.8.3.1.1.1
log
@branched from 1.8.3.1
@
text
@@


1.8.2.1
log
@branched from 1.8
@
text
@@


1.8.1.1
log
@branched from 1.8
@
text
@@


1.8.1.1.1.1
log
@branched from 1.8.1.1
@
text
@@


1.7
log
@remove banner
@
text
@a1 1
val it : unit = ()
@


1.7.3.1
log
@branched from 1.7
@
text
@@


1.7.2.1
log
@branched from 1.7
@
text
@@


1.7.1.1
log
@branched from 1.7
@
text
@@


1.6
log
@updating for commercial version flyer
@
text
@a0 2
commercial version may be purchased directly from Harlequin.

@


1.5
log
@switch off Compiling messages...
@
text
@d1 2
@


1.4
log
@updating.
@
text
@a1 1
Compiling basis.toplevel
a2 8
Compiling basis.string_cvt
Compiling basis.__pre_basis
Compiling basis.__pre_string_cvt
Compiling basis.__string_cvt
Compiling basis.__preinteger
Compiling basis.__preint32
Compiling basis.integer
Compiling basis.__integer
a46 7
Compiling basis.general
Compiling basis.__general
Compiling basis.__preword32
Compiling basis.__preword
Compiling basis.word
Compiling basis.__word
Compiling basis.__word16
@


1.3
log
@stringcvt->string_cvt
@
text
@a1 2
Compiling basis.general
Compiling basis.__general
a2 31
structure TopLevel =
  struct
    datatype 'a option =
      NONE |
      SOME of 'a
    datatype order =
      EQUAL |
      GREATER |
      LESS
    exception Domain
    val EQUAL : order
    exception Fail of string
    val GREATER : order
    val LESS : order
    val NONE : 'a option
    val SOME : 'a -> 'a option
  end
datatype 'a option =
  NONE |
  SOME of 'a
datatype order =
  EQUAL |
  GREATER |
  LESS
exception Domain
val EQUAL : order
exception Fail of string
val GREATER : order
val LESS : order
val NONE : 'a option
val SOME : 'a -> 'a option
d56 2
@


1.2
log
@Fixing bungle
@
text
@d37 4
a40 3
Compiling basis.stringcvt
Compiling basis.__pre_char
Compiling basis.__stringcvt
@


1.1
log
@new unit
New test
@
text
@a1 17
val show_mach : bool -> unit = fn
val show_absyn : bool -> unit = fn
val show_lamb : bool -> unit = fn
val show_unopt_lamb : bool -> unit = fn
val show_mir : bool -> unit = fn
val show_opt_mir : bool -> unit = fn
val alldebug : bool -> unit = fn
val debug : bool -> unit = fn
val timeit : ('a -> 'b) -> 'a -> 'b = fn
val don : ('a -> 'b) -> int -> 'a -> 'b = fn
val timen : ('a -> 'b) -> int -> 'a -> 'b = fn
val app : ('a -> 'b) -> 'a list -> unit = fn
val make : string -> unit = fn
val break : string -> unit = fn
val f : 'a -> int = fn
val it : unit = ()
val it : unit = ()
@
