head	1.4;
access;
symbols
	MLWorks_21c0_1999_03_25:1.4
	MLWorks_20c1_1998_08_20:1.4
	MLWorks_20c0_1998_08_04:1.4
	MLWorks_20b2c2_1998_06_19:1.4
	MLWorks_20b2_Windows_1998_06_12:1.4
	MLWorks_20b1c1_1998_05_07:1.4
	MLWorks_20b0_1998_04_07:1.4
	MLWorks_20b0_1998_03_20:1.4
	MLWorks_20m2_1998_02_16:1.4
	MLWorks_20m1_1997_10_23:1.3
	MLWorks_11r1:1.2.1.1.1.1.1
	MLWorks_11c0_1997_09_09:1.2.1.1.1.1
	MLWorks_10r3:1.2.1.1.3
	MLWorks_10r2_551:1.2.1.1.2
	MLWorks_11:1.2.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.2.1.1
	MLWorks_20m0_1997_06_20:1.3
	MLWorks_1_0_r2c2_1997_06_14:1.2.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.2.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.2.1
	MLWorks_BugFix_1997_04_24:1.2
	MLWorks_1_0_r2_Win32_1997_04_11:1.2
	MLWorks_1_0_r2_Unix_1997_04_04:1.2;
locks; strict;
comment	@# @;


1.4
date	97.11.25.19.23.35;	author daveb;	state Exp;
branches;
next	1.3;

1.3
date	97.05.28.16.00.47;	author matthew;	state Exp;
branches;
next	1.2;

1.2
date	97.03.06.13.54.17;	author matthew;	state Exp;
branches
	1.2.1.1;
next	1.1;

1.1
date	97.01.30.15.11.49;	author andreww;	state Exp;
branches;
next	;

1.2.1.1
date	97.05.12.11.07.39;	author hope;	state Exp;
branches
	1.2.1.1.1.1
	1.2.1.1.2.1
	1.2.1.1.3.1;
next	;

1.2.1.1.1.1
date	97.07.28.18.50.39;	author daveb;	state Exp;
branches
	1.2.1.1.1.1.1.1;
next	;

1.2.1.1.1.1.1.1
date	97.10.07.12.14.38;	author jkbrook;	state Exp;
branches;
next	;

1.2.1.1.2.1
date	97.09.08.17.42.25;	author daveb;	state Exp;
branches;
next	;

1.2.1.1.3.1
date	97.09.09.14.41.51;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
answer.
@


1.4
log
@[Bug #30323]
@
text
@infix 1 seq
val seq : ('a * 'b) -> 'b = fn
val check : bool -> string = fn
val say : string -> unit = fn
val check' : (unit -> bool) -> string = fn
val range : (int * int) -> (int -> bool) -> bool = fn
val checkrange : (int * int) -> (int -> bool) -> string = fn
infix 0 ==
val == : (RealVector.vector * RealVector.vector) -> bool = fn
val a : RealArray.array = #F[0.1, 1.1, 2.1, 3.1, 4.1, 5.1, 6.1]
val a2v : RealArray.array -> RealVector.vector = fn
val array0 : RealArray.array = #F[]
val b : RealArray.array = #F[44.1, 55.1, 66.1]
val c : RealArray.array = #F[0.1, 1.1, 2.1, 3.1, 4.1, 5.1, 6.1]
val copyinp : RealArray.array -> unit = fn
val d : RealArray.array = #F[0.1, 1.1, 2.1, 3.1, 4.1, 5.1, 6.1, 0.1, 1.1, 2.1, ..]
val e : RealArray.array = #F[0.1, 1.1, 2.1, 3.1, 4.1, 5.1, 6.1, 0.1, 1.1, 2.1, ..]
val ev : RealVector.vector = _
val f : RealVector.vector = _
val g : RealArray.array = #F[1.1, 2.1, 3.1, 4.1, 5.1, 6.1, 0.1, 1.1, 2.1, 3.1, ..]
val inp : RealArray.array = #F[7.0, 9.0, 13.0]
val minus : (int * real) -> real = fn
val plus : (int * real) -> real = fn
val pni : RealArray.array = #F[13.0, 9.0, 7.0]
val test1 : string = "OK"
val test10a : string = "OK"
val test10b : string = "OK"
val test10c : string = "OK"
val test10d : string = "OK"
val test10e : string = "OK"
val test10f : string = "OK"
val test10g : string = "OK"
val test10h : string = "OK"
val test10i : string = "OK"
val test11a : string = "OK"
val test11b : string = "OK"
val test11c : string = "OK"
val test11d : string = "OK"
val test11e : string = "OK"
val test11f : string = "OK"
val test11g : string = "OK"
val test11h : string = "OK"
val test11i : string = "OK"
val test11j : string = "OK"
val test11k : string = "OK"
val test12a : string = "OK"
val test12b : string = "OK"
val test12d : string = "OK"
val test12e : string = "OK"
val test13a : string = "OK"
val test13b : string = "OK"
val test13c : string = "OK"
val test13d : string = "OK"
val test13e : string = "OK"
val test13f : string = "OK"
val test13g : string = "OK"
val test13h : string = "OK"
val test13i : string = "OK"
val test13j : string = "OK"
val test13k : string = "OK"
val test13l : string = "OK"
val test13m : string = "OK"
val test13n : string = "OK"
val test15a : string = "OK"
val test15b : string = "OK"
val test15c : string = "OK"
val test15d : string = "OK"
val test15e : string = "OK"
val test15f : string = "OK"
val test15g : string = "OK"
val test15h : string = "OK"
val test16a : string = "OK"
val test16b : string = "OK"
val test16c : string = "OK"
val test16d : string = "OK"
val test16e : string = "OK"
val test16f : string = "OK"
val test16g : string = "OK"
val test2 : string = "OK"
val test3 : string = "OK"
val test4a : string = "OK"
val test4b : string = "OK"
val test4c : string = "OK"
val test5a : string = "OK"
val test5b : string = "OK"
val test6a : string = "OK"
val test6b : string = "OK"
val test6c : string = "OK"
val test7 : string = "OK"
val test8a : string = "OK"
val test8b : string = "OK"
val test9 : string = "OK"
val test9a : string = "OK"
val test9b : string = "OK"
val test9c : string = "OK"
val test9d : string = "OK"
val test9e : string = "OK"
val test9f : string = "OK"
val test9g : string = "OK"
val test9h : string = "OK"
val test9i : string = "OK"
val test9j : string = "OK"
@


1.3
log
@Updating
@
text
@a0 10
val it : unit = ()
val it : unit = ()
structure Int = struct ... end
val it : unit = ()
structure LargeReal = struct ... end
structure Real = struct ... end
val it : unit = ()
structure RealVector = struct ... end
val it : unit = ()
structure RealArray = struct ... end
@


1.2
log
@Updating


Updating
@
text
@a1 33
structure Int =
  struct
    eqtype int = int
    val * : (int * int) -> int = fn
    val + : (int * int) -> int = fn
    val - : (int * int) -> int = fn
    val < : (int * int) -> bool = fn
    val <= : (int * int) -> bool = fn
    val > : (int * int) -> bool = fn
    val >= : (int * int) -> bool = fn
    val abs : int -> int = fn
    val compare : (int * int) -> order = fn
    val div : (int * int) -> int = fn
    val fmt : radix(hidden) -> int -> string = fn
    val fromInt : int -> int = fn
    val fromLarge : MLWorks.Internal.Types.int32 -> int = fn
    val fromString : string -> int option = fn
    val max : (int * int) -> int = fn
    val maxInt : int option = SOME 536870911
    val min : (int * int) -> int = fn
    val minInt : int option = SOME ~536870912
    val mod : (int * int) -> int = fn
    val precision : int option = SOME 30
    val quot : (int * int) -> int = fn
    val rem : (int * int) -> int = fn
    val sameSign : (int * int) -> bool = fn
    val scan : radix(hidden) -> ('a -> (char * 'a) option) -> 'a -> (int * 'a) option = fn
    val sign : int -> int = fn
    val toInt : int -> int = fn
    val toLarge : int -> MLWorks.Internal.Types.int32 = fn
    val toString : int -> string = fn
    val ~ : int -> int = fn
  end
d3 1
a3 174
structure LargeReal =
  struct
    structure Math =
      struct
        type real = real
        val acos : real -> real = fn
        val asin : real -> real = fn
        val atan : real -> real = fn
        val atan2 : (real * real) -> real = fn
        val cos : real -> real = fn
        val cosh : real -> real = fn
        val e : real = 2.718281828
        val exp : real -> real = fn
        val ln : real -> real = fn
        val log10 : real -> real = fn
        val pi : real = 3.141592654
        val pow : (real * real) -> real = fn
        val sin : real -> real = fn
        val sinh : real -> real = fn
        val sqrt : real -> real = fn
        val tan : real -> real = fn
        val tanh : real -> real = fn
      end
    type real = real
    val != : (real * real) -> bool = fn
    val * : (real * real) -> real = fn
    val *+ : (real * real * real) -> real = fn
    val *- : (real * real * real) -> real = fn
    val + : (real * real) -> real = fn
    val - : (real * real) -> real = fn
    val / : (real * real) -> real = fn
    val < : (real * real) -> bool = fn
    val <= : (real * real) -> bool = fn
    val <> : (real * real) -> bool = fn
    val == : (real * real) -> bool = fn
    val > : (real * real) -> bool = fn
    val >= : (real * real) -> bool = fn
    val ?= : (real * real) -> bool = fn
    val abs : real -> real = fn
    val ceil : real -> int = fn
    val checkFloat : real -> real = fn
    val class : real -> float_class(hidden) = fn
    val compare : (real * real) -> order = fn
    val compareReal : (real * real) -> real_order(hidden) = fn
    val copySign : (real * real) -> real = fn
    val floor : real -> int = fn
    val fmt : realfmt(hidden) -> real -> string = fn
    val fromDecimal : {digits: int list, exp: int, kind: float_class(hidden), sign: bool} -> real = fn
    val fromInt : int -> real = fn
    val fromLarge : rounding_mode(hidden) -> real -> real = fn
    val fromLargeInt : MLWorks.Internal.Types.int32 -> real = fn
    val fromManExp : {exp: int, man: real} -> real = fn
    val fromString : string -> real option = fn
    val isFinite : real -> bool = fn
    val isNan : real -> bool = fn
    val isNormal : real -> bool = fn
    val max : (real * real) -> real = fn
    val maxFinite : real = 1.797693135E308
    val min : (real * real) -> real = fn
    val minNormalPos : real = 2.225073859E~308
    val minPos : real = 4.940656458E~324
    val negInf : real = ~inf
    val nextAfter : (real * real) -> real = fn
    val posInf : real = inf
    val precision : int = 53
    val radix : int = 2
    val realCeil : real -> real = fn
    val realFloor : real -> real = fn
    val realMod : real -> real = fn
    val realTrunc : real -> real = fn
    val rem : (real * real) -> real = fn
    val round : real -> int = fn
    val sameSign : (real * real) -> bool = fn
    val scan : ('a -> (char * 'a) option) -> 'a -> (real * 'a) option = fn
    val sign : real -> int = fn
    val signBit : real -> bool = fn
    val split : real -> {frac: real, whole: real} = fn
    val toDecimal : real -> {digits: int list, exp: int, kind: float_class(hidden), sign: bool} = fn
    val toInt : rounding_mode(hidden) -> real -> int = fn
    val toLarge : real -> real = fn
    val toLargeInt : rounding_mode(hidden) -> real -> MLWorks.Internal.Types.int32 = fn
    val toManExp : real -> {exp: int, man: real} = fn
    val toString : real -> string = fn
    val trunc : real -> int = fn
    val unordered : (real * real) -> bool = fn
    val ~ : real -> real = fn
  end
structure Real =
  struct
    structure Math =
      struct
        type real = real
        val acos : real -> real = fn
        val asin : real -> real = fn
        val atan : real -> real = fn
        val atan2 : (real * real) -> real = fn
        val cos : real -> real = fn
        val cosh : real -> real = fn
        val e : real = 2.718281828
        val exp : real -> real = fn
        val ln : real -> real = fn
        val log10 : real -> real = fn
        val pi : real = 3.141592654
        val pow : (real * real) -> real = fn
        val sin : real -> real = fn
        val sinh : real -> real = fn
        val sqrt : real -> real = fn
        val tan : real -> real = fn
        val tanh : real -> real = fn
      end
    type real = real
    val != : (real * real) -> bool = fn
    val * : (real * real) -> real = fn
    val *+ : (real * real * real) -> real = fn
    val *- : (real * real * real) -> real = fn
    val + : (real * real) -> real = fn
    val - : (real * real) -> real = fn
    val / : (real * real) -> real = fn
    val < : (real * real) -> bool = fn
    val <= : (real * real) -> bool = fn
    val <> : (real * real) -> bool = fn
    val == : (real * real) -> bool = fn
    val > : (real * real) -> bool = fn
    val >= : (real * real) -> bool = fn
    val ?= : (real * real) -> bool = fn
    val abs : real -> real = fn
    val ceil : real -> int = fn
    val checkFloat : real -> real = fn
    val class : real -> float_class(hidden) = fn
    val compare : (real * real) -> order = fn
    val compareReal : (real * real) -> real_order(hidden) = fn
    val copySign : (real * real) -> real = fn
    val floor : real -> int = fn
    val fmt : realfmt(hidden) -> real -> string = fn
    val fromDecimal : {digits: int list, exp: int, kind: float_class(hidden), sign: bool} -> real = fn
    val fromInt : int -> real = fn
    val fromLarge : rounding_mode(hidden) -> real -> real = fn
    val fromLargeInt : MLWorks.Internal.Types.int32 -> real = fn
    val fromManExp : {exp: int, man: real} -> real = fn
    val fromString : string -> real option = fn
    val isFinite : real -> bool = fn
    val isNan : real -> bool = fn
    val isNormal : real -> bool = fn
    val max : (real * real) -> real = fn
    val maxFinite : real = 1.797693135E308
    val min : (real * real) -> real = fn
    val minNormalPos : real = 2.225073859E~308
    val minPos : real = 4.940656458E~324
    val negInf : real = ~inf
    val nextAfter : (real * real) -> real = fn
    val posInf : real = inf
    val precision : int = 53
    val radix : int = 2
    val realCeil : real -> real = fn
    val realFloor : real -> real = fn
    val realMod : real -> real = fn
    val realTrunc : real -> real = fn
    val rem : (real * real) -> real = fn
    val round : real -> int = fn
    val sameSign : (real * real) -> bool = fn
    val scan : ('a -> (char * 'a) option) -> 'a -> (real * 'a) option = fn
    val sign : real -> int = fn
    val signBit : real -> bool = fn
    val split : real -> {frac: real, whole: real} = fn
    val toDecimal : real -> {digits: int list, exp: int, kind: float_class(hidden), sign: bool} = fn
    val toInt : rounding_mode(hidden) -> real -> int = fn
    val toLarge : real -> real = fn
    val toLargeInt : rounding_mode(hidden) -> real -> MLWorks.Internal.Types.int32 = fn
    val toManExp : real -> {exp: int, man: real} = fn
    val toString : real -> string = fn
    val trunc : real -> int = fn
    val unordered : (real * real) -> bool = fn
    val ~ : real -> real = fn
  end
d5 2
a6 18
structure RealVector =
  struct
    type elem = real
    type vector = vector
    val app : (real -> unit) -> RealVector.vector -> unit = fn
    val appi : ((int * real) -> unit) -> (RealVector.vector * int * int option) -> unit = fn
    val concat : RealVector.vector list -> RealVector.vector = fn
    val extract : (RealVector.vector * int * int option) -> RealVector.vector = fn
    val foldl : ((real * 'a) -> 'a) -> 'a -> RealVector.vector -> 'a = fn
    val foldli : ((int * real * 'a) -> 'a) -> 'a -> (RealVector.vector * int * int option) -> 'a = fn
    val foldr : ((real * 'a) -> 'a) -> 'a -> RealVector.vector -> 'a = fn
    val foldri : ((int * real * 'a) -> 'a) -> 'a -> (RealVector.vector * int * int option) -> 'a = fn
    val fromList : real list -> RealVector.vector = fn
    val length : RealVector.vector -> int = fn
    val maxLen : int = 1048575
    val sub : (RealVector.vector * int) -> real = fn
    val tabulate : (int * (int -> real)) -> RealVector.vector = fn
  end
d8 3
a10 41
structure RealArray =
  struct
    structure Vector =
      struct
        type elem = real
        type vector = vector
        val app : (real -> unit) -> RealVector.vector -> unit = fn
        val appi : ((int * real) -> unit) -> (RealVector.vector * int * int option) -> unit = fn
        val concat : RealVector.vector list -> RealVector.vector = fn
        val extract : (RealVector.vector * int * int option) -> RealVector.vector = fn
        val foldl : ((real * 'a) -> 'a) -> 'a -> RealVector.vector -> 'a = fn
        val foldli : ((int * real * 'a) -> 'a) -> 'a -> (RealVector.vector * int * int option) -> 'a = fn
        val foldr : ((real * 'a) -> 'a) -> 'a -> RealVector.vector -> 'a = fn
        val foldri : ((int * real * 'a) -> 'a) -> 'a -> (RealVector.vector * int * int option) -> 'a = fn
        val fromList : real list -> RealVector.vector = fn
        val length : RealVector.vector -> int = fn
        val maxLen : int = 1048575
        val sub : (RealVector.vector * int) -> real = fn
        val tabulate : (int * (int -> real)) -> RealVector.vector = fn
      end
    eqtype array = floatarray
    type elem = real
    val app : (real -> unit) -> RealArray.array -> unit = fn
    val appi : ((int * real) -> unit) -> (RealArray.array * int * int option) -> unit = fn
    val array : (int * real) -> RealArray.array = fn
    val copy : {di: int, dst: RealArray.array, len: int option, si: int, src: RealArray.array} -> unit = fn
    val copyVec : {di: int, dst: RealArray.array, len: int option, si: int, src: RealVector.vector} -> unit = fn
    val extract : (RealArray.array * int * int option) -> RealVector.vector = fn
    val foldl : ((real * 'a) -> 'a) -> 'a -> RealArray.array -> 'a = fn
    val foldli : ((int * real * 'a) -> 'a) -> 'a -> (RealArray.array * int * int option) -> 'a = fn
    val foldr : ((real * 'a) -> 'a) -> 'a -> RealArray.array -> 'a = fn
    val foldri : ((int * real * 'a) -> 'a) -> 'a -> (RealArray.array * int * int option) -> 'a = fn
    val fromList : real list -> RealArray.array = fn
    val length : RealArray.array -> int = fn
    val maxLen : int = 1048575
    val modify : (real -> real) -> RealArray.array -> unit = fn
    val modifyi : ((int * real) -> real) -> (RealArray.array * int * int option) -> unit = fn
    val sub : (RealArray.array * int) -> real = fn
    val tabulate : (int * (int -> real)) -> RealArray.array = fn
    val update : (RealArray.array * int * real) -> unit = fn
  end
a11 2
val flush_out : MLWorks.IO.outstream -> unit = fn
val output : (MLWorks.IO.outstream * string) -> unit = fn
d13 1
a13 1
val std_out : MLWorks.IO.outstream = FLEXOUT(FLEXOUTSTREAM(ref(RIGIDOUTSTREAM {close_out=fn, closed_out=fn, flush_out=fn, output=fn})))
a14 1
val check : bool -> string = fn
@


1.2.1.1
log
@branched from 1.2
@
text
@@


1.2.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@@


1.2.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@@


1.2.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@@


1.2.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@


1.1
log
@new unit
answer.
@
text
@d60 1
a72 1
    val ?<> : (real * real) -> bool = fn
a80 1
    val equal : (real * real) -> bool = fn
d83 1
d102 4
d113 1
d147 1
a159 1
    val ?<> : (real * real) -> bool = fn
a167 1
    val equal : (real * real) -> bool = fn
d170 1
d189 4
d200 1
@
