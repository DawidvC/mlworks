head	1.8;
access;
symbols
	MLWorks_21c0_1999_03_25:1.8
	MLWorks_20c1_1998_08_20:1.8
	MLWorks_20c0_1998_08_04:1.8
	MLWorks_20b2c2_1998_06_19:1.8
	MLWorks_20b2_Windows_1998_06_12:1.8
	MLWorks_20b1c1_1998_05_07:1.8
	MLWorks_20b0_1998_04_07:1.8
	MLWorks_20b0_1998_03_20:1.8
	MLWorks_20m2_1998_02_16:1.8
	MLWorks_20m1_1997_10_23:1.7
	MLWorks_11r1:1.5.1.1.1.2.1
	MLWorks_11c0_1997_09_09:1.5.1.1.1.2
	MLWorks_10r3:1.5.1.1.3
	MLWorks_10r2_551:1.5.1.1.2
	MLWorks_11:1.5.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.5.1.1
	MLWorks_20m0_1997_06_20:1.6
	MLWorks_1_0_r2c2_1997_06_14:1.5.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.5.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.5.1
	MLWorks_BugFix_1997_04_24:1.5
	MLWorks_1_0_r2_Win32_1997_04_11:1.5
	MLWorks_1_0_r2_Unix_1997_04_04:1.5
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.3.3.1.1
	MLWorks_gui_1996_12_18:1.3.4
	MLWorks_1_0_Win32_1996_12_17:1.3.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.3.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.3.1.1
	MLWorks_1_0_Irix_1996_11_28:1.3.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.3.2
	MLWorks_1_0_Unix_1996_11_14:1.3.1
	MLWorks_Open_Beta2_1996_10_11:1.1.3
	MLWorks_License_dev:1.1.2
	MLWorks_1_open_beta_1996_09_13:1.1.1
	MLWorks_Open_Beta_1996_08_22:1.1
	MLWorks_Beta_1996_07_02:1.1
	MLWorks_Beta_1996_06_07:1.1
	MLWorks_Beta_1996_06_06:1.1
	MLWorks_Beta_1996_06_05:1.1
	MLWorks_Beta_1996_06_03:1.1
	MLWorks_Beta_1996_05_31:1.1
	MLWorks_Beta_1996_05_30:1.1;
locks; strict;
comment	@ *  @;


1.8
date	97.11.21.10.51.19;	author daveb;	state Exp;
branches;
next	1.7;

1.7
date	97.08.11.09.38.03;	author brucem;	state Exp;
branches;
next	1.6;

1.6
date	97.05.28.11.26.45;	author jont;	state Exp;
branches;
next	1.5;

1.5
date	97.01.30.16.39.03;	author andreww;	state Exp;
branches
	1.5.1.1;
next	1.4;

1.4
date	97.01.15.16.03.04;	author io;	state Exp;
branches;
next	1.3;

1.3
date	96.11.06.12.06.20;	author matthew;	state Exp;
branches
	1.3.1.1
	1.3.2.1
	1.3.3.1
	1.3.4.1;
next	1.2;

1.2
date	96.10.22.13.23.04;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	96.05.22.15.04.08;	author matthew;	state Exp;
branches
	1.1.1.1
	1.1.2.1
	1.1.3.1;
next	;

1.1.1.1
date	96.09.13.11.38.13;	author hope;	state Exp;
branches;
next	;

1.1.2.1
date	96.10.07.16.29.33;	author hope;	state Exp;
branches;
next	;

1.1.3.1
date	96.10.17.11.50.18;	author hope;	state Exp;
branches;
next	;

1.3.1.1
date	96.11.14.13.17.42;	author hope;	state Exp;
branches
	1.3.1.1.1.1;
next	;

1.3.1.1.1.1
date	96.11.28.15.28.12;	author hope;	state Exp;
branches;
next	;

1.3.2.1
date	96.11.22.18.35.30;	author hope;	state Exp;
branches;
next	;

1.3.3.1
date	96.12.17.18.14.28;	author hope;	state Exp;
branches
	1.3.3.1.1.1;
next	;

1.3.3.1.1.1
date	97.02.24.12.07.24;	author hope;	state Exp;
branches;
next	;

1.3.4.1
date	96.12.18.10.09.27;	author hope;	state Exp;
branches;
next	;

1.5.1.1
date	97.05.12.11.08.02;	author hope;	state Exp;
branches
	1.5.1.1.1.1
	1.5.1.1.2.1
	1.5.1.1.3.1;
next	;

1.5.1.1.1.1
date	97.07.28.18.49.20;	author daveb;	state Exp;
branches;
next	1.5.1.1.1.2;

1.5.1.1.1.2
date	97.08.12.09.31.17;	author johnh;	state Exp;
branches
	1.5.1.1.1.2.1.1;
next	;

1.5.1.1.1.2.1.1
date	97.10.07.12.14.48;	author jkbrook;	state Exp;
branches;
next	;

1.5.1.1.2.1
date	97.09.08.17.41.01;	author daveb;	state Exp;
branches;
next	;

1.5.1.1.3.1
date	97.09.09.14.40.28;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
New test
@


1.8
log
@[Bug #30323]
@
text
@(*  ==== Testing ====
 *
 *  Result: OK
 *
 *  Revision Log
 *  ------------
 *  $Log: word8arrays.sml,v $
 *  Revision 1.7  1997/08/11  09:38:03  brucem
 *  [Bug #30086]
 *  Stop printing structure contents to prevent spurious failure.
 *
 *  Revision 1.6  1997/05/28  11:26:45  jont
 *  [Bug #30090]
 *  Remove uses of MLWorks.IO
 *
 *  Revision 1.5  1997/01/30  16:39:03  andreww
 *  [Bug #1904]
 *  monovectors no longer equality types.
 *
 *  Revision 1.4  1997/01/15  16:03:04  io
 *  [Bug #1892]
 *  rename __word{8,16,32}{array,vector} to __word{8,16,32}_{array,vector}
 *
 *  Revision 1.3  1996/11/06  12:06:20  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
 *  Revision 1.2  1996/10/22  13:23:04  jont
 *  Remove references to toplevel
 *
 *  Revision 1.1  1996/05/22  15:04:08  matthew
 *  new unit
 *  New test
 *
*)

(* test/word8array.sml -- some test cases for Word8Array 
   PS 1994-12-21, 1995-05-11 *)



infix 1 seq
fun e1 seq e2 = e2;
fun check b = if b then "OK" else "WRONG";
fun check' f = (if f () then "OK" else "WRONG") handle _ => "EXN";

fun range (from, to) p = 
    let open Int
    in
	(from > to) orelse (p from) andalso (range (from+1, to) p)
    end;

fun checkrange bounds = check o range bounds;
  
local
    open Word8Array 
    infix 9 sub;
    val array0 = fromList [];

  infix ==;
  fun a == b =
    let
      val len = Word8Vector.length a
      fun scan i = if i=len then true
                   else (Word8Vector.sub(a,i) = Word8Vector.sub(b,i)
                         andalso scan (i+1))
    in
      len = Word8Vector.length b
      andalso scan 0
    end


in

val i2w = Word8.fromInt;

val w127 = i2w 127;

val a = fromList (map i2w [0,1,2,3,4,5,6]);
val b = fromList (map i2w [44,55,66]);
val c = fromList (map i2w [0,1,2,3,4,5,6]);

val test1 = 
    check'(fn () => a<>c);
val test2 = 
    check'(fn () => 
	   array(0, w127) <> array0
	   andalso array(0, w127) <> tabulate(0, fn _ => w127)
	   andalso tabulate(0, fn _ => w127) <> fromList []
	   andalso array(0, w127) <> array(0, w127)
	   andalso tabulate(0, fn _ => w127) <> tabulate(0, fn _ => w127)
	   andalso fromList [] <> fromList []);

val d = tabulate(100, fn i => i2w (i mod 7));

val test3 = check' (fn () => d sub 27 = i2w 6);


val test4a = (tabulate(maxLen+1, i2w) seq "WRONG")
            handle Size => "OK" | _ => "WRONG";

val test4b = (tabulate(~1, i2w)       seq "WRONG")
            handle Size => "OK" | _ => "WRONG";

val test4c = 
    check'(fn () => length (tabulate(0, fn i => i2w (i div 0))) = 0);

val test5a = check'(fn () => length (fromList []) = 0 andalso length a = 7);
val test5b = check'(fn () => length array0 = 0);

val test6a = (c sub ~1 seq "WRONG") handle Subscript => "OK" | _ => "WRONG";
val test6b = (c sub 7  seq "WRONG") handle Subscript => "OK" | _ => "WRONG";
val test6c = check'(fn () => c sub 0 = i2w 0);

val e = array(203, i2w 0);
val _ = (copy{src=d, si=0, dst=e, di=0,        len=NONE}; 
	 copy{src=b, si=0, dst=e, di=length d, len=NONE};
	 copy{src=d, si=0, dst=e, di=length d + length b, len=NONE});
	 
fun a2v a = extract(a, 0, NONE);
val ev = Word8Vector.concat [a2v d, a2v b, a2v d];

val test7 = check'(fn () => length e = 203);

val test8a = (update(e, ~1, w127); "WRONG")
             handle Subscript => "OK" | _ => "WRONG";
val test8b = (update(e, length e, w127); "WRONG")
             handle Subscript => "OK" | _ => "WRONG";

val f = extract (e, 100, SOME 3);

val test9 = check'(fn () => f == a2v b);

val test9a = check'(fn () => ev == extract(e, 0, NONE)
		    andalso ev == extract(e, 0, SOME (length e)));
val test9b = 
    check'(fn () => Word8Vector.fromList [] == extract(e, 100, SOME 0));
val test9c = (extract(e, ~1, SOME (length e))  seq "WRONG") 
             handle Subscript => "OK" | _ => "WRONG"
val test9d = (extract(e, length e+1, SOME 0) seq "WRONG") 
             handle Subscript => "OK" | _ => "WRONG"
val test9e = (extract(e, 0, SOME (length e+1)) seq "WRONG") 
             handle Subscript => "OK" | _ => "WRONG"
val test9f = (extract(e, 20, SOME ~1)        seq "WRONG") 
             handle Subscript => "OK" | _ => "WRONG"
val test9g = (extract(e, ~1, NONE)  seq "WRONG") 
             handle Subscript => "OK" | _ => "WRONG"
val test9h = (extract(e, length e+1, NONE) seq "WRONG") 
             handle Subscript => "OK" | _ => "WRONG"
val test9i = 
    check'(fn () => a2v (fromList []) == extract(e, length e, SOME 0)
	   andalso a2v (fromList []) == extract(e, length e, NONE));

val _ = copy{src=e, si=0, dst=e, di=0, len=NONE};
val g = array(203, w127);
val _ = copy{src=e, si=0, dst=g, di=0, len=NONE};

val test10a = check'(fn () => ev == extract(e, 0, NONE)
		      andalso ev == extract(e, 0, SOME (length e)));
val test10b = check'(fn () => ev == extract(g, 0, NONE)
		     andalso ev == extract(g, 0, SOME (length g)));

val _ = copy{src=g, si=203, dst=g, di=0, len=SOME 0};
val test10c = check'(fn () => ev == extract(g, 0, NONE));

val _ = copy{src=g, si=0, dst=g, di=203, len=SOME 0};
val test10d = check'(fn () => ev == extract(g, 0, NONE));

val _ = copy{src=g, si=0, dst=g, di=1, len=SOME (length g-1)};
val test10e = check'(fn () => a2v b == extract(g, 101, SOME 3));

val _ = copy{src=g, si=1, dst=g, di=0, len=SOME(length g-1)};
val test10f = check'(fn () => a2v b == extract(g, 100, SOME 3));

val _ = copy{src=g, si=202, dst=g, di=202, len=SOME 1};
val test10g = check'(fn () => g sub 202 = i2w ((202-1-103) mod 7));
val test10h = check'(fn () =>
		     (copy{src=array0, si=0, dst=array0, di=0, len=NONE}; 
		      array0 <> array(0, w127)));
val test10i = check'(fn () =>
		     (copy{src=array0, si=0, dst=array0, di=0, len=SOME 0}; 
		      array0 <> array(0, w127)));

val test11a = (copy{src=g, si= ~1, dst=g, di=0, len=NONE}; "WRONG") 
              handle Subscript => "OK" | _ => "WRONG"
val test11b = (copy{src=g, si=0, dst=g, di= ~1, len=NONE}; "WRONG") 
              handle Subscript => "OK" | _ => "WRONG"
val test11c = (copy{src=g, si=1, dst=g, di=0, len=NONE}; "OK") 
              handle _ => "WRONG"
val test11d = (copy{src=g, si=0, dst=g, di=1, len=NONE}; "WRONG") 
              handle Subscript => "OK" | _ => "WRONG"
val test11e = (copy{src=g, si=203, dst=g, di=0, len=NONE}; "OK") 
              handle _ => "WRONG"

val test11f = (copy{src=g, si= ~1, dst=g, di=0, len=SOME (length g)}; "WRONG") 
              handle Subscript => "OK" | _ => "WRONG"
val test11g = (copy{src=g, si=0, dst=g, di= ~1, len=SOME (length g)}; "WRONG") 
              handle Subscript => "OK" | _ => "WRONG"
val test11h = (copy{src=g, si=1, dst=g, di=0, len=SOME (length g)}; "WRONG") 
              handle Subscript => "OK" | _ => "WRONG"
val test11i = (copy{src=g, si=0, dst=g, di=1, len=SOME (length g)}; "WRONG") 
              handle Subscript => "OK" | _ => "WRONG"
val test11j = (copy{src=g, si=0, dst=g, di=0, len=SOME (length g+1)}; "WRONG") 
              handle Subscript => "OK" | _ => "WRONG"
val test11k = (copy{src=g, si=203, dst=g, di=0, len=SOME 1}; "WRONG") 
              handle Subscript => "OK" | _ => "WRONG"
end;
@


1.7
log
@[Bug #30086]
Stop printing structure contents to prevent spurious failure.
@
text
@d8 4
a39 10

local
  val _ = Shell.Options.set(Shell.Options.ValuePrinter.maximumStrDepth, 0);
in
  val _ = 
    (Shell.Build.loadSource "basis.__int";
     Shell.Build.loadSource "basis.__word8_array";
     Shell.Build.loadSource "basis.__word8_vector";
     Shell.Build.loadSource "basis.__word8");
end
@


1.6
log
@[Bug #30090]
Remove uses of MLWorks.IO
@
text
@d8 4
d36 12
a47 1
Shell.Build.loadSource "basis.__int";
a60 4
Shell.Build.loadSource "basis.__word8_array";
Shell.Build.loadSource "basis.__word8_vector";
Shell.Build.loadSource "basis.__word8";

@


1.5
log
@[Bug #1904]
monovectors no longer equality types.
@
text
@d8 4
a32 3
val output = MLWorks.IO.output
val std_out = MLWorks.IO.std_out
val flush_out = MLWorks.IO.flush_out
a34 1
fun say s = (output(std_out, s); flush_out std_out);
@


1.5.1.1
log
@branched from 1.5
@
text
@a7 4
 *  Revision 1.5  1997/01/30  16:39:03  andreww
 *  [Bug #1904]
 *  monovectors no longer equality types.
 *
@


1.5.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a7 3
 *  Revision 1.5.1.1  1997/05/12  11:08:02  hope
 *  branched from 1.5
 *
@


1.5.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a7 3
 *  Revision 1.5.1.1  1997/05/12  11:08:02  hope
 *  branched from 1.5
 *
@


1.5.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a7 3
 *  Revision 1.5.1.1  1997/05/12  11:08:02  hope
 *  branched from 1.5
 *
@


1.5.1.1.1.2
log
@[Bug #30086]
Merging - Stop printing structure contents to prevent spurious failure.
@
text
@a7 3
 *  Revision 1.5.1.1.1.1  1997/07/28  18:49:20  daveb
 *  branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
d35 1
a38 11

local
  val _ = Shell.Options.set(Shell.Options.ValuePrinter.maximumStrDepth, 0);
in
  val _ = 
    (Shell.Build.loadSource "basis.__int";
     Shell.Build.loadSource "basis.__word8_array";
     Shell.Build.loadSource "basis.__word8_vector";
     Shell.Build.loadSource "basis.__word8");
end

d53 4
@


1.5.1.1.1.2.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a7 4
 *  Revision 1.5.1.1.1.2  1997/08/12  09:31:17  johnh
 *  [Bug #30086]
 *  Merging - Stop printing structure contents to prevent spurious failure.
 *
@


1.4
log
@[Bug #1892]
rename __word{8,16,32}{array,vector} to __word{8,16,32}_{array,vector}
@
text
@d8 4
d54 14
d127 1
a127 1
val test9 = check'(fn () => f = a2v b);
d129 2
a130 2
val test9a = check'(fn () => ev = extract(e, 0, NONE)
		    andalso ev = extract(e, 0, SOME (length e)));
d132 1
a132 1
    check'(fn () => Word8Vector.fromList [] = extract(e, 100, SOME 0));
d146 2
a147 2
    check'(fn () => a2v (fromList []) = extract(e, length e, SOME 0)
	   andalso a2v (fromList []) = extract(e, length e, NONE));
d153 4
a156 4
val test10a = check'(fn () => ev = extract(e, 0, NONE)
		      andalso ev = extract(e, 0, SOME (length e)));
val test10b = check'(fn () => ev = extract(g, 0, NONE)
		     andalso ev = extract(g, 0, SOME (length g)));
d159 1
a159 1
val test10c = check'(fn () => ev = extract(g, 0, NONE));
d162 1
a162 1
val test10d = check'(fn () => ev = extract(g, 0, NONE));
d165 1
a165 1
val test10e = check'(fn () => a2v b = extract(g, 101, SOME 3));
d168 1
a168 1
val test10f = check'(fn () => a2v b = extract(g, 100, SOME 3));
@


1.3
log
@[Bug #1728]
__integer becomes __int
@
text
@d8 4
d42 2
a43 2
Shell.Build.loadSource "basis.__word8array";
Shell.Build.loadSource "basis.__word8vector";
@


1.3.4.1
log
@branched from 1.3
@
text
@a7 4
 *  Revision 1.3  1996/11/06  12:06:20  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
@


1.3.3.1
log
@branched from 1.3
@
text
@a7 4
 *  Revision 1.3  1996/11/06  12:06:20  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
@


1.3.3.1.1.1
log
@branched from 1.3.3.1
@
text
@a7 3
 *  Revision 1.3.3.1  1996/12/17  18:14:28  hope
 *  branched from 1.3
 *
@


1.3.2.1
log
@branched from 1.3
@
text
@a7 4
 *  Revision 1.3  1996/11/06  12:06:20  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
@


1.3.1.1
log
@branched from 1.3
@
text
@a7 4
 *  Revision 1.3  1996/11/06  12:06:20  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
@


1.3.1.1.1.1
log
@branched from 1.3.1.1
@
text
@a7 3
 *  Revision 1.3.1.1  1996/11/14  13:17:42  hope
 *  branched from 1.3
 *
@


1.2
log
@Remove references to toplevel
@
text
@d8 3
d20 1
a20 1
Shell.Build.loadSource "basis.__integer";
@


1.1
log
@new unit
New test
@
text
@d7 5
a11 1
 *  $Log: basis:char.sml,v $
a16 1
Shell.Build.loadSource "basis.toplevel";
@


1.1.3.1
log
@branched from 1.1
@
text
@d7 1
a7 5
 *  $Log: word8arrays.sml,v $
 *  Revision 1.1  1996/05/22  15:04:08  matthew
 *  new unit
 *  New test
 *
@


1.1.2.1
log
@branched from 1.1
@
text
@d7 1
a7 5
 *  $Log: word8arrays.sml,v $
 *  Revision 1.1  1996/05/22  15:04:08  matthew
 *  new unit
 *  New test
 *
@


1.1.1.1
log
@branched from 1.1
@
text
@d7 1
a7 5
 *  $Log: word8arrays.sml,v $
 *  Revision 1.1  1996/05/22  15:04:08  matthew
 *  new unit
 *  New test
 *
@
