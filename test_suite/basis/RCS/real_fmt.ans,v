head	1.3;
access;
symbols
	MLWorks_21c0_1999_03_25:1.3
	MLWorks_20c1_1998_08_20:1.3
	MLWorks_20c0_1998_08_04:1.3
	MLWorks_20b2c2_1998_06_19:1.3
	MLWorks_20b2_Windows_1998_06_12:1.3
	MLWorks_20b1c1_1998_05_07:1.3
	MLWorks_20b0_1998_04_07:1.2
	MLWorks_20b0_1998_03_20:1.2
	MLWorks_20m2_1998_02_16:1.2
	MLWorks_20m1_1997_10_23:1.1;
locks; strict;
comment	@# @;


1.3
date	98.04.23.13.28.21;	author jont;	state Exp;
branches;
next	1.2;

1.2
date	97.11.25.19.23.43;	author daveb;	state Exp;
branches;
next	1.1;

1.1
date	97.10.09.17.50.34;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
[Bug #30276]
Tests for Real.fmt.
@


1.3
log
@[Bug #30397]
Remove round to even test as this doesn't really work on either
unix or nt.
@
text
@val check_exn : (StringCvt.realfmt * real) -> string = fn
val check_res : (StringCvt.realfmt * real * string) -> string = fn
val nan : real = nan
val neginf : real = ~inf
val posinf : real = inf
val test1a : string = "OK"
val test1b : string = "OK"
val test1c : string = "OK"
val test1d : string = "OK"
val test2a : string = "OK"
val test2b : string = "OK"
val test2c : string = "OK"
val test2d : string = "OK"
val test2e : string = "OK"
val test2f : string = "OK"
val test2g : string = "OK"
val test3a : string = "OK"
val test3b : string = "OK"
val test3c : string = "OK"
val test3d : string = "OK"
val test3e : string = "OK"
val test3f : string = "OK"
val test3g : string = "OK"
val test4a : string = "OK"
val test4c : string = "OK"
val test4d : string = "OK"
val test4e : string = "OK"
val test4f : string = "OK"
val test4g : string = "OK"
val test5a : string = "OK"
val test5b : string = "OK"
val test5c : string = "OK"
val test5d : string = "OK"
val test5e : string = "OK"
val test5f : string = "OK"
val test5g : string = "OK"
val test5h : string = "OK"
val test5i : string = "OK"
@


1.2
log
@[Bug #30323]
@
text
@a24 1
val test4b : string = "OK"
@


1.1
log
@new unit
[Bug #30276]
Tests for Real.fmt.
@
text
@a0 3
structure LargeReal = struct ... end
structure Real = struct ... end
structure StringCvt = struct ... end
@
