head	1.11;
access;
symbols
	MLWorks_21c0_1999_03_25:1.11
	MLWorks_20c1_1998_08_20:1.11
	MLWorks_20c0_1998_08_04:1.11
	MLWorks_20b2c2_1998_06_19:1.11
	MLWorks_20b2_Windows_1998_06_12:1.11
	MLWorks_20b1c1_1998_05_07:1.11
	MLWorks_20b0_1998_04_07:1.11
	MLWorks_20b0_1998_03_20:1.11
	MLWorks_20m2_1998_02_16:1.11
	MLWorks_20m1_1997_10_23:1.10
	MLWorks_11r1:1.9.1.1.1.1.1
	MLWorks_11c0_1997_09_09:1.9.1.1.1.1
	MLWorks_10r3:1.9.1.1.3
	MLWorks_10r2_551:1.9.1.1.2
	MLWorks_11:1.9.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.9.1.1
	MLWorks_20m0_1997_06_20:1.10
	MLWorks_1_0_r2c2_1997_06_14:1.9.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.9.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.9.1
	MLWorks_BugFix_1997_04_24:1.9
	MLWorks_1_0_r2_Win32_1997_04_11:1.9
	MLWorks_1_0_r2_Unix_1997_04_04:1.9
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.8.3.1.1
	MLWorks_gui_1996_12_18:1.8.4
	MLWorks_1_0_Win32_1996_12_17:1.8.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.8.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.8.1.1
	MLWorks_1_0_Irix_1996_11_28:1.8.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.8.2
	MLWorks_1_0_Unix_1996_11_14:1.8.1
	MLWorks_Open_Beta2_1996_10_11:1.7.2
	MLWorks_License_dev:1.7.1
	MLWorks_1_open_beta_1996_09_13:1.6.1
	MLWorks_Open_Beta_1996_08_22:1.4
	MLWorks_Beta_1996_07_02:1.2
	MLWorks_Beta_1996_06_07:1.1
	MLWorks_Beta_1996_06_06:1.1
	MLWorks_Beta_1996_06_05:1.1;
locks; strict;
comment	@# @;


1.11
date	97.11.25.19.25.14;	author daveb;	state Exp;
branches;
next	1.10;

1.10
date	97.05.28.16.17.41;	author jont;	state Exp;
branches;
next	1.9;

1.9
date	97.03.06.13.52.22;	author matthew;	state Exp;
branches
	1.9.1.1;
next	1.8;

1.8
date	96.10.22.13.29.02;	author jont;	state Exp;
branches
	1.8.1.1
	1.8.2.1
	1.8.3.1
	1.8.4.1;
next	1.7;

1.7
date	96.10.01.12.58.03;	author io;	state Exp;
branches
	1.7.1.1
	1.7.2.1;
next	1.6;

1.6
date	96.09.09.11.14.03;	author io;	state Exp;
branches
	1.6.1.1;
next	1.5;

1.5
date	96.09.07.00.02.26;	author io;	state Exp;
branches;
next	1.4;

1.4
date	96.08.14.12.01.27;	author io;	state Exp;
branches;
next	1.3;

1.3
date	96.07.04.18.31.02;	author andreww;	state Exp;
branches;
next	1.2;

1.2
date	96.06.25.10.17.47;	author io;	state Exp;
branches;
next	1.1;

1.1
date	96.06.05.00.26.29;	author io;	state Exp;
branches;
next	;

1.6.1.1
date	96.09.13.11.38.29;	author hope;	state Exp;
branches;
next	;

1.7.1.1
date	96.10.07.16.29.51;	author hope;	state Exp;
branches;
next	;

1.7.2.1
date	96.10.17.11.50.33;	author hope;	state Exp;
branches;
next	;

1.8.1.1
date	96.11.14.13.17.58;	author hope;	state Exp;
branches
	1.8.1.1.1.1;
next	;

1.8.1.1.1.1
date	96.11.28.15.28.28;	author hope;	state Exp;
branches;
next	;

1.8.2.1
date	96.11.22.18.35.45;	author hope;	state Exp;
branches;
next	;

1.8.3.1
date	96.12.17.18.14.44;	author hope;	state Exp;
branches
	1.8.3.1.1.1;
next	;

1.8.3.1.1.1
date	97.02.24.12.07.42;	author hope;	state Exp;
branches;
next	;

1.8.4.1
date	96.12.18.10.09.43;	author hope;	state Exp;
branches;
next	;

1.9.1.1
date	97.05.12.11.08.20;	author hope;	state Exp;
branches
	1.9.1.1.1.1
	1.9.1.1.2.1
	1.9.1.1.3.1;
next	;

1.9.1.1.1.1
date	97.07.28.18.49.49;	author daveb;	state Exp;
branches
	1.9.1.1.1.1.1.1;
next	;

1.9.1.1.1.1.1.1
date	97.10.07.12.15.06;	author jkbrook;	state Exp;
branches;
next	;

1.9.1.1.2.1
date	97.09.08.17.41.37;	author daveb;	state Exp;
branches;
next	;

1.9.1.1.3.1
date	97.09.09.14.41.02;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
stringcvt -> string_cvt
@


1.11
log
@[Bug #30323]
@
text
@infix 1 seq
val seq : ('a * 'b) -> 'b = fn
val check : bool -> string = fn
val check' : (unit -> bool) -> string = fn
val range : (int * int) -> (int -> bool) -> bool = fn
val checkrange : (int * int) -> (int -> bool) -> string = fn
val test1 : string = "OK"
val test2 : string = "OK"
val test3 : string = "OK"
val test4 : string = "OK"
val test5 : string = "OK"
val test6 : string = "OK"
val test7 : string = "OK"
val test8 : string = "OK"
val test9 : string = "OK"
@


1.10
log
@[Bug #30090]
Remove uses of MLWorks.IO
@
text
@a0 106
val it : unit = ()
structure Char =
  struct
    eqtype char = char
    eqtype string = string
    val < : (char * char) -> bool = fn
    val <= : (char * char) -> bool = fn
    val > : (char * char) -> bool = fn
    val >= : (char * char) -> bool = fn
    val chr : int -> char = fn
    val compare : (char * char) -> order = fn
    val contains : string -> char -> bool = fn
    val fromCString : string -> char option = fn
    val fromString : string -> char option = fn
    val isAlpha : char -> bool = fn
    val isAlphaNum : char -> bool = fn
    val isAscii : char -> bool = fn
    val isCntrl : char -> bool = fn
    val isDigit : char -> bool = fn
    val isGraph : char -> bool = fn
    val isHexDigit : char -> bool = fn
    val isLower : char -> bool = fn
    val isPrint : char -> bool = fn
    val isPunct : char -> bool = fn
    val isSpace : char -> bool = fn
    val isUpper : char -> bool = fn
    val maxChar : char = #"\255"
    val maxOrd : int = 255
    val minChar : char = #"\000"
    val notContains : string -> char -> bool = fn
    val ord : char -> int = fn
    val pred : char -> char = fn
    val scan : ('a -> (char * 'a) option) -> 'a -> (char * 'a) option = fn
    val succ : char -> char = fn
    val toCString : char -> string = fn
    val toLower : char -> char = fn
    val toString : char -> string = fn
    val toUpper : char -> char = fn
  end
val it : unit = ()
structure StringCvt =
  struct
    eqtype cs = int
    datatype radix =
      BIN |
      DEC |
      HEX |
      OCT
    type ('a, 'b) reader = 'b -> ('a * 'b) option
    datatype realfmt =
      EXACT |
      FIX of int option |
      GEN of int option |
      SCI of int option
    val BIN : StringCvt.radix
    val DEC : StringCvt.radix
    val EXACT : StringCvt.realfmt
    val FIX : int option -> StringCvt.realfmt
    val GEN : int option -> StringCvt.realfmt
    val HEX : StringCvt.radix
    val OCT : StringCvt.radix
    val SCI : int option -> StringCvt.realfmt
    val dropl : (char -> bool) -> ('a -> (char * 'a) option) -> 'a -> 'a = fn
    val padLeft : char -> int -> string -> string = fn
    val padRight : char -> int -> string -> string = fn
    val scanList : ((char list -> (char * char list) option) -> char list -> ('a * 'b) option) -> char list -> 'a option = fn
    val scanString : ((int -> (char * int) option) -> int -> ('a * int) option) -> string -> 'a option = fn
    val skipWS : ('a -> (char * 'a) option) -> 'a -> 'a = fn
    val splitl : (char -> bool) -> ('a -> (char * 'a) option) -> 'a -> (string * 'a) = fn
    val takel : (char -> bool) -> ('a -> (char * 'a) option) -> 'a -> string = fn
  end
val it : unit = ()
structure Int =
  struct
    eqtype int = int
    val * : (int * int) -> int = fn
    val + : (int * int) -> int = fn
    val - : (int * int) -> int = fn
    val < : (int * int) -> bool = fn
    val <= : (int * int) -> bool = fn
    val > : (int * int) -> bool = fn
    val >= : (int * int) -> bool = fn
    val abs : int -> int = fn
    val compare : (int * int) -> order = fn
    val div : (int * int) -> int = fn
    val fmt : StringCvt.radix -> int -> string = fn
    val fromInt : int -> int = fn
    val fromLarge : MLWorks.Internal.Types.int32 -> int = fn
    val fromString : string -> int option = fn
    val max : (int * int) -> int = fn
    val maxInt : int option = SOME 536870911
    val min : (int * int) -> int = fn
    val minInt : int option = SOME ~536870912
    val mod : (int * int) -> int = fn
    val precision : int option = SOME 30
    val quot : (int * int) -> int = fn
    val rem : (int * int) -> int = fn
    val sameSign : (int * int) -> bool = fn
    val scan : StringCvt.radix -> ('a -> (char * 'a) option) -> 'a -> (int * 'a) option = fn
    val sign : int -> int = fn
    val toInt : int -> int = fn
    val toLarge : int -> MLWorks.Internal.Types.int32 = fn
    val toString : int -> string = fn
    val ~ : int -> int = fn
  end
val it : unit = ()
@


1.9
log
@Updating


Updating
@
text
@a107 2
val flush_out : MLWorks.IO.outstream -> unit = fn
val output : (MLWorks.IO.outstream * string) -> unit = fn
a108 2
val std_out : MLWorks.IO.outstream = FLEXOUT(FLEXOUTSTREAM(ref(RIGIDOUTSTREAM {close_out=fn, closed_out=fn, flush_out=fn, output=fn})))
val say : string -> unit = fn
@


1.9.1.1
log
@branched from 1.9
@
text
@@


1.9.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@@


1.9.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@@


1.9.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@@


1.9.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@


1.8
log
@Remove references to toplevel
@
text
@d51 1
d57 1
@


1.8.4.1
log
@branched from 1.8
@
text
@@


1.8.3.1
log
@branched from 1.8
@
text
@@


1.8.3.1.1.1
log
@branched from 1.8.3.1
@
text
@@


1.8.2.1
log
@branched from 1.8
@
text
@@


1.8.1.1
log
@branched from 1.8
@
text
@@


1.8.1.1.1.1
log
@branched from 1.8.1.1
@
text
@@


1.7
log
@[Bug #1626]
update option in toCString
@
text
@a70 1
val it : unit = ()
@


1.7.2.1
log
@branched from 1.7
@
text
@@


1.7.1.1
log
@branched from 1.7
@
text
@@


1.6
log
@remove banner
@
text
@d35 1
a35 1
    val toCString : char -> string option = fn
@


1.6.1.1
log
@branched from 1.6
@
text
@@


1.5
log
@updating for commercial version flyer
@
text
@a0 2
commercial version may be purchased directly from Harlequin.

@


1.4
log
@switch off Compiling messages...
@
text
@d1 2
@


1.3
log
@updating.
@
text
@a1 12
Compiling basis.toplevel
Compiling basis.string_cvt
Compiling basis.__pre_basis
Compiling basis.__pre_string_cvt
Compiling basis.__string_cvt
Compiling basis.char
Compiling basis.__preinteger
Compiling basis.__preint32
Compiling basis.integer
Compiling basis.__integer
Compiling basis.__pre_char
Compiling basis.__char
@


1.2
log
@add __pre_char again
@
text
@a1 2
Compiling basis.general
Compiling basis.__general
d23 1
a23 1
    val compare : (char * char) -> order(hidden) = fn
d25 2
a26 2
    val fromCString : string -> char MLWorks.Option.option = fn
    val fromString : string -> char MLWorks.Option.option = fn
d45 1
a45 1
    val scan : ('a -> (char * 'a) MLWorks.Option.option) -> 'a -> (char * 'a) MLWorks.Option.option = fn
d47 1
a47 1
    val toCString : char -> string MLWorks.Option.option = fn
d68 2
a69 2
    val FIX : int MLWorks.Option.option -> StringCvt.realfmt
    val GEN : int MLWorks.Option.option -> StringCvt.realfmt
d72 2
a73 2
    val SCI : int MLWorks.Option.option -> StringCvt.realfmt
    val dropl : (char -> bool) -> ('a -> (char * 'a) MLWorks.Option.option) -> 'a -> 'a = fn
d76 5
a80 5
    val scanList : ((char list -> (char * char list) MLWorks.Option.option) -> char list -> ('a * 'b) MLWorks.Option.option) -> char list -> 'a MLWorks.Option.option = fn
    val scanString : ((int -> (char * int) MLWorks.Option.option) -> int -> ('a * int) MLWorks.Option.option) -> string -> 'a MLWorks.Option.option = fn
    val skipWS : ('a -> (char * 'a) MLWorks.Option.option) -> 'a -> 'a = fn
    val splitl : (char -> bool) -> ('a -> (char * 'a) MLWorks.Option.option) -> 'a -> (string * 'a) = fn
    val takel : (char -> bool) -> ('a -> (char * 'a) MLWorks.Option.option) -> 'a -> string = fn
a82 31
structure TopLevel =
  struct
    datatype 'a option =
      NONE |
      SOME of 'a
    datatype order =
      EQUAL |
      GREATER |
      LESS
    exception Domain
    val EQUAL : order
    exception Fail of string
    val GREATER : order
    val LESS : order
    val NONE : 'a option
    val SOME : 'a -> 'a option
  end
datatype 'a option =
  NONE |
  SOME of 'a
datatype order =
  EQUAL |
  GREATER |
  LESS
exception Domain
val EQUAL : order
exception Fail of string
val GREATER : order
val LESS : order
val NONE : 'a option
val SOME : 'a -> 'a option
@


1.1
log
@new unit
stringcvt -> string_cvt
@
text
@d5 1
a6 1
Compiling basis.string_cvt
d14 1
a23 2
    exception Dummy of char
    exception ToString of char
a36 1
    val isOctDigit : char -> bool = fn
a40 1
    val makestring : char -> string = fn
a47 1
    val scanc : ('a -> (char * 'a) MLWorks.Option.option) -> 'a -> (char * 'a) MLWorks.Option.option = fn
@
