head	1.13;
access;
symbols
	MLWorks_21c0_1999_03_25:1.13
	MLWorks_20c1_1998_08_20:1.13
	MLWorks_20c0_1998_08_04:1.13
	MLWorks_20b2c2_1998_06_19:1.13
	MLWorks_20b2_Windows_1998_06_12:1.13
	MLWorks_20b1c1_1998_05_07:1.13
	MLWorks_20b0_1998_04_07:1.13
	MLWorks_20b0_1998_03_20:1.13
	MLWorks_20m2_1998_02_16:1.13
	MLWorks_20m1_1997_10_23:1.11
	MLWorks_11r1:1.9.1.1.1.2.1
	MLWorks_11c0_1997_09_09:1.9.1.1.1.2
	MLWorks_10r3:1.9.1.1.3
	MLWorks_10r2_551:1.9.1.1.2
	MLWorks_11:1.9.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.9.1.1
	MLWorks_20m0_1997_06_20:1.10
	MLWorks_1_0_r2c2_1997_06_14:1.9.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.9.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.9.1
	MLWorks_BugFix_1997_04_24:1.9
	MLWorks_1_0_r2_Win32_1997_04_11:1.9
	MLWorks_1_0_r2_Unix_1997_04_04:1.9
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.8.3.1.1
	MLWorks_gui_1996_12_18:1.8.4
	MLWorks_1_0_Win32_1996_12_17:1.8.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.8.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.8.1.1
	MLWorks_1_0_Irix_1996_11_28:1.8.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.8.2
	MLWorks_1_0_Unix_1996_11_14:1.8.1
	MLWorks_Open_Beta2_1996_10_11:1.7.3
	MLWorks_License_dev:1.7.2
	MLWorks_1_open_beta_1996_09_13:1.7.1
	MLWorks_Open_Beta_1996_08_22:1.5
	MLWorks_Beta_1996_07_02:1.3
	MLWorks_Beta_1996_06_07:1.3
	MLWorks_Beta_1996_06_06:1.3
	MLWorks_Beta_1996_06_05:1.3
	MLWorks_Beta_1996_06_03:1.2
	MLWorks_Beta_1996_05_31:1.2
	MLWorks_Beta_1996_05_30:1.2;
locks; strict;
comment	@# @;


1.13
date	98.01.30.12.21.29;	author jont;	state Exp;
branches;
next	1.12;

1.12
date	97.11.25.19.27.45;	author daveb;	state Exp;
branches;
next	1.11;

1.11
date	97.08.11.09.47.40;	author brucem;	state Exp;
branches;
next	1.10;

1.10
date	97.05.28.16.22.07;	author jont;	state Exp;
branches;
next	1.9;

1.9
date	97.01.30.16.39.46;	author andreww;	state Exp;
branches
	1.9.1.1;
next	1.8;

1.8
date	96.10.22.13.31.15;	author jont;	state Exp;
branches
	1.8.1.1
	1.8.2.1
	1.8.3.1
	1.8.4.1;
next	1.7;

1.7
date	96.09.09.11.14.03;	author io;	state Exp;
branches
	1.7.1.1
	1.7.2.1
	1.7.3.1;
next	1.6;

1.6
date	96.09.07.00.02.27;	author io;	state Exp;
branches;
next	1.5;

1.5
date	96.08.14.12.19.37;	author io;	state Exp;
branches;
next	1.4;

1.4
date	96.07.04.18.34.52;	author andreww;	state Exp;
branches;
next	1.3;

1.3
date	96.06.05.02.36.19;	author io;	state Exp;
branches;
next	1.2;

1.2
date	96.05.23.08.56.16;	author matthew;	state Exp;
branches;
next	1.1;

1.1
date	96.05.22.15.28.59;	author matthew;	state Exp;
branches;
next	;

1.7.1.1
date	96.09.13.11.38.36;	author hope;	state Exp;
branches;
next	;

1.7.2.1
date	96.10.07.16.30.00;	author hope;	state Exp;
branches;
next	;

1.7.3.1
date	96.10.17.11.50.40;	author hope;	state Exp;
branches;
next	;

1.8.1.1
date	96.11.14.13.18.06;	author hope;	state Exp;
branches
	1.8.1.1.1.1;
next	;

1.8.1.1.1.1
date	96.11.28.15.28.35;	author hope;	state Exp;
branches;
next	;

1.8.2.1
date	96.11.22.18.35.52;	author hope;	state Exp;
branches;
next	;

1.8.3.1
date	96.12.17.18.14.51;	author hope;	state Exp;
branches
	1.8.3.1.1.1;
next	;

1.8.3.1.1.1
date	97.02.24.12.07.50;	author hope;	state Exp;
branches;
next	;

1.8.4.1
date	96.12.18.10.09.50;	author hope;	state Exp;
branches;
next	;

1.9.1.1
date	97.05.12.11.08.28;	author hope;	state Exp;
branches
	1.9.1.1.1.1
	1.9.1.1.2.1
	1.9.1.1.3.1;
next	;

1.9.1.1.1.1
date	97.07.28.18.49.34;	author daveb;	state Exp;
branches;
next	1.9.1.1.1.2;

1.9.1.1.1.2
date	97.08.12.09.35.39;	author johnh;	state Exp;
branches
	1.9.1.1.1.2.1.1;
next	;

1.9.1.1.1.2.1.1
date	97.10.07.12.14.02;	author jkbrook;	state Exp;
branches;
next	;

1.9.1.1.2.1
date	97.09.08.17.41.16;	author daveb;	state Exp;
branches;
next	;

1.9.1.1.3.1
date	97.09.09.14.40.43;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
New test
@


1.13
log
@[Bug #30330]
Modify answers now that type info correct in object files
@
text
@infix 1 seq
val seq : ('a * 'b) -> 'b = fn
val check : bool -> string = fn
val check' : (unit -> bool) -> string = fn
val range : (int * int) -> (int -> bool) -> bool = fn
val checkrange : (int * int) -> (int -> bool) -> string = fn
val a : BinPrimIO.array = A(#B[0, 1, 2, 3, 4, 5, 6])
val a2v : BinPrimIO.array -> BinIO.vector = fn
val b : BinPrimIO.array = A(#B[44, 55, 66])
val c : BinPrimIO.array = A(#B[0, 1, 2, 3, 4, 5, 6])
val d : BinPrimIO.array = A(#B[0, 1, 2, 3, 4, 5, 6, 0, 1, 2, ..])
val e : BinPrimIO.array = A(#B[0, 1, 2, 3, 4, 5, 6, 0, 1, 2, ..])
val ev : BinIO.vector = _
val f : BinIO.vector = _
val g : BinPrimIO.array = A(#B[1, 2, 3, 4, 5, 6, 0, 1, 2, 3, ..])
val i2w : int -> BinIO.elem = fn
val test1 : string = "OK"
val test10a : string = "OK"
val test10b : string = "OK"
val test10c : string = "OK"
val test10d : string = "OK"
val test10e : string = "OK"
val test10f : string = "OK"
val test10g : string = "OK"
val test10h : string = "OK"
val test10i : string = "OK"
val test11a : string = "OK"
val test11b : string = "OK"
val test11c : string = "OK"
val test11d : string = "OK"
val test11e : string = "OK"
val test11f : string = "OK"
val test11g : string = "OK"
val test11h : string = "OK"
val test11i : string = "OK"
val test11j : string = "OK"
val test11k : string = "OK"
val test2 : string = "OK"
val test3 : string = "OK"
val test4a : string = "OK"
val test4b : string = "OK"
val test4c : string = "OK"
val test5a : string = "OK"
val test5b : string = "OK"
val test6a : string = "OK"
val test6b : string = "OK"
val test6c : string = "OK"
val test7 : string = "OK"
val test8a : string = "OK"
val test8b : string = "OK"
val test9 : string = "OK"
val test9a : string = "OK"
val test9b : string = "OK"
val test9c : string = "OK"
val test9d : string = "OK"
val test9e : string = "OK"
val test9f : string = "OK"
val test9g : string = "OK"
val test9h : string = "OK"
val test9i : string = "OK"
val w127 : BinIO.elem = 0w127
@


1.12
log
@[Bug #30323]
@
text
@d7 1
a7 1
val a : BinPrimIO.array = A _
d9 4
a12 4
val b : BinPrimIO.array = A _
val c : BinPrimIO.array = A _
val d : BinPrimIO.array = A _
val e : BinPrimIO.array = A _
d15 1
a15 1
val g : BinPrimIO.array = A _
@


1.11
log
@[Bug #30086]
Stop printing structure contents to prevent spurious failure.
@
text
@a2 4
structure Int = struct ... end
structure Word8Array = struct ... end
structure Word8Vector = struct ... end
structure Word8 = struct ... end
d7 10
a16 10
val a : Word8Array.array = A(#B[0, 1, 2, 3, 4, 5, 6])
val a2v : Word8Array.array -> Word8Vector.vector = fn
val b : Word8Array.array = A(#B[44, 55, 66])
val c : Word8Array.array = A(#B[0, 1, 2, 3, 4, 5, 6])
val d : Word8Array.array = A(#B[0, 1, 2, 3, 4, 5, 6, 0, 1, 2, ..])
val e : Word8Array.array = A(#B[0, 1, 2, 3, 4, 5, 6, 0, 1, 2, ..])
val ev : Word8Vector.vector = _
val f : Word8Vector.vector = _
val g : Word8Array.array = A(#B[1, 2, 3, 4, 5, 6, 0, 1, 2, 3, ..])
val i2w : int -> Word8.word = fn
d61 1
a61 1
val w127 : Word8.word = 0w127
@


1.10
log
@[Bug #30090]
Remove uses of MLWorks.IO
@
text
@a0 34
val it : unit = ()
structure Int =
  struct
    eqtype int = int
    val * : (int * int) -> int = fn
    val + : (int * int) -> int = fn
    val - : (int * int) -> int = fn
    val < : (int * int) -> bool = fn
    val <= : (int * int) -> bool = fn
    val > : (int * int) -> bool = fn
    val >= : (int * int) -> bool = fn
    val abs : int -> int = fn
    val compare : (int * int) -> order = fn
    val div : (int * int) -> int = fn
    val fmt : radix(hidden) -> int -> string = fn
    val fromInt : int -> int = fn
    val fromLarge : MLWorks.Internal.Types.int32 -> int = fn
    val fromString : string -> int option = fn
    val max : (int * int) -> int = fn
    val maxInt : int option = SOME 536870911
    val min : (int * int) -> int = fn
    val minInt : int option = SOME ~536870912
    val mod : (int * int) -> int = fn
    val precision : int option = SOME 30
    val quot : (int * int) -> int = fn
    val rem : (int * int) -> int = fn
    val sameSign : (int * int) -> bool = fn
    val scan : radix(hidden) -> ('a -> (char * 'a) option) -> 'a -> (int * 'a) option = fn
    val sign : int -> int = fn
    val toInt : int -> int = fn
    val toLarge : int -> MLWorks.Internal.Types.int32 = fn
    val toString : int -> string = fn
    val ~ : int -> int = fn
  end
d3 4
a10 99
val it : unit = ()
structure Word8Array =
  struct
    structure Vector =
      struct
        eqtype elem = word8
        type vector = vector
        val app : (Word8Array.elem -> unit) -> Word8Array.Vector.vector -> unit = fn
        val appi : ((int * Word8Array.elem) -> unit) -> (Word8Array.Vector.vector * int * int option) -> unit = fn
        val concat : Word8Array.Vector.vector list -> Word8Array.Vector.vector = fn
        val extract : (Word8Array.Vector.vector * int * int option) -> Word8Array.Vector.vector = fn
        val foldl : ((Word8Array.elem * 'a) -> 'a) -> 'a -> Word8Array.Vector.vector -> 'a = fn
        val foldli : ((int * Word8Array.elem * 'a) -> 'a) -> 'a -> (Word8Array.Vector.vector * int * int option) -> 'a = fn
        val foldr : ((Word8Array.elem * 'a) -> 'a) -> 'a -> Word8Array.Vector.vector -> 'a = fn
        val foldri : ((int * Word8Array.elem * 'a) -> 'a) -> 'a -> (Word8Array.Vector.vector * int * int option) -> 'a = fn
        val fromList : Word8Array.elem list -> Word8Array.Vector.vector = fn
        val length : Word8Array.Vector.vector -> int = fn
        val maxLen : int = 16777196
        val sub : (Word8Array.Vector.vector * int) -> Word8Array.elem = fn
        val tabulate : (int * (int -> Word8Array.elem)) -> Word8Array.Vector.vector = fn
      end
    eqtype array = array
    eqtype elem = word8
    val app : (Word8Array.elem -> unit) -> Word8Array.array -> unit = fn
    val appi : ((int * Word8Array.elem) -> unit) -> (Word8Array.array * int * int option) -> unit = fn
    val array : (int * Word8Array.elem) -> Word8Array.array = fn
    val copy : {di: int, dst: Word8Array.array, len: int option, si: int, src: Word8Array.array} -> unit = fn
    val copyVec : {di: int, dst: Word8Array.array, len: int option, si: int, src: Word8Array.Vector.vector} -> unit = fn
    val extract : (Word8Array.array * int * int option) -> Word8Array.Vector.vector = fn
    val foldl : ((Word8Array.elem * 'a) -> 'a) -> 'a -> Word8Array.array -> 'a = fn
    val foldli : ((int * Word8Array.elem * 'a) -> 'a) -> 'a -> (Word8Array.array * int * int option) -> 'a = fn
    val foldr : ((Word8Array.elem * 'a) -> 'a) -> 'a -> Word8Array.array -> 'a = fn
    val foldri : ((int * Word8Array.elem * 'a) -> 'a) -> 'a -> (Word8Array.array * int * int option) -> 'a = fn
    val fromList : Word8Array.elem list -> Word8Array.array = fn
    val length : Word8Array.array -> int = fn
    val maxLen : int = 16777196
    val modify : (Word8Array.elem -> Word8Array.elem) -> Word8Array.array -> unit = fn
    val modifyi : ((int * Word8Array.elem) -> Word8Array.elem) -> (Word8Array.array * int * int option) -> unit = fn
    val sub : (Word8Array.array * int) -> Word8Array.elem = fn
    val tabulate : (int * (int -> Word8Array.elem)) -> Word8Array.array = fn
    val update : (Word8Array.array * int * Word8Array.elem) -> unit = fn
  end
val it : unit = ()
structure Word8Vector =
  struct
    eqtype elem = word8
    type vector = vector
    val app : (Word8Array.elem -> unit) -> Word8Vector.vector -> unit = fn
    val appi : ((int * Word8Array.elem) -> unit) -> (Word8Vector.vector * int * int option) -> unit = fn
    val concat : Word8Vector.vector list -> Word8Vector.vector = fn
    val extract : (Word8Vector.vector * int * int option) -> Word8Vector.vector = fn
    val foldl : ((Word8Array.elem * 'a) -> 'a) -> 'a -> Word8Vector.vector -> 'a = fn
    val foldli : ((int * Word8Array.elem * 'a) -> 'a) -> 'a -> (Word8Vector.vector * int * int option) -> 'a = fn
    val foldr : ((Word8Array.elem * 'a) -> 'a) -> 'a -> Word8Vector.vector -> 'a = fn
    val foldri : ((int * Word8Array.elem * 'a) -> 'a) -> 'a -> (Word8Vector.vector * int * int option) -> 'a = fn
    val fromList : Word8Array.elem list -> Word8Vector.vector = fn
    val length : Word8Vector.vector -> int = fn
    val maxLen : int = 16777196
    val sub : (Word8Vector.vector * int) -> Word8Array.elem = fn
    val tabulate : (int * (int -> Word8Array.elem)) -> Word8Vector.vector = fn
  end
val it : unit = ()
structure Word8 =
  struct
    eqtype word = word8
    val * : (Word8.word * Word8.word) -> Word8.word = fn
    val + : (Word8.word * Word8.word) -> Word8.word = fn
    val - : (Word8.word * Word8.word) -> Word8.word = fn
    val < : (Word8.word * Word8.word) -> bool = fn
    val << : (Word8.word * word) -> Word8.word = fn
    val <= : (Word8.word * Word8.word) -> bool = fn
    val > : (Word8.word * Word8.word) -> bool = fn
    val >= : (Word8.word * Word8.word) -> bool = fn
    val >> : (Word8.word * word) -> Word8.word = fn
    val andb : (Word8.word * Word8.word) -> Word8.word = fn
    val compare : (Word8.word * Word8.word) -> order = fn
    val div : (Word8.word * Word8.word) -> Word8.word = fn
    val fmt : radix(hidden) -> Word8.word -> string = fn
    val fromInt : int -> Word8.word = fn
    val fromLargeInt : MLWorks.Internal.Types.int32 -> Word8.word = fn
    val fromLargeWord : MLWorks.Internal.Types.word32 -> Word8.word = fn
    val fromString : string -> Word8.word option = fn
    val max : (Word8.word * Word8.word) -> Word8.word = fn
    val min : (Word8.word * Word8.word) -> Word8.word = fn
    val mod : (Word8.word * Word8.word) -> Word8.word = fn
    val notb : Word8.word -> Word8.word = fn
    val orb : (Word8.word * Word8.word) -> Word8.word = fn
    val scan : radix(hidden) -> ('a -> (char * 'a) option) -> 'a -> (Word8.word * 'a) option = fn
    val toInt : Word8.word -> int = fn
    val toIntX : Word8.word -> int = fn
    val toLargeInt : Word8.word -> MLWorks.Internal.Types.int32 = fn
    val toLargeIntX : Word8.word -> MLWorks.Internal.Types.int32 = fn
    val toLargeWord : Word8.word -> MLWorks.Internal.Types.word32 = fn
    val toLargeWordX : Word8.word -> MLWorks.Internal.Types.word32 = fn
    val toString : Word8.word -> string = fn
    val wordSize : int = 8
    val xorb : (Word8.word * Word8.word) -> Word8.word = fn
    val ~>> : (Word8.word * word) -> Word8.word = fn
  end
@


1.9
log
@[Bug #1904]
monovectors no longer equality types.
@
text
@a35 2
val flush_out : MLWorks.IO.outstream -> unit = fn
val output : (MLWorks.IO.outstream * string) -> unit = fn
a36 2
val std_out : MLWorks.IO.outstream = FLEXOUT(FLEXOUTSTREAM(ref(RIGIDOUTSTREAM {close_out=fn, closed_out=fn, flush_out=fn, output=fn})))
val say : string -> unit = fn
@


1.9.1.1
log
@branched from 1.9
@
text
@@


1.9.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@@


1.9.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@@


1.9.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@@


1.9.1.1.1.2
log
@[Bug #30086]
Merging - Stop printing structure contents to prevent spurious failure.
@
text
@d1 34
a39 4
structure Int = struct ... end
structure Word8Array = struct ... end
structure Word8Vector = struct ... end
structure Word8 = struct ... end
d45 99
@


1.9.1.1.1.2.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@


1.8
log
@Remove references to toplevel
@
text
@d51 1
a51 1
        eqtype vector = vector
d91 1
a91 1
    eqtype vector = vector
@


1.8.4.1
log
@branched from 1.8
@
text
@@


1.8.3.1
log
@branched from 1.8
@
text
@@


1.8.3.1.1.1
log
@branched from 1.8.3.1
@
text
@@


1.8.2.1
log
@branched from 1.8
@
text
@@


1.8.1.1
log
@branched from 1.8
@
text
@@


1.8.1.1.1.1
log
@branched from 1.8.1.1
@
text
@@


1.7
log
@remove banner
@
text
@a1 1
val it : unit = ()
@


1.7.3.1
log
@branched from 1.7
@
text
@@


1.7.2.1
log
@branched from 1.7
@
text
@@


1.7.1.1
log
@branched from 1.7
@
text
@@


1.6
log
@updating for commercial version flyer
@
text
@a0 2
commercial version may be purchased directly from Harlequin.

@


1.5
log
@switch off Compiling messages...
@
text
@d1 2
@


1.4
log
@updating.
@
text
@a1 1
Compiling basis.toplevel
a2 8
Compiling basis.string_cvt
Compiling basis.__pre_basis
Compiling basis.__pre_string_cvt
Compiling basis.__string_cvt
Compiling basis.__preinteger
Compiling basis.__preint32
Compiling basis.integer
Compiling basis.__integer
a46 13
Compiling basis.mono_vector
Compiling basis.mono_array
Compiling basis.general
Compiling basis.__general
Compiling basis.__preword32
Compiling basis.__preword
Compiling basis.word
Compiling basis.__word
Compiling basis.__word8
Compiling basis.list
Compiling basis.__list
Compiling basis.__word8vector
Compiling basis.__word8array
d52 11
a62 11
        eqtype vector = string
        val app : (Word8Array.elem -> unit) -> string -> unit = fn
        val appi : ((int * Word8Array.elem) -> unit) -> (string * int * int option) -> unit = fn
        val concat : string list -> string = fn
        val extract : (string * int * int option) -> string = fn
        val foldl : ((Word8Array.elem * 'a) -> 'a) -> 'a -> string -> 'a = fn
        val foldli : ((int * Word8Array.elem * 'a) -> 'a) -> 'a -> (string * int * int option) -> 'a = fn
        val foldr : ((Word8Array.elem * 'a) -> 'a) -> 'a -> string -> 'a = fn
        val foldri : ((int * Word8Array.elem * 'a) -> 'a) -> 'a -> (string * int * int option) -> 'a = fn
        val fromList : Word8Array.elem list -> string = fn
        val length : string -> int = fn
d64 2
a65 2
        val sub : (string * int) -> Word8Array.elem = fn
        val tabulate : (int * (int -> Word8Array.elem)) -> string = fn
d73 2
a74 2
    val copyVec : {di: int, dst: Word8Array.array, len: int option, si: int, src: string} -> unit = fn
    val extract : (Word8Array.array * int * int option) -> string = fn
d92 11
a102 11
    eqtype vector = string
    val app : (Word8Array.elem -> unit) -> string -> unit = fn
    val appi : ((int * Word8Array.elem) -> unit) -> (string * int * int option) -> unit = fn
    val concat : string list -> string = fn
    val extract : (string * int * int option) -> string = fn
    val foldl : ((Word8Array.elem * 'a) -> 'a) -> 'a -> string -> 'a = fn
    val foldli : ((int * Word8Array.elem * 'a) -> 'a) -> 'a -> (string * int * int option) -> 'a = fn
    val foldr : ((Word8Array.elem * 'a) -> 'a) -> 'a -> string -> 'a = fn
    val foldri : ((int * Word8Array.elem * 'a) -> 'a) -> 'a -> (string * int * int option) -> 'a = fn
    val fromList : Word8Array.elem list -> string = fn
    val length : string -> int = fn
d104 2
a105 2
    val sub : (string * int) -> Word8Array.elem = fn
    val tabulate : (int * (int -> Word8Array.elem)) -> string = fn
d146 1
a146 1
val a2v : Word8Array.array -> string = fn
d151 2
a152 2
val ev : string
val f : string = ",7B"
@


1.3
log
@stringcvt->string_cvt
@
text
@a1 2
Compiling basis.general
Compiling basis.__general
a2 31
structure TopLevel =
  struct
    datatype 'a option =
      NONE |
      SOME of 'a
    datatype order =
      EQUAL |
      GREATER |
      LESS
    exception Domain
    val EQUAL : order
    exception Fail of string
    val GREATER : order
    val LESS : order
    val NONE : 'a option
    val SOME : 'a -> 'a option
  end
datatype 'a option =
  NONE |
  SOME of 'a
datatype order =
  EQUAL |
  GREATER |
  LESS
exception Domain
val EQUAL : order
exception Fail of string
val GREATER : order
val LESS : order
val NONE : 'a option
val SOME : 'a -> 'a option
d58 2
@


1.2
log
@Fixing bungle
@
text
@d37 4
a40 3
Compiling basis.stringcvt
Compiling basis.__pre_char
Compiling basis.__stringcvt
@


1.1
log
@new unit
New test
@
text
@a1 17
val show_mach : bool -> unit = fn
val show_absyn : bool -> unit = fn
val show_lamb : bool -> unit = fn
val show_unopt_lamb : bool -> unit = fn
val show_mir : bool -> unit = fn
val show_opt_mir : bool -> unit = fn
val alldebug : bool -> unit = fn
val debug : bool -> unit = fn
val timeit : ('a -> 'b) -> 'a -> 'b = fn
val don : ('a -> 'b) -> int -> 'a -> 'b = fn
val timen : ('a -> 'b) -> int -> 'a -> 'b = fn
val app : ('a -> 'b) -> 'a list -> unit = fn
val make : string -> unit = fn
val break : string -> unit = fn
val f : 'a -> int = fn
val it : unit = ()
val it : unit = ()
d201 2
a202 2
val d : Word8Array.array = A(#B[0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1])
val e : Word8Array.array = A(#B[0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 44, 55, 66, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1])
d205 1
a205 1
val g : Word8Array.array = A(#B[1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 44, 55, 66, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 0, 0])
@
