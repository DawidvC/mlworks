head	1.17;
access;
symbols
	MLWorks_21c0_1999_03_25:1.17
	MLWorks_20c1_1998_08_20:1.17
	MLWorks_20c0_1998_08_04:1.17
	MLWorks_20b2c2_1998_06_19:1.17
	MLWorks_20b2_Windows_1998_06_12:1.17
	MLWorks_20b1c1_1998_05_07:1.17
	MLWorks_20b0_1998_04_07:1.17
	MLWorks_20b0_1998_03_20:1.17
	MLWorks_20m2_1998_02_16:1.17
	MLWorks_20m1_1997_10_23:1.15
	MLWorks_11r1:1.14.1.1.1.1.1
	MLWorks_11c0_1997_09_09:1.14.1.1.1.1
	MLWorks_10r3:1.14.1.1.3
	MLWorks_10r2_551:1.14.1.1.2
	MLWorks_11:1.14.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.14.1.1
	MLWorks_20m0_1997_06_20:1.14
	MLWorks_1_0_r2c2_1997_06_14:1.14.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.14.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.14.1
	MLWorks_BugFix_1997_04_24:1.14
	MLWorks_1_0_r2_Win32_1997_04_11:1.14
	MLWorks_1_0_r2_Unix_1997_04_04:1.14
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.13.3.1.1
	MLWorks_gui_1996_12_18:1.13.4
	MLWorks_1_0_Win32_1996_12_17:1.13.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.13.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.13.1.1
	MLWorks_1_0_Irix_1996_11_28:1.13.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.13.2
	MLWorks_1_0_Unix_1996_11_14:1.13.1
	MLWorks_Open_Beta2_1996_10_11:1.12.3
	MLWorks_License_dev:1.12.2
	MLWorks_1_open_beta_1996_09_13:1.12.1
	MLWorks_Open_Beta_1996_08_22:1.9
	MLWorks_Beta_1996_07_02:1.6
	MLWorks_Beta_1996_06_07:1.5
	MLWorks_Beta_1996_06_06:1.5
	MLWorks_Beta_1996_06_05:1.5
	MLWorks_Beta_1996_06_03:1.3
	MLWorks_Beta_1996_05_31:1.3
	MLWorks_Beta_1996_05_30:1.2;
locks; strict;
comment	@# @;


1.17
date	98.01.30.12.20.20;	author jont;	state Exp;
branches;
next	1.16;

1.16
date	97.11.25.19.22.04;	author daveb;	state Exp;
branches;
next	1.15;

1.15
date	97.08.05.09.37.26;	author brucem;	state Exp;
branches;
next	1.14;

1.14
date	97.01.30.16.09.34;	author andreww;	state Exp;
branches
	1.14.1.1;
next	1.13;

1.13
date	96.11.08.15.22.49;	author matthew;	state Exp;
branches
	1.13.1.1
	1.13.2.1
	1.13.3.1
	1.13.4.1;
next	1.12;

1.12
date	96.09.09.11.14.02;	author io;	state Exp;
branches
	1.12.1.1
	1.12.2.1
	1.12.3.1;
next	1.11;

1.11
date	96.09.07.00.02.25;	author io;	state Exp;
branches;
next	1.10;

1.10
date	96.08.28.23.26.17;	author stephenb;	state Exp;
branches;
next	1.9;

1.9
date	96.08.14.11.33.12;	author io;	state Exp;
branches;
next	1.8;

1.8
date	96.07.18.15.42.49;	author andreww;	state Exp;
branches;
next	1.7;

1.7
date	96.07.04.18.16.39;	author andreww;	state Exp;
branches;
next	1.6;

1.6
date	96.06.25.09.36.11;	author io;	state Exp;
branches;
next	1.5;

1.5
date	96.06.05.01.06.46;	author io;	state Exp;
branches;
next	1.4;

1.4
date	96.06.04.13.37.48;	author andreww;	state Exp;
branches;
next	1.3;

1.3
date	96.05.30.15.18.36;	author stephenb;	state Exp;
branches;
next	1.2;

1.2
date	96.05.28.13.31.52;	author andreww;	state Exp;
branches;
next	1.1;

1.1
date	96.05.24.14.19.24;	author andreww;	state Exp;
branches;
next	;

1.12.1.1
date	96.09.13.11.38.28;	author hope;	state Exp;
branches;
next	;

1.12.2.1
date	96.10.07.16.29.49;	author hope;	state Exp;
branches;
next	;

1.12.3.1
date	96.10.17.11.50.31;	author hope;	state Exp;
branches;
next	;

1.13.1.1
date	96.11.14.13.17.55;	author hope;	state Exp;
branches
	1.13.1.1.1.1;
next	;

1.13.1.1.1.1
date	96.11.28.15.28.26;	author hope;	state Exp;
branches;
next	;

1.13.2.1
date	96.11.22.18.35.44;	author hope;	state Exp;
branches;
next	;

1.13.3.1
date	96.12.17.18.14.42;	author hope;	state Exp;
branches
	1.13.3.1.1.1;
next	;

1.13.3.1.1.1
date	97.02.24.12.07.40;	author hope;	state Exp;
branches;
next	;

1.13.4.1
date	96.12.18.10.09.41;	author hope;	state Exp;
branches;
next	;

1.14.1.1
date	97.05.12.11.08.18;	author hope;	state Exp;
branches
	1.14.1.1.1.1
	1.14.1.1.2.1
	1.14.1.1.3.1;
next	;

1.14.1.1.1.1
date	97.07.28.18.50.17;	author daveb;	state Exp;
branches
	1.14.1.1.1.1.1.1;
next	;

1.14.1.1.1.1.1.1
date	97.10.07.12.15.22;	author jkbrook;	state Exp;
branches;
next	;

1.14.1.1.2.1
date	97.09.08.17.42.07;	author daveb;	state Exp;
branches;
next	;

1.14.1.1.3.1
date	97.09.09.14.41.33;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
Answer file for test prim_io_3.sml.
@


1.17
log
@[Bug #30330]
Modify answers now that type info correct in object files
@
text
@Vector read succeeded.
VectorNB read succeeded.
ArrayNB read succeeded.
val buffer : BinPrimIO.array = A(#B[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
val compare : int -> unit = fn
val f : {buf: BinPrimIO.array, i: int, sz: int option} -> int option = fn
val makearray : (BinPrimIO.array * int * int) -> unit = fn
val makelist : int -> BinIO.elem list = fn
val nextno : unit -> BinIO.elem = fn
val number : BinIO.elem ref = ref(0w9)
val r : BinPrimIO.reader = RD {avail=fn, block=NONE, canInput=SOME fn, chunkSize=5, close=fn, endPos=SOME fn, getPos=SOME fn, ioDesc=NONE, name="Bertrand", readArr=SOME fn, readArrNB=NONE, readVec=NONE, readVecNB=NONE, setPos=SOME fn, verifyPos=NONE}
val r' : BinPrimIO.reader = RD {avail=fn, block=NONE, canInput=SOME fn, chunkSize=5, close=fn, endPos=SOME fn, getPos=SOME fn, ioDesc=NONE, name="Bertrand", readArr=SOME fn, readArrNB=SOME fn, readVec=SOME fn, readVecNB=SOME fn, setPos=SOME fn, verifyPos=NONE}
val s : int -> unit = fn
val test1 : unit = ()
val test2 : unit = ()
val test3 : unit = ()
val x : int option = SOME 9
val y : BinIO.vector = _
@


1.16
log
@[Bug #30323]
@
text
@d4 1
a4 1
val buffer : BinPrimIO.array = A _
d11 2
a12 2
val r : BinPrimIO.reader = RD _
val r' : BinPrimIO.reader = RD _
d17 1
a17 1
val x : int option = SOME _
@


1.15
log
@[Bug #30004]
Reflect changes in sml file.
@
text
@a0 5
structure General = struct ... end
structure Word8 = struct ... end
structure Word8Vector = struct ... end
structure Word8Array = struct ... end
structure BinPrimIO = struct ... end
d4 1
a4 1
val buffer : BinPrimIO.array = A(#B[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
d8 5
a12 5
val makelist : int -> BinPrimIO.elem list = fn
val nextno : unit -> BinPrimIO.elem = fn
val number : BinPrimIO.elem ref = ref(0w9)
val r : BinPrimIO.reader = RD {avail=fn, block=NONE, canInput=SOME fn, chunkSize=5, close=fn, endPos=SOME fn, getPos=SOME fn, ioDesc=NONE, name="Bertrand", readArr=SOME fn, readArrNB=NONE, readVec=NONE, readVecNB=NONE, setPos=SOME fn, verifyPos=NONE}
val r' : BinPrimIO.reader = RD {avail=fn, block=NONE, canInput=SOME fn, chunkSize=5, close=fn, endPos=SOME fn, getPos=SOME fn, ioDesc=NONE, name="Bertrand", readArr=SOME fn, readArrNB=SOME fn, readVec=SOME fn, readVecNB=SOME fn, setPos=SOME fn, verifyPos=NONE}
d17 2
a18 2
val x : int option = SOME 9
val y : BinPrimIO.vector = _
@


1.14
log
@[Bug #1904]
mono vectors no longer equality types.
@
text
@d1 5
a5 155
val it : unit = ()
structure General =
  struct
    type exn = exn
    datatype 'a option =
      NONE |
      SOME of 'a
    datatype order =
      EQUAL |
      GREATER |
      LESS
    eqtype unit = unit
    val ! : 'a ref -> 'a = fn
    val := : ('a ref * 'a) -> unit = fn
    val <> : (''a * ''a) -> bool = fn
    exception Bind
    exception Chr
    exception Div
    exception Domain
    val EQUAL : order
    exception Fail of string
    val GREATER : order
    val LESS : order
    exception Match
    val NONE : 'a option
    exception Option
    exception Overflow
    val SOME : 'a -> 'a option
    exception Size
    exception Subscript
    val before : ('a * unit) -> 'a = fn
    val exnMessage : exn -> string = fn
    val exnName : exn -> string = fn
    val getOpt : ('a option * 'a) -> 'a = fn
    val ignore : 'a -> unit = fn
    val isSome : 'a option -> bool = fn
    val o : (('a -> 'b) * ('c -> 'a)) -> 'c -> 'b = fn
    val valOf : 'a option -> 'a = fn
  end
val it : unit = ()
structure Word8 =
  struct
    eqtype word = word8
    val * : (Word8.word * Word8.word) -> Word8.word = fn
    val + : (Word8.word * Word8.word) -> Word8.word = fn
    val - : (Word8.word * Word8.word) -> Word8.word = fn
    val < : (Word8.word * Word8.word) -> bool = fn
    val << : (Word8.word * word) -> Word8.word = fn
    val <= : (Word8.word * Word8.word) -> bool = fn
    val > : (Word8.word * Word8.word) -> bool = fn
    val >= : (Word8.word * Word8.word) -> bool = fn
    val >> : (Word8.word * word) -> Word8.word = fn
    val andb : (Word8.word * Word8.word) -> Word8.word = fn
    val compare : (Word8.word * Word8.word) -> order = fn
    val div : (Word8.word * Word8.word) -> Word8.word = fn
    val fmt : radix(hidden) -> Word8.word -> string = fn
    val fromInt : int -> Word8.word = fn
    val fromLargeInt : MLWorks.Internal.Types.int32 -> Word8.word = fn
    val fromLargeWord : MLWorks.Internal.Types.word32 -> Word8.word = fn
    val fromString : string -> Word8.word option = fn
    val max : (Word8.word * Word8.word) -> Word8.word = fn
    val min : (Word8.word * Word8.word) -> Word8.word = fn
    val mod : (Word8.word * Word8.word) -> Word8.word = fn
    val notb : Word8.word -> Word8.word = fn
    val orb : (Word8.word * Word8.word) -> Word8.word = fn
    val scan : radix(hidden) -> ('a -> (char * 'a) option) -> 'a -> (Word8.word * 'a) option = fn
    val toInt : Word8.word -> int = fn
    val toIntX : Word8.word -> int = fn
    val toLargeInt : Word8.word -> MLWorks.Internal.Types.int32 = fn
    val toLargeIntX : Word8.word -> MLWorks.Internal.Types.int32 = fn
    val toLargeWord : Word8.word -> MLWorks.Internal.Types.word32 = fn
    val toLargeWordX : Word8.word -> MLWorks.Internal.Types.word32 = fn
    val toString : Word8.word -> string = fn
    val wordSize : int = 8
    val xorb : (Word8.word * Word8.word) -> Word8.word = fn
    val ~>> : (Word8.word * word) -> Word8.word = fn
  end
val it : unit = ()
structure Word8Vector =
  struct
    eqtype elem = word8
    type vector = vector
    val app : (Word8.word -> unit) -> Word8Vector.vector -> unit = fn
    val appi : ((int * Word8.word) -> unit) -> (Word8Vector.vector * int * int option) -> unit = fn
    val concat : Word8Vector.vector list -> Word8Vector.vector = fn
    val extract : (Word8Vector.vector * int * int option) -> Word8Vector.vector = fn
    val foldl : ((Word8.word * 'a) -> 'a) -> 'a -> Word8Vector.vector -> 'a = fn
    val foldli : ((int * Word8.word * 'a) -> 'a) -> 'a -> (Word8Vector.vector * int * int option) -> 'a = fn
    val foldr : ((Word8.word * 'a) -> 'a) -> 'a -> Word8Vector.vector -> 'a = fn
    val foldri : ((int * Word8.word * 'a) -> 'a) -> 'a -> (Word8Vector.vector * int * int option) -> 'a = fn
    val fromList : Word8.word list -> Word8Vector.vector = fn
    val length : Word8Vector.vector -> int = fn
    val maxLen : int = 16777196
    val sub : (Word8Vector.vector * int) -> Word8.word = fn
    val tabulate : (int * (int -> Word8.word)) -> Word8Vector.vector = fn
  end
val it : unit = ()
structure Word8Array =
  struct
    structure Vector =
      struct
        eqtype elem = word8
        type vector = vector
        val app : (Word8.word -> unit) -> Word8Vector.vector -> unit = fn
        val appi : ((int * Word8.word) -> unit) -> (Word8Vector.vector * int * int option) -> unit = fn
        val concat : Word8Vector.vector list -> Word8Vector.vector = fn
        val extract : (Word8Vector.vector * int * int option) -> Word8Vector.vector = fn
        val foldl : ((Word8.word * 'a) -> 'a) -> 'a -> Word8Vector.vector -> 'a = fn
        val foldli : ((int * Word8.word * 'a) -> 'a) -> 'a -> (Word8Vector.vector * int * int option) -> 'a = fn
        val foldr : ((Word8.word * 'a) -> 'a) -> 'a -> Word8Vector.vector -> 'a = fn
        val foldri : ((int * Word8.word * 'a) -> 'a) -> 'a -> (Word8Vector.vector * int * int option) -> 'a = fn
        val fromList : Word8.word list -> Word8Vector.vector = fn
        val length : Word8Vector.vector -> int = fn
        val maxLen : int = 16777196
        val sub : (Word8Vector.vector * int) -> Word8.word = fn
        val tabulate : (int * (int -> Word8.word)) -> Word8Vector.vector = fn
      end
    eqtype array = array
    eqtype elem = word8
    val app : (Word8.word -> unit) -> Word8Array.array -> unit = fn
    val appi : ((int * Word8.word) -> unit) -> (Word8Array.array * int * int option) -> unit = fn
    val array : (int * Word8.word) -> Word8Array.array = fn
    val copy : {di: int, dst: Word8Array.array, len: int option, si: int, src: Word8Array.array} -> unit = fn
    val copyVec : {di: int, dst: Word8Array.array, len: int option, si: int, src: Word8Vector.vector} -> unit = fn
    val extract : (Word8Array.array * int * int option) -> Word8Vector.vector = fn
    val foldl : ((Word8.word * 'a) -> 'a) -> 'a -> Word8Array.array -> 'a = fn
    val foldli : ((int * Word8.word * 'a) -> 'a) -> 'a -> (Word8Array.array * int * int option) -> 'a = fn
    val foldr : ((Word8.word * 'a) -> 'a) -> 'a -> Word8Array.array -> 'a = fn
    val foldri : ((int * Word8.word * 'a) -> 'a) -> 'a -> (Word8Array.array * int * int option) -> 'a = fn
    val fromList : Word8.word list -> Word8Array.array = fn
    val length : Word8Array.array -> int = fn
    val maxLen : int = 16777196
    val modify : (Word8.word -> Word8.word) -> Word8Array.array -> unit = fn
    val modifyi : ((int * Word8.word) -> Word8.word) -> (Word8Array.array * int * int option) -> unit = fn
    val sub : (Word8Array.array * int) -> Word8.word = fn
    val tabulate : (int * (int -> Word8.word)) -> Word8Array.array = fn
    val update : (Word8Array.array * int * Word8.word) -> unit = fn
  end
val it : unit = ()
structure BinPrimIO =
  struct
    eqtype array = array
    eqtype elem = word8
    eqtype pos = int
    datatype reader =
      RD of {avail: unit -> int option, block: (unit -> unit) option, canInput: (unit -> bool) option, chunkSize: int, close: unit -> unit, endPos: (unit -> pos) option, getPos: (unit -> pos) option, ioDesc: iodesc option, name: string, readArr: ({buf: array, i: int, sz: int option} -> int) option, readArrNB: ({buf: array, i: int, sz: int option} -> int option) option, readVec: (int -> vector) option, readVecNB: (int -> vector option) option, setPos: (pos -> unit) option, verifyPos: (unit -> pos) option}
    type vector = vector
    datatype writer =
      WR of {block: (unit -> unit) option, canOutput: (unit -> bool) option, chunkSize: int, close: unit -> unit, endPos: (unit -> pos) option, getPos: (unit -> pos) option, ioDesc: iodesc option, name: string, setPos: (pos -> unit) option, verifyPos: (unit -> pos) option, writeArr: ({buf: array, i: int, sz: int option} -> int) option, writeArrNB: ({buf: array, i: int, sz: int option} -> int option) option, writeVec: ({buf: vector, i: int, sz: int option} -> int) option, writeVecNB: ({buf: vector, i: int, sz: int option} -> int option) option}
    val RD : {avail: unit -> int option, block: (unit -> unit) option, canInput: (unit -> bool) option, chunkSize: int, close: unit -> unit, endPos: (unit -> int) option, getPos: (unit -> int) option, ioDesc: iodesc(hidden) option, name: string, readArr: ({buf: BinPrimIO.array, i: int, sz: int option} -> int) option, readArrNB: ({buf: BinPrimIO.array, i: int, sz: int option} -> int option) option, readVec: (int -> BinPrimIO.vector) option, readVecNB: (int -> BinPrimIO.vector option) option, setPos: (int -> unit) option, verifyPos: (unit -> int) option} -> BinPrimIO.reader
    val WR : {block: (unit -> unit) option, canOutput: (unit -> bool) option, chunkSize: int, close: unit -> unit, endPos: (unit -> int) option, getPos: (unit -> int) option, ioDesc: iodesc(hidden) option, name: string, setPos: (int -> unit) option, verifyPos: (unit -> int) option, writeArr: ({buf: BinPrimIO.array, i: int, sz: int option} -> int) option, writeArrNB: ({buf: BinPrimIO.array, i: int, sz: int option} -> int option) option, writeVec: ({buf: BinPrimIO.vector, i: int, sz: int option} -> int) option, writeVecNB: ({buf: BinPrimIO.vector, i: int, sz: int option} -> int option) option} -> BinPrimIO.writer
    val augmentReader : BinPrimIO.reader -> BinPrimIO.reader = fn
    val augmentWriter : BinPrimIO.writer -> BinPrimIO.writer = fn
    val compare : (int * int) -> order = fn
  end
@


1.14.1.1
log
@branched from 1.14
@
text
@@


1.14.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@@


1.14.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@@


1.14.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@@


1.14.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@


1.13
log
@[Bug #1661]
Updating
@
text
@d82 1
a82 1
    eqtype vector = vector
d103 1
a103 1
        eqtype vector = vector
d147 1
a147 1
    eqtype vector = vector
@


1.13.4.1
log
@branched from 1.13
@
text
@@


1.13.3.1
log
@branched from 1.13
@
text
@@


1.13.3.1.1.1
log
@branched from 1.13.3.1
@
text
@@


1.13.2.1
log
@branched from 1.13
@
text
@@


1.13.1.1
log
@branched from 1.13
@
text
@@


1.13.1.1.1.1
log
@branched from 1.13.1.1
@
text
@@


1.12
log
@remove banner
@
text
@d146 1
a146 1
      RD of {avail: unit -> int option, block: (unit -> unit) option, canInput: (unit -> bool) option, chunkSize: int, close: unit -> unit, endPos: (unit -> pos) option, getPos: (unit -> pos) option, ioDesc: io_desc option, name: string, readArr: ({buf: array, i: int, sz: int option} -> int) option, readArrNB: ({buf: array, i: int, sz: int option} -> int option) option, readVec: (int -> vector) option, readVecNB: (int -> vector option) option, setPos: (pos -> unit) option, verifyPos: (unit -> pos) option}
d149 3
a151 3
      WR of {block: (unit -> unit) option, canOutput: (unit -> bool) option, chunkSize: int, close: unit -> unit, endPos: (unit -> pos) option, getPos: (unit -> pos) option, ioDesc: io_desc option, name: string, setPos: (pos -> unit) option, verifyPos: (unit -> pos) option, writeArr: ({buf: array, i: int, sz: int option} -> int) option, writeArrNB: ({buf: array, i: int, sz: int option} -> int option) option, writeVec: ({buf: vector, i: int, sz: int option} -> int) option, writeVecNB: ({buf: vector, i: int, sz: int option} -> int option) option}
    val RD : {avail: unit -> int option, block: (unit -> unit) option, canInput: (unit -> bool) option, chunkSize: int, close: unit -> unit, endPos: (unit -> int) option, getPos: (unit -> int) option, ioDesc: io_desc(hidden) option, name: string, readArr: ({buf: BinPrimIO.array, i: int, sz: int option} -> int) option, readArrNB: ({buf: BinPrimIO.array, i: int, sz: int option} -> int option) option, readVec: (int -> BinPrimIO.vector) option, readVecNB: (int -> BinPrimIO.vector option) option, setPos: (int -> unit) option, verifyPos: (unit -> int) option} -> BinPrimIO.reader
    val WR : {block: (unit -> unit) option, canOutput: (unit -> bool) option, chunkSize: int, close: unit -> unit, endPos: (unit -> int) option, getPos: (unit -> int) option, ioDesc: io_desc(hidden) option, name: string, setPos: (int -> unit) option, verifyPos: (unit -> int) option, writeArr: ({buf: BinPrimIO.array, i: int, sz: int option} -> int) option, writeArrNB: ({buf: BinPrimIO.array, i: int, sz: int option} -> int option) option, writeVec: ({buf: BinPrimIO.vector, i: int, sz: int option} -> int) option, writeVecNB: ({buf: BinPrimIO.vector, i: int, sz: int option} -> int option) option} -> BinPrimIO.writer
@


1.12.3.1
log
@branched from 1.12
@
text
@@


1.12.2.1
log
@branched from 1.12
@
text
@@


1.12.1.1
log
@branched from 1.12
@
text
@@


1.11
log
@updating for commercial version flyer
@
text
@a0 2
commercial version may be purchased directly from Harlequin.

@


1.10
log
@Update wrt change in io_desc type.
@
text
@d1 2
@


1.9
log
@switch off Compiling messages...
@
text
@d146 1
a146 1
      RD of {avail: unit -> int option, block: (unit -> unit) option, canInput: (unit -> bool) option, chunkSize: int, close: unit -> unit, endPos: (unit -> pos) option, getPos: (unit -> pos) option, ioDesc: file_desc option, name: string, readArr: ({buf: array, i: int, sz: int option} -> int) option, readArrNB: ({buf: array, i: int, sz: int option} -> int option) option, readVec: (int -> vector) option, readVecNB: (int -> vector option) option, setPos: (pos -> unit) option, verifyPos: (unit -> pos) option}
d149 3
a151 3
      WR of {block: (unit -> unit) option, canOutput: (unit -> bool) option, chunkSize: int, close: unit -> unit, endPos: (unit -> pos) option, getPos: (unit -> pos) option, ioDesc: file_desc option, name: string, setPos: (pos -> unit) option, verifyPos: (unit -> pos) option, writeArr: ({buf: array, i: int, sz: int option} -> int) option, writeArrNB: ({buf: array, i: int, sz: int option} -> int option) option, writeVec: ({buf: vector, i: int, sz: int option} -> int) option, writeVecNB: ({buf: vector, i: int, sz: int option} -> int option) option}
    val RD : {avail: unit -> int option, block: (unit -> unit) option, canInput: (unit -> bool) option, chunkSize: int, close: unit -> unit, endPos: (unit -> int) option, getPos: (unit -> int) option, ioDesc: file_desc(hidden) option, name: string, readArr: ({buf: BinPrimIO.array, i: int, sz: int option} -> int) option, readArrNB: ({buf: BinPrimIO.array, i: int, sz: int option} -> int option) option, readVec: (int -> BinPrimIO.vector) option, readVecNB: (int -> BinPrimIO.vector option) option, setPos: (int -> unit) option, verifyPos: (unit -> int) option} -> BinPrimIO.reader
    val WR : {block: (unit -> unit) option, canOutput: (unit -> bool) option, chunkSize: int, close: unit -> unit, endPos: (unit -> int) option, getPos: (unit -> int) option, ioDesc: file_desc(hidden) option, name: string, setPos: (int -> unit) option, verifyPos: (unit -> int) option, writeArr: ({buf: BinPrimIO.array, i: int, sz: int option} -> int) option, writeArrNB: ({buf: BinPrimIO.array, i: int, sz: int option} -> int option) option, writeVec: ({buf: BinPrimIO.vector, i: int, sz: int option} -> int) option, writeVecNB: ({buf: BinPrimIO.vector, i: int, sz: int option} -> int option) option} -> BinPrimIO.writer
@


1.8
log
@[Bug #1453]
updating with respect to the updating of revised basis IO library.
@
text
@a1 2
Compiling basis.general
Compiling basis.__general
a40 12
Compiling basis.toplevel
Compiling basis.string_cvt
Compiling basis.__pre_basis
Compiling basis.__pre_string_cvt
Compiling basis.__string_cvt
Compiling basis.__preinteger
Compiling basis.__preword32
Compiling basis.__preint32
Compiling basis.__preword
Compiling basis.word
Compiling basis.__word
Compiling basis.__word8
a78 4
Compiling basis.mono_vector
Compiling basis.list
Compiling basis.__list
Compiling basis.__word8vector
d82 11
a92 11
    eqtype vector = string
    val app : (Word8.word -> unit) -> string -> unit = fn
    val appi : ((int * Word8.word) -> unit) -> (string * int * int option) -> unit = fn
    val concat : string list -> string = fn
    val extract : (string * int * int option) -> string = fn
    val foldl : ((Word8.word * 'a) -> 'a) -> 'a -> string -> 'a = fn
    val foldli : ((int * Word8.word * 'a) -> 'a) -> 'a -> (string * int * int option) -> 'a = fn
    val foldr : ((Word8.word * 'a) -> 'a) -> 'a -> string -> 'a = fn
    val foldri : ((int * Word8.word * 'a) -> 'a) -> 'a -> (string * int * int option) -> 'a = fn
    val fromList : Word8.word list -> string = fn
    val length : string -> int = fn
d94 2
a95 2
    val sub : (string * int) -> Word8.word = fn
    val tabulate : (int * (int -> Word8.word)) -> string = fn
a97 2
Compiling basis.mono_array
Compiling basis.__word8array
d103 11
a113 11
        eqtype vector = string
        val app : (Word8.word -> unit) -> string -> unit = fn
        val appi : ((int * Word8.word) -> unit) -> (string * int * int option) -> unit = fn
        val concat : string list -> string = fn
        val extract : (string * int * int option) -> string = fn
        val foldl : ((Word8.word * 'a) -> 'a) -> 'a -> string -> 'a = fn
        val foldli : ((int * Word8.word * 'a) -> 'a) -> 'a -> (string * int * int option) -> 'a = fn
        val foldr : ((Word8.word * 'a) -> 'a) -> 'a -> string -> 'a = fn
        val foldri : ((int * Word8.word * 'a) -> 'a) -> 'a -> (string * int * int option) -> 'a = fn
        val fromList : Word8.word list -> string = fn
        val length : string -> int = fn
d115 2
a116 2
        val sub : (string * int) -> Word8.word = fn
        val tabulate : (int * (int -> Word8.word)) -> string = fn
d124 2
a125 2
    val copyVec : {di: int, dst: Word8Array.array, len: int option, si: int, src: string} -> unit = fn
    val extract : (Word8Array.array * int * int option) -> string = fn
a139 42
Compiling basis.integer
Compiling basis.__integer
Compiling basis.__position
Compiling basis.char
Compiling basis.__pre_char
Compiling basis.__char
Compiling basis.math
Compiling basis.__math
Compiling basis.ieeereal
Compiling basis.__ieeereal
Compiling basis.__prereal
Compiling basis.real
Compiling basis.__real
Compiling basis.time
Compiling unix.__time
Compiling basis.os_file_sys
Compiling basis.os_path
Compiling basis.os_process
Compiling basis.os_io
Compiling basis.os
Compiling basis.__word32
Compiling unix.unixos
Compiling unix._os
Compiling unix._unixos
Compiling unix.__unixos
Compiling basis.string
Compiling basis.__string
Compiling unix.__os_path
Compiling unix._os_file_sys
Compiling unix.__os_file_sys
Compiling basis.__exit
Compiling basis.exit
Compiling basis._os_process
Compiling basis.__os_process
Compiling unix._os_io
Compiling unix.__os_io
Compiling unix.__os
Compiling basis.prim_io
Compiling basis.__charvector
Compiling basis.__chararray
Compiling basis._prim_io
Compiling basis.__bin_prim_io
d147 1
a147 1
    eqtype vector = string
d150 2
a151 2
    val RD : {avail: unit -> int option, block: (unit -> unit) option, canInput: (unit -> bool) option, chunkSize: int, close: unit -> unit, endPos: (unit -> int) option, getPos: (unit -> int) option, ioDesc: file_desc(hidden) option, name: string, readArr: ({buf: BinPrimIO.array, i: int, sz: int option} -> int) option, readArrNB: ({buf: BinPrimIO.array, i: int, sz: int option} -> int option) option, readVec: (int -> string) option, readVecNB: (int -> string option) option, setPos: (int -> unit) option, verifyPos: (unit -> int) option} -> BinPrimIO.reader
    val WR : {block: (unit -> unit) option, canOutput: (unit -> bool) option, chunkSize: int, close: unit -> unit, endPos: (unit -> int) option, getPos: (unit -> int) option, ioDesc: file_desc(hidden) option, name: string, setPos: (int -> unit) option, verifyPos: (unit -> int) option, writeArr: ({buf: BinPrimIO.array, i: int, sz: int option} -> int) option, writeArrNB: ({buf: BinPrimIO.array, i: int, sz: int option} -> int option) option, writeVec: ({buf: string, i: int, sz: int option} -> int) option, writeVecNB: ({buf: string, i: int, sz: int option} -> int option) option} -> BinPrimIO.writer
d173 1
a173 1
val y : string = "\001\002\003\004\005\006\007\008\t\n\011"
@


1.7
log
@updating.
@
text
@a161 2
Compiling basis.io
Compiling basis.__io
a197 2
Compiling basis.stream_io
Compiling basis._streamio
d200 1
a200 1
Compiling basis._primio
d208 1
a208 1
      RD of {block: (unit -> unit) option, canInput: (unit -> bool) option, chunkSize: int, close: unit -> unit, endPos: unit -> pos, getPos: unit -> pos, ioDesc: file_desc option, name: string, readArr: ({buf: array, i: int, sz: int option} -> int) option, readArrNB: ({buf: array, i: int, sz: int option} -> int option) option, readVec: (int -> vector) option, readVecNB: (int -> vector option) option, setPos: pos -> unit}
d211 3
a213 3
      WR of {block: (unit -> unit) option, canOutput: (unit -> bool) option, chunkSize: int, close: unit -> unit, endPos: unit -> pos, getPos: unit -> pos, ioDesc: file_desc option, name: string, setPos: pos -> unit, writeArr: ({buf: array, i: int, sz: int option} -> int) option, writeArrNB: ({buf: array, i: int, sz: int option} -> int option) option, writeVec: ({buf: vector, i: int, sz: int option} -> int) option, writeVecNB: ({buf: vector, i: int, sz: int option} -> int option) option}
    val RD : {block: (unit -> unit) option, canInput: (unit -> bool) option, chunkSize: int, close: unit -> unit, endPos: unit -> int, getPos: unit -> int, ioDesc: file_desc(hidden) option, name: string, readArr: ({buf: BinPrimIO.array, i: int, sz: int option} -> int) option, readArrNB: ({buf: BinPrimIO.array, i: int, sz: int option} -> int option) option, readVec: (int -> string) option, readVecNB: (int -> string option) option, setPos: int -> unit} -> BinPrimIO.reader
    val WR : {block: (unit -> unit) option, canOutput: (unit -> bool) option, chunkSize: int, close: unit -> unit, endPos: unit -> int, getPos: unit -> int, ioDesc: file_desc(hidden) option, name: string, setPos: int -> unit, writeArr: ({buf: BinPrimIO.array, i: int, sz: int option} -> int) option, writeArrNB: ({buf: BinPrimIO.array, i: int, sz: int option} -> int option) option, writeVec: ({buf: string, i: int, sz: int option} -> int) option, writeVecNB: ({buf: string, i: int, sz: int option} -> int option) option} -> BinPrimIO.writer
d228 2
a229 2
val r : BinPrimIO.reader = RD {block=NONE, canInput=SOME fn, chunkSize=5, close=fn, endPos=fn, getPos=fn, ioDesc=NONE, name="Bertrand", readArr=SOME fn, readArrNB=NONE, readVec=NONE, readVecNB=NONE, setPos=fn}
val r' : BinPrimIO.reader = RD {block=NONE, canInput=SOME fn, chunkSize=5, close=fn, endPos=fn, getPos=fn, ioDesc=NONE, name="Bertrand", readArr=SOME fn, readArrNB=SOME fn, readVec=SOME fn, readVecNB=SOME fn, setPos=fn}
@


1.6
log
@add __pre_char again
@
text
@d22 1
a22 1
    val EQUAL : General.order
d24 2
a25 2
    val GREATER : General.order
    val LESS : General.order
d27 1
a27 1
    val NONE : 'a General.option
d30 1
a30 1
    val SOME : 'a -> 'a General.option
d36 1
a36 1
    val getOpt : ('a General.option * 'a) -> 'a = fn
d38 1
a38 1
    val isSome : 'a General.option -> bool = fn
d40 1
a40 1
    val valOf : 'a General.option -> 'a = fn
d68 1
a68 1
    val compare : (Word8.word * Word8.word) -> General.order = fn
d74 1
a74 1
    val fromString : string -> Word8.word General.option = fn
d80 1
a80 1
    val scan : radix(hidden) -> ('a -> (char * 'a) General.option) -> 'a -> (Word8.word * 'a) General.option = fn
d102 1
a102 1
    val appi : ((int * Word8.word) -> unit) -> (string * int * int General.option) -> unit = fn
d104 1
a104 1
    val extract : (string * int * int General.option) -> string = fn
d106 1
a106 1
    val foldli : ((int * Word8.word * 'a) -> 'a) -> 'a -> (string * int * int General.option) -> 'a = fn
d108 1
a108 1
    val foldri : ((int * Word8.word * 'a) -> 'a) -> 'a -> (string * int * int General.option) -> 'a = fn
d125 1
a125 1
        val appi : ((int * Word8.word) -> unit) -> (string * int * int General.option) -> unit = fn
d127 1
a127 1
        val extract : (string * int * int General.option) -> string = fn
d129 1
a129 1
        val foldli : ((int * Word8.word * 'a) -> 'a) -> 'a -> (string * int * int General.option) -> 'a = fn
d131 1
a131 1
        val foldri : ((int * Word8.word * 'a) -> 'a) -> 'a -> (string * int * int General.option) -> 'a = fn
d141 1
a141 1
    val appi : ((int * Word8.word) -> unit) -> (Word8Array.array * int * int General.option) -> unit = fn
d143 3
a145 3
    val copy : {di: int, dst: Word8Array.array, len: int General.option, si: int, src: Word8Array.array} -> unit = fn
    val copyVec : {di: int, dst: Word8Array.array, len: int General.option, si: int, src: string} -> unit = fn
    val extract : (Word8Array.array * int * int General.option) -> string = fn
d147 1
a147 1
    val foldli : ((int * Word8.word * 'a) -> 'a) -> 'a -> (Word8Array.array * int * int General.option) -> 'a = fn
d149 1
a149 1
    val foldri : ((int * Word8.word * 'a) -> 'a) -> 'a -> (Word8Array.array * int * int General.option) -> 'a = fn
d154 1
a154 1
    val modifyi : ((int * Word8.word) -> Word8.word) -> (Word8Array.array * int * int General.option) -> unit = fn
d216 2
a217 2
    val RD : {block: (unit -> unit) General.option, canInput: (unit -> bool) General.option, chunkSize: int, close: unit -> unit, endPos: unit -> int, getPos: unit -> int, ioDesc: file_desc(hidden) General.option, name: string, readArr: ({buf: BinPrimIO.array, i: int, sz: int General.option} -> int) General.option, readArrNB: ({buf: BinPrimIO.array, i: int, sz: int General.option} -> int General.option) General.option, readVec: (int -> string) General.option, readVecNB: (int -> string General.option) General.option, setPos: int -> unit} -> BinPrimIO.reader
    val WR : {block: (unit -> unit) General.option, canOutput: (unit -> bool) General.option, chunkSize: int, close: unit -> unit, endPos: unit -> int, getPos: unit -> int, ioDesc: file_desc(hidden) General.option, name: string, setPos: int -> unit, writeArr: ({buf: BinPrimIO.array, i: int, sz: int General.option} -> int) General.option, writeArrNB: ({buf: BinPrimIO.array, i: int, sz: int General.option} -> int General.option) General.option, writeVec: ({buf: string, i: int, sz: int General.option} -> int) General.option, writeVecNB: ({buf: string, i: int, sz: int General.option} -> int General.option) General.option} -> BinPrimIO.writer
d220 1
a220 1
    val compare : (int * int) -> General.order = fn
d227 1
a227 1
val f : {buf: BinPrimIO.array, i: int, sz: int General.option} -> int General.option = fn
d238 1
a238 1
val x : int General.option = SOME 9
@


1.5
log
@stringcvt->string_cvt
@
text
@d166 1
@


1.4
log
@updating answer file.
@
text
@d44 4
a47 3
Compiling basis.stringcvt
Compiling basis.__pre_char
Compiling basis.__stringcvt
@


1.3
log
@The list of files loaded has changed due to new Timer implementation.
@
text
@d161 3
a165 3
Compiling basis.__charvector
Compiling basis.__chararray
Compiling basis.__position
d198 4
d203 1
a203 1
Compiling unix.__primio
d214 2
a215 2
    val RD : {block: (unit -> unit) General.option, canInput: (unit -> bool) General.option, chunkSize: int, close: unit -> unit, endPos: unit -> int, getPos: unit -> int, ioDesc: PrimIO.file_desc General.option, name: string, readArr: ({buf: BinPrimIO.array, i: int, sz: int General.option} -> int) General.option, readArrNB: ({buf: BinPrimIO.array, i: int, sz: int General.option} -> int General.option) General.option, readVec: (int -> string) General.option, readVecNB: (int -> string General.option) General.option, setPos: int -> unit} -> BinPrimIO.reader
    val WR : {block: (unit -> unit) General.option, canOutput: (unit -> bool) General.option, chunkSize: int, close: unit -> unit, endPos: unit -> int, getPos: unit -> int, ioDesc: PrimIO.file_desc General.option, name: string, setPos: int -> unit, writeArr: ({buf: BinPrimIO.array, i: int, sz: int General.option} -> int) General.option, writeArrNB: ({buf: BinPrimIO.array, i: int, sz: int General.option} -> int General.option) General.option, writeVec: ({buf: string, i: int, sz: int General.option} -> int) General.option, writeVecNB: ({buf: string, i: int, sz: int General.option} -> int General.option) General.option} -> BinPrimIO.writer
a217 34
    val compare : (int * int) -> General.order = fn
  end
structure PrimIO =
  struct
    type bin_reader = reader
    type bin_writer = writer
    eqtype file_desc = file_desc
    type text_reader = reader
    type text_writer = writer
    val mkReader : {fd: PrimIO.file_desc, initialBlockMode: bool, initialPos: int, name: string} -> BinPrimIO.reader = fn
    val mkWriter : {blocksize: int, fd: PrimIO.file_desc, initialBlockMode: bool, initialPos: int, name: string, size: int} -> BinPrimIO.writer = fn
    val openApp : string -> BinPrimIO.writer = fn
    val openRd : string -> BinPrimIO.reader = fn
    val openWr : string -> BinPrimIO.writer = fn
    val stdErr : BinPrimIO.writer = WR {block=NONE, canOutput=NONE, chunkSize=1, close=fn, endPos=fn, getPos=fn, ioDesc=NONE, name="<stdErr>", setPos=fn, writeArr=SOME fn, writeArrNB=SOME fn, writeVec=SOME fn, writeVecNB=SOME fn}
    val stdIn : BinPrimIO.reader = RD {block=NONE, canInput=SOME fn, chunkSize=8192, close=fn, endPos=fn, getPos=fn, ioDesc=NONE, name="<stdIn>", readArr=SOME fn, readArrNB=SOME fn, readVec=SOME fn, readVecNB=SOME fn, setPos=fn}
    val stdOut : BinPrimIO.writer = WR {block=NONE, canOutput=NONE, chunkSize=8192, close=fn, endPos=fn, getPos=fn, ioDesc=NONE, name="<stdOut>", setPos=fn, writeArr=SOME fn, writeArrNB=SOME fn, writeVec=SOME fn, writeVecNB=SOME fn}
    val translateIn : 'a -> 'b = fn
    val translateOut : 'a -> 'b = fn
  end
structure TextPrimIO =
  struct
    eqtype array = array
    eqtype elem = char
    eqtype pos = int
    datatype reader =
      RD of {block: (unit -> unit) option, canInput: (unit -> bool) option, chunkSize: int, close: unit -> unit, endPos: unit -> pos, getPos: unit -> pos, ioDesc: file_desc option, name: string, readArr: ({buf: array, i: int, sz: int option} -> int) option, readArrNB: ({buf: array, i: int, sz: int option} -> int option) option, readVec: (int -> vector) option, readVecNB: (int -> vector option) option, setPos: pos -> unit}
    eqtype vector = string
    datatype writer =
      WR of {block: (unit -> unit) option, canOutput: (unit -> bool) option, chunkSize: int, close: unit -> unit, endPos: unit -> pos, getPos: unit -> pos, ioDesc: file_desc option, name: string, setPos: pos -> unit, writeArr: ({buf: array, i: int, sz: int option} -> int) option, writeArrNB: ({buf: array, i: int, sz: int option} -> int option) option, writeVec: ({buf: vector, i: int, sz: int option} -> int) option, writeVecNB: ({buf: vector, i: int, sz: int option} -> int option) option}
    val RD : {block: (unit -> unit) General.option, canInput: (unit -> bool) General.option, chunkSize: int, close: unit -> unit, endPos: unit -> int, getPos: unit -> int, ioDesc: PrimIO.file_desc General.option, name: string, readArr: ({buf: TextPrimIO.array, i: int, sz: int General.option} -> int) General.option, readArrNB: ({buf: TextPrimIO.array, i: int, sz: int General.option} -> int General.option) General.option, readVec: (int -> string) General.option, readVecNB: (int -> string General.option) General.option, setPos: int -> unit} -> PrimIO.text_reader
    val WR : {block: (unit -> unit) General.option, canOutput: (unit -> bool) General.option, chunkSize: int, close: unit -> unit, endPos: unit -> int, getPos: unit -> int, ioDesc: PrimIO.file_desc General.option, name: string, setPos: int -> unit, writeArr: ({buf: TextPrimIO.array, i: int, sz: int General.option} -> int) General.option, writeArrNB: ({buf: TextPrimIO.array, i: int, sz: int General.option} -> int General.option) General.option, writeVec: ({buf: string, i: int, sz: int General.option} -> int) General.option, writeVecNB: ({buf: string, i: int, sz: int General.option} -> int General.option) General.option} -> PrimIO.text_writer
    val augmentReader : PrimIO.text_reader -> PrimIO.text_reader = fn
    val augmentWriter : PrimIO.text_writer -> PrimIO.text_writer = fn
@


1.2
log
@recompile to take into account system changes.
@
text
@d166 7
@


1.1
log
@new unit
Answer file for test prim_io_3.sml.
@
text
@a177 2
Compiling unix._os_file_sys
Compiling unix.__os_file_sys
d181 2
@
