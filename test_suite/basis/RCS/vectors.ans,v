head	1.12;
access;
symbols
	MLWorks_21c0_1999_03_25:1.12
	MLWorks_20c1_1998_08_20:1.12
	MLWorks_20c0_1998_08_04:1.12
	MLWorks_20b2c2_1998_06_19:1.12
	MLWorks_20b2_Windows_1998_06_12:1.12
	MLWorks_20b1c1_1998_05_07:1.12
	MLWorks_20b0_1998_04_07:1.12
	MLWorks_20b0_1998_03_20:1.12
	MLWorks_20m2_1998_02_16:1.12
	MLWorks_20m1_1997_10_23:1.11
	MLWorks_11r1:1.9.5.1.1.1.1
	MLWorks_11c0_1997_09_09:1.9.5.1.1.1
	MLWorks_10r3:1.9.5.1.3
	MLWorks_10r2_551:1.9.5.1.2
	MLWorks_11:1.9.5.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.9.5.1
	MLWorks_20m0_1997_06_20:1.10
	MLWorks_1_0_r2c2_1997_06_14:1.9.5.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.9.5.1
	MLWorks_1_0_r2c1_1997_05_12:1.9.5
	MLWorks_BugFix_1997_04_24:1.9
	MLWorks_1_0_r2_Win32_1997_04_11:1.9
	MLWorks_1_0_r2_Unix_1997_04_04:1.9
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.9.3.1.1
	MLWorks_gui_1996_12_18:1.9.4
	MLWorks_1_0_Win32_1996_12_17:1.9.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.9.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.9.1.1
	MLWorks_1_0_Irix_1996_11_28:1.9.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.9.2
	MLWorks_1_0_Unix_1996_11_14:1.9.1
	MLWorks_Open_Beta2_1996_10_11:1.8.3
	MLWorks_License_dev:1.8.2
	MLWorks_1_open_beta_1996_09_13:1.8.1
	MLWorks_Open_Beta_1996_08_22:1.6
	MLWorks_Beta_1996_07_02:1.3
	MLWorks_Beta_1996_06_07:1.3
	MLWorks_Beta_1996_06_06:1.3
	MLWorks_Beta_1996_06_05:1.3
	MLWorks_Beta_1996_06_03:1.2
	MLWorks_Beta_1996_05_31:1.2
	MLWorks_Beta_1996_05_30:1.2;
locks; strict;
comment	@# @;


1.12
date	97.11.25.19.26.41;	author daveb;	state Exp;
branches;
next	1.11;

1.11
date	97.08.08.16.34.54;	author brucem;	state Exp;
branches;
next	1.10;

1.10
date	97.05.28.16.18.18;	author jont;	state Exp;
branches;
next	1.9;

1.9
date	96.10.22.13.29.53;	author jont;	state Exp;
branches
	1.9.1.1
	1.9.2.1
	1.9.3.1
	1.9.4.1
	1.9.5.1;
next	1.8;

1.8
date	96.09.09.11.14.03;	author io;	state Exp;
branches
	1.8.1.1
	1.8.2.1
	1.8.3.1;
next	1.7;

1.7
date	96.09.07.00.02.27;	author io;	state Exp;
branches;
next	1.6;

1.6
date	96.08.14.12.11.50;	author io;	state Exp;
branches;
next	1.5;

1.5
date	96.07.15.04.52.55;	author io;	state Exp;
branches;
next	1.4;

1.4
date	96.07.04.18.32.44;	author andreww;	state Exp;
branches;
next	1.3;

1.3
date	96.06.05.02.24.15;	author io;	state Exp;
branches;
next	1.2;

1.2
date	96.05.23.08.54.56;	author matthew;	state Exp;
branches;
next	1.1;

1.1
date	96.05.22.15.27.13;	author matthew;	state Exp;
branches;
next	;

1.8.1.1
date	96.09.13.11.37.42;	author hope;	state Exp;
branches;
next	;

1.8.2.1
date	96.10.07.16.28.59;	author hope;	state Exp;
branches;
next	;

1.8.3.1
date	96.10.17.11.49.47;	author hope;	state Exp;
branches;
next	;

1.9.1.1
date	96.11.14.13.17.10;	author hope;	state Exp;
branches
	1.9.1.1.1.1;
next	;

1.9.1.1.1.1
date	96.11.28.15.27.39;	author hope;	state Exp;
branches;
next	;

1.9.2.1
date	96.11.22.18.34.58;	author hope;	state Exp;
branches;
next	;

1.9.3.1
date	96.12.17.18.13.55;	author hope;	state Exp;
branches
	1.9.3.1.1.1;
next	;

1.9.3.1.1.1
date	97.02.24.12.06.47;	author hope;	state Exp;
branches;
next	;

1.9.4.1
date	96.12.18.10.08.54;	author hope;	state Exp;
branches;
next	;

1.9.5.1
date	97.05.12.11.07.27;	author hope;	state Exp;
branches
	1.9.5.1.1.1
	1.9.5.1.2.1
	1.9.5.1.3.1;
next	;

1.9.5.1.1.1
date	97.07.28.18.50.29;	author daveb;	state Exp;
branches
	1.9.5.1.1.1.1.1;
next	;

1.9.5.1.1.1.1.1
date	97.10.07.12.14.34;	author jkbrook;	state Exp;
branches;
next	;

1.9.5.1.2.1
date	97.09.08.17.42.17;	author daveb;	state Exp;
branches;
next	;

1.9.5.1.3.1
date	97.09.09.14.41.43;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
New test
@


1.12
log
@[Bug #30323]
@
text
@infix 1 seq
val seq : ('a * 'b) -> 'b = fn
val check : bool -> string = fn
val check' : (unit -> bool) -> string = fn
val range : (int * int) -> (int -> bool) -> bool = fn
val checkrange : (int * int) -> (int -> bool) -> string = fn
infix 0 ==
val == : (''a vector * ''a vector) -> bool = fn
val a : int vector = #V[0, 1, 2, 3, 4, 5, 6]
val add1 : int -> int = fn
val addi : (int * int) -> int = fn
val b : int vector = #V[44, 55, 66]
val c : int vector = #V[0, 1, 2, 3, 4, 5, 6]
val d : int vector = #V[0, 1, 2, 3, 4, 5, 6, 0, 1, 2, ..]
val e : int vector = #V[0, 1, 2, 3, 4, 5, 6, 0, 1, 2, ..]
val f : int vector = #V[44, 55, 66]
val test1 : string = "OK"
val test2 : string = "OK"
val test3 : string = "OK"
val test4a : string = "OK"
val test4b : string = "OK"
val test4c : string = "OK"
val test5 : string = "OK"
val test6a : string = "OK"
val test6b : string = "OK"
val test6c : string = "OK"
val test7 : string = "OK"
val test8 : string = "OK"
val test9 : string = "OK"
val test9a : string = "OK"
val test9b : string = "OK"
val test9c : string = "OK"
val test9d : string = "OK"
val test9e : string = "OK"
val test9f : string = "OK"
val test9g : string = "OK"
val test9h : string = "OK"
val test9i : string = "OK"
val testAa : string = "OK"
val testAb : string = "OK"
val testAc : string = "OK"
val testAd : string = "OK"
val testAe : string = "OK"
val testAf : string = "OKEXN"
val testAga : string = "OK"
val testAgb : string = "OKEXN"
val testAh : string = "OK"
val testAi : string = "OK"
val testAj : string = "OKEXN"
val testAk : string = "OK"
val testAl : string = "OKEXN"
val testBa : string = "OK"
val v : int vector = #V[0, 1, 2, 3, 4, 5, 6, 7]
@


1.11
log
@[Bug #30086]
Add map and mapi tests.
@
text
@a2 2
structure Int = struct ... end
structure Vector = struct ... end
@


1.10
log
@[Bug #30090]
Remove uses of MLWorks.IO
@
text
@a0 34
val it : unit = ()
structure Int =
  struct
    eqtype int = int
    val * : (int * int) -> int = fn
    val + : (int * int) -> int = fn
    val - : (int * int) -> int = fn
    val < : (int * int) -> bool = fn
    val <= : (int * int) -> bool = fn
    val > : (int * int) -> bool = fn
    val >= : (int * int) -> bool = fn
    val abs : int -> int = fn
    val compare : (int * int) -> order = fn
    val div : (int * int) -> int = fn
    val fmt : radix(hidden) -> int -> string = fn
    val fromInt : int -> int = fn
    val fromLarge : MLWorks.Internal.Types.int32 -> int = fn
    val fromString : string -> int option = fn
    val max : (int * int) -> int = fn
    val maxInt : int option = SOME 536870911
    val min : (int * int) -> int = fn
    val minInt : int option = SOME ~536870912
    val mod : (int * int) -> int = fn
    val precision : int option = SOME 30
    val quot : (int * int) -> int = fn
    val rem : (int * int) -> int = fn
    val sameSign : (int * int) -> bool = fn
    val scan : radix(hidden) -> ('a -> (char * 'a) option) -> 'a -> (int * 'a) option = fn
    val sign : int -> int = fn
    val toInt : int -> int = fn
    val toLarge : int -> MLWorks.Internal.Types.int32 = fn
    val toString : int -> string = fn
    val ~ : int -> int = fn
  end
d3 2
a8 18
val it : unit = ()
structure Vector =
  struct
    eqtype 'a vector = 'a vector
    val app : ('a -> unit) -> 'a vector -> unit = fn
    val appi : ((int * 'a) -> unit) -> ('a vector * int * int option) -> unit = fn
    val concat : 'a vector list -> 'a vector = fn
    val extract : ('a vector * int * int option) -> 'a vector = fn
    val foldl : (('a * 'b) -> 'b) -> 'b -> 'a vector -> 'b = fn
    val foldli : ((int * 'a * 'b) -> 'b) -> 'b -> ('a vector * int * int option) -> 'b = fn
    val foldr : (('a * 'b) -> 'b) -> 'b -> 'a vector -> 'b = fn
    val foldri : ((int * 'a * 'b) -> 'b) -> 'b -> ('a vector * int * int option) -> 'b = fn
    val fromList : 'a list -> 'a vector = fn
    val length : 'a vector -> int = fn
    val maxLen : int = 4194299
    val sub : ('a vector * int) -> 'a = fn
    val tabulate : (int * (int -> 'a)) -> 'a vector = fn
  end
d12 2
d41 15
@


1.9
log
@Remove references to toplevel
@
text
@a35 2
val flush_out : MLWorks.IO.outstream -> unit = fn
val output : (MLWorks.IO.outstream * string) -> unit = fn
a36 2
val std_out : MLWorks.IO.outstream = FLEXOUT(FLEXOUTSTREAM(ref(RIGIDOUTSTREAM {close_out=fn, closed_out=fn, flush_out=fn, output=fn})))
val say : string -> unit = fn
@


1.9.5.1
log
@branched from 1.9
@
text
@@


1.9.5.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@@


1.9.5.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@@


1.9.5.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@@


1.9.5.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@


1.9.4.1
log
@branched from 1.9
@
text
@@


1.9.3.1
log
@branched from 1.9
@
text
@@


1.9.3.1.1.1
log
@branched from 1.9.3.1
@
text
@@


1.9.2.1
log
@branched from 1.9
@
text
@@


1.9.1.1
log
@branched from 1.9
@
text
@@


1.9.1.1.1.1
log
@branched from 1.9.1.1
@
text
@@


1.8
log
@remove banner
@
text
@a1 1
val it : unit = ()
@


1.8.3.1
log
@branched from 1.8
@
text
@@


1.8.2.1
log
@branched from 1.8
@
text
@@


1.8.1.1
log
@branched from 1.8
@
text
@@


1.7
log
@updating for commercial version flyer
@
text
@a0 2
commercial version may be purchased directly from Harlequin.

@


1.6
log
@switch off Compiling messages...
@
text
@d1 2
@


1.5
log
@updating for toplevel changes
@
text
@a1 1
Compiling basis.toplevel
a2 8
Compiling basis.string_cvt
Compiling basis.__pre_basis
Compiling basis.__pre_string_cvt
Compiling basis.__string_cvt
Compiling basis.__preinteger
Compiling basis.__preint32
Compiling basis.integer
Compiling basis.__integer
a46 6
Compiling basis.vector
Compiling basis.general
Compiling basis.__general
Compiling basis.list
Compiling basis.__list
Compiling basis.__vector
@


1.4
log
@updating.
@
text
@d65 10
a74 10
    val app : ('a -> unit) -> 'a Vector.vector -> unit = fn
    val appi : ((int * 'a) -> unit) -> ('a Vector.vector * int * int option) -> unit = fn
    val concat : 'a Vector.vector list -> 'a Vector.vector = fn
    val extract : ('a Vector.vector * int * int option) -> 'a Vector.vector = fn
    val foldl : (('a * 'b) -> 'b) -> 'b -> 'a Vector.vector -> 'b = fn
    val foldli : ((int * 'a * 'b) -> 'b) -> 'b -> ('a Vector.vector * int * int option) -> 'b = fn
    val foldr : (('a * 'b) -> 'b) -> 'b -> 'a Vector.vector -> 'b = fn
    val foldri : ((int * 'a * 'b) -> 'b) -> 'b -> ('a Vector.vector * int * int option) -> 'b = fn
    val fromList : 'a list -> 'a Vector.vector = fn
    val length : 'a Vector.vector -> int = fn
d76 2
a77 2
    val sub : ('a Vector.vector * int) -> 'a = fn
    val tabulate : (int * (int -> 'a)) -> 'a Vector.vector = fn
d80 7
a86 7
val == : (''a Vector.vector * ''a Vector.vector) -> bool = fn
val a : int Vector.vector = #V[0, 1, 2, 3, 4, 5, 6]
val b : int Vector.vector = #V[44, 55, 66]
val c : int Vector.vector = #V[0, 1, 2, 3, 4, 5, 6]
val d : int Vector.vector = #V[0, 1, 2, 3, 4, 5, 6, 0, 1, 2, ..]
val e : int Vector.vector = #V[0, 1, 2, 3, 4, 5, 6, 0, 1, 2, ..]
val f : int Vector.vector = #V[44, 55, 66]
@


1.3
log
@stringcvt->string_cvt
@
text
@a1 2
Compiling basis.general
Compiling basis.__general
a2 31
structure TopLevel =
  struct
    datatype 'a option =
      NONE |
      SOME of 'a
    datatype order =
      EQUAL |
      GREATER |
      LESS
    exception Domain
    val EQUAL : order
    exception Fail of string
    val GREATER : order
    val LESS : order
    val NONE : 'a option
    val SOME : 'a -> 'a option
  end
datatype 'a option =
  NONE |
  SOME of 'a
datatype order =
  EQUAL |
  GREATER |
  LESS
exception Domain
val EQUAL : order
exception Fail of string
val GREATER : order
val LESS : order
val NONE : 'a option
val SOME : 'a -> 'a option
d57 2
@


1.2
log
@Fixing bungle
@
text
@d37 4
a40 3
Compiling basis.stringcvt
Compiling basis.__pre_char
Compiling basis.__stringcvt
@


1.1
log
@new unit
New test
@
text
@a1 17
val show_mach : bool -> unit = fn
val show_absyn : bool -> unit = fn
val show_lamb : bool -> unit = fn
val show_unopt_lamb : bool -> unit = fn
val show_mir : bool -> unit = fn
val show_opt_mir : bool -> unit = fn
val alldebug : bool -> unit = fn
val debug : bool -> unit = fn
val timeit : ('a -> 'b) -> 'a -> 'b = fn
val don : ('a -> 'b) -> int -> 'a -> 'b = fn
val timen : ('a -> 'b) -> int -> 'a -> 'b = fn
val app : ('a -> 'b) -> 'a list -> unit = fn
val make : string -> unit = fn
val break : string -> unit = fn
val f : 'a -> int = fn
val it : unit = ()
val it : unit = ()
d114 2
a115 2
val d : int Vector.vector = #V[0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1]
val e : int Vector.vector = #V[0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 44, 55, 66, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1]
@
