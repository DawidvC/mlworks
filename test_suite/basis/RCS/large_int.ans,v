head	1.2;
access;
symbols
	MLWorks_21c0_1999_03_25:1.2
	MLWorks_20c1_1998_08_20:1.2
	MLWorks_20c0_1998_08_04:1.2
	MLWorks_20b2c2_1998_06_19:1.2
	MLWorks_20b2_Windows_1998_06_12:1.2
	MLWorks_20b1c1_1998_05_07:1.2
	MLWorks_20b0_1998_04_07:1.2
	MLWorks_20b0_1998_03_20:1.2
	MLWorks_20m2_1998_02_16:1.2
	MLWorks_20m1_1997_10_23:1.1
	MLWorks_20m0_1997_06_20:1.1;
locks; strict;
comment	@# @;


1.2
date	97.11.25.19.19.31;	author daveb;	state Exp;
branches;
next	1.1;

1.1
date	97.05.23.12.38.48;	author jkbrook;	state Exp;
branches;
next	;


desc
@new unit
Answer file for large_int.sml
@


1.2
log
@[Bug #30323]
@
text
@val it : Int32.int = 3
@


1.1
log
@new unit
Answer file for large_int.sml
@
text
@d1 1
a1 35
val it : unit = ()
structure LargeInt =
  struct
    eqtype int = int32
    val * : (LargeInt.int * LargeInt.int) -> LargeInt.int = fn
    val + : (LargeInt.int * LargeInt.int) -> LargeInt.int = fn
    val - : (LargeInt.int * LargeInt.int) -> LargeInt.int = fn
    val < : (LargeInt.int * LargeInt.int) -> bool = fn
    val <= : (LargeInt.int * LargeInt.int) -> bool = fn
    val > : (LargeInt.int * LargeInt.int) -> bool = fn
    val >= : (LargeInt.int * LargeInt.int) -> bool = fn
    val abs : LargeInt.int -> LargeInt.int = fn
    val compare : (LargeInt.int * LargeInt.int) -> order = fn
    val div : (LargeInt.int * LargeInt.int) -> LargeInt.int = fn
    val fmt : radix(hidden) -> LargeInt.int -> string = fn
    val fromInt : int -> LargeInt.int = fn
    val fromLarge : LargeInt.int -> LargeInt.int = fn
    val fromString : string -> LargeInt.int option = fn
    val max : (LargeInt.int * LargeInt.int) -> LargeInt.int = fn
    val maxInt : LargeInt.int option = SOME 2147483647
    val min : (LargeInt.int * LargeInt.int) -> LargeInt.int = fn
    val minInt : LargeInt.int option = SOME ~2147483648
    val mod : (LargeInt.int * LargeInt.int) -> LargeInt.int = fn
    val precision : int option = SOME 32
    val quot : (LargeInt.int * LargeInt.int) -> LargeInt.int = fn
    val rem : (LargeInt.int * LargeInt.int) -> LargeInt.int = fn
    val sameSign : (LargeInt.int * LargeInt.int) -> bool = fn
    val scan : radix(hidden) -> ('a -> (char * 'a) option) -> 'a -> (LargeInt.int * 'a) option = fn
    val sign : LargeInt.int -> int = fn
    val toInt : LargeInt.int -> int = fn
    val toLarge : LargeInt.int -> LargeInt.int = fn
    val toString : LargeInt.int -> string = fn
    val ~ : LargeInt.int -> LargeInt.int = fn
  end
val it : LargeInt.int = 3
@
