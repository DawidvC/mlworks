head	1.6;
access;
symbols
	MLWorks_21c0_1999_03_25:1.6
	MLWorks_20c1_1998_08_20:1.6
	MLWorks_20c0_1998_08_04:1.6
	MLWorks_20b2c2_1998_06_19:1.6
	MLWorks_20b2_Windows_1998_06_12:1.6
	MLWorks_20b1c1_1998_05_07:1.6
	MLWorks_20b0_1998_04_07:1.6
	MLWorks_20b0_1998_03_20:1.6
	MLWorks_20m2_1998_02_16:1.6
	MLWorks_20m1_1997_10_23:1.5
	MLWorks_11r1:1.4.5.1.1.1.1
	MLWorks_11c0_1997_09_09:1.4.5.1.1.1
	MLWorks_10r3:1.4.5.1.3
	MLWorks_10r2_551:1.4.5.1.2
	MLWorks_11:1.4.5.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.4.5.1
	MLWorks_20m0_1997_06_20:1.5
	MLWorks_1_0_r2c2_1997_06_14:1.4.5.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.4.5.1
	MLWorks_1_0_r2c1_1997_05_12:1.4.5
	MLWorks_BugFix_1997_04_24:1.4
	MLWorks_1_0_r2_Win32_1997_04_11:1.4
	MLWorks_1_0_r2_Unix_1997_04_04:1.4
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.4.3.1.1
	MLWorks_gui_1996_12_18:1.4.4
	MLWorks_1_0_Win32_1996_12_17:1.4.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.4.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.4.1.1
	MLWorks_1_0_Irix_1996_11_28:1.4.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.4.2
	MLWorks_1_0_Unix_1996_11_14:1.4.1
	MLWorks_Open_Beta2_1996_10_11:1.2.3
	MLWorks_License_dev:1.2.2
	MLWorks_1_open_beta_1996_09_13:1.2.1
	MLWorks_Open_Beta_1996_08_22:1.2
	MLWorks_Beta_1996_07_02:1.2
	MLWorks_Beta_1996_06_07:1.2
	MLWorks_Beta_1996_06_06:1.2
	MLWorks_Beta_1996_06_05:1.2
	MLWorks_Beta_1996_06_03:1.1
	MLWorks_Beta_1996_05_31:1.1
	MLWorks_Beta_1996_05_30:1.1;
locks; strict;
comment	@ *  @;


1.6
date	97.11.21.10.51.00;	author daveb;	state Exp;
branches;
next	1.5;

1.5
date	97.05.28.11.26.30;	author jont;	state Exp;
branches;
next	1.4;

1.4
date	96.11.06.12.06.13;	author matthew;	state Exp;
branches
	1.4.1.1
	1.4.2.1
	1.4.3.1
	1.4.4.1
	1.4.5.1;
next	1.3;

1.3
date	96.10.22.13.22.50;	author jont;	state Exp;
branches;
next	1.2;

1.2
date	96.06.04.19.50.54;	author io;	state Exp;
branches
	1.2.1.1
	1.2.2.1
	1.2.3.1;
next	1.1;

1.1
date	96.05.22.14.59.02;	author matthew;	state Exp;
branches;
next	;

1.2.1.1
date	96.09.13.11.37.54;	author hope;	state Exp;
branches;
next	;

1.2.2.1
date	96.10.07.16.29.14;	author hope;	state Exp;
branches;
next	;

1.2.3.1
date	96.10.17.11.50.00;	author hope;	state Exp;
branches;
next	;

1.4.1.1
date	96.11.14.13.17.24;	author hope;	state Exp;
branches
	1.4.1.1.1.1;
next	;

1.4.1.1.1.1
date	96.11.28.15.27.53;	author hope;	state Exp;
branches;
next	;

1.4.2.1
date	96.11.22.18.35.12;	author hope;	state Exp;
branches;
next	;

1.4.3.1
date	96.12.17.18.14.10;	author hope;	state Exp;
branches
	1.4.3.1.1.1;
next	;

1.4.3.1.1.1
date	97.02.24.12.07.04;	author hope;	state Exp;
branches;
next	;

1.4.4.1
date	96.12.18.10.09.09;	author hope;	state Exp;
branches;
next	;

1.4.5.1
date	97.05.12.11.07.42;	author hope;	state Exp;
branches
	1.4.5.1.1.1
	1.4.5.1.2.1
	1.4.5.1.3.1;
next	;

1.4.5.1.1.1
date	97.07.28.18.49.44;	author daveb;	state Exp;
branches
	1.4.5.1.1.1.1.1;
next	;

1.4.5.1.1.1.1.1
date	97.10.07.12.14.08;	author jkbrook;	state Exp;
branches;
next	;

1.4.5.1.2.1
date	97.09.08.17.41.28;	author daveb;	state Exp;
branches;
next	;

1.4.5.1.3.1
date	97.09.09.14.40.56;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
New test
@


1.6
log
@[Bug #30323]
@
text
@(*  ==== Testing ====
 *
 *  Result: OK
 *
 *  Revision Log
 *  ------------
 *  $Log: word2.sml,v $
 *  Revision 1.5  1997/05/28  11:26:30  jont
 *  [Bug #30090]
 *  Remove uses of MLWorks.IO
 *
 *  Revision 1.4  1996/11/06  12:06:13  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
 *  Revision 1.3  1996/10/22  13:22:50  jont
 *  Remove references to toplevel
 *
 *  Revision 1.2  1996/06/04  19:50:54  io
 *  stringcvt->string_cv
 *
 *  Revision 1.1  1996/05/22  14:59:02  matthew
 *  new unit
 *  New test
 *
*)

(* test/word.sml -- some test cases for Word, appropriate for a two's
   complement machine whose Integer.precision = SOME 31 
   PS 1995-03-19, 1995-07-12, 1995-11-06 
   modified for MLWorks Fri May 17 11:19:46 1996
*)   


infix 1 seq
fun e1 seq e2 = e2;
fun check b = if b then "OK" else "WRONG";
fun check' f = (if f () then "OK" else "WRONG") handle _ => "EXN";

fun range (from, to) p = 
    let open Int
    in
	(from > to) orelse (p from) andalso (range (from+1, to) p)
    end;

fun checkrange bounds = check o range bounds;


local 
    (* Isn't this disgusting: *)
    type 'a foo4 = 'a * 'a * 'a * 'a
    type 'a foo5 = 'a * 'a * 'a * 'a * 'a
    val (gt,  lt,  ge,   le) = 
      (op>, op<, op>=, op<=) : (int * int -> bool) foo4
    val (add, sub, mul, idiv, imod) = 
      (op+, op-, op*, op div, op mod) : (int * int -> int) foo5

    open Word;
    val op > = gt and op < = lt and op >= = ge and op <= = le;
    val op + = add and op - = sub and op * = mul 
    and op div = idiv and op mod = imod;
    val i2w = fromInt
    and w2i = toIntX;
in

val test1 = checkrange (0, 1025)
    (fn i => i = w2i (i2w i));

val test3 = checkrange (~1000, 1000) 
    (fn i => i = toIntX (i2w i));

val test5a = checkrange (0,15) 
    (fn i => (i+960) div 2 * 2 + 1
             = w2i (orb (i2w i, i2w 961)));
val test5b = checkrange (0,513)
    (fn i => i = w2i (orb (i2w i, i2w i)));
val test6a = checkrange (0,15) 
    (fn i => i div 2 * 2 = w2i (andb (i2w i, i2w ~2)));
val test6b = checkrange (0,513)
    (fn i => i = w2i (andb (i2w i, i2w i)));
val test7a = checkrange (0,15) 
    (fn i => i+960 = w2i (xorb (i2w i, i2w 960)));
val test7b = checkrange (0, 513)
    (fn i => 0 = w2i (xorb (i2w i, i2w i)));

val test8a = check (~1 = w2i (notb (i2w 0)));
val test8b = check (0 = w2i (notb (i2w ~1)));

(*val maxposint = 1073741823; *)
val maxposint = (* 2 ^ 29 - 1 * as 1 bit taken up by sign *) 536870911
val maxnegint = ~maxposint-1;
fun pwr2 0 = 1 
  | pwr2 n = 2 * pwr2 (n-1);
fun rwp i 0 = i
  | rwp i n = rwp i (n-1) div 2;

val test9a = checkrange (0,28)
    (fn k => pwr2 k = w2i (<< (i2w 1, i2w k)));
val test9b = checkrange (31,65)
    (fn k => 0 = w2i (<< (i2w 1, i2w k)));
val test9c = check (maxnegint = w2i (<< (i2w 1, i2w 29)));
val test9d = checkrange (0, 1025)
    (fn i => 2 * i = w2i (<< (i2w i, i2w 1)));
val test9e = checkrange (0, 1025)
    (fn i => i div 2 = w2i (>> (i2w i, i2w 1)));
val test9f = checkrange (0,65)
    (fn k => rwp maxposint k = w2i (>> (i2w maxposint, i2w k)));
val test9g = checkrange (1,65)
    (fn k => 0 = w2i (<< (i2w 1, i2w (~k))));
val test9h = checkrange (1,65)
    (fn k => 0 = w2i (>> (i2w 1, i2w (~k))));

val test10a = checkrange (1,65)
    (fn k => 0 = w2i (~>> (i2w 1, i2w (~k))));
val test10b = checkrange (1,65)
    (fn k => ~1 = w2i (~>> (i2w ~1, i2w (~k))));
val test10c = checkrange (~513, 513)
    (fn i => i div 2 = toIntX (~>> (i2w i, i2w 1)));
val test10d = checkrange (0,65)
    (fn k => rwp maxnegint k = toIntX (~>> (i2w maxnegint, i2w k)));
local 
    open Word
in
val test11a = check (i2w 256 > i2w 255);
val test11b = check (i2w 0 < i2w ~1);
val test11c = check (i2w maxposint >= i2w maxposint);
val test11d = check (i2w maxnegint >= i2w 127);
val test11e = check (i2w 1 <= i2w 1);
val test11f = check (i2w 0 <= i2w 1);
val test11g = check (i2w 0 < i2w maxposint);
val test11h = check (i2w maxposint < i2w maxnegint);
val test11i = check (i2w maxnegint < i2w ~1);
end;

local 
    open Word
in
val test12a = checkrange(0, 300) (fn k => w2i (i2w k + i2w 17) = add(k, 17));
val test12b = checkrange(0, 300) (fn k => w2i (i2w k - i2w 17) = sub(k, 17));
val test12c = checkrange(0, 300) (fn k => w2i (i2w k * i2w 17) = mul(k, 17));
val test12d = checkrange(0, 300) 
    (fn k => w2i (i2w k div i2w 17) = idiv(k, 17));
val test12e = checkrange(0, 300) 
    (fn k => w2i (i2w k mod i2w 17) = imod(k, 17));
val test12f = checkrange(0, 300) 
    (fn k => w2i (i2w k + i2w maxnegint) = add(k, maxnegint));
val test12g = checkrange(0, 300) 
    (fn k => w2i (i2w maxnegint - i2w k - i2w 1) = sub(maxposint,k));
val test12h = checkrange(0, 300) 
    (fn k => w2i (i2w k * i2w maxnegint) = mul(imod(k, 2), maxnegint));
val test12i = checkrange(0, 300) 
    (fn k => w2i (i2w k * i2w maxposint + i2w k) = mul(imod(k, 2), maxnegint));
val test12j = checkrange(0, 300) 
    (fn k => w2i (i2w k div i2w ~1) = 0);
val test12k = checkrange(0, 300) 
    (fn k => w2i (i2w k mod i2w ~1) = k);
val test12l = check(w2i (i2w maxposint + i2w 1) = maxnegint);
val test12m = check(w2i (i2w maxnegint - i2w 1) = maxposint);
val test12n = check(w2i (i2w ~1 div i2w 2) = maxposint);
val test12o = check(w2i (i2w ~1 mod i2w 2) = 1);
val test12p = check(w2i (i2w ~1 div i2w 100) = idiv(maxposint, 50));
val test12q = check(w2i (i2w ~1 mod i2w 10) = 3);
val test12r = (i2w 17 div i2w 0 seq "WRONG") 
              handle Div => "OK" | _ => "WRONG";
val test12s = (i2w 17 mod i2w 0 seq "WRONG") 
              handle Div => "OK" | _ => "WRONG";

fun chk f (s, r) = 
    check'(fn _ => 
	   case f s of
	       SOME res => res = i2w r
	     | NONE     => false)

fun chkScan fmt = chk (StringCvt.scanString (scan fmt))

val test13a = 
    List.map (chk fromString)
             [("20Af", 8367),
	      (" \n\t20AfGrap", 8367)];

val test13b = 
    List.map (fn s => case fromString s of NONE => "OK" | _ => "WRONG")
	   ["", "-", "~", "+", " \n\t", " \n\t-", " \n\t~", " \n\t+", 
	    "+1", "~1", "-1", "GG"];	    

val test14a = 
    List.map (chkScan StringCvt.DEC)
             [("10789", 10789),
	      (" \n\t10789crap", 10789)];

val test14b = 
    List.map (fn s => case StringCvt.scanString (scan StringCvt.DEC) s 
	              of NONE => "OK" | _ => "WRONG")
	   ["", "-", "~", "+", " \n\t", " \n\t-", " \n\t~", " \n\t+", 
	    "+1", "~1", "-1", "ff"];	    

val test15a = 
    List.map (chkScan StringCvt.BIN)
             [("10010", 18),
	      (" \n\t10010crap", 18)];

val test15b = 
    List.map (fn s => case StringCvt.scanString (scan StringCvt.BIN) s 
	              of NONE => "OK" | _ => "WRONG")
	   ["", "-", "~", "+", " \n\t", " \n\t-", " \n\t~", " \n\t+", 
	    "+1", "~1", "-1", "2", "8", "ff"];

val test16a = 
    List.map (chkScan StringCvt.OCT)
             [("2071", 1081),
	      (" \n\t2071crap", 1081)];

val test16b = 
    List.map (fn s => case StringCvt.scanString (scan StringCvt.OCT) s 
	              of NONE => "OK" | _ => "WRONG")
	   ["", "-", "~", "+", " \n\t", " \n\t-", " \n\t~", " \n\t+", 
	    "+1", "~1", "-1", "8", "ff"];

val test17a = 
    List.map (chkScan StringCvt.HEX)
             [("20Af", 8367),
	      (" \n\t20AfGrap", 8367)];

val test17b = 
    List.map (fn s => case StringCvt.scanString (scan StringCvt.HEX) s 
	              of NONE => "OK" | _ => "WRONG")
	   ["", "-", "~", "+", " \n\t", " \n\t-", " \n\t~", " \n\t+", 
	    "+1", "~1", "-1"];

end;

local 
    fun fromToString i = 
	fromString (toString (fromInt i)) = SOME (fromInt i);

    fun scanFmt radix i = 
	let val w = fromInt i
	    val s = fmt radix w
	in StringCvt.scanString (scan radix) s = SOME w end;

in
val test18 = 
    check'(fn _ => range (0, 1200) fromToString);

val test19 = 
    check'(fn _ => range (0, 1200) (scanFmt StringCvt.BIN));

val test20 = 
    check'(fn _ => range (0, 1200) (scanFmt StringCvt.OCT));

val test21 = 
    check'(fn _ => range (0, 1200) (scanFmt StringCvt.DEC));

val test22 = 
    check'(fn _ => range (0, 1200) (scanFmt StringCvt.HEX));
    
end
end;
@


1.5
log
@[Bug #30090]
Remove uses of MLWorks.IO
@
text
@d8 4
d34 1
a34 1
Shell.Build.loadSource "basis.__int";
a47 3
Shell.Build.loadSource "basis.__string_cvt";
Shell.Build.loadSource "basis.__list";
Shell.Build.loadSource "basis.__word";
@


1.4
log
@[Bug #1728]
__integer becomes __int
@
text
@d8 4
a30 3
val output = MLWorks.IO.output
val std_out = MLWorks.IO.std_out
val flush_out = MLWorks.IO.flush_out
a32 1
fun say s = (output(std_out, s); flush_out std_out);
@


1.4.5.1
log
@branched from 1.4
@
text
@a7 4
 *  Revision 1.4  1996/11/06  12:06:13  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
@


1.4.5.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a7 3
 *  Revision 1.4.5.1  1997/05/12  11:07:42  hope
 *  branched from 1.4
 *
@


1.4.5.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a7 3
 *  Revision 1.4.5.1  1997/05/12  11:07:42  hope
 *  branched from 1.4
 *
@


1.4.5.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a7 3
 *  Revision 1.4.5.1  1997/05/12  11:07:42  hope
 *  branched from 1.4
 *
@


1.4.5.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a7 3
 *  Revision 1.4.5.1.1.1  1997/07/28  18:49:44  daveb
 *  branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.4.4.1
log
@branched from 1.4
@
text
@a7 4
 *  Revision 1.4  1996/11/06  12:06:13  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
@


1.4.3.1
log
@branched from 1.4
@
text
@a7 4
 *  Revision 1.4  1996/11/06  12:06:13  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
@


1.4.3.1.1.1
log
@branched from 1.4.3.1
@
text
@a7 3
 *  Revision 1.4.3.1  1996/12/17  18:14:10  hope
 *  branched from 1.4
 *
@


1.4.2.1
log
@branched from 1.4
@
text
@a7 4
 *  Revision 1.4  1996/11/06  12:06:13  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
@


1.4.1.1
log
@branched from 1.4
@
text
@a7 4
 *  Revision 1.4  1996/11/06  12:06:13  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
@


1.4.1.1.1.1
log
@branched from 1.4.1.1
@
text
@a7 3
 *  Revision 1.4.1.1  1996/11/14  13:17:24  hope
 *  branched from 1.4
 *
@


1.3
log
@Remove references to toplevel
@
text
@d8 3
d26 1
a26 1
Shell.Build.loadSource "basis.__integer";
@


1.2
log
@stringcvt->string_cv
@
text
@d7 4
a10 1
 *  $Log: basis:word2.sml,v $
d22 1
a22 1
Shell.Build.loadSource "basis.toplevel";
@


1.2.3.1
log
@branched from 1.2
@
text
@d7 1
a7 4
 *  $Log: word2.sml,v $
 *  Revision 1.2  1996/06/04  19:50:54  io
 *  stringcvt->string_cv
 *
@


1.2.2.1
log
@branched from 1.2
@
text
@d7 1
a7 4
 *  $Log: word2.sml,v $
 *  Revision 1.2  1996/06/04  19:50:54  io
 *  stringcvt->string_cv
 *
@


1.2.1.1
log
@branched from 1.2
@
text
@d7 1
a7 4
 *  $Log: word2.sml,v $
 *  Revision 1.2  1996/06/04  19:50:54  io
 *  stringcvt->string_cv
 *
@


1.1
log
@new unit
New test
@
text
@d7 5
a11 1
 *  $Log: basis:char.sml,v $
d38 1
a38 1
Shell.Build.loadSource "basis.__stringcvt";
@
