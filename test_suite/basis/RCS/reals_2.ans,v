head	1.4;
access;
symbols
	MLWorks_21c0_1999_03_25:1.4
	MLWorks_20c1_1998_08_20:1.4
	MLWorks_20c0_1998_08_04:1.4
	MLWorks_20b2c2_1998_06_19:1.4
	MLWorks_20b2_Windows_1998_06_12:1.4
	MLWorks_20b1c1_1998_05_07:1.4
	MLWorks_20b0_1998_04_07:1.3
	MLWorks_20b0_1998_03_20:1.3
	MLWorks_20m2_1998_02_16:1.3
	MLWorks_20m1_1997_10_23:1.2
	MLWorks_11r1:1.1.1.1.1.1.1
	MLWorks_11c0_1997_09_09:1.1.1.1.1.1
	MLWorks_10r3:1.1.1.1.3
	MLWorks_10r2_551:1.1.1.1.2
	MLWorks_11:1.1.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.1.1.1
	MLWorks_20m0_1997_06_20:1.2
	MLWorks_1_0_r2c2_1997_06_14:1.1.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.1.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.1.1
	MLWorks_BugFix_1997_04_24:1.1
	MLWorks_1_0_r2_Win32_1997_04_11:1.1
	MLWorks_1_0_r2_Unix_1997_04_04:1.1;
locks; strict;
comment	@# @;


1.4
date	98.04.21.09.28.17;	author mitchell;	state Exp;
branches;
next	1.3;

1.3
date	97.11.25.19.24.24;	author daveb;	state Exp;
branches;
next	1.2;

1.2
date	97.05.28.16.04.18;	author matthew;	state Exp;
branches;
next	1.1;

1.1
date	97.03.06.14.43.29;	author matthew;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.05.12.11.08.33;	author hope;	state Exp;
branches
	1.1.1.1.1.1
	1.1.1.1.2.1
	1.1.1.1.3.1;
next	;

1.1.1.1.1.1
date	97.07.28.18.49.36;	author daveb;	state Exp;
branches
	1.1.1.1.1.1.1.1;
next	;

1.1.1.1.1.1.1.1
date	97.10.07.12.14.59;	author jkbrook;	state Exp;
branches;
next	;

1.1.1.1.2.1
date	97.09.08.17.41.19;	author daveb;	state Exp;
branches;
next	;

1.1.1.1.3.1
date	97.09.09.14.40.46;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
@


1.4
log
@[Bug #30336]
Fix tests to agree with change in spec of toString and fmt
@
text
@val exact : real -> string = fn
val from : string -> real = fn
val opt : 'a option -> 'a = fn
val rep : real -> string = fn
val equal : (real * real) -> bool = fn
val test1 : real -> bool = fn
val test2 : string -> bool = fn
val test_read : string -> (string * string) option = fn
val check_overflow : (unit -> 'a) -> bool = fn
val deccheck : real -> bool = fn
val t1 : bool list = [true, true, true, true, true, true, true, true, true]
val t10 : bool list = [true, true, true, true, true, true, true, true, true, true]
val t2 : bool list = [true, true, true]
val t3 : bool = true
val t4 : bool list = [true, true, true, true, true]
val t5 : bool list = [true, true, true, true, true, true, true, true, true, true]
val t6 : bool list = [true, true, true, true]
val t7 : bool list = [true]
val t8 : bool list = [true, true, true, true, true]
val t9 : bool list = [true, true, true, true, true, true, true]
@


1.3
log
@[Bug #30323]
@
text
@d11 1
a11 1
val t1 : bool list = [true, true, true, true, true, true, true, true, true, true]
d18 1
a18 1
val t7 : bool list = [true, true]
@


1.2
log
@Updating
@
text
@a0 8
val it : unit = ()
val it : unit = ()
structure LargeReal = struct ... end
structure Real = struct ... end
val it : unit = ()
structure String = struct ... end
val it : unit = ()
structure StringCvt = struct ... end
@


1.1
log
@new unit
@
text
@a1 174
structure LargeReal =
  struct
    structure Math =
      struct
        type real = real
        val acos : real -> real = fn
        val asin : real -> real = fn
        val atan : real -> real = fn
        val atan2 : (real * real) -> real = fn
        val cos : real -> real = fn
        val cosh : real -> real = fn
        val e : real = 2.718281828
        val exp : real -> real = fn
        val ln : real -> real = fn
        val log10 : real -> real = fn
        val pi : real = 3.141592654
        val pow : (real * real) -> real = fn
        val sin : real -> real = fn
        val sinh : real -> real = fn
        val sqrt : real -> real = fn
        val tan : real -> real = fn
        val tanh : real -> real = fn
      end
    type real = real
    val != : (real * real) -> bool = fn
    val * : (real * real) -> real = fn
    val *+ : (real * real * real) -> real = fn
    val *- : (real * real * real) -> real = fn
    val + : (real * real) -> real = fn
    val - : (real * real) -> real = fn
    val / : (real * real) -> real = fn
    val < : (real * real) -> bool = fn
    val <= : (real * real) -> bool = fn
    val <> : (real * real) -> bool = fn
    val == : (real * real) -> bool = fn
    val > : (real * real) -> bool = fn
    val >= : (real * real) -> bool = fn
    val ?= : (real * real) -> bool = fn
    val abs : real -> real = fn
    val ceil : real -> int = fn
    val checkFloat : real -> real = fn
    val class : real -> float_class(hidden) = fn
    val compare : (real * real) -> order = fn
    val compareReal : (real * real) -> real_order(hidden) = fn
    val copySign : (real * real) -> real = fn
    val floor : real -> int = fn
    val fmt : realfmt(hidden) -> real -> string = fn
    val fromDecimal : {digits: int list, exp: int, kind: float_class(hidden), sign: bool} -> real = fn
    val fromInt : int -> real = fn
    val fromLarge : rounding_mode(hidden) -> real -> real = fn
    val fromLargeInt : MLWorks.Internal.Types.int32 -> real = fn
    val fromManExp : {exp: int, man: real} -> real = fn
    val fromString : string -> real option = fn
    val isFinite : real -> bool = fn
    val isNan : real -> bool = fn
    val isNormal : real -> bool = fn
    val max : (real * real) -> real = fn
    val maxFinite : real = 1.797693135E308
    val min : (real * real) -> real = fn
    val minNormalPos : real = 2.225073859E~308
    val minPos : real = 4.940656458E~324
    val negInf : real = ~inf
    val nextAfter : (real * real) -> real = fn
    val posInf : real = inf
    val precision : int = 53
    val radix : int = 2
    val realCeil : real -> real = fn
    val realFloor : real -> real = fn
    val realMod : real -> real = fn
    val realTrunc : real -> real = fn
    val rem : (real * real) -> real = fn
    val round : real -> int = fn
    val sameSign : (real * real) -> bool = fn
    val scan : ('a -> (char * 'a) option) -> 'a -> (real * 'a) option = fn
    val sign : real -> int = fn
    val signBit : real -> bool = fn
    val split : real -> {frac: real, whole: real} = fn
    val toDecimal : real -> {digits: int list, exp: int, kind: float_class(hidden), sign: bool} = fn
    val toInt : rounding_mode(hidden) -> real -> int = fn
    val toLarge : real -> real = fn
    val toLargeInt : rounding_mode(hidden) -> real -> MLWorks.Internal.Types.int32 = fn
    val toManExp : real -> {exp: int, man: real} = fn
    val toString : real -> string = fn
    val trunc : real -> int = fn
    val unordered : (real * real) -> bool = fn
    val ~ : real -> real = fn
  end
structure Real =
  struct
    structure Math =
      struct
        type real = real
        val acos : real -> real = fn
        val asin : real -> real = fn
        val atan : real -> real = fn
        val atan2 : (real * real) -> real = fn
        val cos : real -> real = fn
        val cosh : real -> real = fn
        val e : real = 2.718281828
        val exp : real -> real = fn
        val ln : real -> real = fn
        val log10 : real -> real = fn
        val pi : real = 3.141592654
        val pow : (real * real) -> real = fn
        val sin : real -> real = fn
        val sinh : real -> real = fn
        val sqrt : real -> real = fn
        val tan : real -> real = fn
        val tanh : real -> real = fn
      end
    type real = real
    val != : (real * real) -> bool = fn
    val * : (real * real) -> real = fn
    val *+ : (real * real * real) -> real = fn
    val *- : (real * real * real) -> real = fn
    val + : (real * real) -> real = fn
    val - : (real * real) -> real = fn
    val / : (real * real) -> real = fn
    val < : (real * real) -> bool = fn
    val <= : (real * real) -> bool = fn
    val <> : (real * real) -> bool = fn
    val == : (real * real) -> bool = fn
    val > : (real * real) -> bool = fn
    val >= : (real * real) -> bool = fn
    val ?= : (real * real) -> bool = fn
    val abs : real -> real = fn
    val ceil : real -> int = fn
    val checkFloat : real -> real = fn
    val class : real -> float_class(hidden) = fn
    val compare : (real * real) -> order = fn
    val compareReal : (real * real) -> real_order(hidden) = fn
    val copySign : (real * real) -> real = fn
    val floor : real -> int = fn
    val fmt : realfmt(hidden) -> real -> string = fn
    val fromDecimal : {digits: int list, exp: int, kind: float_class(hidden), sign: bool} -> real = fn
    val fromInt : int -> real = fn
    val fromLarge : rounding_mode(hidden) -> real -> real = fn
    val fromLargeInt : MLWorks.Internal.Types.int32 -> real = fn
    val fromManExp : {exp: int, man: real} -> real = fn
    val fromString : string -> real option = fn
    val isFinite : real -> bool = fn
    val isNan : real -> bool = fn
    val isNormal : real -> bool = fn
    val max : (real * real) -> real = fn
    val maxFinite : real = 1.797693135E308
    val min : (real * real) -> real = fn
    val minNormalPos : real = 2.225073859E~308
    val minPos : real = 4.940656458E~324
    val negInf : real = ~inf
    val nextAfter : (real * real) -> real = fn
    val posInf : real = inf
    val precision : int = 53
    val radix : int = 2
    val realCeil : real -> real = fn
    val realFloor : real -> real = fn
    val realMod : real -> real = fn
    val realTrunc : real -> real = fn
    val rem : (real * real) -> real = fn
    val round : real -> int = fn
    val sameSign : (real * real) -> bool = fn
    val scan : ('a -> (char * 'a) option) -> 'a -> (real * 'a) option = fn
    val sign : real -> int = fn
    val signBit : real -> bool = fn
    val split : real -> {frac: real, whole: real} = fn
    val toDecimal : real -> {digits: int list, exp: int, kind: float_class(hidden), sign: bool} = fn
    val toInt : rounding_mode(hidden) -> real -> int = fn
    val toLarge : real -> real = fn
    val toLargeInt : rounding_mode(hidden) -> real -> MLWorks.Internal.Types.int32 = fn
    val toManExp : real -> {exp: int, man: real} = fn
    val toString : real -> string = fn
    val trunc : real -> int = fn
    val unordered : (real * real) -> bool = fn
    val ~ : real -> real = fn
  end
d3 2
a4 67
structure String =
  struct
    structure Char =
      struct
        eqtype char = char
        eqtype string = string
        val < : (char * char) -> bool = fn
        val <= : (char * char) -> bool = fn
        val > : (char * char) -> bool = fn
        val >= : (char * char) -> bool = fn
        val chr : int -> char = fn
        val compare : (char * char) -> order = fn
        val contains : string -> char -> bool = fn
        val fromCString : string -> char option = fn
        val fromString : string -> char option = fn
        val isAlpha : char -> bool = fn
        val isAlphaNum : char -> bool = fn
        val isAscii : char -> bool = fn
        val isCntrl : char -> bool = fn
        val isDigit : char -> bool = fn
        val isGraph : char -> bool = fn
        val isHexDigit : char -> bool = fn
        val isLower : char -> bool = fn
        val isPrint : char -> bool = fn
        val isPunct : char -> bool = fn
        val isSpace : char -> bool = fn
        val isUpper : char -> bool = fn
        val maxChar : char = #"\255"
        val maxOrd : int = 255
        val minChar : char = #"\000"
        val notContains : string -> char -> bool = fn
        val ord : char -> int = fn
        val pred : char -> char = fn
        val scan : ('a -> (char * 'a) option) -> 'a -> (char * 'a) option = fn
        val succ : char -> char = fn
        val toCString : char -> string = fn
        val toLower : char -> char = fn
        val toString : char -> string = fn
        val toUpper : char -> char = fn
      end
    eqtype char = char
    eqtype string = string
    val < : (string * string) -> bool = fn
    val <= : (string * string) -> bool = fn
    val > : (string * string) -> bool = fn
    val >= : (string * string) -> bool = fn
    val ^ : (string * string) -> string = fn
    val collate : ((char * char) -> order) -> (string * string) -> order = fn
    val compare : (string * string) -> order = fn
    val concat : string list -> string = fn
    val explode : string -> char list = fn
    val extract : (string * int * int option) -> string = fn
    val fields : (char -> bool) -> string -> string list = fn
    val fromCString : string -> string option = fn
    val fromString : string -> string option = fn
    val implode : char list -> string = fn
    val isPrefix : string -> string -> bool = fn
    val maxSize : int = 16777195
    val size : string -> int = fn
    val str : char -> string = fn
    val sub : (string * int) -> char = fn
    val substring : (string * int * int) -> string = fn
    val toCString : string -> string = fn
    val toString : string -> string = fn
    val tokens : (char -> bool) -> string -> string list = fn
    val translate : (char -> string) -> string -> string = fn
  end
d6 3
a8 31
structure StringCvt =
  struct
    eqtype cs = int
    datatype radix =
      BIN |
      DEC |
      HEX |
      OCT
    type ('a, 'b) reader = 'b -> ('a * 'b) option
    datatype realfmt =
      EXACT |
      FIX of int option |
      GEN of int option |
      SCI of int option
    val BIN : StringCvt.radix
    val DEC : StringCvt.radix
    val EXACT : StringCvt.realfmt
    val FIX : int option -> StringCvt.realfmt
    val GEN : int option -> StringCvt.realfmt
    val HEX : StringCvt.radix
    val OCT : StringCvt.radix
    val SCI : int option -> StringCvt.realfmt
    val dropl : (char -> bool) -> ('a -> (char * 'a) option) -> 'a -> 'a = fn
    val padLeft : char -> int -> string -> string = fn
    val padRight : char -> int -> string -> string = fn
    val scanList : ((char list -> (char * char list) option) -> char list -> ('a * 'b) option) -> char list -> 'a option = fn
    val scanString : ((int -> (char * int) option) -> int -> ('a * int) option) -> string -> 'a option = fn
    val skipWS : ('a -> (char * 'a) option) -> 'a -> 'a = fn
    val splitl : (char -> bool) -> ('a -> (char * 'a) option) -> 'a -> (string * 'a) = fn
    val takel : (char -> bool) -> ('a -> (char * 'a) option) -> 'a -> string = fn
  end
@


1.1.1.1
log
@branched from 1.1
@
text
@@


1.1.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@@


1.1.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@@


1.1.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@@


1.1.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@
