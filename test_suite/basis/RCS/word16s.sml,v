head	1.5;
access;
symbols
	MLWorks_21c0_1999_03_25:1.5
	MLWorks_20c1_1998_08_20:1.5
	MLWorks_20c0_1998_08_04:1.5
	MLWorks_20b2c2_1998_06_19:1.5
	MLWorks_20b2_Windows_1998_06_12:1.5
	MLWorks_20b1c1_1998_05_07:1.5
	MLWorks_20b0_1998_04_07:1.5
	MLWorks_20b0_1998_03_20:1.5
	MLWorks_20m2_1998_02_16:1.5
	MLWorks_20m1_1997_10_23:1.4
	MLWorks_11r1:1.3.5.1.1.1.1
	MLWorks_11c0_1997_09_09:1.3.5.1.1.1
	MLWorks_10r3:1.3.5.1.3
	MLWorks_10r2_551:1.3.5.1.2
	MLWorks_11:1.3.5.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.3.5.1
	MLWorks_20m0_1997_06_20:1.4
	MLWorks_1_0_r2c2_1997_06_14:1.3.5.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.3.5.1
	MLWorks_1_0_r2c1_1997_05_12:1.3.5
	MLWorks_BugFix_1997_04_24:1.3
	MLWorks_1_0_r2_Win32_1997_04_11:1.3
	MLWorks_1_0_r2_Unix_1997_04_04:1.3
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.3.3.1.1
	MLWorks_gui_1996_12_18:1.3.4
	MLWorks_1_0_Win32_1996_12_17:1.3.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.3.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.3.1.1
	MLWorks_1_0_Irix_1996_11_28:1.3.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.3.2
	MLWorks_1_0_Unix_1996_11_14:1.3.1
	MLWorks_Open_Beta2_1996_10_11:1.1.3
	MLWorks_License_dev:1.1.2
	MLWorks_1_open_beta_1996_09_13:1.1.1
	MLWorks_Open_Beta_1996_08_22:1.1
	MLWorks_Beta_1996_07_02:1.1
	MLWorks_Beta_1996_06_07:1.1
	MLWorks_Beta_1996_06_06:1.1
	MLWorks_Beta_1996_06_05:1.1
	MLWorks_Beta_1996_06_03:1.1
	MLWorks_Beta_1996_05_31:1.1
	MLWorks_Beta_1996_05_30:1.1;
locks; strict;
comment	@ *  @;


1.5
date	97.11.21.15.01.46;	author daveb;	state Exp;
branches;
next	1.4;

1.4
date	97.05.28.11.26.15;	author jont;	state Exp;
branches;
next	1.3;

1.3
date	96.11.06.12.06.02;	author matthew;	state Exp;
branches
	1.3.1.1
	1.3.2.1
	1.3.3.1
	1.3.4.1
	1.3.5.1;
next	1.2;

1.2
date	96.10.22.13.22.37;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	96.05.22.15.03.14;	author matthew;	state Exp;
branches
	1.1.1.1
	1.1.2.1
	1.1.3.1;
next	;

1.1.1.1
date	96.09.13.11.37.39;	author hope;	state Exp;
branches;
next	;

1.1.2.1
date	96.10.07.16.28.55;	author hope;	state Exp;
branches;
next	;

1.1.3.1
date	96.10.17.11.49.43;	author hope;	state Exp;
branches;
next	;

1.3.1.1
date	96.11.14.13.17.07;	author hope;	state Exp;
branches
	1.3.1.1.1.1;
next	;

1.3.1.1.1.1
date	96.11.28.15.27.35;	author hope;	state Exp;
branches;
next	;

1.3.2.1
date	96.11.22.18.34.54;	author hope;	state Exp;
branches;
next	;

1.3.3.1
date	96.12.17.18.13.51;	author hope;	state Exp;
branches
	1.3.3.1.1.1;
next	;

1.3.3.1.1.1
date	97.02.24.12.06.42;	author hope;	state Exp;
branches;
next	;

1.3.4.1
date	96.12.18.10.08.50;	author hope;	state Exp;
branches;
next	;

1.3.5.1
date	97.05.12.11.07.22;	author hope;	state Exp;
branches
	1.3.5.1.1.1
	1.3.5.1.2.1
	1.3.5.1.3.1;
next	;

1.3.5.1.1.1
date	97.07.28.18.50.16;	author daveb;	state Exp;
branches
	1.3.5.1.1.1.1.1;
next	;

1.3.5.1.1.1.1.1
date	97.10.07.12.15.21;	author jkbrook;	state Exp;
branches;
next	;

1.3.5.1.2.1
date	97.09.08.17.42.05;	author daveb;	state Exp;
branches;
next	;

1.3.5.1.3.1
date	97.09.09.14.41.31;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
New test
@


1.5
log
@[Bug #30323]
@
text
@(*  ==== Testing ====
 *
 *  Result: OK
 *
 *  Revision Log
 *  ------------
 *  $Log: word16s.sml,v $
 *  Revision 1.4  1997/05/28  11:26:15  jont
 *  [Bug #30090]
 *  Remove uses of MLWorks.IO
 *
 *  Revision 1.3  1996/11/06  12:06:02  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
 *  Revision 1.2  1996/10/22  13:22:37  jont
 *  Remove references to toplevel
 *
 *  Revision 1.1  1996/05/22  15:03:14  matthew
 *  new unit
 *  New test
 *
*)

(* test/word8.sml -- some test cases for Word8, appropriate for a
   two's complement machine whose Integer.precision = SOME 31 
   PS 1995-02-28 *)


infix 1 seq
fun e1 seq e2 = e2;
fun check b = if b then "OK" else "WRONG";
fun check' f = (if f () then "OK" else "WRONG") handle _ => "EXN";

fun range (from, to) p = 
    let open Int
    in
	(from > to) orelse (p from) andalso (range (from+1, to) p)
    end;

fun checkrange bounds = check o range bounds;

local 
    fun pwr2 0 = 1 
      | pwr2 n = 2 * pwr2 (n-1);
    fun rwp i 0 = i
      | rwp i n = rwp i (n-1) div 2;

    (* Isn't this disgusting: *)
    type 'a foo4 = 'a * 'a * 'a * 'a
    type 'a foo5 = 'a * 'a * 'a * 'a * 'a
    val (gt,  lt,  ge,   le) = 
      (op>, op<, op>=, op<=) : (int * int -> bool) foo4
    val (add, sub, mul, idiv, imod) = 
      (op+, op-, op*, op div, op mod) : (int * int -> int) foo5
    open Word16;
    val op > = gt and op < = lt and op >= = ge and op <= = le;
    val op + = add and op - = sub and op * = mul 
    and op div = idiv and op mod = imod;
    val maxword = 256 * 256
in

fun shift (x,y) = if y > 0 then << (x,Word.fromInt y) else >> (x,Word.fromInt (~y))
fun ashift (x,y) = if y > 0 then << (x,Word.fromInt y) else ~>> (x, Word.fromInt (~y))
val signExtend = toIntX

val test1 = checkrange (0, 255) 
    (fn i => i = toInt (fromInt i));

val test2 = checkrange (~1000, 1000) 
    (fn i => let val r = toInt (fromInt i) 
	     in 0 <= r andalso r < maxword end);

val test3 = checkrange (~128, 127) 
    (fn i => i = signExtend (fromInt i));

val test4 = checkrange (~1000, 1000)
    (fn i => let val r = signExtend (fromInt i) 
	     in ~maxword <= r andalso r < maxword end);

val test5a = checkrange (0,15) 
    (fn i => (i+240) div 2 * 2 + 1
             = toInt (orb (fromInt i, fromInt 241)));
val test5b = checkrange (0,255)
    (fn i => i = toInt (orb (fromInt i, fromInt i)));
val test5c = checkrange (~1000,1000)
    (fn i => let val r = toInt (andb (fromInt 2047, fromInt i)) 
	     in 0 <= r andalso r < maxword end);
val test6a = checkrange (0,15) 
    (fn i => i div 2 * 2 = toInt (andb (fromInt i, fromInt 254)));
val test6b = checkrange (0,255)
    (fn i => i = toInt (andb (fromInt i, fromInt i)));
val test6c = checkrange (~1000,1000)
    (fn i => let val r = toInt (andb (fromInt 2047, fromInt i)) 
	     in 0 <= r andalso r < maxword end);
val test7a = checkrange (0,15) 
    (fn i => i+240 = toInt (xorb (fromInt i, fromInt 240)));
val test7b = checkrange (0, 255)
    (fn i => 0 = toInt (xorb (fromInt i, fromInt i)));
val test7c = checkrange (~1000,1000)
    (fn i => let val r = toInt (xorb (fromInt 0, fromInt i)) 
	     in 0 <= r andalso r < maxword end);
val test8a = check (maxword - 1  = toInt (notb (fromInt 0)));
val test8b = check (0 = toInt (notb (fromInt (maxword - 1))));
val test8c = checkrange (~1000,1000)
    (fn i => let val r = toInt (notb (fromInt i)) 
	     in 0 <= r andalso r < maxword end);
val test9a = checkrange (0,7)
    (fn k => pwr2 k = toInt (shift (fromInt 1, k)));
(*
val test9b = checkrange (8,50)
    (fn k => toInt (shift (fromInt 1, k)) 
             = toInt (shift (fromInt 1, k mod wordSize)));
*)
val test9c = checkrange (~50,50)
    (fn k => let val r = toInt (shift (fromInt 1, k))
	     in 0 <= r andalso r < maxword end);
val test9d = checkrange (0, 127) 
    (fn i => 2 * i = toInt (shift (fromInt i, 1)));
val test9e = checkrange (0, 255)
    (fn i => i div 2 = toInt (shift (fromInt i, ~1)));
val test9f = checkrange (0,7)
    (fn k => rwp 255 k = toInt (shift (fromInt 255, ~k)));

val test10a = checkrange (0,7)
    (fn k => pwr2 k = toInt (ashift (fromInt 1, k)));
(*
val test10b = checkrange (8,50)
    (fn k => toInt (ashift (fromInt 1, k)) 
             = toInt (ashift (fromInt 1, k mod wordSize)));
*)
val test10c = checkrange (~50,50)
    (fn k => let val r = toInt (ashift (fromInt 1, k))
	     in 0 <= r andalso r < maxword end);
val test10d = checkrange (0, 127) 
    (fn i => 2 * i = toInt (ashift (fromInt i, 1)));
val test10e = checkrange (~128, 127)
    (fn i => i div 2 = signExtend (ashift (fromInt i, ~1)));
val test10f = checkrange (0,7)
    (fn k => rwp ~128 k = signExtend (ashift (fromInt ~128, ~k)));

val test11a = check (Word16.>  (fromInt 255, fromInt 254));
val test11b = check (Word16.<  (fromInt 253, fromInt 254));
val test11c = check (Word16.>= (fromInt 128, fromInt 128));
val test11d = check (Word16.>= (fromInt 128, fromInt 127));
val test11e = check (Word16.<= (fromInt 1,   fromInt 1));
val test11f = check (Word16.<= (fromInt 0,   fromInt 1));

val test12a = check (toInt(Word16.+(fromInt   5, fromInt  10)) =  15);
val test12b = check (toInt(Word16.+(fromInt 127, fromInt  11)) = 138);
val test12c = check (toInt(Word16.+(fromInt 65534, fromInt   3)) =   1);
val test12d = check (toInt(Word16.-(fromInt  10, fromInt   3)) =   7);
val test12e = check (toInt(Word16.-(fromInt 138, fromInt  11)) = 127);
val test12f = check (toInt(Word16.-(fromInt   1, fromInt   3)) = 65534);
val test12g = check (toInt(Word16.*(fromInt   5, fromInt  11)) =  55);
val test12h = check (toInt(Word16.*(fromInt   4, fromInt  35)) = 140);
val test12i = check (toInt(Word16.*(fromInt   3, fromInt 32769)) = 32771);
val test12j = check (toInt(Word16.div(fromInt  10, fromInt 3)) =   3);
val test12k = check (toInt(Word16.div(fromInt 255, fromInt 1)) = 255);
val test12l = check (toInt(Word16.div(fromInt 242, fromInt 3)) =  80);
val test12m = check (toInt(Word16.mod(fromInt  10, fromInt 3)) =   1);
val test12n = check (toInt(Word16.mod(fromInt 255, fromInt 1)) =   0);
val test12o = check (toInt(Word16.mod(fromInt 242, fromInt 3)) =   2);
val test12p = (Word16.div(fromInt 0, fromInt maxword) seq "WRONG")
              handle Div => "OK" | _ => "WRONG";
val test12q = (Word16.mod(fromInt 0, fromInt maxword) seq "WRONG")
              handle Div => "OK" | _ => "WRONG";
end;
@


1.4
log
@[Bug #30090]
Remove uses of MLWorks.IO
@
text
@d8 4
d29 1
a29 1
Shell.Build.loadSource "basis.__int";
a41 3

Shell.Build.loadSource "basis.__word16";
Shell.Build.loadSource "basis.__word";
@


1.3
log
@[Bug #1728]
__integer becomes __int
@
text
@d8 4
a25 3
val output = MLWorks.IO.output
val std_out = MLWorks.IO.std_out
val flush_out = MLWorks.IO.flush_out
a27 1
fun say s = (output(std_out, s); flush_out std_out);
@


1.3.5.1
log
@branched from 1.3
@
text
@a7 4
 *  Revision 1.3  1996/11/06  12:06:02  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
@


1.3.5.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a7 3
 *  Revision 1.3.5.1  1997/05/12  11:07:22  hope
 *  branched from 1.3
 *
@


1.3.5.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a7 3
 *  Revision 1.3.5.1  1997/05/12  11:07:22  hope
 *  branched from 1.3
 *
@


1.3.5.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a7 3
 *  Revision 1.3.5.1  1997/05/12  11:07:22  hope
 *  branched from 1.3
 *
@


1.3.5.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a7 3
 *  Revision 1.3.5.1.1.1  1997/07/28  18:50:16  daveb
 *  branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.3.4.1
log
@branched from 1.3
@
text
@a7 4
 *  Revision 1.3  1996/11/06  12:06:02  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
@


1.3.3.1
log
@branched from 1.3
@
text
@a7 4
 *  Revision 1.3  1996/11/06  12:06:02  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
@


1.3.3.1.1.1
log
@branched from 1.3.3.1
@
text
@a7 3
 *  Revision 1.3.3.1  1996/12/17  18:13:51  hope
 *  branched from 1.3
 *
@


1.3.2.1
log
@branched from 1.3
@
text
@a7 4
 *  Revision 1.3  1996/11/06  12:06:02  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
@


1.3.1.1
log
@branched from 1.3
@
text
@a7 4
 *  Revision 1.3  1996/11/06  12:06:02  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
@


1.3.1.1.1.1
log
@branched from 1.3.1.1
@
text
@a7 3
 *  Revision 1.3.1.1  1996/11/14  13:17:07  hope
 *  branched from 1.3
 *
@


1.2
log
@Remove references to toplevel
@
text
@d8 3
d21 1
a21 1
Shell.Build.loadSource "basis.__integer";
@


1.1
log
@new unit
New test
@
text
@d7 5
a11 1
 *  $Log: basis:char.sml,v $
a17 1
Shell.Build.loadSource "basis.toplevel";
@


1.1.3.1
log
@branched from 1.1
@
text
@d7 1
a7 5
 *  $Log: word16s.sml,v $
 *  Revision 1.1  1996/05/22  15:03:14  matthew
 *  new unit
 *  New test
 *
@


1.1.2.1
log
@branched from 1.1
@
text
@d7 1
a7 5
 *  $Log: word16s.sml,v $
 *  Revision 1.1  1996/05/22  15:03:14  matthew
 *  new unit
 *  New test
 *
@


1.1.1.1
log
@branched from 1.1
@
text
@d7 1
a7 5
 *  $Log: word16s.sml,v $
 *  Revision 1.1  1996/05/22  15:03:14  matthew
 *  new unit
 *  New test
 *
@
