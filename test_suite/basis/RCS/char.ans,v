head	1.15;
access;
symbols
	MLWorks_21c0_1999_03_25:1.15
	MLWorks_20c1_1998_08_20:1.15
	MLWorks_20c0_1998_08_04:1.15
	MLWorks_20b2c2_1998_06_19:1.15
	MLWorks_20b2_Windows_1998_06_12:1.15
	MLWorks_20b1c1_1998_05_07:1.15
	MLWorks_20b0_1998_04_07:1.15
	MLWorks_20b0_1998_03_20:1.15
	MLWorks_20m2_1998_02_16:1.15
	MLWorks_20m1_1997_10_23:1.14
	MLWorks_11r1:1.12.5.1.1.1.1
	MLWorks_11c0_1997_09_09:1.12.5.1.1.1
	MLWorks_10r3:1.12.5.1.3
	MLWorks_10r2_551:1.12.5.1.2
	MLWorks_11:1.12.5.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.12.5.1
	MLWorks_20m0_1997_06_20:1.13
	MLWorks_1_0_r2c2_1997_06_14:1.12.5.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.12.5.1
	MLWorks_1_0_r2c1_1997_05_12:1.12.5
	MLWorks_BugFix_1997_04_24:1.12
	MLWorks_1_0_r2_Win32_1997_04_11:1.12
	MLWorks_1_0_r2_Unix_1997_04_04:1.12
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.12.3.1.1
	MLWorks_gui_1996_12_18:1.12.4
	MLWorks_1_0_Win32_1996_12_17:1.12.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.12.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.12.1.1
	MLWorks_1_0_Irix_1996_11_28:1.12.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.12.2
	MLWorks_1_0_Unix_1996_11_14:1.12.1
	MLWorks_Open_Beta2_1996_10_11:1.11.2
	MLWorks_License_dev:1.11.1
	MLWorks_1_open_beta_1996_09_13:1.9.1
	MLWorks_Open_Beta_1996_08_22:1.7
	MLWorks_Beta_1996_07_02:1.5
	MLWorks_Beta_1996_06_07:1.4
	MLWorks_Beta_1996_06_06:1.4
	MLWorks_Beta_1996_06_05:1.4
	MLWorks_Beta_1996_06_03:1.3
	MLWorks_Beta_1996_05_31:1.3
	MLWorks_Beta_1996_05_30:1.3;
locks; strict;
comment	@# @;


1.15
date	97.11.25.19.18.21;	author daveb;	state Exp;
branches;
next	1.14;

1.14
date	97.08.05.09.29.22;	author brucem;	state Exp;
branches;
next	1.13;

1.13
date	97.06.06.10.51.01;	author jont;	state Exp;
branches;
next	1.12;

1.12
date	96.10.22.13.27.24;	author jont;	state Exp;
branches
	1.12.1.1
	1.12.2.1
	1.12.3.1
	1.12.4.1
	1.12.5.1;
next	1.11;

1.11
date	96.10.01.13.05.13;	author io;	state Exp;
branches
	1.11.1.1
	1.11.2.1;
next	1.10;

1.10
date	96.09.18.15.17.11;	author io;	state Exp;
branches;
next	1.9;

1.9
date	96.09.09.11.14.00;	author io;	state Exp;
branches
	1.9.1.1;
next	1.8;

1.8
date	96.09.07.00.02.24;	author io;	state Exp;
branches;
next	1.7;

1.7
date	96.08.14.11.16.20;	author io;	state Exp;
branches;
next	1.6;

1.6
date	96.07.04.18.00.24;	author andreww;	state Exp;
branches;
next	1.5;

1.5
date	96.06.25.09.31.24;	author io;	state Exp;
branches;
next	1.4;

1.4
date	96.06.04.23.41.24;	author io;	state Exp;
branches;
next	1.3;

1.3
date	96.05.23.19.06.11;	author io;	state Exp;
branches;
next	1.2;

1.2
date	96.05.23.10.37.18;	author matthew;	state Exp;
branches;
next	1.1;

1.1
date	96.05.16.15.12.10;	author io;	state Exp;
branches;
next	;

1.9.1.1
date	96.09.13.11.38.52;	author hope;	state Exp;
branches;
next	;

1.11.1.1
date	96.10.07.16.30.20;	author hope;	state Exp;
branches;
next	;

1.11.2.1
date	96.10.17.11.50.55;	author hope;	state Exp;
branches;
next	;

1.12.1.1
date	96.11.14.13.18.21;	author hope;	state Exp;
branches
	1.12.1.1.1.1;
next	;

1.12.1.1.1.1
date	96.11.28.15.28.52;	author hope;	state Exp;
branches;
next	;

1.12.2.1
date	96.11.22.18.36.08;	author hope;	state Exp;
branches;
next	;

1.12.3.1
date	96.12.17.18.15.07;	author hope;	state Exp;
branches
	1.12.3.1.1.1;
next	;

1.12.3.1.1.1
date	97.02.24.12.08.07;	author hope;	state Exp;
branches;
next	;

1.12.4.1
date	96.12.18.10.10.05;	author hope;	state Exp;
branches;
next	;

1.12.5.1
date	97.05.12.11.08.47;	author hope;	state Exp;
branches
	1.12.5.1.1.1
	1.12.5.1.2.1
	1.12.5.1.3.1;
next	;

1.12.5.1.1.1
date	97.07.28.18.49.30;	author daveb;	state Exp;
branches
	1.12.5.1.1.1.1.1;
next	;

1.12.5.1.1.1.1.1
date	97.10.07.12.14.55;	author jkbrook;	state Exp;
branches;
next	;

1.12.5.1.2.1
date	97.09.08.17.41.12;	author daveb;	state Exp;
branches;
next	;

1.12.5.1.3.1
date	97.09.09.14.40.39;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
@


1.15
log
@[Bug #30323]
@
text
@test1:OK
test1a:OKEXN
test1c:OKEXN
test1d:OKEXN
test1e:OKEXN
test1f:OK
test1g:OK
test1h:OKEXN
test1i:OKEXN
test2:OK
test3:OK
test4:OK
test5:OK
test6:OK
test7:OK
test8a:OK
test8b:OK
test8c:OK
test8d:OK
test8e:OK
test8f:OK
test8g:OK
test8h:OK
test8i:OK
test8j:OK
test9:OK
test10:OK
test11:OK
test12:OK
test13:OKEXN
test14:OK
test15:OKEXN
test16:OK
test17:OK
test18:OK
test19:OK
test20:OK
test21:OK
val it : unit = ()
@


1.14
log
@[Bug #30004]
Reflect changes in sml file.
@
text
@a0 4
structure Char = struct ... end
structure String = struct ... end
structure General = struct ... end
structure List = struct ... end
@


1.13
log
@New answer now list type in list
@
text
@d1 4
a4 179
val it : unit = ()
structure Char =
  struct
    eqtype char = char
    eqtype string = string
    val < : (char * char) -> bool = fn
    val <= : (char * char) -> bool = fn
    val > : (char * char) -> bool = fn
    val >= : (char * char) -> bool = fn
    val chr : int -> char = fn
    val compare : (char * char) -> order = fn
    val contains : string -> char -> bool = fn
    val fromCString : string -> char option = fn
    val fromString : string -> char option = fn
    val isAlpha : char -> bool = fn
    val isAlphaNum : char -> bool = fn
    val isAscii : char -> bool = fn
    val isCntrl : char -> bool = fn
    val isDigit : char -> bool = fn
    val isGraph : char -> bool = fn
    val isHexDigit : char -> bool = fn
    val isLower : char -> bool = fn
    val isPrint : char -> bool = fn
    val isPunct : char -> bool = fn
    val isSpace : char -> bool = fn
    val isUpper : char -> bool = fn
    val maxChar : char = #"\255"
    val maxOrd : int = 255
    val minChar : char = #"\000"
    val notContains : string -> char -> bool = fn
    val ord : char -> int = fn
    val pred : char -> char = fn
    val scan : ('a -> (char * 'a) option) -> 'a -> (char * 'a) option = fn
    val succ : char -> char = fn
    val toCString : char -> string = fn
    val toLower : char -> char = fn
    val toString : char -> string = fn
    val toUpper : char -> char = fn
  end
val it : unit = ()
structure String =
  struct
    structure Char =
      struct
        eqtype char = char
        eqtype string = string
        val < : (char * char) -> bool = fn
        val <= : (char * char) -> bool = fn
        val > : (char * char) -> bool = fn
        val >= : (char * char) -> bool = fn
        val chr : int -> char = fn
        val compare : (char * char) -> order = fn
        val contains : string -> char -> bool = fn
        val fromCString : string -> char option = fn
        val fromString : string -> char option = fn
        val isAlpha : char -> bool = fn
        val isAlphaNum : char -> bool = fn
        val isAscii : char -> bool = fn
        val isCntrl : char -> bool = fn
        val isDigit : char -> bool = fn
        val isGraph : char -> bool = fn
        val isHexDigit : char -> bool = fn
        val isLower : char -> bool = fn
        val isPrint : char -> bool = fn
        val isPunct : char -> bool = fn
        val isSpace : char -> bool = fn
        val isUpper : char -> bool = fn
        val maxChar : char = #"\255"
        val maxOrd : int = 255
        val minChar : char = #"\000"
        val notContains : string -> char -> bool = fn
        val ord : char -> int = fn
        val pred : char -> char = fn
        val scan : ('a -> (char * 'a) option) -> 'a -> (char * 'a) option = fn
        val succ : char -> char = fn
        val toCString : char -> string = fn
        val toLower : char -> char = fn
        val toString : char -> string = fn
        val toUpper : char -> char = fn
      end
    eqtype char = char
    eqtype string = string
    val < : (string * string) -> bool = fn
    val <= : (string * string) -> bool = fn
    val > : (string * string) -> bool = fn
    val >= : (string * string) -> bool = fn
    val ^ : (string * string) -> string = fn
    val collate : ((char * char) -> order) -> (string * string) -> order = fn
    val compare : (string * string) -> order = fn
    val concat : string list -> string = fn
    val explode : string -> char list = fn
    val extract : (string * int * int option) -> string = fn
    val fields : (char -> bool) -> string -> string list = fn
    val fromCString : string -> string option = fn
    val fromString : string -> string option = fn
    val implode : char list -> string = fn
    val isPrefix : string -> string -> bool = fn
    val maxSize : int = 16777195
    val size : string -> int = fn
    val str : char -> string = fn
    val sub : (string * int) -> char = fn
    val substring : (string * int * int) -> string = fn
    val toCString : string -> string = fn
    val toString : string -> string = fn
    val tokens : (char -> bool) -> string -> string list = fn
    val translate : (char -> string) -> string -> string = fn
  end
val it : unit = ()
structure General =
  struct
    type exn = exn
    datatype 'a option =
      NONE |
      SOME of 'a
    datatype order =
      EQUAL |
      GREATER |
      LESS
    eqtype unit = unit
    val ! : 'a ref -> 'a = fn
    val := : ('a ref * 'a) -> unit = fn
    val <> : (''a * ''a) -> bool = fn
    exception Bind
    exception Chr
    exception Div
    exception Domain
    val EQUAL : order
    exception Fail of string
    val GREATER : order
    val LESS : order
    exception Match
    val NONE : 'a option
    exception Option
    exception Overflow
    val SOME : 'a -> 'a option
    exception Size
    exception Subscript
    val before : ('a * unit) -> 'a = fn
    val exnMessage : exn -> string = fn
    val exnName : exn -> string = fn
    val getOpt : ('a option * 'a) -> 'a = fn
    val ignore : 'a -> unit = fn
    val isSome : 'a option -> bool = fn
    val o : (('a -> 'b) * ('c -> 'a)) -> 'c -> 'b = fn
    val valOf : 'a option -> 'a = fn
  end
val it : unit = ()
structure List =
  struct
    datatype 'a list =
      :: of ('a * 'a list) |
      nil
    val :: : ('a * 'a list) -> 'a list
    val @@ : ('a list * 'a list) -> 'a list = fn
    exception Empty
    val all : ('a -> bool) -> 'a list -> bool = fn
    val app : ('a -> unit) -> 'a list -> unit = fn
    val concat : 'a list list -> 'a list = fn
    val drop : ('a list * int) -> 'a list = fn
    val exists : ('a -> bool) -> 'a list -> bool = fn
    val filter : ('a -> bool) -> 'a list -> 'a list = fn
    val find : ('a -> bool) -> 'a list -> 'a option = fn
    val foldl : (('a * 'b) -> 'b) -> 'b -> 'a list -> 'b = fn
    val foldr : (('a * 'b) -> 'b) -> 'b -> 'a list -> 'b = fn
    val hd : 'a list -> 'a = fn
    val last : 'a list -> 'a = fn
    val length : 'a list -> int = fn
    val map : ('a -> 'b) -> 'a list -> 'b list = fn
    val mapPartial : ('a -> 'b option) -> 'a list -> 'b list = fn
    val nil : 'a list
    val nth : ('a list * int) -> 'a = fn
    val null : 'a list -> bool = fn
    val partition : ('a -> bool) -> 'a list -> ('a list * 'a list) = fn
    val rev : 'a list -> 'a list = fn
    val revAppend : ('a list * 'a list) -> 'a list = fn
    val tabulate : (int * (int -> 'a)) -> 'a list = fn
    val take : ('a list * int) -> 'a list = fn
    val tl : 'a list -> 'a list = fn
  end
@


1.12
log
@Remove references to toplevel
@
text
@d150 4
d170 1
@


1.12.5.1
log
@branched from 1.12
@
text
@@


1.12.5.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@@


1.12.5.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@@


1.12.5.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@@


1.12.5.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@


1.12.4.1
log
@branched from 1.12
@
text
@@


1.12.3.1
log
@branched from 1.12
@
text
@@


1.12.3.1.1.1
log
@branched from 1.12.3.1
@
text
@@


1.12.2.1
log
@branched from 1.12
@
text
@@


1.12.1.1
log
@branched from 1.12
@
text
@@


1.12.1.1.1.1
log
@branched from 1.12.1.1
@
text
@@


1.11
log
@[Bug #1626]
update option in toCString
@
text
@a1 1
val it : unit = ()
@


1.11.2.1
log
@branched from 1.11
@
text
@@


1.11.1.1
log
@branched from 1.11
@
text
@@


1.10
log
@[Bug #1490]
update for String.maxSize
@
text
@d36 1
a36 1
    val toCString : char -> string option = fn
d77 1
a77 1
        val toCString : char -> string option = fn
@


1.9
log
@remove banner
@
text
@d99 1
a99 1
    val maxSize : int = 8388606
@


1.9.1.1
log
@branched from 1.9
@
text
@@


1.8
log
@updating for commercial version flyer
@
text
@a0 2
commercial version may be purchased directly from Harlequin.

@


1.7
log
@switch off Compiling messages...
@
text
@d1 2
@


1.6
log
@updating.
@
text
@a1 1
Compiling basis.toplevel
a2 11
Compiling basis.string_cvt
Compiling basis.__pre_basis
Compiling basis.__pre_string_cvt
Compiling basis.__string_cvt
Compiling basis.char
Compiling basis.__preinteger
Compiling basis.__preint32
Compiling basis.integer
Compiling basis.__integer
Compiling basis.__pre_char
Compiling basis.__char
a41 6
Compiling basis.string
Compiling basis.general
Compiling basis.__general
Compiling basis.list
Compiling basis.__list
Compiling basis.__string
@


1.5
log
@add __pre_char again
@
text
@a1 2
Compiling basis.general
Compiling basis.__general
a2 31
structure TopLevel =
  struct
    datatype 'a option =
      NONE |
      SOME of 'a
    datatype order =
      EQUAL |
      GREATER |
      LESS
    exception Domain
    val EQUAL : order
    exception Fail of string
    val GREATER : order
    val LESS : order
    val NONE : 'a option
    val SOME : 'a -> 'a option
  end
datatype 'a option =
  NONE |
  SOME of 'a
datatype order =
  EQUAL |
  GREATER |
  LESS
exception Domain
val EQUAL : order
exception Fail of string
val GREATER : order
val LESS : order
val NONE : 'a option
val SOME : 'a -> 'a option
d55 2
@


1.4
log
@revise
@
text
@d37 1
a38 1
Compiling basis.string_cvt
d46 1
a55 2
    exception Dummy of char
    exception ToString of char
a68 1
    val isOctDigit : char -> bool = fn
a72 1
    val makestring : char -> string = fn
a79 1
    val scanc : ('a -> (char * 'a) option) -> 'a -> (char * 'a) option = fn
@


1.3
log
@(No reason given.)
@
text
@d37 5
a41 3
Compiling basis.stringcvt
Compiling basis.__pre_char
Compiling basis.__stringcvt
a45 1
Compiling basis.char
d55 2
d70 1
d75 1
d83 1
d152 1
a152 1
    val maxSize : int = 32766
@


1.2
log
@Updating
@
text
@d142 1
d151 1
d259 2
@


1.1
log
@new unit
@
text
@d57 1
a63 1
    val isDigit2 : char -> bool = fn
d79 1
d102 1
a108 1
        val isDigit2 : char -> bool = fn
d124 1
@
