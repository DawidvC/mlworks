head	1.21;
access;
symbols
	MLWorks_21c0_1999_03_25:1.21
	MLWorks_20c1_1998_08_20:1.21
	MLWorks_20c0_1998_08_04:1.21
	MLWorks_20b2c2_1998_06_19:1.21
	MLWorks_20b2_Windows_1998_06_12:1.21
	MLWorks_20b1c1_1998_05_07:1.21
	MLWorks_20b0_1998_04_07:1.21
	MLWorks_20b0_1998_03_20:1.21
	MLWorks_20m2_1998_02_16:1.21
	MLWorks_20m1_1997_10_23:1.20
	MLWorks_11r1:1.17.5.1.1.1.1
	MLWorks_11c0_1997_09_09:1.17.5.1.1.1
	MLWorks_10r3:1.17.5.1.3
	MLWorks_10r2_551:1.17.5.1.2
	MLWorks_11:1.17.5.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.17.5.1
	MLWorks_20m0_1997_06_20:1.18
	MLWorks_1_0_r2c2_1997_06_14:1.17.5.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.17.5.1
	MLWorks_1_0_r2c1_1997_05_12:1.17.5
	MLWorks_BugFix_1997_04_24:1.17
	MLWorks_1_0_r2_Win32_1997_04_11:1.17
	MLWorks_1_0_r2_Unix_1997_04_04:1.17
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.17.3.1.1
	MLWorks_gui_1996_12_18:1.17.4
	MLWorks_1_0_Win32_1996_12_17:1.17.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.17.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.17.1.1
	MLWorks_1_0_Irix_1996_11_28:1.17.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.17.2
	MLWorks_1_0_Unix_1996_11_14:1.17.1
	MLWorks_Open_Beta2_1996_10_11:1.16.2
	MLWorks_License_dev:1.16.1
	MLWorks_1_open_beta_1996_09_13:1.12.1
	MLWorks_Open_Beta_1996_08_22:1.10
	MLWorks_Beta_1996_07_02:1.7
	MLWorks_Beta_1996_06_07:1.5
	MLWorks_Beta_1996_06_06:1.5
	MLWorks_Beta_1996_06_05:1.5
	MLWorks_Beta_1996_06_03:1.4
	MLWorks_Beta_1996_05_31:1.4
	MLWorks_Beta_1996_05_30:1.3;
locks; strict;
comment	@# @;


1.21
date	97.11.25.19.25.03;	author daveb;	state Exp;
branches;
next	1.20;

1.20
date	97.08.08.14.20.38;	author brucem;	state Exp;
branches;
next	1.19;

1.19
date	97.08.05.10.34.46;	author brucem;	state Exp;
branches;
next	1.18;

1.18
date	97.06.06.10.54.43;	author jont;	state Exp;
branches;
next	1.17;

1.17
date	96.10.22.13.28.46;	author jont;	state Exp;
branches
	1.17.1.1
	1.17.2.1
	1.17.3.1
	1.17.4.1
	1.17.5.1;
next	1.16;

1.16
date	96.10.01.12.57.53;	author io;	state Exp;
branches
	1.16.1.1
	1.16.2.1;
next	1.15;

1.15
date	96.09.25.09.52.55;	author io;	state Exp;
branches;
next	1.14;

1.14
date	96.09.21.19.06.58;	author io;	state Exp;
branches;
next	1.13;

1.13
date	96.09.18.15.17.13;	author io;	state Exp;
branches;
next	1.12;

1.12
date	96.09.09.11.14.02;	author io;	state Exp;
branches
	1.12.1.1;
next	1.11;

1.11
date	96.09.07.00.02.26;	author io;	state Exp;
branches;
next	1.10;

1.10
date	96.08.14.12.00.53;	author io;	state Exp;
branches;
next	1.9;

1.9
date	96.07.25.16.30.24;	author daveb;	state Exp;
branches;
next	1.8;

1.8
date	96.07.04.18.30.44;	author andreww;	state Exp;
branches;
next	1.7;

1.7
date	96.07.02.13.22.10;	author io;	state Exp;
branches;
next	1.6;

1.6
date	96.06.25.10.18.12;	author io;	state Exp;
branches;
next	1.5;

1.5
date	96.06.05.01.30.41;	author io;	state Exp;
branches;
next	1.4;

1.4
date	96.05.30.15.28.53;	author stephenb;	state Exp;
branches;
next	1.3;

1.3
date	96.05.23.11.32.22;	author matthew;	state Exp;
branches;
next	1.2;

1.2
date	96.05.20.10.19.08;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	96.05.16.16.52.12;	author io;	state Exp;
branches;
next	;

1.12.1.1
date	96.09.13.11.37.30;	author hope;	state Exp;
branches;
next	;

1.16.1.1
date	96.10.07.16.28.45;	author hope;	state Exp;
branches;
next	;

1.16.2.1
date	96.10.17.11.49.37;	author hope;	state Exp;
branches;
next	;

1.17.1.1
date	96.11.14.13.17.00;	author hope;	state Exp;
branches
	1.17.1.1.1.1;
next	;

1.17.1.1.1.1
date	96.11.28.15.27.26;	author hope;	state Exp;
branches;
next	;

1.17.2.1
date	96.11.22.18.34.48;	author hope;	state Exp;
branches;
next	;

1.17.3.1
date	96.12.17.18.13.45;	author hope;	state Exp;
branches
	1.17.3.1.1.1;
next	;

1.17.3.1.1.1
date	97.02.24.12.06.34;	author hope;	state Exp;
branches;
next	;

1.17.4.1
date	96.12.18.10.08.44;	author hope;	state Exp;
branches;
next	;

1.17.5.1
date	97.05.12.11.07.15;	author hope;	state Exp;
branches
	1.17.5.1.1.1
	1.17.5.1.2.1
	1.17.5.1.3.1;
next	;

1.17.5.1.1.1
date	97.07.28.18.50.44;	author daveb;	state Exp;
branches
	1.17.5.1.1.1.1.1;
next	;

1.17.5.1.1.1.1.1
date	97.10.07.12.14.40;	author jkbrook;	state Exp;
branches;
next	;

1.17.5.1.2.1
date	97.09.08.17.42.29;	author daveb;	state Exp;
branches;
next	;

1.17.5.1.3.1
date	97.09.09.14.41.55;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
@


1.21
log
@[Bug #30323]
@
text
@test1:OK
test2:OK
test3:OKEXN
test4:OKEXN
test5:OKEXN
test7:OK
test8:OKEXN
test9:OKEXN
test10:OK
test11:OK
test11a:OKEXN
test11b:OKEXN
test11c:OKEXN
test11d:OKEXN
test11e:OKEXN
test11f:OKEXN
test11g:OKEXN
test11h:OKEXN
test11i:OKEXN
test12a:OK
test12b:OKEXN
test12c:OKEXN
test12d:OKEXN
test12e:OKEXN
test12f:OK
test13a:OK
test13b:OK
test14:OK
test15:OK
test16a:OK
test16b:OK
test17:OK
test18b:OK
test19:OK
test20:OK
test20a:OK
test21:OK
test22:OK
test23:OK
test24:OK
test25:OK
test25a:OK
test26:OK
test27:OK
test28:OK
test29:OK
test30:OK
test31:OK
test32:OK
test33:OK
test34:OK
test35:OK
test36:OKEXN
test37a:OK
test37b:OKEXN
test38:OK
test39:OK
test40:OKEXN
test41:OK
test42:OKEXN
val it : unit = ()
@


1.20
log
@[Bug #30086]
Add tests for String.map and String.mapi.
@
text
@a0 5
structure Char = struct ... end
structure String = struct ... end
structure List = struct ... end
structure General = struct ... end
structure CharVector = struct ... end
@


1.19
log
@[Bug #30004]
Reflect changes in sml file.
@
text
@d53 13
@


1.18
log
@New answer now list type in list
@
text
@d1 5
a5 198
val it : unit = ()
structure Char =
  struct
    eqtype char = char
    eqtype string = string
    val < : (char * char) -> bool = fn
    val <= : (char * char) -> bool = fn
    val > : (char * char) -> bool = fn
    val >= : (char * char) -> bool = fn
    val chr : int -> char = fn
    val compare : (char * char) -> order = fn
    val contains : string -> char -> bool = fn
    val fromCString : string -> char option = fn
    val fromString : string -> char option = fn
    val isAlpha : char -> bool = fn
    val isAlphaNum : char -> bool = fn
    val isAscii : char -> bool = fn
    val isCntrl : char -> bool = fn
    val isDigit : char -> bool = fn
    val isGraph : char -> bool = fn
    val isHexDigit : char -> bool = fn
    val isLower : char -> bool = fn
    val isPrint : char -> bool = fn
    val isPunct : char -> bool = fn
    val isSpace : char -> bool = fn
    val isUpper : char -> bool = fn
    val maxChar : char = #"\255"
    val maxOrd : int = 255
    val minChar : char = #"\000"
    val notContains : string -> char -> bool = fn
    val ord : char -> int = fn
    val pred : char -> char = fn
    val scan : ('a -> (char * 'a) option) -> 'a -> (char * 'a) option = fn
    val succ : char -> char = fn
    val toCString : char -> string = fn
    val toLower : char -> char = fn
    val toString : char -> string = fn
    val toUpper : char -> char = fn
  end
val it : unit = ()
structure String =
  struct
    structure Char =
      struct
        eqtype char = char
        eqtype string = string
        val < : (char * char) -> bool = fn
        val <= : (char * char) -> bool = fn
        val > : (char * char) -> bool = fn
        val >= : (char * char) -> bool = fn
        val chr : int -> char = fn
        val compare : (char * char) -> order = fn
        val contains : string -> char -> bool = fn
        val fromCString : string -> char option = fn
        val fromString : string -> char option = fn
        val isAlpha : char -> bool = fn
        val isAlphaNum : char -> bool = fn
        val isAscii : char -> bool = fn
        val isCntrl : char -> bool = fn
        val isDigit : char -> bool = fn
        val isGraph : char -> bool = fn
        val isHexDigit : char -> bool = fn
        val isLower : char -> bool = fn
        val isPrint : char -> bool = fn
        val isPunct : char -> bool = fn
        val isSpace : char -> bool = fn
        val isUpper : char -> bool = fn
        val maxChar : char = #"\255"
        val maxOrd : int = 255
        val minChar : char = #"\000"
        val notContains : string -> char -> bool = fn
        val ord : char -> int = fn
        val pred : char -> char = fn
        val scan : ('a -> (char * 'a) option) -> 'a -> (char * 'a) option = fn
        val succ : char -> char = fn
        val toCString : char -> string = fn
        val toLower : char -> char = fn
        val toString : char -> string = fn
        val toUpper : char -> char = fn
      end
    eqtype char = char
    eqtype string = string
    val < : (string * string) -> bool = fn
    val <= : (string * string) -> bool = fn
    val > : (string * string) -> bool = fn
    val >= : (string * string) -> bool = fn
    val ^ : (string * string) -> string = fn
    val collate : ((char * char) -> order) -> (string * string) -> order = fn
    val compare : (string * string) -> order = fn
    val concat : string list -> string = fn
    val explode : string -> char list = fn
    val extract : (string * int * int option) -> string = fn
    val fields : (char -> bool) -> string -> string list = fn
    val fromCString : string -> string option = fn
    val fromString : string -> string option = fn
    val implode : char list -> string = fn
    val isPrefix : string -> string -> bool = fn
    val maxSize : int = 16777195
    val size : string -> int = fn
    val str : char -> string = fn
    val sub : (string * int) -> char = fn
    val substring : (string * int * int) -> string = fn
    val toCString : string -> string = fn
    val toString : string -> string = fn
    val tokens : (char -> bool) -> string -> string list = fn
    val translate : (char -> string) -> string -> string = fn
  end
val it : unit = ()
structure List =
  struct
    datatype 'a list =
      :: of ('a * 'a list) |
      nil
    val :: : ('a * 'a list) -> 'a list
    val @@ : ('a list * 'a list) -> 'a list = fn
    exception Empty
    val all : ('a -> bool) -> 'a list -> bool = fn
    val app : ('a -> unit) -> 'a list -> unit = fn
    val concat : 'a list list -> 'a list = fn
    val drop : ('a list * int) -> 'a list = fn
    val exists : ('a -> bool) -> 'a list -> bool = fn
    val filter : ('a -> bool) -> 'a list -> 'a list = fn
    val find : ('a -> bool) -> 'a list -> 'a option = fn
    val foldl : (('a * 'b) -> 'b) -> 'b -> 'a list -> 'b = fn
    val foldr : (('a * 'b) -> 'b) -> 'b -> 'a list -> 'b = fn
    val hd : 'a list -> 'a = fn
    val last : 'a list -> 'a = fn
    val length : 'a list -> int = fn
    val map : ('a -> 'b) -> 'a list -> 'b list = fn
    val mapPartial : ('a -> 'b option) -> 'a list -> 'b list = fn
    val nil : 'a list
    val nth : ('a list * int) -> 'a = fn
    val null : 'a list -> bool = fn
    val partition : ('a -> bool) -> 'a list -> ('a list * 'a list) = fn
    val rev : 'a list -> 'a list = fn
    val revAppend : ('a list * 'a list) -> 'a list = fn
    val tabulate : (int * (int -> 'a)) -> 'a list = fn
    val take : ('a list * int) -> 'a list = fn
    val tl : 'a list -> 'a list = fn
  end
val it : unit = ()
structure General =
  struct
    type exn = exn
    datatype 'a option =
      NONE |
      SOME of 'a
    datatype order =
      EQUAL |
      GREATER |
      LESS
    eqtype unit = unit
    val ! : 'a ref -> 'a = fn
    val := : ('a ref * 'a) -> unit = fn
    val <> : (''a * ''a) -> bool = fn
    exception Bind
    exception Chr
    exception Div
    exception Domain
    val EQUAL : order
    exception Fail of string
    val GREATER : order
    val LESS : order
    exception Match
    val NONE : 'a option
    exception Option
    exception Overflow
    val SOME : 'a -> 'a option
    exception Size
    exception Subscript
    val before : ('a * unit) -> 'a = fn
    val exnMessage : exn -> string = fn
    val exnName : exn -> string = fn
    val getOpt : ('a option * 'a) -> 'a = fn
    val ignore : 'a -> unit = fn
    val isSome : 'a option -> bool = fn
    val o : (('a -> 'b) * ('c -> 'a)) -> 'c -> 'b = fn
    val valOf : 'a option -> 'a = fn
  end
val it : unit = ()
structure CharVector =
  struct
    eqtype elem = char
    eqtype vector = string
    val app : (char -> unit) -> string -> unit = fn
    val appi : ((int * char) -> unit) -> (string * int * int option) -> unit = fn
    val concat : string list -> string = fn
    val extract : (string * int * int option) -> string = fn
    val foldl : ((char * 'a) -> 'a) -> 'a -> string -> 'a = fn
    val foldli : ((int * char * 'a) -> 'a) -> 'a -> (string * int * int option) -> 'a = fn
    val foldr : ((char * 'a) -> 'a) -> 'a -> string -> 'a = fn
    val foldri : ((int * char * 'a) -> 'a) -> 'a -> (string * int * int option) -> 'a = fn
    val fromList : char list -> string = fn
    val length : string -> int = fn
    val maxLen : int = 16777196
    val sub : (string * int) -> char = fn
    val tabulate : (int * (int -> char)) -> string = fn
  end
@


1.17
log
@Remove references to toplevel
@
text
@d111 4
d131 1
@


1.17.5.1
log
@branched from 1.17
@
text
@@


1.17.5.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@@


1.17.5.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@@


1.17.5.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@@


1.17.5.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@


1.17.4.1
log
@branched from 1.17
@
text
@@


1.17.3.1
log
@branched from 1.17
@
text
@@


1.17.3.1.1.1
log
@branched from 1.17.3.1
@
text
@@


1.17.2.1
log
@branched from 1.17
@
text
@@


1.17.1.1
log
@branched from 1.17
@
text
@@


1.17.1.1.1.1
log
@branched from 1.17.1.1
@
text
@@


1.16
log
@[Bug #1626]
update option in toCString
@
text
@a1 1
val it : unit = ()
@


1.16.2.1
log
@branched from 1.16
@
text
@@


1.16.1.1
log
@branched from 1.16
@
text
@@


1.15
log
@remove longList generation test
@
text
@d36 1
a36 1
    val toCString : char -> string option = fn
d77 1
a77 1
        val toCString : char -> string option = fn
@


1.14
log
@[Bug #1490]
update ans to include Warning message
@
text
@d195 1
a195 2
MLWo[Warning: Live data exceeds advisory limit of 100Mb.  Temporarily increasing limit to 200Mb.]
rks>> test1:OK
a199 3
test6a:OK
test6b:OK
test6:OKEXN
a226 2
test17a:OKEXN
test18a:OKEXN
@


1.13
log
@[Bug #1490]
update for String.maxSize
@
text
@d195 2
a196 1
test1:OK
@


1.12
log
@remove banner
@
text
@d99 1
a99 1
    val maxSize : int = 8388606
@


1.12.1.1
log
@branched from 1.12
@
text
@@


1.11
log
@updating for commercial version flyer
@
text
@a0 2
commercial version may be purchased directly from Harlequin.

@


1.10
log
@switch off Compiling messages...
@
text
@d1 2
@


1.9
log
@[Bug #1497]
Added test to check that extract does bound checking on the empty string.
@
text
@a1 1
Compiling basis.toplevel
a2 11
Compiling basis.string_cvt
Compiling basis.__pre_basis
Compiling basis.__pre_string_cvt
Compiling basis.__string_cvt
Compiling basis.char
Compiling basis.__preinteger
Compiling basis.__preint32
Compiling basis.integer
Compiling basis.__integer
Compiling basis.__pre_char
Compiling basis.__char
a41 6
Compiling basis.string
Compiling basis.general
Compiling basis.__general
Compiling basis.list
Compiling basis.__list
Compiling basis.__string
a176 2
Compiling basis.mono_vector
Compiling basis.__charvector
@


1.8
log
@updating.
@
text
@d235 2
@


1.7
log
@more tests for fromCString and toCString
@
text
@a1 2
Compiling basis.general
Compiling basis.__general
a2 31
structure TopLevel =
  struct
    datatype 'a option =
      NONE |
      SOME of 'a
    datatype order =
      EQUAL |
      GREATER |
      LESS
    exception Domain
    val EQUAL : order
    exception Fail of string
    val GREATER : order
    val LESS : order
    val NONE : 'a option
    val SOME : 'a -> 'a option
  end
datatype 'a option =
  NONE |
  SOME of 'a
datatype order =
  EQUAL |
  GREATER |
  LESS
exception Domain
val EQUAL : order
exception Fail of string
val GREATER : order
val LESS : order
val NONE : 'a option
val SOME : 'a -> 'a option
d55 2
@


1.6
log
@add __pre_char again
@
text
@d290 6
@


1.5
log
@stringcvt->string_cvt
@
text
@d37 1
a38 1
Compiling basis.string_cvt
d46 1
a55 2
    exception Dummy of char
    exception ToString of char
a68 1
    val isOctDigit : char -> bool = fn
a72 1
    val makestring : char -> string = fn
a79 1
    val scanc : ('a -> (char * 'a) option) -> 'a -> (char * 'a) option = fn
@


1.4
log
@The list of files loaded has changed due to new Timer implementation.
@
text
@d37 5
a41 3
Compiling basis.stringcvt
Compiling basis.__pre_char
Compiling basis.__stringcvt
a45 1
Compiling basis.char
d55 2
d70 1
d75 1
d83 1
d152 1
a152 1
    val maxSize : int = 32766
a283 1
test18slow:OK
@


1.3
log
@Updating
@
text
@d142 1
d151 1
@


1.2
log
@Slight form change
@
text
@a63 1
    val isDigit2 : char -> bool = fn
a108 1
        val isDigit2 : char -> bool = fn
d228 2
d231 6
a236 1
    val extract : (string * int * int) -> string = fn
d238 1
a238 1
    val maxlen : int = 32768
a240 1
    val vector : char list -> string = fn
@


1.1
log
@new unit
@
text
@d57 1
d80 1
d103 1
d126 1
@
