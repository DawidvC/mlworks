head	1.17;
access;
symbols
	MLWorks_21c0_1999_03_25:1.17
	MLWorks_20c1_1998_08_20:1.17
	MLWorks_20c0_1998_08_04:1.17
	MLWorks_20b2c2_1998_06_19:1.17
	MLWorks_20b2_Windows_1998_06_12:1.17
	MLWorks_20b1c1_1998_05_07:1.17
	MLWorks_20b0_1998_04_07:1.17
	MLWorks_20b0_1998_03_20:1.17
	MLWorks_20m2_1998_02_16:1.17
	MLWorks_20m1_1997_10_23:1.16
	MLWorks_11r1:1.13.5.1.1.1.1
	MLWorks_11c0_1997_09_09:1.13.5.1.1.1
	MLWorks_10r3:1.13.5.1.3
	MLWorks_10r2_551:1.13.5.1.2
	MLWorks_11:1.13.5.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.13.5.1
	MLWorks_20m0_1997_06_20:1.14
	MLWorks_1_0_r2c2_1997_06_14:1.13.5.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.13.5.1
	MLWorks_1_0_r2c1_1997_05_12:1.13.5
	MLWorks_BugFix_1997_04_24:1.13
	MLWorks_1_0_r2_Win32_1997_04_11:1.13
	MLWorks_1_0_r2_Unix_1997_04_04:1.13
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.13.3.1.1
	MLWorks_gui_1996_12_18:1.13.4
	MLWorks_1_0_Win32_1996_12_17:1.13.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.13.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.13.1.1
	MLWorks_1_0_Irix_1996_11_28:1.13.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.13.2
	MLWorks_1_0_Unix_1996_11_14:1.13.1
	MLWorks_Open_Beta2_1996_10_11:1.12.2
	MLWorks_License_dev:1.12.1
	MLWorks_1_open_beta_1996_09_13:1.9.1
	MLWorks_Open_Beta_1996_08_22:1.7
	MLWorks_Beta_1996_07_02:1.4
	MLWorks_Beta_1996_06_07:1.2
	MLWorks_Beta_1996_06_06:1.2
	MLWorks_Beta_1996_06_05:1.2;
locks; strict;
comment	@# @;


1.17
date	97.11.25.19.25.40;	author daveb;	state Exp;
branches;
next	1.16;

1.16
date	97.08.11.09.26.28;	author brucem;	state Exp;
branches;
next	1.15;

1.15
date	97.08.05.09.57.12;	author brucem;	state Exp;
branches;
next	1.14;

1.14
date	97.06.06.10.55.41;	author jont;	state Exp;
branches;
next	1.13;

1.13
date	96.10.22.13.29.33;	author jont;	state Exp;
branches
	1.13.1.1
	1.13.2.1
	1.13.3.1
	1.13.4.1
	1.13.5.1;
next	1.12;

1.12
date	96.10.02.20.46.47;	author io;	state Exp;
branches
	1.12.1.1
	1.12.2.1;
next	1.11;

1.11
date	96.10.01.13.05.44;	author io;	state Exp;
branches;
next	1.10;

1.10
date	96.09.18.15.17.15;	author io;	state Exp;
branches;
next	1.9;

1.9
date	96.09.09.11.14.03;	author io;	state Exp;
branches
	1.9.1.1;
next	1.8;

1.8
date	96.09.07.00.02.26;	author io;	state Exp;
branches;
next	1.7;

1.7
date	96.08.14.12.02.40;	author io;	state Exp;
branches;
next	1.6;

1.6
date	96.07.29.23.49.58;	author io;	state Exp;
branches;
next	1.5;

1.5
date	96.07.04.18.31.38;	author andreww;	state Exp;
branches;
next	1.4;

1.4
date	96.06.25.10.17.20;	author io;	state Exp;
branches;
next	1.3;

1.3
date	96.06.08.11.07.16;	author io;	state Exp;
branches;
next	1.2;

1.2
date	96.06.05.11.31.26;	author io;	state Exp;
branches;
next	1.1;

1.1
date	96.06.05.01.41.58;	author io;	state Exp;
branches;
next	;

1.9.1.1
date	96.09.13.11.37.41;	author hope;	state Exp;
branches;
next	;

1.12.1.1
date	96.10.07.16.28.56;	author hope;	state Exp;
branches;
next	;

1.12.2.1
date	96.10.17.11.49.44;	author hope;	state Exp;
branches;
next	;

1.13.1.1
date	96.11.14.13.17.07;	author hope;	state Exp;
branches
	1.13.1.1.1.1;
next	;

1.13.1.1.1.1
date	96.11.28.15.27.36;	author hope;	state Exp;
branches;
next	;

1.13.2.1
date	96.11.22.18.34.55;	author hope;	state Exp;
branches;
next	;

1.13.3.1
date	96.12.17.18.13.52;	author hope;	state Exp;
branches
	1.13.3.1.1.1;
next	;

1.13.3.1.1.1
date	97.02.24.12.06.43;	author hope;	state Exp;
branches;
next	;

1.13.4.1
date	96.12.18.10.08.51;	author hope;	state Exp;
branches;
next	;

1.13.5.1
date	97.05.12.11.07.24;	author hope;	state Exp;
branches
	1.13.5.1.1.1
	1.13.5.1.2.1
	1.13.5.1.3.1;
next	;

1.13.5.1.1.1
date	97.07.28.18.49.32;	author daveb;	state Exp;
branches
	1.13.5.1.1.1.1.1;
next	;

1.13.5.1.1.1.1.1
date	97.10.07.12.14.56;	author jkbrook;	state Exp;
branches;
next	;

1.13.5.1.2.1
date	97.09.08.17.41.14;	author daveb;	state Exp;
branches;
next	;

1.13.5.1.3.1
date	97.09.09.14.40.41;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
@


1.17
log
@[Bug #30323]
@
text
@test1a:OK
test1b:OKEXN
test1c:OKEXN
test1d:OKEXN
test1e:OKEXN
test1f:OKEXN
test1g:OKEXN
test1h:OK
test2a:OK
test2b:OKEXN
test2c:OKEXN
test3a:OK
test3b:OKEXN
test3c:OKEXN
test4a:OK
test5a:OK
test6a:OK
test6:OK
test7:OK
test8a:OK
test8b:OKEXN
test8c:OKEXN
test8d:OKEXN
test8e:OKEXN
test8f:OKEXN
test9a:OK
test9b:OK
test9c:OKEXN
test9d:OKEXN
test9e:OKEXN
test9f:OKEXN
test9g:OKEXN
test9h:OKEXN
test12:OK
test13:OK
test14:OK
test15:OK
test16:OK
test17:OK
test18:OK
test19:OK
test20:OK
test21:OK
test22a:OK
test22b:OK
test23:OK
test24:OK
test25:OK
test26a:OK
test26b:OK
test27a:OK
test27b:OK
test28:OK
test29a:OK
test29b:OKEXN
test29c:OKEXN
test30a:OK
test30b:OKEXN
test30c:OKEXN
test30d:OKEXN
test30e:OKEXN
test31:OK
test32:OKEXN
test33:OK
test34:OK
test35:OKEXN
test36:OKEXN
val it : unit = ()
@


1.16
log
@[Bug #30094]
Test Substring.span.
@
text
@a0 5
structure General = struct ... end
structure List = struct ... end
structure Char = struct ... end
structure String = struct ... end
structure Substring = struct ... end
@


1.15
log
@[Bug #30004]
Reflect changes in sml file.
@
text
@d69 4
@


1.14
log
@New answer now list type in list
@
text
@d1 5
a5 246
val it : unit = ()
structure General =
  struct
    type exn = exn
    datatype 'a option =
      NONE |
      SOME of 'a
    datatype order =
      EQUAL |
      GREATER |
      LESS
    eqtype unit = unit
    val ! : 'a ref -> 'a = fn
    val := : ('a ref * 'a) -> unit = fn
    val <> : (''a * ''a) -> bool = fn
    exception Bind
    exception Chr
    exception Div
    exception Domain
    val EQUAL : order
    exception Fail of string
    val GREATER : order
    val LESS : order
    exception Match
    val NONE : 'a option
    exception Option
    exception Overflow
    val SOME : 'a -> 'a option
    exception Size
    exception Subscript
    val before : ('a * unit) -> 'a = fn
    val exnMessage : exn -> string = fn
    val exnName : exn -> string = fn
    val getOpt : ('a option * 'a) -> 'a = fn
    val ignore : 'a -> unit = fn
    val isSome : 'a option -> bool = fn
    val o : (('a -> 'b) * ('c -> 'a)) -> 'c -> 'b = fn
    val valOf : 'a option -> 'a = fn
  end
val it : unit = ()
structure List =
  struct
    datatype 'a list =
      :: of ('a * 'a list) |
      nil
    val :: : ('a * 'a list) -> 'a list
    val @@ : ('a list * 'a list) -> 'a list = fn
    exception Empty
    val all : ('a -> bool) -> 'a list -> bool = fn
    val app : ('a -> unit) -> 'a list -> unit = fn
    val concat : 'a list list -> 'a list = fn
    val drop : ('a list * int) -> 'a list = fn
    val exists : ('a -> bool) -> 'a list -> bool = fn
    val filter : ('a -> bool) -> 'a list -> 'a list = fn
    val find : ('a -> bool) -> 'a list -> 'a option = fn
    val foldl : (('a * 'b) -> 'b) -> 'b -> 'a list -> 'b = fn
    val foldr : (('a * 'b) -> 'b) -> 'b -> 'a list -> 'b = fn
    val hd : 'a list -> 'a = fn
    val last : 'a list -> 'a = fn
    val length : 'a list -> int = fn
    val map : ('a -> 'b) -> 'a list -> 'b list = fn
    val mapPartial : ('a -> 'b option) -> 'a list -> 'b list = fn
    val nil : 'a list
    val nth : ('a list * int) -> 'a = fn
    val null : 'a list -> bool = fn
    val partition : ('a -> bool) -> 'a list -> ('a list * 'a list) = fn
    val rev : 'a list -> 'a list = fn
    val revAppend : ('a list * 'a list) -> 'a list = fn
    val tabulate : (int * (int -> 'a)) -> 'a list = fn
    val take : ('a list * int) -> 'a list = fn
    val tl : 'a list -> 'a list = fn
  end
val it : unit = ()
structure Char =
  struct
    eqtype char = char
    eqtype string = string
    val < : (char * char) -> bool = fn
    val <= : (char * char) -> bool = fn
    val > : (char * char) -> bool = fn
    val >= : (char * char) -> bool = fn
    val chr : int -> char = fn
    val compare : (char * char) -> order = fn
    val contains : string -> char -> bool = fn
    val fromCString : string -> char option = fn
    val fromString : string -> char option = fn
    val isAlpha : char -> bool = fn
    val isAlphaNum : char -> bool = fn
    val isAscii : char -> bool = fn
    val isCntrl : char -> bool = fn
    val isDigit : char -> bool = fn
    val isGraph : char -> bool = fn
    val isHexDigit : char -> bool = fn
    val isLower : char -> bool = fn
    val isPrint : char -> bool = fn
    val isPunct : char -> bool = fn
    val isSpace : char -> bool = fn
    val isUpper : char -> bool = fn
    val maxChar : char = #"\255"
    val maxOrd : int = 255
    val minChar : char = #"\000"
    val notContains : string -> char -> bool = fn
    val ord : char -> int = fn
    val pred : char -> char = fn
    val scan : ('a -> (char * 'a) option) -> 'a -> (char * 'a) option = fn
    val succ : char -> char = fn
    val toCString : char -> string = fn
    val toLower : char -> char = fn
    val toString : char -> string = fn
    val toUpper : char -> char = fn
  end
val it : unit = ()
structure String =
  struct
    structure Char =
      struct
        eqtype char = char
        eqtype string = string
        val < : (char * char) -> bool = fn
        val <= : (char * char) -> bool = fn
        val > : (char * char) -> bool = fn
        val >= : (char * char) -> bool = fn
        val chr : int -> char = fn
        val compare : (char * char) -> order = fn
        val contains : string -> char -> bool = fn
        val fromCString : string -> char option = fn
        val fromString : string -> char option = fn
        val isAlpha : char -> bool = fn
        val isAlphaNum : char -> bool = fn
        val isAscii : char -> bool = fn
        val isCntrl : char -> bool = fn
        val isDigit : char -> bool = fn
        val isGraph : char -> bool = fn
        val isHexDigit : char -> bool = fn
        val isLower : char -> bool = fn
        val isPrint : char -> bool = fn
        val isPunct : char -> bool = fn
        val isSpace : char -> bool = fn
        val isUpper : char -> bool = fn
        val maxChar : char = #"\255"
        val maxOrd : int = 255
        val minChar : char = #"\000"
        val notContains : string -> char -> bool = fn
        val ord : char -> int = fn
        val pred : char -> char = fn
        val scan : ('a -> (char * 'a) option) -> 'a -> (char * 'a) option = fn
        val succ : char -> char = fn
        val toCString : char -> string = fn
        val toLower : char -> char = fn
        val toString : char -> string = fn
        val toUpper : char -> char = fn
      end
    eqtype char = char
    eqtype string = string
    val < : (string * string) -> bool = fn
    val <= : (string * string) -> bool = fn
    val > : (string * string) -> bool = fn
    val >= : (string * string) -> bool = fn
    val ^ : (string * string) -> string = fn
    val collate : ((char * char) -> order) -> (string * string) -> order = fn
    val compare : (string * string) -> order = fn
    val concat : string list -> string = fn
    val explode : string -> char list = fn
    val extract : (string * int * int option) -> string = fn
    val fields : (char -> bool) -> string -> string list = fn
    val fromCString : string -> string option = fn
    val fromString : string -> string option = fn
    val implode : char list -> string = fn
    val isPrefix : string -> string -> bool = fn
    val maxSize : int = 16777195
    val size : string -> int = fn
    val str : char -> string = fn
    val sub : (string * int) -> char = fn
    val substring : (string * int * int) -> string = fn
    val toCString : string -> string = fn
    val toString : string -> string = fn
    val tokens : (char -> bool) -> string -> string list = fn
    val translate : (char -> string) -> string -> string = fn
  end
val it : unit = ()
structure Substring =
  struct
    structure String =
      struct
        structure Char = struct ... end
        eqtype char = char
        eqtype string = string
        val < : (string * string) -> bool = fn
        val <= : (string * string) -> bool = fn
        val > : (string * string) -> bool = fn
        val >= : (string * string) -> bool = fn
        val ^ : (string * string) -> string = fn
        val collate : ((char * char) -> order) -> (string * string) -> order = fn
        val compare : (string * string) -> order = fn
        val concat : string list -> string = fn
        val explode : string -> char list = fn
        val extract : (string * int * int option) -> string = fn
        val fields : (char -> bool) -> string -> string list = fn
        val fromCString : string -> string option = fn
        val fromString : string -> string option = fn
        val implode : char list -> string = fn
        val isPrefix : string -> string -> bool = fn
        val maxSize : int = 16777195
        val size : string -> int = fn
        val str : char -> string = fn
        val sub : (string * int) -> char = fn
        val substring : (string * int * int) -> string = fn
        val toCString : string -> string = fn
        val toString : string -> string = fn
        val tokens : (char -> bool) -> string -> string list = fn
        val translate : (char -> string) -> string -> string = fn
      end
    eqtype substring = substring
    val all : string -> Substring.substring = fn
    val app : (char -> unit) -> Substring.substring -> unit = fn
    val base : Substring.substring -> (string * int * int) = fn
    val collate : ((char * char) -> order) -> (Substring.substring * Substring.substring) -> order = fn
    val compare : (Substring.substring * Substring.substring) -> order = fn
    val concat : Substring.substring list -> string = fn
    val dropl : (char -> bool) -> Substring.substring -> Substring.substring = fn
    val dropr : (char -> bool) -> Substring.substring -> Substring.substring = fn
    val explode : Substring.substring -> char list = fn
    val extract : (string * int * int option) -> Substring.substring = fn
    val fields : (char -> bool) -> Substring.substring -> Substring.substring list = fn
    val first : Substring.substring -> char option = fn
    val foldl : ((char * 'a) -> 'a) -> 'a -> Substring.substring -> 'a = fn
    val foldr : ((char * 'a) -> 'a) -> 'a -> Substring.substring -> 'a = fn
    val getc : Substring.substring -> (char * Substring.substring) option = fn
    val isEmpty : Substring.substring -> bool = fn
    val isPrefix : string -> Substring.substring -> bool = fn
    val position : string -> Substring.substring -> (Substring.substring * Substring.substring) = fn
    val size : Substring.substring -> int = fn
    val slice : (Substring.substring * int * int option) -> Substring.substring = fn
    val splitAt : (Substring.substring * int) -> (Substring.substring * Substring.substring) = fn
    val splitl : (char -> bool) -> Substring.substring -> (Substring.substring * Substring.substring) = fn
    val splitr : (char -> bool) -> Substring.substring -> (Substring.substring * Substring.substring) = fn
    val string : Substring.substring -> string = fn
    val sub : (Substring.substring * int) -> char = fn
    val substring : (string * int * int) -> Substring.substring = fn
    val takel : (char -> bool) -> Substring.substring -> Substring.substring = fn
    val taker : (char -> bool) -> Substring.substring -> Substring.substring = fn
    val tokens : (char -> bool) -> Substring.substring -> Substring.substring list = fn
    val translate : (char -> string) -> Substring.substring -> string = fn
    val triml : int -> Substring.substring -> Substring.substring = fn
    val trimr : int -> Substring.substring -> Substring.substring = fn
  end
@


1.13
log
@Remove references to toplevel
@
text
@d43 4
d63 1
@


1.13.5.1
log
@branched from 1.13
@
text
@@


1.13.5.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@@


1.13.5.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@@


1.13.5.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@@


1.13.5.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@


1.13.4.1
log
@branched from 1.13
@
text
@@


1.13.3.1
log
@branched from 1.13
@
text
@@


1.13.3.1.1.1
log
@branched from 1.13.3.1
@
text
@@


1.13.2.1
log
@branched from 1.13
@
text
@@


1.13.1.1
log
@branched from 1.13
@
text
@@


1.13.1.1.1.1
log
@branched from 1.13.1.1
@
text
@@


1.12
log
@[Bug #1630]
exposed some more tests
@
text
@a1 1
val it : unit = ()
@


1.12.2.1
log
@branched from 1.12
@
text
@@


1.12.1.1
log
@branched from 1.12
@
text
@@


1.11
log
@[Bug #1626]
update option in toCString
@
text
@d244 6
d252 2
d255 2
d263 5
d270 6
d297 2
d300 4
d305 1
@


1.10
log
@[Bug #1490]
update for String.maxSize
@
text
@d103 1
a103 1
    val toCString : char -> string option = fn
d144 1
a144 1
        val toCString : char -> string option = fn
@


1.9
log
@remove banner
@
text
@d166 1
a166 1
    val maxSize : int = 8388606
d199 1
a199 1
        val maxSize : int = 8388606
@


1.9.1.1
log
@branched from 1.9
@
text
@@


1.8
log
@updating for commercial version flyer
@
text
@a0 2
commercial version may be purchased directly from Harlequin.

@


1.7
log
@switch off Compiling messages...
@
text
@d1 2
@


1.6
log
@[Bug #1509]
@
text
@a1 1
Compiling basis.toplevel
a2 2
Compiling basis.general
Compiling basis.__general
a41 2
Compiling basis.list
Compiling basis.__list
a69 11
Compiling basis.string_cvt
Compiling basis.__pre_basis
Compiling basis.__pre_string_cvt
Compiling basis.__string_cvt
Compiling basis.char
Compiling basis.__preinteger
Compiling basis.__preint32
Compiling basis.integer
Compiling basis.__integer
Compiling basis.__pre_char
Compiling basis.__char
a108 2
Compiling basis.string
Compiling basis.__string
a176 2
Compiling basis.substring
Compiling basis.__substring
@


1.5
log
@updating.
@
text
@d199 30
d297 1
@


1.4
log
@add __pre_char again
@
text
@d2 2
a5 33
Compiling basis.toplevel
structure TopLevel =
  struct
    datatype 'a option =
      NONE |
      SOME of 'a
    datatype order =
      EQUAL |
      GREATER |
      LESS
    exception Domain
    val EQUAL : order
    exception Fail of string
    val GREATER : order
    val LESS : order
    val NONE : 'a option
    val SOME : 'a -> 'a option
  end
datatype 'a option =
  NONE |
  SOME of 'a
datatype order =
  EQUAL |
  GREATER |
  LESS
exception Domain
val EQUAL : order
exception Fail of string
val GREATER : order
val LESS : order
val NONE : 'a option
val SOME : 'a -> 'a option
val it : unit = ()
@


1.3
log
@remove some minor debugging output
@
text
@d106 1
a107 1
Compiling basis.string_cvt
d115 1
a124 2
    exception Dummy of char
    exception ToString of char
a137 1
    val isOctDigit : char -> bool = fn
a141 1
    val makestring : char -> string = fn
a148 1
    val scanc : ('a -> (char * 'a) option) -> 'a -> (char * 'a) option = fn
@


1.2
log
@revise for existing bugs
@
text
@d289 1
a289 1
010test21:OK
@


1.1
log
@new unit
@
text
@d283 7
a289 7
test15:WRONG
test16:WRONG
test17:WRONG
test18:WRONG
test19:WRONG
test20:WRONG
010test21:WRONG
d292 3
a294 3
test23:WRONG
test24:WRONG
test25:FAIL:Subscript[<Pervasive>:397,17 to 397,25]
@
