head	1.4;
access;
symbols;
locks; strict;
comment	@ *  @;


1.4
date	96.05.13.17.49.20;	author io;	state Exp;
branches;
next	1.3;

1.3
date	96.05.10.15.13.47;	author io;	state Exp;
branches;
next	1.2;

1.2
date	96.05.09.18.47.59;	author io;	state Exp;
branches;
next	1.1;

1.1
date	96.05.09.17.22.06;	author io;	state Exp;
branches;
next	;


desc
@new unit
@


1.4
log
@more tests
@
text
@(*  ==== Testing ====
 *
    Result: OK
 *
 *  Copyright (C) 1996 Harlequin Ltd.
 *
 *  Revision Log
 *  ------------
 *  $Log: basis:strings.sml,v $
 *  Revision 1.3  1996/05/10  15:13:47  io
 *  ongoing
 *
 *  Revision 1.2  1996/05/09  18:47:59  io
 *  some more tests..
 *
 *  Revision 1.1  1996/05/09  17:22:06  io
 *  new unit
 *
 *)
Shell.Module.loadSource "basis.toplevel";
Shell.Module.loadSource "basis.__chars";
Shell.Module.loadSource "basis.__strings";
Shell.Module.loadSource "basis.__list";
Shell.Module.loadSource "basis.__general";
Shell.Module.loadSource "basis.__charvector";
local
  open MLWorks.IO
  fun print s res = (output(std_out,s^":"^res^"\n"))
  fun check' s f = print s ((if f () then "OK" else "WRONG") handle exn => "FAIL:"^General.exnName exn)
  fun checkexn' s exn f = 
    let val result = (f (); "FAIL") handle ex =>
      if General.exnName ex = General.exnName exn then 
        "OKEXN" 
      else 
        "BADEXN:" ^ (General.exnName ex)
    in
      print s result
    end
      
  fun iterate (x,y) = if x>y then [] else x::iterate(x+1,y)
    
  val s1 = ""
  val s2 = "ABCDE\tFGHI"
  val ABCDE = map Char.chr (iterate (65, 69))

  val test1 = check' "test1" (fn _=>(map String.size [s1, s2]) = [0, 10])
  val test2 = check' "test2" (fn _=>String.sub(s2, 6) = Char.chr 70 andalso
                      String.sub(s2, 9) = Char.chr 73)
  val test3 = checkexn' "test3" Subscript (fn _=>String.sub(s1, 0))
  val test4 = checkexn' "test4" Subscript (fn _=>String.sub(s2, ~1))
  val test5 = checkexn' "test5" Subscript (fn _=>String.sub(s2, 10))

  fun foo (acc, 0) = acc
    | foo (acc, n) = 
    if n < 0 orelse n > Char.maxOrd then foo (#"_"::acc, n-1)
    else foo (Char.chr n :: acc, n-1)
  val longList = foo ([], String.maxSize)
  val test6a = check' "test6a" (fn _=>List.length longList = String.maxSize)
  val longString = String.implode longList
  val test6b = check' "test6b" (fn _=>String.size longString = String.maxSize)
  val test6 = checkexn' "test6" Size (fn _=>String.implode (#"1"::longList))
  val test7 = check' "test7" 
    (fn _=>
     String.isPrefix "abc" "abcd" andalso
     String.isPrefix "abc" "abc" andalso 
     not (String.isPrefix "abcd" "abc") andalso
     not (String.isPrefix "abxd" "abcdef") andalso
     String.substring("abcd", 2, 2) = "cd" andalso
     String.substring("abcd", 0, 4) = "abcd")
  val test8 = checkexn' "test8" Subscript
    (fn _=>String.substring ("abcd", ~1, 2))
  val test9 = checkexn' "test9" Subscript
    (fn _=>String.substring ("abcd", 0, 5))
  val isDelimiter = fn c=> c = #"a"
  val test10 = check' "test10"
    (fn _=>
     String.fields isDelimiter "aaa" = ["", "", "", ""] andalso
     String.fields isDelimiter "aa1" = ["", "", "1"] andalso
     String.fields isDelimiter "1aa" = ["1", "", ""] andalso
     String.fields isDelimiter "1a2a3" = ["1", "2", "3"] andalso
     String.fields isDelimiter "1a2a" = ["1", "2", ""] andalso
     String.fields isDelimiter "a1a2" = ["", "1", "2"])
  val test11 = check' "test11"
    (fn _=>
     String.extract ("abc", 0, NONE) = "abc" andalso
     String.extract ("abc",1, NONE) = "bc" andalso
     String.extract ("abc",1, SOME 1) = "b" andalso
     String.extract ("abc",3, NONE) = "" andalso
     String.extract ("abc", 3, SOME 0) = "")

  val test11a = checkexn' "test11a" Subscript 
    (fn _=>String.extract ("abc", ~1, NONE))
  val test11b = checkexn' "test11b" Subscript
    (fn _=>String.extract ("abc", 4, NONE))
  val test11c = checkexn' "test11c" Subscript
    (fn _=>String.extract ("abc", 3, SOME 1))
  val test11d = checkexn' "test11d" Subscript
    (fn _=>String.extract ("abc",3, SOME 2))
  val test11e = checkexn' "test11e" Subscript
    (fn _=>String.extract ("abc", 0, SOME ~1))
  val test11f = checkexn' "test11f" Subscript
    (fn _=>String.extract ("abc", 1, SOME (1+2)))
  val test11g = checkexn' "test11g" Subscript
    (fn _=>String.extract(s2, ~1, SOME 0))
  val test12a = check' "test12a"
    (fn _=> 
     s2 = String.substring(s2, 0, size s2) andalso 
     "" = String.substring(s2, size s2, 0) andalso
     "" = String.substring(s1, 0, 0))
  val test12b = checkexn' "test12b" Subscript
    (fn _=>String.substring(s2, ~1, 0))
  val test12c = checkexn' "test12c" Subscript 
    (fn _=>String.substring(s2, 11, 0))
  val test12d = checkexn' "test12d" Subscript
    (fn _=>String.substring(s2, 0, 11))
  val test12e = checkexn' "test12e" Subscript
    (fn _=>String.substring(s2, 10, 1))
  val test12f = check' "test12f"
    (fn _ => 
     "ABCDE" = String.substring(s2, 0, 5) andalso 
     "FGHI" = String.substring(s2, 6, 4))

  val test13a = check' "test13a" 
    (fn _=> 
     (String.translate (fn _ => "") s2 = "" andalso
      String.translate (fn x => String.str x) "" = "" andalso
      String.translate (fn x => String.str x) s2 = s2))

  val test13b = check' "test13b"
    (fn _ => 
     (String.translate 
      (fn c => if c = #"\t" then "XYZ " else String.str c)
      s2 
      = "ABCDEXYZ FGHI"))

  val test14 = check' "test14" 
    (fn _=> 
     (String.tokens Char.isSpace "" = []
      andalso String.tokens Char.isSpace "   \t \n" = []
      andalso String.tokens (fn c => c = #",") ",asd,,def,fgh" 
      = ["asd","def","fgh"]))

  val test15 = 
    check' "test15" 
    (fn _=> 
     (String.fields Char.isSpace "" = [""]
      andalso String.fields Char.isSpace "   \t \n" = ["","","","","","",""]
      andalso String.fields (fn c => c = #",") ",asd,,def,fgh" 
      = ["","asd","","def","fgh"]))
    
  val test16a = check' "test16a"
    (fn _ => 
     EQUAL = String.compare(s1,s1) andalso EQUAL = String.compare(s2,s2) andalso
     LESS = String.compare("A", "B") andalso
     GREATER = String.compare("B", "A") andalso
     LESS = String.compare("ABCD", "ABCDE") andalso
     GREATER = String.compare("ABCDE", "ABCD"))

  val test16b = check' "test16b"
    (fn _=> 
     EQUAL = String.compare(s1,s1) andalso EQUAL = String.compare(s2,s2) andalso
     LESS = String.compare("A", "a") andalso
     GREATER = String.compare("b", "B") andalso
     LESS = String.compare("abcd", "abcde") andalso
     GREATER = String.compare("abcde", "abcd"))

  val test17 = check' "test17"
    (fn _=>
     String.^("abc", "def") = "abcdef" andalso
     String.^("abc\000def", "ghi") = "abc\000defghi" andalso
     String.^("", "abc") = "abc" andalso
     String.^("", "\000") = "\000")
  
  val test17a = checkexn' "test17a" Size
    (fn _=>String.^(longString, "a"))

  val test18 = check' "test18slow"
    (fn _=>
     String.concat ((map String.str longList)) = longString)

  val test18a = checkexn' "test18a" Size
    (fn _=>
     String.concat ["a", longString])

  val test18b = check' "test18b"
    (fn _=>
     String.concat [] = "")
    
  val test19 = check' "test19"
    (fn _=>
     String.< (s1, s2) andalso
     not (String.< (s2, s1)) andalso
     not (String.< (s1, s1)) andalso
     not (String.< (s2, s2)) andalso

     String.<= (s1, s2) andalso
     not (String.<= (s2, s1)) andalso
     String.<= (s1, s1) andalso
     String.<= (s2, s2) andalso

     not (String.> (s1, s2)) andalso
     String.> (s2, s1) andalso
     not (String.> (s1, s1)) andalso
     not (String.> (s2, s2)) andalso
     
     not (String.>= (s1, s2)) andalso
     String.>= (s2, s1) andalso
     String.>= (s1, s1) andalso
     String.>= (s2, s2))

    val test20 = check' "test20"
      (fn _=>
       List.length (String.explode longString) = (String.size longString))
    val test20a = check' "test20a"
      (fn _=>
       String.explode "abc" = [#"a", #"b", #"c"])
      
      
    val test21 = check' "test21"
      (fn _=>
       String.collate Char.compare ("abc", "ABC") = GREATER andalso
       String.collate Char.compare ("abc", "abc") = EQUAL andalso
       String.collate Char.compare ("ABC", "abc") = LESS)
      
    val charList = 
      [(#"\n", "\\n"),
       (#"\t", "\\t"),
       (#"\000", "\\^@@"),
       (#"\001", "\\^A"),
       (#"\026", "\\^Z"),
       (#"\031", "\\^_"),
       (#"\032", " "),
       (#"\126", "~"),
       (#"\\", "\\\\"),
       (#"\"", "\\\""),
       (#"A", "A"),
       (#"\127", "\\127"),
       (#"\128", "\\128"),
       (#"\255", "\\255")]

    val test22 = check' "test22"
      (fn _=>
       String.toString (String.implode (map #1 charList)) =
       (String.concat (map #2 charList)))

    val charList2 = CharVector.tabulate (256, Char.chr)

    val test23 = check' "test23"
      (fn _=>
       String.fromString charList2 = SOME charList2)
      
in
  val it = ()
end@


1.3
log
@ongoing
@
text
@d10 3
d25 1
d214 4
d224 16
a239 3
       
       
       
d241 4
d246 1
a246 1
     
d248 4
@


1.2
log
@some more tests..
@
text
@d10 3
d50 3
a52 1
    | foo (acc, n) = foo (#"_"::acc, n-1)
d162 61
@


1.1
log
@new unit
@
text
@d9 4
a12 1
 *  $Log$
d74 83
@
