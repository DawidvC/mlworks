head	1.5;
access;
symbols
	MLWorks_21c0_1999_03_25:1.5
	MLWorks_20c1_1998_08_20:1.5
	MLWorks_20c0_1998_08_04:1.5
	MLWorks_20b2c2_1998_06_19:1.5
	MLWorks_20b2_Windows_1998_06_12:1.5
	MLWorks_20b1c1_1998_05_07:1.5
	MLWorks_20b0_1998_04_07:1.5
	MLWorks_20b0_1998_03_20:1.5
	MLWorks_20m2_1998_02_16:1.4
	MLWorks_20m1_1997_10_23:1.3
	MLWorks_11r1:1.1.1.1.1.1.1
	MLWorks_11c0_1997_09_09:1.1.1.1.1.1
	MLWorks_10r3:1.1.1.1.3
	MLWorks_10r2_551:1.1.1.1.2
	MLWorks_11:1.1.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.1.1.1
	MLWorks_20m0_1997_06_20:1.2
	MLWorks_1_0_r2c2_1997_06_14:1.1.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.1.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.1.1
	MLWorks_BugFix_1997_04_24:1.1
	MLWorks_1_0_r2_Win32_1997_04_11:1.1
	MLWorks_1_0_r2_Unix_1997_04_04:1.1;
locks; strict;
comment	@ *  @;


1.5
date	98.02.18.11.56.01;	author mitchell;	state Exp;
branches;
next	1.4;

1.4
date	97.11.21.15.01.29;	author daveb;	state Exp;
branches;
next	1.3;

1.3
date	97.08.08.14.10.27;	author brucem;	state Exp;
branches;
next	1.2;

1.2
date	97.05.28.15.55.44;	author matthew;	state Exp;
branches;
next	1.1;

1.1
date	97.01.30.14.45.30;	author andreww;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.05.12.11.08.40;	author hope;	state Exp;
branches
	1.1.1.1.1.1
	1.1.1.1.2.1
	1.1.1.1.3.1;
next	;

1.1.1.1.1.1
date	97.07.28.18.49.25;	author daveb;	state Exp;
branches
	1.1.1.1.1.1.1.1;
next	;

1.1.1.1.1.1.1.1
date	97.10.07.12.14.51;	author jkbrook;	state Exp;
branches;
next	;

1.1.1.1.2.1
date	97.09.08.17.41.07;	author daveb;	state Exp;
branches;
next	;

1.1.1.1.3.1
date	97.09.09.14.40.33;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
adapted Sestoft's vector test suite for realvectors.
@


1.5
log
@[Bug #30349]
Fix test to avoid non-unit sequence warning
@
text
@(*  ==== Testing ====
 *
 *  Result: OK
 *
 *  Revision Log
 *  ------------
 *  $Log: real_vectors.sml,v $
 *  Revision 1.4  1997/11/21  15:01:29  daveb
 *  [Bug #30323]
 *
 *  Revision 1.3  1997/08/08  14:10:27  brucem
 *  [Bug #30086]
 *  Test map and mapi.
 *
 *  Revision 1.2  1997/05/28  15:55:44  matthew
 *  Updating
 *
 *  Revision 1.1  1997/01/30  14:45:30  andreww
 *  new unit
 *  adapted Sestoft's vector test suite for realvectors.
 *
 *
 *
*)

(* test/vector.sml -- some test cases for Vector 
   PS 1994-12-10, 1995-06-14 
   modified for MLWorks Fri May 17 11:17:17 1996
 *)


infix 1 seq
fun e1 seq e2 = e2;
fun say s = print s

fun check b = if b then "OK" else "WRONG";
fun check' f = (if f () then "OK" else "WRONG") handle _ => "EXN";

fun range (from, to) p = 
    let open Int
    in
	(from > to) orelse (p from) andalso (range (from+1, to) p)
    end;

fun checkrange bounds = check o range bounds;


local
    open RealVector;
    infix 9 sub;
    infix eq
    val op eq = Real.==
in

infix ==
fun a == b =
  RealVector.length a = RealVector.length b
  andalso
  let
    fun scan i =
      if i = RealVector.length a
        then true
      else
        RealVector.sub (a,i) eq (RealVector.sub (b,i))
        andalso scan (i+1)
  in
    scan 0
  end

fun listEq ([],[]) = true
  | listEq (h::t,h'::t') = h eq h' andalso listEq(t,t')
  | listEq _ = false
fun listEq' ([],[]) = true
  | listEq' ((a,b)::t,(a',b')::t') = 
  a=a' andalso b eq b' andalso listEq'(t,t')
  | listEq' _ = false
  
val a = fromList [0.0,1.0,2.0,3.0,4.0,5.0,6.0];
val b = fromList [44.0,55.0,66.0];
val c = fromList [0.0,1.0,2.0,3.0,4.0,5.0,6.0];

val test1 = check'(fn _ => not(a == b));
val test2 = check'(fn _ => a == c);

val d = tabulate(100, fn i => real(i mod 7));

val test3 = check'(fn _ => d sub 27 eq 6.0);

val test4a = (tabulate(maxLen+1, fn i => real i) seq "WRONG")
             handle Size => "OK" | _ => "WRONG";

val test4b = (tabulate(~1, fn i => real i)       seq "WRONG")
             handle Size => "OK" | _ => "WRONG";

val test4c = check'(fn _ => length (tabulate(0, fn i => real(i div 0))) = 0);

val test5 = check'(fn _ => length (fromList []) = 0 andalso length a = 7);

val test6a = (c sub ~1 seq "WRONG") handle Subscript => "OK" | _ => "WRONG";
val test6b = (c sub 7  seq "WRONG") handle Subscript => "OK" | _ => "WRONG";
val test6c = check'(fn _ => c sub 0 eq 0.0);

val e = concat [d, b, d];

val test7 = check'(fn _ => length e = 203);


val test8 = check'(fn _ => length (concat []) = 0);

val f = extract (e, 100, SOME 3); 

val test9 = check'(fn _ => f == b);

val test9a = check'(fn _ => e == extract(e, 0, SOME (length e)) 
		    andalso e == extract(e, 0, NONE));
val test9b = check'(fn _ => fromList [] == extract(e, 100, SOME 0));
val test9c = (extract(e, ~1, SOME (length e))  seq "WRONG") 
             handle Subscript => "OK" | _ => "WRONG"
val test9d = (extract(e, length e + 1, SOME 0)  seq "WRONG") 
             handle Subscript => "OK" | _ => "WRONG"
val test9e = (extract(e, 0, SOME (length e+1)) seq "WRONG") 
             handle Subscript => "OK" | _ => "WRONG"
val test9f = (extract(e, 20, SOME ~1)        seq "WRONG") 
             handle Subscript => "OK" | _ => "EXN"
val test9g = (extract(e, ~1, NONE)  seq "WRONG") 
             handle Subscript => "OK" | _ => "WRONG"
val test9h = (extract(e, length e + 1, NONE)  seq "WRONG") 
             handle Subscript => "OK" | _ => "EXN"
val test9i = check'(fn _ => fromList [] == extract(e, length e, SOME 0)
		    andalso fromList [] == extract(e, length e, NONE));

  (* Test map and mapi *)
  val v = (fromList [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0]) ;

  val add1 = (fn i => i + 1.0) ;

  val addi = (fn (i, j) => Real.fromInt i + j) ;

  val testAa = check'
         (fn _ => (map add1 v) == fromList [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0]) ;
  val testAb = check'
         (fn _ => (map add1 (fromList [])) == (fromList [])) ;
  val testAc = check'
         (fn _ => (mapi addi (v, 0, NONE)) == fromList [0.0,2.0,4.0,6.0,8.0,10.0,12.0,14.0]);
  val testAd = check'
         (fn _ => (mapi addi (v, 1, NONE)) == fromList [2.0,4.0,6.0,8.0,10.0,12.0,14.0]);
  val testAe = check'
         (fn _ => (mapi addi (v, 7, NONE)) == fromList [14.0]);
  val testAf = 
         (ignore(mapi addi (v, ~1, NONE)); "WRONG") handle Subscript => "OKEXN"
                                                  | _ => "WRONG EXN" ;
  val testAga = check'
         (fn _ => (mapi addi (v, 8, NONE)) == fromList [])
  val testAgb =
         (ignore(mapi addi (v, 9, NONE)); "WRONG") handle Subscript => "OKEXN"
                                                  | _ => "WRONG EXN" ;
  val testAh =
         check' (fn _ => mapi addi (v, 0, SOME 2) == fromList [0.0, 2.0]) ;
  val testAi =
         check' (fn _ => mapi addi (v, 6, SOME 2) == fromList [12.0,14.0]) ;
  val testAj =
         (ignore(mapi addi (v,7,SOME 2)); "WRONG") handle Subscript => "OKEXN"
                                                 | _ => "WRONG EXN" ;
  val testAk = check'
         (fn _ => mapi addi (v, 2, SOME 0) == fromList [])
  val testAl =
         (ignore(mapi addi (v, 2, SOME ~1)); "WRONG") handle Subscript => "OKEXN"
                                                 | _ => "WRONG EXN" ;


end;
@


1.4
log
@[Bug #30323]
@
text
@d8 3
d150 1
a150 1
         (mapi addi (v, ~1, NONE) ; "WRONG") handle Subscript => "OKEXN"
d155 1
a155 1
         (mapi addi (v, 9, NONE) ; "WRONG") handle Subscript => "OKEXN"
d162 1
a162 1
         (mapi addi (v,7,SOME 2) ; "WRONG") handle Subscript => "OKEXN"
d167 1
a167 1
         (mapi addi (v, 2, SOME ~1) ; "WRONG") handle Subscript => "OKEXN"
@


1.3
log
@[Bug #30086]
Test map and mapi.
@
text
@d8 4
a27 1
Shell.Options.set (Shell.Options.ValuePrinter.maximumStrDepth,0);
a28 2
Shell.Build.loadSource "basis.__int";
Shell.Build.loadSource "basis.__real";
a42 2

Shell.Build.loadSource "basis.__real_vector";
@


1.2
log
@Updating
@
text
@d8 3
d129 39
@


1.1
log
@new unit
adapted Sestoft's vector test suite for realvectors.
@
text
@d7 5
a11 1
 *  $Log:,v $
d21 2
a24 3
val output = MLWorks.IO.output
val std_out = MLWorks.IO.std_out
val flush_out = MLWorks.IO.flush_out
d27 2
a28 1
fun say s = (output(std_out, s); flush_out std_out);
@


1.1.1.1
log
@branched from 1.1
@
text
@d7 1
a7 5
 *  $Log: real_vectors.sml,v $
 *  Revision 1.1  1997/01/30  14:45:30  andreww
 *  new unit
 *  adapted Sestoft's vector test suite for realvectors.
 *
@


1.1.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a7 3
 *  Revision 1.1.1.1  1997/05/12  11:08:40  hope
 *  branched from 1.1
 *
@


1.1.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a7 3
 *  Revision 1.1.1.1  1997/05/12  11:08:40  hope
 *  branched from 1.1
 *
@


1.1.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a7 3
 *  Revision 1.1.1.1  1997/05/12  11:08:40  hope
 *  branched from 1.1
 *
@


1.1.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a7 3
 *  Revision 1.1.1.1.1.1  1997/07/28  18:49:25  daveb
 *  branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@
