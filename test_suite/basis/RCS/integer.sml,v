head	1.6;
access;
symbols
	MLWorks_21c0_1999_03_25:1.6
	MLWorks_20c1_1998_08_20:1.6
	MLWorks_20c0_1998_08_04:1.6
	MLWorks_20b2c2_1998_06_19:1.6
	MLWorks_20b2_Windows_1998_06_12:1.6
	MLWorks_20b1c1_1998_05_07:1.6
	MLWorks_20b0_1998_04_07:1.6
	MLWorks_20b0_1998_03_20:1.6
	MLWorks_20m2_1998_02_16:1.6
	MLWorks_20m1_1997_10_23:1.5
	MLWorks_11r1:1.4.5.1.1.1.1
	MLWorks_11c0_1997_09_09:1.4.5.1.1.1
	MLWorks_10r3:1.4.5.1.3
	MLWorks_10r2_551:1.4.5.1.2
	MLWorks_11:1.4.5.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.4.5.1
	MLWorks_20m0_1997_06_20:1.5
	MLWorks_1_0_r2c2_1997_06_14:1.4.5.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.4.5.1
	MLWorks_1_0_r2c1_1997_05_12:1.4.5
	MLWorks_BugFix_1997_04_24:1.4
	MLWorks_1_0_r2_Win32_1997_04_11:1.4
	MLWorks_1_0_r2_Unix_1997_04_04:1.4
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.4.3.1.1
	MLWorks_gui_1996_12_18:1.4.4
	MLWorks_1_0_Win32_1996_12_17:1.4.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.4.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.4.1.1
	MLWorks_1_0_Irix_1996_11_28:1.4.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.4.2
	MLWorks_1_0_Unix_1996_11_14:1.4.1
	MLWorks_Open_Beta2_1996_10_11:1.1.2
	MLWorks_License_dev:1.1.1;
locks; strict;
comment	@ *  @;


1.6
date	97.11.21.15.01.13;	author daveb;	state Exp;
branches;
next	1.5;

1.5
date	97.05.28.14.53.33;	author matthew;	state Exp;
branches;
next	1.4;

1.4
date	96.11.06.13.37.56;	author andreww;	state Exp;
branches
	1.4.1.1
	1.4.2.1
	1.4.3.1
	1.4.4.1
	1.4.5.1;
next	1.3;

1.3
date	96.11.06.12.04.54;	author matthew;	state Exp;
branches;
next	1.2;

1.2
date	96.10.22.13.20.34;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	96.10.02.16.09.07;	author io;	state Exp;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	96.10.07.16.28.48;	author hope;	state Exp;
branches;
next	;

1.1.2.1
date	96.10.17.11.49.38;	author hope;	state Exp;
branches;
next	;

1.4.1.1
date	96.11.14.13.17.02;	author hope;	state Exp;
branches
	1.4.1.1.1.1;
next	;

1.4.1.1.1.1
date	96.11.28.15.27.28;	author hope;	state Exp;
branches;
next	;

1.4.2.1
date	96.11.22.18.34.49;	author hope;	state Exp;
branches;
next	;

1.4.3.1
date	96.12.17.18.13.46;	author hope;	state Exp;
branches
	1.4.3.1.1.1;
next	;

1.4.3.1.1.1
date	97.02.24.12.06.36;	author hope;	state Exp;
branches;
next	;

1.4.4.1
date	96.12.18.10.08.46;	author hope;	state Exp;
branches;
next	;

1.4.5.1
date	97.05.12.11.07.17;	author hope;	state Exp;
branches
	1.4.5.1.1.1
	1.4.5.1.2.1
	1.4.5.1.3.1;
next	;

1.4.5.1.1.1
date	97.07.28.18.50.08;	author daveb;	state Exp;
branches
	1.4.5.1.1.1.1.1;
next	;

1.4.5.1.1.1.1.1
date	97.10.07.12.15.16;	author jkbrook;	state Exp;
branches;
next	;

1.4.5.1.2.1
date	97.09.08.17.41.58;	author daveb;	state Exp;
branches;
next	;

1.4.5.1.3.1
date	97.09.09.14.41.23;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
[Bug #1628]
add Sestoft's test suite for Integer
@


1.6
log
@[Bug #30323]
@
text
@(* test/integer.sml -- here we test only the `exotic' operations
   PS 1995-02-25 
   modified for MLWorks Fri May 17 10:56:33 1996
   
   Result: OK
*)


(*included "~sml/basis/19960305/test/auxil.sml"; *)
Shell.Options.set (Shell.Options.ValuePrinter.maximumSeqSize,20000);

infix 1 seq
fun e1 seq e2 = e2;
fun say s = print s
fun check b = if b then "OK" else "WRONG";
fun check' f = (if f () then "OK" else "WRONG") handle _ => "EXN";

fun range (from, to) p = 
    let open Int
    in
	(from > to) orelse (p from) andalso (range (from+1, to) p)
    end;

fun checkrange bounds = check o range bounds;
(* end of included "~sml/basis/19960305/test/auxil.sml"; *)

local 
    open Int
      
    fun divmod (i, d, q, r)  = check(i div d = q andalso i mod d = r);
    fun quotrem (i, d, q, r) = check(quot (i,d) = q andalso rem(i, d) = r);
in	

val test1a = divmod(10, 3, 3, 1);
val test1b = divmod(~10, 3, ~4, 2);
val test1c = divmod(~10, ~3, 3, ~1);
val test1d = divmod(10, ~3, ~4, ~2);

val test2a = quotrem(10, 3, 3, 1);
val test2b = quotrem(~10, 3, ~3, ~1);
val test2c = quotrem(~10, ~3, 3, ~1);
val test2d = quotrem(10, ~3, ~3, 1);

val test3 = check(max(~5, 2) =  2 andalso max(5, 2) = 5);
val test4 = check(min(~5, 3) = ~5 andalso min(5, 2) = 2);

val test5 = check(sign ~57 = ~1 andalso sign 99 = 1 andalso sign 0 = 0);
val test6 = check(sameSign(~255, ~256) andalso sameSign(255, 256) 
		  andalso sameSign(0, 0));

local 
    val args = [0.0, 99.0, ~5.0, 1.1, ~1.1, 1.9, ~1.9, 2.5, ~2.5, 
		1000001.4999, ~1000001.4999];
in
val test7  = check(map Real.ceil args  
		   = [0, 99, ~5, 2, ~1, 2, ~1, 3, ~2, 1000002, ~1000001]);
val test8  = check(map Real.floor args 
		   = [0, 99, ~5, 1, ~2, 1, ~2, 2, ~3, 1000001, ~1000002]);
val test9  = check(map Real.trunc args 
		   = [0, 99, ~5, 1, ~1, 1, ~1, 2, ~2, 1000001, ~1000001]);
val test10 = check(map Real.round args 
		   = [0, 99, ~5, 1, ~1, 2, ~2, 2, ~2, 1000001, ~1000001]);
end

val test11 = check(Real.== (0.0,real 0) andalso Real.== (2.0,real 2) andalso Real.== (~2.0,real ~2));

val test12 = 
    case (minInt, maxInt) of
	(SOME mi, SOME ma) =>
	    check(sign mi = ~1 andalso sign ma = 1 
		  andalso sameSign(mi, ~1) andalso sameSign(ma, 1))
      | (NONE, NONE)       => "OK"
      | _                  => "WRONG";

fun chk f (s, r) = 
    check'(fn _ => 
	   case f s of
	       SOME res => res = r
	     | NONE     => false)

fun chkScan fmt = chk (StringCvt.scanString (scan fmt))

val test13a = 
    List.map (chk fromString)
             [("10789", 10789),
	      ("+10789", 10789),
	      ("~10789", ~10789),
	      ("-10789", ~10789),
	      (" \n\t10789crap", 10789),
	      (" \n\t+10789crap", 10789),
	      (" \n\t~10789crap", ~10789),
	      (" \n\t-10789crap", ~10789)
	      ];

val test13b = 
    List.map (fn s => case fromString s of NONE => "OK" | _ => "WRONG")
	   ["", "-", "~", "+", " \n\t", " \n\t-", " \n\t~", " \n\t+", 
	    "+ 1", "~ 1", "- 1", "ff"];	    

val test14a = 
    List.map (chkScan StringCvt.DEC)
             [("10789", 10789),
	      ("+10789", 10789),
	      ("~10789", ~10789),
	      ("-10789", ~10789),
	      (" \n\t10789crap", 10789),
	      (" \n\t+10789crap", 10789),
	      (" \n\t~10789crap", ~10789),
	      (" \n\t-10789crap", ~10789),
	      ("0", 0),
	      ("00",0),
	      ("+0",0),
	      ("-0",0),
	      ("~0",0),
	      ("001",1),
	      ("1",1)];


val test14b = 
    List.map (fn s => case StringCvt.scanString (scan StringCvt.DEC) s 
	              of NONE => "OK" | _ => "WRONG")
	   ["", "-", "~", "+", " \n\t", " \n\t-", " \n\t~", " \n\t+", 
	    "+ 1", "~ 1", "- 1", "ff"];	    

val test15a = 
    List.map (chkScan StringCvt.BIN)
             [("10010", 18),
	      ("+10010", 18),
	      ("~10010", ~18),
	      ("-10010", ~18),
	      (" \n\t10010crap", 18),
	      (" \n\t+10010crap", 18),
	      (" \n\t~10010crap", ~18),
	      (" \n\t-10010crap", ~18),
	      ("0", 0),
	      ("00",0),
	      ("+0",0),
	      ("-0",0),
	      ("~0",0),
	      ("001",1),
	      ("1",1)];

val test15b = 
    List.map (fn s => case StringCvt.scanString (scan StringCvt.BIN) s 
	              of NONE => "OK" | _ => "WRONG")
	   ["", "-", "~", "+", " \n\t", " \n\t-", " \n\t~", " \n\t+", 
	    "+ 1", "~ 1", "- 1", "2", "8", "ff"];

val test16a = 
    List.map (chkScan StringCvt.OCT)
             [("2071", 1081),
	      ("+2071", 1081),
	      ("~2071", ~1081),
	      ("-2071", ~1081),
	      (" \n\t2071crap", 1081),
	      (" \n\t+2071crap", 1081),
	      (" \n\t~2071crap", ~1081),
	      (" \n\t-2071crap", ~1081),
	      ("0", 0),
	      ("00",0),
	      ("+0",0),
	      ("-0",0),
	      ("~0",0),
	      ("001",1),
	      ("1",1)];

val test16b = 
    List.map (fn s => case StringCvt.scanString (scan StringCvt.OCT) s 
	              of NONE => "OK" | _ => "WRONG")
	   ["", "-", "~", "+", " \n\t", " \n\t-", " \n\t~", " \n\t+", 
	    "+ 1", "~ 1", "- 1", "8", "ff"];

val test17a = 
    List.map (chkScan StringCvt.HEX)
             [("20Af", 8367),
	      ("+20Af", 8367),
	      ("~20Af", ~8367),
	      ("-20Af", ~8367),
	      (" \n\t20AfGrap", 8367),
	      (" \n\t+20AfGrap", 8367),
	      (" \n\t~20AfGrap", ~8367),
	      (" \n\t-20AfGrap", ~8367),
	      ("0", 0),
	      ("00",0),
	      ("+0",0),
	      ("-0",0),
	      ("~0",0),
	      ("001",1),
	      ("1",1),
	      ("0x1",1),
	      ("0X1",1),
	      ("0x000f",15),
	      ("~0x0f", ~15),
	      ("-0xf", ~15),
	      ("+0x0f", 15),
	      ("+f", 15),
	      ("0x22zzzz1", 34)];

val test17b = 
    List.map (fn s => case StringCvt.scanString (scan StringCvt.HEX) s 
	              of NONE => "OK" | _ => "WRONG")
	   ["", "-", "~", "+", " \n\t", " \n\t-", " \n\t~", " \n\t+", 
	    "+ 1", "~ 1", "- 1", "0x", "0x~1", "\n\t+x1", "0Xg", "0x-f"];


local 
    fun fromToString i = 
	fromString (toString i) = SOME i;

    fun scanFmt radix i = 
	StringCvt.scanString (scan radix) (fmt radix i) = SOME i;

    fun fromS radix s = 
      StringCvt.scanString (scan radix) s
      

in
val test18 = 
    check'(fn _ => range (~1200, 1200) fromToString);

val test19 = 
    check'(fn _ => range (~1200, 1200) (scanFmt StringCvt.BIN));

val test20 = 
    check'(fn _ => range (~1200, 1200) (scanFmt StringCvt.OCT));

val test21 = 
    check'(fn _ => range (~1200, 1200) (scanFmt StringCvt.DEC));

val test22 = 
    check'(fn _ => range (~1200, 1200) (scanFmt StringCvt.HEX));

end
end
@


1.5
log
@Updating for new stuff
@
text
@a7 1
Shell.Options.set (Shell.Options.ValuePrinter.maximumStrDepth,0);
a9 1
Shell.Build.loadSource "basis.__int";
a25 5

Shell.Build.loadSource "basis.__int";
Shell.Build.loadSource "basis.__real";
Shell.Build.loadSource "basis.__string_cvt";
Shell.Build.loadSource "basis.__list";
@


1.4
log
@[Bug #1711]
real no longer equality type
@
text
@d8 2
a12 1
Shell.Options.set(Shell.Options.Language.oldDefinition,true);
a13 3
val output = MLWorks.IO.output
val std_out = MLWorks.IO.std_out
val flush_out = MLWorks.IO.flush_out
d16 1
a16 1
fun say s = (output(std_out, s); flush_out std_out);
d72 1
a72 1
val test11 = check(0.0 = real 0 andalso 2.0 = real 2 andalso ~2.0 = real ~2);
@


1.4.5.1
log
@branched from 1.4
@
text
@@


1.4.5.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@@


1.4.5.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@@


1.4.5.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@@


1.4.5.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@


1.4.4.1
log
@branched from 1.4
@
text
@@


1.4.3.1
log
@branched from 1.4
@
text
@@


1.4.3.1.1.1
log
@branched from 1.4.3.1
@
text
@@


1.4.2.1
log
@branched from 1.4
@
text
@@


1.4.1.1
log
@branched from 1.4
@
text
@@


1.4.1.1.1.1
log
@branched from 1.4.1.1
@
text
@@


1.3
log
@[Bug #1728]
__integer becomes __int
@
text
@d11 1
@


1.2
log
@Remove references to toplevel
@
text
@d9 1
a9 1
Shell.Build.loadSource "basis.__integer";
d30 1
a30 1
Shell.Build.loadSource "basis.__integer";
@


1.1
log
@new unit
[Bug #1628]
add Sestoft's test suite for Integer
@
text
@a8 1
Shell.Build.loadSource "basis.toplevel";
@


1.1.2.1
log
@branched from 1.1
@
text
@@


1.1.1.1
log
@branched from 1.1
@
text
@@
