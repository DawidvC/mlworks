head	1.7;
access;
symbols
	MLWorks_21c0_1999_03_25:1.7
	MLWorks_20c1_1998_08_20:1.7
	MLWorks_20c0_1998_08_04:1.7
	MLWorks_20b2c2_1998_06_19:1.7
	MLWorks_20b2_Windows_1998_06_12:1.7
	MLWorks_20b1c1_1998_05_07:1.7
	MLWorks_20b0_1998_04_07:1.7
	MLWorks_20b0_1998_03_20:1.7
	MLWorks_20m2_1998_02_16:1.7
	MLWorks_20m1_1997_10_23:1.6
	MLWorks_11r1:1.5.1.1.1.1.1
	MLWorks_11c0_1997_09_09:1.5.1.1.1.1
	MLWorks_10r3:1.5.1.1.3
	MLWorks_10r2_551:1.5.1.1.2
	MLWorks_11:1.5.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.5.1.1
	MLWorks_20m0_1997_06_20:1.6
	MLWorks_1_0_r2c2_1997_06_14:1.5.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.5.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.5.1
	MLWorks_BugFix_1997_04_24:1.5
	MLWorks_1_0_r2_Win32_1997_04_11:1.5
	MLWorks_1_0_r2_Unix_1997_04_04:1.5
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.4.3.1.1
	MLWorks_gui_1996_12_18:1.4.4
	MLWorks_1_0_Win32_1996_12_17:1.4.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.4.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.4.1.1
	MLWorks_1_0_Irix_1996_11_28:1.4.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.4.2
	MLWorks_1_0_Unix_1996_11_14:1.4.1
	MLWorks_Open_Beta2_1996_10_11:1.1.2
	MLWorks_License_dev:1.1.1;
locks; strict;
comment	@# @;


1.7
date	97.11.25.19.19.23;	author daveb;	state Exp;
branches;
next	1.6;

1.6
date	97.05.28.14.54.08;	author matthew;	state Exp;
branches;
next	1.5;

1.5
date	97.03.06.13.51.22;	author matthew;	state Exp;
branches
	1.5.1.1;
next	1.4;

1.4
date	96.11.07.16.25.28;	author matthew;	state Exp;
branches
	1.4.1.1
	1.4.2.1
	1.4.3.1
	1.4.4.1;
next	1.3;

1.3
date	96.11.05.13.28.46;	author andreww;	state Exp;
branches;
next	1.2;

1.2
date	96.10.22.13.27.45;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	96.10.02.16.08.53;	author io;	state Exp;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	96.10.07.16.29.03;	author hope;	state Exp;
branches;
next	;

1.1.2.1
date	96.10.17.11.49.51;	author hope;	state Exp;
branches;
next	;

1.4.1.1
date	96.11.14.13.17.14;	author hope;	state Exp;
branches
	1.4.1.1.1.1;
next	;

1.4.1.1.1.1
date	96.11.28.15.27.44;	author hope;	state Exp;
branches;
next	;

1.4.2.1
date	96.11.22.18.35.04;	author hope;	state Exp;
branches;
next	;

1.4.3.1
date	96.12.17.18.14.01;	author hope;	state Exp;
branches
	1.4.3.1.1.1;
next	;

1.4.3.1.1.1
date	97.02.24.12.06.52;	author hope;	state Exp;
branches;
next	;

1.4.4.1
date	96.12.18.10.08.59;	author hope;	state Exp;
branches;
next	;

1.5.1.1
date	97.05.12.11.07.32;	author hope;	state Exp;
branches
	1.5.1.1.1.1
	1.5.1.1.2.1
	1.5.1.1.3.1;
next	;

1.5.1.1.1.1
date	97.07.28.18.50.35;	author daveb;	state Exp;
branches
	1.5.1.1.1.1.1.1;
next	;

1.5.1.1.1.1.1.1
date	97.10.07.12.14.36;	author jkbrook;	state Exp;
branches;
next	;

1.5.1.1.2.1
date	97.09.08.17.42.21;	author daveb;	state Exp;
branches;
next	;

1.5.1.1.3.1
date	97.09.09.14.41.47;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
[Bug #1628]
add Integer test suite from Sestofts stuff with additional checks
@


1.7
log
@[Bug #30323]
@
text
@val it : unit = ()
infix 1 seq
val seq : ('a * 'b) -> 'b = fn
val check : bool -> string = fn
val say : string -> unit = fn
val check' : (unit -> bool) -> string = fn
val range : (int * int) -> (int -> bool) -> bool = fn
val checkrange : (int * int) -> (int -> bool) -> string = fn
val chk : ('a -> ''b option) -> ('a * ''b) -> string = fn
val chkScan : StringCvt.radix -> (string * int) -> string = fn
val test10 : string = "OK"
val test11 : string = "OK"
val test12 : string = "OK"
val test13a : string list = ["OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK"]
val test13b : string list = ["OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK"]
val test14a : string list = ["OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK"]
val test14b : string list = ["OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK"]
val test15a : string list = ["OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK"]
val test15b : string list = ["OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK"]
val test16a : string list = ["OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK"]
val test16b : string list = ["OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK"]
val test17a : string list = ["OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK"]
val test17b : string list = ["OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK", "OK"]
val test18 : string = "OK"
val test19 : string = "OK"
val test1a : string = "OK"
val test1b : string = "OK"
val test1c : string = "OK"
val test1d : string = "OK"
val test20 : string = "OK"
val test21 : string = "OK"
val test22 : string = "OK"
val test2a : string = "OK"
val test2b : string = "OK"
val test2c : string = "OK"
val test2d : string = "OK"
val test3 : string = "OK"
val test4 : string = "OK"
val test5 : string = "OK"
val test6 : string = "OK"
val test7 : string = "OK"
val test8 : string = "OK"
val test9 : string = "OK"
@


1.6
log
@Updating for new stuff
@
text
@a1 3
val it : unit = ()
structure Int = struct ... end
val it : unit = ()
a8 8
val it : unit = ()
val it : unit = ()
structure LargeReal = struct ... end
structure Real = struct ... end
val it : unit = ()
structure StringCvt = struct ... end
val it : unit = ()
structure List = struct ... end
@


1.5
log
@Updating


Updating
@
text
@a1 33
structure Int =
  struct
    eqtype int = int
    val * : (int * int) -> int = fn
    val + : (int * int) -> int = fn
    val - : (int * int) -> int = fn
    val < : (int * int) -> bool = fn
    val <= : (int * int) -> bool = fn
    val > : (int * int) -> bool = fn
    val >= : (int * int) -> bool = fn
    val abs : int -> int = fn
    val compare : (int * int) -> order = fn
    val div : (int * int) -> int = fn
    val fmt : radix(hidden) -> int -> string = fn
    val fromInt : int -> int = fn
    val fromLarge : MLWorks.Internal.Types.int32 -> int = fn
    val fromString : string -> int option = fn
    val max : (int * int) -> int = fn
    val maxInt : int option = SOME 536870911
    val min : (int * int) -> int = fn
    val minInt : int option = SOME ~536870912
    val mod : (int * int) -> int = fn
    val precision : int option = SOME 30
    val quot : (int * int) -> int = fn
    val rem : (int * int) -> int = fn
    val sameSign : (int * int) -> bool = fn
    val scan : radix(hidden) -> ('a -> (char * 'a) option) -> 'a -> (int * 'a) option = fn
    val sign : int -> int = fn
    val toInt : int -> int = fn
    val toLarge : int -> MLWorks.Internal.Types.int32 = fn
    val toString : int -> string = fn
    val ~ : int -> int = fn
  end
d3 1
a5 2
val flush_out : MLWorks.IO.outstream -> unit = fn
val output : (MLWorks.IO.outstream * string) -> unit = fn
d7 1
a7 1
val std_out : MLWorks.IO.outstream = FLEXOUT(FLEXOUTSTREAM(ref(RIGIDOUTSTREAM {close_out=fn, closed_out=fn, flush_out=fn, output=fn})))
a8 1
val check : bool -> string = fn
d14 2
a15 174
structure LargeReal =
  struct
    structure Math =
      struct
        eqtype real = real
        val acos : real -> real = fn
        val asin : real -> real = fn
        val atan : real -> real = fn
        val atan2 : (real * real) -> real = fn
        val cos : real -> real = fn
        val cosh : real -> real = fn
        val e : real = 2.718281828
        val exp : real -> real = fn
        val ln : real -> real = fn
        val log10 : real -> real = fn
        val pi : real = 3.141592654
        val pow : (real * real) -> real = fn
        val sin : real -> real = fn
        val sinh : real -> real = fn
        val sqrt : real -> real = fn
        val tan : real -> real = fn
        val tanh : real -> real = fn
      end
    eqtype real = real
    val != : (real * real) -> bool = fn
    val * : (real * real) -> real = fn
    val *+ : (real * real * real) -> real = fn
    val *- : (real * real * real) -> real = fn
    val + : (real * real) -> real = fn
    val - : (real * real) -> real = fn
    val / : (real * real) -> real = fn
    val < : (real * real) -> bool = fn
    val <= : (real * real) -> bool = fn
    val <> : (real * real) -> bool = fn
    val == : (real * real) -> bool = fn
    val > : (real * real) -> bool = fn
    val >= : (real * real) -> bool = fn
    val ?= : (real * real) -> bool = fn
    val abs : real -> real = fn
    val ceil : real -> int = fn
    val checkFloat : real -> real = fn
    val class : real -> float_class(hidden) = fn
    val compare : (real * real) -> order = fn
    val compareReal : (real * real) -> real_order(hidden) = fn
    val copySign : (real * real) -> real = fn
    val floor : real -> int = fn
    val fmt : realfmt(hidden) -> real -> string = fn
    val fromDecimal : {digits: int list, exp: int, kind: float_class(hidden), sign: bool} -> real = fn
    val fromInt : int -> real = fn
    val fromLarge : rounding_mode(hidden) -> real -> real = fn
    val fromLargeInt : MLWorks.Internal.Types.int32 -> real = fn
    val fromManExp : {exp: int, man: real} -> real = fn
    val fromString : string -> real option = fn
    val isFinite : real -> bool = fn
    val isNan : real -> bool = fn
    val isNormal : real -> bool = fn
    val max : (real * real) -> real = fn
    val maxFinite : real = 1.797693135E308
    val min : (real * real) -> real = fn
    val minNormalPos : real = 2.225073859E~308
    val minPos : real = 4.940656458E~324
    val negInf : real = ~inf
    val nextAfter : (real * real) -> real = fn
    val posInf : real = inf
    val precision : int = 53
    val radix : int = 2
    val realCeil : real -> real = fn
    val realFloor : real -> real = fn
    val realMod : real -> real = fn
    val realTrunc : real -> real = fn
    val rem : (real * real) -> real = fn
    val round : real -> int = fn
    val sameSign : (real * real) -> bool = fn
    val scan : ('a -> (char * 'a) option) -> 'a -> (real * 'a) option = fn
    val sign : real -> int = fn
    val signBit : real -> bool = fn
    val split : real -> {frac: real, whole: real} = fn
    val toDecimal : real -> {digits: int list, exp: int, kind: float_class(hidden), sign: bool} = fn
    val toInt : rounding_mode(hidden) -> real -> int = fn
    val toLarge : real -> real = fn
    val toLargeInt : rounding_mode(hidden) -> real -> MLWorks.Internal.Types.int32 = fn
    val toManExp : real -> {exp: int, man: real} = fn
    val toString : real -> string = fn
    val trunc : real -> int = fn
    val unordered : (real * real) -> bool = fn
    val ~ : real -> real = fn
  end
structure Real =
  struct
    structure Math =
      struct
        eqtype real = real
        val acos : real -> real = fn
        val asin : real -> real = fn
        val atan : real -> real = fn
        val atan2 : (real * real) -> real = fn
        val cos : real -> real = fn
        val cosh : real -> real = fn
        val e : real = 2.718281828
        val exp : real -> real = fn
        val ln : real -> real = fn
        val log10 : real -> real = fn
        val pi : real = 3.141592654
        val pow : (real * real) -> real = fn
        val sin : real -> real = fn
        val sinh : real -> real = fn
        val sqrt : real -> real = fn
        val tan : real -> real = fn
        val tanh : real -> real = fn
      end
    eqtype real = real
    val != : (real * real) -> bool = fn
    val * : (real * real) -> real = fn
    val *+ : (real * real * real) -> real = fn
    val *- : (real * real * real) -> real = fn
    val + : (real * real) -> real = fn
    val - : (real * real) -> real = fn
    val / : (real * real) -> real = fn
    val < : (real * real) -> bool = fn
    val <= : (real * real) -> bool = fn
    val <> : (real * real) -> bool = fn
    val == : (real * real) -> bool = fn
    val > : (real * real) -> bool = fn
    val >= : (real * real) -> bool = fn
    val ?= : (real * real) -> bool = fn
    val abs : real -> real = fn
    val ceil : real -> int = fn
    val checkFloat : real -> real = fn
    val class : real -> float_class(hidden) = fn
    val compare : (real * real) -> order = fn
    val compareReal : (real * real) -> real_order(hidden) = fn
    val copySign : (real * real) -> real = fn
    val floor : real -> int = fn
    val fmt : realfmt(hidden) -> real -> string = fn
    val fromDecimal : {digits: int list, exp: int, kind: float_class(hidden), sign: bool} -> real = fn
    val fromInt : int -> real = fn
    val fromLarge : rounding_mode(hidden) -> real -> real = fn
    val fromLargeInt : MLWorks.Internal.Types.int32 -> real = fn
    val fromManExp : {exp: int, man: real} -> real = fn
    val fromString : string -> real option = fn
    val isFinite : real -> bool = fn
    val isNan : real -> bool = fn
    val isNormal : real -> bool = fn
    val max : (real * real) -> real = fn
    val maxFinite : real = 1.797693135E308
    val min : (real * real) -> real = fn
    val minNormalPos : real = 2.225073859E~308
    val minPos : real = 4.940656458E~324
    val negInf : real = ~inf
    val nextAfter : (real * real) -> real = fn
    val posInf : real = inf
    val precision : int = 53
    val radix : int = 2
    val realCeil : real -> real = fn
    val realFloor : real -> real = fn
    val realMod : real -> real = fn
    val realTrunc : real -> real = fn
    val rem : (real * real) -> real = fn
    val round : real -> int = fn
    val sameSign : (real * real) -> bool = fn
    val scan : ('a -> (char * 'a) option) -> 'a -> (real * 'a) option = fn
    val sign : real -> int = fn
    val signBit : real -> bool = fn
    val split : real -> {frac: real, whole: real} = fn
    val toDecimal : real -> {digits: int list, exp: int, kind: float_class(hidden), sign: bool} = fn
    val toInt : rounding_mode(hidden) -> real -> int = fn
    val toLarge : real -> real = fn
    val toLargeInt : rounding_mode(hidden) -> real -> MLWorks.Internal.Types.int32 = fn
    val toManExp : real -> {exp: int, man: real} = fn
    val toString : real -> string = fn
    val trunc : real -> int = fn
    val unordered : (real * real) -> bool = fn
    val ~ : real -> real = fn
  end
d17 1
a17 31
structure StringCvt =
  struct
    eqtype cs = int
    datatype radix =
      BIN |
      DEC |
      HEX |
      OCT
    type ('a, 'b) reader = 'b -> ('a * 'b) option
    datatype realfmt =
      EXACT |
      FIX of int option |
      GEN of int option |
      SCI of int option
    val BIN : StringCvt.radix
    val DEC : StringCvt.radix
    val EXACT : StringCvt.realfmt
    val FIX : int option -> StringCvt.realfmt
    val GEN : int option -> StringCvt.realfmt
    val HEX : StringCvt.radix
    val OCT : StringCvt.radix
    val SCI : int option -> StringCvt.realfmt
    val dropl : (char -> bool) -> ('a -> (char * 'a) option) -> 'a -> 'a = fn
    val padLeft : char -> int -> string -> string = fn
    val padRight : char -> int -> string -> string = fn
    val scanList : ((char list -> (char * char list) option) -> char list -> ('a * 'b) option) -> char list -> 'a option = fn
    val scanString : ((int -> (char * int) option) -> int -> ('a * int) option) -> string -> 'a option = fn
    val skipWS : ('a -> (char * 'a) option) -> 'a -> 'a = fn
    val splitl : (char -> bool) -> ('a -> (char * 'a) option) -> 'a -> (string * 'a) = fn
    val takel : (char -> bool) -> ('a -> (char * 'a) option) -> 'a -> string = fn
  end
d19 1
a19 27
structure List =
  struct
    val @@ : ('a list * 'a list) -> 'a list = fn
    exception Empty
    val all : ('a -> bool) -> 'a list -> bool = fn
    val app : ('a -> unit) -> 'a list -> unit = fn
    val concat : 'a list list -> 'a list = fn
    val drop : ('a list * int) -> 'a list = fn
    val exists : ('a -> bool) -> 'a list -> bool = fn
    val filter : ('a -> bool) -> 'a list -> 'a list = fn
    val find : ('a -> bool) -> 'a list -> 'a option = fn
    val foldl : (('a * 'b) -> 'b) -> 'b -> 'a list -> 'b = fn
    val foldr : (('a * 'b) -> 'b) -> 'b -> 'a list -> 'b = fn
    val hd : 'a list -> 'a = fn
    val last : 'a list -> 'a = fn
    val length : 'a list -> int = fn
    val map : ('a -> 'b) -> 'a list -> 'b list = fn
    val mapPartial : ('a -> 'b option) -> 'a list -> 'b list = fn
    val nth : ('a list * int) -> 'a = fn
    val null : 'a list -> bool = fn
    val partition : ('a -> bool) -> 'a list -> ('a list * 'a list) = fn
    val rev : 'a list -> 'a list = fn
    val revAppend : ('a list * 'a list) -> 'a list = fn
    val tabulate : (int * (int -> 'a)) -> 'a list = fn
    val take : ('a list * int) -> 'a list = fn
    val tl : 'a list -> 'a list = fn
  end
@


1.5.1.1
log
@branched from 1.5
@
text
@@


1.5.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@@


1.5.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@@


1.5.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@@


1.5.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@


1.4
log
@Updating
@
text
@d73 1
a85 1
    val ?<> : (real * real) -> bool = fn
a93 1
    val equal : (real * real) -> bool = fn
d96 1
d115 4
d126 1
d160 1
a172 1
    val ?<> : (real * real) -> bool = fn
a180 1
    val equal : (real * real) -> bool = fn
d183 1
d202 4
d213 1
d234 1
d240 1
@


1.4.4.1
log
@branched from 1.4
@
text
@@


1.4.3.1
log
@branched from 1.4
@
text
@@


1.4.3.1.1.1
log
@branched from 1.4.3.1
@
text
@@


1.4.2.1
log
@branched from 1.4
@
text
@@


1.4.1.1
log
@branched from 1.4
@
text
@@


1.4.1.1.1.1
log
@branched from 1.4.1.1
@
text
@@


1.3
log
@[Bug #1711]
real no longer equality type
@
text
@d49 82
@


1.2
log
@Remove references to toplevel
@
text
@d36 1
d81 2
d85 2
d94 1
d100 1
a100 1
    val fromSci : {exp: int, man: real} -> real = fn
d125 1
a125 1
    val toSci : real -> {exp: int, man: real} = fn
a127 1
    val unequal : (real * real) -> bool = fn
@


1.1
log
@new unit
[Bug #1628]
add Integer test suite from Sestofts stuff with additional checks
@
text
@a1 1
val it : unit = ()
@


1.1.2.1
log
@branched from 1.1
@
text
@@


1.1.1.1
log
@branched from 1.1
@
text
@@
