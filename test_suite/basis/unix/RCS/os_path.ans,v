head	1.12;
access;
symbols
	MLWorks_21c0_1999_03_25:1.11
	MLWorks_20c1_1998_08_20:1.11
	MLWorks_20c0_1998_08_04:1.11
	MLWorks_20b2c2_1998_06_19:1.11
	MLWorks_20b2_Windows_1998_06_12:1.11
	MLWorks_20b1c1_1998_05_07:1.11
	MLWorks_20b0_1998_04_07:1.11
	MLWorks_20b0_1998_03_20:1.11
	MLWorks_20m2_1998_02_16:1.11
	MLWorks_20m1_1997_10_23:1.9
	MLWorks_11r1:1.9.1.1.1.1.1
	MLWorks_11c0_1997_09_09:1.9.1.1.1.1
	MLWorks_10r3:1.9.1.1.3
	MLWorks_10r2_551:1.9.1.1.2
	MLWorks_11:1.9.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.9.1.1
	MLWorks_20m0_1997_06_20:1.9
	MLWorks_1_0_r2c2_1997_06_14:1.9.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.9.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.9.1
	MLWorks_BugFix_1997_04_24:1.9
	MLWorks_1_0_r2_Win32_1997_04_11:1.9
	MLWorks_1_0_r2_Unix_1997_04_04:1.9
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.7.3.1.1
	MLWorks_gui_1996_12_18:1.7.4
	MLWorks_1_0_Win32_1996_12_17:1.7.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.7.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.7.1.1
	MLWorks_1_0_Irix_1996_11_28:1.7.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.7.2
	MLWorks_1_0_Unix_1996_11_14:1.7.1
	MLWorks_Open_Beta2_1996_10_11:1.5.3
	MLWorks_License_dev:1.5.2
	MLWorks_1_open_beta_1996_09_13:1.5.1
	MLWorks_Open_Beta_1996_08_22:1.2
	MLWorks_Beta_1996_07_02:1.1;
locks; strict;
comment	@# @;


1.12
date	99.04.20.17.33.13;	author daveb;	state Exp;
branches;
next	1.11;

1.11
date	97.11.26.14.09.15;	author daveb;	state Exp;
branches;
next	1.10;

1.10
date	97.11.14.15.04.37;	author jont;	state Exp;
branches;
next	1.9;

1.9
date	97.03.05.12.50.51;	author jont;	state Exp;
branches
	1.9.1.1;
next	1.8;

1.8
date	97.03.05.11.53.19;	author jont;	state Exp;
branches;
next	1.7;

1.7
date	96.11.11.09.52.57;	author matthew;	state Exp;
branches
	1.7.1.1
	1.7.2.1
	1.7.3.1
	1.7.4.1;
next	1.6;

1.6
date	96.10.22.13.32.57;	author jont;	state Exp;
branches;
next	1.5;

1.5
date	96.09.09.11.14.01;	author io;	state Exp;
branches
	1.5.1.1
	1.5.2.1
	1.5.3.1;
next	1.4;

1.4
date	96.09.07.00.02.27;	author io;	state Exp;
branches;
next	1.3;

1.3
date	96.08.29.00.09.39;	author stephenb;	state Exp;
branches;
next	1.2;

1.2
date	96.08.14.15.50.48;	author io;	state Exp;
branches;
next	1.1;

1.1
date	96.06.20.11.31.28;	author stephenb;	state Exp;
branches;
next	;

1.5.1.1
date	96.09.13.11.37.44;	author hope;	state Exp;
branches;
next	;

1.5.2.1
date	96.10.07.16.29.00;	author hope;	state Exp;
branches;
next	;

1.5.3.1
date	96.10.17.11.49.48;	author hope;	state Exp;
branches;
next	;

1.7.1.1
date	96.11.14.13.17.12;	author hope;	state Exp;
branches
	1.7.1.1.1.1;
next	;

1.7.1.1.1.1
date	96.11.28.15.27.41;	author hope;	state Exp;
branches;
next	;

1.7.2.1
date	96.11.22.18.35.01;	author hope;	state Exp;
branches;
next	;

1.7.3.1
date	96.12.17.18.13.58;	author hope;	state Exp;
branches
	1.7.3.1.1.1;
next	;

1.7.3.1.1.1
date	97.02.24.12.06.49;	author hope;	state Exp;
branches;
next	;

1.7.4.1
date	96.12.18.10.08.56;	author hope;	state Exp;
branches;
next	;

1.9.1.1
date	97.05.12.11.07.30;	author hope;	state Exp;
branches
	1.9.1.1.1.1
	1.9.1.1.2.1
	1.9.1.1.3.1;
next	;

1.9.1.1.1.1
date	97.07.28.18.49.58;	author daveb;	state Exp;
branches
	1.9.1.1.1.1.1.1;
next	;

1.9.1.1.1.1.1.1
date	97.10.07.12.14.17;	author jkbrook;	state Exp;
branches;
next	;

1.9.1.1.2.1
date	97.09.08.17.41.45;	author daveb;	state Exp;
branches;
next	;

1.9.1.1.3.1
date	97.09.09.14.41.10;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
@


1.12
log
@[Bug #30092]
Added tests for invalid arcs.
@
text
@val base_a : bool = true
val base_b : bool = true
val base_c : bool = true
val base_d : bool = true
val base_e : bool = true
val base_f : bool = true
val base_g : bool = true
val base_h : bool = true
val base_i : bool = true
val base_j : bool = true
val base_k : bool = true
val base_l : bool = true
val base_m : bool = true
val base_n : bool = true
val base_p : bool = true
val concat_a : bool = true
val concat_b : bool = true
val concat_c : bool = true
val concat_d : bool = true
val concat_e : bool = true
val concat_f : bool = true
val concat_g : bool = true
val concat_h : bool = true
val concat_i : bool = true
val concat_j : bool = true
val concat_k : bool = true
val dir_a : bool = true
val dir_b : bool = true
val dir_c : bool = true
val dir_d : bool = true
val dir_e : bool = true
val dir_f : bool = true
val dir_g : bool = true
val dir_h : bool = true
val dir_i : bool = true
val ext_a : bool = true
val ext_b : bool = true
val ext_c : bool = true
val ext_d : bool = true
val ext_e : bool = true
val ext_f : bool = true
val ext_g : bool = true
val ext_h : bool = true
val ext_i : bool = true
val ext_j : bool = true
val ext_k : bool = true
val ext_l : bool = true
val ext_m : bool = true
val ext_n : bool = true
val ext_p : bool = true
val file_a : bool = true
val file_b : bool = true
val file_c : bool = true
val file_d : bool = true
val file_e : bool = true
val file_f : bool = true
val file_g : bool = true
val file_h : bool = true
val file_i : bool = true
val fromString_a : bool = true
val fromString_b : bool = true
val fromString_c : bool = true
val fromString_d : bool = true
val fromString_e : bool = true
val fromString_f : bool = true
val fromString_g : bool = true
val fromString_h : bool = true
val fromString_i : bool = true
val fromString_j : bool = true
val fromString_k : bool = true
val fromString_l : bool = true
val fromString_m : bool = true
val fromString_n : bool = true
val fromUnixPath_a : bool = true
val fromUnixPath_b : bool = true
val fromUnixPath_c : bool = true
val fromUnixPath_d : bool = true
val fromUnixPath_e : bool = true
val getParent_a : bool = true
val getParent_b : bool = true
val getParent_c : bool = true
val getParent_d : bool = true
val getParent_e : bool = true
val getParent_f : bool = true
val getParent_g : bool = true
val getParent_h : bool = true
val getParent_i : bool = true
val getParent_j : bool = true
val getParent_k : bool = true
val getParent_l : bool = true
val getParent_m : bool = true
val getParent_p : bool = true
val getParent_q : bool = true
val getParent_r : bool = true
val getParent_s : bool = true
val getVolume_a : bool = true
val getVolume_b : bool = true
val getVolume_c : bool = true
val getVolume_d : bool = true
val getVolume_e : bool = true
val getVolume_f : bool = true
val getVolume_g : bool = true
val isAbsolute_a : bool = true
val isAbsolute_b : bool = true
val isAbsolute_c : bool = true
val isAbsolute_d : bool = true
val isAbsolute_e : bool = true
val isAbsolute_f : bool = true
val isAbsolute_g : bool = true
val isAbsolute_h : bool = true
val isAbsolute_i : bool = true
val isAbsolute_j : bool = true
val isCanonical_a : bool = true
val isCanonical_b : bool = true
val isCanonical_c : bool = true
val isCanonical_d : bool = true
val isCanonical_e : bool = true
val isCanonical_f : bool = true
val isCanonical_g : bool = true
val isCanonical_h : bool = true
val isCanonical_i : bool = true
val isCanonical_j : bool = true
val isCanonical_k : bool = true
val isCanonical_l : bool = true
val isCanonical_m : bool = true
val isCanonical_n : bool = true
val isCanonical_p : bool = true
val isCanonical_q : bool = true
val isCanonical_r : bool = true
val isCanonical_s : bool = true
val isCanonical_t : bool = true
val isCanonical_u : bool = true
val isCanonical_v : bool = true
val isCanonical_w : bool = true
val isCanonical_x : bool = true
val isCanonical_y : bool = true
val isCanonical_z : bool = true
val isRelative_a : bool = true
val isRelative_b : bool = true
val isRelative_c : bool = true
val isRelative_d : bool = true
val isRelative_e : bool = true
val isRelative_f : bool = true
val isRelative_g : bool = true
val joinBaseExt_a : bool = true
val joinBaseExt_b : bool = true
val joinBaseExt_c : bool = true
val joinBaseExt_d : bool = true
val joinBaseExt_e : bool = true
val joinBaseExt_f : bool = true
val joinBaseExt_g : bool = true
val joinBaseExt_h : bool = true
val joinBaseExt_i : bool = true
val joinBaseExt_j : bool = true
val joinBaseExt_k : bool = true
val joinBaseExt_l : bool = true
val joinDirFile_a : bool = true
val joinDirFile_b : bool = true
val joinDirFile_c : bool = true
val joinDirFile_d : bool = true
val joinDirFile_e : bool = true
val joinDirFile_f : bool = true
val joinDirFile_g : bool = true
val joinDirFile_h : bool = true
val joinDirFile_i : bool = true
val joinDirFile_j : bool = true
val joinDirFile_k : bool = true
val joinDirFile_l : bool = true
val mkAbsolute_a : bool = true
val mkAbsolute_b : bool = true
val mkAbsolute_c : bool = true
val mkAbsolute_d : bool = true
val mkAbsolute_e : bool = true
val mkAbsolute_f : bool = true
val mkAbsolute_g : bool = true
val mkAbsolute_h : bool = true
val mkCanonical_a : bool = true
val mkCanonical_b : bool = true
val mkCanonical_c : bool = true
val mkCanonical_d : bool = true
val mkCanonical_e : bool = true
val mkCanonical_f : bool = true
val mkCanonical_g : bool = true
val mkCanonical_h : bool = true
val mkCanonical_i : bool = true
val mkCanonical_j : bool = true
val mkCanonical_k : bool = true
val mkCanonical_l : bool = true
val mkCanonical_m : bool = true
val mkCanonical_n : bool = true
val mkCanonical_p : bool = true
val mkCanonical_q : bool = true
val mkCanonical_r : bool = true
val mkCanonical_s : bool = true
val mkCanonical_t : bool = true
val mkCanonical_u : bool = true
val mkCanonical_v : bool = true
val mkCanonical_w : bool = true
val mkCanonical_x : bool = true
val mkCanonical_y : bool = true
val mkCanonical_z : bool = true
val mkRelative_a : bool = true
val mkRelative_b : bool = true
val mkRelative_c : bool = true
val mkRelative_d : bool = true
val mkRelative_e : bool = true
val mkRelative_f : bool = true
val mkRelative_g : bool = true
val mkRelative_h : bool = true
val mkRelative_i : bool = true
val mkRelative_j : bool = true
val mkRelative_k : bool = true
val mkRelative_l : bool = true
val mkRelative_m : bool = true
val splitBaseExt_a : bool = true
val splitBaseExt_b : bool = true
val splitBaseExt_c : bool = true
val splitBaseExt_d : bool = true
val splitBaseExt_e : bool = true
val splitBaseExt_f : bool = true
val splitBaseExt_g : bool = true
val splitBaseExt_h : bool = true
val splitBaseExt_i : bool = true
val splitBaseExt_j : bool = true
val splitBaseExt_k : bool = true
val splitBaseExt_l : bool = true
val splitBaseExt_m : bool = true
val splitBaseExt_n : bool = true
val splitBaseExt_p : bool = true
val splitDirFile_a : bool = true
val splitDirFile_b : bool = true
val splitDirFile_c : bool = true
val splitDirFile_d : bool = true
val splitDirFile_e : bool = true
val splitDirFile_f : bool = true
val splitDirFile_g : bool = true
val splitDirFile_h : bool = true
val splitDirFile_i : bool = true
val splitDirFile_j : bool = true
val splitDirFile_k : bool = true
val toString_a : bool = true
val toString_b : bool = true
val toString_c : bool = true
val toString_d : bool = true
val toString_e : bool = true
val toString_f : bool = true
val toString_g : bool = true
val toString_h : bool = true
val toString_i : bool = true
val toString_j : bool = true
val toString_k : bool = true
val toString_l : bool = true
val toString_m : bool = true
val toString_n : bool = true
val toString_p : bool = true
val toString_q : bool = true
val toString_r : bool = true
val toUnixPath_a : bool = true
val toUnixPath_b : bool = true
val toUnixPath_c : bool = true
val toUnixPath_d : bool = true
val toUnixPath_e : bool = true
val validVolume_a : bool = true
val validVolume_b : bool = true
val validVolume_c : bool = true
val validVolume_d : bool = true
val validVolume_e : bool = true
val validVolume_f : bool = true
val validVolume_g : bool = true
@


1.11
log
@[Bug #30323]
Removed uses of Shell.Build.loadSource.
@
text
@d168 1
d257 1
@


1.10
log
@[Bug #30089]
rework following change to basis time
@
text
@a0 3
val it : unit = ()
val it : unit = ()
structure OS = struct ... end
@


1.9
log
@[Bug #1939]
Add tests for toUnixPath and fromUnixPath
@
text
@d2 2
a3 131
structure OS =
  struct
    structure FileSys =
      struct
        datatype access_mode =
          A_EXEC |
          A_READ |
          A_WRITE
        eqtype dirstream = dirstream
        eqtype file_id = file_id
        val A_EXEC : OS.FileSys.access_mode
        val A_READ : OS.FileSys.access_mode
        val A_WRITE : OS.FileSys.access_mode
        val access : (string * OS.FileSys.access_mode list) -> bool = fn
        val chDir : string -> unit = fn
        val closeDir : OS.FileSys.dirstream -> unit = fn
        val compare : (OS.FileSys.file_id * OS.FileSys.file_id) -> order = fn
        val fileId : string -> OS.FileSys.file_id = fn
        val fileSize : string -> int = fn
        val fullPath : string -> string = fn
        val getDir : unit -> string = fn
        val hash : OS.FileSys.file_id -> word = fn
        val isDir : string -> bool = fn
        val isLink : string -> bool = fn
        val mkDir : string -> unit = fn
        val modTime : string -> time(hidden) = fn
        val openDir : string -> OS.FileSys.dirstream = fn
        val readDir : OS.FileSys.dirstream -> string = fn
        val readLink : string -> string = fn
        val realPath : string -> string = fn
        val remove : string -> unit = fn
        val rename : {new: string, old: string} -> unit = fn
        val rewindDir : OS.FileSys.dirstream -> unit = fn
        val rmDir : string -> unit = fn
        val setTime : (string * time(hidden) option) -> unit = fn
        val tmpName : unit -> string = fn
      end
    structure IO =
      struct
        structure Kind = struct ... end
        eqtype iodesc = iodesc
        eqtype iodesc_kind = iodesc_kind
        eqtype poll_desc = poll_desc
        eqtype poll_info = poll_info
        exception Poll
        val compare : (OS.IO.iodesc * OS.IO.iodesc) -> order = fn
        val hash : OS.IO.iodesc -> word = fn
        val infoToPollDesc : OS.IO.poll_info -> OS.IO.poll_desc = fn
        val isIn : OS.IO.poll_info -> bool = fn
        val isOut : OS.IO.poll_info -> bool = fn
        val isPri : OS.IO.poll_info -> bool = fn
        val kind : OS.IO.iodesc -> OS.IO.iodesc_kind = fn
        val poll : (OS.IO.poll_desc list * time(hidden) option) -> OS.IO.poll_info list = fn
        val pollDesc : OS.IO.iodesc -> OS.IO.poll_desc option = fn
        val pollIn : OS.IO.poll_desc -> OS.IO.poll_desc = fn
        val pollOut : OS.IO.poll_desc -> OS.IO.poll_desc = fn
        val pollPri : OS.IO.poll_desc -> OS.IO.poll_desc = fn
        val pollToIODesc : OS.IO.poll_desc -> OS.IO.iodesc = fn
      end
    structure Path =
      struct
        exception Path
        val base : string -> string = fn
        val concat : (string * string) -> string = fn
        val currentArc : string = "."
        val dir : string -> string = fn
        val ext : string -> string option = fn
        val file : string -> string = fn
        val fromString : string -> {arcs: string list, isAbs: bool, vol: string} = fn
        val fromUnixPath : string -> string = fn
        val getParent : string -> string = fn
        val getVolume : string -> string = fn
        val isAbsolute : string -> bool = fn
        val isCanonical : string -> bool = fn
        val isRelative : string -> bool = fn
        val isRoot : string -> bool = fn
        val joinBaseExt : {base: string, ext: string option} -> string = fn
        val joinDirFile : {dir: string, file: string} -> string = fn
        val mkAbsolute : (string * string) -> string = fn
        val mkCanonical : string -> string = fn
        val mkRelative : (string * string) -> string = fn
        val parentArc : string = ".."
        val splitBaseExt : string -> {base: string, ext: string option} = fn
        val splitDirFile : string -> {dir: string, file: string} = fn
        val toString : {arcs: string list, isAbs: bool, vol: string} -> string = fn
        val toUnixPath : string -> string = fn
        val validVolume : {isAbs: bool, vol: string} -> bool = fn
      end
    structure Process =
      struct
        eqtype status = int
        val atExit : (unit -> unit) -> unit = fn
        val exit : int -> 'a = fn
        val failure : int = 1
        val getEnv : string -> string option = fn
        val success : int = 0
        val system : string -> int = fn
        val terminate : int -> 'a = fn
      end
    eqtype syserror = int
    exception SysErr of (string * syserror option)
    val errorMsg : int -> string = fn
    val errorName : int -> string = fn
    val syserror : string -> int option = fn
  end
exception Path
val base : string -> string = fn
val concat : (string * string) -> string = fn
val currentArc : string = "."
val dir : string -> string = fn
val ext : string -> string option = fn
val file : string -> string = fn
val fromString : string -> {arcs: string list, isAbs: bool, vol: string} = fn
val fromUnixPath : string -> string = fn
val getParent : string -> string = fn
val getVolume : string -> string = fn
val isAbsolute : string -> bool = fn
val isCanonical : string -> bool = fn
val isRelative : string -> bool = fn
val isRoot : string -> bool = fn
val joinBaseExt : {base: string, ext: string option} -> string = fn
val joinDirFile : {dir: string, file: string} -> string = fn
val mkAbsolute : (string * string) -> string = fn
val mkCanonical : string -> string = fn
val mkRelative : (string * string) -> string = fn
val parentArc : string = ".."
val splitBaseExt : string -> {base: string, ext: string option} = fn
val splitDirFile : string -> {dir: string, file: string} = fn
val toString : {arcs: string list, isAbs: bool, vol: string} -> string = fn
val toUnixPath : string -> string = fn
val validVolume : {isAbs: bool, vol: string} -> bool = fn
d77 5
a212 1
val mkRelative_i : bool = true
d216 1
d259 5
a270 10
val fromUnixPath_a : bool = true
val fromUnixPath_b : bool = true
val fromUnixPath_c : bool = true
val fromUnixPath_d : bool = true
val fromUnixPath_e : bool = true
val toUnixPath_a : bool = true
val toUnixPath_b : bool = true
val toUnixPath_c : bool = true
val toUnixPath_d : bool = true
val toUnixPath_e : bool = true
@


1.9.1.1
log
@branched from 1.9
@
text
@@


1.9.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@@


1.9.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@@


1.9.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@@


1.9.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@


1.8
log
@Modify because Path now has toUnixPath and fromUnixPath
@
text
@d390 10
@


1.7
log
@Changed io_desc to be iodesc
@
text
@d71 1
d87 1
d115 1
d131 1
@


1.7.4.1
log
@branched from 1.7
@
text
@@


1.7.3.1
log
@branched from 1.7
@
text
@@


1.7.3.1.1.1
log
@branched from 1.7.3.1
@
text
@@


1.7.2.1
log
@branched from 1.7
@
text
@@


1.7.1.1
log
@branched from 1.7
@
text
@@


1.7.1.1.1.1
log
@branched from 1.7.1.1
@
text
@@


1.6
log
@Remove references to toplevel
@
text
@d42 2
a43 2
        eqtype io_desc = io_desc
        eqtype io_desc_kind = io_desc_kind
d47 2
a48 2
        val compare : (OS.IO.io_desc * OS.IO.io_desc) -> order = fn
        val hash : OS.IO.io_desc -> word = fn
d53 1
a53 1
        val kind : OS.IO.io_desc -> OS.IO.io_desc_kind = fn
d55 1
a55 1
        val pollDesc : OS.IO.io_desc -> OS.IO.poll_desc option = fn
d59 1
a59 1
        val pollToIODesc : OS.IO.poll_desc -> OS.IO.io_desc = fn
@


1.5
log
@remove banner
@
text
@a1 1
val it : unit = ()
@


1.5.3.1
log
@branched from 1.5
@
text
@@


1.5.2.1
log
@branched from 1.5
@
text
@@


1.5.1.1
log
@branched from 1.5
@
text
@@


1.4
log
@updating for commercial version flyer
@
text
@a0 2
commercial version may be purchased directly from Harlequin.

@


1.3
log
@Update wrt to change in io_desc type.
@
text
@d1 2
@


1.2
log
@** No reason given. **
@
text
@d43 1
a43 1
        eqtype io_desc = file_desc
@


1.1
log
@new unit
@
text
@a1 34
Compiling basis.general
Compiling basis.__general
Compiling basis.toplevel
structure TopLevel =
  struct
    datatype 'a option =
      NONE |
      SOME of 'a
    datatype order =
      EQUAL |
      GREATER |
      LESS
    exception Domain
    val EQUAL : order
    exception Fail of string
    val GREATER : order
    val LESS : order
    val NONE : 'a option
    val SOME : 'a -> 'a option
  end
datatype 'a option =
  NONE |
  SOME of 'a
datatype order =
  EQUAL |
  GREATER |
  LESS
exception Domain
val EQUAL : order
exception Fail of string
val GREATER : order
val LESS : order
val NONE : 'a option
val SOME : 'a -> 'a option
a2 48
Compiling basis.string_cvt
Compiling basis.__pre_basis
Compiling basis.__pre_string_cvt
Compiling basis.__string_cvt
Compiling basis.__preinteger
Compiling basis.__preint32
Compiling basis.integer
Compiling basis.__integer
Compiling basis.__position
Compiling basis.char
Compiling basis.__char
Compiling basis.math
Compiling basis.__math
Compiling basis.ieeereal
Compiling basis.__ieeereal
Compiling basis.__prereal
Compiling basis.real
Compiling basis.__real
Compiling basis.time
Compiling unix.__time
Compiling basis.os_file_sys
Compiling basis.os_path
Compiling basis.os_process
Compiling basis.os_io
Compiling basis.os
Compiling basis.__preword32
Compiling basis.__preword
Compiling basis.word
Compiling basis.__word32
Compiling unix.unixos
Compiling unix._os
Compiling unix._unixos
Compiling unix.__unixos
Compiling basis.list
Compiling basis.__list
Compiling basis.string
Compiling basis.__string
Compiling unix.__os_path
Compiling basis.__word
Compiling unix._os_file_sys
Compiling unix.__os_file_sys
Compiling basis.__exit
Compiling basis.exit
Compiling basis._os_process
Compiling basis.__os_process
Compiling unix._os_io
Compiling unix.__os_io
Compiling unix.__os
@
