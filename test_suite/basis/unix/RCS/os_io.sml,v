head	1.7;
access;
symbols
	MLWorks_21c0_1999_03_25:1.7
	MLWorks_20c1_1998_08_20:1.7
	MLWorks_20c0_1998_08_04:1.7
	MLWorks_20b2c2_1998_06_19:1.7
	MLWorks_20b2_Windows_1998_06_12:1.7
	MLWorks_20b1c1_1998_05_07:1.7
	MLWorks_20b0_1998_04_07:1.7
	MLWorks_20b0_1998_03_20:1.7
	MLWorks_20m2_1998_02_16:1.7
	MLWorks_20m1_1997_10_23:1.4
	MLWorks_11r1:1.3.8.1.1.2.1
	MLWorks_11c0_1997_09_09:1.3.8.1.1.2
	MLWorks_10r3:1.3.8.1.3
	MLWorks_10r2_551:1.3.8.1.2
	MLWorks_11:1.3.8.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.3.8.1
	MLWorks_20m0_1997_06_20:1.3
	MLWorks_1_0_r2c2_1997_06_14:1.3.8.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.3.8.1
	MLWorks_1_0_r2c1_1997_05_12:1.3.8
	MLWorks_BugFix_1997_04_24:1.3
	MLWorks_1_0_r2_Win32_1997_04_11:1.3
	MLWorks_1_0_r2_Unix_1997_04_04:1.3
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.3.6.1.1
	MLWorks_gui_1996_12_18:1.3.7
	MLWorks_1_0_Win32_1996_12_17:1.3.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.3.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.3.4.1
	MLWorks_1_0_Irix_1996_11_28:1.3.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.3.5
	MLWorks_1_0_Unix_1996_11_14:1.3.4
	MLWorks_Open_Beta2_1996_10_11:1.3.3
	MLWorks_License_dev:1.3.2
	MLWorks_1_open_beta_1996_09_13:1.3.1
	MLWorks_Open_Beta_1996_08_22:1.2;
locks; strict;
comment	@ *  @;


1.7
date	98.02.05.11.08.37;	author jont;	state Exp;
branches;
next	1.6;

1.6
date	98.01.22.17.00.34;	author jont;	state Exp;
branches;
next	1.5;

1.5
date	97.11.11.22.59.15;	author jont;	state Exp;
branches;
next	1.4;

1.4
date	97.08.11.09.44.13;	author brucem;	state Exp;
branches;
next	1.3;

1.3
date	96.08.22.12.22.30;	author stephenb;	state Exp;
branches
	1.3.1.1
	1.3.2.1
	1.3.3.1
	1.3.4.1
	1.3.5.1
	1.3.6.1
	1.3.7.1
	1.3.8.1;
next	1.2;

1.2
date	96.08.20.08.17.45;	author stephenb;	state Exp;
branches;
next	1.1;

1.1
date	96.08.16.15.26.58;	author stephenb;	state Exp;
branches;
next	;

1.3.1.1
date	96.09.13.11.37.40;	author hope;	state Exp;
branches;
next	;

1.3.2.1
date	96.10.07.16.28.57;	author hope;	state Exp;
branches;
next	;

1.3.3.1
date	96.10.17.11.49.45;	author hope;	state Exp;
branches;
next	;

1.3.4.1
date	96.11.14.13.17.09;	author hope;	state Exp;
branches
	1.3.4.1.1.1;
next	;

1.3.4.1.1.1
date	96.11.28.15.27.37;	author hope;	state Exp;
branches;
next	;

1.3.5.1
date	96.11.22.18.34.56;	author hope;	state Exp;
branches;
next	;

1.3.6.1
date	96.12.17.18.13.53;	author hope;	state Exp;
branches
	1.3.6.1.1.1;
next	;

1.3.6.1.1.1
date	97.02.24.12.06.45;	author hope;	state Exp;
branches;
next	;

1.3.7.1
date	96.12.18.10.08.53;	author hope;	state Exp;
branches;
next	;

1.3.8.1
date	97.05.12.11.07.25;	author hope;	state Exp;
branches
	1.3.8.1.1.1
	1.3.8.1.2.1
	1.3.8.1.3.1;
next	;

1.3.8.1.1.1
date	97.07.28.18.50.53;	author daveb;	state Exp;
branches;
next	1.3.8.1.1.2;

1.3.8.1.1.2
date	97.08.12.09.25.20;	author johnh;	state Exp;
branches
	1.3.8.1.1.2.1.1;
next	;

1.3.8.1.1.2.1.1
date	97.10.07.12.15.37;	author jkbrook;	state Exp;
branches;
next	;

1.3.8.1.2.1
date	97.09.08.17.42.38;	author daveb;	state Exp;
branches;
next	;

1.3.8.1.3.1
date	97.09.09.14.42.03;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
@


1.7
log
@[Bug #70057]
Remove system dependent test
@
text
@(* Copyright (c) 1996 Harlequin Ltd.

Result: OK

 *
 * Does some Unix specific testing of OS.IO.
 *
 * Currently just checks what OS.IO.kind when applied to various things.
 * and also that it is possible to use OS.IO.poll to detect the availablility 
 * of input/output on such a descriptor.
 *
 * All tests should return true.
 * 
 * Note the result for "available.input.input" may look wrong.  However, since 
 * this is the result under SunOS and Irix I tend to believe that is what it is
 * supposed to be.
 * Further note: Linux disagrees with the result for "available.input.input"
 * and so the test has now been removed.
 *
 * Revision Log
 * ------------
 *
 * $Log: unix:os_io.sml,v $
 *  Revision 1.6  1998/01/22  17:00:34  jont
 *  [Bug #30323]
 *  Remove unnecessary uses of Shell.Build.loadSource
 *
 *  Revision 1.5  1997/11/11  22:59:15  jont
 *  [Bug #70013]
 *  Fix OS incompatibility problems under Linux
 *
 *  Revision 1.4  1997/08/11  09:44:13  brucem
 *  [Bug #30086]
 *  Stop printing structure contents to prevent spurious failure.
 *
 *  Revision 1.3  1996/08/22  12:22:30  stephenb
 *  [Bug #1554]
 *  Win32 doesn't like select being passed file descriptors that
 *  aren't sockets.  So moved this part of the test from the generic
 *  test file to the unix specific one.
 *
 *  Revision 1.2  1996/08/20  08:17:45  stephenb
 *  Remove the /dev/tty test since /dev/ttty does exist for
 *  a cron job.
 *
 *)

local
    val _ = Shell.Options.set(Shell.Options.ValuePrinter.maximumStrDepth, 0);
in
end;


(* As per ../os_io.sml#applyToInDesc. *)

fun applyToOutDesc fileName action =
  let
    val file = TextIO.openOut fileName
    val _ = TextIO.outputSubstr (file, Substring.all "abc");
    val stream = TextIO.getOutstream file;
    val desc = case TextIO.StreamIO.getWriter stream of
                 (TextPrimIO.WR {ioDesc=NONE, ...}, _)=> raise Match
               | (TextPrimIO.WR {ioDesc=SOME desc, ...}, _) => desc
    val action_result = action desc
  in
    TextIO.StreamIO.closeOut stream;
    OS.FileSys.remove fileName;
    action_result
  end

(* As per ../os_io.sml#applyToInDesc. *)



fun applyToInDesc fileName action =
  let
    val file = TextIO.openIn fileName
    val stream = TextIO.getInstream file;
    val desc = case TextIO.StreamIO.getReader stream of
                 (TextPrimIO.RD {ioDesc=NONE, ...}, _)=> raise Match
               | (TextPrimIO.RD {ioDesc=SOME desc, ...}, _) => desc
    val action_result = action desc
  in
    TextIO.StreamIO.closeIn stream;
    action_result
  end


fun available_test (addPoll, modifyIn, modifyOut, modifyPri, fd) =
  case OS.IO.pollDesc fd of
    NONE =>  NONE
  | SOME pd => 
      let
        val pd' = addPoll pd 
        val info = OS.IO.poll ([pd, pd'], SOME Time.zeroTime)
      in
        case info of
          [] => NONE
        | [info] => 
            let
              val pd'' = OS.IO.infoToPollDesc info
            in
              SOME
                ( modifyIn (OS.IO.isIn info)
                , modifyOut (OS.IO.isOut info)
                , modifyPri (OS.IO.isPri info)
                , pd'' = pd'
                , pd'' <> pd
                )
            end
        | _ => NONE
      end

fun id x = x;



val zero_ans = applyToInDesc "/dev/zero" (fn desc => OS.IO.kind desc = OS.IO.Kind.device)
val dir_ans = applyToInDesc "basis" (fn desc => OS.IO.kind desc = OS.IO.Kind.dir)

val ans = 
  applyToOutDesc "os_io_test_a" (fn descA =>
  applyToInDesc "os_io_test_a" (fn descB =>
  (("available.input.output", 
      available_test (OS.IO.pollOut, not, id, not, descB))
  , ("available.output.input", 
      available_test (OS.IO.pollIn, id, not, not, descA))
  )));

(*
 * Note can't do the following :-
 *
 *   , ("available.input.pri",
 *       available_test (OS.IO.pollPri, not, not, id, descB))
 *   , ("available.output.pri",
 *       available_test (OS.IO.pollPri, not, not, id, descA))
 *
 * since under SunOS they return :-
 *
 *   ("available.input.pri", SOME (true, true, true, true, true)),
 *   ("available.output.pri", SOME (true, true, true, true, true))
 *
 * whilst under Irix they return :-
 *
 *   ("available.input.pri", NONE),
 *   ("available.output.pri", NONE)
 *
 * Not sure which is correct, but my guess is Irix.
 *
 * Nor can we do
 *   , ("available.input.input", 
 *       available_test (OS.IO.pollIn, id, not, not, descB))
 *
 * Since under Solaris this returns
 *
 *   ("available.input.input", SOME (true, true, true, true, true))
 *
 * whilst under Linux it returns
 *
 *   ("available.input.input", NONE)
 *
 * or
 * ("available.output.output",
 *     available_test (OS.IO.pollOut, not, id, not, descA))
 *
 * Since under Solaris this returns
 *
 *   ("available.output.output", NONE)
 *
 * whilst under Linux it returns
 *
 *   ("available.output.output", SOME (true, true, true, true, true))
 *
 * Again, not sure which is correct, if either
 *)
@


1.6
log
@[Bug #30323]
Remove unnecessary uses of Shell.Build.loadSource
@
text
@d24 4
d124 1
a124 3
  (("available.output.output",
      available_test (OS.IO.pollOut, not, id, not, descA))
  , ("available.input.output", 
d161 13
@


1.5
log
@[Bug #70013]
Fix OS incompatibility problems under Linux
@
text
@d24 4
d47 1
a47 7
  val _ = 
    (Shell.Build.loadSource "system.__os";
     Shell.Build.loadSource "system.__time";
     Shell.Build.loadSource "basis.__text_io";
     Shell.Build.loadSource "basis.__text_prim_io";
     Shell.Build.loadSource "basis.__substring");
end ;
@


1.4
log
@[Bug #30086]
Stop printing structure contents to prevent spurious failure.
@
text
@d17 2
d24 4
d122 1
a122 3
  ( ("available.input.input", 
     available_test (OS.IO.pollIn, id, not, not, descB))
  , ("available.output.output",
d136 1
a136 1
 *        available_test (OS.IO.pollPri, not, not, id, descA))
d149 13
@


1.3
log
@[Bug #1554]
Win32 doesn't like select being passed file descriptors that
aren't sockets.  So moved this part of the test from the generic
test file to the unix specific one.
@
text
@d22 6
d34 10
a43 6
Shell.Build.loadSource "system.__os";
Shell.Build.loadSource "system.__time";
Shell.Build.loadSource "basis.__text_io";
Shell.Build.loadSource "basis.__text_prim_io";
Shell.Build.loadSource "basis.__substring";

@


1.3.8.1
log
@branched from 1.3
@
text
@a21 6
 *  Revision 1.3  1996/08/22  12:22:30  stephenb
 *  [Bug #1554]
 *  Win32 doesn't like select being passed file descriptors that
 *  aren't sockets.  So moved this part of the test from the generic
 *  test file to the unix specific one.
 *
@


1.3.8.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a21 3
 *  Revision 1.3.8.1  1997/05/12  11:07:25  hope
 *  branched from 1.3
 *
@


1.3.8.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a21 3
 *  Revision 1.3.8.1  1997/05/12  11:07:25  hope
 *  branched from 1.3
 *
@


1.3.8.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a21 3
 *  Revision 1.3.8.1  1997/05/12  11:07:25  hope
 *  branched from 1.3
 *
@


1.3.8.1.1.2
log
@[Bug #30086]
Merging - Stop printing structure contents to prevent spurious failure.
@
text
@a21 3
 *  Revision 1.3.8.1.1.1  1997/07/28  18:50:53  daveb
 *  branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
d37 6
a42 10
local
    val _ = Shell.Options.set(Shell.Options.ValuePrinter.maximumStrDepth, 0);
in
  val _ = 
    (Shell.Build.loadSource "system.__os";
     Shell.Build.loadSource "system.__time";
     Shell.Build.loadSource "basis.__text_io";
     Shell.Build.loadSource "basis.__text_prim_io";
     Shell.Build.loadSource "basis.__substring");
end ;
@


1.3.8.1.1.2.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a21 4
 *  Revision 1.3.8.1.1.2  1997/08/12  09:25:20  johnh
 *  [Bug #30086]
 *  Merging - Stop printing structure contents to prevent spurious failure.
 *
@


1.3.7.1
log
@branched from 1.3
@
text
@a21 6
 *  Revision 1.3  1996/08/22  12:22:30  stephenb
 *  [Bug #1554]
 *  Win32 doesn't like select being passed file descriptors that
 *  aren't sockets.  So moved this part of the test from the generic
 *  test file to the unix specific one.
 *
@


1.3.6.1
log
@branched from 1.3
@
text
@a21 6
 *  Revision 1.3  1996/08/22  12:22:30  stephenb
 *  [Bug #1554]
 *  Win32 doesn't like select being passed file descriptors that
 *  aren't sockets.  So moved this part of the test from the generic
 *  test file to the unix specific one.
 *
@


1.3.6.1.1.1
log
@branched from 1.3.6.1
@
text
@a21 3
 *  Revision 1.3.6.1  1996/12/17  18:13:53  hope
 *  branched from 1.3
 *
@


1.3.5.1
log
@branched from 1.3
@
text
@a21 6
 *  Revision 1.3  1996/08/22  12:22:30  stephenb
 *  [Bug #1554]
 *  Win32 doesn't like select being passed file descriptors that
 *  aren't sockets.  So moved this part of the test from the generic
 *  test file to the unix specific one.
 *
@


1.3.4.1
log
@branched from 1.3
@
text
@a21 6
 *  Revision 1.3  1996/08/22  12:22:30  stephenb
 *  [Bug #1554]
 *  Win32 doesn't like select being passed file descriptors that
 *  aren't sockets.  So moved this part of the test from the generic
 *  test file to the unix specific one.
 *
@


1.3.4.1.1.1
log
@branched from 1.3.4.1
@
text
@a21 3
 *  Revision 1.3.4.1  1996/11/14  13:17:09  hope
 *  branched from 1.3
 *
@


1.3.3.1
log
@branched from 1.3
@
text
@a21 6
 *  Revision 1.3  1996/08/22  12:22:30  stephenb
 *  [Bug #1554]
 *  Win32 doesn't like select being passed file descriptors that
 *  aren't sockets.  So moved this part of the test from the generic
 *  test file to the unix specific one.
 *
@


1.3.2.1
log
@branched from 1.3
@
text
@a21 6
 *  Revision 1.3  1996/08/22  12:22:30  stephenb
 *  [Bug #1554]
 *  Win32 doesn't like select being passed file descriptors that
 *  aren't sockets.  So moved this part of the test from the generic
 *  test file to the unix specific one.
 *
@


1.3.1.1
log
@branched from 1.3
@
text
@a21 6
 *  Revision 1.3  1996/08/22  12:22:30  stephenb
 *  [Bug #1554]
 *  Win32 doesn't like select being passed file descriptors that
 *  aren't sockets.  So moved this part of the test from the generic
 *  test file to the unix specific one.
 *
@


1.2
log
@Remove the /dev/tty test since /dev/ttty does exist for
a cron job.
@
text
@d6 1
a6 1
 * Does some Unix specific testing OS.IO.
d9 2
d14 4
d21 5
a25 1
 * $Log$
d29 1
a30 1
Shell.Build.loadSource "basis.__stream_io";
d32 2
d36 1
d38 14
d55 2
d61 1
a61 1
    val desc = case TextStreamIO.getReader stream of
d66 1
a66 1
    TextStreamIO.closeIn stream;
d71 28
d102 34
@


1.1
log
@new unit
@
text
@a42 1
val tty_ans = applyToInDesc "/dev/tty" (fn desc => OS.IO.kind desc = OS.IO.Kind.device)
a44 1

@
