head	1.3;
access;
symbols
	MLWorks_21c0_1999_03_25:1.3
	MLWorks_20c1_1998_08_20:1.3
	MLWorks_20c0_1998_08_04:1.3
	MLWorks_20b2c2_1998_06_19:1.3
	MLWorks_20b2_Windows_1998_06_12:1.3
	MLWorks_20b1c1_1998_05_07:1.3
	MLWorks_20b0_1998_04_07:1.3
	MLWorks_20b0_1998_03_20:1.3
	MLWorks_20m2_1998_02_16:1.3
	MLWorks_20m1_1997_10_23:1.3
	MLWorks_11r1:1.3.5.1.1.1.1
	MLWorks_11c0_1997_09_09:1.3.5.1.1.1
	MLWorks_10r3:1.3.5.1.3
	MLWorks_10r2_551:1.3.5.1.2
	MLWorks_11:1.3.5.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.3.5.1
	MLWorks_20m0_1997_06_20:1.3
	MLWorks_1_0_r2c2_1997_06_14:1.3.5.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.3.5.1
	MLWorks_1_0_r2c1_1997_05_12:1.3.5
	MLWorks_BugFix_1997_04_24:1.3
	MLWorks_1_0_r2_Win32_1997_04_11:1.3
	MLWorks_1_0_r2_Unix_1997_04_04:1.3
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.3.3.1.1
	MLWorks_gui_1996_12_18:1.3.4
	MLWorks_1_0_Win32_1996_12_17:1.3.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.3.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.3.1.1
	MLWorks_1_0_Irix_1996_11_28:1.3.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.3.2
	MLWorks_1_0_Unix_1996_11_14:1.3.1
	MLWorks_Open_Beta2_1996_10_11:1.2.3
	MLWorks_License_dev:1.2.2
	MLWorks_1_open_beta_1996_09_13:1.2.1
	MLWorks_Open_Beta_1996_08_22:1.2
	MLWorks_Beta_1996_07_02:1.2
	MLWorks_Beta_1996_06_07:1.2
	MLWorks_Beta_1996_06_06:1.2
	MLWorks_Beta_1996_06_05:1.2
	MLWorks_Beta_1996_06_03:1.1
	MLWorks_Beta_1996_05_31:1.1
	MLWorks_Beta_1996_05_30:1.1
	ML_beta_release_12/08/94:1.1
	ML_beta_release_03/08/94:1.1
	ML_revised_beta_release_25/05/94:1.1
	ML_final_beta_release_02/03/94:1.1
	mlworks-28-01-1994:1.1
	Release:1.1
	mlworks-beta-01-09-1993:1.1;
locks; strict;
comment	@ * @;


1.3
date	96.11.01.11.07.10;	author daveb;	state Exp;
branches
	1.3.1.1
	1.3.2.1
	1.3.3.1
	1.3.4.1
	1.3.5.1;
next	1.2;

1.2
date	96.06.04.16.37.46;	author jont;	state Exp;
branches
	1.2.1.1
	1.2.2.1
	1.2.3.1;
next	1.1;

1.1
date	93.04.15.10.35.34;	author daveb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	93.04.15.10.35.34;	author jont;	state Exp;
branches;
next	;

1.2.1.1
date	96.09.13.11.40.01;	author hope;	state Exp;
branches;
next	;

1.2.2.1
date	96.10.07.16.32.34;	author hope;	state Exp;
branches;
next	;

1.2.3.1
date	96.10.17.11.52.15;	author hope;	state Exp;
branches;
next	;

1.3.1.1
date	96.11.14.13.19.46;	author hope;	state Exp;
branches
	1.3.1.1.1.1;
next	;

1.3.1.1.1.1
date	96.11.28.15.30.30;	author hope;	state Exp;
branches;
next	;

1.3.2.1
date	96.11.22.18.37.32;	author hope;	state Exp;
branches;
next	;

1.3.3.1
date	96.12.17.18.16.30;	author hope;	state Exp;
branches
	1.3.3.1.1.1;
next	;

1.3.3.1.1.1
date	97.02.24.12.10.18;	author hope;	state Exp;
branches;
next	;

1.3.4.1
date	96.12.18.10.11.37;	author hope;	state Exp;
branches;
next	;

1.3.5.1
date	97.05.12.11.10.59;	author hope;	state Exp;
branches
	1.3.5.1.1.1
	1.3.5.1.2.1
	1.3.5.1.3.1;
next	;

1.3.5.1.1.1
date	97.07.28.18.51.54;	author daveb;	state Exp;
branches
	1.3.5.1.1.1.1.1;
next	;

1.3.5.1.1.1.1.1
date	97.10.07.12.16.38;	author jkbrook;	state Exp;
branches;
next	;

1.3.5.1.2.1
date	97.09.08.17.43.51;	author daveb;	state Exp;
branches;
next	;

1.3.5.1.3.1
date	97.09.09.14.43.09;	author daveb;	state Exp;
branches;
next	;


desc
@Part of the test suite.
@


1.3
log
@This now fails, even under the old definition.
@
text
@(*

A good test of derived forms.

Result: FAIL

This should give the answer 3.

If you consider the tables in appendix A as rewrite rules, then:

        if 1=2 then 3 else 4                    ==>
        case 1=2 of true => 3 | false => 4      ==>
        (fn true => 3 | false => 4)(1=2)

In this example, false has still identifier status c, but true has
identifier status v.  As a consequence, in the pattern
the type of true is guessed (rule 35)
and the type of false is looked up in the environment (rule 36).
This means that the expression is well-typed.

Copyright (c) 1993 Harlequin Ltd.
Supplied by Stefan Kahrs of the LFCS.
*)

Shell.Options.set(Shell.Options.Language.oldDefinition, true);
signature s = sig type T; val true: T end;
structure ss:s = struct datatype T = true end;
local open ss
in
  val bad = if 1=2 then 3 else 4
end


@


1.3.5.1
log
@branched from 1.3
@
text
@@


1.3.5.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@@


1.3.5.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@@


1.3.5.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@@


1.3.5.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@


1.3.4.1
log
@branched from 1.3
@
text
@@


1.3.3.1
log
@branched from 1.3
@
text
@@


1.3.3.1.1.1
log
@branched from 1.3.3.1
@
text
@@


1.3.2.1
log
@branched from 1.3
@
text
@@


1.3.1.1
log
@branched from 1.3
@
text
@@


1.3.1.1.1.1
log
@branched from 1.3.1.1
@
text
@@


1.2
log
@Ensure this runs under the old definition
@
text
@d5 1
a5 1
Result: WARNING INTERPRETATION
@


1.2.3.1
log
@branched from 1.2
@
text
@@


1.2.2.1
log
@branched from 1.2
@
text
@@


1.2.1.1
log
@branched from 1.2
@
text
@@


1.1
log
@Initial revision
@
text
@d25 1
@


1.1.1.1
log
@Fork for bug fixing
@
text
@@
