head	1.6;
access;
symbols
	MLWorks_21c0_1999_03_25:1.6
	MLWorks_20c1_1998_08_20:1.6
	MLWorks_20c0_1998_08_04:1.6
	MLWorks_20b2c2_1998_06_19:1.6
	MLWorks_20b2_Windows_1998_06_12:1.6
	MLWorks_20b1c1_1998_05_07:1.6
	MLWorks_20b0_1998_04_07:1.6
	MLWorks_20b0_1998_03_20:1.6
	MLWorks_20m2_1998_02_16:1.5
	MLWorks_20m1_1997_10_23:1.5
	MLWorks_11r1:1.5.8.1.1.1.1
	MLWorks_11c0_1997_09_09:1.5.8.1.1.1
	MLWorks_10r3:1.5.8.1.3
	MLWorks_10r2_551:1.5.8.1.2
	MLWorks_11:1.5.8.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.5.8.1
	MLWorks_20m0_1997_06_20:1.5
	MLWorks_1_0_r2c2_1997_06_14:1.5.8.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.5.8.1
	MLWorks_1_0_r2c1_1997_05_12:1.5.8
	MLWorks_BugFix_1997_04_24:1.5
	MLWorks_1_0_r2_Win32_1997_04_11:1.5
	MLWorks_1_0_r2_Unix_1997_04_04:1.5
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.5.6.1.1
	MLWorks_gui_1996_12_18:1.5.7
	MLWorks_1_0_Win32_1996_12_17:1.5.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.5.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.5.4.1
	MLWorks_1_0_Irix_1996_11_28:1.5.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.5.5
	MLWorks_1_0_Unix_1996_11_14:1.5.4
	MLWorks_Open_Beta2_1996_10_11:1.5.3
	MLWorks_License_dev:1.5.2
	MLWorks_1_open_beta_1996_09_13:1.5.1
	MLWorks_Open_Beta_1996_08_22:1.5
	MLWorks_Beta_1996_07_02:1.5
	MLWorks_Beta_1996_06_07:1.5
	MLWorks_Beta_1996_06_06:1.5
	MLWorks_Beta_1996_06_05:1.5
	MLWorks_Beta_1996_06_03:1.5
	MLWorks_Beta_1996_05_31:1.5
	MLWorks_Beta_1996_05_30:1.5
	ML_beta_release_12/08/94:1.1
	ML_beta_release_03/08/94:1.1;
locks; strict;
comment	@ * @;


1.6
date	98.02.06.15.00.46;	author jont;	state Exp;
branches;
next	1.5;

1.5
date	96.03.27.11.50.57;	author stephenb;	state Exp;
branches
	1.5.1.1
	1.5.2.1
	1.5.3.1
	1.5.4.1
	1.5.5.1
	1.5.6.1
	1.5.7.1
	1.5.8.1;
next	1.4;

1.4
date	96.03.26.16.06.45;	author stephenb;	state Exp;
branches;
next	1.3;

1.3
date	96.03.26.14.02.12;	author jont;	state Exp;
branches;
next	1.2;

1.2
date	96.02.23.16.28.48;	author daveb;	state Exp;
branches;
next	1.1;

1.1
date	94.06.21.10.57.10;	author jont;	state Exp;
branches;
next	;

1.5.1.1
date	96.09.13.11.31.17;	author hope;	state Exp;
branches;
next	;

1.5.2.1
date	96.10.07.16.22.05;	author hope;	state Exp;
branches;
next	;

1.5.3.1
date	96.10.17.11.42.36;	author hope;	state Exp;
branches;
next	;

1.5.4.1
date	96.11.14.13.09.52;	author hope;	state Exp;
branches
	1.5.4.1.1.1;
next	;

1.5.4.1.1.1
date	96.11.28.15.19.46;	author hope;	state Exp;
branches;
next	;

1.5.5.1
date	96.11.22.18.27.18;	author hope;	state Exp;
branches;
next	;

1.5.6.1
date	96.12.17.18.05.51;	author hope;	state Exp;
branches
	1.5.6.1.1.1;
next	;

1.5.6.1.1.1
date	97.02.24.11.58.22;	author hope;	state Exp;
branches;
next	;

1.5.7.1
date	96.12.18.10.00.52;	author hope;	state Exp;
branches;
next	;

1.5.8.1
date	97.05.12.10.59.48;	author hope;	state Exp;
branches
	1.5.8.1.1.1
	1.5.8.1.2.1
	1.5.8.1.3.1;
next	;

1.5.8.1.1.1
date	97.07.28.18.41.52;	author daveb;	state Exp;
branches
	1.5.8.1.1.1.1.1;
next	;

1.5.8.1.1.1.1.1
date	97.10.07.12.07.04;	author jkbrook;	state Exp;
branches;
next	;

1.5.8.1.2.1
date	97.09.08.17.34.14;	author daveb;	state Exp;
branches;
next	;

1.5.8.1.3.1
date	97.09.09.14.32.39;	author daveb;	state Exp;
branches;
next	;


desc
@new file
@


1.6
log
@[Bug #70055]
Modify to use argument in function being traced
@
text
@(*
Debug info must be cleared when recompilation
takes place and the debug switches are off.

Result: OK
 
$Log: debug.sml,v $
 * Revision 1.5  1996/03/27  11:50:57  stephenb
 * Turn on debugging so the breakpoint command actually runs!
 *
 * Revision 1.4  1996/03/26  16:06:45  stephenb
 * Replace the out of date call to MLWorks.Debugger.break with
 * a call to Shell.Trace.breakpoint.
 *
 * Revision 1.3  1996/03/26  14:02:12  jont
 * Fix out of date Shell calls
 *
 * Revision 1.2  1996/02/23  16:28:48  daveb
 * Converted Shell structure to new capitalisation convention.
 *
 * Revision 1.1  1994/06/21  10:57:10  jont
 * new file
 *
 * Copyright (c) 1994 Harlequin Ltd.
*)

Shell.Options.set (Shell.Options.Compiler.generateTraceProfileCode, true);
Shell.Options.set(Shell.Options.Compiler.generateVariableDebugInfo,true);
functor F(type t val args:t list val compute:t list -> t) =
  struct
    fun f args =
      let
        val result = compute args
      in
        ()
      end
    val args = args
  end;
structure F1 = F(struct 
                   type t = int
                   val args = [1,2]
                   fun compute args = 
                     let
                       fun compute [] result = result
                         | compute (arg::args) result = compute args (result+arg)
                     in
                       compute args 0
                     end
                            end);
structure F2 = F(struct
                   type t = string
                   val args = ["1","2"]
                   fun compute args = 
                     let
                       fun compute [] result = result
                         | compute (arg::args) result = compute args (result^arg)
                     in
                       compute args ""
                     end
                  end);
Shell.Trace.breakpoint "f";
Shell.Options.set(Shell.Options.Compiler.generateVariableDebugInfo,false);
functor F(type t 
          val args:t list 
          val compute:t list -> t) =
  struct
    fun f args =
      let
        val result = compute args
      in
        ()
      end
    val args = args
  end;

structure F1 = F(struct 
                   type t = int
                   val args = [1,2]
                   fun compute args = 
                     let
                       fun compute [] result = result
                         | compute (arg::args) result = compute args (result+arg)
                     in
                       compute args 0
                     end
                  end);

structure F2 = F(struct
                   type t = string
                   val args = ["1","2"]
                   fun compute args = 
                     let
                       fun compute [] result = result
                         | compute (arg::args) result = compute args (result^arg)
                     in
                       compute args ""
                     end
                  end);
(F1.f F1.args,F2.f F2.args);
@


1.5
log
@Turn on debugging so the breakpoint command actually runs!
@
text
@d8 3
d31 1
a31 1
    fun f () =
a32 1
        val args = args
d37 1
d67 1
a67 1
    fun f () =
a68 1
        val args = args
d73 1
d99 1
a99 1
(F1.f(),F2.f());
@


1.5.8.1
log
@branched from 1.5
@
text
@a7 3
 * Revision 1.5  1996/03/27  11:50:57  stephenb
 * Turn on debugging so the breakpoint command actually runs!
 *
@


1.5.8.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a7 3
 * Revision 1.5.8.1  1997/05/12  10:59:48  hope
 * branched from 1.5
 *
@


1.5.8.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a7 3
 * Revision 1.5.8.1  1997/05/12  10:59:48  hope
 * branched from 1.5
 *
@


1.5.8.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a7 3
 * Revision 1.5.8.1  1997/05/12  10:59:48  hope
 * branched from 1.5
 *
@


1.5.8.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a7 3
 * Revision 1.5.8.1.1.1  1997/07/28  18:41:52  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.5.7.1
log
@branched from 1.5
@
text
@a7 3
 * Revision 1.5  1996/03/27  11:50:57  stephenb
 * Turn on debugging so the breakpoint command actually runs!
 *
@


1.5.6.1
log
@branched from 1.5
@
text
@a7 3
 * Revision 1.5  1996/03/27  11:50:57  stephenb
 * Turn on debugging so the breakpoint command actually runs!
 *
@


1.5.6.1.1.1
log
@branched from 1.5.6.1
@
text
@a7 3
 * Revision 1.5.6.1  1996/12/17  18:05:51  hope
 * branched from 1.5
 *
@


1.5.5.1
log
@branched from 1.5
@
text
@a7 3
 * Revision 1.5  1996/03/27  11:50:57  stephenb
 * Turn on debugging so the breakpoint command actually runs!
 *
@


1.5.4.1
log
@branched from 1.5
@
text
@a7 3
 * Revision 1.5  1996/03/27  11:50:57  stephenb
 * Turn on debugging so the breakpoint command actually runs!
 *
@


1.5.4.1.1.1
log
@branched from 1.5.4.1
@
text
@a7 3
 * Revision 1.5.4.1  1996/11/14  13:09:52  hope
 * branched from 1.5
 *
@


1.5.3.1
log
@branched from 1.5
@
text
@a7 3
 * Revision 1.5  1996/03/27  11:50:57  stephenb
 * Turn on debugging so the breakpoint command actually runs!
 *
@


1.5.2.1
log
@branched from 1.5
@
text
@a7 3
 * Revision 1.5  1996/03/27  11:50:57  stephenb
 * Turn on debugging so the breakpoint command actually runs!
 *
@


1.5.1.1
log
@branched from 1.5
@
text
@a7 3
 * Revision 1.5  1996/03/27  11:50:57  stephenb
 * Turn on debugging so the breakpoint command actually runs!
 *
@


1.4
log
@Replace the out of date call to MLWorks.Debugger.break with
a call to Shell.Trace.breakpoint.
@
text
@d8 4
d24 1
@


1.3
log
@Fix out of date Shell calls
@
text
@d8 3
d53 1
a53 1
MLWorks.Debugger.break "f";
@


1.2
log
@Converted Shell structure to new capitalisation convention.
@
text
@d8 7
a14 4
# Revision 1.1  1994/06/21  10:57:10  jont
# new file
#
Copyright (c) 1994 Harlequin Ltd.
a16 1
Shell.Options.set(Shell.Options.Compiler.generateStepper,true);
a17 1
Shell.Options.set(Shell.Options.Compiler.generateModuler,true);
d50 2
a51 3
MLWorks.Debugger.set_breakpoint "f";
Shell.Options.set(Shell.Options.Compiler.generate_moduler,false);
Shell.Options.set(Shell.Options.Compiler.generate_variable_debug_info,false);
a88 1
p
@


1.1
log
@new file
@
text
@d7 4
a10 1
$Log$
d14 3
a16 3
Shell.Options.set(Shell.Options.Compiler.generate_stepper,true);
Shell.Options.set(Shell.Options.Compiler.generate_variable_debug_info,true);
Shell.Options.set(Shell.Options.Compiler.generate_moduler,true);
@
