head	1.3;
access;
symbols
	MLWorks_21c0_1999_03_25:1.3
	MLWorks_20c1_1998_08_20:1.3
	MLWorks_20c0_1998_08_04:1.3
	MLWorks_20b2c2_1998_06_19:1.3
	MLWorks_20b2_Windows_1998_06_12:1.3
	MLWorks_20b1c1_1998_05_07:1.3
	MLWorks_20b0_1998_04_07:1.3
	MLWorks_20b0_1998_03_20:1.3
	MLWorks_20m2_1998_02_16:1.3
	MLWorks_20m1_1997_10_23:1.2
	MLWorks_11r1:1.1.1.1.1.2.1
	MLWorks_11c0_1997_09_09:1.1.1.1.1.2
	MLWorks_10r3:1.1.1.1.3
	MLWorks_10r2_551:1.1.1.1.2
	MLWorks_11:1.1.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.1.1.1
	MLWorks_20m0_1997_06_20:1.1
	MLWorks_1_0_r2c2_1997_06_14:1.1.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.1.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.1.1
	MLWorks_BugFix_1997_04_24:1.1
	MLWorks_1_0_r2_Win32_1997_04_11:1.1
	MLWorks_1_0_r2_Unix_1997_04_04:1.1;
locks; strict;
comment	@# @;


1.3
date	97.11.25.19.37.15;	author daveb;	state Exp;
branches;
next	1.2;

1.2
date	97.08.11.09.51.54;	author brucem;	state Exp;
branches;
next	1.1;

1.1
date	97.03.27.13.11.21;	author andreww;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.05.12.11.11.37;	author hope;	state Exp;
branches
	1.1.1.1.1.1
	1.1.1.1.2.1
	1.1.1.1.3.1;
next	;

1.1.1.1.1.1
date	97.07.28.18.54.14;	author daveb;	state Exp;
branches;
next	1.1.1.1.1.2;

1.1.1.1.1.2
date	97.08.12.09.42.47;	author johnh;	state Exp;
branches
	1.1.1.1.1.2.1.1;
next	;

1.1.1.1.1.2.1.1
date	97.10.07.12.18.59;	author jkbrook;	state Exp;
branches;
next	;

1.1.1.1.2.1
date	97.09.08.17.46.10;	author daveb;	state Exp;
branches;
next	;

1.1.1.1.3.1
date	97.09.09.14.45.19;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
[Bug #1989]
answer file.
@


1.3
log
@[Bug #30323]
@
text
@exception MyException
val noDebugInfo : string -> string = fn
val reportOK : bool -> string = fn
val x : string = "test succeeded"
@


1.2
log
@[Bug #30086]
Stop printing structure contents to prevent spurious failure.
@
text
@a0 1
structure String = struct ... end
@


1.1
log
@new unit
[Bug #1989]
answer file.
@
text
@d1 1
a1 68
val it : unit = ()
structure String =
  struct
    structure Char =
      struct
        eqtype char = char
        eqtype string = string
        val < : (char * char) -> bool = fn
        val <= : (char * char) -> bool = fn
        val > : (char * char) -> bool = fn
        val >= : (char * char) -> bool = fn
        val chr : int -> char = fn
        val compare : (char * char) -> order = fn
        val contains : string -> char -> bool = fn
        val fromCString : string -> char option = fn
        val fromString : string -> char option = fn
        val isAlpha : char -> bool = fn
        val isAlphaNum : char -> bool = fn
        val isAscii : char -> bool = fn
        val isCntrl : char -> bool = fn
        val isDigit : char -> bool = fn
        val isGraph : char -> bool = fn
        val isHexDigit : char -> bool = fn
        val isLower : char -> bool = fn
        val isPrint : char -> bool = fn
        val isPunct : char -> bool = fn
        val isSpace : char -> bool = fn
        val isUpper : char -> bool = fn
        val maxChar : char = #"\255"
        val maxOrd : int = 255
        val minChar : char = #"\000"
        val notContains : string -> char -> bool = fn
        val ord : char -> int = fn
        val pred : char -> char = fn
        val scan : ('a -> (char * 'a) option) -> 'a -> (char * 'a) option = fn
        val succ : char -> char = fn
        val toCString : char -> string = fn
        val toLower : char -> char = fn
        val toString : char -> string = fn
        val toUpper : char -> char = fn
      end
    eqtype char = char
    eqtype string = string
    val < : (string * string) -> bool = fn
    val <= : (string * string) -> bool = fn
    val > : (string * string) -> bool = fn
    val >= : (string * string) -> bool = fn
    val ^ : (string * string) -> string = fn
    val collate : ((char * char) -> order) -> (string * string) -> order = fn
    val compare : (string * string) -> order = fn
    val concat : string list -> string = fn
    val explode : string -> char list = fn
    val extract : (string * int * int option) -> string = fn
    val fields : (char -> bool) -> string -> string list = fn
    val fromCString : string -> string option = fn
    val fromString : string -> string option = fn
    val implode : char list -> string = fn
    val isPrefix : string -> string -> bool = fn
    val maxSize : int = 16777195
    val size : string -> int = fn
    val str : char -> string = fn
    val sub : (string * int) -> char = fn
    val substring : (string * int * int) -> string = fn
    val toCString : string -> string = fn
    val toString : string -> string = fn
    val tokens : (char -> bool) -> string -> string list = fn
    val translate : (char -> string) -> string -> string = fn
  end
@


1.1.1.1
log
@branched from 1.1
@
text
@@


1.1.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@@


1.1.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@@


1.1.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@@


1.1.1.1.1.2
log
@[Bug #30086]
Merging - Stop printing structure contents to prevent spurious failure.
@
text
@d1 68
a68 1
structure String = struct ... end
@


1.1.1.1.1.2.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@
