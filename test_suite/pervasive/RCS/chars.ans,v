head	1.3;
access;
symbols
	MLWorks_Beta_1996_06_03:1.3
	MLWorks_Beta_1996_05_31:1.2
	MLWorks_Beta_1996_05_30:1.2;
locks; strict;
comment	@# @;


1.3
date	96.05.31.12.47.16;	author jont;	state Exp;
branches;
next	1.2;

1.2
date	95.07.17.12.29.42;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	95.07.17.12.22.50;	author jont;	state Exp;
branches;
next	;


desc
@new unit
No reason given
@


1.3
log
@MLWorks.Char has gone, use revised basis Char
@
text
@val it : unit = ()
Compiling basis.general
Compiling basis.__general
Compiling basis.toplevel
Compiling basis.stringcvt
Compiling basis.__pre_char
Compiling basis.__stringcvt
Compiling basis.__preinteger
Compiling basis.__preint32
Compiling basis.integer
Compiling basis.__integer
Compiling basis.char
Compiling basis.__char
structure Char =
  struct
    eqtype char = char
    eqtype string = string
    val < : (char * char) -> bool = fn
    val <= : (char * char) -> bool = fn
    val > : (char * char) -> bool = fn
    val >= : (char * char) -> bool = fn
    val chr : int -> char = fn
    val compare : (char * char) -> order(hidden) = fn
    val contains : string -> char -> bool = fn
    val fromCString : string -> char MLWorks.Option.option = fn
    val fromString : string -> char MLWorks.Option.option = fn
    val isAlpha : char -> bool = fn
    val isAlphaNum : char -> bool = fn
    val isAscii : char -> bool = fn
    val isCntrl : char -> bool = fn
    val isDigit : char -> bool = fn
    val isGraph : char -> bool = fn
    val isHexDigit : char -> bool = fn
    val isLower : char -> bool = fn
    val isPrint : char -> bool = fn
    val isPunct : char -> bool = fn
    val isSpace : char -> bool = fn
    val isUpper : char -> bool = fn
    val maxChar : char = #"\255"
    val maxOrd : int = 255
    val minChar : char = #"\000"
    val notContains : string -> char -> bool = fn
    val ord : char -> int = fn
    val pred : char -> char = fn
    val scan : ('a -> (char * 'a) MLWorks.Option.option) -> 'a -> (char * 'a) MLWorks.Option.option = fn
    val succ : char -> char = fn
    val toCString : char -> string MLWorks.Option.option = fn
    val toLower : char -> char = fn
    val toString : char -> string = fn
    val toUpper : char -> char = fn
  end
val a : char = #"\129"
val a1 : int = 129
val b : char = #"\t"
val b1 : int = 9
val c : char = #"\n"
val c1 : int = 10
val ok : bool = true
val ok2 : bool = true
val x : char = #"\000"
val x1 : int = 0
val y : char = #"0"
val y1 : int = 48
val z : char = #"A"
val z1 : int = 65
@


1.2
log
@Add overloads to tests
@
text
@d1 51
@


1.1
log
@new unit
No reason given
@
text
@d8 1
@
