head	1.3;
access;
symbols
	MLWorks_21c0_1999_03_25:1.3
	MLWorks_20c1_1998_08_20:1.3
	MLWorks_20c0_1998_08_04:1.3
	MLWorks_20b2c2_1998_06_19:1.3
	MLWorks_20b2_Windows_1998_06_12:1.3
	MLWorks_20b1c1_1998_05_07:1.3
	MLWorks_20b0_1998_04_07:1.3
	MLWorks_20b0_1998_03_20:1.3
	MLWorks_20m2_1998_02_16:1.3
	MLWorks_20m1_1997_10_23:1.3
	MLWorks_11r1:1.2.1.1.1.1.1
	MLWorks_11c0_1997_09_09:1.2.1.1.1.1
	MLWorks_10r3:1.2.1.1.3
	MLWorks_10r2_551:1.2.1.1.2
	MLWorks_11:1.2.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.2.1.1
	MLWorks_20m0_1997_06_20:1.3
	MLWorks_1_0_r2c2_1997_06_14:1.2.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.2.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.2.1
	MLWorks_BugFix_1997_04_24:1.2
	MLWorks_1_0_r2_Win32_1997_04_11:1.2
	MLWorks_1_0_r2_Unix_1997_04_04:1.2;
locks; strict;
comment	@ *  @;


1.3
date	97.05.28.12.23.04;	author jont;	state Exp;
branches;
next	1.2;

1.2
date	97.04.02.10.57.50;	author andreww;	state Exp;
branches
	1.2.1.1;
next	1.1;

1.1
date	97.04.01.14.25.17;	author andreww;	state Exp;
branches;
next	;

1.2.1.1
date	97.05.12.11.11.39;	author hope;	state Exp;
branches
	1.2.1.1.1.1
	1.2.1.1.2.1
	1.2.1.1.3.1;
next	;

1.2.1.1.1.1
date	97.07.28.18.54.14;	author daveb;	state Exp;
branches
	1.2.1.1.1.1.1.1;
next	;

1.2.1.1.1.1.1.1
date	97.10.07.12.18.58;	author jkbrook;	state Exp;
branches;
next	;

1.2.1.1.2.1
date	97.09.08.17.46.09;	author daveb;	state Exp;
branches;
next	;

1.2.1.1.3.1
date	97.09.09.14.45.18;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
[Bug #1900]
test.
@


1.3
log
@[Bug #30090]
Remove uses of MLWorks.IO
@
text
@(*
Result: OK
 
$Log: threads6.sml,v $
 *  Revision 1.2  1997/04/02  10:57:50  andreww
 *  making test non SunOS-specific
 *
 *  Revision 1.1  1997/04/01  14:25:17  andreww
 *  new unit
 *  [Bug #1900]
 *  test.
 *
 *
 *

Copyright (c) 1997 Harlequin Ltd.

Checks that we don't run sleeping processes when finished.
*)


(* thread is used to allow the failure thread to sleep the successful
 * thread should it ever be yielded to.  Note that failure has to go
 * before success on the scheduler queue to test that we have skipped
 * it.
 *)

local
  val thread = ref []: MLWorks.Threads.Internal.thread_id list ref

  fun failure () =  (MLWorks.Threads.sleep (hd(!thread));
                    print"test failed\n")

  fun success id =  print"test succeeded\n"

  val failureThread = MLWorks.Threads.fork failure ();
  val successfulThread = MLWorks.Threads.fork success failureThread;
  val _ = thread:=[MLWorks.Threads.Internal.get_id successfulThread];
in
  val _ = MLWorks.Threads.sleep failureThread;
  val _ = MLWorks.Threads.yield();
  val _ = MLWorks.Threads.yield();
  val _ = MLWorks.Threads.Internal.kill failureThread;
end;@


1.2
log
@making test non SunOS-specific
@
text
@d5 3
d32 1
a32 1
                    MLWorks.IO.output(MLWorks.IO.std_out, "test failed\n"))
d34 1
a34 1
  fun success id =  MLWorks.IO.output(MLWorks.IO.std_out, "test succeeded\n");
@


1.2.1.1
log
@branched from 1.2
@
text
@a4 3
 *  Revision 1.2  1997/04/02  10:57:50  andreww
 *  making test non SunOS-specific
 *
@


1.2.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a4 3
 *  Revision 1.2.1.1  1997/05/12  11:11:39  hope
 *  branched from 1.2
 *
@


1.2.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a4 3
 *  Revision 1.2.1.1  1997/05/12  11:11:39  hope
 *  branched from 1.2
 *
@


1.2.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a4 3
 *  Revision 1.2.1.1  1997/05/12  11:11:39  hope
 *  branched from 1.2
 *
@


1.2.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a4 3
 *  Revision 1.2.1.1.1.1  1997/07/28  18:54:14  daveb
 *  branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.1
log
@new unit
[Bug #1900]
test.
@
text
@d4 6
a9 1
$Log:,v $
a17 1
val thread = ref []: MLWorks.Threads.Internal.thread_id list ref
d25 2
a26 4
fun failure () =  (MLWorks.Threads.sleep (hd(!thread));
                   MLWorks.IO.output(MLWorks.IO.std_out, "test failed\n"))

fun success id =  MLWorks.IO.output(MLWorks.IO.std_out, "test succeeded\n");
d28 2
a29 3
val failureThread = MLWorks.Threads.fork failure ();
val successfulThread = MLWorks.Threads.fork success failureThread;
val _ = thread:=[MLWorks.Threads.Internal.get_id successfulThread];
d31 1
a31 3
val _ = MLWorks.Threads.sleep failureThread;
val _ = MLWorks.Threads.yield();
val _ = MLWorks.Threads.yield();
d33 9
a41 1
val _ = MLWorks.Threads.Internal.kill failureThread;@
