head	1.18;
access;
symbols
	MLWorks_21c0_1999_03_25:1.18
	MLWorks_20c1_1998_08_20:1.18
	MLWorks_20c0_1998_08_04:1.18
	MLWorks_20b2c2_1998_06_19:1.18
	MLWorks_20b2_Windows_1998_06_12:1.18
	MLWorks_20b1c1_1998_05_07:1.18
	MLWorks_20b0_1998_04_07:1.18
	MLWorks_20b0_1998_03_20:1.18
	MLWorks_20m2_1998_02_16:1.18
	MLWorks_20m1_1997_10_23:1.18
	MLWorks_11r1:1.18.8.1.1.1.1
	MLWorks_11c0_1997_09_09:1.18.8.1.1.1
	MLWorks_10r3:1.18.8.1.3
	MLWorks_10r2_551:1.18.8.1.2
	MLWorks_11:1.18.8.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.18.8.1
	MLWorks_20m0_1997_06_20:1.18
	MLWorks_1_0_r2c2_1997_06_14:1.18.8.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.18.8.1
	MLWorks_1_0_r2c1_1997_05_12:1.18.8
	MLWorks_BugFix_1997_04_24:1.18
	MLWorks_1_0_r2_Win32_1997_04_11:1.18
	MLWorks_1_0_r2_Unix_1997_04_04:1.18
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.18.6.1.1
	MLWorks_gui_1996_12_18:1.18.7
	MLWorks_1_0_Win32_1996_12_17:1.18.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.18.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.18.4.1
	MLWorks_1_0_Irix_1996_11_28:1.18.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.18.5
	MLWorks_1_0_Unix_1996_11_14:1.18.4
	MLWorks_Open_Beta2_1996_10_11:1.18.3
	MLWorks_License_dev:1.18.2
	MLWorks_1_open_beta_1996_09_13:1.18.1
	MLWorks_Open_Beta_1996_08_22:1.18
	MLWorks_Beta_1996_07_02:1.18
	MLWorks_Beta_1996_06_07:1.18
	MLWorks_Beta_1996_06_06:1.18
	MLWorks_Beta_1996_06_05:1.18
	MLWorks_Beta_1996_06_03:1.18
	MLWorks_Beta_1996_05_31:1.18
	MLWorks_Beta_1996_05_30:1.18
	ML_beta_release_12/08/94:1.8
	ML_beta_release_03/08/94:1.8
	ML_revised_beta_release_25/05/94:1.7
	ML_final_beta_release_02/03/94:1.5
	mlworks-28-01-1994:1.5
	Release:1.3
	mlworks-beta-01-09-1993:1.3;
locks; strict;
comment	@# @;


1.18
date	96.05.22.13.54.28;	author jont;	state Exp;
branches
	1.18.1.1
	1.18.2.1
	1.18.3.1
	1.18.4.1
	1.18.5.1
	1.18.6.1
	1.18.7.1
	1.18.8.1;
next	1.17;

1.17
date	96.01.09.12.47.02;	author matthew;	state Exp;
branches;
next	1.16;

1.16
date	95.09.06.16.36.10;	author io;	state Exp;
branches;
next	1.15;

1.15
date	95.08.29.15.16.55;	author daveb;	state Exp;
branches;
next	1.14;

1.14
date	95.08.21.10.01.56;	author daveb;	state Exp;
branches;
next	1.13;

1.13
date	95.08.15.11.51.09;	author daveb;	state Exp;
branches;
next	1.12;

1.12
date	95.03.15.14.21.38;	author jont;	state Exp;
branches;
next	1.11;

1.11
date	95.02.09.15.17.35;	author jont;	state Exp;
branches;
next	1.10;

1.10
date	94.10.10.17.27.41;	author daveb;	state Exp;
branches;
next	1.9;

1.9
date	94.09.15.13.31.21;	author daveb;	state Exp;
branches;
next	1.8;

1.8
date	94.06.17.12.04.58;	author daveb;	state Exp;
branches;
next	1.7;

1.7
date	94.05.03.14.23.08;	author daveb;	state Exp;
branches;
next	1.6;

1.6
date	94.03.15.14.47.32;	author jont;	state Exp;
branches;
next	1.5;

1.5
date	93.12.16.11.31.52;	author nickh;	state Exp;
branches;
next	1.4;

1.4
date	93.09.28.14.14.51;	author daveb;	state Exp;
branches;
next	1.3;

1.3
date	93.08.29.12.12.19;	author daveb;	state Exp;
branches
	1.3.1.1;
next	1.2;

1.2
date	93.07.12.12.23.09;	author daveb;	state Exp;
branches;
next	1.1;

1.1
date	93.04.14.16.43.37;	author daveb;	state Exp;
branches;
next	;

1.3.1.1
date	93.08.29.12.12.19;	author jont;	state Exp;
branches;
next	1.3.1.2;

1.3.1.2
date	93.09.27.14.35.54;	author daveb;	state Exp;
branches;
next	;

1.18.1.1
date	96.09.13.11.27.12;	author hope;	state Exp;
branches;
next	;

1.18.2.1
date	96.10.07.16.17.45;	author hope;	state Exp;
branches;
next	;

1.18.3.1
date	96.10.17.11.37.38;	author hope;	state Exp;
branches;
next	;

1.18.4.1
date	96.11.14.13.05.31;	author hope;	state Exp;
branches
	1.18.4.1.1.1;
next	;

1.18.4.1.1.1
date	96.11.28.15.15.10;	author hope;	state Exp;
branches;
next	;

1.18.5.1
date	96.11.22.18.22.59;	author hope;	state Exp;
branches;
next	;

1.18.6.1
date	96.12.17.18.01.02;	author hope;	state Exp;
branches
	1.18.6.1.1.1;
next	;

1.18.6.1.1.1
date	97.02.24.11.52.44;	author hope;	state Exp;
branches;
next	;

1.18.7.1
date	96.12.18.09.56.25;	author hope;	state Exp;
branches;
next	;

1.18.8.1
date	97.05.12.10.54.24;	author hope;	state Exp;
branches
	1.18.8.1.1.1
	1.18.8.1.2.1
	1.18.8.1.3.1;
next	;

1.18.8.1.1.1
date	97.07.28.18.37.16;	author daveb;	state Exp;
branches
	1.18.8.1.1.1.1.1;
next	;

1.18.8.1.1.1.1.1
date	97.10.07.12.02.20;	author jkbrook;	state Exp;
branches;
next	;

1.18.8.1.2.1
date	97.09.08.17.29.26;	author daveb;	state Exp;
branches;
next	;

1.18.8.1.3.1
date	97.09.09.14.27.23;	author daveb;	state Exp;
branches;
next	;


desc
@Checks whether a test succeeds or not.
@


1.18
log
@Converting to shell script
@
text
@#!/bin/sh
#
# CHECK_SUCCESS, just a dummy
#
# $Log$
#
# Copyright Harlequin Ltd. 1996.
#
CHECK_SUCCESS.sh $*
@


1.18.8.1
log
@branched from 1.18
@
text
@d5 1
a5 4
# $Log: CHECK_SUCCESS,v $
# Revision 1.18  1996/05/22  13:54:28  jont
# Converting to shell script
#
@


1.18.8.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a5 3
# Revision 1.18.8.1  1997/05/12  10:54:24  hope
# branched from 1.18
#
@


1.18.8.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a5 3
# Revision 1.18.8.1  1997/05/12  10:54:24  hope
# branched from 1.18
#
@


1.18.8.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a5 3
# Revision 1.18.8.1  1997/05/12  10:54:24  hope
# branched from 1.18
#
@


1.18.8.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a5 3
# Revision 1.18.8.1.1.1  1997/07/28  18:37:16  daveb
# branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
#
@


1.18.7.1
log
@branched from 1.18
@
text
@d5 1
a5 4
# $Log: CHECK_SUCCESS,v $
# Revision 1.18  1996/05/22  13:54:28  jont
# Converting to shell script
#
@


1.18.6.1
log
@branched from 1.18
@
text
@d5 1
a5 4
# $Log: CHECK_SUCCESS,v $
# Revision 1.18  1996/05/22  13:54:28  jont
# Converting to shell script
#
@


1.18.6.1.1.1
log
@branched from 1.18.6.1
@
text
@a5 3
# Revision 1.18.6.1  1996/12/17  18:01:02  hope
# branched from 1.18
#
@


1.18.5.1
log
@branched from 1.18
@
text
@d5 1
a5 4
# $Log: CHECK_SUCCESS,v $
# Revision 1.18  1996/05/22  13:54:28  jont
# Converting to shell script
#
@


1.18.4.1
log
@branched from 1.18
@
text
@d5 1
a5 4
# $Log: CHECK_SUCCESS,v $
# Revision 1.18  1996/05/22  13:54:28  jont
# Converting to shell script
#
@


1.18.4.1.1.1
log
@branched from 1.18.4.1
@
text
@a5 3
# Revision 1.18.4.1  1996/11/14  13:05:31  hope
# branched from 1.18
#
@


1.18.3.1
log
@branched from 1.18
@
text
@d5 1
a5 4
# $Log: CHECK_SUCCESS,v $
# Revision 1.18  1996/05/22  13:54:28  jont
# Converting to shell script
#
@


1.18.2.1
log
@branched from 1.18
@
text
@d5 1
a5 4
# $Log: CHECK_SUCCESS,v $
# Revision 1.18  1996/05/22  13:54:28  jont
# Converting to shell script
#
@


1.18.1.1
log
@branched from 1.18
@
text
@d5 1
a5 4
# $Log: CHECK_SUCCESS,v $
# Revision 1.18  1996/05/22  13:54:28  jont
# Converting to shell script
#
@


1.17
log
@Renaming motif.img to gui.img
@
text
@d1 1
a1 5
#!/bin/csh
# 
# $Log: CHECK_SUCCESS,v $
# Revision 1.16  1995/09/06  16:36:10  io
# use rts/bin/$ARCH/$OS/main to help multiarch testing
d3 1
a3 2
# Revision 1.15  1995/08/29  15:16:55  daveb
# Compiler faults and intolerable signals are now reported separately.
d5 1
a5 4
# Revision 1.14  1995/08/21  10:01:56  daveb
# Remove any existing .out file before run (we may not have
# permission to overwrite it, but we do have delete permission
# on the directory).
d7 1
a7 2
# Revision 1.13  1995/08/15  11:51:09  daveb
# Changed default SRC_DIR to /u/sml ...
d9 1
a9 156
# Revision 1.12  1995/03/15  14:21:38  jont
# Pass -dir parameter through
#
# Revision 1.11  1995/02/09  15:17:35  jont
# Modify to use new image directory structure
#
# Revision 1.10  1994/10/10  17:27:41  daveb
# Added check for the success status of the compile command itself.
#
# Revision 1.9  1994/09/15  13:31:21  daveb
# Added "Intolerable signal" to the list of strings to check for.
#
# Revision 1.8  1994/06/17  12:04:58  daveb
# Changed default SRC_DIR to /usr/sml ...
#
# Revision 1.7  1994/05/03  14:23:08  daveb
# Fixed erroneous early exit.  It now returns a non-zero status if any
# of its arguments fail.
#
# Revision 1.6  1994/03/15  14:47:32  jont
# Change default source directory to /usr/users/sml/MLW/src
#
# Revision 1.5  1993/12/16  11:31:52  nickh
# The string "error" occurs correctly in at least one test. We check instead
# for "error:".
#
# Revision 1.4  1993/09/28  14:14:51  daveb
# Merged in bug fix.
#
# Revision 1.3.1.2  1993/09/27  14:35:54  daveb
# Ensured that messages of failure all contain the word "failed".
#
# Revision 1.3.1.1  1993/08/29  12:12:19  jont
# Fork for bug fixing
#
# Revision 1.3  1993/08/29  12:12:19  daveb
# Added check for compiler faults.
#
# Revision 1.2  1993/07/12  12:23:09  daveb
# Made error check search for 'Uncaught exception' as well as error.
#
# Revision 1.1  1993/04/14  16:43:37  daveb
# Initial revision
#
#
# Copyright Harlequin Ltd. 1992.
#

set SRCDIR=/u/sml/MLW/src
set KEEP=0
set ARCH_OS_DIR=SPARC/SunOS

alias usage echo 'Usage: CHECK_SUCCESS \[-src \<source dir\>\] \[-dir \<architecture/OS\>\] \[-keep\] \<test files\>'

while ($#argv)
  switch ($1)
    case -keep:
      shift
      set KEEP=1
      breaksw
    case -src:
      shift
      if ($1 != "") then
        set SRCDIR=$1
        shift
      else
        usage
        exit (1)
      endif
      breaksw
    case -dir:
      shift
      if ($1 != "") then
        set ARCH_OS_DIR=$1
        shift
      else
        usage
        exit (1)
      endif
      breaksw
    default:
      break
      breaksw
  endsw
end

if ( ! $#argv) then
  usage
  exit (1)
endif

if ( ! -x $SRCDIR/rts/bin/$ARCH_OS_DIR/main) then
  echo Can\'t find $SRCDIR/rts/bin/$ARCH_OS_DIR/main
  exit (1)
endif

if ( ! -r $SRCDIR/images/$ARCH_OS_DIR/gui.img) then
  echo Can\'t find $SRCDIR/images/$ARCH_OS_DIR/gui.img
  exit (1)
endif

set STATUS=0
foreach i ($argv)
  set COMPILE_FAILED=0
  if ( ! -r $i ) then
    echo Can\'t find $i
  else if { egrep Result: $i >& /dev/null } then
    rm -f $i:r.out
    if { (COMPILE_FILE -src $SRCDIR -dir $ARCH_OS_DIR $i > $i:r.out) >& /dev/null } then
      if { egrep 'compiler fault|Intolerable signal' $i:r.out >& /dev/null } then
          echo ${i}: test failed, compiler fault \(see $i:r.out\).
	  set STATUS=3
      else if { egrep 'error:|Uncaught exception' $i:r.out >& /dev/null } then
        if { egrep FAIL $i >& /dev/null } then
          echo ${i}: test succeeded.
        else
          echo ${i}: test failed, unexpected error \(see $i:r.out\).
	  set STATUS=1
        endif
      else if { egrep warning $i:r.out >& /dev/null } then
        if { egrep WARNING $i >& /dev/null } then
          echo ${i}: test succeeded.
        else
          echo ${i}: test failed, unexpected warning \(see $i:r.out\).
	  set STATUS=1
        endif
      else
        if { egrep OK $i >& /dev/null } then
          echo ${i}: test succeeded.
        else if { egrep FAIL $i >& /dev/null } then
          echo ${i}: test failed, error expected \(see $i:r.out\).
	  set STATUS=1
        else if { egrep WARNING $i >& /dev/null } then
          echo ${i}: test failed, warning expected \(see $i:r.out\).
	  set STATUS=1
        else
          echo ${i}: test failed, bad result status.
	  set STATUS=2
        endif
      endif
      if { egrep INTERPRETATION $i >& /dev/null } then
        echo The correct behaviour in this case is open to question.
      endif
    else
      echo ${i}: test failed: compiler crashed
      set STATUS=3
    endif
  else
    echo ${i}: test failed, missing result status.
    set STATUS=2
  endif
  if ( ! $STATUS && ! $KEEP ) then
    rm $i:r.out
  endif
end
exit ($STATUS)
@


1.16
log
@use rts/bin/$ARCH/$OS/main to help multiarch testing
@
text
@d4 3
d114 2
a115 2
if ( ! -r $SRCDIR/images/$ARCH_OS_DIR/motif.img) then
  echo Can\'t find $SRCDIR/images/$ARCH_OS_DIR/motif.img
@


1.15
log
@Compiler faults and intolerable signals are now reported separately.
@
text
@d4 3
a64 1

d106 2
a107 2
if ( ! -x $SRCDIR/rts/runtime) then
  echo Can\'t find $SRCDIR/rts/runtime
@


1.14
log
@Remove any existing .out file before run (we may not have
permission to overwrite it, but we do have delete permission
on the directory).
@
text
@d4 5
d122 4
a125 1
      if { egrep 'error:|Uncaught exception|compiler fault|Intolerable signal' $i:r.out >& /dev/null } then
@


1.13
log
@Changed default SRC_DIR to /u/sml ...
@
text
@d4 3
d115 1
@


1.12
log
@Pass -dir parameter through
@
text
@d4 3
d52 1
a52 1
set SRCDIR=/usr/sml/MLW/src
@


1.11
log
@Modify to use new image directory structure
@
text
@d4 3
d109 1
a109 1
    if { (COMPILE_FILE -src $SRCDIR $i > $i:r.out) >& /dev/null } then
@


1.10
log
@Added check for the success status of the compile command itself.
@
text
@d4 3
d49 3
a51 1
alias usage echo 'Usage: CHECK_SUCCESS \[-src \<source dir\>\] \[-keep\] \<test files\>'
d69 10
d95 2
a96 2
if ( ! -r $SRCDIR/images/motif.img) then
  echo Can\'t find $SRCDIR/images/motif.img
@


1.9
log
@Added "Intolerable signal" to the list of strings to check for.
@
text
@d4 3
d87 1
d91 15
a105 4
    (COMPILE_FILE -src $SRCDIR $i > $i:r.out ) >& /dev/null
    if { egrep 'error:|Uncaught exception|compiler fault|Intolerable signal' $i:r.out >& /dev/null } then
      if { egrep FAIL $i >& /dev/null } then
        echo ${i}: test succeeded.
d107 12
a118 2
        echo ${i}: test failed, unexpected error \(see $i:r.out\).
	set STATUS=1
d120 2
a121 6
    else if { egrep warning $i:r.out >& /dev/null } then
      if { egrep WARNING $i >& /dev/null } then
        echo ${i}: test succeeded.
      else
        echo ${i}: test failed, unexpected warning \(see $i:r.out\).
	set STATUS=1
d124 2
a125 15
      if { egrep OK $i >& /dev/null } then
        echo ${i}: test succeeded.
      else if { egrep FAIL $i >& /dev/null } then
        echo ${i}: test failed, error expected \(see $i:r.out\).
	set STATUS=1
      else if { egrep WARNING $i >& /dev/null } then
        echo ${i}: test failed, warning expected \(see $i:r.out\).
	set STATUS=1
      else
        echo ${i}: test failed, bad result status.
	set STATUS=2
      endif
    endif
    if { egrep INTERPRETATION $i >& /dev/null } then
      echo The correct behaviour in this case is open to question.
@


1.8
log
@Changed default SRC_DIR to /usr/sml ...
@
text
@d4 3
d88 1
a88 1
    if { egrep 'error:|Uncaught exception|compiler fault' $i:r.out >& /dev/null } then
@


1.7
log
@Fixed erroneous ealry exit.  It now returns a non-zsro status if any
of its arguments fail.
@
text
@d4 4
d37 1
a37 1
set SRCDIR=/usr/users/sml/MLW/src
@


1.6
log
@Change default source directory to /usr/users/sml/MLW/src
@
text
@d4 3
d75 1
a83 1
	set STATUS=0
a90 1
	set STATUS=0
a97 1
	set STATUS=0
a118 1
  exit ($STATUS)
d120 1
@


1.5
log
@The string "error" occurs correctly in at least one test. We check instead
for "error:".
@
text
@d4 4
d30 1
a30 1
set SRCDIR=/usr/users/sml/src
@


1.4
log
@Merged in bug fix.
@
text
@d4 3
d73 1
a73 1
    if { egrep 'error|Uncaught exception|compiler fault' $i:r.out >& /dev/null } then
@


1.3
log
@Added check for compiler faults.
@
text
@d4 9
d75 1
a75 1
        echo ${i}: unexpected error, see $i:r.out.
d83 1
a83 1
        echo ${i}: unexpected warning, see $i:r.out.
d91 1
a91 1
        echo ${i}: error expected, see $i:r.out.
d94 1
a94 1
        echo ${i}: warning expected, see $i:r.out.
d97 1
a97 1
        echo ${i}: bad result status.
d105 1
a105 1
    echo ${i}: missing result status.
@


1.3.1.1
log
@Fork for bug fixing
@
text
@a3 3
# Revision 1.3  1993/08/29  12:12:19  daveb
# Added check for compiler faults.
#
@


1.3.1.2
log
@Ensured that messages of failure all contain the word "failed".
@
text
@a3 3
# Revision 1.3.1.1  1993/08/29  12:12:19  jont
# Fork for bug fixing
#
d69 1
a69 1
        echo ${i}: test failed, unexpected error \(see $i:r.out\).
d77 1
a77 1
        echo ${i}: test failed, unexpected warning \(see $i:r.out\).
d85 1
a85 1
        echo ${i}: test failed, error expected \(see $i:r.out\).
d88 1
a88 1
        echo ${i}: test failed, warning expected \(see $i:r.out\).
d91 1
a91 1
        echo ${i}: test failed, bad result status.
d99 1
a99 1
    echo ${i}: test failed, missing result status.
@


1.2
log
@Made error check search for 'Uncaught exception' as well as error.
@
text
@d4 3
d61 1
a61 1
    if { egrep 'error|Uncaught exception' $i:r.out >& /dev/null } then
@


1.1
log
@Initial revision
@
text
@d3 3
a5 1
# $Log$
d7 1
d58 1
a58 1
    if { egrep error $i:r.out >& /dev/null } then
@
