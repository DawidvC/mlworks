head	1.8;
access;
symbols
	MLWorks_21c0_1999_03_25:1.8
	MLWorks_20c1_1998_08_20:1.7
	MLWorks_20c0_1998_08_04:1.7
	MLWorks_20b2c2_1998_06_19:1.7
	MLWorks_20b2_Windows_1998_06_12:1.7
	MLWorks_20b1c1_1998_05_07:1.7
	MLWorks_20b0_1998_04_07:1.7
	MLWorks_20b0_1998_03_20:1.7
	MLWorks_20m2_1998_02_16:1.7
	MLWorks_20m1_1997_10_23:1.6
	MLWorks_11r1:1.5.1.1.1.1.1
	MLWorks_11c0_1997_09_09:1.5.1.1.1.1
	MLWorks_10r3:1.5.1.1.3
	MLWorks_10r2_551:1.5.1.1.2
	MLWorks_11:1.5.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.5.1.1
	MLWorks_20m0_1997_06_20:1.5
	MLWorks_1_0_r2c2_1997_06_14:1.5.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.5.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.5.1
	MLWorks_BugFix_1997_04_24:1.5
	MLWorks_1_0_r2_Win32_1997_04_11:1.5
	MLWorks_1_0_r2_Unix_1997_04_04:1.5
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.3.6.1.1
	MLWorks_gui_1996_12_18:1.3.7
	MLWorks_1_0_Win32_1996_12_17:1.3.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.3.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.3.4.1
	MLWorks_1_0_Irix_1996_11_28:1.3.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.3.5
	MLWorks_1_0_Unix_1996_11_14:1.3.4
	MLWorks_Open_Beta2_1996_10_11:1.3.3
	MLWorks_License_dev:1.3.2
	MLWorks_1_open_beta_1996_09_13:1.3.1
	MLWorks_Open_Beta_1996_08_22:1.3
	MLWorks_Beta_1996_07_02:1.1
	MLWorks_Beta_1996_06_07:1.1
	MLWorks_Beta_1996_06_06:1.1
	MLWorks_Beta_1996_06_05:1.1
	MLWorks_Beta_1996_06_03:1.1
	MLWorks_Beta_1996_05_31:1.1
	MLWorks_Beta_1996_05_30:1.1;
locks; strict;
comment	@# @;


1.8
date	99.02.23.12.55.14;	author mitchell;	state Exp;
branches;
next	1.7;

1.7
date	97.11.19.17.47.07;	author daveb;	state Exp;
branches;
next	1.6;

1.6
date	97.08.13.15.35.17;	author jont;	state Exp;
branches;
next	1.5;

1.5
date	97.01.03.10.29.36;	author stephenb;	state Exp;
branches
	1.5.1.1;
next	1.4;

1.4
date	96.12.20.17.04.24;	author jont;	state Exp;
branches;
next	1.3;

1.3
date	96.08.15.09.48.30;	author io;	state Exp;
branches
	1.3.1.1
	1.3.2.1
	1.3.3.1
	1.3.4.1
	1.3.5.1
	1.3.6.1
	1.3.7.1;
next	1.2;

1.2
date	96.08.14.15.53.11;	author io;	state Exp;
branches;
next	1.1;

1.1
date	96.05.22.15.36.35;	author jont;	state Exp;
branches;
next	;

1.3.1.1
date	96.09.13.11.27.13;	author hope;	state Exp;
branches;
next	;

1.3.2.1
date	96.10.07.16.17.46;	author hope;	state Exp;
branches;
next	;

1.3.3.1
date	96.10.17.11.37.40;	author hope;	state Exp;
branches;
next	;

1.3.4.1
date	96.11.14.13.05.32;	author hope;	state Exp;
branches
	1.3.4.1.1.1;
next	;

1.3.4.1.1.1
date	96.11.28.15.15.11;	author hope;	state Exp;
branches;
next	;

1.3.5.1
date	96.11.22.18.23.00;	author hope;	state Exp;
branches;
next	;

1.3.6.1
date	96.12.17.18.01.03;	author hope;	state Exp;
branches
	1.3.6.1.1.1;
next	;

1.3.6.1.1.1
date	97.02.24.11.52.44;	author hope;	state Exp;
branches;
next	;

1.3.7.1
date	96.12.18.09.56.26;	author hope;	state Exp;
branches;
next	;

1.5.1.1
date	97.05.12.10.54.25;	author hope;	state Exp;
branches
	1.5.1.1.1.1
	1.5.1.1.2.1
	1.5.1.1.3.1;
next	;

1.5.1.1.1.1
date	97.07.28.18.37.19;	author daveb;	state Exp;
branches
	1.5.1.1.1.1.1.1;
next	;

1.5.1.1.1.1.1.1
date	97.10.07.12.02.22;	author jkbrook;	state Exp;
branches;
next	;

1.5.1.1.2.1
date	97.09.08.17.29.28;	author daveb;	state Exp;
branches;
next	;

1.5.1.1.3.1
date	97.09.09.14.27.24;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
@


1.8
log
@[Bug #190507]
Ignore DEPEND directories
@
text
@#!/bin/sh
# 
# $Log: CHECK_SUCCESS_ALL.sh,v $
# Revision 1.7  1997/11/19  17:47:07  daveb
# [Bug #30323]
#
# Revision 1.6  1997/08/13  15:35:17  jont
# [Bug #30151]
# Modify to work with installed MLWorks as well
#
# Revision 1.5  1997/01/03  10:29:36  stephenb
# [Bug #1881]
# Modified so that now knows how to skip architecture specific
# directories that aren't of interest to the architecture being
# tested.  Also changed the way OS specific directories are skipped
# to use the same mechanism.
#
# Revision 1.4  1996/12/20  17:04:24  jont
# [Bug #1879]
# Remove default setting of ARCH_OS
#
# Revision 1.3  1996/08/15  09:48:30  io
# ** No reason given. **
#
# Revision 1.2  1996/08/14  15:53:11  io
# architecture specific handling
#
# Revision 1.1  1996/05/22  15:36:35  jont
# new unit
#
# Revision 1.9  1996/01/09  12:47:19  matthew
# Renaming motif.img to gui.img
#
# Revision 1.8  1995/09/06  17:10:07  io
# use rts/bin/$ARCH/$OS/main to help multiarch testing
#
# Revision 1.7  1995/08/15  11:51:12  daveb
# Changed default SRC_DIR to /u/sml ...
#
# Revision 1.6  1995/06/16  16:45:15  daveb
# Converted this script to /bin/sh because Irix csh choked on "too many arguments"
#
# Revision 1.5  1995/03/15  14:35:13  jont
# Pass on -dir parameter
#
# Revision 1.4  1995/02/09  15:22:36  jont
# Modify to use new image directory structure
#
# Revision 1.3  1994/06/17  12:05:09  daveb
# Changed default SRC_DIR to /usr/sml ...
#
# Revision 1.2  1994/03/15  14:47:44  jont
# Change default source directory to /usr/users/sml/MLW/src
#
# Revision 1.1  1993/04/14  16:59:00  daveb
# Initial revision
#
#
# Copyright Harlequin Ltd. 1992.
#

TESTDIR=.
SRCDIR=/u/sml/MLW/src
KEEP=0

ARCH_OS_DIR=""

IMAGE=guib.img

installed=""

usage='Usage: CHECK_SUCCESS_ALL \[-src \<source dir\>\] \[-dir \<architecture/OS\>\] \[-test \< test dir\>\] \[-installed\]'

while [ $# -gt 0 ]
do
  case $1 in
    -src)
      shift
      if [ "$1" != "" ]
      then
        SRCDIR=$1
        shift
      else
        echo $usage
        exit 1
      fi;;
    -dir)
      shift
      if [ "$1" != "" ]
      then
        ARCH_OS_DIR=$1
        shift
      else
        echo $usage
        exit 1
      fi;;
    -test)
      shift
      if [ "$1" != "" ]
      then
        TESTDIR=$1
        shift
      else
        echo $usage
        exit 1
      fi;;
    -installed)
      installed="-installed"
      shift;;
    *)
      echo $usage
      exit 1;;
  esac
done

if [ "$ARCH_OS_DIR" = "" ]
then
  echo "parameter -dir missing"
  exit 1
fi



#.arch: ARCH_OS_DIR gives us the ARCH we want, but what we want to know is
# the name of all the architectures whose files we don't want to test,
# since find(1) wants the names of directories to prune not to enter.
#
# The following produces arch_dirs_to_prune which contains the names
# of the architecture specific directory files to skip in find(1) format.
# For example if ARCH_OS_DIR=SPARC/Solaris, then the result will be :-
#
#   "-o name MIPS -o name I386"
#
# Note that the leading "-o" is ok since this string will come after
# any OS directories to prune, see .os.
#
# If you make any changes to the following, also make them to 
# <URI:CHECK_RESULT_ALL.sh>
#
# To include a new architecture it should only be necessary to add the
# name to the following line ...

architectures="SPARC MIPS I386"
ARCH=`dirname $ARCH_OS_DIR`
arch_dirs_to_prune=""
for a in $architectures
do
  if test $a != $ARCH
  then
    arch_dirs_to_prune=${arch_dirs_to_prune}" -o -name $a"
  fi
done


#.os: As with the ARCH case, find the names of the directories to prune
# rather than keep.  Since there are only currently two types, this is
# simple ...
case "`basename $ARCH_OS_DIR`" in
  Win95|NT) os_dir_to_prune=unix ;;
  *)        os_dir_to_prune=win32 ;;
esac


files=`find $TESTDIR -type d \( -name $os_dir_to_prune $arch_dirs_to_prune -o -name DEPEND \) -prune -o -type f -name \*.sml -print | egrep -v "^.$"`

# Re the egrep: you you know how blank lines can be generated by find
# (and hence the need for the egrep), please add a note here.

OS_NAME=`basename $ARCH_OS_DIR`

RTS_NAME=main

if [ "$OS_NAME" = "NT" -o "$OS_NAME" = "Win95" ]
then
  RTS_NAME=main.exe
  OS_TYPE=Win32
else
  OS_TYPE=Unix
fi

if [ "$installed" = "-installed" ]
then
  if [ "$OS_TYPE" = "Unix" ]
  then
    if [ ! -x $SRCDIR/bin/mlrun ]
    then
      echo Can\'t find $SRCDIR/bin/mlrun
      exit 1
    fi
  else
    if [ ! -x $SRCDIR/bin/main.exe ]
    then
      echo Can\'t find $SRCDIR/bin/main.exe
      exit 1
    fi
  fi
  if [ ! -r $SRCDIR/images/$IMAGE ]
  then
    echo Can\'t find $SRCDIR/images/$IMAGE
    exit 1
  fi
else
  if [ ! -x $SRCDIR/rts/bin/$ARCH_OS_DIR/$RTS_NAME ]
  then
    echo Can\'t find $SRCDIR/rts/bin/$ARCH_OS_DIR/$RTS_NAME
    exit 1
  fi
  if [ ! -r $SRCDIR/images/$ARCH_OS_DIR/$IMAGE ]
  then
    echo Can\'t find $SRCDIR/images/$ARCH_OS_DIR/$IMAGE
    exit 1
  fi
fi

cd $TESTDIR
set STATUS=0

for i in $files; do
  if CHECK_SUCCESS.sh -src $SRCDIR -dir $ARCH_OS_DIR $installed $i
  then
    # /bin/sh insists on a command at this point.
    dummy=0
  else
    STATUS=1
  fi
done

exit $STATUS
@


1.7
log
@[Bug #30323]
@
text
@d4 3
d164 1
a164 1
files=`find $TESTDIR -type d \( -name $os_dir_to_prune $arch_dirs_to_prune \) -prune -o -type f -name \*.sml -print | egrep -v "^.$"`
@


1.6
log
@[Bug #30151]
Modify to work with installed MLWorks as well
@
text
@d4 4
d65 2
d194 1
a194 1
  if [ ! -r $SRCDIR/images/gui.img ]
d196 1
a196 1
    echo Can\'t find $SRCDIR/images/gui.img
d205 1
a205 1
  if [ ! -r $SRCDIR/images/$ARCH_OS_DIR/gui.img ]
d207 1
a207 1
    echo Can\'t find $SRCDIR/images/$ARCH_OS_DIR/gui.img
@


1.5
log
@[Bug #1881]
Modified so that now knows how to skip architecture specific
directories that aren't of interest to the architecture being
tested.  Also changed the way OS specific directories are skipped
to use the same mechanism.
@
text
@d4 7
d61 3
a63 1
usage='Usage: CHECK_SUCCESS_ALL \[-src \<source dir\>\] \[-dir \<architecture/OS\>\] \[-test \< test dir\>\]'
d98 3
d160 1
d162 3
a164 1
if [ ! -x $SRCDIR/rts/bin/$ARCH_OS_DIR/main ]
d166 4
a169 2
  echo Can\'t find $SRCDIR/rts/bin/$ARCH_OS_DIR/main
  exit 1
d172 1
a172 1
if [ ! -r $SRCDIR/images/$ARCH_OS_DIR/gui.img ]
d174 30
a203 2
  echo Can\'t find $SRCDIR/images/$ARCH_OS_DIR/gui.img
  exit 1
d210 1
a210 1
  if CHECK_SUCCESS.sh -src $SRCDIR -dir $ARCH_OS_DIR $i
@


1.5.1.1
log
@branched from 1.5
@
text
@a3 7
# Revision 1.5  1997/01/03  10:29:36  stephenb
# [Bug #1881]
# Modified so that now knows how to skip architecture specific
# directories that aren't of interest to the architecture being
# tested.  Also changed the way OS specific directories are skipped
# to use the same mechanism.
#
@


1.5.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a3 3
# Revision 1.5.1.1  1997/05/12  10:54:25  hope
# branched from 1.5
#
@


1.5.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a3 3
# Revision 1.5.1.1  1997/05/12  10:54:25  hope
# branched from 1.5
#
@


1.5.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a3 3
# Revision 1.5.1.1  1997/05/12  10:54:25  hope
# branched from 1.5
#
@


1.5.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a3 3
# Revision 1.5.1.1.1.1  1997/07/28  18:37:19  daveb
# branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
#
@


1.4
log
@[Bug #1879]
Remove default setting of ARCH_OS
@
text
@d4 4
d101 47
a147 7
OS_NAME=`basename $ARCH_OS_DIR`
files=`find $TESTDIR -type f -name \*.sml -print | egrep -v "^.$"`
if [ "$OS_NAME" = NT -o "$OS_NAME" = Win95 ]; then
  files=`echo "$files" | egrep -v "\/unix\/"`
else
  files=`echo "$files" | egrep -v "\/win32\/"`
fi
@


1.3
log
@** No reason given. **
@
text
@d4 3
d48 1
a48 1
ARCH_OS_DIR=SPARC/SunOS
d90 6
@


1.3.7.1
log
@branched from 1.3
@
text
@a3 3
# Revision 1.3  1996/08/15  09:48:30  io
# ** No reason given. **
#
@


1.3.6.1
log
@branched from 1.3
@
text
@a3 3
# Revision 1.3  1996/08/15  09:48:30  io
# ** No reason given. **
#
@


1.3.6.1.1.1
log
@branched from 1.3.6.1
@
text
@a3 3
# Revision 1.3.6.1  1996/12/17  18:01:03  hope
# branched from 1.3
#
@


1.3.5.1
log
@branched from 1.3
@
text
@a3 3
# Revision 1.3  1996/08/15  09:48:30  io
# ** No reason given. **
#
@


1.3.4.1
log
@branched from 1.3
@
text
@a3 3
# Revision 1.3  1996/08/15  09:48:30  io
# ** No reason given. **
#
@


1.3.4.1.1.1
log
@branched from 1.3.4.1
@
text
@a3 3
# Revision 1.3.4.1  1996/11/14  13:05:32  hope
# branched from 1.3
#
@


1.3.3.1
log
@branched from 1.3
@
text
@a3 3
# Revision 1.3  1996/08/15  09:48:30  io
# ** No reason given. **
#
@


1.3.2.1
log
@branched from 1.3
@
text
@a3 3
# Revision 1.3  1996/08/15  09:48:30  io
# ** No reason given. **
#
@


1.3.1.1
log
@branched from 1.3
@
text
@a3 3
# Revision 1.3  1996/08/15  09:48:30  io
# ** No reason given. **
#
@


1.2
log
@architecture specific handling
@
text
@d4 3
d89 3
a91 5
FOO=`pwd`
cd $TESTDIR
directory=`find $TESTDIR -type d -print | egrep -v "^.$"`
if [ "$OS_NAME" = "NT" -o "$OS_NAME" = "Win95" ]; then
  directory=`echo "$directory" | egrep -v "unix"`
d93 1
a93 1
  directory=`echo "$directory" | egrep -v "win32"`
a94 2
files=`find $directory -type f -name \*.sml -print`
cd $FOO
@


1.1
log
@new unit
@
text
@d3 4
a6 1
# $Log: CHECK_SUCCESS_ALL,v $
d85 12
d112 1
a112 2
for i in */*.sml 
do
@
