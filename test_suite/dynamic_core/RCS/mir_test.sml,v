head	1.4;
access;
symbols
	MLWorks_21c0_1999_03_25:1.4
	MLWorks_20c1_1998_08_20:1.4
	MLWorks_20c0_1998_08_04:1.4
	MLWorks_20b2c2_1998_06_19:1.4
	MLWorks_20b2_Windows_1998_06_12:1.4
	MLWorks_20b1c1_1998_05_07:1.4
	MLWorks_20b0_1998_04_07:1.4
	MLWorks_20b0_1998_03_20:1.4
	MLWorks_20m2_1998_02_16:1.4
	MLWorks_20m1_1997_10_23:1.4
	MLWorks_11r1:1.4.8.1.1.1.1
	MLWorks_11c0_1997_09_09:1.4.8.1.1.1
	MLWorks_10r3:1.4.8.1.3
	MLWorks_10r2_551:1.4.8.1.2
	MLWorks_11:1.4.8.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.4.8.1
	MLWorks_20m0_1997_06_20:1.4
	MLWorks_1_0_r2c2_1997_06_14:1.4.8.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.4.8.1
	MLWorks_1_0_r2c1_1997_05_12:1.4.8
	MLWorks_BugFix_1997_04_24:1.4
	MLWorks_1_0_r2_Win32_1997_04_11:1.4
	MLWorks_1_0_r2_Unix_1997_04_04:1.4
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.4.6.1.1
	MLWorks_gui_1996_12_18:1.4.7
	MLWorks_1_0_Win32_1996_12_17:1.4.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.4.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.4.4.1
	MLWorks_1_0_Irix_1996_11_28:1.4.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.4.5
	MLWorks_1_0_Unix_1996_11_14:1.4.4
	MLWorks_Open_Beta2_1996_10_11:1.4.3
	MLWorks_License_dev:1.4.2
	MLWorks_1_open_beta_1996_09_13:1.4.1
	MLWorks_Open_Beta_1996_08_22:1.4
	MLWorks_Beta_1996_07_02:1.4
	MLWorks_Beta_1996_06_07:1.4
	MLWorks_Beta_1996_06_06:1.4
	MLWorks_Beta_1996_06_05:1.4
	MLWorks_Beta_1996_06_03:1.4
	MLWorks_Beta_1996_05_31:1.4
	MLWorks_Beta_1996_05_30:1.4;
locks; strict;
comment	@ * @;


1.4
date	95.08.21.13.03.26;	author io;	state Exp;
branches
	1.4.1.1
	1.4.2.1
	1.4.3.1
	1.4.4.1
	1.4.5.1
	1.4.6.1
	1.4.7.1
	1.4.8.1;
next	1.3;

1.3
date	95.08.09.19.21.52;	author io;	state Exp;
branches;
next	1.2;

1.2
date	95.08.02.11.32.44;	author io;	state Exp;
branches;
next	1.1;

1.1
date	95.07.28.02.35.12;	author io;	state Exp;
branches;
next	;

1.4.1.1
date	96.09.13.11.29.15;	author hope;	state Exp;
branches;
next	;

1.4.2.1
date	96.10.07.16.19.55;	author hope;	state Exp;
branches;
next	;

1.4.3.1
date	96.10.17.11.40.14;	author hope;	state Exp;
branches;
next	;

1.4.4.1
date	96.11.14.13.07.40;	author hope;	state Exp;
branches
	1.4.4.1.1.1;
next	;

1.4.4.1.1.1
date	96.11.28.15.17.29;	author hope;	state Exp;
branches;
next	;

1.4.5.1
date	96.11.22.18.25.09;	author hope;	state Exp;
branches;
next	;

1.4.6.1
date	96.12.17.18.03.26;	author hope;	state Exp;
branches
	1.4.6.1.1.1;
next	;

1.4.6.1.1.1
date	97.02.24.11.55.16;	author hope;	state Exp;
branches;
next	;

1.4.7.1
date	96.12.18.09.58.41;	author hope;	state Exp;
branches;
next	;

1.4.8.1
date	97.05.12.10.57.12;	author hope;	state Exp;
branches
	1.4.8.1.1.1
	1.4.8.1.2.1
	1.4.8.1.3.1;
next	;

1.4.8.1.1.1
date	97.07.28.18.37.27;	author daveb;	state Exp;
branches
	1.4.8.1.1.1.1.1;
next	;

1.4.8.1.1.1.1.1
date	97.10.07.12.02.32;	author jkbrook;	state Exp;
branches;
next	;

1.4.8.1.2.1
date	97.09.08.17.29.38;	author daveb;	state Exp;
branches;
next	;

1.4.8.1.3.1
date	97.09.09.14.27.39;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
test imm32 handling in MirTypes.TEST
@


1.4
log
@supplement again
@
text
@(*

Result: OK

$Log: mir_test.sml,v $
# Revision 1.3  1995/08/09  19:21:52  io
# add more combinations esp unsigned ones
#
# Revision 1.2  1995/08/02  11:32:44  io
# add semicolons...
#
# Revision 1.1  1995/07/28  02:35:12  io
# new unit
# test imm32 handling in MirTypes.TEST
#

Copyright (c) 1995 Harlequin Ltd.
 
*)
fun f  x = x > ~32768
fun f' x = ~32768 < x

fun g  x = x > 2
fun g' x = 2 < x

fun h  x = (x <= 32768)
fun h' x = (32768 >= x)

fun i  x = (x - 2) < (2 - x)
fun i' x = (2 - x) > (x - 2);

val a = (f 2) andalso (f' 2)
andalso not (g 2) andalso not (g' 2)
andalso (h 2) andalso (h' 2)
andalso (i ~32768) andalso (i' ~32768)
(*{ > >= < <= == <> >u >=u <u <u <=u }
{ (lhs, rhs),
  (lhs, imm16),
  (lhs, imm32),
  (imm16, rhs),
  (imm32, rhs)
}
*)
(* zero testing
 * bgez, bltz, blez, bgtz, beqz, bnez
 *)
 
(* lhs > zero -> bgtz lhs
 *                
 * zero > rhs -> redo < rhs zero
 *
 * lhs >= zero ->
 *               bgez lhs
 * lhs < zero ->
 *               bltz lhs
 * zero <= rhs ->
 *               redo >= rhs zero
 * zero > rhs ->
 *               redo < rhs zero
 *)

fun f x = x > 0;
not (f ~1) andalso not (f ~0) andalso not (f 0) andalso f 1 andalso f 2
fun f x = 0 < x;
not (f ~1) andalso not (f ~0) andalso not (f 0) andalso f 1 andalso f 2
fun f x = x >= 0;
not (f ~1) andalso (f ~0) andalso (f 0) andalso f 1 andalso f 2
fun f x = 0 <= x;
not (f ~1) andalso (f ~0) andalso (f 0) andalso f 1 andalso f 2
fun f x = x < 0;
(f ~1) andalso not (f ~0) andalso not (f 0) andalso not(f 1) andalso not (f 2)
fun f x = 0 > x;
(f ~1) andalso not (f ~0) andalso not (f 0) andalso not(f 1) andalso not (f 2)
fun f x = x <= 0;
(f ~1) andalso (f ~0) andalso (f 0) andalso not(f 1) andalso not (f 2)
fun f x = 0 >= x;
(f ~1) andalso (f ~0) andalso (f 0) andalso not(f 1) andalso not (f 2)
fun f x = x = 0;
not (f ~1) andalso (f ~0) andalso (f 0) andalso not(f 1) andalso not (f 2)
fun f x = 0 = x;
not (f ~1) andalso (f ~0) andalso (f 0) andalso not(f 1) andalso not (f 2)
fun f x = x <> 0;
(f ~1) andalso not (f ~0) andalso not (f 0) andalso (f 1) andalso (f 2)
fun f x = 0 <> x;
(f ~1) andalso not (f ~0) andalso not (f 0) andalso (f 1) andalso (f 2)
fun f x = x > 0w0;
(f 0w1) andalso not (f 0w0) andalso (f 0w2) andalso (f 0w32769)
fun f x = 0w0 < x;
(f 0w1) andalso not (f 0w0) andalso (f 0w2) andalso (f 0w32769)
fun f x = x >= 0w0;
(f 0w1) andalso (f 0w0) andalso (f 0w2) andalso (f 0w32769)
fun f x = 0w0 <= x;
(f 0w1) andalso (f 0w0) andalso (f 0w2) andalso (f 0w32769)
fun f x = x < 0w0;
not (f 0w1) andalso not (f 0w0) andalso not (f 0w2) andalso not (f 0w32769)
fun f x = 0w0 > x;
not (f 0w1) andalso not (f 0w0) andalso not (f 0w2) andalso not (f 0w32769)
fun f x = x <= 0w0;
not (f 0w1) andalso (f 0w0) andalso not (f 0w2) andalso not (f 0w32769)
fun f x = 0w0 >= x;
not (f 0w1) andalso (f 0w0) andalso not (f 0w2) andalso not (f 0w32769)  


(* short testing *)
fun f x = x = 2;
not (f 1) andalso f 2 andalso not (f 3)
fun f x = 2 = x;
not (f 1) andalso f 2 andalso not (f 3)
fun f x = x <> 2;
f ~1 andalso not (f 2) andalso f 3
fun f x = 2 <> x;
f ~1 andalso not (f 2) andalso f 3
fun f x = x = 0w2;
not (f 0w0) andalso f 0w2
fun f x = 0w2 = x;
not (f 0w0) andalso f 0w2
fun f x = x <> 0w2;
f 0w0 andalso not (f 0w2)
fun f x = 0w2 <> x;
f 0w0 andalso not (f 0w2)


(* constant testing
 * imm16 combinations
 *)
fun f x = x > 2;
not (f ~1) andalso not (f ~0) andalso not (f 0) andalso not (f 1) andalso not (f 2) andalso (f 3)
fun f x = 2 < x;
not (f ~1) andalso not (f ~0) andalso not (f 0) andalso not (f 1) andalso not (f 2) andalso (f 3)

fun f x = x < 2;
(f 1) andalso not (f 2) andalso not (f 3)
fun f x = 2 > x;
(f 1) andalso not (f 2) andalso not (f 3)

fun f x = x >= 2;
not (f ~1) andalso not (f 0) andalso (f 2) andalso (f 3)
fun f x = 2 <= x;
not (f ~1) andalso not (f 0) andalso (f 2) andalso (f 3)

fun f x = x <= 2;
f ~1 andalso f 0 andalso f 2 andalso not (f 3)
fun f x = 2 >= x;
f ~1 andalso f 0 andalso f 2 andalso not (f 3)


fun f x = x > 0w2;
not (f 0w0) andalso not (f 0w1) andalso not (f 0w2) andalso (f 0w3)
fun f x = 0w2 < x;
not (f 0w0) andalso not (f 0w1) andalso not (f 0w2) andalso (f 0w3)

fun f x = x < 0w2;
f 0w0 andalso f 0w1 andalso not (f 0w2) andalso not (f 0w3)
fun f x = 0w2 > x;
f 0w0 andalso f 0w1 andalso not (f 0w2) andalso not (f 0w3)

fun f x = x >= 0w2;
not (f 0w0) andalso not (f 0w1) andalso (f 0w2) andalso (f 0w3)
fun f x = 0w2 <= x;
not (f 0w0) andalso not (f 0w1) andalso (f 0w2) andalso (f 0w3)

fun f x = x <= 0w2;
(f 0w0) andalso (f 0w1) andalso (f 0w2) andalso not (f 0w3)
fun f x = 0w2 >= x;
(f 0w0) andalso (f 0w1) andalso (f 0w2) andalso not (f 0w3)



fun f x y = x > (y:int);
not (f 2 3) andalso not (f 2 2) andalso (f 2 1)
fun f x y = y < (x:int);
not (f 2 3) andalso not (f 2 2) andalso (f 2 1)
fun f x y = x < (y:int);
(f 2 3) andalso not (f 2 2) andalso not (f 2 1)
fun f x y = y > (x:int);
(f 2 3) andalso not (f 2 2) andalso not (f 2 1)
fun f x y = x >= (y:int);
not (f 2 3) andalso (f 2 2) andalso (f 2 1) andalso (f 2 0)
fun f x y = y <= (x:int);
not (f 2 3) andalso (f 2 2) andalso (f 2 1) andalso (f 2 0)


fun f x y = x > (y:word);
not (f 0w2 0w3) andalso not (f 0w2 0w2) andalso (f 0w2 0w1) andalso (f 0w2 0w0)
fun f x y = y < (x:word);
not (f 0w2 0w3) andalso not (f 0w2 0w2) andalso (f 0w2 0w1) andalso (f 0w2 0w0)
fun f x y = x < (y:word);
(f 0w2 0w3) andalso not (f 0w2 0w2) andalso not (f 0w2 0w1) andalso not (f 0w2 0w0)
fun f x y = y > (x:word);
(f 0w2 0w3) andalso not (f 0w2 0w2) andalso not (f 0w2 0w1) andalso not (f 0w2 0w0)
fun f x y = x >= (y:word);
not (f 0w2 0w3) andalso (f 0w2 0w2) andalso (f 0w2 0w1) andalso (f 0w2 0w0)
fun f x y = y <= (x:word);
not (f 0w2 0w3) andalso (f 0w2 0w2) andalso (f 0w2 0w1) andalso (f 0w2 0w0)


(* Testing large constants ake imm32 *)
fun f x = x > ~32768;
not (f ~32769) andalso not (f ~32768) andalso (f 0) andalso (f 32768)
fun f x = ~32768 < x;
not (f ~32769) andalso not (f ~32768) andalso (f 0) andalso (f 32768)

fun f x = x < ~32768;
(f ~32769) andalso not (f ~32768) andalso not (f 0) andalso not (f 32768)
fun f x = ~32768 > x;
(f ~32769) andalso not (f ~32768) andalso not (f 0) andalso not (f 32768)


fun f x = x >= ~32768;
not (f ~32769) andalso (f ~32768) andalso (f 0) andalso (f 32768)
fun f x = ~32768 <= x;
not (f ~32769) andalso (f ~32768) andalso (f 0) andalso (f 32768)

fun f x = x <= ~32768;
(f ~32769) andalso (f ~32768) andalso not (f 0) andalso not (f 32768)
fun f x = ~32768 >= x;
(f ~32769) andalso (f ~32768) andalso not (f 0) andalso not (f 32768)

fun f x = x > 536870911;
not (f (~536870911)) andalso not (f 0)


@


1.4.8.1
log
@branched from 1.4
@
text
@a5 3
 * Revision 1.4  1995/08/21  13:03:26  io
 * supplement again
 *
@


1.4.8.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a5 3
 * Revision 1.4.8.1  1997/05/12  10:57:12  hope
 * branched from 1.4
 *
@


1.4.8.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a5 3
 * Revision 1.4.8.1  1997/05/12  10:57:12  hope
 * branched from 1.4
 *
@


1.4.8.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a5 3
 * Revision 1.4.8.1  1997/05/12  10:57:12  hope
 * branched from 1.4
 *
@


1.4.8.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a5 3
 * Revision 1.4.8.1.1.1  1997/07/28  18:37:27  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.4.7.1
log
@branched from 1.4
@
text
@a5 3
 * Revision 1.4  1995/08/21  13:03:26  io
 * supplement again
 *
@


1.4.6.1
log
@branched from 1.4
@
text
@a5 3
 * Revision 1.4  1995/08/21  13:03:26  io
 * supplement again
 *
@


1.4.6.1.1.1
log
@branched from 1.4.6.1
@
text
@a5 3
 * Revision 1.4.6.1  1996/12/17  18:03:26  hope
 * branched from 1.4
 *
@


1.4.5.1
log
@branched from 1.4
@
text
@a5 3
 * Revision 1.4  1995/08/21  13:03:26  io
 * supplement again
 *
@


1.4.4.1
log
@branched from 1.4
@
text
@a5 3
 * Revision 1.4  1995/08/21  13:03:26  io
 * supplement again
 *
@


1.4.4.1.1.1
log
@branched from 1.4.4.1
@
text
@a5 3
 * Revision 1.4.4.1  1996/11/14  13:07:40  hope
 * branched from 1.4
 *
@


1.4.3.1
log
@branched from 1.4
@
text
@a5 3
 * Revision 1.4  1995/08/21  13:03:26  io
 * supplement again
 *
@


1.4.2.1
log
@branched from 1.4
@
text
@a5 3
 * Revision 1.4  1995/08/21  13:03:26  io
 * supplement again
 *
@


1.4.1.1
log
@branched from 1.4
@
text
@a5 3
 * Revision 1.4  1995/08/21  13:03:26  io
 * supplement again
 *
@


1.3
log
@add more combinations esp unsigned ones
@
text
@d6 3
d66 37
d218 3
@


1.2
log
@add semicolons...
@
text
@d6 3
d33 147
a179 2
val _ = if a = true then (output(std_out, "Pass\n"))
	else (output(std_out, "Fail\n"));
@


1.1
log
@new unit
test imm32 handling in MirTypes.TEST
@
text
@d5 5
a9 1
$Log$
d24 1
a24 1
fun i' x = (2 - x) > (x - 2)
@
