head	1.9;
access;
symbols
	MLWorks_21c0_1999_03_25:1.9
	MLWorks_20c1_1998_08_20:1.9
	MLWorks_20c0_1998_08_04:1.9
	MLWorks_20b2c2_1998_06_19:1.9
	MLWorks_20b2_Windows_1998_06_12:1.9
	MLWorks_20b1c1_1998_05_07:1.9
	MLWorks_20b0_1998_04_07:1.9
	MLWorks_20b0_1998_03_20:1.9
	MLWorks_20m2_1998_02_16:1.9
	MLWorks_20m1_1997_10_23:1.9
	MLWorks_11r1:1.9.1.1.1.1.1
	MLWorks_11c0_1997_09_09:1.9.1.1.1.1
	MLWorks_10r3:1.9.1.1.3
	MLWorks_10r2_551:1.9.1.1.2
	MLWorks_11:1.9.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.9.1.1
	MLWorks_20m0_1997_06_20:1.9
	MLWorks_1_0_r2c2_1997_06_14:1.9.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.9.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.9.1
	MLWorks_BugFix_1997_04_24:1.9
	MLWorks_1_0_r2_Win32_1997_04_11:1.9
	MLWorks_1_0_r2_Unix_1997_04_04:1.9
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.8.6.1.1
	MLWorks_gui_1996_12_18:1.8.7
	MLWorks_1_0_Win32_1996_12_17:1.8.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.8.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.8.4.1
	MLWorks_1_0_Irix_1996_11_28:1.8.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.8.5
	MLWorks_1_0_Unix_1996_11_14:1.8.4
	MLWorks_Open_Beta2_1996_10_11:1.8.3
	MLWorks_License_dev:1.8.2
	MLWorks_1_open_beta_1996_09_13:1.8.1
	MLWorks_Open_Beta_1996_08_22:1.6
	MLWorks_Beta_1996_07_02:1.6
	MLWorks_Beta_1996_06_07:1.6
	MLWorks_Beta_1996_06_06:1.6
	MLWorks_Beta_1996_06_05:1.6
	MLWorks_Beta_1996_06_03:1.6
	MLWorks_Beta_1996_05_31:1.6
	MLWorks_Beta_1996_05_30:1.6;
locks; strict;
comment	@# @;


1.9
date	97.03.27.15.41.41;	author matthew;	state Exp;
branches
	1.9.1.1;
next	1.8;

1.8
date	96.09.09.12.09.05;	author io;	state Exp;
branches
	1.8.1.1
	1.8.2.1
	1.8.3.1
	1.8.4.1
	1.8.5.1
	1.8.6.1
	1.8.7.1;
next	1.7;

1.7
date	96.09.07.00.02.40;	author io;	state Exp;
branches;
next	1.6;

1.6
date	95.10.17.10.45.35;	author jont;	state Exp;
branches;
next	1.5;

1.5
date	95.08.15.17.46.58;	author daveb;	state Exp;
branches;
next	1.4;

1.4
date	95.06.14.18.08.02;	author daveb;	state Exp;
branches;
next	1.3;

1.3
date	95.01.27.14.15.59;	author daveb;	state Exp;
branches;
next	1.2;

1.2
date	94.10.26.11.29.30;	author matthew;	state Exp;
branches;
next	1.1;

1.1
date	94.08.16.11.26.40;	author jont;	state Exp;
branches;
next	;

1.8.1.1
date	96.09.13.11.29.40;	author hope;	state Exp;
branches;
next	;

1.8.2.1
date	96.10.07.16.20.21;	author hope;	state Exp;
branches;
next	;

1.8.3.1
date	96.10.17.11.40.43;	author hope;	state Exp;
branches;
next	;

1.8.4.1
date	96.11.14.13.08.06;	author hope;	state Exp;
branches
	1.8.4.1.1.1;
next	;

1.8.4.1.1.1
date	96.11.28.15.17.57;	author hope;	state Exp;
branches;
next	;

1.8.5.1
date	96.11.22.18.25.34;	author hope;	state Exp;
branches;
next	;

1.8.6.1
date	96.12.17.18.03.58;	author hope;	state Exp;
branches
	1.8.6.1.1.1;
next	;

1.8.6.1.1.1
date	97.02.24.11.55.45;	author hope;	state Exp;
branches;
next	;

1.8.7.1
date	96.12.18.09.59.06;	author hope;	state Exp;
branches;
next	;

1.9.1.1
date	97.05.12.10.57.44;	author hope;	state Exp;
branches
	1.9.1.1.1.1
	1.9.1.1.2.1
	1.9.1.1.3.1;
next	;

1.9.1.1.1.1
date	97.07.28.18.38.58;	author daveb;	state Exp;
branches
	1.9.1.1.1.1.1.1;
next	;

1.9.1.1.1.1.1.1
date	97.10.07.12.04.05;	author jkbrook;	state Exp;
branches;
next	;

1.9.1.1.2.1
date	97.09.08.17.31.13;	author daveb;	state Exp;
branches;
next	;

1.9.1.1.3.1
date	97.09.09.14.29.18;	author daveb;	state Exp;
branches;
next	;


desc
@new file
@


1.9
log
@Updating.


Updating.
@
text
@datatype bar =
  A |
  B of int
datatype foo =
  A of int |
  B
val A : int -> foo
val B : foo
val a : bar = B _
val b : bar = _
val c : bar = _
val d : bar = _
val w : foo = _
val x : foo = B
val y : foo = _
val z : foo = _
@


1.9.1.1
log
@branched from 1.9
@
text
@@


1.9.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@@


1.9.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@@


1.9.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@@


1.9.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@


1.8
log
@remove banner
@
text
@d9 5
a13 5
val a : bar = B <<not an integer>: _>
val b : bar = <(should carry value): _>
val c : bar = <(Not INTEGER or PAIR in expected datatype case): _>
val d : bar = <(Constructor tag not integer in expected datatype case): _>
val w : foo = <(should not carry value): _>
d15 2
a16 2
val y : foo = <(Not INTEGER or PAIR in expected datatype case): _>
val z : foo = <(Constructor tag not integer in expected datatype case): _>
@


1.8.7.1
log
@branched from 1.8
@
text
@@


1.8.6.1
log
@branched from 1.8
@
text
@@


1.8.6.1.1.1
log
@branched from 1.8.6.1
@
text
@@


1.8.5.1
log
@branched from 1.8
@
text
@@


1.8.4.1
log
@branched from 1.8
@
text
@@


1.8.4.1.1.1
log
@branched from 1.8.4.1
@
text
@@


1.8.3.1
log
@branched from 1.8
@
text
@@


1.8.2.1
log
@branched from 1.8
@
text
@@


1.8.1.1
log
@branched from 1.8
@
text
@@


1.7
log
@updating for commercial version flyer
@
text
@a0 2
commercial version may be purchased directly from Harlequin.

@


1.6
log
@** No reason given. **
@
text
@d1 2
@


1.5
log
@Changed the way datatypes are printed.
@
text
@d1 6
a6 2
eqtype bar
eqtype foo
@


1.4
log
@Order of output has changed.
@
text
@d1 4
a12 6
datatype bar =
  A |
  B of int
datatype foo =
  A of int |
  B
@


1.3
log
@Value printer no longer prints shape information.
@
text
@a0 6
datatype bar =
  A |
  B of int
datatype foo =
  A of int |
  B
d9 6
@


1.2
log
@Updated
@
text
@d7 5
a11 5
val a : bar = B <<not an integer> shape {2, {3, 1}}>
val b : bar = <(should carry value) shape 1>
val c : bar = <(Not INTEGER or PAIR in expected datatype case) shape "foobar">
val d : bar = <(Constructor tag not integer in expected datatype case) shape {"a", {"b", 1}}>
val w : foo = <(should not carry value) shape {1, {2, {3, 1}}}>
d13 2
a14 2
val y : foo = <(Not INTEGER or PAIR in expected datatype case) shape "foobar">
val z : foo = <(Constructor tag not integer in expected datatype case) shape {"a", {"b", 1}}>
@


1.1
log
@new file
@
text
@d1 3
d7 4
a10 5
datatype bar =
  A |
  B of int
val z : foo = <(Constructor tag not integer in expected datatype case) shape {"a", {"b", 1}}>
val y : foo = <(Not INTEGER or PAIR in expected datatype case) shape "foobar">
a11 1
val c : bar = <(Not INTEGER or PAIR in expected datatype case) shape "foobar">
d13 2
a14 3
val d : bar = <(Constructor tag not integer in expected datatype case) shape {"a", {"b", 1}}>
val a : bar = B <<not an integer> shape {2, {3, 1}}>
val b : bar = <(should carry value) shape 1>
@
