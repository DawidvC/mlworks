head	1.2;
access;
symbols
	MLWorks_21c0_1999_03_25:1.2
	MLWorks_20c1_1998_08_20:1.2
	MLWorks_20c0_1998_08_04:1.2
	MLWorks_20b2c2_1998_06_19:1.2
	MLWorks_20b2_Windows_1998_06_12:1.2
	MLWorks_20b1c1_1998_05_07:1.2
	MLWorks_20b0_1998_04_07:1.2
	MLWorks_20b0_1998_03_20:1.2
	MLWorks_20m2_1998_02_16:1.2
	MLWorks_20m1_1997_10_23:1.2
	MLWorks_11r1:1.2.8.1.1.1.1
	MLWorks_11c0_1997_09_09:1.2.8.1.1.1
	MLWorks_10r3:1.2.8.1.3
	MLWorks_10r2_551:1.2.8.1.2
	MLWorks_11:1.2.8.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.2.8.1
	MLWorks_20m0_1997_06_20:1.2
	MLWorks_1_0_r2c2_1997_06_14:1.2.8.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.2.8.1
	MLWorks_1_0_r2c1_1997_05_12:1.2.8
	MLWorks_BugFix_1997_04_24:1.2
	MLWorks_1_0_r2_Win32_1997_04_11:1.2
	MLWorks_1_0_r2_Unix_1997_04_04:1.2
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.2.6.1.1
	MLWorks_gui_1996_12_18:1.2.7
	MLWorks_1_0_Win32_1996_12_17:1.2.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.2.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.2.4.1
	MLWorks_1_0_Irix_1996_11_28:1.2.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.2.5
	MLWorks_1_0_Unix_1996_11_14:1.2.4
	MLWorks_Open_Beta2_1996_10_11:1.2.3
	MLWorks_License_dev:1.2.2
	MLWorks_1_open_beta_1996_09_13:1.2.1
	MLWorks_Open_Beta_1996_08_22:1.2
	MLWorks_Beta_1996_07_02:1.2
	MLWorks_Beta_1996_06_07:1.2
	MLWorks_Beta_1996_06_06:1.2
	MLWorks_Beta_1996_06_05:1.2
	MLWorks_Beta_1996_06_03:1.2
	MLWorks_Beta_1996_05_31:1.2
	MLWorks_Beta_1996_05_30:1.2;
locks; strict;
comment	@ * @;


1.2
date	96.05.20.10.10.38;	author jont;	state Exp;
branches
	1.2.1.1
	1.2.2.1
	1.2.3.1
	1.2.4.1
	1.2.5.1
	1.2.6.1
	1.2.7.1
	1.2.8.1;
next	1.1;

1.1
date	95.07.11.13.43.57;	author jont;	state Exp;
branches;
next	;

1.2.1.1
date	96.09.13.11.29.02;	author hope;	state Exp;
branches;
next	;

1.2.2.1
date	96.10.07.16.19.42;	author hope;	state Exp;
branches;
next	;

1.2.3.1
date	96.10.17.11.39.58;	author hope;	state Exp;
branches;
next	;

1.2.4.1
date	96.11.14.13.07.27;	author hope;	state Exp;
branches
	1.2.4.1.1.1;
next	;

1.2.4.1.1.1
date	96.11.28.15.17.16;	author hope;	state Exp;
branches;
next	;

1.2.5.1
date	96.11.22.18.24.56;	author hope;	state Exp;
branches;
next	;

1.2.6.1
date	96.12.17.18.03.08;	author hope;	state Exp;
branches
	1.2.6.1.1.1;
next	;

1.2.6.1.1.1
date	97.02.24.11.55.00;	author hope;	state Exp;
branches;
next	;

1.2.7.1
date	96.12.18.09.58.28;	author hope;	state Exp;
branches;
next	;

1.2.8.1
date	97.05.12.10.56.56;	author hope;	state Exp;
branches
	1.2.8.1.1.1
	1.2.8.1.2.1
	1.2.8.1.3.1;
next	;

1.2.8.1.1.1
date	97.07.28.18.40.25;	author daveb;	state Exp;
branches
	1.2.8.1.1.1.1.1;
next	;

1.2.8.1.1.1.1.1
date	97.10.07.12.05.33;	author jkbrook;	state Exp;
branches;
next	;

1.2.8.1.2.1
date	97.09.08.17.32.44;	author daveb;	state Exp;
branches;
next	;

1.2.8.1.3.1
date	97.09.09.14.30.58;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
No reason given
@


1.2
log
@Bits moved to MLWorks.Internal
@
text
@(* Tests for shifts

Result: OK
 
$Log: shifts.sml,v $
 * Revision 1.1  1995/07/11  13:43:57  jont
 * new unit
 * No reason given
 *

Copyright (c) 1995 Harlequin Ltd.
*)

(* Start with shifts by constants *)

local

  val two_to_28 = MLWorks.Internal.Bits.lshift(1, 28)
  val maxint = two_to_28 + (two_to_28-1)
  val minint = ~maxint - 1

  fun a x = MLWorks.Internal.Bits.lshift(x, 1)
  fun b x = MLWorks.Internal.Bits.lshift(x, 2)
  fun c x = MLWorks.Internal.Bits.lshift(x, 3)
  fun d x = MLWorks.Internal.Bits.lshift(x, 4)
  fun e x = MLWorks.Internal.Bits.lshift(x, 5)
  fun f x = MLWorks.Internal.Bits.lshift(x, 6)
  fun g x = MLWorks.Internal.Bits.lshift(x, 29)
  fun h x = MLWorks.Internal.Bits.lshift(x, 30)

in
  val ok1 = a 1 = 2 andalso b 1 = 4 andalso c 1 = 8 andalso d 1 = 16 andalso e 1 = 32 andalso f 1 = 64 andalso a ~1 = ~2 andalso b ~1 = ~4 andalso c ~1 = ~8 andalso d ~1 = ~16 andalso e ~1 = ~32 andalso f ~1 = ~64 andalso g 1 = minint andalso g ~1 = minint andalso h 1 = 0 andalso h ~1 = 0

  local
    fun a x = MLWorks.Internal.Bits.rshift(x, 1)
    fun b x = MLWorks.Internal.Bits.rshift(x, 2)
    fun g x = MLWorks.Internal.Bits.rshift(x, 29)
    fun h x = MLWorks.Internal.Bits.rshift(x, 30)
  in
    val ok2 = a 1 = 0 andalso a ~1 = maxint andalso a 2 = 1 andalso a ~2 = maxint andalso a ~3 = maxint-1
    val ok3 = b 1 = 0 andalso b 2 = 0 andalso b 3 = 0 andalso b 4 = 1 andalso b ~1 = two_to_28-1
    val ok3 = ok3 andalso g maxint = 0 andalso g ~1 = 1 andalso h maxint = 0 andalso h minint = 0
  end

  local
    fun a x = MLWorks.Internal.Bits.arshift(x, 1)
    fun b x = MLWorks.Internal.Bits.arshift(x, 2)
    fun g x = MLWorks.Internal.Bits.arshift(x, 29)
    fun h x = MLWorks.Internal.Bits.arshift(x, 30)
    fun i x = MLWorks.Internal.Bits.arshift(x, 32)
  in
    val ok4 = a 1 = 0 andalso a 2 = 1 andalso a 3 = 1 andalso a 4 = 2 andalso a ~1 = ~1 andalso a ~2 = ~1 andalso a ~3 = ~2 andalso a ~4 = ~2

    val ok5 = b 1 = 0 andalso b ~1 = ~1 andalso b 2 = 0 andalso b ~2 = ~1 andalso b 4 = 1 andalso b ~3 = ~ 1 andalso b ~4 = ~1 andalso b ~5 = ~2

    val ok6 = g maxint = 0 andalso g minint = ~1
    val ok7 = h maxint = 0 andalso h minint = ~1
    val ok8 = i maxint = 0 andalso i minint = ~1
  end

  local
    fun l(x, y) = MLWorks.Internal.Bits.lshift(x, y)
    fun r(x, y) = MLWorks.Internal.Bits.rshift(x, y)
    fun ar(x, y) = MLWorks.Internal.Bits.arshift(x, y)
  in
    val ok9 = l(1, l(1, 2)) = 16 andalso r(16, l(1, 2)) = 1 andalso r(~1, l(1, 2)) = l(1, 26) - 1
    val ok10 = l(l(1, 2), l(1, 2)) = l(1, 6) andalso r(l(1, 4), l(1, 2)) = 1
    val ok11 = ar(~1, l(1, 2)) = ~1 andalso ar(16, l(1, 2)) = 1
  end
end
@


1.2.8.1
log
@branched from 1.2
@
text
@a5 3
 * Revision 1.2  1996/05/20  10:10:38  jont
 * Bits moved to MLWorks.Internal
 *
@


1.2.8.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a5 3
 * Revision 1.2.8.1  1997/05/12  10:56:56  hope
 * branched from 1.2
 *
@


1.2.8.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a5 3
 * Revision 1.2.8.1  1997/05/12  10:56:56  hope
 * branched from 1.2
 *
@


1.2.8.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a5 3
 * Revision 1.2.8.1  1997/05/12  10:56:56  hope
 * branched from 1.2
 *
@


1.2.8.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a5 3
 * Revision 1.2.8.1.1.1  1997/07/28  18:40:25  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.2.7.1
log
@branched from 1.2
@
text
@a5 3
 * Revision 1.2  1996/05/20  10:10:38  jont
 * Bits moved to MLWorks.Internal
 *
@


1.2.6.1
log
@branched from 1.2
@
text
@a5 3
 * Revision 1.2  1996/05/20  10:10:38  jont
 * Bits moved to MLWorks.Internal
 *
@


1.2.6.1.1.1
log
@branched from 1.2.6.1
@
text
@a5 3
 * Revision 1.2.6.1  1996/12/17  18:03:08  hope
 * branched from 1.2
 *
@


1.2.5.1
log
@branched from 1.2
@
text
@a5 3
 * Revision 1.2  1996/05/20  10:10:38  jont
 * Bits moved to MLWorks.Internal
 *
@


1.2.4.1
log
@branched from 1.2
@
text
@a5 3
 * Revision 1.2  1996/05/20  10:10:38  jont
 * Bits moved to MLWorks.Internal
 *
@


1.2.4.1.1.1
log
@branched from 1.2.4.1
@
text
@a5 3
 * Revision 1.2.4.1  1996/11/14  13:07:27  hope
 * branched from 1.2
 *
@


1.2.3.1
log
@branched from 1.2
@
text
@a5 3
 * Revision 1.2  1996/05/20  10:10:38  jont
 * Bits moved to MLWorks.Internal
 *
@


1.2.2.1
log
@branched from 1.2
@
text
@a5 3
 * Revision 1.2  1996/05/20  10:10:38  jont
 * Bits moved to MLWorks.Internal
 *
@


1.2.1.1
log
@branched from 1.2
@
text
@a5 3
 * Revision 1.2  1996/05/20  10:10:38  jont
 * Bits moved to MLWorks.Internal
 *
@


1.1
log
@new unit
No reason given
@
text
@d5 5
a9 1
$Log$
d18 1
a18 1
  val two_to_28 = Bits.lshift(1, 28)
d22 8
a29 8
  fun a x = Bits.lshift(x, 1)
  fun b x = Bits.lshift(x, 2)
  fun c x = Bits.lshift(x, 3)
  fun d x = Bits.lshift(x, 4)
  fun e x = Bits.lshift(x, 5)
  fun f x = Bits.lshift(x, 6)
  fun g x = Bits.lshift(x, 29)
  fun h x = Bits.lshift(x, 30)
d35 4
a38 4
    fun a x = Bits.rshift(x, 1)
    fun b x = Bits.rshift(x, 2)
    fun g x = Bits.rshift(x, 29)
    fun h x = Bits.rshift(x, 30)
d46 5
a50 5
    fun a x = Bits.arshift(x, 1)
    fun b x = Bits.arshift(x, 2)
    fun g x = Bits.arshift(x, 29)
    fun h x = Bits.arshift(x, 30)
    fun i x = Bits.arshift(x, 32)
d62 3
a64 3
    fun l(x, y) = Bits.lshift(x, y)
    fun r(x, y) = Bits.rshift(x, y)
    fun ar(x, y) = Bits.arshift(x, y)
@
