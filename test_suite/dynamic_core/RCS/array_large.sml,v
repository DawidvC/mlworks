head	1.7;
access;
symbols
	MLWorks_21c0_1999_03_25:1.7
	MLWorks_20c1_1998_08_20:1.7
	MLWorks_20c0_1998_08_04:1.7
	MLWorks_20b2c2_1998_06_19:1.7
	MLWorks_20b2_Windows_1998_06_12:1.7
	MLWorks_20b1c1_1998_05_07:1.7
	MLWorks_20b0_1998_04_07:1.7
	MLWorks_20b0_1998_03_20:1.7
	MLWorks_20m2_1998_02_16:1.7
	MLWorks_20m1_1997_10_23:1.6
	MLWorks_11r1:1.5.8.1.1.1.1
	MLWorks_11c0_1997_09_09:1.5.8.1.1.1
	MLWorks_10r3:1.5.8.1.3
	MLWorks_10r2_551:1.5.8.1.2
	MLWorks_11:1.5.8.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.5.8.1
	MLWorks_20m0_1997_06_20:1.6
	MLWorks_1_0_r2c2_1997_06_14:1.5.8.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.5.8.1
	MLWorks_1_0_r2c1_1997_05_12:1.5.8
	MLWorks_BugFix_1997_04_24:1.5
	MLWorks_1_0_r2_Win32_1997_04_11:1.5
	MLWorks_1_0_r2_Unix_1997_04_04:1.5
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.5.6.1.1
	MLWorks_gui_1996_12_18:1.5.7
	MLWorks_1_0_Win32_1996_12_17:1.5.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.5.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.5.4.1
	MLWorks_1_0_Irix_1996_11_28:1.5.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.5.5
	MLWorks_1_0_Unix_1996_11_14:1.5.4
	MLWorks_Open_Beta2_1996_10_11:1.5.3
	MLWorks_License_dev:1.5.2
	MLWorks_1_open_beta_1996_09_13:1.5.1
	MLWorks_Open_Beta_1996_08_22:1.5
	MLWorks_Beta_1996_07_02:1.5
	MLWorks_Beta_1996_06_07:1.5
	MLWorks_Beta_1996_06_06:1.5
	MLWorks_Beta_1996_06_05:1.5
	MLWorks_Beta_1996_06_03:1.5
	MLWorks_Beta_1996_05_31:1.4
	MLWorks_Beta_1996_05_30:1.4;
locks; strict;
comment	@ * @;


1.7
date	97.11.21.10.52.01;	author daveb;	state Exp;
branches;
next	1.6;

1.6
date	97.05.28.11.35.54;	author jont;	state Exp;
branches;
next	1.5;

1.5
date	96.05.31.11.40.51;	author jont;	state Exp;
branches
	1.5.1.1
	1.5.2.1
	1.5.3.1
	1.5.4.1
	1.5.5.1
	1.5.6.1
	1.5.7.1
	1.5.8.1;
next	1.4;

1.4
date	96.05.08.11.19.13;	author jont;	state Exp;
branches;
next	1.3;

1.3
date	96.05.01.16.51.35;	author jont;	state Exp;
branches;
next	1.2;

1.2
date	95.07.13.15.21.48;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	95.03.07.16.16.39;	author nickb;	state Exp;
branches;
next	;

1.5.1.1
date	96.09.13.11.28.46;	author hope;	state Exp;
branches;
next	;

1.5.2.1
date	96.10.07.16.19.24;	author hope;	state Exp;
branches;
next	;

1.5.3.1
date	96.10.17.11.39.38;	author hope;	state Exp;
branches;
next	;

1.5.4.1
date	96.11.14.13.07.11;	author hope;	state Exp;
branches
	1.5.4.1.1.1;
next	;

1.5.4.1.1.1
date	96.11.28.15.16.54;	author hope;	state Exp;
branches;
next	;

1.5.5.1
date	96.11.22.18.24.39;	author hope;	state Exp;
branches;
next	;

1.5.6.1
date	96.12.17.18.02.44;	author hope;	state Exp;
branches
	1.5.6.1.1.1;
next	;

1.5.6.1.1.1
date	97.02.24.11.54.38;	author hope;	state Exp;
branches;
next	;

1.5.7.1
date	96.12.18.09.58.11;	author hope;	state Exp;
branches;
next	;

1.5.8.1
date	97.05.12.10.56.27;	author hope;	state Exp;
branches
	1.5.8.1.1.1
	1.5.8.1.2.1
	1.5.8.1.3.1;
next	;

1.5.8.1.1.1
date	97.07.28.18.38.18;	author daveb;	state Exp;
branches
	1.5.8.1.1.1.1.1;
next	;

1.5.8.1.1.1.1.1
date	97.10.07.12.03.21;	author jkbrook;	state Exp;
branches;
next	;

1.5.8.1.2.1
date	97.09.08.17.30.32;	author daveb;	state Exp;
branches;
next	;

1.5.8.1.3.1
date	97.09.09.14.28.35;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
No reason given
@


1.7
log
@[Bug #30323]
@
text
@(*
 *
 * Tests large arrays and some real arithmetic.
 *
 *
 * Result: OK
 *
 * $Log: array_large.sml,v $
 * Revision 1.6  1997/05/28  11:35:54  jont
 * [Bug #30090]
 * Remove uses of MLWorks.IO
 *
 * Revision 1.5  1996/05/31  11:40:51  jont
 * cos and sin have moved into basis/__math
 *
 * Revision 1.4  1996/05/08  11:19:13  jont
 * Arrays and Vectors have moved to MLWorks.Internal
 *
 * Revision 1.3  1996/05/01  16:51:35  jont
 * Fixing up after changes to toplevel visible string and io stuff
 *
 * Revision 1.2  1995/07/13  15:21:48  jont
 * Modify to avoid slight result inaccuracies
 *
 * Revision 1.1  1995/03/07  16:16:39  nickb
 * new unit
 * No reason given
 *
 * Copyright (c) 1995 Harlequin Ltd.
 *)


local
  val pi = 3.141592653589793;

  fun integrate (f,start,finish,num_steps) =
    let
      val r_num_steps = real num_steps
      val range = finish - start
      val step = range / r_num_steps
      val values = MLWorks.Internal.Array.array (num_steps+1,0.0)
      fun fill_values n =
	if n > num_steps then ()
	else 
	  let
	    val x = (real n / r_num_steps) * range
	  in
	    (MLWorks.Internal.Array.update (values,n,f x);
	     fill_values (n+1))
	  end
      val _ = fill_values 0
      fun do_sum (n,acc) =
	if n = num_steps then acc
	else 
	  do_sum (n+1,acc + (step * ((MLWorks.Internal.Array.sub (values,n) + MLWorks.Internal.Array.sub (values,n+1)) / 2.0)))
    in
      do_sum (0,0.0)
    end
  
  val limit = 1000000
  val res1 = integrate (fn x => x, 0.0,1.0,limit)
  val ans1 = 0.5
  val res2 = integrate (fn x => x * x, 0.0,10.0,limit)
  val ans2 = 1000.0/3.0
  val res3 = integrate (Math.cos, 0.0,pi/2.0,limit)
  val ans3 = 1.0
  val res4 = integrate (Math.sin, 0.0,pi/2.0,limit)
  val ans4 = 1.0
  val results = [(res1,ans1),(res2,ans2),(res3,ans3),(res4,ans4)]
  val tolerance = 1E~10
  fun close_to(a,b) = abs((a-b)/a) < tolerance
  fun all [] = true
    | all (x::xs) = x andalso (all xs)
  val maps = map close_to results
  val string = if (all maps) then "Pass\n" else "Fail\n"
in
  val _ = print string
end
@


1.6
log
@[Bug #30090]
Remove uses of MLWorks.IO
@
text
@d9 4
a31 1
Shell.Build.loadSource"basis.__math";
@


1.5
log
@cos and sin have moved into basis/__math
@
text
@d9 3
d74 1
a74 1
  val _ = MLWorks.IO.output(MLWorks.IO.std_out,string)
@


1.5.8.1
log
@branched from 1.5
@
text
@a8 3
 * Revision 1.5  1996/05/31  11:40:51  jont
 * cos and sin have moved into basis/__math
 *
@


1.5.8.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a8 3
 * Revision 1.5.8.1  1997/05/12  10:56:27  hope
 * branched from 1.5
 *
@


1.5.8.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a8 3
 * Revision 1.5.8.1  1997/05/12  10:56:27  hope
 * branched from 1.5
 *
@


1.5.8.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a8 3
 * Revision 1.5.8.1  1997/05/12  10:56:27  hope
 * branched from 1.5
 *
@


1.5.8.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a8 3
 * Revision 1.5.8.1.1.1  1997/07/28  18:38:18  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.5.7.1
log
@branched from 1.5
@
text
@a8 3
 * Revision 1.5  1996/05/31  11:40:51  jont
 * cos and sin have moved into basis/__math
 *
@


1.5.6.1
log
@branched from 1.5
@
text
@a8 3
 * Revision 1.5  1996/05/31  11:40:51  jont
 * cos and sin have moved into basis/__math
 *
@


1.5.6.1.1.1
log
@branched from 1.5.6.1
@
text
@a8 3
 * Revision 1.5.6.1  1996/12/17  18:02:44  hope
 * branched from 1.5
 *
@


1.5.5.1
log
@branched from 1.5
@
text
@a8 3
 * Revision 1.5  1996/05/31  11:40:51  jont
 * cos and sin have moved into basis/__math
 *
@


1.5.4.1
log
@branched from 1.5
@
text
@a8 3
 * Revision 1.5  1996/05/31  11:40:51  jont
 * cos and sin have moved into basis/__math
 *
@


1.5.4.1.1.1
log
@branched from 1.5.4.1
@
text
@a8 3
 * Revision 1.5.4.1  1996/11/14  13:07:11  hope
 * branched from 1.5
 *
@


1.5.3.1
log
@branched from 1.5
@
text
@a8 3
 * Revision 1.5  1996/05/31  11:40:51  jont
 * cos and sin have moved into basis/__math
 *
@


1.5.2.1
log
@branched from 1.5
@
text
@a8 3
 * Revision 1.5  1996/05/31  11:40:51  jont
 * cos and sin have moved into basis/__math
 *
@


1.5.1.1
log
@branched from 1.5
@
text
@a8 3
 * Revision 1.5  1996/05/31  11:40:51  jont
 * cos and sin have moved into basis/__math
 *
@


1.4
log
@Arrays and Vectors have moved to MLWorks.Internal
@
text
@d9 3
d25 2
d59 1
a59 1
  val res3 = integrate (cos, 0.0,pi/2.0,limit)
d61 1
a61 1
  val res4 = integrate (sin, 0.0,pi/2.0,limit)
@


1.3
log
@Fixing up after changes to toplevel visible string and io stuff
@
text
@d9 3
d30 1
a30 1
      val values = Array.array (num_steps+1,0.0)
d37 1
a37 1
	    (Array.update (values,n,f x);
d44 1
a44 1
	  do_sum (n+1,acc + (step * ((Array.sub (values,n) + Array.sub (values,n+1)) / 2.0)))
@


1.2
log
@Modify to avoid slight result inaccuracies
@
text
@d9 3
d63 1
a63 1
  val _ = output(std_out,string)
@


1.1
log
@new unit
No reason given
@
text
@d2 13
a15 10
 Tests large arrays and some real arithmetic.


Result: OK
 
$Log$

Copyright (c) 1995 Harlequin Ltd.
*)

a51 1
in
a52 3
end

local
@
