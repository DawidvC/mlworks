head	1.10;
access;
symbols
	MLWorks_21c0_1999_03_25:1.10
	MLWorks_20c1_1998_08_20:1.10
	MLWorks_20c0_1998_08_04:1.10
	MLWorks_20b2c2_1998_06_19:1.10
	MLWorks_20b2_Windows_1998_06_12:1.10
	MLWorks_20b1c1_1998_05_07:1.10
	MLWorks_20b0_1998_04_07:1.10
	MLWorks_20b0_1998_03_20:1.10
	MLWorks_20m2_1998_02_16:1.10
	MLWorks_20m1_1997_10_23:1.10
	MLWorks_11r1:1.10.8.1.1.1.1
	MLWorks_11c0_1997_09_09:1.10.8.1.1.1
	MLWorks_10r3:1.10.8.1.3
	MLWorks_10r2_551:1.10.8.1.2
	MLWorks_11:1.10.8.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.10.8.1
	MLWorks_20m0_1997_06_20:1.10
	MLWorks_1_0_r2c2_1997_06_14:1.10.8.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.10.8.1
	MLWorks_1_0_r2c1_1997_05_12:1.10.8
	MLWorks_BugFix_1997_04_24:1.10
	MLWorks_1_0_r2_Win32_1997_04_11:1.10
	MLWorks_1_0_r2_Unix_1997_04_04:1.10
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.10.6.1.1
	MLWorks_gui_1996_12_18:1.10.7
	MLWorks_1_0_Win32_1996_12_17:1.10.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.10.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.10.4.1
	MLWorks_1_0_Irix_1996_11_28:1.10.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.10.5
	MLWorks_1_0_Unix_1996_11_14:1.10.4
	MLWorks_Open_Beta2_1996_10_11:1.10.3
	MLWorks_License_dev:1.10.2
	MLWorks_1_open_beta_1996_09_13:1.10.1
	MLWorks_Open_Beta_1996_08_22:1.8
	MLWorks_Beta_1996_07_02:1.8
	MLWorks_Beta_1996_06_07:1.8
	MLWorks_Beta_1996_06_06:1.8
	MLWorks_Beta_1996_06_05:1.8
	MLWorks_Beta_1996_06_03:1.8
	MLWorks_Beta_1996_05_31:1.8
	MLWorks_Beta_1996_05_30:1.8
	ML_beta_release_12/08/94:1.4
	ML_beta_release_03/08/94:1.4
	ML_revised_beta_release_25/05/94:1.4
	ML_final_beta_release_02/03/94:1.4
	mlworks-28-01-1994:1.4
	Release:1.4
	mlworks-beta-01-09-1993:1.4
	MLWorks-1-0-4-29/01/1993:1.2
	MLWorks-1-0-3-21/12/1992:1.1;
locks; strict;


1.10
date	96.09.09.12.09.04;	author io;	state Exp;
branches
	1.10.1.1
	1.10.2.1
	1.10.3.1
	1.10.4.1
	1.10.5.1
	1.10.6.1
	1.10.7.1
	1.10.8.1;
next	1.9;

1.9
date	96.09.07.00.02.40;	author io;	state Exp;
branches;
next	1.8;

1.8
date	95.10.17.10.41.54;	author jont;	state Exp;
branches;
next	1.7;

1.7
date	95.08.15.17.46.53;	author daveb;	state Exp;
branches;
next	1.6;

1.6
date	95.06.14.18.07.56;	author daveb;	state Exp;
branches;
next	1.5;

1.5
date	94.10.26.11.29.14;	author matthew;	state Exp;
branches;
next	1.4;

1.4
date	93.05.26.11.47.57;	author matthew;	state Exp;
branches
	1.4.1.1;
next	1.3;

1.3
date	93.04.15.10.16.03;	author daveb;	state Exp;
branches;
next	1.2;

1.2
date	93.01.22.16.23.10;	author daveb;	state Exp;
branches;
next	1.1;

1.1
date	92.11.04.17.11.54;	author daveb;	state Exp;
branches;
next	;

1.4.1.1
date	93.05.26.11.47.57;	author jont;	state Exp;
branches;
next	;

1.10.1.1
date	96.09.13.11.30.28;	author hope;	state Exp;
branches;
next	;

1.10.2.1
date	96.10.07.16.21.12;	author hope;	state Exp;
branches;
next	;

1.10.3.1
date	96.10.17.11.41.43;	author hope;	state Exp;
branches;
next	;

1.10.4.1
date	96.11.14.13.08.59;	author hope;	state Exp;
branches
	1.10.4.1.1.1;
next	;

1.10.4.1.1.1
date	96.11.28.15.18.49;	author hope;	state Exp;
branches;
next	;

1.10.5.1
date	96.11.22.18.26.24;	author hope;	state Exp;
branches;
next	;

1.10.6.1
date	96.12.17.18.04.50;	author hope;	state Exp;
branches
	1.10.6.1.1.1;
next	;

1.10.6.1.1.1
date	97.02.24.11.56.42;	author hope;	state Exp;
branches;
next	;

1.10.7.1
date	96.12.18.09.59.55;	author hope;	state Exp;
branches;
next	;

1.10.8.1
date	97.05.12.10.58.42;	author hope;	state Exp;
branches
	1.10.8.1.1.1
	1.10.8.1.2.1
	1.10.8.1.3.1;
next	;

1.10.8.1.1.1
date	97.07.28.18.38.13;	author daveb;	state Exp;
branches
	1.10.8.1.1.1.1.1;
next	;

1.10.8.1.1.1.1.1
date	97.10.07.12.03.16;	author jkbrook;	state Exp;
branches;
next	;

1.10.8.1.2.1
date	97.09.08.17.30.25;	author daveb;	state Exp;
branches;
next	;

1.10.8.1.3.1
date	97.09.09.14.28.29;	author daveb;	state Exp;
branches;
next	;


desc
@Part of the ML test suite.
@


1.10
log
@remove banner
@
text
@datatype Action =
  Funcall of (int * int * Action * Action) |
  NoAction |
  Reduce of (int * int * int) |
  Shift
val Funcall : (int * int * Action * Action) -> Action
val NoAction : Action
val Reduce : (int * int * int) -> Action
val Shift : Action
val convert_action : int -> Action = fn
val f : 'a -> bool = fn
val is_reduction : int -> bool = fn
@


1.10.8.1
log
@branched from 1.10
@
text
@@


1.10.8.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@@


1.10.8.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@@


1.10.8.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@@


1.10.8.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@


1.10.7.1
log
@branched from 1.10
@
text
@@


1.10.6.1
log
@branched from 1.10
@
text
@@


1.10.6.1.1.1
log
@branched from 1.10.6.1
@
text
@@


1.10.5.1
log
@branched from 1.10
@
text
@@


1.10.4.1
log
@branched from 1.10
@
text
@@


1.10.4.1.1.1
log
@branched from 1.10.4.1
@
text
@@


1.10.3.1
log
@branched from 1.10
@
text
@@


1.10.2.1
log
@branched from 1.10
@
text
@@


1.10.1.1
log
@branched from 1.10
@
text
@@


1.9
log
@updating for commercial version flyer
@
text
@a0 2
commercial version may be purchased directly from Harlequin.

@


1.8
log
@** No reason given. **
@
text
@d1 2
@


1.7
log
@Changed the way datatypes are printed.
@
text
@d1 5
a5 1
eqtype Action
@


1.6
log
@Order of output has changed.
@
text
@d1 5
a8 5
datatype Action =
  Funcall of (int * int * Action * Action) |
  NoAction |
  Reduce of (int * int * int) |
  Shift
@


1.5
log
@Updated
@
text
@d1 3
a8 3
val convert_action : int -> Action = fn
val f : 'a -> bool = fn
val is_reduction : int -> bool = fn
@


1.4
log
@New version
@
text
@a5 1
val is_reduction : int -> bool = fn
d8 1
@


1.4.1.1
log
@Fork for bug fixing
@
text
@@


1.3
log
@New revision.
@
text
@a1 1
  Reduce of (int * int * int) |
d4 1
@


1.2
log
@New version.
@
text
@d2 2
a3 2
  Reduce of (int[t] * int[t] * int[t]) |
  Funcall of (int[t] * int[t] * Action[t] * Action[t]) |
d6 3
a8 3
val is_reduction : int[t] -> bool[t] = fn
val convert_action : int[t] -> Action[t] = fn
val f : 'a -> bool[t] = fn
@


1.1
log
@Initial revision
@
text
@a0 17
val use : string[t] -> unit[t] = fn[anonymous function /home/cantor/clive/ml_bootstrap/src/interpreter/_shell.sml:517,50]
val make : string[t] -> unit[t] = fn[anonymous function /home/cantor/clive/ml_bootstrap/src/interpreter/_shell.sml:530,22]
val save : string[t] -> unit[t] = fn[anonymous function /home/cantor/clive/ml_bootstrap/src/interpreter/_shell.sml:544,22]
val shell : string[t] -> int[t] = fn[anonymous function /home/cantor/clive/ml_bootstrap/src/interpreter/_shell.sml:561,22]
val exit : int[t] -> unit[t] = fn[anonymous function /home/cantor/clive/ml_bootstrap/src/interpreter/_shell.sml:574,50]
structure Shell =
  struct
    type context
    val initial_context : context[f] = _
    val interface_to_windows : context[f] -> (string[t] * string[t] * string[t] list[t] -> unit[t]) -> context[f] * (string[t] -> string[t]) * (string[t] * (string[t] -> unit[t]) -> string[t]) * (string[t] * (string[t] -> unit[t]) -> string[t]) = fn[command_handler_fn /home/cantor/clive/ml_bootstrap/src/interpreter/_shell.sml:482,15]
  end
MLWorks:12,1.0> MLWorks:12,2.1> MLWorks:12,3.2> MLWorks:12,4.3> MLWorks:12,5.4> MLWorks:12,6.5> MLWorks:12,6.5> MLWorks:12,7.6> MLWorks:12,7.6> MLWorks:12,8.7> MLWorks:12,9.8> MLWorks:12,10.9> MLWorks:12,11.10> MLWorks:12,12.11> MLWorks:12,12.11> MLWorks:12,13.12> MLWorks:12,14.13> MLWorks:12,15.14> MLWorks:12,16.15> MLWorks:12,17.16> MLWorks:12,17.16> MLWorks:12,18.17> MLWorks:12,19.18> MLWorks:12,20.19> MLWorks:12,21.20> MLWorks:12,22.21> MLWorks:12,22.21> MLWorks:12,23.22> MLWorks:12,24.23> MLWorks:12,25.24> MLWorks:12,26.25> MLWorks:12,26.25> MLWorks:12,27.26> MLWorks:12,27.26> MLWorks:12,27.26> MLWorks:12,28.27> MLWorks:12,29.28> MLWorks:12,30.29> MLWorks:12,31.30> MLWorks:12,32.31> MLWorks:12,32.31> MLWorks:12,33.32> MLWorks:12,34.33> MLWorks:12,35.34> MLWorks:12,36.35> MLWorks:12,37.36> MLWorks:12,37.36> MLWorks:12,38.37> MLWorks:12,39.38> MLWorks:12,40.39> MLWorks:12,41.40> MLWorks:12,42.41> MLWorks:12,42.41> MLWorks:12,43.42> MLWorks:12,44.43> MLWorks:12,45.44> MLWorks:12,46.45> MLWorks:12,46.45> MLWorks:12,47.46> MLWorks:12,47.46> Unused function :constructor Funcall from datatype in MLWorks:12,8
Unused function :constructor Reduce from datatype in MLWorks:12,8
Unused function :f MLWorks:26,3
Unused function :is_reduction MLWorks:22,3
Unused function :convert_action MLWorks:17,3
Unused function :Part of match translation (ii) case expression MLWorks:43,6
d2 2
a3 2
  Reduce of int[t] * int[t] * int[t] |
  Funcall of int[t] * int[t] * Action[t] * Action[t] |
d6 3
a8 3
val is_reduction : int[t] -> bool[t] = fn[is_reduction MLWorks:42,3]
val convert_action : int[t] -> Action[t] = fn[convert_action MLWorks:37,3]
val f : 'a -> bool[t] = fn[f MLWorks:46,3]
@
