head	1.11;
access;
symbols
	MLWorks_21c0_1999_03_25:1.11
	MLWorks_20c1_1998_08_20:1.11
	MLWorks_20c0_1998_08_04:1.11
	MLWorks_20b2c2_1998_06_19:1.11
	MLWorks_20b2_Windows_1998_06_12:1.11
	MLWorks_20b1c1_1998_05_07:1.11
	MLWorks_20b0_1998_04_07:1.11
	MLWorks_20b0_1998_03_20:1.11
	MLWorks_20m2_1998_02_16:1.11
	MLWorks_20m1_1997_10_23:1.10
	MLWorks_11r1:1.10.8.1.1.1.1
	MLWorks_11c0_1997_09_09:1.10.8.1.1.1
	MLWorks_10r3:1.10.8.1.3
	MLWorks_10r2_551:1.10.8.1.2
	MLWorks_11:1.10.8.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.10.8.1
	MLWorks_20m0_1997_06_20:1.10
	MLWorks_1_0_r2c2_1997_06_14:1.10.8.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.10.8.1
	MLWorks_1_0_r2c1_1997_05_12:1.10.8
	MLWorks_BugFix_1997_04_24:1.10
	MLWorks_1_0_r2_Win32_1997_04_11:1.10
	MLWorks_1_0_r2_Unix_1997_04_04:1.10
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.10.6.1.1
	MLWorks_gui_1996_12_18:1.10.7
	MLWorks_1_0_Win32_1996_12_17:1.10.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.10.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.10.4.1
	MLWorks_1_0_Irix_1996_11_28:1.10.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.10.5
	MLWorks_1_0_Unix_1996_11_14:1.10.4
	MLWorks_Open_Beta2_1996_10_11:1.10.3
	MLWorks_License_dev:1.10.2
	MLWorks_1_open_beta_1996_09_13:1.10.1
	MLWorks_Open_Beta_1996_08_22:1.8
	MLWorks_Beta_1996_07_02:1.6
	MLWorks_Beta_1996_06_07:1.6
	MLWorks_Beta_1996_06_06:1.6
	MLWorks_Beta_1996_06_05:1.6
	MLWorks_Beta_1996_06_03:1.5
	MLWorks_Beta_1996_05_31:1.5
	MLWorks_Beta_1996_05_30:1.5;
locks; strict;
comment	@# @;


1.11
date	97.11.25.19.36.54;	author daveb;	state Exp;
branches;
next	1.10;

1.10
date	96.09.09.12.09.06;	author io;	state Exp;
branches
	1.10.1.1
	1.10.2.1
	1.10.3.1
	1.10.4.1
	1.10.5.1
	1.10.6.1
	1.10.7.1
	1.10.8.1;
next	1.9;

1.9
date	96.09.07.00.02.42;	author io;	state Exp;
branches;
next	1.8;

1.8
date	96.08.14.12.59.58;	author io;	state Exp;
branches;
next	1.7;

1.7
date	96.07.04.10.53.52;	author andreww;	state Exp;
branches;
next	1.6;

1.6
date	96.06.05.12.34.55;	author io;	state Exp;
branches;
next	1.5;

1.5
date	96.05.20.10.24.21;	author jont;	state Exp;
branches;
next	1.4;

1.4
date	96.05.16.14.28.42;	author jont;	state Exp;
branches;
next	1.3;

1.3
date	96.05.08.12.28.26;	author jont;	state Exp;
branches;
next	1.2;

1.2
date	96.05.02.15.29.23;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	95.09.19.18.11.36;	author jont;	state Exp;
branches;
next	;

1.10.1.1
date	96.09.13.11.31.03;	author hope;	state Exp;
branches;
next	;

1.10.2.1
date	96.10.07.16.21.49;	author hope;	state Exp;
branches;
next	;

1.10.3.1
date	96.10.17.11.42.20;	author hope;	state Exp;
branches;
next	;

1.10.4.1
date	96.11.14.13.09.36;	author hope;	state Exp;
branches
	1.10.4.1.1.1;
next	;

1.10.4.1.1.1
date	96.11.28.15.19.26;	author hope;	state Exp;
branches;
next	;

1.10.5.1
date	96.11.22.18.27.01;	author hope;	state Exp;
branches;
next	;

1.10.6.1
date	96.12.17.18.05.29;	author hope;	state Exp;
branches
	1.10.6.1.1.1;
next	;

1.10.6.1.1.1
date	97.02.24.11.57.53;	author hope;	state Exp;
branches;
next	;

1.10.7.1
date	96.12.18.10.00.32;	author hope;	state Exp;
branches;
next	;

1.10.8.1
date	97.05.12.10.59.29;	author hope;	state Exp;
branches
	1.10.8.1.1.1
	1.10.8.1.2.1
	1.10.8.1.3.1;
next	;

1.10.8.1.1.1
date	97.07.28.18.38.20;	author daveb;	state Exp;
branches
	1.10.8.1.1.1.1.1;
next	;

1.10.8.1.1.1.1.1
date	97.10.07.12.03.24;	author jkbrook;	state Exp;
branches;
next	;

1.10.8.1.2.1
date	97.09.08.17.30.34;	author daveb;	state Exp;
branches;
next	;

1.10.8.1.3.1
date	97.09.09.14.28.38;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
@


1.11
log
@[Bug #30323]
@
text
@Pass 0
val it : unit = ()
@


1.10
log
@remove banner
@
text
@a0 34
val it : unit = ()
structure Int =
  struct
    eqtype int = int
    val * : (int * int) -> int = fn
    val + : (int * int) -> int = fn
    val - : (int * int) -> int = fn
    val < : (int * int) -> bool = fn
    val <= : (int * int) -> bool = fn
    val > : (int * int) -> bool = fn
    val >= : (int * int) -> bool = fn
    val abs : int -> int = fn
    val compare : (int * int) -> order = fn
    val div : (int * int) -> int = fn
    val fmt : radix(hidden) -> int -> string = fn
    val fromInt : int -> int = fn
    val fromLarge : MLWorks.Internal.Types.int32 -> int = fn
    val fromString : string -> int option = fn
    val max : (int * int) -> int = fn
    val maxInt : int option = SOME 536870911
    val min : (int * int) -> int = fn
    val minInt : int option = SOME ~536870912
    val mod : (int * int) -> int = fn
    val precision : int option = SOME 30
    val quot : (int * int) -> int = fn
    val rem : (int * int) -> int = fn
    val sameSign : (int * int) -> bool = fn
    val scan : radix(hidden) -> ('a -> (char * 'a) option) -> 'a -> (int * 'a) option = fn
    val sign : int -> int = fn
    val toInt : int -> int = fn
    val toLarge : int -> MLWorks.Internal.Types.int32 = fn
    val toString : int -> string = fn
    val ~ : int -> int = fn
  end
@


1.10.8.1
log
@branched from 1.10
@
text
@@


1.10.8.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@@


1.10.8.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@@


1.10.8.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@@


1.10.8.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@


1.10.7.1
log
@branched from 1.10
@
text
@@


1.10.6.1
log
@branched from 1.10
@
text
@@


1.10.6.1.1.1
log
@branched from 1.10.6.1
@
text
@@


1.10.5.1
log
@branched from 1.10
@
text
@@


1.10.4.1
log
@branched from 1.10
@
text
@@


1.10.4.1.1.1
log
@branched from 1.10.4.1
@
text
@@


1.10.3.1
log
@branched from 1.10
@
text
@@


1.10.2.1
log
@branched from 1.10
@
text
@@


1.10.1.1
log
@branched from 1.10
@
text
@@


1.9
log
@updating for commercial version flyer
@
text
@a0 2
commercial version may be purchased directly from Harlequin.

@


1.8
log
@switch off Compiling messages...
@
text
@d1 2
@


1.7
log
@updating.
@
text
@a1 9
Compiling basis.toplevel
Compiling basis.string_cvt
Compiling basis.__pre_basis
Compiling basis.__pre_string_cvt
Compiling basis.__string_cvt
Compiling basis.__preinteger
Compiling basis.__preint32
Compiling basis.integer
Compiling basis.__integer
@


1.6
log
@stringcvt->string_cvt
@
text
@a1 2
Compiling basis.general
Compiling basis.__general
d22 1
a22 1
    val compare : (int * int) -> order(hidden) = fn
d27 1
a27 1
    val fromString : string -> int MLWorks.Option.option = fn
d29 1
a29 1
    val maxInt : int MLWorks.Option.option = SOME 536870911
d31 1
a31 1
    val minInt : int MLWorks.Option.option = SOME ~536870912
d33 1
a33 1
    val precision : int MLWorks.Option.option = SOME 30
d37 1
a37 1
    val scan : radix(hidden) -> ('a -> (char * 'a) MLWorks.Option.option) -> 'a -> (int * 'a) MLWorks.Option.option = fn
@


1.5
log
@maxint and minint became maxInt and minInt
@
text
@d5 4
a8 3
Compiling basis.stringcvt
Compiling basis.__pre_char
Compiling basis.__stringcvt
@


1.4
log
@output changed slightly
@
text
@d30 1
a30 1
    val maxint : int MLWorks.Option.option = SOME 536870911
d32 1
a32 1
    val minint : int MLWorks.Option.option = SOME ~536870912
@


1.3
log
@Vectors have moved
@
text
@a1 3
Compiling basis.word
Compiling basis.__word
Compiling basis.__word8
d25 1
d38 1
@


1.2
log
@Minor alterations
@
text
@d9 1
@


1.1
log
@new unit
@
text
@d1 44
@
