head	1.13;
access;
symbols
	MLWorks_20m1_1997_10_23:1.12
	MLWorks_11r1:1.10.1.1.1.2.1
	MLWorks_11c0_1997_09_09:1.10.1.1.1.2
	MLWorks_10r3:1.10.1.1.3
	MLWorks_10r2_551:1.10.1.1.2
	MLWorks_11:1.10.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.10.1.1
	MLWorks_20m0_1997_06_20:1.12
	MLWorks_1_0_r2c2_1997_06_14:1.10.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.10.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.10.1
	MLWorks_BugFix_1997_04_24:1.11
	MLWorks_1_0_r2_Win32_1997_04_11:1.10
	MLWorks_1_0_r2_Unix_1997_04_04:1.10
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.7.3.1.1
	MLWorks_gui_1996_12_18:1.7.4
	MLWorks_1_0_Win32_1996_12_17:1.7.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.7.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.7.1.1
	MLWorks_1_0_Irix_1996_11_28:1.7.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.7.2
	MLWorks_1_0_Unix_1996_11_14:1.7.1
	MLWorks_Open_Beta2_1996_10_11:1.5.2
	MLWorks_License_dev:1.5.1
	MLWorks_1_open_beta_1996_09_13:1.4.1
	MLWorks_Open_Beta_1996_08_22:1.2
	MLWorks_Beta_1996_07_02:1.1;
locks; strict;
comment	@# @;


1.13
date	97.12.01.15.12.28;	author jkbrook;	state Exp;
branches;
next	1.12;

1.12
date	97.06.06.11.37.19;	author jont;	state Exp;
branches;
next	1.11;

1.11
date	97.04.15.10.03.07;	author jont;	state Exp;
branches;
next	1.10;

1.10
date	97.03.06.15.36.33;	author matthew;	state Exp;
branches
	1.10.1.1;
next	1.9;

1.9
date	97.01.15.16.04.22;	author io;	state Exp;
branches;
next	1.8;

1.8
date	97.01.13.13.33.38;	author io;	state Exp;
branches;
next	1.7;

1.7
date	96.11.07.16.26.14;	author matthew;	state Exp;
branches
	1.7.1.1
	1.7.2.1
	1.7.3.1
	1.7.4.1;
next	1.6;

1.6
date	96.11.05.18.28.03;	author jont;	state Exp;
branches;
next	1.5;

1.5
date	96.10.07.10.37.42;	author stephenb;	state Exp;
branches
	1.5.1.1
	1.5.2.1;
next	1.4;

1.4
date	96.09.09.12.09.24;	author io;	state Exp;
branches
	1.4.1.1;
next	1.3;

1.3
date	96.09.07.00.02.52;	author io;	state Exp;
branches;
next	1.2;

1.2
date	96.07.05.13.44.32;	author andreww;	state Exp;
branches;
next	1.1;

1.1
date	96.06.24.11.01.30;	author stephenb;	state Exp;
branches;
next	;

1.4.1.1
date	96.09.13.11.40.55;	author hope;	state Exp;
branches;
next	;

1.5.1.1
date	96.10.07.16.33.58;	author hope;	state Exp;
branches;
next	;

1.5.2.1
date	96.10.17.11.53.07;	author hope;	state Exp;
branches;
next	;

1.7.1.1
date	96.11.14.13.20.41;	author hope;	state Exp;
branches
	1.7.1.1.1.1;
next	;

1.7.1.1.1.1
date	96.11.28.15.31.36;	author hope;	state Exp;
branches;
next	;

1.7.2.1
date	96.11.22.18.38.28;	author hope;	state Exp;
branches;
next	;

1.7.3.1
date	96.12.17.18.17.28;	author hope;	state Exp;
branches
	1.7.3.1.1.1;
next	;

1.7.3.1.1.1
date	97.02.24.12.11.44;	author hope;	state Exp;
branches;
next	;

1.7.4.1
date	96.12.18.10.12.39;	author hope;	state Exp;
branches;
next	;

1.10.1.1
date	97.05.12.11.12.08;	author hope;	state Exp;
branches
	1.10.1.1.1.1
	1.10.1.1.2.1
	1.10.1.1.3.1;
next	;

1.10.1.1.1.1
date	97.07.28.18.54.24;	author daveb;	state Exp;
branches;
next	1.10.1.1.1.2;

1.10.1.1.1.2
date	97.08.13.15.17.50;	author daveb;	state Exp;
branches
	1.10.1.1.1.2.1.1;
next	;

1.10.1.1.1.2.1.1
date	97.10.07.12.19.15;	author jkbrook;	state Exp;
branches;
next	;

1.10.1.1.2.1
date	97.09.08.17.46.27;	author daveb;	state Exp;
branches;
next	;

1.10.1.1.3.1
date	97.09.09.14.45.37;	author daveb;	state Exp;
branches;
next	1.10.1.1.3.2;

1.10.1.1.3.2
date	97.09.24.16.06.37;	author jont;	state Exp;
branches;
next	;


desc
@new unit
@


1.13
log
@[Bug #30323]
Updating structure-contents info printed in answer file
@
text
@val it : unit = ()
val it : unit = ()
@


1.12
log
@New answer now list type in list
@
text
@a1 172
structure LargeReal =
  struct
    structure Math =
      struct
        type real = real
        val acos : real -> real = fn
        val asin : real -> real = fn
        val atan : real -> real = fn
        val atan2 : (real * real) -> real = fn
        val cos : real -> real = fn
        val cosh : real -> real = fn
        val e : real = 2.718281828
        val exp : real -> real = fn
        val ln : real -> real = fn
        val log10 : real -> real = fn
        val pi : real = 3.141592654
        val pow : (real * real) -> real = fn
        val sin : real -> real = fn
        val sinh : real -> real = fn
        val sqrt : real -> real = fn
        val tan : real -> real = fn
        val tanh : real -> real = fn
      end
    type real = real
    val != : (real * real) -> bool = fn
    val * : (real * real) -> real = fn
    val *+ : (real * real * real) -> real = fn
    val *- : (real * real * real) -> real = fn
    val + : (real * real) -> real = fn
    val - : (real * real) -> real = fn
    val / : (real * real) -> real = fn
    val < : (real * real) -> bool = fn
    val <= : (real * real) -> bool = fn
    val == : (real * real) -> bool = fn
    val > : (real * real) -> bool = fn
    val >= : (real * real) -> bool = fn
    val ?= : (real * real) -> bool = fn
    val abs : real -> real = fn
    val ceil : real -> int = fn
    val checkFloat : real -> real = fn
    val class : real -> float_class(hidden) = fn
    val compare : (real * real) -> order = fn
    val compareReal : (real * real) -> real_order(hidden) = fn
    val copySign : (real * real) -> real = fn
    val floor : real -> int = fn
    val fmt : realfmt(hidden) -> real -> string = fn
    val fromDecimal : {digits: int list, exp: int, kind: float_class(hidden), sign: bool} -> real = fn
    val fromInt : int -> real = fn
    val fromLarge : rounding_mode(hidden) -> real -> real = fn
    val fromLargeInt : MLWorks.Internal.Types.int32 -> real = fn
    val fromManExp : {exp: int, man: real} -> real = fn
    val fromString : string -> real option = fn
    val isFinite : real -> bool = fn
    val isNan : real -> bool = fn
    val isNormal : real -> bool = fn
    val max : (real * real) -> real = fn
    val maxFinite : real = 1.797693135E308
    val min : (real * real) -> real = fn
    val minNormalPos : real = 2.225073859E~308
    val minPos : real = 4.940656458E~324
    val negInf : real = ~inf
    val nextAfter : (real * real) -> real = fn
    val posInf : real = inf
    val precision : int = 53
    val radix : int = 2
    val realCeil : real -> real = fn
    val realFloor : real -> real = fn
    val realMod : real -> real = fn
    val realTrunc : real -> real = fn
    val rem : (real * real) -> real = fn
    val round : real -> int = fn
    val sameSign : (real * real) -> bool = fn
    val scan : ('a -> (char * 'a) option) -> 'a -> (real * 'a) option = fn
    val sign : real -> int = fn
    val signBit : real -> bool = fn
    val split : real -> {frac: real, whole: real} = fn
    val toDecimal : real -> {digits: int list, exp: int, kind: float_class(hidden), sign: bool} = fn
    val toInt : rounding_mode(hidden) -> real -> int = fn
    val toLarge : real -> real = fn
    val toLargeInt : rounding_mode(hidden) -> real -> MLWorks.Internal.Types.int32 = fn
    val toManExp : real -> {exp: int, man: real} = fn
    val toString : real -> string = fn
    val trunc : real -> int = fn
    val unordered : (real * real) -> bool = fn
    val ~ : real -> real = fn
  end
structure Real =
  struct
    structure Math =
      struct
        type real = real
        val acos : real -> real = fn
        val asin : real -> real = fn
        val atan : real -> real = fn
        val atan2 : (real * real) -> real = fn
        val cos : real -> real = fn
        val cosh : real -> real = fn
        val e : real = 2.718281828
        val exp : real -> real = fn
        val ln : real -> real = fn
        val log10 : real -> real = fn
        val pi : real = 3.141592654
        val pow : (real * real) -> real = fn
        val sin : real -> real = fn
        val sinh : real -> real = fn
        val sqrt : real -> real = fn
        val tan : real -> real = fn
        val tanh : real -> real = fn
      end
    type real = real
    val != : (real * real) -> bool = fn
    val * : (real * real) -> real = fn
    val *+ : (real * real * real) -> real = fn
    val *- : (real * real * real) -> real = fn
    val + : (real * real) -> real = fn
    val - : (real * real) -> real = fn
    val / : (real * real) -> real = fn
    val < : (real * real) -> bool = fn
    val <= : (real * real) -> bool = fn
    val == : (real * real) -> bool = fn
    val > : (real * real) -> bool = fn
    val >= : (real * real) -> bool = fn
    val ?= : (real * real) -> bool = fn
    val abs : real -> real = fn
    val ceil : real -> int = fn
    val checkFloat : real -> real = fn
    val class : real -> float_class(hidden) = fn
    val compare : (real * real) -> order = fn
    val compareReal : (real * real) -> real_order(hidden) = fn
    val copySign : (real * real) -> real = fn
    val floor : real -> int = fn
    val fmt : realfmt(hidden) -> real -> string = fn
    val fromDecimal : {digits: int list, exp: int, kind: float_class(hidden), sign: bool} -> real = fn
    val fromInt : int -> real = fn
    val fromLarge : rounding_mode(hidden) -> real -> real = fn
    val fromLargeInt : MLWorks.Internal.Types.int32 -> real = fn
    val fromManExp : {exp: int, man: real} -> real = fn
    val fromString : string -> real option = fn
    val isFinite : real -> bool = fn
    val isNan : real -> bool = fn
    val isNormal : real -> bool = fn
    val max : (real * real) -> real = fn
    val maxFinite : real = 1.797693135E308
    val min : (real * real) -> real = fn
    val minNormalPos : real = 2.225073859E~308
    val minPos : real = 4.940656458E~324
    val negInf : real = ~inf
    val nextAfter : (real * real) -> real = fn
    val posInf : real = inf
    val precision : int = 53
    val radix : int = 2
    val realCeil : real -> real = fn
    val realFloor : real -> real = fn
    val realMod : real -> real = fn
    val realTrunc : real -> real = fn
    val rem : (real * real) -> real = fn
    val round : real -> int = fn
    val sameSign : (real * real) -> bool = fn
    val scan : ('a -> (char * 'a) option) -> 'a -> (real * 'a) option = fn
    val sign : real -> int = fn
    val signBit : real -> bool = fn
    val split : real -> {frac: real, whole: real} = fn
    val toDecimal : real -> {digits: int list, exp: int, kind: float_class(hidden), sign: bool} = fn
    val toInt : rounding_mode(hidden) -> real -> int = fn
    val toLarge : real -> real = fn
    val toLargeInt : rounding_mode(hidden) -> real -> MLWorks.Internal.Types.int32 = fn
    val toManExp : real -> {exp: int, man: real} = fn
    val toString : real -> string = fn
    val trunc : real -> int = fn
    val unordered : (real * real) -> bool = fn
    val ~ : real -> real = fn
  end
a2 1
up to date
@


1.11
log
@New answer required now -silent suppressed loading messages
@
text
@a34 1
    val <> : (real * real) -> bool = fn
a120 1
    val <> : (real * real) -> bool = fn
@


1.10
log
@Updating
@
text
@a1 24
Loading mo module basis.general
Loading mo module basis.__general
Loading mo module basis.__pre_basis
Loading mo module basis.string_cvt
Loading mo module basis.__pre_string_cvt
Loading mo module basis.__string_cvt
Loading mo module basis.char
Loading mo module basis.string
Loading mo module basis.__pre_int
Loading mo module basis.__pre_int32
Loading mo module basis.integer
Loading mo module basis.__int
Loading mo module basis.__pre_char
Loading mo module basis.__string
Loading mo module basis.list
Loading mo module basis.__list
Loading mo module basis.math
Loading mo module basis.__math
Loading mo module basis.__pre_ieee_real
Loading mo module basis.__pre_real
Loading mo module basis.ieee_real
Loading mo module basis.__ieee_real
Loading mo module basis.real
Loading mo module basis.__real
@


1.10.1.1
log
@branched from 1.10
@
text
@@


1.10.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@@


1.10.1.1.3.2
log
@[Bug #70011]
Modify answer files as loading mo module messages no longer produced
@
text
@d2 24
@


1.10.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@@


1.10.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@@


1.10.1.1.1.2
log
@[Bug #02040]
Loading mo messages have been suppressed.
@
text
@d2 24
@


1.10.1.1.1.2.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@


1.9
log
@[Bug #1892]
rename __word{8,16,32}{array,vector} to __word{8,16,32}_{array,vector}
@
text
@d2 2
d16 2
a17 2
Loading mo module basis.general
Loading mo module basis.__general
d20 2
a23 1
Loading mo module basis.__pre_real
d50 1
a62 1
    val ?<> : (real * real) -> bool = fn
a70 1
    val equal : (real * real) -> bool = fn
d73 1
d92 4
d103 1
d137 1
a149 1
    val ?<> : (real * real) -> bool = fn
a157 1
    val equal : (real * real) -> bool = fn
d160 1
d179 4
d190 1
@


1.8
log
@[Bug #1757]
renamed __ieeereal to __ieee_real
        __char{array,vector} to __char_{array,vector}
@
text
@d8 2
a9 2
Loading mo module basis.__preinteger
Loading mo module basis.__preint32
d20 1
a20 1
Loading mo module basis.__prereal
@


1.7
log
@Updating
@
text
@d18 2
a19 2
Loading mo module basis.ieeereal
Loading mo module basis.__ieeereal
@


1.7.4.1
log
@branched from 1.7
@
text
@@


1.7.3.1
log
@branched from 1.7
@
text
@@


1.7.3.1.1.1
log
@branched from 1.7.3.1
@
text
@@


1.7.2.1
log
@branched from 1.7
@
text
@@


1.7.1.1
log
@branched from 1.7
@
text
@@


1.7.1.1.1.1
log
@branched from 1.7.1.1
@
text
@@


1.6
log
@New answers after unsafe string function removal
@
text
@d11 1
a11 1
Loading mo module basis.__integer
d23 82
d109 1
a109 1
        eqtype real = real
d128 1
a128 1
    eqtype real = real
d137 2
d141 2
d150 1
d156 1
a156 1
    val fromSci : {exp: int, man: real} -> real = fn
d181 1
a181 1
    val toSci : real -> {exp: int, man: real} = fn
a183 1
    val unequal : (real * real) -> bool = fn
@


1.5
log
@The require list has changed (again)!
@
text
@d2 1
a3 1
Loading mo module basis.__pre_basis
d6 8
a19 2
Loading mo module basis.__preinteger
Loading mo module basis.__preint32
@


1.5.2.1
log
@branched from 1.5
@
text
@@


1.5.1.1
log
@branched from 1.5
@
text
@@


1.4
log
@remove banner
@
text
@a1 1
Loading mo module basis.toplevel
@


1.4.1.1
log
@branched from 1.4
@
text
@@


1.3
log
@updating for commercial version flyer
@
text
@a0 2
commercial version may be purchased directly from Harlequin.

@


1.2
log
@updating.
@
text
@d1 2
@


1.1
log
@new unit
@
text
@a1 2
Loading mo module basis.general
Loading mo module basis.__general
d7 2
a17 1
processing result
d56 1
a56 1
    val compare : (real * real) -> order(hidden) = fn
d65 1
a65 1
    val fromString : string -> real MLWorks.Option.option = fn
d82 1
a82 1
    val scan : ('a -> (char * 'a) MLWorks.Option.option) -> 'a -> (real * 'a) MLWorks.Option.option = fn
@
