head	1.13;
access;
symbols
	MLWorks_21c0_1999_03_25:1.13
	MLWorks_20c1_1998_08_20:1.13
	MLWorks_20c0_1998_08_04:1.13
	MLWorks_20b2c2_1998_06_19:1.13
	MLWorks_20b2_Windows_1998_06_12:1.13
	MLWorks_20b1c1_1998_05_07:1.13
	MLWorks_20b0_1998_04_07:1.13
	MLWorks_20b0_1998_03_20:1.13
	MLWorks_20m2_1998_02_16:1.13
	MLWorks_20m1_1997_10_23:1.13
	MLWorks_11r1:1.10.1.1.1.2.1
	MLWorks_11c0_1997_09_09:1.10.1.1.1.2
	MLWorks_10r3:1.10.1.1.3
	MLWorks_10r2_551:1.10.1.1.2
	MLWorks_11:1.10.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.10.1.1
	MLWorks_20m0_1997_06_20:1.11
	MLWorks_1_0_r2c2_1997_06_14:1.10.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.10.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.10.1
	MLWorks_BugFix_1997_04_24:1.10
	MLWorks_1_0_r2_Win32_1997_04_11:1.10
	MLWorks_1_0_r2_Unix_1997_04_04:1.10
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.5.5.1.1
	MLWorks_gui_1996_12_18:1.5.6
	MLWorks_1_0_Win32_1996_12_17:1.5.5
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.5.3.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.5.3.1
	MLWorks_1_0_Irix_1996_11_28:1.5.3.1.1
	MLWorks_1_0_Win32_1996_11_22:1.5.4
	MLWorks_1_0_Unix_1996_11_14:1.5.3
	MLWorks_Open_Beta2_1996_10_11:1.5.2
	MLWorks_License_dev:1.5.1
	MLWorks_1_open_beta_1996_09_13:1.3.1
	MLWorks_Open_Beta_1996_08_22:1.1;
locks; strict;
comment	@# @;


1.13
date	97.10.03.09.45.24;	author jkbrook;	state Exp;
branches;
next	1.12;

1.12
date	97.10.02.18.37.38;	author jkbrook;	state Exp;
branches;
next	1.11;

1.11
date	97.06.13.09.42.51;	author matthew;	state Exp;
branches;
next	1.10;

1.10
date	97.03.25.13.31.14;	author matthew;	state Exp;
branches
	1.10.1.1;
next	1.9;

1.9
date	97.03.24.10.57.27;	author matthew;	state Exp;
branches;
next	1.8;

1.8
date	97.02.10.10.28.59;	author daveb;	state Exp;
branches;
next	1.7;

1.7
date	97.01.27.10.14.11;	author matthew;	state Exp;
branches;
next	1.6;

1.6
date	97.01.06.10.03.36;	author matthew;	state Exp;
branches;
next	1.5;

1.5
date	96.09.27.12.47.33;	author stephenb;	state Exp;
branches
	1.5.1.1
	1.5.2.1
	1.5.3.1
	1.5.4.1
	1.5.5.1
	1.5.6.1;
next	1.4;

1.4
date	96.09.26.10.18.33;	author stephenb;	state Exp;
branches;
next	1.3;

1.3
date	96.09.09.14.21.38;	author io;	state Exp;
branches
	1.3.1.1;
next	1.2;

1.2
date	96.09.07.00.02.52;	author io;	state Exp;
branches;
next	1.1;

1.1
date	96.08.08.13.32.07;	author andreww;	state Exp;
branches;
next	;

1.3.1.1
date	96.09.13.11.38.58;	author hope;	state Exp;
branches;
next	;

1.5.1.1
date	96.10.07.16.30.30;	author hope;	state Exp;
branches;
next	;

1.5.2.1
date	96.10.17.11.51.04;	author hope;	state Exp;
branches;
next	;

1.5.3.1
date	96.11.14.13.18.31;	author hope;	state Exp;
branches
	1.5.3.1.1.1;
next	;

1.5.3.1.1.1
date	96.11.28.15.29.06;	author hope;	state Exp;
branches;
next	;

1.5.4.1
date	96.11.22.18.36.20;	author hope;	state Exp;
branches;
next	;

1.5.5.1
date	96.12.17.18.15.18;	author hope;	state Exp;
branches
	1.5.5.1.1.1;
next	;

1.5.5.1.1.1
date	97.02.24.12.08.21;	author hope;	state Exp;
branches;
next	;

1.5.6.1
date	96.12.18.10.10.19;	author hope;	state Exp;
branches;
next	;

1.10.1.1
date	97.05.12.11.09.03;	author hope;	state Exp;
branches
	1.10.1.1.1.1
	1.10.1.1.2.1
	1.10.1.1.3.1;
next	;

1.10.1.1.1.1
date	97.07.28.18.51.06;	author daveb;	state Exp;
branches;
next	1.10.1.1.1.2;

1.10.1.1.1.2
date	97.08.13.14.06.16;	author daveb;	state Exp;
branches
	1.10.1.1.1.2.1.1;
next	;

1.10.1.1.1.2.1.1
date	97.10.07.12.15.46;	author jkbrook;	state Exp;
branches;
next	;

1.10.1.1.2.1
date	97.09.08.17.42.54;	author daveb;	state Exp;
branches;
next	;

1.10.1.1.3.1
date	97.09.09.14.42.18;	author daveb;	state Exp;
branches;
next	1.10.1.1.3.2;

1.10.1.1.3.2
date	97.09.24.15.59.03;	author jont;	state Exp;
branches;
next	;


desc
@new unit
Answer file for debugger/debugger_options.sml
@


1.13
log
@[Bug #20088]
Removed extra white space at end of file
@
text
@val it : unit = ()
structure S = struct ... end
structure D = struct ... end
val it : unit = ()
val fact : int -> int = fn
val it : unit = ()
Entering: fact 4
Entering debugger, commands: q : Return to top level, c : Continue interrupted code,  ? : more help
Current (innermost) stack frame:
fact 4
Debugger> Entering: fact 3
Debugger> Entering: fact 2
Debugger> (Current frame)
fact 2
fact 3
fact 4
(Outermost frame)
Debugger> val it : unit = ()
Entering: fact 4
Entering debugger, commands: q : Return to top level, c : Continue interrupted code,  ? : more help
Current (innermost) stack frame:
breakpoint_replacement<??>
Debugger> Entering: fact 3
Debugger> Entering: fact 2
Debugger> (Current frame)
step_always_replacement<??>
fact 2
step_always_replacement<??>
fact 3
breakpoint_replacement<??>
fact 4
(Outermost frame)
Debugger> val it : unit = ()
Entering: fact 4
Entering debugger, commands: q : Return to top level, c : Continue interrupted code,  ? : more help
Current (innermost) stack frame:
breakpoint_replacement<??>
Debugger> Entering: fact 3
Debugger> Entering: fact 2
Debugger> (Current frame)
step_always_replacement<??>
fact 2
fact 3
step_always_replacement<??>
fact 3
fact 4
breakpoint_replacement<??>
fact 4
(Outermost frame)
Debugger> @


1.12
log
@[Bug #20088]
Merging from MLWorks_11:
Set maximumStrDepth to 0.
@
text
@d50 1
a50 1
Debugger> 
@


1.11
log
@Updating
@
text
@d1 3
a3 93
structure S =
  struct
    structure Compiler =
      struct
        val generateDebugInfo : bool S.option = _
        val generateLocalFunctions : bool S.option = _
        val generateTraceProfileCode : bool S.option = _
        val generateVariableDebugInfo : bool S.option = _
        val interruptTightLoops : bool S.option = _
        val mipsR4000andLater : bool S.option = _
        val optimizeHandlers : bool S.option = _
        val optimizeLeafFns : bool S.option = _
        val optimizeSelfTailCalls : bool S.option = _
        val optimizeTailCalls : bool S.option = _
        val printCompilerMessages : bool S.option = _
        val sparcV7 : bool S.option = _
      end
    structure Debugger =
      struct
        val hideAnonymousFrames : bool S.option = _
        val hideCFrames : bool S.option = _
        val hideDeliveredFrames : bool S.option = _
        val hideDuplicateFrames : bool S.option = _
        val hideHandlerFrames : bool S.option = _
        val hideSetupFrames : bool S.option = _
      end
    structure Internals =
      struct
        val showAbsyn : bool S.option = _
        val showEnviron : bool S.option = _
        val showLambda : bool S.option = _
        val showMach : bool S.option = _
        val showMir : bool S.option = _
        val showOptLambda : bool S.option = _
        val showOptMir : bool S.option = _
      end
    structure Language =
      struct
        val abstractions : bool S.option = _
        val fixityInOpen : bool S.option = _
        val fixityInSignatures : bool S.option = _
        val limitedOpen : bool S.option = _
        val oldDefinition : bool S.option = _
        val opOptional : bool S.option = _
        val requireReservedWord : bool S.option = _
        val typeDynamic : bool S.option = _
        val weakTyvars : bool S.option = _
      end
    structure Mode =
      struct
        val compatibility : unit -> unit = fn
        val debugging : bool S.option = _
        val optimizing : bool S.option = _
        val sml'90 : unit -> unit = fn
        val sml'96 : unit -> unit = fn
      end
    structure Preferences =
      struct
        val customEditorName : string S.option = _
        val editor : string S.option = _
        val externalEditorCommand : string S.option = _
        val maximumErrors : int S.option = _
        val maximumHistorySize : int S.option = _
        val useCompletionMenu : bool S.option = _
        val useDebugger : bool S.option = _
        val useErrorBrowser : bool S.option = _
        val useRelativePathname : bool S.option = _
        val useWindowDebugger : bool S.option = _
      end
    structure ValuePrinter =
      struct
        val floatPrecision : int S.option = _
        val maximumDepth : int S.option = _
        val maximumRefDepth : int S.option = _
        val maximumSeqSize : int S.option = _
        val maximumStrDepth : int S.option = _
        val maximumStringSize : int S.option = _
        val showExnDetails : bool S.option = _
        val showFnDetails : bool S.option = _
      end
    eqtype 'a option = 'a option
    val get : 'a S.option -> 'a = fn
    val set : ('a S.option * 'a) -> unit = fn
  end
structure D =
  struct
    val hideAnonymousFrames : bool S.option = _
    val hideCFrames : bool S.option = _
    val hideDeliveredFrames : bool S.option = _
    val hideDuplicateFrames : bool S.option = _
    val hideHandlerFrames : bool S.option = _
    val hideSetupFrames : bool S.option = _
  end
d50 1
a50 1
Debugger> @


1.10
log
@More updating
@
text
@a4 1
        val earlyMipsR4000 : bool S.option = _
@


1.10.1.1
log
@branched from 1.10
@
text
@@


1.10.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@@


1.10.1.1.3.2
log
@[Bug #70011]
Avoid dependence on exact contents of shell structures
@
text
@d1 94
@


1.10.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@@


1.10.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@@


1.10.1.1.1.2
log
@[Bug #20088]
Set maximumStrDepth to 0.
@
text
@d1 94
a94 3
val it : unit = ()
structure S = struct ... end
structure D = struct ... end
@


1.10.1.1.1.2.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@


1.9
log
@Updating
@
text
@d5 1
d11 1
a11 2
        val mips2 : bool S.option = _
        val mipsR4000 : bool S.option = _
@


1.8
log
@Answer files no longer include stderr output, therefore the line
   "Entering debugger, scanning stack ... done"
no longer appears.
@
text
@d68 1
@


1.7
log
@Updating
@
text
@a0 1
Entering Debugger, scanning stack ... done.
d108 1
a108 2
Debugger> Entering Debugger, scanning stack ... done.
val it : unit = ()
d123 1
a123 2
Debugger> Entering Debugger, scanning stack ... done.
val it : unit = ()
@


1.6
log
@Generating new file
@
text
@d11 2
d18 1
@


1.5
log
@Update wrt changes to src/debugger/_ml_debugger.sml 1.162
@
text
@d7 1
@


1.5.6.1
log
@branched from 1.5
@
text
@@


1.5.5.1
log
@branched from 1.5
@
text
@@


1.5.5.1.1.1
log
@branched from 1.5.5.1
@
text
@@


1.5.4.1
log
@branched from 1.5
@
text
@@


1.5.3.1
log
@branched from 1.5
@
text
@@


1.5.3.1.1.1
log
@branched from 1.5.3.1
@
text
@@


1.5.2.1
log
@branched from 1.5
@
text
@@


1.5.1.1
log
@branched from 1.5
@
text
@@


1.4
log
@[Bug #1562]
Removed the C frame and setup frame tests since these aren't portable.
@
text
@d1 1
d105 2
a106 1
Debugger> val it : unit = ()
d121 2
a122 1
Debugger> val it : unit = ()
@


1.3
log
@remove banner
@
text
@a107 43
<Cframe> start
Debugger> Entering: fact 3
Debugger> Entering: fact 2
Debugger> (Current frame)
<Cframe> start
<Cframe> start intercept
<Cframe> start intercept
fact 2
<Cframe> start
<Cframe> start intercept
<Cframe> start intercept
fact 3
<Cframe> start
<Cframe> start intercept
<Cframe> start intercept
fact 4
(Outermost frame)
Debugger> val it : unit = ()
Entering: fact 4
Entering debugger, commands: q : Return to top level, c : Continue interrupted code,  ? : more help
Current (innermost) stack frame:
<Cframe> start
Debugger> Entering: fact 3
Debugger> Entering: fact 2
Debugger> (Current frame)
<Cframe> start
<Cframe> start intercept
<Cframe> start intercept
fact 2
<Cframe> start
<Cframe> start intercept
<Cframe> start intercept
fact 3
<Cframe> start
<Cframe> start intercept
<Cframe> start intercept
fact 4
<Setup> ()
(Outermost frame)
Debugger> val it : unit = ()
Entering: fact 4
Entering debugger, commands: q : Return to top level, c : Continue interrupted code,  ? : more help
Current (innermost) stack frame:
a112 3
<Cframe> start
<Cframe> start intercept
<Cframe> start intercept
a114 3
<Cframe> start
<Cframe> start intercept
<Cframe> start intercept
a116 3
<Cframe> start
<Cframe> start intercept
<Cframe> start intercept
a117 1
<Setup> ()
a127 3
<Cframe> start
<Cframe> start intercept
<Cframe> start intercept
a130 3
<Cframe> start
<Cframe> start intercept
<Cframe> start intercept
a133 3
<Cframe> start
<Cframe> start intercept
<Cframe> start intercept
a134 1
<Setup> ()
@


1.3.1.1
log
@branched from 1.3
@
text
@@


1.2
log
@updating for commercial version flyer
@
text
@a0 2
commercial version may be purchased directly from Harlequin.

@


1.1
log
@new unit
Answer file for debugger/debugger_options.sml
@
text
@d1 2
@
