head	1.7;
access;
symbols
	MLWorks_21c0_1999_03_25:1.7
	MLWorks_20c1_1998_08_20:1.3
	MLWorks_20c0_1998_08_04:1.3
	MLWorks_20b2c2_1998_06_19:1.3
	MLWorks_20b2_Windows_1998_06_12:1.3
	MLWorks_20b1c1_1998_05_07:1.3
	MLWorks_20b0_1998_04_07:1.3
	MLWorks_20b0_1998_03_20:1.3
	MLWorks_20m2_1998_02_16:1.3
	MLWorks_20m1_1997_10_23:1.2
	MLWorks_11r1:1.1.7.2.1.1.1
	MLWorks_11c0_1997_09_09:1.1.7.2.1.1
	MLWorks_10r3:1.1.7.2.3
	MLWorks_10r2_551:1.1.7.2.2
	MLWorks_11:1.1.7.2.1
	MLWorks_1_0_r2c2_1997_07_28:1.1.7.2
	MLWorks_20m0_1997_06_20:1.2
	MLWorks_1_0_r2c2_1997_06_14:1.1.7.2
	MLWorks_1_0_r2c1_released_1997_05_23:1.1.7.1
	MLWorks_1_0_r2c1_1997_05_12:1.1.7
	MLWorks_BugFix_1997_04_24:1.2
	MLWorks_1_0_r2_Win32_1997_04_11:1.1
	MLWorks_1_0_r2_Unix_1997_04_04:1.1
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.1.6.1.1
	MLWorks_1_0_Win32_1996_12_17:1.1.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.1.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.1.4.1
	MLWorks_1_0_Irix_1996_11_28:1.1.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.1.5
	MLWorks_1_0_Unix_1996_11_14:1.1.4
	MLWorks_Open_Beta2_1996_10_11:1.1.3
	MLWorks_License_dev:1.1.2
	MLWorks_1_open_beta_1996_09_13:1.1.1
	MLWorks_Open_Beta_1996_08_22:1.1;
locks; strict;
comment	@# @;


1.7
date	99.03.24.15.38.18;	author daveb;	state Exp;
branches;
next	1.6;

1.6
date	98.10.07.12.45.45;	author jont;	state Exp;
branches;
next	1.5;

1.5
date	98.09.24.14.32.53;	author jont;	state Exp;
branches;
next	1.4;

1.4
date	98.08.25.14.48.12;	author jont;	state Exp;
branches;
next	1.3;

1.3
date	97.12.15.13.50.29;	author jont;	state Exp;
branches;
next	1.2;

1.2
date	97.04.15.12.01.11;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	96.08.01.15.26.57;	author io;	state Exp;
branches
	1.1.1.1
	1.1.2.1
	1.1.3.1
	1.1.4.1
	1.1.5.1
	1.1.6.1
	1.1.7.1;
next	;

1.1.1.1
date	96.09.13.11.44.18;	author hope;	state Exp;
branches;
next	;

1.1.2.1
date	96.10.07.16.37.31;	author hope;	state Exp;
branches;
next	;

1.1.3.1
date	96.10.17.11.56.30;	author hope;	state Exp;
branches;
next	;

1.1.4.1
date	96.11.14.13.24.51;	author hope;	state Exp;
branches
	1.1.4.1.1.1;
next	;

1.1.4.1.1.1
date	96.11.28.15.35.50;	author hope;	state Exp;
branches;
next	;

1.1.5.1
date	96.11.22.18.41.57;	author hope;	state Exp;
branches;
next	;

1.1.6.1
date	96.12.17.18.20.56;	author hope;	state Exp;
branches
	1.1.6.1.1.1;
next	;

1.1.6.1.1.1
date	97.02.24.12.15.41;	author hope;	state Exp;
branches;
next	;

1.1.7.1
date	97.05.12.11.12.28;	author hope;	state Exp;
branches;
next	1.1.7.2;

1.1.7.2
date	97.06.04.16.48.16;	author daveb;	state Exp;
branches
	1.1.7.2.1.1
	1.1.7.2.2.1
	1.1.7.2.3.1;
next	;

1.1.7.2.1.1
date	97.07.28.18.55.13;	author daveb;	state Exp;
branches
	1.1.7.2.1.1.1.1;
next	;

1.1.7.2.1.1.1.1
date	97.10.07.12.20.01;	author jkbrook;	state Exp;
branches;
next	;

1.1.7.2.2.1
date	97.09.08.17.47.33;	author daveb;	state Exp;
branches;
next	;

1.1.7.2.3.1
date	97.09.09.14.46.52;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
When you get a list of claimed writeable files in your directory and
you need to update it, pass that list to this script.
@


1.7
log
@[Bug #190541]
Check both the OS and OSTYPE environment variables.
@
text
@#!/bin/sh
# Copyright (c) 1996 Harlequin Ltd.
script_name=`basename $0`
cmd="merge"
STATUS=0
branch=""; base=""; test="";
usage="usage: $script_name [-[th]+] [-e <base>] [-b <branch>] (file1|dir1)+"

while getopts "te:b:h" opt; do
  case $opt in
    e) base="-base $OPTARG";;
    b) branch="-branch $OPTARG";;
    t) test="test";;
    h|\?) 
      echo $usage; 
      echo "    h for this help"
      echo "    t run in hope test mode"
      echo "    e <base version>"
      echo "      applies to single file argument only"
      echo "    b <branch version>"
      exit 1;;
  esac
done
shift `expr $OPTIND - 1`


: echo $script_name: checking arguments...
if [ $# -eq 0 ]; then
  echo "nothing to $script_name"
  echo $usage
  exit 1
else
  : echo ok
fi

: echo prime $entry

eval `findcomp2 $1`;
if [ -z "$compound" ]; then
  entry=;
  echo "cannot identify compound \"$1\""
  exit 1
elif [ -z "$unit" ]; then
  entry="-c $compound"
else
  entry="-c $compound -u $unit"
fi
shift

: echo stuff in the separators

for arg in $*; do
  eval `findcomp2 $arg`;
  if [ -z "$compound" ]; then
    echo "cannot identify compound \"$arg\""
    exit 1
  elif [ -z "$unit" ]; then
    entry="$entry -a -c $compound"
  else
    entry="$entry -a -c $compound -u $unit"
  fi
done

: echo final processing

if [ -z "$TMP" ]; then
  temp_dir=/tmp
else
  temp_dir=`echo $TMP | sed -e 's!\\\\!/!g'`
fi
temp_file=$temp_dir/hope_tmp$$

# We need to work out whether we're on Unix or Windows.
# NT sets the OS variable to Windows_NT.
# Some MLWorkers set the OS variable themselves.
# Failing that, bash sets the OSTYPE variable.
hope_temp_file=""
case "$OS" in
  Win*)
    hope_temp_file=`echo $temp_file | sed -e 's!/!\\\\!g'`;;
  NT*)
    hope_temp_file=`echo $temp_file | sed -e 's!/!\\\\!g'`;;
  Solaris*)
    hope_temp_file=$temp_file;;
  SunOS*)
    hope_temp_file=$temp_file;;
  Irix*)
    hope_temp_file=$temp_file;;
  Linux*)
    hope_temp_file=$temp_file;;
esac

if [ -z "$hope_temp_file" ]; then
  case "$OSTYPE" in
    Win*)
      hope_temp_file=`echo $temp_file | sed -e 's!/!\\\\!g'`;;
    Solaris*)
      hope_temp_file=$temp_file;;
    SunOS*)
      hope_temp_file=$temp_file;;
    linux*)
      hope_temp_file=$temp_file;;
    *)
      # Assume Unix if we have no other clue.
      # We could also get here on Win95, but we don't use that
      # for development.
      hope_temp_file=$temp_file;;
  esac
fi

if [ -z "$entry" ]; then
  echo skipped everything
else
  cd $dir
  echo $test $cmd $base $branch $entry > $temp_file
  hope source $hope_temp_file
  rm $temp_file
fi

###############################################################################
# $Log: hmerge,v $
# Revision 1.6  1998/10/07  12:45:45  jont
# [Bug #70179]
# Avoid OSTYPE=linux problems
#
# Revision 1.5  1998/09/24  14:32:53  jont
# [Bug #70179]
# Make sure temp file name more carefully created to avoid drive letter problems
#
# Revision 1.4  1998/08/25  14:48:12  jont
# [Bug #70162]
# Use source files to get past hope 44 argument limit under Win32
#
# Revision 1.3  1997/12/15  13:50:29  jont
# [Bug #70020]
# Ensure we're in the correct directory before doing the hope command
#
# Revision 1.2  1997/04/15  12:01:11  jont
# Stop using script_path mechanism as this confuses Win32
#
# Revision 1.1  1996/08/01  15:26:57  io
# new unit
# When you get a list of claimed writeable files in your directory and
# you need to update it, pass that list to this script.
#
#
@


1.6
log
@[Bug #70179]
Avoid OSTYPE=linux problems
@
text
@d72 37
a108 4
if [ -z "$OSTYPE" -o "$OSTYPE" = "linux" ]; then
  hope_temp_file=$temp_file
else
  hope_temp_file=`echo $temp_file | sed -e 's!/!\\\\!g'`
d110 1
d122 4
d146 1
a146 1
#@


1.5
log
@[Bug #70179]
Make sure temp file name more carefully created to avoid drive letter problems
@
text
@d72 1
a72 1
if [ -z "$OSTYPE" ]; then
d88 4
@


1.4
log
@[Bug #70162]
Use source files to get past hope 44 argument limit under Win32
@
text
@d66 11
a76 1
temp_file=/tmp/hope_tmp$$
d82 1
a82 1
  hope source $temp_file
d88 4
@


1.3
log
@[Bug #70020]
Ensure we're in the correct directory before doing the hope command
@
text
@d66 1
d68 1
a68 1
  echo skipped everythin
d70 4
a73 1
  cd $dir && hope $test $cmd $base $branch $entry
d78 4
@


1.2
log
@Stop using script_path mechanism as this confuses Win32
@
text
@d69 1
a69 1
  hope $test $cmd $base $branch $entry
d74 3
@


1.1
log
@new unit
When you get a list of claimed writeable files in your directory and
you need to update it, pass that list to this script.
@
text
@a2 1
script_path=`dirname $0`
d38 1
a38 1
eval `$script_path/findcomp2 $1`;
d53 1
a53 1
  eval `$script_path/findcomp2 $arg`;
d73 6
a78 1
# $Log$
@


1.1.7.1
log
@branched from 1.1
@
text
@d74 1
a74 6
# $Log: hmerge,v $
# Revision 1.1  1996/08/01  15:26:57  io
# new unit
# When you get a list of claimed writeable files in your directory and
# you need to update it, pass that list to this script.
#
@


1.1.7.2
log
@[Bug #30167]
@
text
@d3 1
d39 1
a39 1
eval `findcomp2 $1`;
d54 1
a54 1
  eval `findcomp2 $arg`;
a74 3
# Revision 1.1.7.1  1997/05/12  11:12:28  hope
# branched from 1.1
#
d80 1
a80 1
#
@


1.1.7.2.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a73 3
# Revision 1.1.7.2  1997/06/04  16:48:16  daveb
# [Bug #30167]
#
@


1.1.7.2.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a73 3
# Revision 1.1.7.2  1997/06/04  16:48:16  daveb
# [Bug #30167]
#
@


1.1.7.2.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a73 3
# Revision 1.1.7.2  1997/06/04  16:48:16  daveb
# [Bug #30167]
#
@


1.1.7.2.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a73 3
# Revision 1.1.7.2.1.1  1997/07/28  18:55:13  daveb
# branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
#
@


1.1.6.1
log
@branched from 1.1
@
text
@d74 1
a74 6
# $Log: hmerge,v $
# Revision 1.1  1996/08/01  15:26:57  io
# new unit
# When you get a list of claimed writeable files in your directory and
# you need to update it, pass that list to this script.
#
@


1.1.6.1.1.1
log
@branched from 1.1.6.1
@
text
@a74 3
# Revision 1.1.6.1  1996/12/17  18:20:56  hope
# branched from 1.1
#
@


1.1.5.1
log
@branched from 1.1
@
text
@d74 1
a74 6
# $Log: hmerge,v $
# Revision 1.1  1996/08/01  15:26:57  io
# new unit
# When you get a list of claimed writeable files in your directory and
# you need to update it, pass that list to this script.
#
@


1.1.4.1
log
@branched from 1.1
@
text
@d74 1
a74 6
# $Log: hmerge,v $
# Revision 1.1  1996/08/01  15:26:57  io
# new unit
# When you get a list of claimed writeable files in your directory and
# you need to update it, pass that list to this script.
#
@


1.1.4.1.1.1
log
@branched from 1.1.4.1
@
text
@a74 3
# Revision 1.1.4.1  1996/11/14  13:24:51  hope
# branched from 1.1
#
@


1.1.3.1
log
@branched from 1.1
@
text
@d74 1
a74 6
# $Log: hmerge,v $
# Revision 1.1  1996/08/01  15:26:57  io
# new unit
# When you get a list of claimed writeable files in your directory and
# you need to update it, pass that list to this script.
#
@


1.1.2.1
log
@branched from 1.1
@
text
@d74 1
a74 6
# $Log: hmerge,v $
# Revision 1.1  1996/08/01  15:26:57  io
# new unit
# When you get a list of claimed writeable files in your directory and
# you need to update it, pass that list to this script.
#
@


1.1.1.1
log
@branched from 1.1
@
text
@d74 1
a74 6
# $Log: hmerge,v $
# Revision 1.1  1996/08/01  15:26:57  io
# new unit
# When you get a list of claimed writeable files in your directory and
# you need to update it, pass that list to this script.
#
@
