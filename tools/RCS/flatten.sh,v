head	1.6;
access;
symbols
	MLWorks_21c0_1999_03_25:1.6
	MLWorks_20c1_1998_08_20:1.6
	MLWorks_20c0_1998_08_04:1.6
	MLWorks_20b2c2_1998_06_19:1.6
	MLWorks_20b2_Windows_1998_06_12:1.6
	MLWorks_20b1c1_1998_05_07:1.6
	MLWorks_20b0_1998_04_07:1.6
	MLWorks_20b0_1998_03_20:1.6
	MLWorks_20m2_1998_02_16:1.6
	MLWorks_20m1_1997_10_23:1.6
	MLWorks_11r1:1.6.1.1.1.1.1
	MLWorks_11c0_1997_09_09:1.6.1.1.1.1
	MLWorks_10r3:1.6.1.1.3
	MLWorks_10r2_551:1.6.1.1.2
	MLWorks_11:1.6.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.6.1.1
	MLWorks_20m0_1997_06_20:1.6
	MLWorks_1_0_r2c2_1997_06_14:1.6.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.6.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.6.1
	MLWorks_BugFix_1997_04_24:1.6
	MLWorks_1_0_r2_Win32_1997_04_11:1.6
	MLWorks_1_0_r2_Unix_1997_04_04:1.6
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.5.3.1.1
	MLWorks_1_0_Win32_1996_12_17:1.5.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.5.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.5.1.1
	MLWorks_1_0_Irix_1996_11_28:1.5.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.5.2
	MLWorks_1_0_Unix_1996_11_14:1.5.1
	MLWorks_Open_Beta2_1996_10_11:1.4.3
	MLWorks_License_dev:1.4.2
	MLWorks_1_open_beta_1996_09_13:1.4.1
	MLWorks_Open_Beta_1996_08_22:1.4
	MLWorks_Beta_1996_07_02:1.3;
locks; strict;
comment	@# @;


1.6
date	97.01.06.13.19.09;	author jont;	state Exp;
branches
	1.6.1.1;
next	1.5;

1.5
date	96.11.06.00.38.33;	author brianm;	state Exp;
branches
	1.5.1.1
	1.5.2.1
	1.5.3.1;
next	1.4;

1.4
date	96.07.04.13.17.43;	author jont;	state Exp;
branches
	1.4.1.1
	1.4.2.1
	1.4.3.1;
next	1.3;

1.3
date	96.06.27.12.45.39;	author jont;	state Exp;
branches;
next	1.2;

1.2
date	96.06.19.14.59.09;	author brianm;	state Exp;
branches;
next	1.1;

1.1
date	96.06.15.14.18.26;	author brianm;	state Exp;
branches;
next	;

1.4.1.1
date	96.09.13.11.44.17;	author hope;	state Exp;
branches;
next	;

1.4.2.1
date	96.10.07.16.37.30;	author hope;	state Exp;
branches;
next	;

1.4.3.1
date	96.10.17.11.56.29;	author hope;	state Exp;
branches;
next	;

1.5.1.1
date	96.11.14.13.24.50;	author hope;	state Exp;
branches
	1.5.1.1.1.1;
next	;

1.5.1.1.1.1
date	96.11.28.15.35.49;	author hope;	state Exp;
branches;
next	;

1.5.2.1
date	96.11.22.18.41.56;	author hope;	state Exp;
branches;
next	;

1.5.3.1
date	96.12.17.18.20.55;	author hope;	state Exp;
branches
	1.5.3.1.1.1;
next	;

1.5.3.1.1.1
date	97.02.24.12.15.40;	author hope;	state Exp;
branches;
next	;

1.6.1.1
date	97.05.12.11.12.28;	author hope;	state Exp;
branches
	1.6.1.1.1.1
	1.6.1.1.2.1
	1.6.1.1.3.1;
next	;

1.6.1.1.1.1
date	97.07.28.18.55.13;	author daveb;	state Exp;
branches
	1.6.1.1.1.1.1.1;
next	;

1.6.1.1.1.1.1.1
date	97.10.07.12.20.00;	author jkbrook;	state Exp;
branches;
next	;

1.6.1.1.2.1
date	97.09.08.17.47.32;	author daveb;	state Exp;
branches;
next	;

1.6.1.1.3.1
date	97.09.09.14.46.51;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
New file.
@


1.6
log
@[Bug #0]
Removed all the OS sepcific stuff as it wasn't necessary.
@
text
@#!/bin/sh
# (Copyright) Harlequin Ltd 1996 (All rights reserved)

remove_src_hdr=../../tools/remove_src_hdr.sh

case $#
in
   4) struct=$1
      sig_name=$2
      struct_name=$3
      filelist=$4
      ;;
   *)
cat - <<\%%%%
Usage : flatten <struct_file> <sig_name> <struct_name> <filelist>

This takes a structure file name <struct_file>, a signature name
<sig_name>, a structure name <struct_name> and a file name <filelist>
which contains a (non-empty) list of source files.  The source files
are used in sequence to produce a single source file containing a
single implementing structure in which all others are syntactically
embedded.  Each source file should contain a single structure at
top-level (i.e. no functors here).

The last file in the file list contains the structure that is opened to
provide the implementation.

Note that the header comment containing source code control
information will be stripped off.

The <struct> argument is used to construct the names for the resulting
structure, the signature file (which must exist) and the output
structure file (which mustn't).  If <struct> = "foo" then these
filenames are:

     - foo.sml    --- signature file

     - __foo.sml  --- structure file

The name of the signature contained inside the signature file is given
by <sig_name> and the name of the implementing structure is given by
<struct_name> - this is qualified by the given signature.

%%%%

     exit 0
     ;;
esac

# Lets get started ...

tmp=%tmp_file%.$$
tmp1=%tmp1_file%.$$
require=%require_file%.$$
header=%header_file%.$$
rm -f $tmp $tmp1 $require $header
> $require

trap 'rm -f $tmp $tmp1 $require $header; exit' 1 2 3 9 15

struct="`basename $struct .sml`"

sig_file=$struct.sml
output=__$struct.sml


if test -f $sig_file
then :
else echo Signature file $sig_file doesnt exist 
     exit 3
fi

if test -f $output
then echo File $output already exists.
     exit 3
fi

if test -f $filelist
then :
else echo File $filelist is not available.
     exit 3
fi

echo Making file $output ...

date=`date`
set `echo $date`
month=$2
day=$3
year=$6

cat - <<%%%% > $header
(*   ==== GENERATED ML SOURCE FILE : $output =====
 *
 *   Generated on $date
 *
 *   (C) The Harlequin Group, $year (All rights reserved)
 *)

%%%%

if test -f $sig_file
then echo "   Inspecting signature file $sig_file ..."
else echo File $i not found ...
     rm -f $tmp $tmp1 $require $header $output
     exit 1
fi

cat - <<%%%% >> $output
require "$struct";
structure $struct_name : $sig_name =
   struct
%%%%

files=`cat $filelist`

for i in $files
do
   if test -f $i
   then echo "   Adding $i ..."
   else echo File $i not found ...
	rm -f $tmp $tmp1 $require $header $output
	exit 1
   fi

   rm -f $tmp $tmp1

   ptmp1=%ptmp1%.$$
   rm -f $ptmp1

   cat $i | $remove_src_hdr | sed -e '/structure/s;:; : ;' > $ptmp1

   awk '
   $1 ~ /structure/ && $3 ~ /\:/ && $5 ~ /\=/ && $6 ~ /[A-Za-z0-9_]*/ {
       printf "a         structure %s = %s\n", $2, $6
       next
   }
   $1 ~ /structure/ && $3 ~ /\:/ && $5 ~ /\=/ {
       printf "astructure %s =\n", $2
       next
   }        
   $1 ~ /require/ && $2 ~ /\"\.\.\/.*/ {
       printf "b%s\n", $0
       next
   }
   $1 ~ /require/ && $2 ~ /\"\^\..*/ {
       printf "b%s\n", $0
       next
   }
   $1 ~ /require/ {
       next
   }
   $0 ~ /^[ ]*$/  {
       next
   }
   { printf "a%s\n", $0 }
   '  $ptmp1 > $tmp
   rm -f $ptmp1


   sed -n -e 's;^a;      ;p' $tmp > $tmp1
   sed -n -e 's;^b;;p' $tmp >> $require
   mv $tmp1 $tmp

   struct_name="`awk '$1 ~ /structure/ {print $2 ; exit}' $tmp`"

   echo     >> $output
   cat $tmp >> $output
done

cat - <<%%%% >> $output
       open $struct_name
    end;
%%%%
rm -f $tmp $tmp1

sed -e 's; [ ]*; ;g' $require | sort | uniq > $tmp
mv $tmp $require

cat $header $require $output > $tmp
rm -f $header $require $output
mv $tmp $output
@


1.6.1.1
log
@branched from 1.6
@
text
@@


1.6.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@@


1.6.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@@


1.6.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@@


1.6.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@


1.5
log
@ Fixing problem with capitalisation of structure name on different platforms.
@
text
@d4 1
a4 53
case "$OS"
in
  NT)
  OS_TYPE="NT"
  export OS_TYPE
  ;;

  Win95)
  OS_TYPE="NT"
  export OS_TYPE
  ;;

  Solaris)
  OS_TYPE="Unix"
  export OS_TYPE
  ;;

  SunOS)
  OS_TYPE="Unix"
  export OS_TYPE
  ;;

  Linux)
  OS_TYPE="Unix"
  export OS_TYPE
  ;;

  Irix)
  OS_TYPE="Unix"
  export OS_TYPE
  ;;

  *)
  echo "OS unset or badly set"
  exit 1
  ;;

esac

case "$OS_TYPE"
in
    NT)
      Path="$Path;C:/usr/local/bin;C:/hqbin/nt/x86"
      export Path
      remove_src_hdr=../../tools/remove_src_hdr.sh
      ;;

    Unix)
      PATH=/bin:/usr/bin:$PATH
      export PATH
      remove_src_hdr=remove_src_hdr.sh
      ;;
esac
a60 2

###struct="`echo $struct | tr A-Z a-z`"
a108 12
#### Solaris doesn't like multi-line piped commands so ....
###ptmp1=%ptmp1%.$$ 
###
###cat $sig_file | $remove_src_hdr > $ptmp1
###awk '$1 ~ /signature/ {print $2 ; exit}' $ptmp1 | tr a-z- A-Z_ > $tmp1
###sig_name="`cat $tmp1`"
###rm -f $tmp1 $ptmp1
###
###first="`echo $struct | sed -e 's;^\(.\).*;\1;' | tr a-z A-Z`"
###rest="`echo $struct | sed -e 's;^.;;' | tr A-Z- a-z_`"
###struct_name="$first$rest"

a113 1

@


1.5.3.1
log
@branched from 1.5
@
text
@@


1.5.3.1.1.1
log
@branched from 1.5.3.1
@
text
@@


1.5.2.1
log
@branched from 1.5
@
text
@@


1.5.1.1
log
@branched from 1.5
@
text
@@


1.5.1.1.1.1
log
@branched from 1.5.1.1
@
text
@@


1.4
log
@Replace expand by cat, since expand doesn't exist on Irix
@
text
@d60 4
a63 2
   2) struct=$1
      filelist=$2
d66 2
a67 2
cat- <<\%%%%
Usage : flatten <struct> <filelist>
d69 7
a75 6
This takes a structure name <struct> and a file name <filelist> which
contains a (non-empty) list of source files.  The source files are
used in sequence to produce a single source file containing a single
implementing structure in which all others are syntactically embedded.
Each source file should contain a single structure at top-level
(i.e. no functors here).
d92 3
a94 3
The name of the signature contained inside the signature file is
extracted from the signature file and need not have any correspondance
with <struct>.
d98 1
a98 1
     exit0
d114 1
a114 1
struct="`echo $struct | tr A-Z a-z`"
d163 11
a173 11
# Solaris doesn't like multi-line piped commands so ....
ptmp1=%ptmp1%.$$ 

cat $sig_file | $remove_src_hdr > $ptmp1
awk '$1 ~ /signature/ {print $2 ; exit}' $ptmp1 | tr 'a-z-' 'A-Z_' > $tmp1
sig_name="`cat $tmp1`"
rm -f $tmp1 $ptmp1

first="`echo $struct | sed -e 's;^\(.\).*;\1;' | tr 'a-z' 'A-Z'`"
rest="`echo $struct | sed -e 's;^.;;' | tr 'A-Z-' 'a-z_'`"
struct_name="$first$rest"
@


1.4.3.1
log
@branched from 1.4
@
text
@@


1.4.2.1
log
@branched from 1.4
@
text
@@


1.4.1.1
log
@branched from 1.4
@
text
@@


1.3
log
@Modifying in the light of changes to mk_interface.sh
@
text
@d163 1
a163 1
expand $sig_file | $remove_src_hdr > $ptmp1
d195 1
a195 1
   expand $i | $remove_src_hdr | sed -e '/structure/s;:; : ;' > $ptmp1
@


1.2
log
@Modifications for running under Win NT ...
@
text
@d4 1
a4 1
case "$SYSTEM"
d6 41
a46 1
    system*)
a47 1

d50 2
a51 2
    *)
      
@


1.1
log
@new unit
New file.
@
text
@d4 14
a17 2
PATH=/bin:/usr/bin:$PATH
export PATH
a61 2
# echo flatten : PATH=$PATH

d74 1
a74 1
     
d124 1
a124 1
expand $sig_file | remove_src_hdr.sh > $ptmp1
d153 5
a157 3
   expand $i                      |
   remove_src_hdr.sh              |
   sed -e '/structure/s;:; : ;'   |
d182 3
a184 1
   '  > $tmp
@
