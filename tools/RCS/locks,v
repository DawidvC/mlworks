head	1.12;
access;
symbols
	MLWorks_21c0_1999_03_25:1.11
	MLWorks_20c1_1998_08_20:1.11
	MLWorks_20c0_1998_08_04:1.11
	MLWorks_20b2c2_1998_06_19:1.11
	MLWorks_20b2_Windows_1998_06_12:1.11
	MLWorks_20b1c1_1998_05_07:1.11
	MLWorks_20b0_1998_04_07:1.11
	MLWorks_20b0_1998_03_20:1.11
	MLWorks_20m2_1998_02_16:1.11
	MLWorks_20m1_1997_10_23:1.11
	MLWorks_11r1:1.11.1.1.1.1.1
	MLWorks_11c0_1997_09_09:1.11.1.1.1.1
	MLWorks_10r3:1.11.1.1.3
	MLWorks_10r2_551:1.11.1.1.2
	MLWorks_11:1.11.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.11.1.1
	MLWorks_20m0_1997_06_20:1.11
	MLWorks_1_0_r2c2_1997_06_14:1.11.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.11.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.11.1
	MLWorks_BugFix_1997_04_24:1.11
	MLWorks_1_0_r2_Win32_1997_04_11:1.11
	MLWorks_1_0_r2_Unix_1997_04_04:1.11
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.10.5.1.1
	MLWorks_1_0_Win32_1996_12_17:1.10.5
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.10.3.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.10.3.1
	MLWorks_1_0_Irix_1996_11_28:1.10.3.1.1
	MLWorks_1_0_Win32_1996_11_22:1.10.4
	MLWorks_1_0_Unix_1996_11_14:1.10.3
	MLWorks_Open_Beta2_1996_10_11:1.10.2
	MLWorks_License_dev:1.10.1
	MLWorks_1_open_beta_1996_09_13:1.8.1
	MLWorks_Open_Beta_1996_08_22:1.8
	MLWorks_Beta_1996_07_02:1.8
	MLWorks_Beta_1996_06_07:1.8
	MLWorks_Beta_1996_06_06:1.8
	MLWorks_Beta_1996_06_05:1.8
	MLWorks_Beta_1996_06_03:1.8
	MLWorks_Beta_1996_05_31:1.8
	MLWorks_Beta_1996_05_30:1.8
	ML_beta_release_12/08/94:1.6
	ML_beta_release_03/08/94:1.6
	ML_revised_beta_release_25/05/94:1.6
	ML_final_beta_release_02/03/94:1.6
	mlworks-28-01-1994:1.4
	Release:1.4
	mlworks-beta-01-09-1993:1.4;
locks; strict;
comment	@# @;


1.12
date	99.03.23.19.23.02;	author daveb;	state Exp;
branches;
next	1.11;

1.11
date	97.01.06.15.39.23;	author matthew;	state Exp;
branches
	1.11.1.1;
next	1.10;

1.10
date	96.10.05.15.25.22;	author io;	state Exp;
branches
	1.10.1.1
	1.10.2.1
	1.10.3.1
	1.10.4.1
	1.10.5.1;
next	1.9;

1.9
date	96.10.04.18.29.41;	author io;	state Exp;
branches;
next	1.8;

1.8
date	95.08.02.10.38.21;	author daveb;	state Exp;
branches
	1.8.1.1;
next	1.7;

1.7
date	94.08.18.09.46.37;	author daveb;	state Exp;
branches;
next	1.6;

1.6
date	94.02.08.16.24.09;	author daveb;	state Exp;
branches;
next	1.5;

1.5
date	94.02.07.17.16.52;	author daveb;	state Exp;
branches;
next	1.4;

1.4
date	92.08.26.17.11.57;	author davidt;	state Exp;
branches
	1.4.1.1;
next	1.3;

1.3
date	92.08.14.14.06.01;	author davidt;	state Exp;
branches;
next	1.2;

1.2
date	92.08.14.11.50.27;	author davidt;	state Exp;
branches;
next	1.1;

1.1
date	92.08.10.19.32.56;	author davidt;	state Exp;
branches;
next	;

1.4.1.1
date	92.08.26.17.11.57;	author jont;	state Exp;
branches;
next	;

1.8.1.1
date	96.09.13.11.44.38;	author hope;	state Exp;
branches;
next	;

1.10.1.1
date	96.10.07.16.37.55;	author hope;	state Exp;
branches;
next	;

1.10.2.1
date	96.10.17.11.56.51;	author hope;	state Exp;
branches;
next	;

1.10.3.1
date	96.11.14.13.25.12;	author hope;	state Exp;
branches
	1.10.3.1.1.1;
next	;

1.10.3.1.1.1
date	96.11.28.15.36.13;	author hope;	state Exp;
branches;
next	;

1.10.4.1
date	96.11.22.18.42.18;	author hope;	state Exp;
branches;
next	;

1.10.5.1
date	96.12.17.18.21.18;	author hope;	state Exp;
branches
	1.10.5.1.1.1;
next	;

1.10.5.1.1.1
date	97.02.24.12.16.10;	author hope;	state Exp;
branches;
next	;

1.11.1.1
date	97.05.12.11.12.53;	author hope;	state Exp;
branches
	1.11.1.1.1.1
	1.11.1.1.2.1
	1.11.1.1.3.1;
next	;

1.11.1.1.1.1
date	97.07.28.18.54.48;	author daveb;	state Exp;
branches
	1.11.1.1.1.1.1.1;
next	;

1.11.1.1.1.1.1.1
date	97.10.07.12.19.36;	author jkbrook;	state Exp;
branches;
next	;

1.11.1.1.2.1
date	97.09.08.17.47.04;	author daveb;	state Exp;
branches;
next	;

1.11.1.1.3.1
date	97.09.09.14.46.15;	author daveb;	state Exp;
branches;
next	;


desc
@Find locks on all files.
@


1.12
log
@[Bug #190542]
Fixed to work on Windows.
@
text
@#!/bin/sh
# Find locks on all files.
# Copyright (c) 1991 Harlequin Ltd.
#
# locks,v
# Revision 1.6  1994/02/08  16:24:09  daveb
# Corrected a <> to a != in a shell test.
#
# 
# Revision 1.5  1994/02/07  17:16:52  daveb
# Converted to Hope.


script=`basename $0`
usage="USAGE: $script [-b <branch>] [-u <username>] [-a] [-d] [<Compound>]"
test="";
name=""
show=units
all=0
branch="trunk";
while getopts tb:hdau: option
do
  case $option in
    t) test="echo";;
    u) name="$OPTARG";;
    a) all=1;;
    b) branch="$OPTARG";;
    d) show=claims;;
    h|\?|*)
      echo $usage;
      echo "   h for this help"
      echo "   t for the hope expression sent"
      echo "   b for the branch"
      echo "     use \"*\" for all branches"
      echo "     but works intermittently due to \"/\" in branches"
      echo "   a for all claims"
      echo "   d for ???"
      echo "   u for claims held by user"
      exit 1;;
  esac
done
shift `expr $OPTIND - 1`

if [ $# -eq 0 ]; then
  allcompounds=MLW
else
  allcompounds=$1
  shift
  compounds=$*
  for compound in $compounds; do
    allcompounds="$allcompounds -and -com $compound"
  done
fi

if [ "$branch" = "*" ]; then
  for branch in `hope status -format program -show names|egrep "branch"`; do
    test "$branch" != "branch" && locks -b "$branch" -a $*
  done
  exit
elif [ $all = 1 ]; then
  $test hope status -branch $branch -recursive -find-claims '*' -format brief -show claims -not-page -compound $allcompounds
elif [ "$name" != "" ]; then
  $test hope status -branch $branch -recursive -find-claims $name -format brief -show $show -not-page -compound $allcompounds
else
  $test hope status -branch $branch -recursive -my-claims -format brief -show $show -not-page -compound $allcompounds
fi

#  hope status -recursive -com $allcompounds | awk '/Status for compound/ {print $0;} \
#  /claimed/ {print $0}' | egrep "Status for compound|$name"

#  hope status -recursive -com $allcompounds | awk '/Status for compound/ {print $0;} \
#  /claimed/ {print $0}'
@


1.11
log
@Default compound now MLW
@
text
@d61 1
a61 1
  $test hope status -branch $branch -recursive -find-claims '*' -format brief -show claims -not-page -headers "" -compound $allcompounds
d63 1
a63 1
  $test hope status -branch $branch -recursive -find-claims $name -format brief -show $show -not-page -headers "" -compound $allcompounds
d65 1
a65 1
  $test hope status -branch $branch -recursive -my-claims -format brief -show $show -not-page -headers "" -compound $allcompounds
@


1.11.1.1
log
@branched from 1.11
@
text
@@


1.11.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@@


1.11.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@@


1.11.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@@


1.11.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@


1.10
log
@add search on all branches
@
text
@d45 1
a45 1
  allcompounds=MLWsrc
@


1.10.5.1
log
@branched from 1.10
@
text
@@


1.10.5.1.1.1
log
@branched from 1.10.5.1
@
text
@@


1.10.4.1
log
@branched from 1.10
@
text
@@


1.10.3.1
log
@branched from 1.10
@
text
@@


1.10.3.1.1.1
log
@branched from 1.10.3.1
@
text
@@


1.10.2.1
log
@branched from 1.10
@
text
@@


1.10.1.1
log
@branched from 1.10
@
text
@@


1.9
log
@allow examination of claims on a branch
@
text
@d34 2
a35 1
      echo "     \"*\" for all branches but this does not work at the moment"
d56 4
a59 1
  $test hope status                 -recursive -find-claims '*' -format brief -show claims,all-branches -headers "" -compound $allcompounds
@


1.8
log
@Changed this to use builtin Hope features, and a faster Hope command.
@
text
@d15 2
a16 2
usage="USAGE: $script [-u <username>] [-a] [-d] [<Compound>]"

d20 2
a21 1
while getopts dau: option
d24 1
d27 1
d29 10
a38 1
    *) echo "$usage"; exit 1;;
d54 4
a57 3

if [ $all = 1 ]; then
  hope status -recursive -find-claims '*' -format brief -show claims -not-page -headers "" -compound $allcompounds
d59 1
a59 1
  hope status -recursive -find-claims $name -format brief -show $show -not-page -headers "" -compound $allcompounds
d61 1
a61 1
  hope status -recursive -my-claims -format brief -show $show -not-page -headers "" -compound $allcompounds
@


1.8.1.1
log
@branched from 1.8
@
text
@@


1.7
log
@Changed 'Status of compound' to 'Status for compound', to reflect change
in hope.
@
text
@d15 1
a15 1
usage="USAGE: $script [-u <username>] [<Compound>]"
d18 3
a20 1
while getopts u: option
d24 2
d42 5
a46 3
if [ "$name" != "" ]; then
  hope status -recursive -com $allcompounds | awk '/Status for compound/ {print $0;} \
  /claimed/ {print $0}' | egrep "Status for compound|$name"
d48 1
a48 2
  hope status -recursive -com $allcompounds | awk '/Status for compound/ {print $0;} \
  /claimed/ {print $0}'
d51 5
@


1.6
log
@Corrected a <> to a != in a shell test.
@
text
@d5 4
a8 1
# $Log: locks,v $
d39 2
a40 2
  hope status -recursive -com $allcompounds | awk '/Status of compound/ {print $0;} \
  /claimed/ {print $0}' | egrep "Status of compound|$name"
d42 1
a42 1
  hope status -recursive -com $allcompounds | awk '/Status of compound/ {print $0;} \
@


1.5
log
@Converted to Hope.
@
text
@d5 4
a8 1
# $Log$
d10 1
d35 1
a35 1
if [ "$name" -ne "" ]; then
@


1.4
log
@Now checks the /usr/sml/tools directory.
@
text
@d1 1
a1 1
#!/bin/csh
d4 2
d7 27
a33 6
if ($#argv > 1) then
  echo Usage: locks [username]
  exit(1)
endif
if ($#argv == 1) then
  set name = $1\:
d35 4
a38 16
  set name = ""
endif
set nonomatch
foreach d (/usr/sml/tools `cat /usr/sml/tools/dirs`)
  echo Checking locks in directory $d
  pushd $d > /dev/null
  if (-d RCS) then
    foreach f (`ls RCS`)
      set locks = `rlog -h $f | awk '/locks:/,/access list:/ { if (($1 != "locks:") && ($1 != "access")) print $1; }'`
      if ($locks != "" && ($name == "" || $locks == $name)) then
        echo "    $locks $f"
      endif
    end
  endif
  popd > /dev/null
end
@


1.4.1.1
log
@Fork for bug fixing
@
text
@@


1.3
log
@Checks that a RCS directory exists before looking for locks in it.
@
text
@d15 1
a15 1
foreach d (`cat /usr/sml/tools/dirs`)
@


1.2
log
@Added the capability to show the locks for a particular user.
@
text
@d18 8
a25 6
  foreach f (`ls RCS`)
    set locks = `rlog -h $f | awk '/locks:/,/access list:/ { if (($1 != "locks:") && ($1 != "access")) print $1; }'`
    if ($locks != "" && ($name == "" || $locks == $name)) then
      echo "    $locks $f"
    endif
  end
@


1.1
log
@Initial revision
@
text
@d5 2
a6 2
if ($#argv != 0) then
  echo Usage: locks
d9 5
d19 3
a21 5
    rlog -h $f | awk '/locks:/,/access list:/ { if (($1 != "locks:") && ($1 != "access")) print $1; }' >.locks
    if (!(-z .locks)) then
      echo -n "    File $f : "
      cat .locks
      rm .locks
@
