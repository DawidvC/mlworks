head	1.36;
access;
symbols
	MLWorks_21c0_1999_03_25:1.36
	MLWorks_20c1_1998_08_20:1.34
	MLWorks_20c0_1998_08_04:1.33
	MLWorks_20b2c2_1998_06_19:1.31
	MLWorks_20b2_Windows_1998_06_12:1.31
	MLWorks_20b1c1_1998_05_07:1.28
	MLWorks_20b0_1998_04_07:1.28
	MLWorks_20b0_1998_03_20:1.27
	MLWorks_20m2_1998_02_16:1.26
	MLWorks_20m1_1997_10_23:1.24
	MLWorks_11r1:1.14.1.4.1.9.1
	MLWorks_11c0_1997_09_09:1.14.1.4.1.9
	MLWorks_10r3:1.14.1.4.3
	MLWorks_10r2_551:1.14.1.4.2
	MLWorks_11:1.14.1.4.1
	MLWorks_1_0_r2c2_1997_07_28:1.14.1.4
	MLWorks_20m0_1997_06_20:1.18
	MLWorks_1_0_r2c2_1997_06_14:1.14.1.4
	MLWorks_1_0_r2c1_released_1997_05_23:1.14.1.2
	MLWorks_1_0_r2c1_1997_05_12:1.14.1
	MLWorks_BugFix_1997_04_24:1.14
	MLWorks_1_0_r2_Win32_1997_04_11:1.14
	MLWorks_1_0_r2_Unix_1997_04_04:1.14
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.13.1.1.1
	MLWorks_1_0_Win32_1996_12_17:1.13.1
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.8.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.8.1.1
	MLWorks_1_0_Irix_1996_11_28:1.8.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.10.1
	MLWorks_1_0_Unix_1996_11_14:1.8.1
	MLWorks_Open_Beta2_1996_10_11:1.5.3
	MLWorks_License_dev:1.5.2
	MLWorks_1_open_beta_1996_09_13:1.5.1
	MLWorks_Open_Beta_1996_08_22:1.4
	MLWorks_Beta_1996_07_02:1.3
	MLWorks_Beta_1996_06_07:1.1
	MLWorks_Beta_1996_06_06:1.1
	MLWorks_Beta_1996_06_05:1.1
	MLWorks_Beta_1996_06_03:1.1
	MLWorks_Beta_1996_05_31:1.1
	MLWorks_Beta_1996_05_30:1.1;
locks; strict;
comment	@# @;


1.36
date	99.03.09.16.01.33;	author mitchell;	state Exp;
branches;
next	1.35;

1.35
date	98.10.19.14.45.02;	author jont;	state Exp;
branches;
next	1.34;

1.34
date	98.09.01.16.39.43;	author jkbrook;	state Exp;
branches;
next	1.33;

1.33
date	98.07.30.14.12.32;	author jkbrook;	state Exp;
branches;
next	1.32;

1.32
date	98.07.15.16.02.54;	author jkbrook;	state Exp;
branches;
next	1.31;

1.31
date	98.06.12.11.19.23;	author jkbrook;	state Exp;
branches;
next	1.30;

1.30
date	98.06.12.09.14.21;	author jkbrook;	state Exp;
branches;
next	1.29;

1.29
date	98.05.21.15.15.53;	author jkbrook;	state Exp;
branches;
next	1.28;

1.28
date	98.03.31.16.44.50;	author jkbrook;	state Exp;
branches;
next	1.27;

1.27
date	98.03.16.17.01.36;	author jkbrook;	state Exp;
branches;
next	1.26;

1.26
date	98.02.06.14.06.02;	author jkbrook;	state Exp;
branches;
next	1.25;

1.25
date	98.01.12.14.59.13;	author jkbrook;	state Exp;
branches;
next	1.24;

1.24
date	97.10.03.13.24.21;	author jkbrook;	state Exp;
branches;
next	1.23;

1.23
date	97.10.03.10.01.55;	author jkbrook;	state Exp;
branches;
next	1.22;

1.22
date	97.09.30.10.37.29;	author jkbrook;	state Exp;
branches;
next	1.21;

1.21
date	97.09.29.17.09.30;	author jkbrook;	state Exp;
branches;
next	1.20;

1.20
date	97.09.24.14.08.32;	author jkbrook;	state Exp;
branches;
next	1.19;

1.19
date	97.09.24.13.57.00;	author jkbrook;	state Exp;
branches;
next	1.18;

1.18
date	97.06.16.11.07.15;	author daveb;	state Exp;
branches;
next	1.17;

1.17
date	97.06.16.10.54.01;	author daveb;	state Exp;
branches;
next	1.16;

1.16
date	97.06.13.16.48.11;	author jkbrook;	state Exp;
branches;
next	1.15;

1.15
date	97.05.27.16.14.28;	author daveb;	state Exp;
branches;
next	1.14;

1.14
date	97.04.03.16.27.29;	author daveb;	state Exp;
branches
	1.14.1.1;
next	1.13;

1.13
date	96.12.10.14.04.29;	author jont;	state Exp;
branches
	1.13.1.1;
next	1.12;

1.12
date	96.12.04.13.44.24;	author johnh;	state Exp;
branches;
next	1.11;

1.11
date	96.11.28.14.09.28;	author jont;	state Exp;
branches;
next	1.10;

1.10
date	96.11.15.14.52.26;	author johnh;	state Exp;
branches
	1.10.1.1;
next	1.9;

1.9
date	96.11.14.15.52.35;	author jont;	state Exp;
branches;
next	1.8;

1.8
date	96.11.13.11.36.04;	author johnh;	state Exp;
branches
	1.8.1.1;
next	1.7;

1.7
date	96.11.07.16.27.54;	author jont;	state Exp;
branches;
next	1.6;

1.6
date	96.11.01.15.49.25;	author jont;	state Exp;
branches;
next	1.5;

1.5
date	96.09.04.11.42.08;	author jont;	state Exp;
branches
	1.5.1.1
	1.5.2.1
	1.5.3.1;
next	1.4;

1.4
date	96.07.18.15.26.26;	author jont;	state Exp;
branches;
next	1.3;

1.3
date	96.07.02.17.17.32;	author jont;	state Exp;
branches;
next	1.2;

1.2
date	96.06.14.14.27.56;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	96.05.24.10.32.50;	author jont;	state Exp;
branches;
next	;

1.5.1.1
date	96.09.13.11.44.29;	author hope;	state Exp;
branches;
next	;

1.5.2.1
date	96.10.07.16.37.43;	author hope;	state Exp;
branches;
next	;

1.5.3.1
date	96.10.17.11.56.42;	author hope;	state Exp;
branches;
next	;

1.8.1.1
date	96.11.14.13.25.03;	author hope;	state Exp;
branches
	1.8.1.1.1.1;
next	;

1.8.1.1.1.1
date	96.11.28.15.36.03;	author hope;	state Exp;
branches;
next	;

1.10.1.1
date	96.11.22.18.42.09;	author hope;	state Exp;
branches;
next	;

1.13.1.1
date	96.12.17.18.21.09;	author hope;	state Exp;
branches
	1.13.1.1.1.1;
next	;

1.13.1.1.1.1
date	97.02.24.12.15.58;	author hope;	state Exp;
branches;
next	;

1.14.1.1
date	97.05.12.11.12.42;	author hope;	state Exp;
branches;
next	1.14.1.2;

1.14.1.2
date	97.05.19.19.34.46;	author daveb;	state Exp;
branches;
next	1.14.1.3;

1.14.1.3
date	97.06.11.13.51.45;	author daveb;	state Exp;
branches;
next	1.14.1.4;

1.14.1.4
date	97.06.11.15.26.07;	author daveb;	state Exp;
branches
	1.14.1.4.1.1
	1.14.1.4.2.1
	1.14.1.4.3.1;
next	;

1.14.1.4.1.1
date	97.07.28.18.54.39;	author daveb;	state Exp;
branches;
next	1.14.1.4.1.2;

1.14.1.4.1.2
date	97.08.07.13.37.51;	author daveb;	state Exp;
branches;
next	1.14.1.4.1.3;

1.14.1.4.1.3
date	97.08.07.16.17.28;	author daveb;	state Exp;
branches;
next	1.14.1.4.1.4;

1.14.1.4.1.4
date	97.08.12.11.31.55;	author jkbrook;	state Exp;
branches;
next	1.14.1.4.1.5;

1.14.1.4.1.5
date	97.08.15.15.27.54;	author jkbrook;	state Exp;
branches;
next	1.14.1.4.1.6;

1.14.1.4.1.6
date	97.08.15.16.40.04;	author jkbrook;	state Exp;
branches;
next	1.14.1.4.1.7;

1.14.1.4.1.7
date	97.08.18.16.05.24;	author daveb;	state Exp;
branches;
next	1.14.1.4.1.8;

1.14.1.4.1.8
date	97.08.20.10.06.58;	author jkbrook;	state Exp;
branches;
next	1.14.1.4.1.9;

1.14.1.4.1.9
date	97.08.28.13.08.15;	author jkbrook;	state Exp;
branches
	1.14.1.4.1.9.1.1;
next	;

1.14.1.4.1.9.1.1
date	97.10.07.12.19.28;	author jkbrook;	state Exp;
branches;
next	1.14.1.4.1.9.1.2;

1.14.1.4.1.9.1.2
date	97.10.07.16.05.42;	author jkbrook;	state Exp;
branches;
next	1.14.1.4.1.9.1.3;

1.14.1.4.1.9.1.3
date	97.11.13.18.07.32;	author jkbrook;	state Exp;
branches;
next	;

1.14.1.4.2.1
date	97.09.08.17.46.49;	author daveb;	state Exp;
branches;
next	;

1.14.1.4.3.1
date	97.09.09.14.46.01;	author daveb;	state Exp;
branches;
next	1.14.1.4.3.2;

1.14.1.4.3.2
date	97.09.23.09.17.13;	author jkbrook;	state Exp;
branches;
next	1.14.1.4.3.3;

1.14.1.4.3.3
date	97.11.13.15.40.11;	author jkbrook;	state Exp;
branches;
next	;


desc
@new unit
@


1.36
log
@[Bug #190509]
Update version strings to 2.1
@
text
@/*-----------------------------------------------------------------------------
 *
 *  IIIIIII SSSSSS
 *    II    SS                          InstallSHIELD (R)
 *    II    SSSSSS          (c) 1990-1995, Stirling Technologies, Inc.
 *    II        SS                     All Rights Reserved.
 *  IIIIIII SSSSSS
 *
 *
 *
 *
 *    File Name:  SETUP.RUL
 *
 *  Description:  InstallSHIELD SDK Edition Template One script.
 *		  Modified from Emmo's quick hack to demo Plugin Kit Installer.
 *                Target platforms: Win95, WinNT3.5x
\*----------------------------------------------------------------------------*/


// **** DEBUGGING is 0 for 'release' builds, non-zero for testing. ****
#define DEBUGGING 1

// Size of components. Hint: use DU to check this.
#define DISK_SPACE_REQ          12095000

#define APP_NAME                "Harlequin MLWorks"      // Application name
#define PROGRAM_GROUP_NAME      "MLWorks"                // Program group name for WindowsNT
#define APPBASE_PATH            "\\Program Files\\Harlequin\\MLWorks"              // Default place to put it on disc
#define COMPANY_NAME            "Harlequin"
#define PRODUCT_NAME            "MLWorks"
#define PRODUCT_VERSION         "2.1"
#define PRODUCT_KEY             "Main-Windows.exe"       // Main application is uninstall key file.

// No device drivers to register

#define STR_COMPLETE95 "by clicking on the MLWorks icon.\n\n"
#define STR_COMPLETENT "by clicking on the MLWorks icon.\n\n"


declare

// Add this in the declare section :
#define MAX_PATH_LEN  512

#include "sddialog.h"

        // Global variable declarations.
        STRING  svGrp, szMsg, szFileSet, szTitle, szAppPath, szAppSharedDir;
        STRING  szProgram, szTemp, svUninstLogFile, szRegKey, szGrp;
        STRING  svMainDirectory[ _MAX_STRING ];
	STRING  svSystem ; //Points at windows\system[32]
	STRING  svIcon ; // Build pathlist to icon file
	STRING  svTemp ; // Short-lived odds and others.
        STRING  szLicenseDlgTitle, szLicenseDlgMsg, szLicenseDlgQ; 
        STRING  szLicenseFile;
        // Registration dialog stuff
        STRING  szLRMsg, szLRTitle, szLRField1, szLRField2;
        STRING  svLREdit1, svLREdit2;
        BOOL    bSpaceOk, bReshowSetupType;
        NUMBER  nResult, nStatusId, nType;
	NUMBER  nMajor, nMinor, nWin32s ;

	// Stuff for inserting user-input paths in scripts
	STRING svPervPath[600] ;
	STRING svBatchPath[600] ;
	STRING svImConsPath[600] ;
	STRING svImWinPath[600] ;
	STRING svConsolePath[600] ;
	STRING svLine ;
	NUMBER nvFileHandle, nvLineNumber ;

        BOOL    bIncludeInputs, bIncludeOutputs, bIncludeManual;
        BOOL    bWinNT, bWin95 ;

	// Pop-up messages allowed in debug build
	BOOL	bDebug ;

        // DLL call for license validation and storage
        NUMBER nRegResult;
        STRING szDLL, svNRegResult;
        BOOL bFreeEdition;

        // Function declarations.
        prototype SetupScreen();
        prototype CheckRequirements();
        prototype CheckSpaceRequirements( number, number, number, string );
        prototype CreateRegDBEntries();
	prototype CreateMLWorksRegKey(string);
	prototype CreateMLWorksRegValues(string);

        prototype INT validate_license.validate_and_install_license(STRING,STRING);

program

StartHere:
	bDebug = DEBUGGING ;
        bWinNT = FALSE ;
        bWin95 = FALSE ;
        Disable( BACKGROUND );

        // Set up the installation screen.
        SetupScreen();

        // Set installation info., which is required for registry entries.
        InstallationInfo( COMPANY_NAME, PRODUCT_NAME, PRODUCT_VERSION, PRODUCT_KEY );

        // Test target system proper configuration.
        CheckRequirements();
	// Create the defaults *here*. If they loop back, their
	// former choice should be offered to them for editing.
	TARGETDISK ="C:";
        svGrp = PROGRAM_GROUP_NAME;
	if (bWinNT) then
	   svSystem = WINDIR ^ "System32" ;
	else
	   svSystem = WINDIR ^ "System" ;
	endif ;


// Create a Welcome dialog.
WelcomeDlg:
        Disable( BACKBUTTON );
        Welcome( "Welcome", 0 );
        Enable( BACKBUTTON );

        // Ask user to confirm legal agreement

LicenseAgreement:
       szLicenseDlgTitle = "MLWorks License agreement";
       szLicenseDlgMsg = "Please read the following license agreement.  Scroll down to see the rest of the agreement.";
       szLicenseDlgQ = "Do you accept all the terms of the above license agreement?  If you select No, Setup will end.  To install MLWorks, you must accept this agreement.";

       // get license text from distribution and put in temp dir
       VarSave(SRCTARGETDIR);
       TARGETDIR=SUPPORTDIR;
       CompressGet( "data.z", "license.txt", COMP_NORMAL);
       VarRestore(SRCTARGETDIR);

       szLicenseFile = "license.txt";
       SdLicense( szLicenseDlgTitle, szLicenseDlgMsg, szLicenseDlgQ, szLicenseFile );

        // Registration
Registration:

        szLRMsg = "MLWorks Registration.\n\nEnter the license name and code supplied.  If you are installing MLWorks Personal edition you should leave the fields blank.";
        szLRTitle = "MLWorks Registration";
        szLRField1 = "Name";
        szLRField2 = "Code";
	svLREdit1 = "";
	svLREdit2 = "";
        nRegResult = 0;
        bFreeEdition = FALSE;
        
        VarSave(SRCTARGETDIR);
        TARGETDIR=SUPPORTDIR;
        CompressGet( "data.z", "bin\\validate_license.DLL", COMP_NORMAL);
        VarRestore(SRCTARGETDIR);
	
        szDLL = SUPPORTDIR ^ "validate_license.DLL";
        UseDLL(szDLL);

        while ((nRegResult = 0) && !bFreeEdition) 
          nResult = SdShowDlgEdit2 ( szLRTitle, szLRMsg, szLRField1, szLRField2, svLREdit1, svLREdit2 );

//         MessageBox("svLREdit1 "+svLREdit1,INFORMATION);
//         MessageBox("svLREdit2 "+svLREdit2,INFORMATION);

          if (nResult = NEXT) then
            if ((svLREdit1 = "") && (svLREdit2 = "")) then
               bFreeEdition = TRUE;
//             MessageBox("Installing as FREE",INFORMATION);
            else
               nRegResult = validate_and_install_license(svLREdit1,svLREdit2);
//             NumToStr(svNRegResult,nRegResult);
//             MessageBox("Result of DLL is" + svNRegResult,INFORMATION);
            endif;
          endif;

        endwhile;

        UnUseDLL(SUPPORTDIR ^ "validate_license.DLL");

        // Ask user for a destination location for the installation.
GetTargetDirectory:
        svMainDirectory = TARGETDISK ^ APPBASE_PATH;
        szMsg = "";
        nResult = AskDestPath( "Choose Destination Location", szMsg,
                          svMainDirectory, 0 );
	if (nResult = BACK) then
           goto WelcomeDlg;
        endif;

	// Shared dlls should go in the Windows folder, so that only
	// one set is kept, and those are the most recent ones available.
        szAppSharedDir = svSystem ;

        nType = TYPICAL;
FolderSelection:
	szGrp = svGrp;
        // Allow user to modify folder name.
        if ( SelectFolder( "Folder Selection", szGrp, szGrp ) = BACK ) then
           goto GetTargetDirectory;
        endif;

InitialiseRegistry:
	CreateRegDBEntries();

FileTransferSetup:

        // Prepare InstallSHIELD to record deinstallation information.
	// I/S must create the full pathlist:
        nResult = DeinstallStart( svMainDirectory, svUninstLogFile, PRODUCT_NAME + PRODUCT_VERSION, 0 );
	if (nResult < 0) then
		NumToStr(svTemp, nResult) ;
		svTemp = svTemp + " returned from DeInstallStart! This error means that"+
		                  " the uninstaller may not function correctly. The "+
		                  " returned logfile path was " + svUninstLogFile ;
//		MessageBox (svUninstLogFile, WARNING) ;
	endif ;

        RegDBSetItem( REGDB_UNINSTALL_NAME, APP_NAME );

        // Set registry App Paths key information for the main application.
        szAppPath = svMainDirectory ;
        RegDBSetItem( REGDB_APPPATH, szAppPath );
        szProgram = szAppPath ^ PRODUCT_KEY ;
        RegDBSetItem( REGDB_APPPATH_DEFAULT, szProgram );

        // Define the "General" file set.
        szFileSet = "General";
        TARGETDIR = svMainDirectory;

        FileSetBeginDefine( szFileSet );

          SetStatusWindow( -1, "MLWorks files..." );

          // Always copy README & related files, located at
          // the root level in the DATA.Z library file.
          CompressGet( "data.z", "*.*", COMP_NORMAL | INCLUDE_SUBDIR);

	  // Want a local copy of libmlw.dll

	  CompressGet("data.z","bin\\libmlw.dll", COMP_NORMAL);

	  // Copy DLLs into shared dir and register as SharedDLLs

	  TARGETDIR = szAppSharedDir;
	  CompressGet("data.z","bin\\libmlw.dll", COMP_UPDATE_VERSION | SHAREDFILE);

          TARGETDIR = svMainDirectory;

        FileSetEndDefine( szFileSet );

DoFileTransfer:
        // Set up progress indicator and information gauge.
        Enable( STATUSDLG );
        StatusUpdate( ON, 90 );

        // Perform the file set.
        nResult = FileSetPerformEz( szFileSet, 0 );

        switch (nResult)

        case FS_DONE: // Successful completion.

        case FS_CREATEDIR: // Create directory error.
             MessageBox( "Unable to create a directory under " + TARGETDIR + "."+
                         "Please check write access to this directory.", SEVERE );
             abort;

        default: // Group all other errors under default label.
             NumToStr( szTemp, nResult );
             MessageBox( "General file transfer error."+
                          "Please check your target location and try again."+
                          "\n\n Error Number:"+szTemp, SEVERE );

             abort;
        endswitch;

InstallScripts:
	// MessageBox ("original path is " + szAppPath, WARNING) ; 


        // first preserve the values of SRCDIR and TARGETDIR

        VarSave(SRCTARGETDIR);

        // set SRCDIR and TARGETDIR since these are used by CopyFile

	SRCDIR=szAppPath ^ "\\scripts";
	TARGETDIR=szAppPath ^ "\\bin";

	// copy bodies of scripts to destination

	CopyFile("mlbatch.bat.in","mlbatch.bat");
	CopyFile("mlpervasive.bat.in","mlpervasive.bat");
	CopyFile("mlimage-console.bat.in","mlimage-console.bat");
	CopyFile("mlimage-windows.bat.in","mlimage-windows.bat");
	CopyFile("mlconsole.bat.in","mlconsole.bat");

	// restore values of SRCDIR and TARGETDIR

	VarRestore(SRCTARGETDIR);

	// create customised command lines with user's path
	// for mlpervasive.bat:

	svPervPath = ' "' + szAppPath + '\\bin\\main" -load ' +
            ' "' + szAppPath + '\\images\\basis.img" %MYARGS% ';

	// and mlimage-console.bat:

	svImConsPath = ' "' + szAppPath + 
           '\\bin\\main" -MLWpass MLWargs -load %IMAGE% MLWargs %MYARGS%' ;

	// and mlbatch.bat:

	svBatchPath = ' "' + szAppPath + '\\bin\\main-windows" -MLWpass MLWargs -load %1 MLWargs -pervasive-dir "' + szAppPath + '\\pervasive"' ;

	// and mlimage-windows.bat:

	svImWinPath = ' "' + szAppPath + '\\bin\\main-windows" -MLWpass MLWargs -load %1 MLWargs -pervasive-dir "' + szAppPath + '\\pervasive"' ;

	// and mlconsole.bat:

        svConsolePath = ' "' + szAppPath + '\\bin\\main" -MLWpass MLWargs -load "'+ szAppPath + '\\images\\gui.img" MLWargs -tty -pervasive-dir "' + szAppPath + '\\pervasive" %MYARGS%' ;

//	MessageBox ("svPervPath = " + svPervPath, INFORMATION) ;
//	MessageBox ("svBatchPath = " + svBatchPath, INFORMATION) ;
//	MessageBox ("svImWinPath = " + svImWinPath, INFORMATION) ;
//	MessageBox ("svImConsPath = " + svImConsPath, INFORMATION) ;
//	MessageBox ("svConsolePath = " + svConsolePath, INFORMATION) ;

        // Append path info to end of mlpervasive script:
	// open .bat file and append the customised command line

	OpenFileMode(FILE_MODE_APPEND);
	OpenFile(nvFileHandle,szAppPath ^ "\\bin","mlpervasive.bat");
	WriteLine(nvFileHandle,svPervPath);
	CloseFile(nvFileHandle);

        // Append path info to end of mlbatch script:

	OpenFileMode(FILE_MODE_APPEND);
	OpenFile(nvFileHandle,szAppPath ^ "\\bin","mlbatch.bat");
	WriteLine(nvFileHandle,svBatchPath);
	CloseFile(nvFileHandle);

        // Append path info to mlconsole.bat 

	OpenFileMode(FILE_MODE_APPEND);
	OpenFile(nvFileHandle,szAppPath ^ "\\bin","mlconsole.bat");
	WriteLine(nvFileHandle,svConsolePath);
	CloseFile(nvFileHandle);


        // Add path info to mlimage-console.bat 
	// this is different since the info is not appended but inserted

	VarSave(SRCTARGETDIR);

	SRCDIR = szAppPath ^ "\\bin";

	FileGrep("mlimage-console.bat","CMDLINEINFO",svLine,nvLineNumber,RESTART);
	FileDeleteLine("mlimage-console.bat",nvLineNumber,nvLineNumber);
	FileInsertLine("mlimage-console.bat",svImConsPath,nvLineNumber,BEFORE);

        // Add path info to mlimage-windows.bat 

	FileGrep("mlimage-windows.bat","CMDLINEINFO",svLine,nvLineNumber,RESTART);
	FileDeleteLine("mlimage-windows.bat",nvLineNumber,nvLineNumber);
	FileInsertLine("mlimage-windows.bat",svImWinPath,nvLineNumber,BEFORE);


	VarRestore(SRCTARGETDIR);

CreateFolderIcons:
	// Enable the progress meter, with a 95% setting (almost done)
        SetStatusWindow( 95, "Creating Program Group and Icons...." );

        // Create program groups (folders) and icons.
	ProgDefGroupType( PERSONAL );
        if (CreateProgramFolder( szGrp ) < 0) then
	   MessageBox ("Failed to create program folder!", SEVERE);
	endif;
        ShowProgramFolder( szGrp, SW_SHOW );
        LongPathToShortPath( svMainDirectory );
        Delay(1);

        TARGETDIR = svMainDirectory;
	// Use an external icon for the main executable
	svIcon = TARGETDIR ^ "\\bin\\runtime.ico" ;

	svTemp = TARGETDIR ^ "\\bin";
        AddFolderIcon( szGrp, 
                  PRODUCT_NAME + " " + PRODUCT_VERSION,
		  svTemp + "\\main-windows -MLWpass MLWargs -stack 5 -load ..\\images\\gui.img MLWargs -source-path .. -pervasive-dir ..\\pervasive",
                  TARGETDIR + "\\bin",
                  svIcon, 0, "", REPLACE );
        Delay( 1 );

        AddFolderIcon( szGrp, PRODUCT_NAME + " " + PRODUCT_VERSION + " + Basis",
		  svTemp + "\\main-windows -MLWpass MLWargs -stack 5 -load ..\\images\\guib.img MLWargs -source-path .. -pervasive-dir ..\\pervasive",
                  TARGETDIR + "\\bin",
                  svIcon, 0, "", REPLACE );
        Delay( 1 );

	// Add an icon for documentation entry page
        AddFolderIcon( szGrp, PRODUCT_NAME + " " + PRODUCT_VERSION + " Documentation",
		  TARGETDIR ^ "\\documentation\\doc_indx.htm",
                  TARGETDIR + "\\documentation\\",
                  "", 0, "", REPLACE );
        Delay( 1 );

	// Add an icon for the UNinstaller
	svTemp = "unInstall " + PRODUCT_NAME + " " + PRODUCT_VERSION ;
        szProgram = WINDIR ^ "UNINST.EXE";
        LongPathToShortPath( szProgram );

 if (bDebug) then
//   MessageBox (svUninstLogFile, WARNING) ;
 endif ;

        LongPathToShortPath( svUninstLogFile );
 
 if (bDebug) then
//   MessageBox (svUninstLogFile, WARNING) ;
 endif ;

       AddFolderIcon( szGrp, svTemp,
                       szProgram + " -f" + svUninstLogFile,
                       svSystem,
                       "", 0, "", REPLACE );
        Delay( 1 );

	// No devices, so nothing to to register.

        Delay(2);
        Disable( FEEDBACK_FULL );
        Disable( STATUSDLG );

        // Announce setup complete

        SetStatusWindow( 100, "Installation complete." );

        // If shared files could not be installed, then users must restart system.
        if (BATCH_INSTALL = TRUE) then
           szMsg = "Some files could not be installed because they are "+
                   "currently in use by other programs in the system.  "+
                   "To allow for proper operation of the new program you should restart"+
                   "your system at this time.";
           CommitSharedFiles(0);
           RebootDialog( "Restart Windows", szMsg, SYS_BOOTMACHINE );
        else
           szMsg = "Setup is complete.  You may run the installed program ";
           if ( bWinNT ) then
              szMsg = szMsg + STR_COMPLETENT;
           else
              szMsg = szMsg + STR_COMPLETE95;
           endif;

           MessageBeep( 0 );
	   MessageBox( szMsg, INFORMATION );
        endif;

        exit;


/*---------------------------------------------------------------------------*\
 *
 * Function:  SetupScreen
 *
 *  Purpose:  This function will set up the screen look.  This includes
 *            colors, fonts, text to be displayed, etc.
 *
 *
 *    Input:
 *
 *  Returns:
 *
 * Comments:
\*---------------------------------------------------------------------------*/

function SetupScreen()
        begin

          Enable( INDVFILESTATUS );

          SetTitle( APP_NAME + " Installation\n", 28, WHITE );

          SetTitle( "Installing " + APP_NAME, 0, BACKGROUNDCAPTION ); // Caption bar text.

          Enable( BACKGROUND );

        end;


/*---------------------------------------------------------------------------*\
 *
 * Function:  CheckRequirements
 *
 *  Purpose:  This function will check all minimum requirements for the
 *            application being installed.  If any fail, then the user
 *            is informed and the installation is terminated.
 *
 *
 *    Input:
 *
 *  Returns:
 *
 * Comments:
\*---------------------------------------------------------------------------*/

function CheckRequirements()
          number  nvDx, nvDy;
          number nvResult;
          STRING szResult;
	  STRING szMsg[128] ;
        begin

          // Determine if target system uses NT or Windows 95.
          GetSystemInfo( WINMAJOR, nvResult, szResult );
	  nMajor = nvResult ;

if (bDebug) then
 // We'll report OS version in a moment.
 NumToStr(szResult, nMajor) ;
 szMsg = "OS Level " + szResult + ":" ;
endif ;

          GetSystemInfo( WINMINOR, nvResult, szResult );
	  nMinor = nvResult ;
 
 if (bDebug) then
  NumToStr(szResult, nMinor) ;
  szMsg = szMsg + szResult ;
 endif ;

          bWinNT = TRUE;
	  bWin95 = FALSE ;

	  // I don't have a win16 version, so this can only run with WinNT or Win95 -  for now
          if (nMajor = 4) then
             if (nMinor = 0) then
                bWinNT = FALSE; // Running Windows 95.
	        bWin95 = TRUE ;
             endif ;
          endif;

 if (bDebug) then
   if (bWinNT) then
      szMsg = szMsg + " NT assumed" ;
   else
      szMsg = szMsg + " Win95 assumed" ;
   endif ;
// MessageBox (szMsg, WARNING) ;
 endif ;

          // Check screen resolution.
          GetExtents( nvDx, nvDy );
          if (nvDy < 480) then
             MessageBox( "This program requires VGA or better resolution.", WARNING );
             exit;
          endif;

        end;


/*---------------------------------------------------------------------------*\
 *
 * Function:  CheckSpaceRequirements
 *
 *  Purpose:  This function will check space requirements based on the
 *            elements being installed.
 *
 *    Input:
 *
 *  Returns:
 *
 * Comments:
\*---------------------------------------------------------------------------*/

function CheckSpaceRequirements( bIncludeInputs,
                                 bIncludeOutputs,
                                 bIncludeManual,
                                 szDir )
          number  nSizeRequired;
        begin

          nSizeRequired = 0;

          // Determine total size.
          nSizeRequired = nSizeRequired + DISK_SPACE_REQ;

          // Check space on target drive.
          bSpaceOk = TRUE;
          if (GetDiskSpace( szDir ) < nSizeRequired) then
             szMsg = "There is not enough space available on the disk\n" +
                     "'" + svMainDirectory + "' \n" +
                     "Please free up some space or change the target location\n" +
                     "to a different disk";
             MessageBeep(0);
             MessageBox( szMsg, WARNING );
             bSpaceOk = FALSE;
          endif;

          return bSpaceOk;
        end;


/*---------------------------------------------------------------------------*\
 *
 * Function:  CreateRegDBEntries
 *
 *  Purpose:  This function will create the MLWorks entries in the registry.
 *
 *    Input:  Nothing, but relies on the global svMainDirectory being set.
 *
 *  Returns:
 *
 * Comments:  Only warnings are given if the registry settings are not 
 *            created properly.
 * 
\*---------------------------------------------------------------------------*/


function CreateRegDBEntries()
   begin
	RegDBSetDefaultRoot(HKEY_CURRENT_USER);
	CreateMLWorksRegKey("");
   end;

function CreateMLWorksRegKey(RegRoot)
   STRING regKey, regValue, regClass;
   BOOL bKeyCreated;
   begin
	regKey = RegRoot ^ "\\Software\\Harlequin";
	regClass = "";

	bKeyCreated = TRUE;
	if (RegDBKeyExist(regKey) < 0) then
	   if (RegDBCreateKeyEx(regKey, regClass) < 0) then
	      szMsg = "Failed to create " + RegRoot ^ "\\Software\\Harlequin";
	      MessageBeep(0);
	      MessageBox(szMsg, WARNING);
	      bKeyCreated = FALSE;
	   endif;
	endif;
	if (bKeyCreated) then
	   regKey = RegRoot + "\\Software\\Harlequin\\MLWorks";
	   if (RegDBKeyExist(regKey) < 0) then
	      if (RegDBCreateKeyEx(regKey, regClass) < 0) then
		 szMsg = "Failed to create " + RegRoot ^  
		         "\\Software\\Harlequin\\MLWorks";
		 MessageBeep(0);
		 MessageBox(szMsg, WARNING);
		 bKeyCreated = FALSE;
	      endif;
	   endif;  
	   if (bKeyCreated) then
	      CreateMLWorksRegValues(regKey);
	   endif; 
	endif;

   end;

function CreateMLWorksRegValues(rKey)
   STRING regClass;
   begin
	Disable(LOGGING);
	RegDBSetKeyValueEx(rKey, "Source Path", REGDB_STRING, 
				svMainDirectory, -1);
	RegDBSetKeyValueEx(rKey, "Pervasive Path", REGDB_STRING, 
				svMainDirectory ^ "pervasive", -1);
	RegDBSetKeyValueEx(rKey, "Object Path", REGDB_STRING, "", -1);
	RegDBSetKeyValueEx(rKey, "Startup Directory", REGDB_STRING, 
				svMainDirectory, -1);
	Enable(LOGGING);
   end;

#include "sdlic.rul"
#include "sdint.rul"
#include "sdsedt2.rul"
@


1.35
log
@[Bug #70203]
Modify for new argument passing
@
text
@d31 1
a31 1
#define PRODUCT_VERSION         "2.0"
@


1.34
log
@[Bug #70173]
License validator should be extracted from bin subdirectory not
toplevel of data.z
@
text
@d314 1
a314 1
           '\\bin\\main" -load %IMAGE% -pass aaaa %MYARGS% aaaa' ;
d318 1
a318 1
	svBatchPath = ' "' + szAppPath + '\\bin\\main-windows" -load %1 -pass aaaa -pervasive-dir "' + szAppPath + '\\pervasive" aaaa' ;
d322 1
a322 1
	svImWinPath = ' "' + szAppPath + '\\bin\\main-windows" -load %1 -pass aaaa -pervasive-dir "' + szAppPath + '\\pervasive" aaaa' ;
d326 1
a326 1
        svConsolePath = ' "' + szAppPath + '\\bin\\main" -load "'+ szAppPath + '\\images\\gui.img" -pass aaaa -tty -pervasive-dir "' + szAppPath + '\\pervasive" %MYARGS% aaaa' ;
d397 1
a397 1
		  svTemp + "\\main-windows -stack 5 -load ..\\images\\gui.img -pass a -source-path .. -pervasive-dir ..\\pervasive a",
d403 1
a403 1
		  svTemp + "\\main-windows -stack 5 -load ..\\images\\guib.img -pass a -source-path .. -pervasive-dir ..\\pervasive a",
@


1.33
log
@[Bug #30456]
Update version to 2.0c0
@
text
@d156 1
a156 1
        CompressGet( "data.z", "validate_license.DLL", COMP_NORMAL);
@


1.32
log
@[Bug #30435]
Prompt for license-codes during installation and validate
using a DLL
@
text
@d31 1
a31 1
#define PRODUCT_VERSION         "2.0b2"
@


1.31
log
@[Bug #30415]
Update version info for 2.0b2
@
text
@d56 3
d78 5
d91 2
d142 41
d683 1
@


1.30
log
@[Bug #30411]
Show legal information during installation
@
text
@d31 1
a31 1
#define PRODUCT_VERSION         "2.0b0"
@


1.29
log
@[Bug #30414]
Windows executables should always be able to find libmlw.dll
so install it in \WINNT\SYSTEM32 as a shared file
@
text
@d1 1
a1 1
/*----------------------------------------------------------------------------*\
a32 1
#define PRODUCT_EDITION         "Beta"
d38 4
d45 1
a45 1
declare
d54 2
d116 16
d438 1
a438 2
          SetTitle( APP_NAME + " Installation\n" +
                    PRODUCT_EDITION + " Edition", 28, WHITE );
d630 2
@


1.28
log
@[Bug #50069]
Removed space in image path for mlconsole.bat
@
text
@d169 11
a382 1

@


1.27
log
@[Bug #30368]
Update version info for 2.0b0
@
text
@d243 1
a243 1
        svConsolePath = ' "' + szAppPath + '\\bin\\main" -load "'+ szAppPath + ' \\images\\gui.img" -pass aaaa -tty -pervasive-dir "' + szAppPath + '\\pervasive" %MYARGS% aaaa' ;
@


1.26
log
@[Bug #30216]
Creating -tty script for Windows
@
text
@d31 1
a31 1
#define PRODUCT_VERSION         "2.0m2"
d33 1
a33 1
#define PRODUCT_EDITION         "Personal"
@


1.25
log
@[Bug #30315]
Updating version strings and copyright info for 2.0m2
@
text
@d60 1
d216 1
d241 3
d249 1
d266 8
d290 1
@


1.24
log
@[Bug #30272]
Updating version info for 2.0m1
@
text
@d31 1
a31 1
#define PRODUCT_VERSION         "2.0m1"
@


1.23
log
@[Bug #20091]
Merging from MLWorks_11:
Installation should be in canonical location -- replace use of
Sed DLL with InstallShield commands in order to deal with the fact that
the canonical path contains spaces.
@
text
@d31 1
a31 1
#define PRODUCT_VERSION         "2.0m0"
d33 1
a33 1
#define PRODUCT_EDITION         "Student"
@


1.22
log
@[Bug #30254]
HTML documentation now has a single top-level index file
@
text
@d28 1
a28 1
#define APPBASE_PATH            "\\MLWorks"              // Default place to put it on disc
a50 1
	STRING  svResult; // For the call to the sed DLL
d55 7
a61 4
	// Stuff for protecting backslash in paths
	STRING svProtected[MAX_PATH_LEN] ;
	STRING svSedArg[600] ;
	NUMBER nvSize ;
a119 4
	if (svMainDirectory % " ") then
	  MessageBox("Spaces not allowed in installation directory", WARNING);
	  goto GetTargetDirectory;
	endif;
d197 35
a231 1
//	MessageBox( "About to do script modification\n", INFORMATION );
d233 39
a271 48
	svTemp = szAppPath ^ "MLextra.dll";
	nResult = CallDLLFx (svTemp, "GetDLLVersion", nResult,
svResult) ;
//	NumToStr(svResult, nResult) ;
//	svResult = "DLL version : " + svResult;
//	MessageBox (svResult, WARNING) ;

	// We need to add in protect characters so that sed
	// doesn't try to treat DOS path separators as Escape
	// sequences. This is feasible, but messy in IS, so
	// we use a C function in our DLL.
	// svTemp holds the DLL's name. This needs a full pathlist
	//        unless it is in the Windows directory. Safest to
	//        be explicit: we can then be sure we're using the
	//        right one!
	// protectPath is the function we want to call.
	//        Currently, it will NOT allow more than 2 consecutive
	//        backslashes, as it is intended for PATH protection.
	//        This allows sub-paths to be added to an already
	//        protected path, and the function re-called with the
	//        correct results being returned.
	// nvSize is the allocated size of svProtected (NOT the length
	//        of its contents). The function uses this to avoid
	//        causing an access violation if the buffer is not
	//        large enough to hold the expanded path.
	//        On return, nvSize contains the new length of the
	//        path, or -1 if there was an error.
	// svProtected  On entry, this contains the text of the path to 
	//        be protected. On exit, it contains the protected path.  
	svProtected = svMainDirectory;
//	MessageBox ("original path is " + svProtected, WARNING) ; 
	nvSize = 512 ;
	nResult = CallDLLFx (svTemp, "protectPath", nvSize, svProtected) ;

//	NumToStr(svResult, nResult) ;
//	svResult = "DLL exit code " + svResult;
//	MessageBox (svResult, WARNING) ;
//	NumToStr(svResult, nvSize) ;
//	svResult = "New path length is " + svResult;
//	MessageBox (svResult, WARNING) ;
//	MessageBox ("New path is : " + svProtected, WARNING) ;
 	if (nResult < 0) then
	   // What? We can only clean-up by calling abort
	   // Pathlength should have been checked in FolderSelection,
	   // if it was less than 128, then we've broken it somewhere.
	   MessageBox ("Unknown error modifying PATH. Aborting!", SEVERE) ;
	   abort ; 
	endif ;
d273 3
a275 6
 	if (nvSize < 1) then
	   // What? Pathlength should have been checked in FolderSelection,
	   // it had to be at least 2 bytes to be valid (.\)!
	   MessageBox ("Unknown error modifying PATH. Aborting!", SEVERE) ;
	   abort ; 
	endif ;
d277 1
a277 22
	svSedArg = " -e s/INSTALLDIR/" + svProtected ;
//	MessageBox ("svProtected = " + svProtected, INFORMATION);
//	MessageBox ("svSedArg = " + svSedArg, INFORMATION);

	// catenate file list to svSedArg, and call Sed

	svResult = "-o " + szAppPath + "\\bin\\mlbatch.bat " + svSedArg + "/g;s/DRIVE//g " + szAppPath + "\\scripts\\mlbatch.bat.in";
	nResult = CallDLLFx(svTemp, "Sed", nResult, svResult);
//	NumToStr( szTemp, nResult );
//	MessageBox("nResult for mlbatch.bat = " ^ szTemp, INFORMATION);
	svResult = "-o " + szAppPath + "\\bin\\mlpervasive.bat " + svSedArg + "/g;s/DRIVE//g " + szAppPath ^ "\\scripts\\mlpervasive.bat.in";
	nResult = CallDLLFx(svTemp, "Sed", nResult, svResult);
//	NumToStr( szTemp, nResult );
//	MessageBox("nResult for mlpervasive.bat = " ^ szTemp, INFORMATION);
	svResult = "-o " + szAppPath + "\\bin\\mlimage-console.bat " + svSedArg + "/g;s/DRIVE//g " + szAppPath ^ "\\scripts\\mlimage-console.bat.in";
	nResult = CallDLLFx(svTemp, "Sed", nResult, svResult);
//	NumToStr( szTemp, nResult );
//	MessageBox("nResult for mlimage-console.bat = " ^ szTemp, INFORMATION);
	svResult = "-o " + szAppPath + "\\bin\\mlimage-windows.bat " + svSedArg + "/g;s/DRIVE//g " + szAppPath ^ "\\scripts\\mlimage-windows.bat.in";
	nResult = CallDLLFx(svTemp, "Sed", nResult, svResult);
//	NumToStr( szTemp, nResult );
//	MessageBox("nResult for mlimage-windows.bat = " ^ szTemp, INFORMATION);
d297 2
a298 1
        AddFolderIcon( szGrp, PRODUCT_NAME + " " + PRODUCT_VERSION,
@


1.21
log
@[Bug #30256]
Documentation shortcuts should refer to index.htm
@
text
@d310 4
a313 27
        AddFolderIcon( szGrp, PRODUCT_NAME + " " + PRODUCT_VERSION + " Reference",
		  TARGETDIR ^ "\\documentation\\reference\\html\\index.htm",
                  TARGETDIR + "\\documentation\\reference\\html",
                  "", 0, "", REPLACE );
        Delay( 1 );

        AddFolderIcon( szGrp, PRODUCT_NAME + " " + PRODUCT_VERSION + " Guide",
		  TARGETDIR ^ "\\documentation\\guide\\html\\index.htm",
                  TARGETDIR + "\\documentation\\guide\\html",
                  "", 0, "", REPLACE );
        Delay( 1 );

        // Add link to release notes

        AddFolderIcon( szGrp, PRODUCT_NAME + " " + PRODUCT_VERSION +
                  " Release Notes",
                  TARGETDIR ^ "\\documentation\\release-notes\\html\\index.htm",
                  TARGETDIR + "\\documentation\\release-notes\\html",
                  "", 0, "", REPLACE );
        Delay( 1 );

        // Add link to installation notes

        AddFolderIcon( szGrp, PRODUCT_NAME + " " + PRODUCT_VERSION +
                  " Installation Notes",
                  TARGETDIR ^ "\\documentation\\installation-notes\\html\\index.htm",
                  TARGETDIR + "\\documentation\\installation-notes\\html",
@


1.20
log
@[Bug #20094]
Merging from MLWorks_11:
Installer should create links to installation and release notes
@
text
@d311 1
a311 1
		  TARGETDIR ^ "\\documentation\\reference\\html\\mlref_1.htm",
d317 1
a317 1
		  TARGETDIR ^ "\\documentation\\guide\\html\\mlugw_1.htm",
d326 1
a326 1
                  TARGETDIR ^ "\\documentation\\release-notes\\html\\relnot_1.htm",
d335 1
a335 1
                  TARGETDIR ^ "\\documentation\\installation-notes\\html\\winstl_1.htm",
@


1.19
log
@[Bug #20085]
Merging from MLWorks_11:
Adding edition info to installer
@
text
@d322 18
@


1.18
log
@[Bug #30169]
Updated version string for 2.0m0.
@
text
@d33 1
d397 2
a398 1
          SetTitle( APP_NAME + " Installation", 28, WHITE );
@


1.17
log
@[Bug #30171]
Added the version to the icon names.
Also removed duplication among the #defines.
@
text
@d31 1
a31 1
#define PRODUCT_VERSION         "1.0r2"
@


1.16
log
@[Bug #30135]
Merging changes from 1.0r2c2 into 2.0m0
@
text
@d28 1
a28 1
#define APPBASE_PATH            "\\MLWorks" // Default place to put it on disc
d32 1
a32 2
#define UNINSTALL_KEY           "MLWorks1.0r2"
#define PRODUCT_KEY             "Main-Windows.exe"  // Main application is uninstall key file.
d140 1
a140 1
        nResult = DeinstallStart( svMainDirectory, svUninstLogFile, UNINSTALL_KEY, 0 );
d297 1
a297 1
        AddFolderIcon( szGrp, "MLWorks",
d303 1
a303 1
        AddFolderIcon( szGrp, "MLWorks + Basis",
d309 1
a309 1
        AddFolderIcon( szGrp, "MLWorks Reference",
d315 1
a315 1
        AddFolderIcon( szGrp, "MLWorks Guide",
d322 1
a322 1
	svTemp = "unInstall " + UNINSTALL_KEY ;
@


1.15
log
@[Bug #20030]
Added icons for documentation.
@
text
@d580 1
a580 1
				svMainDirectory ^ "src", -1);
@


1.14
log
@Updated PRODUCT_VERSION and UNINSTALL_KEY
Added call to ProgDefGroupType, so that NT creates a Personal program folder
instead of a Common one.  This means that the installer doesn't need
administrator privileges.
@
text
@d298 1
a298 1
        AddFolderIcon( szGrp, "mlworks",
d304 1
a304 1
        AddFolderIcon( szGrp, "mlworks-basis",
d308 12
@


1.14.1.1
log
@branched from 1.14
@
text
@@


1.14.1.2
log
@[Bug #20030]
Added Program Folder Icon for the documentation.
@
text
@d298 1
a298 1
        AddFolderIcon( szGrp, "MLWorks",
d304 1
a304 1
        AddFolderIcon( szGrp, "MLWorks + Basis",
a307 12
        Delay( 1 );

        AddFolderIcon( szGrp, "MLWorks Reference",
		  TARGETDIR ^ "\\documentation\\reference\\html\\mlref_1.htm",
                  TARGETDIR + "\\documentation\\reference\\html",
                  "", 0, "", REPLACE );
        Delay( 1 );

        AddFolderIcon( szGrp, "MLWorks Guide",
		  TARGETDIR ^ "\\documentation\\guide\\html\\mlugw_1.htm",
                  TARGETDIR + "\\documentation\\guide\\html",
                  "", 0, "", REPLACE );
@


1.14.1.3
log
@[Bug #30171]
Added the version to the icon names.
Also removed duplication among the #defines.
@
text
@d28 1
a28 1
#define APPBASE_PATH            "\\MLWorks"              // Default place to put it on disc
d32 2
a33 1
#define PRODUCT_KEY             "Main-Windows.exe"       // Main application is uninstall key file.
d141 1
a141 1
        nResult = DeinstallStart( svMainDirectory, svUninstLogFile, PRODUCT_NAME + PRODUCT_VERSION, 0 );
d298 1
a298 1
        AddFolderIcon( szGrp, PRODUCT_NAME + " " + PRODUCT_VERSION,
d304 1
a304 1
        AddFolderIcon( szGrp, PRODUCT_NAME + " " + PRODUCT_VERSION + " + Basis",
d310 1
a310 1
        AddFolderIcon( szGrp, PRODUCT_NAME + " " + PRODUCT_VERSION + " Reference",
d316 1
a316 1
        AddFolderIcon( szGrp, PRODUCT_NAME + " " + PRODUCT_VERSION + " Guide",
d323 1
a323 1
	svTemp = "unInstall " + PRODUCT_NAME + " " + PRODUCT_VERSION ;
@


1.14.1.4
log
@[Bug #30135]
Corrected source path.
@
text
@d579 1
a579 1
				svMainDirectory, -1);
@


1.14.1.4.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@@


1.14.1.4.3.2
log
@[Bug #30271]
Updating version strings for 1.0r3
@
text
@d31 1
a31 1
#define PRODUCT_VERSION         "1.0r3"
@


1.14.1.4.3.3
log
@[Bug #30271]
Changing version strings from 1.0r3 to 1.0r2
@
text
@d31 1
a31 1
#define PRODUCT_VERSION         "1.0r2"
@


1.14.1.4.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@@


1.14.1.4.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@@


1.14.1.4.1.2
log
@[Bug #30191]
Remove mlimage-console and mlimage-windows from Student Edition.
@
text
@d270 8
@


1.14.1.4.1.3
log
@[Bug #30198]
Removed mlbatch.bat from the Student Edition.
@
text
@d262 4
d290 6
@


1.14.1.4.1.4
log
@[Bug #20085]
Adding edition info to installer
@
text
@a32 1
#define PRODUCT_EDITION         "Student"
d378 1
a378 2
          SetTitle( APP_NAME + " Installation\n" +
                    PRODUCT_EDITION + " Edition", 28, WHITE );
@


1.14.1.4.1.5
log
@[Bug #30196]
Updating version info for student edition
@
text
@d31 1
a31 1
#define PRODUCT_VERSION         "1.1"
d286 1
a286 2
        AddFolderIcon( szGrp, 
                  PRODUCT_NAME + " " + PRODUCT_VERSION,
d292 1
a292 2
        AddFolderIcon( szGrp, 
                  PRODUCT_NAME + " " + PRODUCT_VERSION + " Reference",
d298 1
a298 2
        AddFolderIcon( szGrp, 
                  PRODUCT_NAME + " " + PRODUCT_VERSION + " Guide",
d305 1
a305 1
	svTemp = "unInstall " + PRODUCT_NAME + " " + PRODUCT_VERSION;
@


1.14.1.4.1.6
log
@[Bug #20094]
Adding links to release and installation notes
@
text
@a306 18
        // Add link to release notes

        AddFolderIcon( szGrp, PRODUCT_NAME + " " + PRODUCT_VERSION +
                  " Release Notes",
                  TARGETDIR ^ "\\documentation\\release-notes\\html\\relnot_1.htm",
                  TARGETDIR + "\\documentation\\release-notes\\html",
                  "", 0, "", REPLACE );
        Delay( 1 );

        // Add link to installation notes

        AddFolderIcon( szGrp, PRODUCT_NAME + " " + PRODUCT_VERSION +
                  " Installation Notes",
                  TARGETDIR ^ "\\documentation\\installation-notes\\html\\winstl_1.htm",
                  TARGETDIR + "\\documentation\\installation-notes\\html",
                  "", 0, "", REPLACE );
        Delay( 1 );

@


1.14.1.4.1.7
log
@[Bug #30198]
Undo part of last change: makefile now renames guib.img to gui.img.
@
text
@d286 3
a288 2
        AddFolderIcon( szGrp, PRODUCT_NAME + " " + PRODUCT_VERSION,
		  svTemp + "\\main-windows -stack 5 -load ..\\images\\gui.img -pass a -source-path .. -pervasive-dir ..\\pervasive a",
@


1.14.1.4.1.8
log
@[Bug #20091]
Changed default installation directory to
c:\Program Files\Harlequin\MLWorks  Replaced calls to Sed DLL
with InstallShield code.
@
text
@d28 1
a28 1
#define APPBASE_PATH            "\\Program Files\\Harlequin\\MLWorks"              // Default place to put it on disc
d51 1
d56 4
a59 3
	// Stuff for inserting user-input paths in scripts
	STRING svCustomPath[600] ;
	NUMBER nvFileHandle ;
d118 4
d199 1
a199 1
//	MessageBox ("original path is " + szAppPath, WARNING) ; 
d201 48
a248 1
        // Append path info to end of mlpervasive script:
d250 6
a255 25
        // first preserve the values of SRCDIR and TARGETDIR

        VarSave(SRCTARGETDIR);

        // set SRCDIR and TARGETDIR since these are used by CopyFile

	SRCDIR=szAppPath ^ "\\scripts";
	TARGETDIR=szAppPath ^ "\\bin";

	// copy body of script to destination

	CopyFile("mlpervasive.bat.in","mlpervasive.bat");

	// restore values of SRCDIR and TARGETDIR

	VarRestore(SRCTARGETDIR);

	// create customised command line with user's path

	svCustomPath = ' "' + szAppPath + '\\bin\\main" -load ' +
            ' "' + szAppPath + '\\images\\basis.img" %MYARGS% ';
 	
//	MessageBox ("svCustomPath = " + svCustomPath, INFORMATION) ;

	// open .bat file and append the customised command line
d257 10
a266 4
	OpenFileMode(FILE_MODE_APPEND);
	OpenFile(nvFileHandle,szAppPath ^ "\\bin","mlpervasive.bat");
	WriteLine(nvFileHandle,svCustomPath);
	CloseFile(nvFileHandle);
d286 1
a286 2
        AddFolderIcon( szGrp, 
                  PRODUCT_NAME + " " + PRODUCT_VERSION,
@


1.14.1.4.1.9
log
@[Bug #30191]
mlimage-console.bat needs to be in 1.1 since users can still
create images by saving a session
@
text
@d56 2
a57 4
	STRING svPervPath[600] ;
	STRING svImConsPath[600] ;
	STRING svLine ;
	NUMBER nvFileHandle, nvLineNumber ;
d193 1
a193 1
	// MessageBox ("original path is " + szAppPath, WARNING) ; 
d195 1
d206 1
a206 1
	// copy bodies of scripts to destination
a208 1
	CopyFile("mlimage-console.bat.in","mlimage-console.bat");
d214 1
a214 2
	// create customised command lines with user's path
	// for mlpervasive.bat:
d216 1
a216 1
	svPervPath = ' "' + szAppPath + '\\bin\\main" -load ' +
d218 2
a220 9
	// and mlimage-console.bat:

	svImConsPath = ' "' + szAppPath + 
           '\\bin\\main" -load %IMAGE% -pass aaaa %MYARGS% aaaa' ;

//	MessageBox ("svPervPath = " + svPervPath, INFORMATION) ;
//	MessageBox ("svImConsPath = " + svImConsPath, INFORMATION) ;

        // Append path info to end of mlpervasive script:
d225 1
a225 1
	WriteLine(nvFileHandle,svPervPath);
a226 13

        // Add path info to mlimage-console.bat 
	// this is different since the info is not appended but inserted

	VarSave(SRCTARGETDIR);

	SRCDIR = szAppPath ^ "\\bin";

	FileGrep("mlimage-console.bat","CMDLINEINFO",svLine,nvLineNumber,RESTART);
	FileDeleteLine("mlimage-console.bat",nvLineNumber,nvLineNumber);
	FileInsertLine("mlimage-console.bat",svImConsPath,nvLineNumber,BEFORE);

	VarRestore(SRCTARGETDIR);
@


1.14.1.4.1.9.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@


1.14.1.4.1.9.1.2
log
@[Bug #30277]
Update version info for 1.1r1 (Student Linux version)
@
text
@d31 1
a31 1
#define PRODUCT_VERSION         "1.1r1"
@


1.14.1.4.1.9.1.3
log
@[Bug #30277]
Changing version strings from 1.1r1 to 1.1
@
text
@d31 1
a31 1
#define PRODUCT_VERSION         "1.1"
@


1.13
log
@[Bug #0]
Remove help icon
@
text
@d31 2
a32 2
#define PRODUCT_VERSION         "1.0"
#define UNINSTALL_KEY           "MLWorksV1"
d285 4
a288 1
        CreateProgramFolder( szGrp );
@


1.13.1.1
log
@branched from 1.13
@
text
@@


1.13.1.1.1.1
log
@branched from 1.13.1.1
@
text
@@


1.12
log
@Removed the installation of the registry settings in HKEY_USERS.
@
text
@a34 5
// For a text file, use (e.g.) Notepad.exe as the app.
#define README_FILE             "bin\\runtime.hlp"
#define README_APP		"WinHlp32.exe "
#define HELP_TITLE		"MLWorks Help"

a324 7
                       "", 0, "", REPLACE );
        Delay( 1 );

	// Add an icon for the help file
        AddFolderIcon( szGrp, HELP_TITLE,
                       README_APP + TARGETDIR ^ README_FILE,
                       WINDIR,
@


1.11
log
@[Bug #1806]
Change svProtected to use the contents of svMainDirectory
@
text
@a535 2
	RegDBSetDefaultRoot(HKEY_USERS);
	CreateMLWorksRegKey("\\.DEFAULT");
@


1.10
log
@[Bug #1787]
Put a // in between names of keys in error messages.
@
text
@d235 1
a235 1
	svProtected = APPBASE_PATH;
d268 1
a268 1
	svResult = "-o " + szAppPath + "\\bin\\mlbatch.bat " + svSedArg + "/g;s/DRIVE/" + TARGETDISK + "/g " + szAppPath + "\\scripts\\mlbatch.bat.in";
d272 1
a272 1
	svResult = "-o " + szAppPath + "\\bin\\mlpervasive.bat " + svSedArg + "/g;s/DRIVE/" + TARGETDISK + "/g " + szAppPath ^ "\\scripts\\mlpervasive.bat.in";
d276 1
a276 1
	svResult = "-o " + szAppPath + "\\bin\\mlimage-console.bat " + svSedArg + "/g;s/DRIVE/" + TARGETDISK + "/g " + szAppPath ^ "\\scripts\\mlimage-console.bat.in";
d280 1
a280 1
	svResult = "-o " + szAppPath + "\\bin\\mlimage-windows.bat " + svSedArg + "/g;s/DRIVE/" + TARGETDISK + "/g " + szAppPath ^ "\\scripts\\mlimage-windows.bat.in";
d290 2
a291 2
        CreateProgramFolder( svGrp );
        ShowProgramFolder( svGrp, SW_SHOW );
d300 1
a300 1
        AddFolderIcon( svGrp, "mlworks",
d306 1
a306 1
        AddFolderIcon( svGrp, "mlworks-basis",
d327 1
a327 1
       AddFolderIcon( svGrp, svTemp,
d334 1
a334 1
        AddFolderIcon( svGrp, HELP_TITLE,
@


1.10.1.1
log
@branched from 1.10
@
text
@@


1.9
log
@[bug 1771]
Remove setting of User Name from registry
@
text
@d544 1
a544 1
	regKey = RegRoot + "\\Software\\Harlequin";
d550 1
a550 1
	      szMsg = "Failed to create " + RegRoot + "\Software\Harlequin";
d560 2
a561 2
		 szMsg = "Failed to create " + RegRoot +  
		         "\Software\Harlequin\MLWorks";
@


1.8
log
@Added registry initialisation.
Made minor changes to do with final release.
@
text
@a582 1
	RegDBSetKeyValueEx(rKey, "User Name", REGDB_STRING, "", -1);
@


1.8.1.1
log
@branched from 1.8
@
text
@@


1.8.1.1.1.1
log
@branched from 1.8.1.1
@
text
@@


1.7
log
@Modify to deal with two new image.bat.in files
@
text
@d31 1
a31 1
#define PRODUCT_VERSION         "1.0 (beta)"
d77 2
d139 3
d514 75
@


1.6
log
@[bug 1714]
Prevent installation into directories with names containing spaces
@
text
@d204 3
a206 3
        NumToStr(svResult, nResult) ;
        svResult = "DLL version : " + svResult;
//      MessageBox (svResult, WARNING) ;
d230 2
a231 2
	svProtected = svMainDirectory ^ "bin";
//MessageBox ("original path is " + svProtected, WARNING) ; 
d235 7
a241 7
//NumToStr(svResult, nResult) ;
//svResult = "DLL exit code " + svResult;
//MessageBox (svResult, WARNING) ;
//NumToStr(svResult, nvSize) ;
//svResult = "New path length is " + svResult;
//MessageBox (svResult, WARNING) ;
//MessageBox ("New path is : " + svProtected, WARNING) ;
d257 1
a257 1
	svSedArg = " -e s/BINDIR/" + svProtected ;
d265 1
a265 1
        NumToStr( szTemp, nResult );
d269 1
a269 1
        NumToStr( szTemp, nResult );
d271 1
a271 1
	svResult = "-o " + szAppPath + "\\bin\\mlimage.bat " + svSedArg + "/g;s/DRIVE/" + TARGETDISK + "/g " + szAppPath ^ "\\scripts\\mlimage.bat.in";
d273 6
a278 2
        NumToStr( szTemp, nResult );
//	MessageBox("nResult for mlimage.bat = " ^ szTemp, INFORMATION);
@


1.5
log
@Move installation to /MLWorks
Ensure startup with stack limit
@
text
@a96 1
        svMainDirectory = TARGETDISK ^ APPBASE_PATH;
d113 1
d121 4
@


1.5.3.1
log
@branched from 1.5
@
text
@@


1.5.2.1
log
@branched from 1.5
@
text
@@


1.5.1.1
log
@branched from 1.5
@
text
@@


1.4
log
@Modify mlworks nad mlworks-basis to set source and pervasive dir on startup
@
text
@d28 1
a28 1
#define APPBASE_PATH            "usr\\local\\lib\\MLWorks" // Default place to put it on disc
d288 1
a288 1
		  svTemp + "\\main-windows -load ..\\images\\gui.img -pass a -source-path .. -pervasive-dir ..\\pervasive a",
d294 1
a294 1
		  svTemp + "\\main-windows -load ..\\images\\guib.img -pass a -source-path .. -pervasive-dir ..\\pervasive a",
@


1.3
log
@Add stuff for dealing with sed dll
@
text
@d51 1
a51 1
        STRING  szProgram, szTemp, svUninstLogFile, szRegKey;
d127 1
d129 1
a129 1
        if ( SelectFolder( "Folder Selection", svGrp, svGrp ) = BACK ) then
d288 1
a288 1
		  svTemp + "\\main-windows -load ..\\images\\gui.img",
d294 1
a294 1
		  svTemp + "\\main-windows -load ..\\images\\guib.img",
@


1.2
log
@Adding installation of mlworks-basis
@
text
@d44 2
d56 1
d61 5
d96 1
a96 1
	TARGETDISK ="D:";
d142 1
a142 1
		MessageBox (svUninstLogFile, WARNING) ;
d193 77
d304 1
a304 1
   MessageBox (svUninstLogFile, WARNING) ;
d310 1
a310 1
   MessageBox (svUninstLogFile, WARNING) ;
d354 1
a354 1
           MessageBox( szMsg, INFORMATION );
d447 1
a447 1
   MessageBox (szMsg, WARNING) ;
@


1.1
log
@new unit
@
text
@d207 6
a414 3



@
