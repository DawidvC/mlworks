head	1.191;
access;
symbols
	MLWorks_21c0_1999_03_25:1.189
	MLWorks_20c1_1998_08_20:1.182
	MLWorks_20c0_1998_08_04:1.180
	MLWorks_20b2c2_1998_06_19:1.180
	MLWorks_20b2_Windows_1998_06_12:1.180
	MLWorks_20b1c1_1998_05_07:1.175
	MLWorks_20b0_1998_04_07:1.169
	MLWorks_20b0_1998_03_20:1.169
	MLWorks_20m2_1998_02_16:1.166
	MLWorks_20m1_1997_10_23:1.156
	MLWorks_11r1:1.144.1.1.1.1.1
	MLWorks_11c0_1997_09_09:1.144.1.1.1.1
	MLWorks_10r3:1.144.1.1.3
	MLWorks_10r2_551:1.144.1.1.2
	MLWorks_11:1.144.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.144.1.1
	MLWorks_20m0_1997_06_20:1.151
	MLWorks_1_0_r2c2_1997_06_14:1.144.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.144.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.144.1
	MLWorks_BugFix_1997_04_24:1.144
	MLWorks_1_0_r2_Win32_1997_04_11:1.144
	MLWorks_1_0_r2_Unix_1997_04_04:1.144
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.140.1.1.1
	MLWorks_1_0_Win32_1996_12_17:1.140.1
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.138.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.138.1.1
	MLWorks_1_0_Irix_1996_11_28:1.138.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.139.1
	MLWorks_1_0_Unix_1996_11_14:1.138.1
	MLWorks_Open_Beta2_1996_10_11:1.135.2
	MLWorks_License_dev:1.135.1
	MLWorks_1_open_beta_1996_09_13:1.134.1
	MLWorks_Open_Beta_1996_08_22:1.134
	MLWorks_Beta_1996_07_02:1.132
	MLWorks_Beta_1996_06_07:1.130
	MLWorks_Beta_1996_06_06:1.130
	MLWorks_Beta_1996_06_05:1.130
	MLWorks_Beta_1996_06_03:1.128
	MLWorks_Beta_1996_05_31:1.127
	MLWorks_Beta_1996_05_30:1.127
	ML_beta_release_12/08/94:1.74
	ML_beta_release_03/08/94:1.74
	ML_revised_beta_release_25/05/94:1.71
	ML_final_beta_release_02/03/94:1.65
	mlworks-28-01-1994:1.57
	Release:1.56
	mlworks-beta-01-09-1993:1.56;
locks; strict;
comment	@# @;


1.191
date	99.05.27.13.50.21;	author johnh;	state Exp;
branches;
next	1.190;

1.190
date	99.04.29.14.57.08;	author johnh;	state Exp;
branches;
next	1.189;

1.189
date	99.03.10.11.56.36;	author johnh;	state Exp;
branches;
next	1.188;

1.188
date	99.03.08.14.11.31;	author mitchell;	state Exp;
branches;
next	1.187;

1.187
date	99.02.12.15.52.29;	author sml;	state Exp;
branches;
next	1.186;

1.186
date	99.02.11.16.47.49;	author mitchell;	state Exp;
branches;
next	1.185;

1.185
date	99.02.09.16.53.53;	author mitchell;	state Exp;
branches;
next	1.184;

1.184
date	98.10.19.15.13.33;	author jont;	state Exp;
branches;
next	1.183;

1.183
date	98.09.17.15.03.45;	author jont;	state Exp;
branches;
next	1.182;

1.182
date	98.08.10.12.15.53;	author jont;	state Exp;
branches;
next	1.181;

1.181
date	98.08.07.15.06.52;	author jont;	state Exp;
branches;
next	1.180;

1.180
date	98.06.11.13.13.08;	author jont;	state Exp;
branches;
next	1.179;

1.179
date	98.06.09.14.12.34;	author jont;	state Exp;
branches;
next	1.178;

1.178
date	98.06.01.16.17.20;	author johnh;	state Exp;
branches;
next	1.177;

1.177
date	98.06.01.10.38.50;	author jont;	state Exp;
branches;
next	1.176;

1.176
date	98.05.27.07.59.27;	author mitchell;	state Exp;
branches;
next	1.175;

1.175
date	98.05.07.11.34.37;	author johnh;	state Exp;
branches;
next	1.174;

1.174
date	98.04.29.09.50.09;	author jont;	state Exp;
branches;
next	1.173;

1.173
date	98.04.28.17.48.55;	author johnh;	state Exp;
branches;
next	1.172;

1.172
date	98.04.24.17.29.25;	author jkbrook;	state Exp;
branches;
next	1.171;

1.171
date	98.04.24.16.32.52;	author johnh;	state Exp;
branches;
next	1.170;

1.170
date	98.04.08.09.54.02;	author jont;	state Exp;
branches;
next	1.169;

1.169
date	98.03.12.16.20.26;	author johnh;	state Exp;
branches;
next	1.168;

1.168
date	98.02.20.14.13.02;	author jont;	state Exp;
branches;
next	1.167;

1.167
date	98.02.20.12.28.18;	author jont;	state Exp;
branches;
next	1.166;

1.166
date	98.02.16.16.32.59;	author johnh;	state Exp;
branches;
next	1.165;

1.165
date	98.02.09.18.52.21;	author johnh;	state Exp;
branches;
next	1.164;

1.164
date	98.02.06.14.54.18;	author johnh;	state Exp;
branches;
next	1.163;

1.163
date	97.12.16.10.58.47;	author jont;	state Exp;
branches;
next	1.162;

1.162
date	97.12.15.13.35.23;	author jont;	state Exp;
branches;
next	1.161;

1.161
date	97.11.19.13.24.56;	author daveb;	state Exp;
branches;
next	1.160;

1.160
date	97.11.03.11.32.49;	author jont;	state Exp;
branches;
next	1.159;

1.159
date	97.10.31.10.36.40;	author daveb;	state Exp;
branches;
next	1.158;

1.158
date	97.10.30.10.05.17;	author daveb;	state Exp;
branches;
next	1.157;

1.157
date	97.10.24.13.03.31;	author jont;	state Exp;
branches;
next	1.156;

1.156
date	97.08.11.12.18.59;	author jont;	state Exp;
branches;
next	1.155;

1.155
date	97.07.24.09.22.27;	author stephenb;	state Exp;
branches;
next	1.154;

1.154
date	97.07.23.09.28.56;	author andreww;	state Exp;
branches;
next	1.153;

1.153
date	97.07.08.14.09.08;	author jont;	state Exp;
branches;
next	1.152;

1.152
date	97.06.25.09.54.27;	author stephenb;	state Exp;
branches;
next	1.151;

1.151
date	97.06.17.10.34.23;	author jont;	state Exp;
branches;
next	1.150;

1.150
date	97.06.11.11.14.26;	author stephenb;	state Exp;
branches;
next	1.149;

1.149
date	97.05.23.08.12.33;	author stephenb;	state Exp;
branches;
next	1.148;

1.148
date	97.05.14.11.20.05;	author stephenb;	state Exp;
branches;
next	1.147;

1.147
date	97.05.13.11.16.48;	author daveb;	state Exp;
branches;
next	1.146;

1.146
date	97.05.09.13.12.17;	author stephenb;	state Exp;
branches;
next	1.145;

1.145
date	97.04.21.09.19.09;	author jont;	state Exp;
branches;
next	1.144;

1.144
date	97.04.04.11.15.57;	author jont;	state Exp;
branches
	1.144.1.1;
next	1.143;

1.143
date	97.04.03.14.10.12;	author jont;	state Exp;
branches;
next	1.142;

1.142
date	97.01.07.11.07.16;	author matthew;	state Exp;
branches;
next	1.141;

1.141
date	96.12.18.17.33.34;	author daveb;	state Exp;
branches;
next	1.140;

1.140
date	96.12.10.16.46.36;	author daveb;	state Exp;
branches
	1.140.1.1;
next	1.139;

1.139
date	96.11.15.10.21.47;	author jont;	state Exp;
branches
	1.139.1.1;
next	1.138;

1.138
date	96.11.03.16.07.08;	author io;	state Exp;
branches
	1.138.1.1;
next	1.137;

1.137
date	96.10.27.14.33.50;	author io;	state Exp;
branches;
next	1.136;

1.136
date	96.10.22.10.41.15;	author jont;	state Exp;
branches;
next	1.135;

1.135
date	96.09.09.22.01.37;	author jont;	state Exp;
branches
	1.135.1.1
	1.135.2.1;
next	1.134;

1.134
date	96.08.16.09.55.43;	author io;	state Exp;
branches
	1.134.1.1;
next	1.133;

1.133
date	96.08.01.12.25.26;	author io;	state Exp;
branches;
next	1.132;

1.132
date	96.06.28.10.07.35;	author jont;	state Exp;
branches;
next	1.131;

1.131
date	96.06.19.10.19.11;	author brianm;	state Exp;
branches;
next	1.130;

1.130
date	96.06.05.13.18.22;	author brianm;	state Exp;
branches;
next	1.129;

1.129
date	96.06.03.09.32.00;	author jont;	state Exp;
branches;
next	1.128;

1.128
date	96.05.31.13.42.21;	author jont;	state Exp;
branches;
next	1.127;

1.127
date	96.05.17.14.25.14;	author jont;	state Exp;
branches;
next	1.126;

1.126
date	96.05.17.08.11.23;	author stephenb;	state Exp;
branches;
next	1.125;

1.125
date	96.05.15.08.58.16;	author daveb;	state Exp;
branches;
next	1.124;

1.124
date	96.05.07.12.28.18;	author daveb;	state Exp;
branches;
next	1.123;

1.123
date	96.05.02.17.01.03;	author jont;	state Exp;
branches;
next	1.122;

1.122
date	96.05.02.15.04.06;	author jont;	state Exp;
branches;
next	1.121;

1.121
date	96.04.22.09.37.54;	author matthew;	state Exp;
branches;
next	1.120;

1.120
date	96.04.17.09.50.04;	author jont;	state Exp;
branches;
next	1.119;

1.119
date	96.04.10.13.24.23;	author jont;	state Exp;
branches;
next	1.118;

1.118
date	96.04.04.16.10.28;	author jont;	state Exp;
branches;
next	1.117;

1.117
date	96.04.04.14.43.37;	author jont;	state Exp;
branches;
next	1.116;

1.116
date	96.04.02.13.10.22;	author jont;	state Exp;
branches;
next	1.115;

1.115
date	96.04.01.14.13.05;	author io;	state Exp;
branches;
next	1.114;

1.114
date	96.03.27.11.07.49;	author io;	state Exp;
branches;
next	1.113;

1.113
date	96.03.25.12.21.28;	author io;	state Exp;
branches;
next	1.112;

1.112
date	96.03.18.09.56.50;	author daveb;	state Exp;
branches;
next	1.111;

1.111
date	96.03.18.09.53.13;	author daveb;	state Exp;
branches;
next	1.110;

1.110
date	96.03.16.16.46.56;	author daveb;	state Exp;
branches;
next	1.109;

1.109
date	96.03.15.14.34.33;	author matthew;	state Exp;
branches;
next	1.108;

1.108
date	96.01.31.10.56.41;	author jont;	state Exp;
branches;
next	1.107;

1.107
date	96.01.30.15.30.39;	author jont;	state Exp;
branches;
next	1.106;

1.106
date	96.01.09.12.27.47;	author matthew;	state Exp;
branches;
next	1.105;

1.105
date	95.12.06.18.43.22;	author daveb;	state Exp;
branches;
next	1.104;

1.104
date	95.11.01.17.36.06;	author jont;	state Exp;
branches;
next	1.103;

1.103
date	95.10.05.16.21.55;	author jont;	state Exp;
branches;
next	1.102;

1.102
date	95.09.19.10.25.23;	author daveb;	state Exp;
branches;
next	1.101;

1.101
date	95.09.15.09.38.45;	author daveb;	state Exp;
branches;
next	1.100;

1.100
date	95.09.14.16.00.38;	author daveb;	state Exp;
branches;
next	1.99;

1.99
date	95.09.11.14.06.34;	author jont;	state Exp;
branches;
next	1.98;

1.98
date	95.08.21.09.15.55;	author matthew;	state Exp;
branches;
next	1.97;

1.97
date	95.08.02.12.18.28;	author daveb;	state Exp;
branches;
next	1.96;

1.96
date	95.08.01.10.41.41;	author matthew;	state Exp;
branches;
next	1.95;

1.95
date	95.07.31.09.40.11;	author matthew;	state Exp;
branches;
next	1.94;

1.94
date	95.07.20.09.25.28;	author jont;	state Exp;
branches;
next	1.93;

1.93
date	95.06.15.15.22.14;	author jont;	state Exp;
branches;
next	1.92;

1.92
date	95.05.23.09.28.26;	author jont;	state Exp;
branches;
next	1.91;

1.91
date	95.05.19.16.38.49;	author jont;	state Exp;
branches;
next	1.90;

1.90
date	95.05.19.15.53.01;	author jont;	state Exp;
branches;
next	1.89;

1.89
date	95.05.04.14.20.10;	author jont;	state Exp;
branches;
next	1.88;

1.88
date	95.04.26.07.46.38;	author matthew;	state Exp;
branches;
next	1.87;

1.87
date	95.04.25.09.44.02;	author matthew;	state Exp;
branches;
next	1.86;

1.86
date	95.04.24.09.27.10;	author daveb;	state Exp;
branches;
next	1.85;

1.85
date	95.04.01.13.30.14;	author io;	state Exp;
branches;
next	1.84;

1.84
date	95.03.28.12.46.49;	author jont;	state Exp;
branches;
next	1.83;

1.83
date	95.03.03.11.02.49;	author nickb;	state Exp;
branches;
next	1.82;

1.82
date	95.03.02.11.59.48;	author io;	state Exp;
branches;
next	1.81;

1.81
date	95.02.28.15.18.55;	author brianm;	state Exp;
branches;
next	1.80;

1.80
date	95.02.27.22.18.59;	author io;	state Exp;
branches;
next	1.79;

1.79
date	95.02.23.17.19.55;	author jont;	state Exp;
branches;
next	1.78;

1.78
date	95.02.21.15.47.09;	author brianm;	state Exp;
branches;
next	1.77;

1.77
date	95.02.09.14.58.14;	author jont;	state Exp;
branches;
next	1.76;

1.76
date	95.01.26.10.43.22;	author daveb;	state Exp;
branches;
next	1.75;

1.75
date	94.12.09.16.04.31;	author jont;	state Exp;
branches;
next	1.74;

1.74
date	94.06.13.15.18.21;	author nickh;	state Exp;
branches;
next	1.73;

1.73
date	94.06.13.10.49.14;	author jont;	state Exp;
branches;
next	1.72;

1.72
date	94.06.09.16.21.13;	author nickh;	state Exp;
branches;
next	1.71;

1.71
date	94.03.28.18.23.14;	author daveb;	state Exp;
branches;
next	1.70;

1.70
date	94.03.24.19.02.48;	author daveb;	state Exp;
branches;
next	1.69;

1.69
date	94.03.14.11.34.50;	author jont;	state Exp;
branches;
next	1.68;

1.68
date	94.03.11.16.16.04;	author jont;	state Exp;
branches;
next	1.67;

1.67
date	94.03.03.16.48.43;	author daveb;	state Exp;
branches;
next	1.66;

1.66
date	94.03.02.17.56.52;	author jont;	state Exp;
branches;
next	1.65;

1.65
date	94.03.02.14.05.00;	author jont;	state Exp;
branches;
next	1.64;

1.64
date	94.03.02.10.46.38;	author jont;	state Exp;
branches;
next	1.63;

1.63
date	94.03.01.15.37.51;	author jont;	state Exp;
branches;
next	1.62;

1.62
date	94.02.08.15.14.55;	author matthew;	state Exp;
branches;
next	1.61;

1.61
date	94.02.08.13.46.26;	author matthew;	state Exp;
branches;
next	1.60;

1.60
date	94.02.04.18.20.50;	author daveb;	state Exp;
branches;
next	1.59;

1.59
date	94.02.03.12.32.15;	author matthew;	state Exp;
branches;
next	1.58;

1.58
date	94.01.28.18.14.19;	author daveb;	state Exp;
branches;
next	1.57;

1.57
date	93.09.09.13.36.36;	author daveb;	state Exp;
branches;
next	1.56;

1.56
date	93.08.31.14.19.41;	author daveb;	state Exp;
branches
	1.56.1.1;
next	1.55;

1.55
date	93.08.31.09.24.14;	author matthew;	state Exp;
branches;
next	1.54;

1.54
date	93.08.28.19.16.42;	author daveb;	state Exp;
branches;
next	1.53;

1.53
date	93.08.27.11.39.31;	author richard;	state Exp;
branches;
next	1.52;

1.52
date	93.08.19.14.42.23;	author daveb;	state Exp;
branches;
next	1.51;

1.51
date	93.08.19.14.13.48;	author daveb;	state Exp;
branches;
next	1.50;

1.50
date	93.08.17.18.47.34;	author daveb;	state Exp;
branches;
next	1.49;

1.49
date	93.04.28.10.21.09;	author richard;	state Exp;
branches;
next	1.48;

1.48
date	93.04.23.15.44.03;	author richard;	state Exp;
branches;
next	1.47;

1.47
date	93.04.21.10.32.11;	author matthew;	state Exp;
branches;
next	1.46;

1.46
date	93.04.15.10.00.32;	author daveb;	state Exp;
branches;
next	1.45;

1.45
date	93.03.10.10.47.07;	author matthew;	state Exp;
branches;
next	1.44;

1.44
date	93.03.02.20.09.13;	author daveb;	state Exp;
branches;
next	1.43;

1.43
date	93.02.02.12.28.08;	author daveb;	state Exp;
branches;
next	1.42;

1.42
date	93.01.22.18.25.23;	author daveb;	state Exp;
branches;
next	1.41;

1.41
date	93.01.19.18.42.27;	author daveb;	state Exp;
branches;
next	1.40;

1.40
date	92.12.24.13.07.34;	author clive;	state Exp;
branches;
next	1.39;

1.39
date	92.12.23.10.44.53;	author richard;	state Exp;
branches;
next	1.38;

1.38
date	92.12.14.10.00.50;	author clive;	state Exp;
branches;
next	1.37;

1.37
date	92.12.03.10.22.44;	author daveb;	state Exp;
branches;
next	1.36;

1.36
date	92.12.01.17.27.56;	author clive;	state Exp;
branches;
next	1.35;

1.35
date	92.11.30.09.49.18;	author clive;	state Exp;
branches;
next	1.34;

1.34
date	92.11.25.16.56.49;	author clive;	state Exp;
branches;
next	1.33;

1.33
date	92.11.16.15.02.44;	author clive;	state Exp;
branches;
next	1.32;

1.32
date	92.10.27.15.38.25;	author jont;	state Exp;
branches;
next	1.31;

1.31
date	92.10.20.09.35.57;	author richard;	state Exp;
branches;
next	1.30;

1.30
date	92.09.07.15.47.28;	author jont;	state Exp;
branches;
next	1.29;

1.29
date	92.08.27.21.16.27;	author jont;	state Exp;
branches;
next	1.28;

1.28
date	92.08.27.07.59.48;	author clive;	state Exp;
branches;
next	1.27;

1.27
date	92.08.20.12.44.43;	author jont;	state Exp;
branches;
next	1.26;

1.26
date	92.08.14.07.20.02;	author richard;	state Exp;
branches;
next	1.25;

1.25
date	92.08.13.13.14.19;	author clive;	state Exp;
branches;
next	1.24;

1.24
date	92.07.29.10.10.28;	author jont;	state Exp;
branches;
next	1.23;

1.23
date	92.07.21.15.12.50;	author clive;	state Exp;
branches;
next	1.22;

1.22
date	92.07.06.13.18.17;	author davida;	state Exp;
branches;
next	1.21;

1.21
date	92.07.06.13.15.33;	author davida;	state Exp;
branches;
next	1.20;

1.20
date	92.07.03.12.07.46;	author clive;	state Exp;
branches;
next	1.19;

1.19
date	92.04.08.09.47.13;	author clive;	state Exp;
branches;
next	1.18;

1.18
date	92.03.30.10.57.25;	author richard;	state Exp;
branches;
next	1.17;

1.17
date	92.03.12.13.32.12;	author clive;	state Exp;
branches;
next	1.16;

1.16
date	92.03.11.15.40.40;	author clive;	state Exp;
branches;
next	1.15;

1.15
date	92.03.09.10.38.40;	author richard;	state Exp;
branches;
next	1.14;

1.14
date	92.02.19.17.42.34;	author clive;	state Exp;
branches;
next	1.13;

1.13
date	92.02.19.09.00.13;	author clive;	state Exp;
branches;
next	1.12;

1.12
date	92.02.14.16.01.44;	author clive;	state Exp;
branches;
next	1.11;

1.11
date	92.02.14.15.55.08;	author clive;	state Exp;
branches;
next	1.10;

1.10
date	92.02.14.09.37.07;	author clive;	state Exp;
branches;
next	1.9;

1.9
date	92.02.13.18.07.28;	author clive;	state Exp;
branches;
next	1.8;

1.8
date	92.02.04.14.49.48;	author jont;	state Exp;
branches;
next	1.7;

1.7
date	92.02.04.11.24.26;	author jont;	state Exp;
branches;
next	1.6;

1.6
date	92.02.03.13.24.02;	author richard;	state Exp;
branches;
next	1.5;

1.5
date	92.01.21.15.26.50;	author richard;	state Exp;
branches;
next	1.4;

1.4
date	92.01.15.09.21.46;	author richard;	state Exp;
branches;
next	1.3;

1.3
date	91.12.19.17.10.37;	author jont;	state Exp;
branches;
next	1.2;

1.2
date	91.11.22.13.36.15;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	91.10.07.11.04.21;	author jont;	state Exp;
branches;
next	;

1.56.1.1
date	93.08.31.14.19.41;	author jont;	state Exp;
branches;
next	1.56.1.2;

1.56.1.2
date	93.09.08.13.17.36;	author daveb;	state Exp;
branches;
next	;

1.134.1.1
date	96.09.13.11.44.12;	author hope;	state Exp;
branches;
next	;

1.135.1.1
date	96.10.07.16.37.26;	author hope;	state Exp;
branches;
next	;

1.135.2.1
date	96.10.17.11.56.25;	author hope;	state Exp;
branches;
next	;

1.138.1.1
date	96.11.14.13.24.46;	author hope;	state Exp;
branches
	1.138.1.1.1.1;
next	;

1.138.1.1.1.1
date	96.11.28.15.35.45;	author hope;	state Exp;
branches;
next	;

1.139.1.1
date	96.11.22.18.41.52;	author hope;	state Exp;
branches;
next	;

1.140.1.1
date	96.12.17.18.20.51;	author hope;	state Exp;
branches
	1.140.1.1.1.1;
next	;

1.140.1.1.1.1
date	97.02.24.12.15.35;	author hope;	state Exp;
branches;
next	;

1.144.1.1
date	97.05.12.11.12.23;	author hope;	state Exp;
branches
	1.144.1.1.1.1
	1.144.1.1.2.1
	1.144.1.1.3.1;
next	;

1.144.1.1.1.1
date	97.07.28.18.55.09;	author daveb;	state Exp;
branches
	1.144.1.1.1.1.1.1;
next	;

1.144.1.1.1.1.1.1
date	97.10.07.12.19.56;	author jkbrook;	state Exp;
branches;
next	;

1.144.1.1.2.1
date	97.09.08.17.47.28;	author daveb;	state Exp;
branches;
next	;

1.144.1.1.3.1
date	97.09.09.14.46.45;	author daveb;	state Exp;
branches;
next	;


desc
@Daily (overnight) build script
@


1.191
log
@[Bug #190553]
Don't use Exit_ structure, use MLWorksExit structure.
@
text
@#!/bin/sh
#
#	==== DAILY BUILD SCRIPT ====
#
# Revision Log
# ------------
# $Log: daily,v $
# Revision 1.190  1999/04/29  14:57:08  johnh
# [Bug #190558]
# Don't include DEPEND directory when searching for demo files.
#
# Revision 1.189  1999/03/10  11:56:36  johnh
# [Bug #190506]
# remove old FI but reinstate foreign.img
#
# Revision 1.188  1999/03/08  14:11:31  mitchell
# [Bug #30286]
# Add platform_specific_exports target for basis
#
# Revision 1.187  1999/02/12  15:52:29  sml
# [Bug #190505]
# Make sure basis.mlp gets processed before batch.mlp on all platforms
#
# Revision 1.186  1999/02/11  16:47:49  mitchell
# [Bug #190504]
# Modify to generate dumps of mo dependencies
#
# Revision 1.185  1999/02/09  16:53:53  mitchell
# [Bug #190505]
# Modify to deal with precompilation/additional targets
#
# Revision 1.184  1998/10/19  15:13:33  jont
# [Bug #70203]
# Modify for new argument passing
#
# Revision 1.183  1998/09/17  15:03:45  jont
# [Bug #70175]
# Modify test on result from spawned jobs
#
# Revision 1.182  1998/08/10  12:15:53  jont
# [Bug #70128]
# Run demos etc -no-init
#
# Revision 1.181  1998/08/07  15:06:52  jont
# [Bug #70148]
# Fix application tests to use load.sml as stdin
#
# Revision 1.180  1998/06/11  13:13:08  jont
# Make demos function correctly again
#
# Revision 1.179  1998/06/09  14:12:34  jont
# [Bug #70130]
# Make sure checks for error and warning can't be triggered by correct code
#
# Revision 1.178  1998/06/01  16:17:20  johnh
# [Bug #30369]
# Replace source path with a list of files.
#
# Revision 1.177  1998/06/01  10:38:50  jont
# Modify to add testing of external applications
#
# Revision 1.176  1998/05/27  07:59:27  mitchell
# [Bug #30413]
# Change calls to exit to use abstract status
#
# Revision 1.175  1998/05/07  11:34:37  johnh
# [Bug #30292]
# Fix demos to use Shell.Project loading.
#
# Revision 1.174  1998/04/29  09:50:09  jont
# [Bug #30401]
# Sort out further problems with pervasive object files
#
# Revision 1.173  1998/04/28  17:48:55  johnh
# [Bug #30401]
# Fix cross compilation.
#
# Revision 1.172  1998/04/24  17:29:25  jkbrook
# [Bug #30401]
# Make sure incompatible pervasive mos don't get left around
# before spawned builds
# And fix some Y2K-isms
#
# Revision 1.171  1998/04/24  16:32:52  johnh
# [Bug #30229]
# turn on local functions when using batch compiler for full optimisation.
#
# Revision 1.170  1998/04/08  09:54:02  jont
# [Bug #30312]
# Remove NT cross compile as this can no longer be done
# since we can't make the generated file keys.sml on unix
#
# Revision 1.169  1998/03/12  16:20:26  johnh
# [Bug #30365]
# daily build can now use subprojects.
#
# Revision 1.168  1998/02/20  14:13:02  jont
# [Bug #30364]
# Run benchmarks under guib.img
#
# Revision 1.167  1998/02/20  12:28:18  jont
# [Bug #30357]
# Run mlworks-basis with -no-init
#
# Revision 1.166  1998/02/16  16:32:59  johnh
# [Bug #30071]
# Fix cross compilation problems.
#
# Revision 1.165  1998/02/09  18:52:21  johnh
# [Bug #30071]
# Use new Project Workspace to build MIPS/Irix, I386/Linux and I386/NT mos.
#
# Revision 1.164  1998/02/06  14:54:18  johnh
# [Bug #30071]
# Convert daily build to work with the new project model.
#
# Revision 1.163  1997/12/16  10:58:47  jont
# [Bug #30334]
# Ensure TEST.LOG files are made ARCH/OS specific
# so they don't get overwritten by a later part of the same build
#
# Revision 1.162  1997/12/15  13:35:23  jont
# [Bug #70024]
# Add option to suppress structure contents when building
# bootstrap compiler
#
# Revision 1.161  1997/11/19  13:24:56  daveb
# [Bug #30324]
# Added check that image files exist before backing them up.
# Added code to set spawn_status before exiting in spawned builds.
#
# Revision 1.160  1997/11/03  11:32:49  jont
# [Bug #30285]
# Ensure spawn_status valid before testing
#
# Revision 1.159  1997/10/31  10:36:40  daveb
# [Bug #30316]
# Added missing "export LD_LIBRARY_PATH".
#
# Revision 1.158  1997/10/30  10:05:17  daveb
# [Bug #70016]
# Generated files should only be cleaned by the original build, not by
# spawned builds.  Spawned builds need the .mo files (cross-)compiled
# by the main build.
#
# Revision 1.157  1997/10/24  13:03:31  jont
# [Bug #70016]
# Ensure rts build cleans generated files first
#
# Revision 1.156  1997/08/11  12:18:59  jont
# [Bug #70000]
# Add /bin/sh to all rsh lines to attempt to get round Irix rshd bug
# Stop gnumake using multiple processes during rts make in a further
# attempt to get around Irix rshd problems.
#
# Revision 1.155  1997/07/24  09:22:27  stephenb
# [Bug #30066]
# Ensure that Desktop libraries are used under Solaris.
#
# Revision 1.154  1997/07/23  09:28:56  andreww
# [Bug #30045]
# Altering daily build script to set LD_LIBRARY_PATH appropriately.
#
# Revision 1.153  1997/07/08  14:09:08  jont
# Experiment to try to solve rsh failures
#
# Revision 1.152  1997/06/25  09:54:27  stephenb
# ensure that /usr/openwin/lib is added to any existing
# LD_LIBRARY_PATH setting rather than overwriting it.
# This will enable the build to run on binatone.
#
# Revision 1.151  1997/06/17  10:34:23  jont
# Check return status of spawned builds
# Fix grep so as to work under Irix
# Stop making utils/__stringlib which was only required by the old FI
#
# Revision 1.150  1997/06/11  11:14:26  stephenb
# [Bug #30166]
# Add -s option to coutall call to ensure writable files are skipped.
#
# Revision 1.149  1997/05/23  08:12:33  stephenb
# [Bug #30121]
# Move to new FI: remove foreign.img, ttyi.img and guii.img.
#
# Revision 1.148  1997/05/14  11:20:05  stephenb
# [Bug #20035]
# Ensure that the demos for the foreign interface are tested.
#
# Revision 1.147  1997/05/13  11:16:48  daveb
# [Bug #20050]
# structure Io_ is now called MLWorksIo_ .
#
# Revision 1.146  1997/05/09  13:12:17  stephenb
# [Bug #20042]
# Ensure that foreign demos aren't using the default mechanism
# for running demos.
#
# Revision 1.145  1997/04/21  09:19:09  jont
# Modify to cope with running on other architectures
#
# Revision 1.144  1997/04/04  11:15:57  jont
# [Bug #2011]
# Do benchmark tests during overnight build
#
# Revision 1.143  1997/04/03  14:10:12  jont
# [Bug #2011]
# Update to compile all demos and warn of any failures
#
# Revision 1.142  1997/01/07  11:07:16  matthew
# New build mechanism
#
# Revision 1.141  1996/12/18  17:33:34  daveb
# Moved MLW/src/test_suite to MLW/test_suite.
#
# Revision 1.140  1996/12/10  16:46:36  daveb
# Set MLWORKS_LICENSE to "server", as the registration scheme is now default.
#
# Revision 1.139  1996/11/15  10:21:47  jont
# [Bug #1766]
# Ensure all object files necessary for distribution are built overnight
#
# Revision 1.138  1996/11/03  16:07:08  io
# remove compilation of stringlib during interpreter build
#
# Revision 1.137  1996/10/27  14:33:50  io
# remove LD_LIBRARY_PATH workaround for sorrol's SunOS
#
# Revision 1.136  1996/10/22  10:41:15  jont
# [Bug #1684]
# Extend paths to find make
# Don't try to build images if the rts build failed
#
# Revision 1.135  1996/09/09  22:01:37  jont
# Moving build to Solaris
#
# Revision 1.134  1996/08/16  09:55:43  io
# remove lock files on checkout failure
#
# Revision 1.133  1996/08/01  12:25:26  io
# hope checkout should succeed first
#
# Revision 1.132  1996/06/28  10:07:35  jont
# Stop making foreign interface too early
#
# Revision 1.131  1996/06/19  10:19:11  brianm
# Changing mk_interface to mk_interface.sh
#
# Revision 1.130  1996/06/05  13:18:22  brianm
# Changed foreign/__foreign to foreign/__interface and also added
# some code to rebuild __interface.sml
#
# Revision 1.129  1996/06/03  09:32:00  jont
# Fix bug in final section of build for NT
#
# Revision 1.128  1996/05/31  13:42:21  jont
# Fix links corectly when compiling for NT
#
# Revision 1.127  1996/05/17  14:25:14  jont
# Add guib.img to list of images built for distribution
#
# Revision 1.126  1996/05/17  08:11:23  stephenb
# Replace MLWorks.exit with Exit_.exit now that MLWorks.exit has been removed
# from the pervasive library.
#
# Revision 1.125  1996/05/15  08:58:16  daveb
# Added -batch option to invocations of runtime.
#
# Revision 1.124  1996/05/07  12:28:18  daveb
# Made this script mail mlworkers the details of any failures in the test suite.
#
# Revision 1.123  1996/05/02  17:01:03  jont
# Add foreign.img to list of images made
#
# Revision 1.122  1996/05/02  15:04:06  jont
# Build foreign/__foreign for all platforms
#
# Revision 1.121  1996/04/22  09:37:54  matthew
# Changing initbasis to basis
#
# Revision 1.120  1996/04/17  09:50:04  jont
# Use consistent language when reporting creation of symbolic links
# Fix link creation for NT object files to use mswindwos rather than motif
#
# Revision 1.119  1996/04/10  13:24:23  jont
# Adding some diagnostic output when removing mo files
#
# Revision 1.118  1996/04/04  16:10:28  jont
# Ensure a full build deletes all object files
#
# Revision 1.117  1996/04/04  14:43:37  jont
# Modify PATH so that we can put mlworks scripts in tools
#
# Revision 1.116  1996/04/02  13:10:22  jont
# Modifications to run using MLWorks as compilation bootstrap mechanism
# instead of New Jersey.
#
# Revision 1.115  1996/04/01  14:13:05  io
# add ARCH OS for mlworks-server build
#
# Revision 1.114  1996/03/27  11:07:49  io
# compile mlworks server
#
# Revision 1.113  1996/03/25  12:21:28  io
# add LD_LIBRARY_PATH
#
# Revision 1.112  1996/03/18  09:56:50  daveb
# Corrected previous log entry.
#
# Revision 1.111  1996/03/18  09:53:13  daveb
# Replaced Info.default_options with (Info.make_default_options ()).
#
# Revision 1.110  1996/03/16  16:46:56  daveb
# Removed /u/matthew/... pathname.
#
# Revision 1.109  1996/03/15  14:34:33  matthew
# New hyphenization convention for command line argument
# s
#
# Revision 1.108  1996/01/31  10:56:41  jont
# Ensure lock deleted when exiting from a full build
#
# Revision 1.107  1996/01/30  15:30:39  jont
# Add building of FFI capable images
#
# Revision 1.106  1996/01/09  12:27:47  matthew
# Renaming motif.img to gui.img
#
# Revision 1.105  1995/12/06  18:43:22  daveb
# Updated this to use the new project system.
#
# Revision 1.104  1995/11/01  17:36:06  jont
# Add use of optimize_handlers in batch compiler invocation
# Use MLWorks for cross compilation to MIPS and I386
#
# Revision 1.103  1995/10/05  16:21:55  jont
# Modify to do interpreter compilation using MLWorks instead of NJ
#
# Revision 1.102  1995/09/19  10:25:23  daveb
# Made this script only remove pervasive mo files when called with the -full
# argument, so that we can catch up with problems without recompiling everything.
#
# Revision 1.101  1995/09/15  09:38:45  daveb
# The rm commands that I added yesterday used relative paths from the
# wrong directory.  I have changed them to use absolute paths.
#
# Revision 1.100  1995/09/14  16:00:38  daveb
# Stopped this script from running the test suite if the SPARC build fails.
# Also made it remove all pervasive mo files, so that it rebuilds everything
# from scratch.
#
# Revision 1.99  1995/09/11  14:06:34  jont
# Remove compilation of win_int.sml during NT build.
# Compile interpreter/{x,}interpreter.sml instead
# Ensure all three links are correctly set up for each compilation phase
#
# Revision 1.98  1995/08/21  09:15:55  matthew
# Adding diagnostic for mips compilation failure
#
# Revision 1.97  1995/08/02  12:18:28  daveb
# Diffs between test suite results are now stored in a log.
#
# Revision 1.96  1995/08/01  10:41:41  matthew
# Since (...) gets executed in a subshell, changed new diagnostics to use { ...; }
# so the change to status is visible
#
# Revision 1.95  1995/07/31  09:40:11  matthew
# Adding diagnostics for build failures
#
# Revision 1.94  1995/07/20  09:25:28  jont
# Ensure that lambda build failures cause complete build failures
#
# Revision 1.93  1995/06/15  15:22:14  jont
# Remove deletion of auto-generated stuff
#
# Revision 1.92  1995/05/23  09:28:26  jont
# Add information to say when build finished
#
# Revision 1.91  1995/05/19  16:38:49  jont
# Add Intel object file build in the same way as the MIPS one
#
# Revision 1.90  1995/05/19  15:53:01  jont
# Modifications to build object files for other targets
#
# Revision 1.89  1995/05/04  14:20:10  jont
# Add building of revised initial basis
# and basis.img and xm.img
#
# Revision 1.88  1995/04/26  07:46:38  matthew
# Changed calls to Io_.set_pervasive_dir_from_env and Io_.set_source_path_from_env
# in MIPS and 386 builds
#
# Revision 1.87  1995/04/25  09:44:02  matthew
# Remove dependencies and generated files when building the runtime system
#
# Revision 1.86  1995/04/24  09:27:10  daveb
# set_pervasive_dir_from_env and set_source_path_from_env now take a
# location argument.
#
# Revision 1.85  1995/04/01  13:30:14  io
# trap handler to get rid of lock files
#
# Revision 1.84  1995/03/28  12:46:49  jont
# Split cleaning part of rts build from remkaing part of the build
#
# Revision 1.83  1995/03/03  11:02:49  nickb
# Add gnumake generated in the runtime.
#
# Revision 1.82  1995/03/02  11:59:48  io
# changed compress to gzip
#
# Revision 1.81  1995/02/28  15:18:55  brianm
# Suspended generation of static runtime (e.g. main-static)
# since this clashes with runtime dynamic linking.
#
# Revision 1.80  1995/02/27  22:18:59  io
# removing dependencies on ~sml/bin/make
#
# Revision 1.79  1995/02/23  17:19:55  jont
# Modify for new file structure /u
#
# Revision 1.78  1995/02/21  15:47:09  brianm
# Introducing SML_HOME
#
# Revision 1.77  1995/02/09  14:58:14  jont
# Add i386 build. Move to new image directory structure.
#
# Revision 1.76  1995/01/26  10:43:22  daveb
# Changed module names to use . separator.
#
# Revision 1.75  1994/12/09  16:04:31  jont
# Change use of make in image building for gnumake
#
# Revision 1.74  1994/06/13  15:18:21  nickh
# Fix csh-ism.
#
# Revision 1.73  1994/06/13  10:49:14  jont
# Remove attempted extra checkout of daily
#
# Revision 1.72  1994/06/09  16:21:13  nickh
# New runtime structure.
#
# Revision 1.71  1994/03/28  18:23:14  daveb
# Recompile_.recompile -> Recompile_.recompile_modules.
#
# Revision 1.70  1994/03/24  19:02:48  daveb
# Added options to select certain phases only.
#
# Revision 1.69  1994/03/14  11:34:50  jont
# Remove pretty formatting to ensure EOF is at line start
#
# Revision 1.68  1994/03/11  16:16:04  jont
# Made image builds dependent on the success of the compilation in question
#
# Revision 1.67  1994/03/03  16:48:43  daveb
# New version of cout.
#
# Revision 1.66  1994/03/02  17:56:52  jont
# Add mkstruct after coutall
#
# Revision 1.65  1994/03/02  14:05:00  jont
# Remove hopeless attempts to build under NJ
#
# Revision 1.64  1994/03/02  10:46:38  jont
# Ensure in correct directory before dealing with symbolic links
#
# Revision 1.63  1994/03/01  15:37:51  jont
# Added stuff to compile mips code as well
#
# Revision 1.62  1994/02/08  15:14:55  matthew
# Changed hope-coutall to coutall
#
# Revision 1.61  1994/02/08  13:46:26  matthew
# Changed default search path to "."
#
# Revision 1.60  1994/02/04  18:20:50  daveb
# Changed to use tools/cout instead of scripts/hope-cout.
#
# Revision 1.59  1994/02/03  12:32:15  matthew
# Fixing filenames for recompile.
#
# Revision 1.58  1994/01/28  18:14:19  daveb
# Changed location of src directory.
# Temporary change to use ../scripts/hope-coutall instead of tools/coutall.
#
# Revision 1.57  1993/09/09  13:36:36  daveb
# Merged in bug fix.
#
# Revision 1.56.1.2  1993/09/08  13:17:36  daveb
# Now exits with non-zero status if any error occurs, including recoverable
# ones (such as failing to build smlk).
#
# Revision 1.56.1.1  1993/08/31  14:19:41  jont
# Fork for bug fixing
#
# Revision 1.56  1993/08/31  14:19:41  daveb
# Fixed calls to Recompile_.recompile.
#
# Revision 1.55  1993/08/31  09:24:14  matthew
# Changed call to Recompile.recompile.
#
# Revision 1.54  1993/08/28  19:16:42  daveb
# Added call to Io_.set_source_path_from_env ();
#
# Revision 1.53  1993/08/27  11:39:31  richard
# Changed the names of the environment variables pointing to the
# pervasive directory and source path.  Added instruction to the MLWorks
# build under NJ to set the pervasive dir from the environment.
#
# Revision 1.52  1993/08/19  14:42:23  daveb
# Made UNIX environment variables begin with MLWORKS_ .
#
# Revision 1.51  1993/08/19  14:13:48  daveb
# Fixed name of ML_SOURCE_PATH.
#
# Revision 1.50  1993/08/17  18:47:34  daveb
# Changes for module naming scheme.
#
# Revision 1.49  1993/04/28  10:21:09  richard
# Added an echo to distinguish test-suite diffs from test-suite output.
#
# Revision 1.48  1993/04/23  15:44:03  richard
# Rewritten from scratch in Bourne shell with much more robust error
# checking and backup.  The script now has more of a succeed-at-all-costs
# attitude.
#


# === ENVIRONMENT ===
#
# Set up the environment for the build

status=0
script=`basename $0`
SML=/u/sml/MLW; export SML
umask 002
PATH=$SML/tools:/usr/local/lib/MLWorks/bin:/bin:/usr/local/bin:/usr/ucb:/usr/ccs/bin:$PATH; export PATH
MLWORKS_PERVASIVE=$SML/src/pervasive; export MLWORKS_PERVASIVE
MLWORKS_LICENSE=server; export MLWORKS_LICENSE
usage="USAGE: $script [-full] [-rts] [-bootstrap] [-sparc] [-mips] [-i386] [-test_suite] [-demos] [-foreign_demos] [-benchmarks] [-applications] [-no_mail] [-mlworks_server] [-base_os <OS:default Solaris>] [-base_arch <ARCH:default SPARC>] [-spawned] [-mips_build_machine <MACHINE>] [-sunos_build_machine <MACHINE>] [-i386_build_machine <MACHINE>] [-all]"
rts=0
bootstrap=0
sparc=0
mips=0
i386=0
test_suite=0
demos=0
foreign_demos=0
benchmarks=0
applications=0
no_mail=0
full=0
all=0
mlworks_server=0
base_os=Solaris
base_arch=SPARC
spawned=0
sparc_solaris_built=0
mips_irix_built=0
i386_linux_built=0


# Handle SIGINT and delete lock file
# 2 SIGINT
# 3 SIGQUIT
# 9 SIGKILL uncatchable
# 15 SIGTERM
trap "rm -f $SML/tools/daily-lock; echo Received interrupt and deleting locks...; exit 1" 2 3 15

if [ $# -eq 0 ]; then
  all=1
  full=1
else
  while [ $# -ge 1 ]; do
    case $1 in
      -rts)	rts=1;;
      -sparc)	sparc=1;;
      -bootstrap)	bootstrap=1;;
      -mips)	mips=1;;
      -i386)	i386=1;;
      -test_suite) test_suite=1;;
      -demos)   demos=1;;
      -foreign_demos)   foreign_demos=1;;
      -benchmarks) benchmarks=1;;
      -applications) applications=1;;
      -no_mail) no_mail=1;;
      -mlworks_server) mlworks_server=1;;
      -full) 	full=1;;
      -all) 	all=1;;
      -spawned)	spawned=1;;
      -base_os)
	if [ $# -le 1 ]; then
	  echo "$usage";
	  exit 8;
	else
	  shift;
	  base_os=$1;
	fi;;
      -base_arch)
	if [ $# -le 1 ]; then
	  echo "$usage";
	  exit 8;
	else
	  shift;
	  base_arch=$1;
	fi;;
      -mips_build_machine)
	if [ $# -le 1 ]; then
	  echo "$usage";
	  exit 8;
	else
	  shift;
	  mips_build_machine=$1;
	fi;;
      -sunos_build_machine)
	if [ $# -le 1 ]; then
	  echo "$usage";
	  exit 8;
	else
	  shift;
	  sunos_build_machine=$1;
	fi;;
      -i386_build_machine)
	if [ $# -le 1 ]; then
	  echo "$usage";
	  exit 8;
	else
	  shift;
	  i386_build_machine=$1;
	fi;;
      *) echo "$usage"; exit 8;;
    esac
    shift
  done
fi

# Assert an exclusive lock on the build

if [ $all -eq 1 ] ; then
  cd $SML
  if test -f tools/daily-lock
  then
    echo "$script: The lock is already set:"
    cat tools/daily-lock 1>&2
    exit 1
  fi

  (echo "$script: Daily build"
   echo "$script: started `date '+%Y-%m-%d %H:%M:%S'` on `hostname`") |
  tee tools/daily-lock


# === BACK UP ===

# Also back up precious files

  echo "$script: Backing up precious object files."
  cd $SML/src
  (tar cvf - `find . '(' -name '*.mo' -o -name '*.o' ')' -print` | gzip --fast -c ) > object-backup.tar.gz


# === CHECK OUT ===

  echo "$script: Checking out MLWorks sources."
  cd $SML/..
  if $SML/tools/coutall -s -V; then
    : echo "Hope checkout successful"
  else
    echo "Hope checkout failed and subsequent compiles have been aborted"
    rm $SML/tools/daily-lock
    exit 9
  fi

  echo "$script: Ensure all links present."
  $SML/tools/mkstruct
fi

ARCH=$base_arch;export ARCH
OS=$base_os;export OS
if [ "$ARCH" = "I386" -a "$OS" = "Linux" ]; then
  make_command=make
else
  make_command=gnumake
fi

# === RUNTIME SYSTEM ===

# first, set up LD_LIBRARY_PATH to point to location of runtime DLL/SO
#
LD_LIBRARY_PATH=$SML/src/rts/bin/$ARCH/$OS${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}
export LD_LIBRARY_PATH
#
if [ $spawned -eq 0 ]; then
  LD_LIBRARY_PATH=/usr/openwin/lib:/usr/dt/lib:$LD_LIBRARY_PATH
fi


rts_status=0
if [ $all -eq 1 -o $rts -eq 1 -o $spawned -eq 1 ]; then
  echo "$script: Making the runtime system."
  cd $SML/src/rts
  rm depend/$ARCH/$OS/*.d
  echo "$script: *.d removed."
  if [ $spawned -eq 1 ]; then
    # Don't clean generated files in a spawned build.
    if ($make_command clean && $make_command -e -k all) then
      rts_status=0
    else
      rts_status=1
      status=6
    fi
  else
    if ($make_command clean cleangen && $make_command -e -k all) then
      rts_status=0
    else
      rts_status=1
      status=6
    fi
  fi
  echo "$script: Made the runtime system."
fi

# === MLWORKS SERVER ===

if [ $all -eq 1 -o $mlworks_server -eq 1 -o $spawned -eq 1 ]; then
  echo $script: Making the mlworks server.
  cd $SML/src/emacs/lisp && $make_command ARCH=$ARCH OS=$OS
  cd $SML/src/emacs/etc && $make_command ARCH=$ARCH OS=$OS
fi

if test \! -d $SML/src/pervassive/SPARC/Solaris 
then
  mkdir -p $SML/src/pervasive/SPARC/Solaris
fi
if test \! -d $SML/src/pervassive/MIPS/Irix 
then
  mkdir -p $SML/src/pervasive/MIPS/Irix
fi
if test \! -d $SML/src/pervassive/I386/Linux 
then
  mkdir -p $SML/src/pervasive/I386/Linux
fi
if test \! -d $SML/src/pervassive/I386/NT 
then
  mkdir -p $SML/src/pervasive/I386/NT
fi

if [ $spawned -eq 0 ]; then

  if [ $all -eq 1 -o $bootstrap -eq 1 ]; then
    # === SET UP SYMBOLIC LINK ===

    if [ $all -eq 1 -o $sparc -eq 1 ]; then
      cd $SML/src
      echo "$script: Removing machine link in ML source:"
      echo "$script: Creating new link machine -> sparc:"
      rm -f machine; ln -s sparc machine
      echo "$script: Removing winsys link in ML source:"
      echo "$script: Creating new link winsys -> motif:"
      rm -f winsys; ln -s motif winsys
      echo "$script: Removing system link in ML source:"
      echo "$script: Creating new link system -> unix:"
      rm -f system; ln -s unix system
    fi

    # === MLWORKS BUILD FROM RELEASED MLWORKS ===

    cd $SML
    if [ $full -eq 1 ]; then
      echo "$script: Removing all ml object files"
      find . -name \*.mo -exec rm {} \;
    fi
    cd $SML/src
    boot_status=1
    echo "$script: Compiling MLWorks batch system under MLWorks."
    if (mlworks-basis -tty -no-init << EOF
      use"make/change_mlworks.sml";
      use"make/dummy_make.sml";
      Shell.Options.set(Shell.Options.ValuePrinter.maximumStrDepth, 0);
      make "system/__mlworks_exit";
      make "main/__toplevel";
      Shell.Options.set(Shell.Options.Compiler.generateLocalFunctions, true);
      MLWorksIo_.set_pervasive_dir("pervasive", Location_.FILE "daily build");
      MLWorksIo_.set_source_path_from_string(".", Location_.FILE "daily build");
      TopLevel_.recompile_pervasive (TopLevel_.Info.make_default_options ()) Options_.default_options handle _ => MLWorksExit.exit MLWorksExit.failure;
      MLWorksIo_.set_object_path("../objects", Location_.FILE "daily build");
      ProjFile_.open_proj "basis.mlp";
      ProjFile_.setCurrentConfiguration (TopLevel_.Info.make_default_options (), Location_.FILE "daily build") (SOME "$ARCH/$OS");
      ProjFile_.setCurrentTargets (TopLevel_.Info.make_default_options (), Location_.FILE "daily build") ["require_all.sml", "platform_specific_exports.sml"];
      TopLevel_.build (TopLevel_.Info.make_default_options ()) Options_.default_options () handle _ => MLWorksExit.exit MLWorksExit.uncaughtIOException;
      ProjFile_.open_proj "batch.mlp";
      ProjFile_.setCurrentConfiguration (TopLevel_.Info.make_default_options (), Location_.FILE "daily build") (SOME "$ARCH/$OS");
      ProjFile_.setCurrentTargets (TopLevel_.Info.make_default_options (), Location_.FILE "daily build") ["__batch.sml", "batch_common_export_filter.sml", "batch_export_filter.sml"];
      TopLevel_.build (TopLevel_.Info.make_default_options ()) Options_.default_options () handle _ => MLWorksExit.exit MLWorksExit.uncaughtIOException;

EOF
      ) then
      boot_status=0
    fi

    cp -p $SML/src/pervasive/*.mo $SML/src/pervasive/$ARCH/$OS

    if [ $boot_status -eq 0 ]; then
      echo

    # === MLWORKS IMAGE BUILD ===

      cd $SML/src/images/$ARCH/$OS
      if ls -l *.img 1>/dev/null 2>&1; then
        for image in *.img
        do
          echo "$script: Zipping MLWorks image $image into $image.old.gz."
          ls -l $image
          if mv -f $image $image.old
          then
            rm -f $image.old.gz
            nice gzip --fast $image.old &
          fi
        done
      fi
      if [ $rts_status -eq 0 ]; then
        echo "$script: Making MLWorks batch image from the mo files."
      $make_command RUNTIME=$SML/src/rts/bin/$ARCH/$OS/main-g batch.img || { echo "$script: $ARCH/$OS image build failed, setting status to 6"; status=6; }
        echo
      else
        echo "$script: Not making batch image, rts build failed."
      fi
    fi
  fi

  if [ $all -eq 1 -o $sparc -eq 1 ]; then
    cd $SML/src/images/$ARCH/$OS
    # Now build interpreters and initial basis, using compiler just produced
    if [ $status -eq 0 ]; then
      echo "$script: Using MLWorks to compile interpreters and revised initial basis"
      # default configuration and targets should be those we want here.

      # only xinterpreter should be made here in future as this should recursively 
      # make the interpreter and require_all targets from the subprojects.
      ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -project $SML/src/basis.mlp -target require_all.sml -target platform_specific_exports.sml -build -dump-objects $SML/objects/$ARCH/$OS/basis.dep || { echo "$script: initial basis compilation failed, setting status to 6"; status=6; }
      ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -project $SML/src/batch.mlp -target batch_common_export_filter.sml -target batch_export_filter.sml -dump-objects $SML/objects/$ARCH/$OS/compiler.dep || { echo "$script: initial basis compilation failed, setting status to 6"; status=6; }
      ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -project $SML/src/interpreter.mlp -target interpreter.sml -target interpreter_export_filter.sml -build || { echo "$script: interpreter compilation failed, setting status to 6"; status=6; }
      ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -project $SML/src/interpreter.mlp -target interpreter_export_filter.sml -dump-objects $SML/objects/$ARCH/$OS/interpreter.dep || { echo "$script: interpreter compilation failed, setting status to 6"; status=6; }
      ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -project $SML/src/xinterpreter.mlp -dump-objects $SML/objects/$ARCH/$OS/xinterpreter.dep -target xinterpreter.sml -build || { echo "$script: xinterpreter compilation failed, setting status to 6"; status=6; }

      if [ $status -eq 0 ]; then
        echo "$script: Making MLWorks interpreter and initial basis images from the mo files."
#         $make_command RUNTIME=$SML/src/rts/bin/$ARCH/$OS/main-g -k basis.img xm.img foreign.img gui.img guib.img || { echo "$script: $ARCH/$OS image build failed, setting status to 6"; status=6; }
        $make_command RUNTIME=$SML/src/rts/bin/$ARCH/$OS/main-g -k basis.img foreign.img gui.img guib.img || { echo "$script: $ARCH/$OS image build failed, setting status to 6"; status=6; }

# At this point we wish to do the SunOS build and test
	if [ $spawned -eq 0 -a "$sunos_build_machine" != "" ]; then
	  echo "$script: Spawning SPARC/SunOS rts, image build and tests on $sunos_build_machine"
	  rsh -n $sunos_build_machine /bin/sh /u/sml/MLW/tools/daily -spawned -base_arch SPARC -base_os SunOS
	  sunos_status=`cat /u/sml/MLW/tools/spawn_status`
	  echo $sunos_status
          if [ -z "$sunos_status" ] ; then sunos_status=1 ; fi
          if [ $sunos_status -ne 0 ]; then
	    echo "$script: spawned job failed on $sunos_build_machine"
	    if [ $sunos_status -gt $status ]; then
	      status=$sunos_status
	    fi
	  fi
	fi
      fi
    else
      echo "$script: sparc compilation failed"
      status=5
    fi
  fi
fi

if [ $spawned -eq 1 ]; then
  # BUILD IMAGES FROM OBJECT FILES PRODUCED BY SPAWNING PROCESS
  if [ $status -eq 0 ]; then
    cd $SML/src/images/$ARCH/$OS
    cp -p $SML/src/pervasive/$ARCH/$OS/*.mo $SML/src/pervasive
    if [ "$OS" = "SunOS" -a "$ARCH" = "SPARC" ]; then
# Special case, same object files as for Solaris
#       $make_command RUNTIME=$SML/src/rts/bin/$ARCH/$OS/main-g -k basis.img xm.img foreign.img tty.img gui.img guib.img || { echo "$script: $ARCH/$OS image build failed, setting status to 6"; status=6; }
      $make_command RUNTIME=$SML/src/rts/bin/$ARCH/$OS/main-g -k basis.img foreign.img tty.img gui.img guib.img || { echo "$script: $ARCH/$OS image build failed, setting status to 6"; status=6; }
    else
      # Need to remove existing images as these will cause confusion (wrong architecture)
      if ls -l *.img 1>/dev/null 2>&1; then
        rm *.img
      fi
#       $make_command RUNTIME=$SML/src/rts/bin/$ARCH/$OS/main-g -k ARCH_OS=$ARCH/$OS basis.img xm.img foreign.img batch.img gui.img guib.img || { echo "$script: $ARCH/$OS image build failed, setting status to 6"; status=6; }
      $make_command RUNTIME=$SML/src/rts/bin/$ARCH/$OS/main-g -k ARCH_OS=$ARCH/$OS basis.img foreign.img batch.img gui.img guib.img || { echo "$script: $ARCH/$OS image build failed, setting status to 6"; status=6; }
    fi
  fi
fi

# === TEST SUITE ===

if [ $all -eq 1 -o $test_suite -eq 1 -o $spawned -eq 1 ]; then
  cd $SML/src/images
  if [ $status -ge 5 ]; then
    echo "$script: Skipping the test suite because of earlier errors"
  elif test -f $ARCH/$OS/gui.img
  then
    echo "$script: Running the test suite using this image:"
    ls -l $ARCH/$OS/gui.img
    cd $SML/test_suite
    mv -f OUTPUT.$ARCH.$OS OUTPUT.$ARCH.$OS.old
    ./CHECK_RESULT_ALL -src ../src -dir $ARCH/$OS | tee OUTPUT.$ARCH.$OS | grep ' failed'
    if test -f OUTPUT.$ARCH.$OS.old
    then
      if diff OUTPUT.$ARCH.$OS.old OUTPUT.$ARCH.$OS > OUTPUT.$ARCH.$OS.diff
      then
        echo "$script: There are no differences from the previous run"
      else
        echo "$script: Here are the differences from the previous run:"
        cat OUTPUT.$ARCH.$OS.diff
        date >> TEST.LOG.$ARCH.$OS
        cat OUTPUT.$ARCH.$OS.diff >> TEST.LOG.$ARCH.$OS
        echo >> TEST.LOG.$ARCH.$OS
      fi
      rm -f OUTPUT.$ARCH.$OS.old.gz OUTPUT.$ARCH.$OS.diff
      nice gzip --fast OUTPUT.$ARCH.$OS.old &
    fi
    if [ $no_mail -eq 0 ]; then
      rm -f FAILED.$OS.$ARCH
      grep ' failed' OUTPUT.$ARCH.$OS > FAILED.$OS.$ARCH &&
      {
	{
          echo "From: Daily build script <sml>"
          echo "To: mlworkers"
          echo "Subject: The test suite failed on: " `hostname`
          echo
	  echo "While running the daily build in: " $SML
          echo "The following tests failed:"
          echo
	  cat FAILED.$OS.$ARCH | sed -e 's/^/> /'
          echo
        } |
        /usr/lib/sendmail -t
      }
    fi
  else
    echo "$script: Lawks!  No MLWorks image.  I can't work under these conditions!"
    if [ $all -eq 1 ]; then
      rm $SML/tools/daily-lock
    fi
    if [ $spawned -eq 1 ]; then
      echo 7 > /u/sml/MLW/tools/spawn_status
    fi
    exit 7
  fi
fi

# === DEMOS ===

if [ $all -eq 1 -o $demos -eq 1 -o $spawned -eq 1 ]; then
cd $SML/src/images
  if [ $status -ge 5 ]; then
    echo "$script: Skipping the demos because of earlier errors"
  elif test -f $ARCH/$OS/gui.img
  then
    echo "$script: Testing the demos using this image:"
    ls -l $ARCH/$OS/gui.img
    cd $SML/demo
    mv -f OUTPUT.$ARCH.$OS OUTPUT.$ARCH.$OS.old
    find $SML/demo/objects -name \*.mo -exec rm {} \;
    find . -type d \( -name win32 -o -name DEPEND -o -name mswindows -o -name foreign \) -prune -o -type f -name \*.sml -print | egrep -v "^.$" 1> poo 2>&1
    files=`sed -e "s?./??" < poo`
    file_list=`cat poo files | sed -e "s?\\./??g;s?^?,\"?g;s?\\.sml?.sml\"?"`

# This removes the first comma and is used to construct a list of source files
# to be used as part of the demo project file.
    new_file_list=`echo *$file_list | sed -e "s?*,??"`

    rm poo 
    for x in $files ; do
      STATUS=0
      (../src/rts/bin/$ARCH/$OS/main -MLWpass MLWargs -load ../src/images/$ARCH/$OS/gui.img MLWargs -no-init -tty -pervasive-dir ../src/pervasive/ -source-path ../src:. << EOF) 1> poo 2>&1 || STATUS=1
      Shell.Project.openProject "$SML/demo/demos.mlp";
      Shell.Project.setFiles [$new_file_list];

      Shell.Project.setTargetDetails "$x";
      Shell.Project.setTargets ["$x"];
      Shell.Project.setConfiguration "$ARCH/$OS";
      Shell.Project.compileAll();
      Shell.Project.loadAll();
EOF
      OUT_FILE=poo
      NULL_FILE=/dev/null
      if [ $STATUS -eq 0 ]
      then
        if egrep 'compiler fault|Intolerable signal' $OUT_FILE 1> $NULL_FILE 2>&1
        then
          echo $x: demo failed, compiler fault.
    	  STATUS=3
        elif egrep ': error:|Uncaught exception' $OUT_FILE 1> $NULL_FILE 2>&1
        then
          echo $x: demo failed, unexpected error.
          STATUS=1
        elif egrep ': warning:' $OUT_FILE 1> $NULL_FILE 2>&1
        then
          echo $x: demo failed, unexpected warning.
          STATUS=1
        else
          echo $x: demo succeeded.
        fi
      else
        echo $x: demo failed: compiler crashed
      fi
      rm poo
    done | tee OUTPUT.$ARCH.$OS | grep ' failed'
    if test -f OUTPUT.$ARCH.$OS.old
    then
      if diff OUTPUT.$ARCH.$OS.old OUTPUT.$ARCH.$OS > OUTPUT.$ARCH.$OS.diff
      then
        echo "$script: There are no differences from the previous run"
      else
        echo "$script: Here are the differences from the previous run:"
        cat OUTPUT.$ARCH.$OS.diff
        date >> TEST.LOG.$ARCH.$OS
        cat OUTPUT.$ARCH.$OS.diff >> TEST.LOG.$ARCH.$OS
        echo >> TEST.LOG.$ARCH.$OS
      fi
      rm -f OUTPUT.$ARCH.$OS.old.gz OUTPUT.$ARCH.$OS.diff
      nice gzip --fast OUTPUT.$ARCH.$OS.old &
    fi
    if [ $no_mail -eq 0 ]; then
      rm -f FAILED.$OS.$ARCH
      grep ' failed' OUTPUT.$ARCH.$OS > FAILED.$OS.$ARCH &&
      {
	{
          echo "From: Daily build script <sml>"
          echo "To: mlworkers"
          echo "Subject: Testing demos failed on: " `hostname`
          echo
	  echo "While running the daily build in: " $SML
          echo "The following demos failed:"
          echo
	  cat FAILED.$OS.$ARCH | sed -e 's/^/> /'
          echo
        } |
        /usr/lib/sendmail -t
      }
    fi
  else
    echo "$script: Lawks!  No MLWorks image.  I can't work under these conditions!"
    if [ $all -eq 1 ]; then
      rm $SML/tools/daily-lock
    fi
    if [ $spawned -eq 1 ]; then
      echo 7 > /u/sml/MLW/tools/spawn_status
    fi
    exit 7
  fi
fi

# === FOREIGN DEMOS ===

if [ $all -eq 1 -o $foreign_demos -eq 1 -o $spawned -eq 1 ]
then
  cd $SML/demo/foreign
  MLWORKS_INCLUDE=$SML/src/rts/src; export MLWORKS_INCLUDE
  output="`./check_foreign_results.sh $SML/src`"
  if test -n "$output" -a $no_mail -eq 0
  then
    { echo "From: Daily build script <sml>"
      echo "To: mlworkers"
      echo "Subject: Testing foreign demos failed on: " `hostname`
      echo
      echo "While running the daily build in: " $SML
      echo "The following demos failed:"
      echo
      echo $output
      echo
     } | /usr/lib/sendmail -t
  fi
fi


# === BENCHMARKS ===

if [ $all -eq 1 -o $benchmarks -eq 1 -o $spawned -eq 1 ]; then
  cd $SML/src/images
  if [ $status -ge 5 ]; then
    echo "$script: Skipping the benchmarks because of earlier errors"
  elif test -f $ARCH/$OS/guib.img
  then
    echo "$script: Testing the benchmarks using this image:"
    ls -l $ARCH/$OS/guib.img
    cd $SML/benchmarks
    mv -f OUTPUT.$ARCH.$OS OUTPUT.$ARCH.$OS.old
    for x in *.sml ; do
      STATUS=0
      OUT_FILE=poo
      (../src/rts/bin/$ARCH/$OS/main -MLWpass MLWargs -load ../src/images/$ARCH/$OS/guib.img MLWargs -no-init -tty -pervasive-dir ../src/pervasive/ -source-path ../src:. < $x) 1> $OUT_FILE 2>&1 || STATUS=1
      NULL_FILE=/dev/null
      if [ $STATUS -eq 0 ]
      then
        if egrep 'compiler fault|Intolerable signal' $OUT_FILE 1> $NULL_FILE 2>&1
        then
          echo $x: benchmark failed, compiler fault.
      	STATUS=3
        elif egrep ': error:|Uncaught exception' $OUT_FILE 1> $NULL_FILE 2>&1
        then
          echo $x: benchmark failed, unexpected error.
          STATUS=1
        elif egrep ': warning:' $OUT_FILE 1> $NULL_FILE 2>&1
        then
          echo $x: benchmark failed, unexpected warning.
          STATUS=1
        else
          echo $x: benchmark succeeded.
        fi
      else
        echo $x: benchmark failed: compiler crashed
      fi
      rm poo
    done | tee OUTPUT.$ARCH.$OS | grep ' failed'
    if test -f OUTPUT.$ARCH.$OS.old
    then
      if diff OUTPUT.$ARCH.$OS.old OUTPUT.$ARCH.$OS > OUTPUT.$ARCH.$OS.diff
      then
        echo "$script: There are no differences from the previous run"
      else
        echo "$script: Here are the differences from the previous run:"
        cat OUTPUT.$ARCH.$OS.diff
        date >> TEST.LOG.$ARCH.$OS
        cat OUTPUT.$ARCH.$OS.diff >> TEST.LOG.$ARCH.$OS
        echo >> TEST.LOG.$ARCH.$OS
      fi
      rm -f OUTPUT.$ARCH.$OS.old.gz OUTPUT.$ARCH.$OS.diff
      nice gzip --fast OUTPUT.$ARCH.$OS.old &
    fi
    if [ $no_mail -eq 0 ]; then
      rm -f FAILED.$OS.$ARCH
      grep ' failed' OUTPUT.$ARCH.$OS > FAILED.$OS.$ARCH &&
      {
	{
          echo "From: Daily build script <sml>"
          echo "To: mlworkers"
          echo "Subject: Testing benchmarks failed on: " `hostname`
          echo
	  echo "While running the daily build in: " $SML
          echo "The following benchmarks failed:"
          echo
	  cat FAILED.$OS.$ARCH | sed -e 's/^/> /'
          echo
        } |
        /usr/lib/sendmail -t
      }
    fi
  else
    echo "$script: Lawks!  No MLWorks image.  I can't work under these conditions!"
    if [ $all -eq 1 ]; then
      rm $SML/tools/daily-lock
    fi
    if [ $spawned -eq 1 ]; then
      echo 7 > /u/sml/MLW/tools/spawn_status
    fi
    exit 7
  fi
fi

# === APPLICATIONS ===

if [ $all -eq 1 -o $applications -eq 1 ]; then
  if [ $spawned -eq 0 ]; then
# Don't do this stuff in the spawned builds, as it will take too long
    cd $SML/src/images
    if [ $status -ge 5 ]; then
      echo "$script: Skipping the applications because of earlier errors"
    elif test -f $ARCH/$OS/guib.img
    then
      echo "$script: Testing the applications using this image:"
      ls -l $ARCH/$OS/guib.img
      cd $SML/app_tests
      mv -f OUTPUT.$ARCH.$OS OUTPUT.$ARCH.$OS.old
      for x in `cat dirs` ; do
        STATUS=0
        OUT_FILE=poo
        ((echo "OS.FileSys.chDir\"$x\";";cat $x/load.sml ) | ../src/rts/bin/$ARCH/$OS/main -MLWpass MLWargs -load ../src/images/$ARCH/$OS/guib.img MLWargs -no-init -tty -pervasive-dir ../src/pervasive/ -source-path ../src:.) 1> $OUT_FILE 2>&1 || STATUS=1
        NULL_FILE=/dev/null
        if [ $STATUS -eq 0 ]
        then
          if egrep 'compiler fault|Intolerable signal' $OUT_FILE 1> $NULL_FILE 2>&1
          then
            echo $x: application failed, compiler fault.
        	STATUS=3
          elif egrep ': error:|Uncaught exception' $OUT_FILE 1> $NULL_FILE 2>&1
          then
            echo $x: application failed, unexpected error.
            STATUS=1
          elif egrep ': warning:' $OUT_FILE 1> $NULL_FILE 2>&1
          then
            echo $x: application failed, unexpected warning.
            STATUS=1
          else
            echo $x: application succeeded.
          fi
        else
          echo $x: application failed: compiler crashed
        fi
      done | tee OUTPUT.$ARCH.$OS | grep ' failed'
      if test -f OUTPUT.$ARCH.$OS.old
      then
        if diff OUTPUT.$ARCH.$OS.old OUTPUT.$ARCH.$OS > OUTPUT.$ARCH.$OS.diff
        then
          echo "$script: There are no differences from the previous run"
        else
          echo "$script: Here are the differences from the previous run:"
          cat OUTPUT.$ARCH.$OS.diff
          date >> TEST.LOG.$ARCH.$OS
          cat OUTPUT.$ARCH.$OS.diff >> TEST.LOG.$ARCH.$OS
          echo >> TEST.LOG.$ARCH.$OS
        fi
        rm -f OUTPUT.$ARCH.$OS.old.gz OUTPUT.$ARCH.$OS.diff
        nice gzip --fast OUTPUT.$ARCH.$OS.old &
      fi
      if [ $no_mail -eq 0 ]; then
        rm -f FAILED.$OS.$ARCH
        grep ' failed' OUTPUT.$ARCH.$OS > FAILED.$OS.$ARCH &&
        {
  	{
            echo "From: Daily build script <sml>"
            echo "To: mlworkers"
            echo "Subject: Testing applications failed on: " `hostname`
            echo
  	  echo "While running the daily build in: " $SML
            echo "The following applications failed:"
            echo
  	  cat FAILED.$OS.$ARCH | sed -e 's/^/> /'
            echo
          } |
          /usr/lib/sendmail -t
        }
      fi
    else
      echo "$script: Lawks!  No MLWorks image.  I can't work under these conditions!"
      if [ $all -eq 1 ]; then
        rm $SML/tools/daily-lock
      fi
      exit 7
    fi
  fi
fi

# We're going to use the stuff built so far
# so give up if it didn't work
# We also give up if this was a spawned job, as we've done all we would do anyway.

if [ $status -ne 0 -o $spawned -eq 1 ]; then
  if [ $all -eq 1 ]; then
    rm $SML/tools/daily-lock
  fi
  if [ $spawned -eq 1 ]; then
    echo $status > /u/sml/MLW/tools/spawn_status
  fi
  exit $status
fi

# === NOW DO THE MIPS BUILD ===

if [ $all -eq 1 -o $mips -eq 1 ]; then
  cd $SML/src

  echo "$script: Using MLWorks to build sparc->mips mos:"

  if ( rts/runtime -MLWpass MLWargs -batch -load images/$ARCH/$OS/batch.img MLWargs -local-functions on -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -project $SML/src/basis.mlp -target require_all.sml -target platform_specific_exports.sml -configuration MIPS/Irix -build &&
       rts/runtime -MLWpass MLWargs -batch -load images/$ARCH/$OS/batch.img MLWargs -local-functions on -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -project $SML/src/batch.mlp -target __batch.sml -target batch_common_export_filter.sml -target batch_export_filter.sml -configuration MIPS/Irix -build
  ) then
    # === MIPS IMAGE BUILD ===

    cd $SML/src/images/MIPS/Irix
    if ls -l *.img 1>/dev/null 2>&1; then
      for image in *.img
      do
        echo "$script: Zipping mips image $image into $image.old.gz."
        ls -l $image
        if mv -f $image $image.old
        then
          rm -f $image.old.gz
          nice gzip --fast $image.old &
        fi
      done
    fi

    echo "$script: Making Mips images from the mo files."
   $make_command RUNTIME=$SML/src/rts/bin/$ARCH/$OS/main-g -k batch.img || { echo "$script: mips compiler image build failed, setting status to 6"; status=6; }
    echo

    # Now build mips object files (ie to run on the mips)
    if [ $status -eq 0 ]; then

      # Remove mos needed by the cross compiler which is already made.
      find $SML/objects/MIPS/Irix -name \*.mo -exec rm {} \;

      # Now invoke the batch compiler we just made to do the compilation
      echo "$script: Using MLWorks to compile mips based object files"
      if [ $full -eq 1 ]; then
        rm -f $SML/src/pervasive/*.mo
      fi
      { ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -compile-pervasive -project $SML/src/basis.mlp -target require_all.sml -target platform_specific_exports.sml -configuration MIPS/Irix -build && ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/batch.mlp -target __batch.sml -target batch_common_export_filter.sml -target batch_export_filter.sml -configuration MIPS/Irix -build && ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/basis.mlp -target require_all.sml -target platform_specific_exports.sml -configuration MIPS/Irix -build && ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/interpreter.mlp -target interpreter.sml -target interpreter_export_filter.sml -configuration MIPS/Irix -build && ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/xinterpreter.mlp  -target xinterpreter.sml -configuration MIPS/Irix -build; } || { echo "$script: mips compilation failed, setting status to 6"; status=6; }

    fi
    if [ $status -eq 0 ] ; then
      mips_irix_built=1
      rm -f $SML/src/pervasive/MIPS/Irix/*.mo
      cp -p $SML/src/pervasive/*.mo $SML/src/pervasive/MIPS/Irix
    fi
  else
    echo "$script: mips compiler compilation failed, setting status to 5"
    status=5
  fi
# Now restore the $ARCH/$OS pervasive object files
# needed to make the next cross compiler
cp -p $SML/src/pervasive/$ARCH/$OS/*.mo $SML/src/pervasive
fi

# === NOW DO THE I386 BUILD ===

if [ $all -eq 1 -o $i386 -eq 1 ]; then
  cd $SML/src

  echo "$script: Using MLWorks to build sparc->i386 mos:"

  if ( rts/runtime -MLWpass MLWargs -batch -load images/$ARCH/$OS/batch.img MLWargs -local-functions on -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -project $SML/src/basis.mlp -target require_all.sml -target platform_specific_exports.sml -configuration I386/Linux -build &&
       rts/runtime -MLWpass MLWargs -batch -load images/$ARCH/$OS/batch.img MLWargs -local-functions on -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -project $SML/src/batch.mlp -target __batch.sml -target batch_common_export_filter.sml -target batch_export_filter.sml -configuration I386/Linux -build
  ) then
    echo
  # === I386 IMAGE BUILD ===

    cd $SML/src/images/I386/Linux
    if ls -l *.img 1>/dev/null 2>&1; then
      for image in *.img
      do
        echo "$script: Zipping i386 image $image into $image.old.gz."
        ls -l $image
        if mv -f $image $image.old
        then
          rm -f $image.old.gz
          nice gzip --fast $image.old &
        fi
      done
    fi

    echo "$script: Making I386 images from the mo files."
    $make_command RUNTIME=$SML/src/rts/bin/$ARCH/$OS/main-g -k batch.img || { echo "$script: i386 compiler image build failed, setting status to 6"; status=6; }
    echo

    # Now build i386 object files (ie to run on the i386)
    # These come in two flavours, for Linux and for NT
    if [ $status -eq 0 ]; then

      # Remove mos needed by the cross compiler which is already made.
      find $SML/objects/I386/Linux -name \*.mo -exec rm {} \;

      # Now invoke the batch compiler we just made to do the compilation
      echo "$script: Using MLWorks to compile i386 based object files for Linux"
      if [ $full -eq 1 ]; then
        rm -f $SML/src/pervasive/*.mo
      fi
      { ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -compile-pervasive -project $SML/src/basis.mlp -target require_all.sml -target platform_specific_exports.sml -configuration I386/Linux -build && ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/batch.mlp -target __batch.sml -target batch_common_export_filter.sml -target batch_export_filter.sml -configuration I386/Linux -build && ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/basis.mlp -target require_all.sml -target platform_specific_exports.sml -configuration I386/Linux -build && ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/interpreter.mlp -target interpreter.sml -target interpreter_export_filter.sml -configuration I386/Linux -build && ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/xinterpreter.mlp  -target xinterpreter.sml -configuration I386/Linux -build; } || { echo "$script: i386 compilation for Linux failed, setting status to 6"; status=6; }

      if [ $status -eq 0 ] ; then
	i386_linux_built=1
        rm -f $SML/src/pervasive/I386/Linux/*.mo
        cp -p $SML/src/pervasive/*.mo $SML/src/pervasive/I386/Linux	
      fi

    fi
  else
    echo "$script: i386 compiler compilation failed, setting status to 5"
    status=5
  fi
# Now restore the $ARCH/$OS pervasive object files
# needed to make the next cross compiler
cp -p $SML/src/pervasive/$ARCH/$OS/*.mo $SML/src/pervasive
fi


if [ $spawned -eq 0 -a $mips_irix_built -eq 1 -a "$mips_build_machine" != "" ]; then
  echo "$script: Spawning MIPS/Irix rts, image build and tests on $mips_build_machine"
  # make sure pervasive mos are recompiled
  rm -f $SML/src/pervasive/*.mo
  rsh -n $mips_build_machine /bin/sh /u/sml/MLW/tools/daily -spawned -base_arch MIPS -base_os Irix
  mips_status=`cat /u/sml/MLW/tools/spawn_status`
  echo $mips_status
  if [ -z "$mips_status" ] ; then mips_status=1 ; fi
  if [ $mips_status -ne 0 ]; then
    echo "$script: spawned job failed on $mips_build_machine"
    if [ $mips_status -gt $status ]; then
      status=$mips_status
    fi
  fi
fi

if [ $spawned -eq 0 -a $i386_linux_built -eq 1 -a "$i386_build_machine" != "" ]; then
  echo "$script: Spawning I386/Linux rts, image build and tests on $i386_build_machine"
  # make sure pervasive mos are recompiled
  rm -f $SML/src/pervasive/*.mo
  rsh -n $i386_build_machine /bin/sh /u/sml/MLW/tools/daily -spawned -base_arch I386 -base_os Linux
  i386_status=`cat /u/sml/MLW/tools/spawn_status`
  if [ -z "$i386_status" ] ; then i386_status=1 ; fi
  if [ $i386_status -ne 0 ]; then
    echo "$script: spawned job failed on $i386_build_machine"
    if [ $i386_status -gt $status ]; then
      status=$i386_status
    fi
  fi
fi

if [ $all -eq 1 ]; then
  (echo "$script: Daily build"
   echo "$script: finished `date '+%Y-%m-%d %H:%M:%S'`")
  rm $SML/tools/daily-lock
fi
echo "$script: Daily build status : $status"
exit $status
@


1.190
log
@[Bug #190558]
Don't include DEPEND directory when searching for demo files.
@
text
@d8 4
d779 1
d784 1
a784 1
      TopLevel_.recompile_pervasive (TopLevel_.Info.make_default_options ()) Options_.default_options handle _ => Exit_.exit Exit_.failure;
d789 1
a789 1
      TopLevel_.build (TopLevel_.Info.make_default_options ()) Options_.default_options () handle _ => Exit_.exit Exit_.uncaughtIOException;
d793 1
a793 1
      TopLevel_.build (TopLevel_.Info.make_default_options ()) Options_.default_options () handle _ => Exit_.exit Exit_.uncaughtIOException;
@


1.189
log
@[Bug #190506]
remove old FI but reinstate foreign.img
@
text
@d8 4
d958 1
a958 1
    find . -type d \( -name win32 -o -name mswindows -o -name foreign \) -prune -o -type f -name \*.sml -print | egrep -v "^.$" 1> poo 2>&1
@


1.188
log
@[Bug #30286]
Add platform_specific_exports target for basis
@
text
@d8 4
d838 2
a839 2
#         $make_command RUNTIME=$SML/src/rts/bin/$ARCH/$OS/main-g -k basis.img xm.img gui.img guib.img || { echo "$script: $ARCH/$OS image build failed, setting status to 6"; status=6; }
        $make_command RUNTIME=$SML/src/rts/bin/$ARCH/$OS/main-g -k basis.img gui.img guib.img || { echo "$script: $ARCH/$OS image build failed, setting status to 6"; status=6; }
d870 2
a871 2
#       $make_command RUNTIME=$SML/src/rts/bin/$ARCH/$OS/main-g -k basis.img xm.img tty.img gui.img guib.img || { echo "$script: $ARCH/$OS image build failed, setting status to 6"; status=6; }
      $make_command RUNTIME=$SML/src/rts/bin/$ARCH/$OS/main-g -k basis.img tty.img gui.img guib.img || { echo "$script: $ARCH/$OS image build failed, setting status to 6"; status=6; }
d877 2
a878 2
#       $make_command RUNTIME=$SML/src/rts/bin/$ARCH/$OS/main-g -k ARCH_OS=$ARCH/$OS basis.img xm.img batch.img gui.img guib.img || { echo "$script: $ARCH/$OS image build failed, setting status to 6"; status=6; }
      $make_command RUNTIME=$SML/src/rts/bin/$ARCH/$OS/main-g -k ARCH_OS=$ARCH/$OS basis.img batch.img gui.img guib.img || { echo "$script: $ARCH/$OS image build failed, setting status to 6"; status=6; }
@


1.187
log
@[Bug #190505]
Make sure basis.mlp gets processed before batch.mlp on all platforms
@
text
@d8 4
d775 1
a775 1
      ProjFile_.setCurrentTargets (TopLevel_.Info.make_default_options (), Location_.FILE "daily build") ["require_all.sml"];
d826 1
a826 1
      ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -project $SML/src/basis.mlp -target require_all.sml -build -dump-objects $SML/objects/$ARCH/$OS/basis.dep || { echo "$script: initial basis compilation failed, setting status to 6"; status=6; }
d1251 1
a1251 1
  if ( rts/runtime -MLWpass MLWargs -batch -load images/$ARCH/$OS/batch.img MLWargs -local-functions on -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -project $SML/src/basis.mlp -target require_all.sml -configuration MIPS/Irix -build &&
d1285 1
a1285 1
      { ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -compile-pervasive -project $SML/src/basis.mlp -target require_all -configuration MIPS/Irix -build && ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/batch.mlp -target __batch.sml -target batch_common_export_filter.sml -target batch_export_filter.sml -configuration MIPS/Irix -build && ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/basis.mlp -target require_all.sml -configuration MIPS/Irix -build && ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/interpreter.mlp -target interpreter.sml -target interpreter_export_filter.sml -configuration MIPS/Irix -build && ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/xinterpreter.mlp  -target xinterpreter.sml -configuration MIPS/Irix -build; } || { echo "$script: mips compilation failed, setting status to 6"; status=6; }
d1309 1
a1309 1
  if ( rts/runtime -MLWpass MLWargs -batch -load images/$ARCH/$OS/batch.img MLWargs -local-functions on -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -project $SML/src/basis.mlp -target require_all -configuration I386/Linux -build &&
d1345 1
a1345 1
      { ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -compile-pervasive -project $SML/src/basis.mlp -target require_all -configuration I386/Linux -build && ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/batch.mlp -target __batch.sml -target batch_common_export_filter.sml -target batch_export_filter.sml -configuration I386/Linux -build && ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/basis.mlp -target require_all.sml -configuration I386/Linux -build && ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/interpreter.mlp -target interpreter.sml -target interpreter_export_filter.sml -configuration I386/Linux -build && ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/xinterpreter.mlp  -target xinterpreter.sml -configuration I386/Linux -build; } || { echo "$script: i386 compilation for Linux failed, setting status to 6"; status=6; }
@


1.186
log
@[Bug #190504]
Modify to generate dumps of mo dependencies
@
text
@d8 4
d1247 2
a1248 1
  if ( rts/runtime -MLWpass MLWargs -batch -load images/$ARCH/$OS/batch.img MLWargs -local-functions on -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -project $SML/src/batch.mlp -target __batch.sml -target batch_common_export_filter.sml -target batch_export_filter.sml -configuration MIPS/Irix -build
d1281 1
a1281 1
      { ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -compile-pervasive -project $SML/src/batch.mlp -target __batch.sml -target batch_common_export_filter.sml -target batch_export_filter.sml -configuration MIPS/Irix -build && ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/basis.mlp -target require_all.sml -configuration MIPS/Irix -build && ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/interpreter.mlp -target interpreter.sml -target interpreter_export_filter.sml -configuration MIPS/Irix -build && ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/xinterpreter.mlp  -target xinterpreter.sml -configuration MIPS/Irix -build; } || { echo "$script: mips compilation failed, setting status to 6"; status=6; }
d1305 2
a1306 1
  if ( rts/runtime -MLWpass MLWargs -batch -load images/$ARCH/$OS/batch.img MLWargs -local-functions on -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -project $SML/src/batch.mlp -target __batch.sml -target batch_common_export_filter.sml -target batch_export_filter.sml -configuration I386/Linux -build
d1341 1
a1341 1
      { ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -compile-pervasive -project $SML/src/batch.mlp -target __batch.sml -target batch_common_export_filter.sml -target batch_export_filter.sml -configuration I386/Linux -build && ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/basis.mlp -target require_all.sml -configuration I386/Linux -build && ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/interpreter.mlp -target interpreter.sml -target interpreter_export_filter.sml -configuration I386/Linux -build && ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/xinterpreter.mlp  -target xinterpreter.sml -configuration I386/Linux -build; } || { echo "$script: i386 compilation for Linux failed, setting status to 6"; status=6; }
@


1.185
log
@[Bug #190505]
Modify to deal with precompilation/additional targets
@
text
@d8 4
d818 2
a819 1
      ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -project $SML/src/basis.mlp -target require_all.sml -build || { echo "$script: initial basis compilation failed, setting status to 6"; status=6; }
d821 2
a822 1
      ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -project $SML/src/xinterpreter.mlp -target xinterpreter.sml -build || { echo "$script: xinterpreter compilation failed, setting status to 6"; status=6; }
d826 2
a827 1
        $make_command RUNTIME=$SML/src/rts/bin/$ARCH/$OS/main-g -k basis.img xm.img gui.img guib.img || { echo "$script: $ARCH/$OS image build failed, setting status to 6"; status=6; }
d858 2
a859 1
      $make_command RUNTIME=$SML/src/rts/bin/$ARCH/$OS/main-g -k basis.img xm.img tty.img gui.img guib.img || { echo "$script: $ARCH/$OS image build failed, setting status to 6"; status=6; }
d865 2
a866 1
      $make_command RUNTIME=$SML/src/rts/bin/$ARCH/$OS/main-g -k ARCH_OS=$ARCH/$OS basis.img xm.img batch.img gui.img guib.img || { echo "$script: $ARCH/$OS image build failed, setting status to 6"; status=6; }
@


1.184
log
@[Bug #70203]
Modify for new argument passing
@
text
@d8 4
d761 4
d767 1
a767 1
      ProjFile_.setCurrentTargets (TopLevel_.Info.make_default_options (), Location_.FILE "daily build") ["__batch.sml"];
d814 3
a816 3
      ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -project $SML/src/basis.mlp -build || { echo "$script: initial basis compilation failed, setting status to 6"; status=6; }
      ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -project $SML/src/interpreter.mlp -build || { echo "$script: interpreter compilation failed, setting status to 6"; status=6; }
      ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -project $SML/src/xinterpreter.mlp -build || { echo "$script: xinterpreter compilation failed, setting status to 6"; status=6; }
d1234 1
a1234 1
  if ( rts/runtime -MLWpass MLWargs -batch -load images/$ARCH/$OS/batch.img MLWargs -local-functions on -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -project $SML/src/batch.mlp -target __batch.sml -configuration MIPS/Irix -build
d1267 1
a1267 1
      { ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -compile-pervasive -project $SML/src/batch.mlp -target __batch.sml -configuration MIPS/Irix -build && ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/basis.mlp -configuration MIPS/Irix -build && ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/interpreter.mlp -configuration MIPS/Irix -build && ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/xinterpreter.mlp -configuration MIPS/Irix -build; } || { echo "$script: mips compilation failed, setting status to 6"; status=6; }
d1291 1
a1291 1
  if ( rts/runtime -MLWpass MLWargs -batch -load images/$ARCH/$OS/batch.img MLWargs -local-functions on -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -project $SML/src/batch.mlp -target __batch.sml -configuration I386/Linux -build
d1326 1
a1326 1
      { ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -compile-pervasive -project $SML/src/batch.mlp -target __batch.sml -configuration I386/Linux -build && ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/basis.mlp -configuration I386/Linux -build && ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/interpreter.mlp -configuration I386/Linux -build && ../../../rts/runtime -MLWpass MLWargs -batch -load batch.img MLWargs -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/xinterpreter.mlp -configuration I386/Linux -build; } || { echo "$script: i386 compilation for Linux failed, setting status to 6"; status=6; }
@


1.183
log
@[Bug #70175]
Modify test on result from spawned jobs
@
text
@d8 4
d806 3
a808 3
      ../../../rts/runtime -batch -load batch.img -pass a -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -project $SML/src/basis.mlp -build a || { echo "$script: initial basis compilation failed, setting status to 6"; status=6; }
      ../../../rts/runtime -batch -load batch.img -pass a -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -project $SML/src/interpreter.mlp -build a || { echo "$script: interpreter compilation failed, setting status to 6"; status=6; }
      ../../../rts/runtime -batch -load batch.img -pass a -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -project $SML/src/xinterpreter.mlp -build a || { echo "$script: xinterpreter compilation failed, setting status to 6"; status=6; }
d936 1
a936 1
      (../src/rts/bin/$ARCH/$OS/main -load ../src/images/$ARCH/$OS/gui.img -pass a -no-init -tty -pervasive-dir ../src/pervasive/ -source-path ../src:. a << EOF) 1> poo 2>&1 || STATUS=1
d1053 1
a1053 1
      (../src/rts/bin/$ARCH/$OS/main -load ../src/images/$ARCH/$OS/guib.img -pass a -no-init -tty -pervasive-dir ../src/pervasive/ -source-path ../src:. a < $x) 1> $OUT_FILE 2>&1 || STATUS=1
d1139 1
a1139 1
        ((echo "OS.FileSys.chDir\"$x\";";cat $x/load.sml ) | ../src/rts/bin/$ARCH/$OS/main -load ../src/images/$ARCH/$OS/guib.img -pass a -no-init -tty -pervasive-dir ../src/pervasive/ -source-path ../src:. a) 1> $OUT_FILE 2>&1 || STATUS=1
d1226 1
a1226 1
  if ( rts/runtime -batch -load images/$ARCH/$OS/batch.img -pass a -local-functions on -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -project $SML/src/batch.mlp -target __batch.sml -configuration MIPS/Irix -build a
d1259 1
a1259 1
      { ../../../rts/runtime -batch -load batch.img -pass a -local-functions on -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -compile-pervasive -project $SML/src/batch.mlp -target __batch.sml -configuration MIPS/Irix -build a && ../../../rts/runtime -batch -load batch.img -pass a -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/basis.mlp -configuration MIPS/Irix -build a && ../../../rts/runtime -batch -load batch.img -pass a -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/interpreter.mlp -configuration MIPS/Irix -build a && ../../../rts/runtime -batch -load batch.img -pass a -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/xinterpreter.mlp -configuration MIPS/Irix -build a; } || { echo "$script: mips compilation failed, setting status to 6"; status=6; }
d1283 1
a1283 1
  if ( rts/runtime -batch -load images/$ARCH/$OS/batch.img -pass a -local-functions on -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -project $SML/src/batch.mlp -target __batch.sml -configuration I386/Linux -build a
d1318 1
a1318 1
      { ../../../rts/runtime -batch -load batch.img -pass a -local-functions on -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -compile-pervasive -project $SML/src/batch.mlp -target __batch.sml -configuration I386/Linux -build a && ../../../rts/runtime -batch -load batch.img -pass a -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/basis.mlp -configuration I386/Linux -build a && ../../../rts/runtime -batch -load batch.img -pass a -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/interpreter.mlp -configuration I386/Linux -build a && ../../../rts/runtime -batch -load batch.img -pass a -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/xinterpreter.mlp -configuration I386/Linux -build a; } || { echo "$script: i386 compilation for Linux failed, setting status to 6"; status=6; }
@


1.182
log
@[Bug #70128]
Run demos etc -no-init
@
text
@d8 4
d817 1
a817 1
          if [ ! $sunos_status ]; then
d1341 1
a1341 1
  if [ ! $mips_status ]; then
d1356 1
a1356 1
  if [ ! $i386_status ]; then
@


1.181
log
@[Bug #70148]
Fix application tests to use load.sml as stdin
@
text
@d8 4
d928 1
a928 1
      (../src/rts/bin/$ARCH/$OS/main -load ../src/images/$ARCH/$OS/gui.img -pass a -tty -pervasive-dir ../src/pervasive/ -source-path ../src:. a << EOF) 1> poo 2>&1 || STATUS=1
d1045 1
a1045 1
      (../src/rts/bin/$ARCH/$OS/main -load ../src/images/$ARCH/$OS/guib.img -pass a -tty -pervasive-dir ../src/pervasive/ -source-path ../src:. a < $x) 1> $OUT_FILE 2>&1 || STATUS=1
d1131 1
a1131 1
        ((echo "OS.FileSys.chDir\"$x\";";cat $x/load.sml ) | ../src/rts/bin/$ARCH/$OS/main -load ../src/images/$ARCH/$OS/guib.img -pass a -tty -pervasive-dir ../src/pervasive/ -source-path ../src:. a) 1> $OUT_FILE 2>&1 || STATUS=1
@


1.180
log
@Make demos function correctly again
@
text
@d8 3
d1127 1
a1127 4
        (../src/rts/bin/$ARCH/$OS/main -load ../src/images/$ARCH/$OS/guib.img -pass a -tty -pervasive-dir ../src/pervasive/ -source-path ../src:. a <<EOF) 1> $OUT_FILE 2>&1 || STATUS=1
	OS.FileSys.chDir"$x";
	use"load.sml";
EOF
@


1.179
log
@[Bug #70130]
Make sure checks for error and warning can't be triggered by correct code
@
text
@d8 4
d912 1
a912 1
    file_list=`sed -e "s?./?,\"?" < poo | sed -e "s?.sml?.sml\"?"`
@


1.178
log
@[Bug #30369]
Replace source path with a list of files.
@
text
@d8 4
d935 1
a935 1
        elif egrep 'error:|Uncaught exception' $OUT_FILE 1> $NULL_FILE 2>&1
d939 1
a939 1
        elif egrep warning $OUT_FILE 1> $NULL_FILE 2>&1
d1042 1
a1042 1
        elif egrep 'error:|Uncaught exception' $OUT_FILE 1> $NULL_FILE 2>&1
d1046 1
a1046 1
        elif egrep warning $OUT_FILE 1> $NULL_FILE 2>&1
d1131 1
a1131 1
          elif egrep 'error:|Uncaught exception' $OUT_FILE 1> $NULL_FILE 2>&1
d1135 1
a1135 1
          elif egrep warning $OUT_FILE 1> $NULL_FILE 2>&1
@


1.177
log
@Modify to add testing of external applications
@
text
@d8 3
d902 9
a910 1
    files=`find . -type d \( -name win32 -o -name mswindows -o -name foreign \) -prune -o -type f -name \*.sml -print | sed -e "s?./??" | egrep -v "^.$"`
d915 2
@


1.176
log
@[Bug #30413]
Change calls to exit to use abstract status
@
text
@d8 4
d485 1
a485 1
usage="USAGE: $script [-full] [-rts] [-bootstrap] [-sparc] [-mips] [-i386] [-test_suite] [-demos] [-foreign_demos] [-benchmarks] [-no_mail] [-mlworks_server] [-base_os <OS:default Solaris>] [-base_arch <ARCH:default SPARC>] [-spawned] [-mips_build_machine <MACHINE>] [-sunos_build_machine <MACHINE>] [-i386_build_machine <MACHINE>] [-all]"
d495 1
d530 1
d979 2
d1002 2
d1083 86
@


1.175
log
@[Bug #30292]
Fix demos to use Shell.Project loading.
@
text
@d8 4
d723 1
a723 1
      TopLevel_.recompile_pervasive (TopLevel_.Info.make_default_options ()) Options_.default_options handle _ => Exit_.exit 1;
d728 1
a728 1
      TopLevel_.build (TopLevel_.Info.make_default_options ()) Options_.default_options () handle _ => Exit_.exit 2;
@


1.174
log
@[Bug #30401]
Sort out further problems with pervasive object files
@
text
@d8 4
d722 1
a722 1
      ProjFile_.setCurrentConfiguration (TopLevel_.Info.make_default_options (), Location_.FILE "daily build") "$ARCH/$OS";
d888 2
a889 1
    files=`find . -type d \( -name win32 -o -name mswindows -o -name foreign \) -prune -o -type f -name \*.sml -print | egrep -v "^.$"`
d893 6
a898 1
      Shell.File.loadSource "$x";
@


1.173
log
@[Bug #30401]
Fix cross compilation.
@
text
@d8 4
d1083 1
a1083 1
  if ( rts/runtime -batch -load images/$ARCH/$OS/batch.img -pass a -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -project $SML/src/batch.mlp -target __batch.sml -configuration MIPS/Irix -build a
d1128 3
d1140 1
a1140 1
  if ( rts/runtime -batch -load images/$ARCH/$OS/batch.img -pass a -local-functions on -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -project $SML/src/batch.mlp -target __batch.sml -configuration I386/Linux -build a
d1188 3
@


1.172
log
@[Bug #30401]
Make sure incompatible pervasive mos don't get left around
before spawned builds
And fix some Y2K-isms
@
text
@d8 6
d624 1
d658 17
a695 4
    if test \! -d objects/$ARCH/$OS
    then
      mkdir -p objects/$ARCH/$OS
    fi
d796 1
d805 1
a805 1
      $make_command RUNTIME=$SML/src/rts/bin/$ARCH/$OS/main-g -k ARCH_OS=$ARCH/$OS/ basis.img xm.img batch.img gui.img guib.img || { echo "$script: $ARCH/$OS image build failed, setting status to 6"; status=6; }
d813 1
a813 1
cd $SML/src/images
a1078 6
  # Ensure the object directory will exist
  if test \! -d $SML/objects/MIPS/Irix
  then
    mkdir -p $SML/objects/MIPS/Irix
  fi

d1110 1
a1110 1
        rm -f $SML/src/pervasive/MIPS/Irix/*.mo
d1117 2
a1132 5
  if test \! -d $SML/objects/I386/Linux
  then
    mkdir -p $SML/objects/I386/Linux
  fi

a1162 5
      if test \! -d $SML/objects/I386/NT
      then
        mkdir -p $SML/objects/I386/NT
      fi

d1166 1
a1166 1
        rm -f $SML/src/pervasive/I386/Linux/*.mo
d1172 2
d1183 1
a1188 1
  cp -p $SML/src/pervasive/$ARCH/$OS/*.mo $SML/src/pervasive/ 
a1201 1

a1204 1
  cp -p $SML/src/pervasive/$ARCH/$OS/*.mo $SML/src/pervasive/ 
@


1.171
log
@[Bug #30229]
turn on local functions when using batch compiler for full optimisation.
@
text
@d8 4
d570 1
a570 1
   echo "$script: started `date '+19%y-%m-%d %H:%M:%S'` on `hostname`") |
d703 2
d788 1
d1176 2
d1179 1
d1193 3
d1197 1
d1210 1
a1210 1
   echo "$script: finished `date '+19%y-%m-%d %H:%M:%S'`")
@


1.170
log
@[Bug #30312]
Remove NT cross compile as this can no longer be done
since we can't make the generated file keys.sml on unix
@
text
@d8 5
d684 1
d736 3
a738 3
      ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -project $SML/src/basis.mlp -build a || { echo "$script: initial basis compilation failed, setting status to 6"; status=6; }
      ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -project $SML/src/interpreter.mlp -build a || { echo "$script: interpreter compilation failed, setting status to 6"; status=6; }
      ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -project $SML/src/xinterpreter.mlp -build a || { echo "$script: xinterpreter compilation failed, setting status to 6"; status=6; }
d1057 1
a1057 1
  if ( rts/runtime -batch -load images/$ARCH/$OS/batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -project $SML/src/batch.mlp -target __batch.sml -configuration MIPS/Irix -build a
d1090 1
a1090 1
      { ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -compile-pervasive -project $SML/src/batch.mlp -target __batch.sml -configuration MIPS/Irix -build a && ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/basis.mlp -configuration MIPS/Irix -build a && ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/interpreter.mlp -configuration MIPS/Irix -build a && ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/xinterpreter.mlp -configuration MIPS/Irix -build a; } || { echo "$script: mips compilation failed, setting status to 6"; status=6; }
d1114 1
a1114 1
  if ( rts/runtime -batch -load images/$ARCH/$OS/batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -project $SML/src/batch.mlp -target __batch.sml -configuration I386/Linux -build a
d1154 1
a1154 1
      { ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -compile-pervasive -project $SML/src/batch.mlp -target __batch.sml -configuration I386/Linux -build a && ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/basis.mlp -configuration I386/Linux -build a && ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/interpreter.mlp -configuration I386/Linux -build a && ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/xinterpreter.mlp -configuration I386/Linux -build a; } || { echo "$script: i386 compilation for Linux failed, setting status to 6"; status=6; }
@


1.169
log
@[Bug #30365]
daily build can now use subprojects.
@
text
@d8 4
d1077 1
a1077 1
      rm -f $SML/objects/MIPS/Irix/*.mo
d1136 1
a1136 1
      rm -f $SML/objects/I386/Linux/*.mo
a1152 12

# Back to src in order to do links correctly.

      cd ../../..

      echo "Using MLWorks to compile i386 based object files for NT"

      rm -f $SML/objects/I386/NT/*.mo
      if [ $full -eq 1 ]; then
        rm -f $SML/src/pervasive/I386/NT/*.mo
      fi
      { rts/runtime -batch -load images/I386/Linux/batch.img -pass a -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -compile-pervasive -project $SML/src/batch.mlp -target __batch.sml -configuration I386/NT -build a && rts/runtime -batch -load images/I386/Linux/batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/basis.mlp -configuration I386/NT -build a && rts/runtime -batch -load images/I386/Linux/batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/interpreter.mlp -configuration I386/NT -build a && rts/runtime -batch -load images/I386/Linux/batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/xinterpreter.mlp -configuration I386/NT -build a; } || { echo "$script: i386 compilation for NT failed, setting status to 6"; status=6; }
@


1.168
log
@[Bug #30364]
Run benchmarks under guib.img
@
text
@d8 4
d679 1
a679 1
      ProjFile_.open_proj "mlworks.mlp";
d723 6
a728 1
      ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -project $SML/src/mlworks.mlp -build a || { echo "$script: interpreter and initial basis compilation failed, setting status to 6"; status=6; }
d1047 1
a1047 1
  if ( rts/runtime -batch -load images/$ARCH/$OS/batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -project $SML/src/mlworks.mlp -target __batch.sml -configuration MIPS/Irix -build a
d1080 1
a1080 1
      { ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -compile-pervasive -project $SML/src/mlworks.mlp -target __batch.sml -configuration MIPS/Irix -build a && ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/mlworks.mlp -configuration MIPS/Irix -build a; } || { echo "$script: mips compilation failed, setting status to 6"; status=6; }
d1104 1
a1104 1
  if ( rts/runtime -batch -load images/$ARCH/$OS/batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -project $SML/src/mlworks.mlp -target __batch.sml -configuration I386/Linux -build a
d1144 1
a1144 1
      { ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -compile-pervasive -project $SML/src/mlworks.mlp -target __batch.sml -configuration I386/Linux -build a && ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/mlworks.mlp -configuration I386/Linux -build a; } || { echo "$script: i386 compilation for Linux failed, setting status to 6"; status=6; }
d1160 1
a1160 1
      { rts/runtime -batch -load images/I386/Linux/batch.img -pass a -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -compile-pervasive -project $SML/src/mlworks.mlp -target __batch.sml -configuration I386/NT -build a && rts/runtime -batch -load images/I386/Linux/batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -verbose -project $SML/src/mlworks.mlp -configuration I386/NT -build a; } || { echo "$script: i386 compilation for NT failed, setting status to 6"; status=6; }
@


1.167
log
@[Bug #30357]
Run mlworks-basis with -no-init
@
text
@d8 4
d933 1
a933 1
  elif test -f $ARCH/$OS/gui.img
d936 1
a936 1
    ls -l $ARCH/$OS/gui.img
d942 1
a942 1
      (../src/rts/bin/$ARCH/$OS/main -load ../src/images/$ARCH/$OS/gui.img -pass a -tty -pervasive-dir ../src/pervasive/ -source-path ../src:. a < $x) 1> $OUT_FILE 2>&1 || STATUS=1
@


1.166
log
@[Bug #30071]
Fix cross compilation problems.
@
text
@d8 4
d662 1
a662 1
    if (mlworks-basis -tty << EOF
@


1.165
log
@[Bug #30071]
Use new Project Workspace to build MIPS/Irix, I386/Linux and I386/NT mos.
@
text
@d8 4
d708 5
d714 2
a715 7
        echo "$script: Using MLWorks to compile interpreters and revised initial basis"
        # default configuration and targets should be those we want here.
        ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -project $SML/src/mlworks.mlp -build a || { echo "$script: interpreter and initial basis compilation failed, setting status to 6"; status=6; }

        if [ $status -eq 0 ]; then
          echo "$script: Making MLWorks interpreter and initial basis images from the mo files."
          $make_command RUNTIME=$SML/src/rts/bin/$ARCH/$OS/main-g -k basis.img xm.img gui.img guib.img || { echo "$script: $ARCH/$OS image build failed, setting status to 6"; status=6; }
d718 10
a727 11
	  if [ $spawned -eq 0 -a "$sunos_build_machine" != "" ]; then
	    echo "$script: Spawning SPARC/SunOS rts, image build and tests on $sunos_build_machine"
	    rsh -n $sunos_build_machine /bin/sh /u/sml/MLW/tools/daily -spawned -base_arch SPARC -base_os SunOS
	    sunos_status=`cat /u/sml/MLW/tools/spawn_status`
	    echo $sunos_status
            if [ -z "$sunos_status" ] ; then sunos_status=1 ; fi
            if [ ! $sunos_status ]; then
	      echo "$script: spawned job failed on $sunos_build_machine"
	      if [ $sunos_status -gt $status ]; then
	        status=$sunos_status
	      fi
d730 1
a730 1
        fi
d737 1
d1024 7
a1030 1
if ( rts/runtime -batch -load images/$ARCH/$OS/batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -project $SML/src/mlworks.mlp -target __batch.sml -configuration MIPS/Irix -build a
d1032 1
a1032 1
  # === MIPS IMAGE BUILD ===
d1052 1
a1052 2
# Now build mips object files (ie to run on the mips)
# First ensure the object directory will exist
a1053 4
      if test \! -d $SML/objects/MIPS/Irix
      then
        mkdir -p $SML/objects/MIPS/Irix
      fi
d1055 4
a1058 1
# Now invoke the batch compiler we just made to do the compilation
d1082 5
d1110 2
a1111 3
# Now build i386 object files (ie to run on the i386)
# These come in two flavours, for Linux and for NT
# First ensure the object directories will exist
d1113 3
a1115 4
      if test \! -d $SML/objects/I386/Linux
      then
        mkdir -p $SML/objects/I386/Linux
      fi
d1122 1
a1122 1
# Now invoke the batch compiler we just made to do the compilation
d1139 1
@


1.164
log
@[Bug #30071]
Convert daily build to work with the new project model.
@
text
@d8 4
d643 4
a654 1
      # This is using the old MLWorks, not the project workspace.
d663 4
a666 2
      TopLevel_.recompile_file (TopLevel_.Info.make_default_options ()) Options_
.default_options ["main/__batch"] handle _ => Exit_.exit 2;
d1020 1
a1020 1
if ( rts/runtime -batch -load images/$ARCH/$OS/batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -compile main/__batch a
d1043 1
a1043 1
# First ensure the object directories will exist
d1045 4
a1048 6
      for x in `cat $SML/tools/src_dirs`; do
        if test \! -d $SML/src/$x/MIPS/Irix
        then
          mkdir -p $SML/src/$x/MIPS/Irix
        fi
      done
d1055 1
a1055 1
      { ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/MIPS/Irix -verbose -compile-pervasive -compile ../../../main/__batch.sml a && ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/MIPS/Irix -verbose -compile ../../../interpreter/interpreter ../../../interpreter/xinterpreter ../../../basis/require_all a; } || { echo "$script: mips compilation failed, setting status to 6"; status=6; }
d1074 1
a1074 1
  if ( rts/runtime -batch -load images/$ARCH/$OS/batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -compile main/__batch a
d1101 4
a1104 6
      for x in `cat $SML/tools/src_dirs`; do
        if test \! -d $SML/src/$x/I386/Linux
        then
          mkdir -p $SML/src/$x/I386/Linux
        fi
      done
d1106 4
a1109 6
      for x in `cat $SML/tools/src_dirs`; do
        if test \! -d $SML/src/$x/I386/NT
        then
          mkdir -p $SML/src/$x/I386/NT
        fi
      done
d1116 1
a1116 1
      { ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/I386/Linux -verbose -compile-pervasive -compile ../../../main/__batch.sml a && ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/I386/Linux -verbose -compile ../../../interpreter/interpreter ../../../interpreter/xinterpreter ../../../basis/require_all a; } || { echo "$script: i386 compilation for Linux failed, setting status to 6"; status=6; }
d1131 1
a1131 1
      { rts/runtime -batch -load images/I386/Linux/batch.img -pass a -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/I386/NT -verbose -compile-pervasive -compile main/__batch.sml a && rts/runtime -batch -load images/I386/Linux/batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/I386/NT -verbose -compile interpreter/interpreter interpreter/xinterpreter basis/require_all a; } || { echo "$script: i386 compilation for NT failed, setting status to 6"; status=6; }
@


1.163
log
@[Bug #30334]
Ensure TEST.LOG files are made ARCH/OS specific
so they don't get overwritten by a later part of the same build
@
text
@d8 5
a427 1
MLWORKS_SRC_PATH=.; export MLWORKS_SRC_PATH
d430 1
a430 1
usage="USAGE: $script [-full] [-rts] [-sparc] [-mips] [-i386] [-test_suite] [-demos] [-foreign_demos] [-benchmarks] [-no_mail] [-mlworks_server] [-base_os <OS:default Solaris>] [-base_arch <ARCH:default SPARC>] [-spawned] [-mips_build_machine <MACHINE>] [-sunos_build_machine <MACHINE>] [-i386_build_machine <MACHINE>] [-all]"
d432 1
d467 1
d620 2
a621 1
  # === SET UP SYMBOLIC LINK ===
d623 12
a634 12
  if [ $all -eq 1 -o $sparc -eq 1 ]; then
    cd $SML/src
    echo "$script: Removing machine link in ML source:"
    echo "$script: Creating new link machine -> sparc:"
    rm -f machine; ln -s sparc machine
    echo "$script: Removing winsys link in ML source:"
    echo "$script: Creating new link winsys -> motif:"
    rm -f winsys; ln -s motif winsys
    echo "$script: Removing system link in ML source:"
    echo "$script: Creating new link system -> unix:"
    rm -f system; ln -s unix system
  fi
d636 1
a636 1
  # === MLWORKS BUILD FROM RELEASED MLWORKS ===
d638 1
a638 2
  if [ $all -eq 1 -o $sparc -eq 1 ]; then
    cd $SML/src
d643 1
d647 1
d655 4
a658 1
      TopLevel_.recompile_file (TopLevel_.Info.make_default_options ()) Options_.default_options ["main/__batch"] handle _ => Exit_.exit 2;
d684 1
a684 1
        $make_command RUNTIME=$SML/src/rts/bin/$ARCH/$OS/main-g batch.img || { echo "$script: $ARCH/$OS image build failed, setting status to 6"; status=6; }
d689 2
d692 2
d697 2
a698 1
        ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -compile ../../../basis/require_all ../../../interpreter/interpreter ../../../interpreter/xinterpreter a || { echo "$script: interpreter and initial basis compilation failed, setting status to 6"; status=6; }
a724 1
fi
a1007 9
  echo "$script: Removing machine link in ML source:"
  echo "$script: Creating new link machine -> mips:"
  rm -f machine; ln -s mips machine
  echo "$script: Removing winsys link in ML source:"
  echo "$script: Creating new link winsys -> motif:"
  rm -f winsys; ln -s motif winsys
  echo "$script: Removing system link in ML source:"
  echo "$script: Creating new link system -> unix:"
  rm -f system; ln -s unix system
d1011 1
a1011 1
  if ( rts/runtime -batch -load images/$ARCH/$OS/batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -compile main/__batch a
d1030 1
a1030 1
    $make_command RUNTIME=$SML/src/rts/bin/$ARCH/$OS/main-g -k batch.img || { echo "$script: mips compiler image build failed, setting status to 6"; status=6; }
a1063 9
  echo "$script: Removing machine link in ML source:"
  echo "$script: Creating new link machine -> i386:"
  rm -f machine; ln -s i386 machine
  echo "$script: Removing winsys link in ML source:"
  echo "$script: Creating new link winsys -> motif:"
  rm -f winsys; ln -s motif winsys
  echo "$script: Removing system link in ML source:"
  echo "$script: Creating new link system -> unix:"
  rm -f system; ln -s unix system
a1123 9
      echo "$script: Removing machine link in ML source:"
      echo "$script: Creating new link machine -> i386:"
      rm -f machine; ln -s i386 machine
      echo "$script: Removing winsys link in ML source:"
      echo "$script: Creating new link winsys -> mswindows:"
      rm -f winsys; ln -s mswindows winsys
      echo "$script: Removing system link in ML source:"
      echo "$script: Creating new link system -> win_nt:"
      rm -f system; ln -s win_nt system
a1135 6

echo "$script: Resetting the links machine -> sparc, system -> unix and winsys -> motif."
cd $SML/src
rm -f machine; ln -s sparc machine
rm -f winsys; ln -s motif winsys
rm -f system; ln -s unix system
@


1.162
log
@[Bug #70024]
Add option to suppress structure contents when building
bootstrap compiler
@
text
@d8 5
d748 3
a750 3
        date >> TEST.LOG
        cat OUTPUT.$ARCH.$OS.diff >> TEST.LOG
        echo >> TEST.LOG
a756 1
      echo "$script: finding failures"
a758 1
        echo "$script: found failures"
d835 3
a837 3
        date >> TEST.LOG
        cat OUTPUT.$ARCH.$OS.diff >> TEST.LOG
        echo >> TEST.LOG
d938 3
a940 3
        date >> TEST.LOG
        cat OUTPUT.$ARCH.$OS.diff >> TEST.LOG
        echo >> TEST.LOG
@


1.161
log
@[Bug #30324]
Added check that image files exist before backing them up.
Added code to set spawn_status before exiting in spawned builds.
@
text
@d8 5
d637 1
@


1.160
log
@[Bug #30285]
Ensure spawn_status valid before testing
@
text
@d8 4
d648 12
a659 10
      for image in *.img
      do
        echo "$script: Zipping MLWorks image $image into $image.old.gz."
        ls -l $image
        if mv -f $image $image.old
        then
          rm -f $image.old.gz
          nice gzip --fast $image.old &
        fi
      done
d709 3
a711 1
      rm *.img
d769 3
d856 3
d959 3
d1001 12
a1012 10
    for image in *.img
    do
      echo "$script: Zipping mips image $image into $image.old.gz."
      ls -l $image
      if mv -f $image $image.old
      then
        rm -f $image.old.gz
        nice gzip --fast $image.old &
      fi
    done
d1067 12
a1078 10
    for image in *.img
    do
      echo "$script: Zipping i386 image $image into $image.old.gz."
      ls -l $image
      if mv -f $image $image.old
      then
        rm -f $image.old.gz
        nice gzip --fast $image.old &
      fi
    done
@


1.159
log
@[Bug #30316]
Added missing "export LD_LIBRARY_PATH".
@
text
@d8 4
d412 1
a412 1
usage="USAGE: $script [-full] [-rts] [-smlk] [-lambda] [-sparc] [-mips] [-i386] [-test_suite] [-demos] [-foreign_demos] [-benchmarks] [-no_mail] [-mlworks_server] [-base_os <OS:default Solaris>] [-base_arch <ARCH:default SPARC>] [-spawned] [-mips_build_machine <MACHINE>] [-sunos_build_machine <MACHINE>] [-i386_build_machine <MACHINE>] [-all]"
a413 2
smlk=0
lambda=0
a446 2
      -smlk)	smlk=1;;
      -lambda)	lambda=1;;
d677 2
a678 1
	    if [ "$sunos_status" -ne "0" ]; then
d1130 1
d1143 1
@


1.158
log
@[Bug #70016]
Generated files should only be cleaned by the original build, not by
spawned builds.  Spawned builds need the .mo files (cross-)compiled
by the main build.
@
text
@d8 6
d559 1
a562 1
  export LD_LIBRARY_PATH
@


1.157
log
@[Bug #70016]
Ensure rts build cleans generated files first
@
text
@d8 4
d565 8
a572 2
  if ($make_command clean cleangen && $make_command -e -k all) then
    rts_status=0
d574 6
a579 2
    rts_status=1
    status=6
d685 3
a687 1
else
@


1.156
log
@[Bug #70000]
Add /bin/sh to all rsh lines to attempt to get round Irix rshd bug
Stop gnumake using multiple processes during rts make in a further
attempt to get around Irix rshd problems.
@
text
@d8 6
d561 1
a561 1
  if ($make_command clean && $make_command -e -k all) then
@


1.155
log
@[Bug #30066]
Ensure that Desktop libraries are used under Solaris.
@
text
@d8 4
d555 1
a555 1
  if ($make_command clean && $make_command -j 5 -e -k all) then
d648 1
a648 1
	    rsh -n $sunos_build_machine /u/sml/MLW/tools/daily -spawned -base_arch SPARC -base_os SunOS
d1098 1
a1098 1
  rsh -n $mips_build_machine /u/sml/MLW/tools/daily -spawned -base_arch MIPS -base_os Irix
d1111 1
a1111 1
  rsh -n $i386_build_machine /u/sml/MLW/tools/daily -spawned -base_arch I386 -base_os Linux
@


1.154
log
@[Bug #30045]
Altering daily build script to set LD_LIBRARY_PATH appropriately.
@
text
@d8 4
a409 6
#
#if [ "`site`" = man ]; then
#  echo Work around for_ LD_LIBRARY_PATH
#  LD_LIBRARY_PATH=/usr/local/motif/lib:/lib; export LD_LIBRARY_PATH
#fi
#
d541 1
a541 1
  LD_LIBRARY_PATH=/usr/openwin/lib:$LD_LIBRARY_PATH
@


1.153
log
@Experiment to try to solve rsh failures
@
text
@d8 3
d538 4
d543 1
a543 1
  LD_LIBRARY_PATH=/usr/openwin/lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}
@


1.152
log
@ensure that /usr/openwin/lib is added to any existing
LD_LIBRARY_PATH setting rather than overwriting it.
This will enable the build to run on binatone.
@
text
@d8 5
d639 1
a639 1
	    rsh $sunos_build_machine /u/sml/MLW/tools/daily -spawned -base_arch SPARC -base_os SunOS
d1089 1
a1089 1
  rsh $mips_build_machine /u/sml/MLW/tools/daily -spawned -base_arch MIPS -base_os Irix
d1102 1
a1102 1
  rsh $i386_build_machine /u/sml/MLW/tools/daily -spawned -base_arch I386 -base_os Linux
@


1.151
log
@Check return status of spawned builds
Fix grep so as to work under Irix
Stop making utils/__stringlib which was only required by the old FI
@
text
@d8 5
d531 2
a532 1
  LD_LIBRARY_PATH=/usr/openwin/lib; export LD_LIBRARY_PATH
d534 1
@


1.150
log
@[Bug #30166]
Add -s option to coutall call to ensure writable files are skipped.
@
text
@d8 4
d525 3
d533 1
d540 1
d618 1
a618 1
        ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -compile ../../../basis/require_all ../../../interpreter/interpreter ../../../interpreter/xinterpreter ../../../basis/__old ../../../utils/__stringlib a || { echo "$script: interpreter and initial basis compilation failed, setting status to 6"; status=6; }
d622 1
a622 1
          $make_command RUNTIME=$SML/src/rts/bin/$ARCH/$OS/main-g -k basis.img xm.img tty.img gui.img guib.img || { echo "$script: $ARCH/$OS image build failed, setting status to 6"; status=6; }
d626 1
a626 1
	    echo "Spawning SPARC/SunOS rts, image build and tests on $sunos_build_machine"
d628 8
a635 1

d654 1
a654 1
      $make_command RUNTIME=$SML/src/rts/bin/$ARCH/$OS/main-g -k ARCH_OS=$ARCH/$OS/ basis.img xm.img tty.img gui.img guib.img || { echo "$script: $ARCH/$OS image build failed, setting status to 6"; status=6; }
d670 1
a670 1
    ./CHECK_RESULT_ALL -src ../src -dir $ARCH/$OS | tee OUTPUT.$ARCH.$OS | grep '\<fail'
d687 3
a689 2
      rm -f FAILED
      grep '\<fail' OUTPUT.$ARCH.$OS > FAILED &&
d691 1
d700 1
a700 1
	  cat FAILED | sed -e 's/^/> /'
d727 1
a727 1
    files=`find . -type d \( -name win32 -o -name mswindows -o name foreign \) -prune -o -type f -name \*.sml -print | egrep -v "^.$"`
d729 3
a731 3
    STATUS=0
    (../src/rts/bin/$ARCH/$OS/main -load ../src/images/$ARCH/$OS/gui.img -pass a -tty -pervasive-dir ../src/pervasive/ -source-path ../src:. a << EOF) 1> poo 2>&1 || STATUS=1
    Shell.File.loadSource "$x";
d733 3
a735 5
    OUT_FILE=poo
    NULL_FILE=/dev/null
    if [ $STATUS -eq 0 ]
    then
      if egrep 'compiler fault|Intolerable signal' $OUT_FILE 1> $NULL_FILE 2>&1
d737 15
a751 10
        echo $x: demo failed, compiler fault.
    	STATUS=3
      elif egrep 'error:|Uncaught exception' $OUT_FILE 1> $NULL_FILE 2>&1
      then
        echo $x: demo failed, unexpected error.
        STATUS=1
      elif egrep warning $OUT_FILE 1> $NULL_FILE 2>&1
      then
        echo $x: demo failed, unexpected warning.
        STATUS=1
d753 1
a753 1
        echo $x: demo succeeded.
d755 2
a756 5
    else
      echo $x: demo failed: compiler crashed
    fi
    rm poo
    done | tee OUTPUT.$ARCH.$OS | grep '\<fail'
d773 2
a774 2
      rm -f FAILED
      grep '\<fail' OUTPUT.$ARCH.$OS > FAILED &&
d784 1
a784 1
	  cat FAILED | sed -e 's/^/> /'
d856 1
a856 1
    done | tee OUTPUT.$ARCH.$OS | grep '\<fail'
d873 2
a874 2
      rm -f FAILED
      grep '\<fail' OUTPUT.$ARCH.$OS > FAILED &&
d884 1
a884 1
	  cat FAILED | sed -e 's/^/> /'
d907 3
d964 1
a964 1
      { ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/MIPS/Irix -verbose -compile-pervasive -compile ../../../main/__batch.sml a && ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/MIPS/Irix -verbose -compile ../../../interpreter/interpreter ../../../interpreter/xinterpreter ../../../basis/require_all ../../../basis/__old ../../../utils/__stringlib a; } || { echo "$script: mips compilation failed, setting status to 6"; status=6; }
d1036 1
a1036 1
      { ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/I386/Linux -verbose -compile-pervasive -compile ../../../main/__batch.sml a && ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/I386/Linux -verbose -compile ../../../interpreter/interpreter ../../../interpreter/xinterpreter ../../../basis/require_all ../../../basis/__old ../../../utils/__stringlib a; } || { echo "$script: i386 compilation for Linux failed, setting status to 6"; status=6; }
d1060 1
a1060 1
      { rts/runtime -batch -load images/I386/Linux/batch.img -pass a -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/I386/NT -verbose -compile-pervasive -compile main/__batch.sml a && rts/runtime -batch -load images/I386/Linux/batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/I386/NT -verbose -compile interpreter/interpreter interpreter/xinterpreter basis/require_all basis/__old utils/__stringlib a; } || { echo "$script: i386 compilation for NT failed, setting status to 6"; status=6; }
d1076 1
a1076 1
  echo "Spawning MIPS/Irix rts, image build and tests on $mips_build_machine"
d1078 8
d1089 1
a1089 1
  echo "Spawning I386/Linux rts, image build and tests on $i386_build_machine"
d1091 7
a1098 2


@


1.149
log
@[Bug #30121]
Move to new FI: remove foreign.img, ttyi.img and guii.img.
@
text
@d8 4
d499 1
a499 1
  if $SML/tools/coutall -V; then
@


1.148
log
@[Bug #20035]
Ensure that the demos for the foreign interface are tested.
@
text
@d8 4
d609 1
a609 1
          $make_command RUNTIME=$SML/src/rts/bin/$ARCH/$OS/main-g -k basis.img xm.img foreign.img tty.img gui.img guii.img guib.img || { echo "$script: $ARCH/$OS image build failed, setting status to 6"; status=6; }
d630 1
a630 1
      $make_command RUNTIME=$SML/src/rts/bin/$ARCH/$OS/main-g -k basis.img xm.img foreign.img tty.img gui.img ttyi.img guii.img guib.img || { echo "$script: $ARCH/$OS image build failed, setting status to 6"; status=6; }
d634 1
a634 1
      $make_command RUNTIME=$SML/src/rts/bin/$ARCH/$OS/main-g -k ARCH_OS=$ARCH/$OS/ basis.img xm.img foreign.img tty.img gui.img ttyi.img guii.img guib.img || { echo "$script: $ARCH/$OS image build failed, setting status to 6"; status=6; }
@


1.147
log
@[Bug #20050]
structure Io_ is now called MLWorksIo_ .
@
text
@d8 4
d359 1
a359 1
usage="USAGE: $script [-full] [-rts] [-smlk] [-lambda] [-sparc] [-mips] [-i386] [-test_suite] [-demos] [-benchmarks] [-no_mail] [-mlworks_server] [-base_os <OS:default Solaris>] [-base_arch <ARCH:default SPARC>] [-spawned] [-mips_build_machine <MACHINE>] [-sunos_build_machine <MACHINE>] [-i386_build_machine <MACHINE>] [-all]"
d368 1
d409 1
d772 21
@


1.146
log
@[Bug #20042]
Ensure that foreign demos aren't using the default mechanism
for running demos.
@
text
@d8 5
d559 2
a560 2
      Io_.set_pervasive_dir("pervasive", Location_.FILE"daily build");
      Io_.set_source_path_from_string(".", Location_.FILE"daily build");
@


1.145
log
@Modify to cope with running on other architectures
@
text
@d8 3
d690 1
a690 1
    files=`find . -type d \( -name win32 -o -name mswindows \) -prune -o -type f -name \*.sml -print | egrep -v "^.$"`
@


1.144
log
@[Bug #2011]
Do benchmark tests during overnight build
@
text
@d8 4
d343 1
a343 2
PWD=$SML/src; export PWD	# Sadly, the SML/NJ lambda image requires this.
PATH=$SML/tools:$SML/images:/usr/local/lib/MLWorks/bin:/usr/local/bin:/usr/ucb:/usr/ccs/bin:/bin:$PATH; export PATH
d347 1
a347 1
usage="USAGE: $script [-full] [-rts] [-smlk] [-lambda] [-sparc] [-mips] [-i386] [-test_suite] [-demos] [-benchmarks] [-no_mail] [-mlworks_server]"
d361 6
a366 1
build_from_mlworks=0
d386 2
a387 2
  for i in $*; do
    case $i in
d400 43
a442 1
      *)	echo "$usage"; exit 8;;
d444 1
a465 14
# Back up the SML/NJ images before rebuilding them

  cd $SML/images
  for image in smlk lambda
  do
    echo "$script: Zipping NJ image $image into $image.old.gz."
    ls -l $image
    if mv -f $image $image.old
    then
      rm -f $image.old.gz
      nice gzip --fast $image.old &
    fi
  done

d489 8
d500 1
a500 1
if [ $all -eq 1 -o $rts -eq 1 ]; then
a502 2
  ARCH=SPARC;export ARCH
  OS=Solaris;export OS
d504 1
a504 1
  if (gnumake clean && gnumake -j 5 -e -k generated runtime runtime-g) then
d514 1
a514 1
if [ $all -eq 1 -o $mlworks_server -eq 1 ]; then
d516 2
a517 25
  cd $SML/src/emacs/lisp && gnumake ARCH=$ARCH OS=$OS
  cd $SML/src/emacs/etc && gnumake ARCH=$ARCH OS=$OS
fi

# === SET UP SYMBOLIC LINK ===

if [ $all -eq 1 -o $sparc -eq 1 ]; then
  cd $SML/src
  echo "$script: Removing machine link in ML source:"
  echo "$script: Creating new link machine -> sparc:"    
  rm -f machine; ln -s sparc machine
  echo "$script: Removing winsys link in ML source:"
  echo "$script: Creating new link winsys -> motif:"
  rm -f winsys; ln -s motif winsys
  echo "$script: Removing system link in ML source:"
  echo "$script: Creating new link system -> unix:"
  rm -f system; ln -s unix system
fi

if test -x /u/sml/bootstrap/latest/main-g
then
  build_from_mlworks=1
  echo "$script: Using mlworks to bootstrap"
else
  echo "$script: Using New Jersey to bootstrap"
d520 1
a520 2
if [ $build_from_mlworks -eq 0 ]; then
  # === NEW JERSEY BUILD ===
d522 1
a522 1
  # Attempt to build smlk from sml
d524 11
a534 12
  if [ $all -eq 1 -o $smlk -eq 1 ]; then
    echo "$script: Building NJ smlk image from sml:"
    (cd $SML/images && ls -l sml)
    cd $SML/src/make
    sml << EOF
    use "build_make.sml";
    exportML "$SML/images/smlk"
      handle Io _ =>
        (System.Unsafe.SysIO.unlink "$SML/images/smlk"; false);
EOF
    chmod 770 $SML/images/smlk
    echo
d537 1
a537 2
  # If there's no executable smlk then something went wrong.  Try to
  # restore the old smlk from the compressed backup.
d539 5
a543 8
  if [ $all -eq 1 ]; then
    if test ! -x $SML/images/smlk
    then
      echo "$script: smlk build failed; setting status to 2, using old smlk"
      status=2
      (cd $SML/images &&
       gzip -d smlk.old.gz &&
       mv smlk.old smlk)
d545 1
a545 62
  fi

  # If there's _still_ no smlk then something went wrong decompressing
  # the backup, so don't try to make a lambda from it.

  if [ $all -eq 1 -o $lambda -eq 1 ]; then
    if test -x $SML/images/smlk
    then
      echo "$script: Building NJ lambda image from smlk:"
      (cd $SML/images && ls -l smlk)
      cd $SML/src
      $SML/images/smlk << EOF
      cd "$SML/src";
      make "main/__toplevel";
      exportML "$SML/images/lambda"
        handle Io _ =>
          (System.Unsafe.SysIO.unlink "$SML/images/lambda"; false);
EOF
      chmod 770 $SML/images/lambda
      echo
    fi
  fi

  # If there's no lambda image then something went wrong.  Try to
  # restore the old lambda from the compressed backup.

  if [ $all -eq 1 ]; then
    if test ! -x $SML/images/lambda
    then
      echo "$script: lambda build failed; setting status to 3, using old lambda"
      status=3
      (cd $SML/images &&
       gzip -d lambda.old.gz &&
       mv lambda.old lambda)
    fi
  fi

  if [ $all -eq 1 -o $sparc -eq 1 -o $mips -eq 1 -o $i386 -eq 1 ]; then
  # If there's _still_ no lambda image then we're stymied.

    if test ! -x $SML/images/lambda
    then
      echo "$script: The old lambda wouldn't come back, setting status to 4"
      if [ $all -eq 1 ]; then
        rm $SML/tools/daily-lock
      fi
      exit 4
    fi
  fi

fi

# === MLWORKS BUILD FROM NEW JERSEY ===

if [ $all -eq 1 -o $sparc -eq 1 ]; then
  cd $SML/src
  if [ $full -eq 1 ]; then
    echo "$script: Removing all ml object files"
    find . -name \*.mo -exec rm {} \;
  fi
  boot_status=1
  if [ $build_from_mlworks -eq 1 ]; then
a558 18
  else
    echo "$script: Compiling MLWorks batch system under New Jersey."
    if (lambda << EOF
      ( (cd "$SML/src";
        make "main/__toplevel")
       handle exn => (output(std_out, "Uncaught exception: " ^ System.exn_name exn ^ "\n");
                      System.Unsafe.CInterface.exit 1));
      Io_.set_pervasive_dir_from_env (Location_.FILE "daily build");
      Io_.set_source_path_from_env (Location_.FILE "daily build");
      TopLevel_.recompile_pervasive (Info_.make_default_options ()) Options_.default_options
      handle _ => System.Unsafe.CInterface.exit 1;
      TopLevel_.recompile_file (Info_.make_default_options ()) Options_.default_options ["$SML/src/main/__batch"]
      handle _ => System.Unsafe.CInterface.exit 2;
EOF
      ) then
      boot_status=0
    fi
  fi
d560 2
a561 2
  if [ $boot_status -eq 0 ]; then
    echo
d563 1
a563 1
  # === MLWORKS IMAGE BUILD ===
d565 17
a581 9
    cd $SML/src/images/$ARCH/$OS
    for image in *.img
    do
      echo "$script: Zipping MLWorks image $image into $image.old.gz."
      ls -l $image
      if mv -f $image $image.old
      then
        rm -f $image.old.gz
        nice gzip --fast $image.old &
a582 1
    done
d584 4
a587 7
    if [ $rts_status -eq 0 ]; then
      echo "$script: Making MLWorks batch image from the mo files."
      gnumake batch.img || { echo "$script: sparc image build failed, setting status to 6"; status=6; }
      echo
    else
      echo "$script: Not making batch image, rts build failed."
    fi
d589 8
a596 4
# Now build interpreters and initial basis, using compiler just produced
    if [ $status -eq 0 ]; then
      echo "$script: Using MLWorks to compile interpreters and revised initial basis"
    ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -compile ../../../basis/require_all ../../../interpreter/interpreter ../../../interpreter/xinterpreter ../../../basis/__old ../../../utils/__stringlib a || { echo "$script: interpreter and initial basis compilation failed, setting status to 6"; status=6; }
d598 2
a599 3
      if [ $status -eq 0 ]; then
        echo "$script: Making MLWorks interpreter and initial basis images from the mo files."
        gnumake -k basis.img xm.img foreign.img tty.img gui.img ttyi.img guii.img guib.img || { echo "$script: sparc image build failed, setting status to 6"; status=6; }
d601 16
a617 3
  else
    echo "$script: sparc compilation failed"
    status=5
a618 1

a619 1

d622 1
a622 1
if [ $all -eq 1 -o $test_suite -eq 1 ]; then
d631 3
a633 3
    mv -f OUTPUT OUTPUT.old
    ./CHECK_RESULT_ALL -src ../src -dir SPARC/Solaris | tee OUTPUT | grep '\<fail' 
    if test -f OUTPUT.old
d635 1
a635 1
      if diff OUTPUT.old OUTPUT > OUTPUT.diff
d640 1
a640 1
        cat OUTPUT.diff
d642 1
a642 1
        cat OUTPUT.diff >> TEST.LOG
d645 2
a646 2
      rm -f OUTPUT.old.gz OUTPUT.diff
      nice gzip --fast OUTPUT.old &
d650 1
a650 1
      grep '\<fail' OUTPUT > FAILED &&
d677 1
a677 1
if [ $all -eq 1 -o $demos -eq 1 ]; then
d686 1
a686 1
    mv -f OUTPUT OUTPUT.old
d688 1
a688 1
    for x in $files ; do 
d716 2
a717 2
    done | tee OUTPUT | grep '\<fail' 
    if test -f OUTPUT.old
d719 1
a719 1
      if diff OUTPUT.old OUTPUT > OUTPUT.diff
d724 1
a724 1
        cat OUTPUT.diff
d726 1
a726 1
        cat OUTPUT.diff >> TEST.LOG
d729 2
a730 2
      rm -f OUTPUT.old.gz OUTPUT.diff
      nice gzip --fast OUTPUT.old &
d734 1
a734 1
      grep '\<fail' OUTPUT > FAILED &&
d759 1
a759 1
if [ $all -eq 1 -o $benchmarks -eq 1 ]; then
d768 1
a768 1
    mv -f OUTPUT OUTPUT.old
d795 2
a796 2
    done | tee OUTPUT | grep '\<fail' 
    if test -f OUTPUT.old
d798 1
a798 1
      if diff OUTPUT.old OUTPUT > OUTPUT.diff
d803 1
a803 1
        cat OUTPUT.diff
d805 1
a805 1
        cat OUTPUT.diff >> TEST.LOG
d808 2
a809 2
      rm -f OUTPUT.old.gz OUTPUT.diff
      nice gzip --fast OUTPUT.old &
d813 1
a813 1
      grep '\<fail' OUTPUT > FAILED &&
d840 1
d842 1
a842 1
if [ $status -ne 0 ]; then
d854 1
a854 1
  echo "$script: Creating new link machine -> mips:"    
d882 1
a882 1
    gnumake -k batch.img || { echo "$script: mips compiler image build failed, setting status to 6"; status=6; }
d903 3
d917 1
a917 1
  echo "$script: Creating new link machine -> i386:"    
d946 1
a946 1
    gnumake -k batch.img || { echo "$script: i386 compiler image build failed, setting status to 6"; status=6; }
d974 4
d984 1
a984 1
      echo "$script: Creating new link machine -> i386:"    
d1010 12
@


1.144.1.1
log
@branched from 1.144
@
text
@a7 4
# Revision 1.144  1997/04/04  11:15:57  jont
# [Bug #2011]
# Do benchmark tests during overnight build
#
@


1.144.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a7 3
# Revision 1.144.1.1  1997/05/12  11:12:23  hope
# branched from 1.144
#
@


1.144.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a7 3
# Revision 1.144.1.1  1997/05/12  11:12:23  hope
# branched from 1.144
#
@


1.144.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a7 3
# Revision 1.144.1.1  1997/05/12  11:12:23  hope
# branched from 1.144
#
@


1.144.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a7 3
# Revision 1.144.1.1.1.1  1997/07/28  18:55:09  daveb
# branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
#
@


1.143
log
@[Bug #2011]
Update to compile all demos and warn of any failures
@
text
@d8 4
d344 1
a344 1
usage="USAGE: $script [-full] [-rts] [-smlk] [-lambda] [-sparc] [-mips] [-i386] [-test_suite] [-demos] [-no_mail] [-mlworks_server]"
d353 1
d388 1
d790 79
@


1.142
log
@New build mechanism
@
text
@d8 3
d340 1
a340 1
usage="USAGE: $script [-full] [-rts] [-smlk] [-lambda] [-sparc] [-mips] [-i386] [-test_suite] [-no_mail] [-mlworks_server]"
d348 1
d382 1
d700 84
@


1.141
log
@Moved MLW/src/test_suite to MLW/test_suite.
@
text
@d8 3
d583 1
a583 1
    if (mlworks -tty << EOF
d585 2
a586 8
      Shell.Path.setSourcePath["."];
      Shell.Path.setPervasive"pervasive";
      Shell.File.loadSource"basics/__location";
      Shell.File.loadSource"main/__io";
      Shell.File.loadSource"main/__info";
      Shell.File.loadSource"main/__options";
      Shell.File.loadSource"main/__toplevel";
      Shell.File.loadSource"basis/__exit";
@


1.140
log
@Set MLWORKS_LICENSE to "server", as the registration scheme is now default.
@
text
@d8 3
d669 1
a669 1
    cd $SML/src/test_suite
d671 1
a671 1
    ./CHECK_RESULT_ALL -src .. -dir SPARC/Solaris | tee OUTPUT | grep '\<fail' 
@


1.140.1.1
log
@branched from 1.140
@
text
@a7 3
# Revision 1.140  1996/12/10  16:46:36  daveb
# Set MLWORKS_LICENSE to "server", as the registration scheme is now default.
#
@


1.140.1.1.1.1
log
@branched from 1.140.1.1
@
text
@a7 3
# Revision 1.140.1.1  1996/12/17  18:20:51  hope
# branched from 1.140
#
@


1.139
log
@[Bug #1766]
Ensure all object files necessary for distribution are built overnight
@
text
@d8 4
d330 1
@


1.139.1.1
log
@branched from 1.139
@
text
@a7 4
# Revision 1.139  1996/11/15  10:21:47  jont
# [Bug #1766]
# Ensure all object files necessary for distribution are built overnight
#
@


1.138
log
@remove compilation of stringlib during interpreter build
@
text
@d8 3
d637 1
a637 1
    ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -compile ../../../basis/require_all ../../../interpreter/interpreter ../../../interpreter/xinterpreter a || { echo "$script: interpreter and initial basis compilation failed, setting status to 6"; status=6; }
d767 1
a767 1
      { ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/MIPS/Irix -verbose -compile-pervasive -compile ../../../main/__batch.sml a && ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/MIPS/Irix -verbose -compile ../../../interpreter/interpreter ../../../interpreter/xinterpreter ../../../basis/require_all a; } || { echo "$script: mips compilation failed, setting status to 6"; status=6; }
d836 1
a836 1
      { ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/I386/Linux -verbose -compile-pervasive -compile ../../../main/__batch.sml a && ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/I386/Linux -verbose -compile ../../../interpreter/interpreter ../../../interpreter/xinterpreter ../../../basis/require_all a; } || { echo "$script: i386 compilation for Linux failed, setting status to 6"; status=6; }
d856 1
a856 1
      { rts/runtime -batch -load images/I386/Linux/batch.img -pass a -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/I386/NT -verbose -compile-pervasive -compile main/__batch.sml a && rts/runtime -batch -load images/I386/Linux/batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/I386/NT -verbose -compile interpreter/interpreter interpreter/xinterpreter basis/require_all a; } || { echo "$script: i386 compilation for NT failed, setting status to 6"; status=6; }
@


1.138.1.1
log
@branched from 1.138
@
text
@a7 3
# Revision 1.138  1996/11/03  16:07:08  io
# remove compilation of stringlib during interpreter build
#
@


1.138.1.1.1.1
log
@branched from 1.138.1.1
@
text
@a7 3
# Revision 1.138.1.1  1996/11/14  13:24:46  hope
# branched from 1.138
#
@


1.137
log
@remove LD_LIBRARY_PATH workaround for sorrol's SunOS
@
text
@d8 3
d634 1
a634 1
    ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -compile ../../../basis/require_all ../../../utils/__stringlib ../../../interpreter/interpreter ../../../interpreter/xinterpreter a || { echo "$script: interpreter and initial basis compilation failed, setting status to 6"; status=6; }
d764 1
a764 1
      { ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/MIPS/Irix -verbose -compile-pervasive -compile ../../../main/__batch.sml a && ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/MIPS/Irix -verbose -compile ../../../interpreter/interpreter ../../../interpreter/xinterpreter ../../../basis/require_all ../../../utils/__stringlib a; } || { echo "$script: mips compilation failed, setting status to 6"; status=6; }
d833 1
a833 1
      { ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/I386/Linux -verbose -compile-pervasive -compile ../../../main/__batch.sml a && ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/I386/Linux -verbose -compile ../../../interpreter/interpreter ../../../interpreter/xinterpreter ../../../basis/require_all ../../../utils/__stringlib a; } || { echo "$script: i386 compilation for Linux failed, setting status to 6"; status=6; }
d853 1
a853 1
      { rts/runtime -batch -load images/I386/Linux/batch.img -pass a -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/I386/NT -verbose -compile-pervasive -compile main/__batch.sml a && rts/runtime -batch -load images/I386/Linux/batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/I386/NT -verbose -compile interpreter/interpreter interpreter/xinterpreter basis/require_all utils/__stringlib a; } || { echo "$script: i386 compilation for NT failed, setting status to 6"; status=6; }
@


1.136
log
@[Bug #1684]
Extend paths to find make
Don't try to build images if the rts build failed
@
text
@d8 5
d334 6
a339 4
if [ "`site`" = man ]; then
  echo Work around for_ LD_LIBRARY_PATH
  LD_LIBRARY_PATH=/usr/local/motif/lib:/lib; export LD_LIBRARY_PATH
fi
@


1.135
log
@Moving build to Solaris
@
text
@d8 3
d312 1
a312 1
PATH=$SML/tools:$SML/images:/usr/local/lib/MLWorks/bin:/usr/local/bin:/usr/ucb:$PATH; export PATH
d419 1
d426 6
a431 2
  gnumake clean
  gnumake -j 5 -e -k generated runtime runtime-g
d613 7
a619 3
    echo "$script: Making MLWorks batch image from the mo files."
    gnumake batch.img || { echo "$script: sparc image build failed, setting status to 6"; status=6; }
    echo
@


1.135.2.1
log
@branched from 1.135
@
text
@a7 3
# Revision 1.135  1996/09/09  22:01:37  jont
# Moving build to Solaris
#
@


1.135.1.1
log
@branched from 1.135
@
text
@a7 3
# Revision 1.135  1996/09/09  22:01:37  jont
# Moving build to Solaris
#
@


1.134
log
@remove lock files on checkout failure
@
text
@d8 3
d309 1
a309 1
PATH=$SML/tools:$SML/images:/usr/local/lib/MLWorks/bin:/usr/local/bin:$PATH; export PATH
d420 1
a420 1
  OS=SunOS;export OS
d430 2
a431 2
  cd $SML/src/emacs/lisp && gnumake ARCH=SPARC OS=SunOS 
  cd $SML/src/emacs/etc && gnumake ARCH=SPARC OS=SunOS
d449 1
a449 1
if test -x /usr/local/lib/MLWorks/bin/mlworks
d593 1
a593 1
    cd $SML/src/images/SPARC/SunOS
d632 1
a632 1
  elif test -f SPARC/SunOS/gui.img
d635 1
a635 1
    ls -l SPARC/SunOS/gui.img
d638 1
a638 1
    ./CHECK_RESULT_ALL -src .. | tee OUTPUT | grep '\<fail' 
d707 1
a707 1
  if ( rts/runtime -batch -load images/SPARC/SunOS/batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -compile main/__batch a
d767 1
a767 1
  if ( rts/runtime -batch -load images/SPARC/SunOS/batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -compile main/__batch a
@


1.134.1.1
log
@branched from 1.134
@
text
@a7 3
# Revision 1.134  1996/08/16  09:55:43  io
# remove lock files on checkout failure
#
@


1.133
log
@hope checkout should succeed first
@
text
@d8 3
d403 1
@


1.132
log
@Stop making foreign interface too early
@
text
@d8 3
d396 6
a401 1
  $SML/tools/coutall -V
@


1.131
log
@Changing mk_interface to mk_interface.sh
@
text
@d8 3
a398 12
# === CONSTRUCTING FOREIGN INTERFACE ===

  echo "$script: Constructing foreign/__interface.sml."
  cd $SML/src/foreign
  rm -f interface.sml __interface.sml
  ./mk_interface.sh -source
  if test -f interface.sml -a -f __interface.sml
  then :
  else echo "Foreign interface components not generated .."
       exit 3
  fi

d597 1
a597 1
    ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -compile ../../../basis/require_all ../../../foreign/__interface ../../../interpreter/interpreter ../../../interpreter/xinterpreter a || { echo "$script: interpreter and initial basis compilation failed, setting status to 6"; status=6; }
d727 1
a727 1
      { ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/MIPS/Irix -verbose -compile-pervasive -compile ../../../main/__batch.sml a && ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/MIPS/Irix -verbose -compile ../../../interpreter/interpreter ../../../interpreter/xinterpreter ../../../basis/require_all ../../../foreign/__interface a; } || { echo "$script: mips compilation failed, setting status to 6"; status=6; }
d796 1
a796 1
      { ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/I386/Linux -verbose -compile-pervasive -compile ../../../main/__batch.sml a && ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/I386/Linux -verbose -compile ../../../interpreter/interpreter ../../../interpreter/xinterpreter ../../../basis/require_all ../../../foreign/__interface a; } || { echo "$script: i386 compilation for Linux failed, setting status to 6"; status=6; }
d816 1
a816 1
      { rts/runtime -batch -load images/I386/Linux/batch.img -pass a -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/I386/NT -verbose -compile-pervasive -compile main/__batch.sml a && rts/runtime -batch -load images/I386/Linux/batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/I386/NT -verbose -compile interpreter/interpreter interpreter/xinterpreter basis/require_all foreign/__interface a; } || { echo "$script: i386 compilation for NT failed, setting status to 6"; status=6; }
@


1.130
log
@Changed foreign/__foreign to foreign/__interface and also added
some code to rebuild __interface.sml
@
text
@d8 4
d401 1
a401 1
  ./mk_interface -source
@


1.129
log
@Fix bug in final section of build for NT
@
text
@d8 3
a295 4
if [ "`site`" = man ]; then
  echo Work around for_ LD_LIBRARY_PATH
  LD_LIBRARY_PATH=/usr/local/motif/lib:/lib; export LD_LIBRARY_PATH
fi
d310 5
d392 12
d602 1
a602 1
    ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -compile ../../../basis/require_all ../../../foreign/__foreign ../../../interpreter/interpreter ../../../interpreter/xinterpreter a || { echo "$script: interpreter and initial basis compilation failed, setting status to 6"; status=6; }
d732 1
a732 1
      { ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/MIPS/Irix -verbose -compile-pervasive -compile ../../../main/__batch.sml a && ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/MIPS/Irix -verbose -compile ../../../interpreter/interpreter ../../../interpreter/xinterpreter ../../../basis/require_all ../../../foreign/__foreign a; } || { echo "$script: mips compilation failed, setting status to 6"; status=6; }
d801 1
a801 1
      { ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/I386/Linux -verbose -compile-pervasive -compile ../../../main/__batch.sml a && ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/I386/Linux -verbose -compile ../../../interpreter/interpreter ../../../interpreter/xinterpreter ../../../basis/require_all ../../../foreign/__foreign a; } || { echo "$script: i386 compilation for Linux failed, setting status to 6"; status=6; }
d821 1
a821 1
      { rts/runtime -batch -load images/I386/Linux/batch.img -pass a -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/I386/NT -verbose -compile-pervasive -compile main/__batch.sml a && rts/runtime -batch -load images/I386/Linux/batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/I386/NT -verbose -compile interpreter/interpreter interpreter/xinterpreter basis/require_all foreign/__foreign a; } || { echo "$script: i386 compilation for NT failed, setting status to 6"; status=6; }
@


1.128
log
@Fix links corectly when compiling for NT
@
text
@d8 3
d805 1
a805 1
      { rts/runtime -batch -load images/I386/Linux/batch.img -pass a -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/I386/NT -verbose -compile-pervasive -compile main/__batch.sml a && rts/runtime -batch -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/I386/NT -verbose -compile interpreter/interpreter interpreter/xinterpreter basis/require_all foreign/__foreign a; } || { echo "$script: i386 compilation for NT failed, setting status to 6"; status=6; }
@


1.127
log
@Add guib.img to list of images built for distribution
@
text
@d8 3
d784 4
d802 1
a802 1
      { ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/I386/NT -verbose -compile-pervasive -compile ../../../main/__batch.sml a && ../../../rts/runtime -batch -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/I386/NT -verbose -compile ../../../interpreter/interpreter ../../../interpreter/xinterpreter ../../../basis/require_all ../../../foreign/__foreign a; } || { echo "$script: i386 compilation for NT failed, setting status to 6"; status=6; }
@


1.126
log
@Replace MLWorks.exit with Exit_.exit now that MLWorks.exit has been removed
from the pervasive library.
@
text
@d8 4
d584 1
a584 1
        gnumake -k basis.img xm.img foreign.img tty.img gui.img ttyi.img guii.img || { echo "$script: sparc image build failed, setting status to 6"; status=6; }
@


1.125
log
@Added -batch option to invocations of runtime.
@
text
@d8 3
d524 1
d527 2
a528 2
      TopLevel_.recompile_pervasive (TopLevel_.Info.make_default_options ()) Options_.default_options handle _ => MLWorks.exit 1;
      TopLevel_.recompile_file (TopLevel_.Info.make_default_options ()) Options_.default_options ["main/__batch"] handle _ => MLWorks.exit 2;
@


1.124
log
@Made this script mail mlworkers the details of any failures in the test suite.
@
text
@d8 3
d572 1
a572 1
    ../../../rts/runtime -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -compile ../../../basis/require_all ../../../foreign/__foreign ../../../interpreter/interpreter ../../../interpreter/xinterpreter a || { echo "$script: interpreter and initial basis compilation failed, setting status to 6"; status=6; }
d667 1
a667 1
  if ( rts/runtime -load images/SPARC/SunOS/batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -compile main/__batch a
d702 1
a702 1
      { ../../../rts/runtime -load batch.img -pass a -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/MIPS/Irix -verbose -compile-pervasive -compile ../../../main/__batch.sml a && ../../../rts/runtime -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/MIPS/Irix -verbose -compile ../../../interpreter/interpreter ../../../interpreter/xinterpreter ../../../basis/require_all ../../../foreign/__foreign a; } || { echo "$script: mips compilation failed, setting status to 6"; status=6; }
d727 1
a727 1
  if ( rts/runtime -load images/SPARC/SunOS/batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -compile main/__batch a
d771 1
a771 1
      { ../../../rts/runtime -load batch.img -pass a -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/I386/Linux -verbose -compile-pervasive -compile ../../../main/__batch.sml a && ../../../rts/runtime -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/I386/Linux -verbose -compile ../../../interpreter/interpreter ../../../interpreter/xinterpreter ../../../basis/require_all ../../../foreign/__foreign a; } || { echo "$script: i386 compilation for Linux failed, setting status to 6"; status=6; }
d787 1
a787 1
      { ../../../rts/runtime -load batch.img -pass a -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/I386/NT -verbose -compile-pervasive -compile ../../../main/__batch.sml a && ../../../rts/runtime -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/I386/NT -verbose -compile ../../../interpreter/interpreter ../../../interpreter/xinterpreter ../../../basis/require_all ../../../foreign/__foreign a; } || { echo "$script: i386 compilation for NT failed, setting status to 6"; status=6; }
@


1.123
log
@Add foreign.img to list of images made
@
text
@d8 3
d281 1
a281 1
usage="USAGE: $script [-full] [-rts] [-smlk] [-lambda] [-sparc] [-mips] [-i386] [-test_suite] [-mlworks_server]"
d289 1
d315 1
d595 1
a595 1
    ./CHECK_RESULT_ALL -src .. | tee OUTPUT | grep '\<fail'
d610 18
@


1.122
log
@Build foreign/__foreign for all platforms
@
text
@d8 3
d568 1
a568 1
        gnumake -k xm.img tty.img gui.img ttyi.img guii.img || { echo "$script: sparc image build failed, setting status to 6"; status=6; }
@


1.121
log
@Changing initbasis to basis
@
text
@d8 3
d561 1
a561 1
    ../../../rts/runtime -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -compile ../../../basis/require_all.sml ../../../interpreter/interpreter ../../../interpreter/xinterpreter a || { echo "$script: interpreter and initial basis compilation failed, setting status to 6"; status=6; }
d673 1
a673 1
      { ../../../rts/runtime -load batch.img -pass a -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/MIPS/Irix -verbose -compile-pervasive -compile ../../../main/__batch.sml a && ../../../rts/runtime -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/MIPS/Irix -verbose -compile ../../../interpreter/interpreter.sml ../../../interpreter/xinterpreter.sml a; } || { echo "$script: mips compilation failed, setting status to 6"; status=6; }
d742 1
a742 1
      { ../../../rts/runtime -load batch.img -pass a -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/I386/Linux -verbose -compile-pervasive -compile ../../../main/__batch.sml a && ../../../rts/runtime -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/I386/Linux -verbose -compile ../../../interpreter/interpreter.sml ../../../interpreter/xinterpreter.sml a; } || { echo "$script: i386 compilation for Linux failed, setting status to 6"; status=6; }
d758 1
a758 1
      { ../../../rts/runtime -load batch.img -pass a -opt-handlers on -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/I386/NT -verbose -compile-pervasive -compile ../../../main/__batch.sml a && ../../../rts/runtime -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -object-path %S/%C/I386/NT -verbose -compile ../../../interpreter/interpreter.sml ../../../interpreter/xinterpreter.sml a; } || { echo "$script: i386 compilation for NT failed, setting status to 6"; status=6; }
@


1.120
log
@Use consistent language when reporting creation of symbolic links
Fix link creation for NT object files to use mswindwos rather than motif
@
text
@d8 4
d558 1
a558 1
    ../../../rts/runtime -load batch.img -pass a -opt-handlers off -pervasive-dir $SML/src/pervasive -source-path $SML/src -compile ../../../initbasis/require_all.sml ../../../interpreter/interpreter ../../../interpreter/xinterpreter a || { echo "$script: interpreter and initial basis compilation failed, setting status to 6"; status=6; }
@


1.119
log
@Adding some diagnostic output when removing mo files
@
text
@d8 3
d619 2
d622 2
a623 1
  echo "$script: Linking machine -> mips:"
d625 2
a626 1
  echo "$script: Linking winsys -> motif:"
a627 1
  echo "$script: Linking system -> unix:"
d679 2
a680 1
  echo "$script: Linking machine -> i386:"
d682 2
a683 1
  echo "$script: Linking winsys -> motif:"
d685 2
a686 1
  echo "$script: Linking system -> unix:"
d738 8
d747 1
a747 1
      rm -f winsys; ln -s motif winsys
@


1.118
log
@Ensure a full build deletes all object files
@
text
@d8 3
d485 1
@


1.117
log
@Modify PATH so that we can put mlworks scripts in tools
@
text
@d8 3
d389 1
a389 1
  echo Using mlworks to bootstrap
d391 1
a391 1
  echo Using New Jersey to bootstrap
d482 1
a482 1
    rm -f pervasive/*.mo
d546 1
a546 1
      echo "Using MLWorks to compile interpreters and revised initial basis"
a618 3

#  echo "$script: Using lambda to build mips mos:"

d652 1
a652 1
      echo "Using MLWorks to compile mips based object files"
d718 1
a718 1
      echo "Using MLWorks to compile i386 based object files for Linux"
@


1.116
log
@Modifications to run using MLWorks as compilation bootstrap mechanism
instead of New Jersey.
@
text
@d8 4
d252 1
a252 1
PATH=/usr/local/lib/MLWorks/bin:$SML/tools:$SML/images:/usr/local/bin:$PATH; export PATH
@


1.115
log
@add ARCH OS for mlworks-server build
@
text
@d8 3
d248 1
a248 1
PATH=$SML/tools:$SML/images:/usr/local/bin:$PATH; export PATH
d266 1
d379 7
a385 1
# === NEW JERSEY BUILD ===
d387 2
a388 1
# Attempt to build smlk from sml
d390 11
a400 9
if [ $all -eq 1 -o $smlk -eq 1 ]; then
  echo "$script: Building NJ smlk image from sml:"
  (cd $SML/images && ls -l sml)
  cd $SML/src/make
  sml << EOF
  use "build_make.sml";
  exportML "$SML/images/smlk"
    handle Io _ =>
      (System.Unsafe.SysIO.unlink "$SML/images/smlk"; false);
d402 3
a404 3
  chmod 770 $SML/images/smlk
  echo
fi
d406 2
a407 2
# If there's no executable smlk then something went wrong.  Try to
# restore the old smlk from the compressed backup.
d409 9
a417 8
if [ $all -eq 1 ]; then
  if test ! -x $SML/images/smlk
  then
    echo "$script: smlk build failed; setting status to 2, using old smlk"
    status=2
    (cd $SML/images &&
     gzip -d smlk.old.gz &&
     mv smlk.old smlk)
a418 1
fi
d420 2
a421 2
# If there's _still_ no smlk then something went wrong decompressing
# the backup, so don't try to make a lambda from it.
d423 12
a434 12
if [ $all -eq 1 -o $lambda -eq 1 ]; then
  if test -x $SML/images/smlk
  then
    echo "$script: Building NJ lambda image from smlk:"
    (cd $SML/images && ls -l smlk)
    cd $SML/src
    $SML/images/smlk << EOF
    cd "$SML/src";
    make "main/__toplevel";
    exportML "$SML/images/lambda"
      handle Io _ =>
        (System.Unsafe.SysIO.unlink "$SML/images/lambda"; false);
d436 3
a438 2
    chmod 770 $SML/images/lambda
    echo
a439 1
fi
d441 2
a442 2
# If there's no lambda image then something went wrong.  Try to
# restore the old lambda from the compressed backup.
d444 9
a452 8
if [ $all -eq 1 ]; then
  if test ! -x $SML/images/lambda
  then
    echo "$script: lambda build failed; setting status to 3, using old lambda"
    status=3
    (cd $SML/images &&
     gzip -d lambda.old.gz &&
     mv lambda.old lambda)
a453 1
fi
d455 2
a456 2
if [ $all -eq 1 -o $sparc -eq 1 -o $mips -eq 1 -o $i386 -eq 1 ]; then
# If there's _still_ no lambda image then we're stymied.
d458 7
a464 5
  if test ! -x $SML/images/lambda
  then
    echo "$script: The old lambda wouldn't come back, setting status to 4"
    if [ $all -eq 1 ]; then
      rm $SML/tools/daily-lock
a465 1
    exit 4
d467 1
a472 1
  echo "$script: Compiling MLWorks batch system under New Jersey."
d477 16
a492 11
  if (lambda << EOF
    ( (cd "$SML/src";
      make "main/__toplevel")
     handle exn => (output(std_out, "Uncaught exception: " ^ System.exn_name exn ^ "\n");
                    System.Unsafe.CInterface.exit 1));
    Io_.set_pervasive_dir_from_env (Location_.FILE "daily build");
    Io_.set_source_path_from_env (Location_.FILE "daily build");
    TopLevel_.recompile_pervasive (Info_.make_default_options ()) Options_.default_options
    handle _ => System.Unsafe.CInterface.exit 1;
    TopLevel_.recompile_file (Info_.make_default_options ()) Options_.default_options ["$SML/src/main/__batch"]
    handle _ => System.Unsafe.CInterface.exit 2;
d494 23
a516 1
    ) then
d518 1
a552 1

@


1.114
log
@compile mlworks server
@
text
@d8 3
d252 1
a252 1
usage="USAGE: $script [-full] [-rts] [-smlk] [-lambda] [-sparc] [-mips] [-i386] [-test_suite]"
d262 1
d284 1
d352 8
a692 3
echo Recompiling mlworks-server related material.
cd $SML/src/emacs/lisp && gnumake 
cd $SML/src/emacs/etc && gnumake clean && gnumake 
@


1.113
log
@Please enter new text, ending with a `.' on a line by itself:
add LD_LIBRARY_PATH
@
text
@d8 3
a349 1
# SunOS/Solaris only, file -h on Irix
d351 9
a359 15
  if [ -h machine -a "`file machine | cut -f4 -d\ `" != sparc ]; then
    echo "$script: Removing machine link in ML source:"
    rm -f machine; ln -s sparc machine
    echo "$script: Creating new link machine -> sparc:"    
  fi
  if [ -h winsys -a "`file winsys | cut -f4 -d\ `" != motif ]; then
    echo "$script: Removing winsys link in ML source:"
    rm -f winsys; ln -s motif winsys
    echo "$script: Creating new link winsys -> motif:"
  fi
  if [ -h system -a "`file system | cut -f4 -d\ `" != unix ]; then
    echo "$script: Removing system link in ML source:"
    rm -f system; ln -s unix system
    echo "$script: Creating new link system -> unix:"
  fi
a549 1
# SunOS/Solaris only, file -h on Irix
d551 7
a557 12
  if [ -h machine -a "`file machine | cut -f4 -d\ `" != mips ]; then
    rm -f machine; ln -s mips machine
    echo "$script: Linking machine -> mips:"
  fi
  if [ -h winsys -a "`file winsys | cut -f4 -d\ `" != motif ]; then
    rm -f winsys; ln -s motif winsys
    echo "$script: Linking winsys -> motif:"
  fi
  if [ -h system -a "`file system | cut -f4 -d\ `" != unix ]; then
    rm -f system; ln -s unix system
    echo "$script: Linking system -> unix:"
  fi
a609 1
# SunOS/Solaris only, file -h on Irix
d611 7
a617 12
  if [ -h machine -a "`file machine | cut -f4 -d\ `" != i386 ]; then
    rm -f machine; ln -s i386 machine
    echo "$script: Linking machine -> i386:"
  fi
  if [ -h winsys -a "`file winsys | cut -f4 -d\ `" != motif ]; then
    rm -f winsys; ln -s motif winsys
    echo "$script: Linking winsys -> motif:"
  fi
  if [ -h system -a "`file system | cut -f4 -d\ `" != unix ]; then
    rm -f system; ln -s unix system
    echo "$script: Linking system -> unix:"
  fi
d667 2
a668 6
            if [ -h system -a "`file system | cut -f4 -d\ `" != win_nt ]; then
	rm -f system; ln -s win_nt system
      fi
      if [ -h winsys -a "`file winsys | cut -f4 -d\ `" != motif ]; then
	rm -f winsys; ln -s motif winsys
      fi
d680 3
a684 1
# SunOS/Solaris only, file -h on Irix
d686 3
a688 9
if [ -h machine -a "`file machine | cut -f4 -d\ `" != sparc ]; then
  rm -f machine; ln -s sparc machine
fi
if [ -h winsys -a "`file winsys | cut -f4 -d\ `" != motif ]; then
  rm -f winsys; ln -s motif winsys
fi
if [ -h system -a "`file system | cut -f4 -d\ `" != unix ]; then
  rm -f system; ln -s unix system
fi
@


1.112
log
@Corrected previous log entry.
@
text
@d8 3
d242 4
a245 1

a246 1

d347 1
d349 1
a349 2
  if test -h machine
  then
d351 2
a352 1
    rm -f machine
d354 1
a354 2
  if test -h winsys
  then
d356 2
a357 1
    rm -f winsys
d359 1
a359 2
  if test -h system
  then
d361 2
a362 1
    rm -f system
a363 6
  echo "$script: Creating new link machine -> sparc:"
  ln -s sparc machine
  echo "$script: Creating new link system -> unix:"
  ln -s unix system
  echo "$script: Creating new link winsys -> motif:"
  ln -s motif winsys
d554 1
d556 13
a568 9
  rm -f machine
  echo "$script: Linking machine -> mips:"
  ln -s mips machine
  rm -f system
  echo "$script: Linking system -> unix:"
  ln -s unix system
  rm -f winsys
  echo "$script: Linking winsys -> motif:"
  ln -s motif winsys
d620 1
d622 12
a633 9
  rm -f machine
  echo "$script: Linking machine -> i386:"
  ln -s i386 machine
  rm -f system
  echo "$script: Linking system -> unix:"
  ln -s unix system
  rm -f winsys
  echo "$script: Linking winsys -> motif:"
  ln -s motif winsys
d683 6
a688 4
      rm -f system
      ln -s win_nt system
      rm -f winsys
      ln -s motif winsys
d702 1
d704 9
a712 6
rm -f machine
ln -s sparc machine
rm -f system
ln -s unix system
rm -f winsys
ln -s motif winsys
@


1.111
log
@Fixing
@
text
@d8 3
@


1.110
log
@Removed /u/matthew/... pathname.
@
text
@d8 3
d458 1
a458 1
    TopLevel_.recompile_pervasive Info_.default_options Options_.default_options
d460 1
a460 1
    TopLevel_.recompile_file Info_.default_options Options_.default_options ["$SML/src/main/__batch"]
@


1.109
log
@New hyphenization convention for command line argument
s
@
text
@d8 4
d227 1
a227 1
SML=/u/matthew/ml/MLW; export SML
@


1.108
log
@Ensure lock deleted when exiting from a full build
@
text
@d8 3
d223 1
a223 1
SML=/u/sml/MLW; export SML
d479 1
a479 1
    ../../../rts/runtime -load batch.img -pass a -opt_handlers off -pervasive_dir $SML/src/pervasive -source_path $SML/src -compile ../../../initbasis/require_all.sml ../../../interpreter/interpreter ../../../interpreter/xinterpreter a || { echo "$script: interpreter and initial basis compilation failed, setting status to 6"; status=6; }
d558 1
a558 1
  if ( rts/runtime -load images/SPARC/SunOS/batch.img -pass a -opt_handlers off -pervasive_dir $SML/src/pervasive -source_path $SML/src -compile main/__batch a
d593 1
a593 1
      { ../../../rts/runtime -load batch.img -pass a -opt_handlers on -pervasive_dir $SML/src/pervasive -source_path $SML/src -object_path %S/%C/MIPS/Irix -verbose -compile_pervasive -compile ../../../main/__batch.sml a && ../../../rts/runtime -load batch.img -pass a -opt_handlers off -pervasive_dir $SML/src/pervasive -source_path $SML/src -object_path %S/%C/MIPS/Irix -verbose -compile ../../../interpreter/interpreter.sml ../../../interpreter/xinterpreter.sml a; } || { echo "$script: mips compilation failed, setting status to 6"; status=6; }
d617 1
a617 1
  if ( rts/runtime -load images/SPARC/SunOS/batch.img -pass a -opt_handlers off -pervasive_dir $SML/src/pervasive -source_path $SML/src -compile main/__batch a
d661 1
a661 1
      { ../../../rts/runtime -load batch.img -pass a -opt_handlers on -pervasive_dir $SML/src/pervasive -source_path $SML/src -object_path %S/%C/I386/Linux -verbose -compile_pervasive -compile ../../../main/__batch.sml a && ../../../rts/runtime -load batch.img -pass a -opt_handlers off -pervasive_dir $SML/src/pervasive -source_path $SML/src -object_path %S/%C/I386/Linux -verbose -compile ../../../interpreter/interpreter.sml ../../../interpreter/xinterpreter.sml a; } || { echo "$script: i386 compilation for Linux failed, setting status to 6"; status=6; }
d671 1
a671 1
      { ../../../rts/runtime -load batch.img -pass a -opt_handlers on -pervasive_dir $SML/src/pervasive -source_path $SML/src -object_path %S/%C/I386/NT -verbose -compile_pervasive -compile ../../../main/__batch.sml a && ../../../rts/runtime -load batch.img -pass a -opt_handlers off -pervasive_dir $SML/src/pervasive -source_path $SML/src -object_path %S/%C/I386/NT -verbose -compile ../../../interpreter/interpreter.sml ../../../interpreter/xinterpreter.sml a; } || { echo "$script: i386 compilation for NT failed, setting status to 6"; status=6; }
@


1.107
log
@Add building of FFI capable images
@
text
@d8 3
d426 3
a428 1
    rm $SML/tools/daily-lock
d521 3
a523 1
    rm $SML/tools/daily-lock
d532 3
@


1.106
log
@Renaming motif.img to gui.img
@
text
@d8 3
d475 1
a475 1
        gnumake -k xm.img tty.img gui.img || { echo "$script: sparc image build failed, setting status to 6"; status=6; }
@


1.105
log
@Updated this to use the new project system.
@
text
@d8 3
d472 1
a472 1
        gnumake -k xm.img tty.img motif.img || { echo "$script: sparc image build failed, setting status to 6"; status=6; }
d489 1
a489 1
  elif test -f SPARC/SunOS/motif.img
d492 1
a492 1
    ls -l SPARC/SunOS/motif.img
@


1.104
log
@Add use of optimize_handlers in batch compiler invocation
Use MLWorks for cross compilation to MIPS and I386
@
text
@d8 4
d387 1
a387 1
    make "make/__recompile";
d431 2
a432 2
    ((cd "$SML/src";
      make "make/__recompile")
d437 1
a437 1
    Recompile_.recompile_pervasive Info_.default_options Options_.default_options
d439 1
a439 1
    Recompile_.recompile_modules Info_.default_options Options_.default_options ["main.__batch"]
@


1.103
log
@Modify to do interpreter compilation using MLWorks instead of NJ
@
text
@d8 3
d255 7
a261 7
cd $SML
if test -f tools/daily-lock
then
  echo "$script: The lock is already set:"
  cat tools/daily-lock 1>&2
  exit 1
fi
d263 3
a265 3
(echo "$script: Daily build"
 echo "$script: started `date '+19%y-%m-%d %H:%M:%S'` on `hostname`") |
tee tools/daily-lock
d272 11
a282 11
cd $SML/images
for image in smlk lambda
do
  echo "$script: Zipping NJ image $image into $image.old.gz."
  ls -l $image
  if mv -f $image $image.old
  then
    rm -f $image.old.gz
    nice gzip --fast $image.old &
  fi
done
d286 3
a288 3
echo "$script: Backing up precious object files."
cd $SML/src
(tar cvf - `find . '(' -name '*.mo' -o -name '*.o' ')' -print` | gzip --fast -c ) > object-backup.tar.gz
d293 3
a295 3
echo "$script: Checking out MLWorks sources."
cd $SML/..
$SML/tools/coutall -V
d297 2
a298 2
echo "$script: Ensure all links present."
$SML/tools/mkstruct
d304 7
a310 9
echo "$script: Making the runtime system."
cd $SML/src/rts
ARCH=SPARC;export ARCH
OS=SunOS;export OS
rm depend/$ARCH/$OS/*.d
gnumake clean
#gnumake cleandepend     This can't work
#gnumake cleangen        Don't want this I believe
gnumake -j 5 -e -k generated runtime runtime-g
d316 22
a337 17
cd $SML/src
if test -h machine
then
  echo "$script: Removing machine link in ML source:"
  rm -f machine
fi
if test -h winsys
then
  echo "$script: Removing winsys link in ML source:"
  rm -f winsys
fi
echo "$script: Creating new link machine -> sparc:"
ln -s sparc machine
echo "$script: Creating new link system -> unix:"
ln -s unix system
echo "$script: Creating new link winsys -> motif:"
ln -s motif winsys
d345 8
a352 8
echo "$script: Building NJ smlk image from sml:"
(cd $SML/images && ls -l sml)
cd $SML/src/make
sml << EOF
use "build_make.sml";
exportML "$SML/images/smlk"
  handle Io _ =>
    (System.Unsafe.SysIO.unlink "$SML/images/smlk"; false);
d354 2
a355 2
chmod 770 $SML/images/smlk
echo
d362 8
a369 8
if test ! -x $SML/images/smlk
then
  echo "$script: smlk build failed; setting status to 2, using old smlk"
  status=2
  (cd $SML/images &&
   gzip -d smlk.old.gz &&
   mv smlk.old smlk)
fi
d376 11
a386 11
if test -x $SML/images/smlk
then
  echo "$script: Building NJ lambda image from smlk:"
  (cd $SML/images && ls -l smlk)
  cd $SML/src
  $SML/images/smlk << EOF
cd "$SML/src";
make "make/__recompile";
exportML "$SML/images/lambda"
  handle Io _ =>
    (System.Unsafe.SysIO.unlink "$SML/images/lambda"; false);
d388 3
a390 3
chmod 770 $SML/images/lambda
  echo
fi
d397 8
a404 8
if test ! -x $SML/images/lambda
then
  echo "$script: lambda build failed; setting status to 3, using old lambda"
  status=3
  (cd $SML/images &&
   gzip -d lambda.old.gz &&
   mv lambda.old lambda)
fi
d410 6
a415 6
if test ! -x $SML/images/lambda
then
  echo "$script: The old lambda wouldn't come back, setting status to 4"
  rm $SML/tools/daily-lock
  exit 4
fi
d421 16
a436 16
echo "$script: Compiling MLWorks batch system under New Jersey."
cd $SML/src
if [ $full -eq 1 ]; then
  rm -f pervasive/*.mo
fi
if (lambda << EOF
  ((cd "$SML/src";
    make "make/__recompile")
   handle exn => (output(std_out, "Uncaught exception: " ^ System.exn_name exn ^ "\n");
                  System.Unsafe.CInterface.exit 1));
  Io_.set_pervasive_dir_from_env (Location_.FILE "daily build");
  Io_.set_source_path_from_env (Location_.FILE "daily build");
  Recompile_.recompile_pervasive Info_.default_options Options_.default_options
  handle _ => System.Unsafe.CInterface.exit 1;
  Recompile_.recompile_modules Info_.default_options Options_.default_options ["main.__batch"]
  handle _ => System.Unsafe.CInterface.exit 2;
d438 2
a439 2
  ) then
  echo
d442 11
a452 11
  cd $SML/src/images/SPARC/SunOS
  for image in *.img
  do
    echo "$script: Zipping MLWorks image $image into $image.old.gz."
    ls -l $image
    if mv -f $image $image.old
    then
      rm -f $image.old.gz
      nice gzip --fast $image.old &
    fi
  done
d454 3
a456 3
  echo "$script: Making MLWorks batch image from the mo files."
  gnumake batch.img || { echo "$script: sparc image build failed, setting status to 6"; status=6; }
  echo
d459 3
a461 3
  if [ $status -eq 0 ]; then
    echo "Using MLWorks to compile interpreters and revised initial basis"
    ../../../rts/runtime -load batch.img -pass a -pervasive_dir $SML/src/pervasive -source_path $SML/src -compile ../../../initbasis/require_all.sml ../../../interpreter/interpreter ../../../interpreter/xinterpreter a || { echo "$script: interpreter and initial basis compilation failed, setting status to 6"; status=6; }
d463 4
a466 3
    if [ $status -eq 0 ]; then
      echo "$script: Making MLWorks interpreter and initial basis images from the mo files."
      gnumake -k xm.img tty.img motif.img || { echo "$script: sparc image build failed, setting status to 6"; status=6; }
d468 3
a472 4
else
  echo "$script: sparc compilation failed"
  status=5
fi
d480 3
a482 10
if [ $status -ge 5 ]; then
  echo "$script: Skipping the test suite because of earlier errors"
elif test -f SPARC/SunOS/motif.img
then
  echo "$script: Running the test suite using this image:"
  ls -l SPARC/SunOS/motif.img
  cd $SML/src/test_suite
  mv -f OUTPUT OUTPUT.old
  ./CHECK_RESULT_ALL -src .. | tee OUTPUT | grep '\<fail'
  if test -f OUTPUT.old
d484 6
a489 1
    if diff OUTPUT.old OUTPUT > OUTPUT.diff
d491 12
a502 7
      echo "$script: There are no differences from the previous run"
    else
      echo "$script: Here are the differences from the previous run:"
      cat OUTPUT.diff
      date >> TEST.LOG
      cat OUTPUT.diff >> TEST.LOG
      echo >> TEST.LOG
d504 4
a507 2
    rm -f OUTPUT.old.gz OUTPUT.diff
    nice gzip --fast OUTPUT.old &
a508 4
else
  echo "$script: Lawks!  No MLWorks image.  I can't work under these conditions!"
  rm $SML/tools/daily-lock
  exit 7
d510 6
d521 15
a535 20
cd $SML/src
rm -f machine
echo "$script: Linking machine -> mips:"
ln -s mips machine
rm -f system
echo "$script: Linking system -> unix:"
ln -s unix system
rm -f winsys
echo "$script: Linking winsys -> motif:"
ln -s motif winsys
echo "$script: Using lambda to build mips mos:"
if (lambda << EOF
  cd "$SML/src";
  Io_.set_pervasive_dir_from_env (Location_.FILE "daily build");
  Io_.set_source_path_from_env (Location_.FILE "daily build");
  Recompile_.recompile_pervasive Info_.default_options Options_.default_options
  handle _ => System.Unsafe.CInterface.exit 1;
  Recompile_.recompile_modules Info_.default_options Options_.default_options ["main.__batch"]
  handle _ => System.Unsafe.CInterface.exit 2;
EOF
a536 1
  echo
d539 11
a549 11
  cd $SML/src/images/MIPS/Irix
  for image in *.img
  do
    echo "$script: Zipping mips image $image into $image.old.gz."
    ls -l $image
    if mv -f $image $image.old
    then
      rm -f $image.old.gz
      nice gzip --fast $image.old &
    fi
  done
d551 3
a553 3
  echo "$script: Making Mips images from the mo files."
  gnumake -k batch.img || { echo "$script: mips compiler image build failed, setting status to 6"; status=6; }
  echo
d557 12
a568 5
  if [ $status -eq 0 ]; then
    for x in `cat $SML/tools/src_dirs`; do
      if test \! -d $SML/src/$x/MIPS/Irix
      then
        mkdir -p $SML/src/$x/MIPS/Irix
d570 1
a570 1
    done
a571 4
# Now invoke the batch compiler we just made to do the compilation
    echo "Using MLWorks to compile mips based object files"
    if [ $full -eq 1 ]; then
      rm -f $SML/src/pervasive/MIPS/Irix/*.mo
d573 3
a575 2
    ../../../rts/runtime -load batch.img -pass a -pervasive_dir $SML/src/pervasive -source_path $SML/src -object_path %S/%C/MIPS/Irix -verbose -compile_pervasive -compile ../../../main/__batch.sml ../../../interpreter/interpreter.sml ../../../interpreter/xinterpreter.sml a || { echo "$script: mips compilation failed, setting status to 6"; status=6; }

a576 4
else
  echo "$script: mips compiler compilation failed, setting status to 5"
  status=5
fi
d582 13
a594 20
cd $SML/src
rm -f machine
echo "$script: Linking machine -> i386:"
ln -s i386 machine
rm -f system
echo "$script: Linking system -> unix:"
ln -s unix system
rm -f winsys
echo "$script: Linking winsys -> motif:"
ln -s motif winsys
echo "$script: Using lambda to build i386 mos:"
if (lambda << EOF
  cd "$SML/src";
  Io_.set_pervasive_dir_from_env (Location_.FILE "daily build");
  Io_.set_source_path_from_env (Location_.FILE "daily build");
  Recompile_.recompile_pervasive Info_.default_options Options_.default_options
  handle _ => System.Unsafe.CInterface.exit 1;
  Recompile_.recompile_modules Info_.default_options Options_.default_options ["main.__batch"]
  handle _ => System.Unsafe.CInterface.exit 2;
EOF
d596 1
a596 1
  echo
d599 11
a609 11
  cd $SML/src/images/I386/Linux
  for image in *.img
  do
    echo "$script: Zipping i386 image $image into $image.old.gz."
    ls -l $image
    if mv -f $image $image.old
    then
      rm -f $image.old.gz
      nice gzip --fast $image.old &
    fi
  done
d611 3
a613 3
  echo "$script: Making I386 images from the mo files."
  gnumake -k batch.img || { echo "$script: i386 compiler image build failed, setting status to 6"; status=6; }
  echo
d616 1
a616 1
# These come in two flavour, for Linux and for NT
d618 19
a636 5
  if [ $status -eq 0 ]; then
    for x in `cat $SML/tools/src_dirs`; do
      if test \! -d $SML/src/$x/I386/Linux
      then
        mkdir -p $SML/src/$x/I386/Linux
d638 1
a638 1
    done
d640 7
a646 4
    for x in `cat $SML/tools/src_dirs`; do
      if test \! -d $SML/src/$x/I386/NT
      then
        mkdir -p $SML/src/$x/I386/NT
d648 1
a648 1
    done
a649 14
# Now invoke the batch compiler we just made to do the compilation
    echo "Using MLWorks to compile i386 based object files for Linux"
    if [ $full -eq 1 ]; then
      rm -f $SML/src/pervasive/I386/Linux/*.mo
    fi
    ../../../rts/runtime -load batch.img -pass a -pervasive_dir $SML/src/pervasive -source_path $SML/src -object_path %S/%C/I386/Linux -verbose -compile_pervasive -compile ../../../main/__batch.sml ../../../interpreter/interpreter.sml ../../../interpreter/xinterpreter.sml a || { echo "$script: i386 compilation for Linux failed, setting status to 6"; status=6; }

    echo "Using MLWorks to compile i386 based object files for NT"
    rm -f system
    ln -s win_nt system
    rm -f winsys
    ln -s motif winsys
    if [ $full -eq 1 ]; then
      rm -f $SML/src/pervasive/I386/NT/*.mo
d651 3
a653 2
    ../../../rts/runtime -load batch.img -pass a -pervasive_dir $SML/src/pervasive -source_path $SML/src -object_path %S/%C/I386/NT -verbose -compile_pervasive -compile ../../../main/__batch.sml ../../../interpreter/interpreter.sml ../../../interpreter/xinterpreter.sml a || { echo "$script: i386 compilation for NT failed, setting status to 6"; status=6; }

a654 4
else
  echo "$script: i386 compiler compilation failed, setting status to 5"
  status=5
fi
@


1.102
log
@Made this script only remove pervasive mo files when called with the -full
argument, so that we can catch up with problems without recompiling everything.
@
text
@d8 4
a411 16
# Attempt to make the batch compiler and interpreter systems.  This
# probably won't work because of dependencies on the MLWorks system,
# but it might catch some errors.
# In fact it's a complete waste of time, so I've commented it out.
#
# echo "$script: Hopeless attempt to build the interpreter under New Jersey."
# cd $SML/src
# lambda << EOF
# cd "$SML/src";
# make "main/__batch";
# make "interpreter/interpreter";
# make "interpreter/xinterpreter";
# EOF
# echo


d415 1
a415 1
echo "$script: Compiling MLWorks under New Jersey."
d429 1
a429 1
  Recompile_.recompile_modules Info_.default_options Options_.default_options ["main.__batch", "interpreter.interpreter", "interpreter.xinterpreter"]
d448 2
a449 2
  echo "$script: Making MLWorks images from the mo files."
  gnumake -k batch.img tty.img motif.img || { echo "$script: sparc image build failed, setting status to 6"; status=6; }
d452 1
a452 1
# Now build initial basis, using compiler just produced
d454 2
a455 2
    echo "Using MLWorks to compile revised initial basis"
    ../../../rts/runtime -load batch.img -pass a -pervasive_dir $SML/src/pervasive -source_path $SML/src -compile ../../../initbasis/require_all.sml a || { echo "$script: initial basis compilation failed, setting status to 6"; status=6; }
d458 2
a459 1
      gnumake -k xm.img || { echo "$script: initial basis image build failed, setting status to 6"; status=6; }
@


1.101
log
@The rm commands that I added yesterday used relative paths from the
wrong directory.  I have changed them to use absolute paths.
@
text
@d8 4
d207 1
a207 1
usage="USAGE: $script [-rts] [-smlk] [-lambda] [-sparc] [-mips] [-i386] [-test_suite]"
d216 1
d228 1
d239 1
d429 3
a431 1
rm -f pervasive/*.mo
d571 3
a573 1
    rm -f $SML/src/pervasive/MIPS/Irix/*.mo
d646 3
a648 1
    rm -f $SML/src/pervasive/I386/Linux/*.mo
d656 3
a658 1
    rm -f $SML/src/pervasive/I386/NT/*.mo
@


1.100
log
@Stopped this script from running the test suite if the SPARC build fails.
Also made it remove all pervasive mo files, so that it rebuilds everything
from scratch.
@
text
@d8 5
d562 1
a562 1
    rm -f pervasive/MIPS/Irix/*.mo
d635 1
a635 1
    rm -f pervasive/I386/Linux/*.mo
d643 1
a643 1
    rm -f pervasive/I386/NT/*.mo
@


1.99
log
@Remove compilation of win_int.sml during NT build.
Compile interpreter/{x,}interpreter.sml instead
Ensure all three links are correctly set up for each compilation phase
@
text
@d8 5
d417 1
d471 3
a473 1
if test -f SPARC/SunOS/motif.img
d557 1
d630 1
d638 1
@


1.98
log
@Adding diagnostic for mips compilation failure
@
text
@d8 3
d300 1
a300 1
if test -h system
d302 2
a303 2
  echo "$script: Removing system link in ML source:"
  rm -f system
d309 2
d504 3
d568 3
d621 1
a621 1
    ../../../rts/runtime -load batch.img -pass a -pervasive_dir $SML/src/pervasive -source_path $SML/src -object_path %S/%C/I386/Linux -verbose -compile_pervasive -compile ../../../main/__batch.sml ../../../interpreter/interpreter.sml ../../../interpreter/xinterpreter.sml a || { echo "$script: i386 compiler image build failed, setting status to 6"; status=6; }
d626 3
a628 1
    ../../../rts/runtime -load batch.img -pass a -pervasive_dir $SML/src/pervasive -source_path $SML/src -object_path %S/%C/I386/NT -verbose -compile_pervasive -compile ../../../main/__batch.sml ../../../interpreter/win_int.sml a || { echo "$script: i386 compilation failed, setting status to 6"; status=6; }
d637 1
a637 1
echo "$script: Resetting the links machine -> sparc and system -> unix."
d643 2
@


1.97
log
@Diffs between test suite results are now stored in a log.
@
text
@d8 3
d380 1
a380 1
  echo "$script: The old lambda wouldn't come back.  I'm giving up."
d545 1
a545 1
  echo "$script: mips compiler compilation failed"
d619 1
a619 1
  echo "$script: i386 compiler compilation failed"
@


1.96
log
@Since (...) gets executed in a subshell, changed new diagnostics to use { ...; }
so the change to status is visible
@
text
@d8 4
d466 11
a476 3
    echo "$script: Here are the differences from the previous run:"
    diff OUTPUT.old OUTPUT
    rm -f OUTPUT.old.gz
@


1.95
log
@Adding diagnostics for build failures
@
text
@d8 3
d429 1
a429 1
  gnumake -k batch.img tty.img motif.img || (echo "$script: sparc image build failed, setting status to 6"; status=6)
d435 1
a435 1
    ../../../rts/runtime -load batch.img -pass a -pervasive_dir $SML/src/pervasive -source_path $SML/src -compile ../../../initbasis/require_all.sml a || (echo "$script: initial basis compilation failed, setting status to 6"; status=6)
d438 1
a438 1
      gnumake -k xm.img || (echo "$script: initial basis image build failed, setting status to 6"; status=6)
d511 1
a511 1
  gnumake -k batch.img || (echo "$script: mips compiler image build failed, setting status to 6"; status=6)
d526 1
a526 1
    ../../../rts/runtime -load batch.img -pass a -pervasive_dir $SML/src/pervasive -source_path $SML/src -object_path %S/%C/MIPS/Irix -verbose -compile_pervasive -compile ../../../main/__batch.sml ../../../interpreter/interpreter.sml ../../../interpreter/xinterpreter.sml a || (echo "$script: mips compilation failed, setting status to 6"; status=6)
d572 1
a572 1
  gnumake -k batch.img || (echo "$script: i386 compiler image build failed, setting status to 6"; status=6)
d595 1
a595 1
    ../../../rts/runtime -load batch.img -pass a -pervasive_dir $SML/src/pervasive -source_path $SML/src -object_path %S/%C/I386/Linux -verbose -compile_pervasive -compile ../../../main/__batch.sml ../../../interpreter/interpreter.sml ../../../interpreter/xinterpreter.sml a || (echo "$script: i386 compiler image build failed, setting status to 6"; status=6)
d600 1
a600 1
    ../../../rts/runtime -load batch.img -pass a -pervasive_dir $SML/src/pervasive -source_path $SML/src -object_path %S/%C/I386/NT -verbose -compile_pervasive -compile ../../../main/__batch.sml ../../../interpreter/win_int.sml a || (echo "$script: i386 compilation failed, setting status to 6"; status=6)
d621 1
@


1.94
log
@Ensure that lambda build failures cause complete build failures
@
text
@d8 3
d322 1
a322 1
  echo "$script: Hey!  There's no smlk!  I'll unzip the old image again."
d357 1
a357 1
  echo "$script: Oh no!  There's no lambda!  I'll unzip the old one."
d426 1
a426 1
  gnumake -k batch.img tty.img motif.img || status=6
d432 1
a432 1
    ../../../rts/runtime -load batch.img -pass a -pervasive_dir $SML/src/pervasive -source_path $SML/src -compile ../../../initbasis/require_all.sml a || status=6
d435 1
a435 1
      gnumake -k xm.img || status=6
d440 1
a440 1
  echo "$script: sparc mo file build failed"
d508 1
a508 1
  gnumake -k batch.img || status=6
d523 1
a523 1
    ../../../rts/runtime -load batch.img -pass a -pervasive_dir $SML/src/pervasive -source_path $SML/src -object_path %S/%C/MIPS/Irix -verbose -compile_pervasive -compile ../../../main/__batch.sml ../../../interpreter/interpreter.sml ../../../interpreter/xinterpreter.sml a || status=6
d527 1
a527 1
  echo "$script: mips mo file build failed"
d569 1
a569 1
  gnumake -k batch.img || status=6
d592 1
a592 1
    ../../../rts/runtime -load batch.img -pass a -pervasive_dir $SML/src/pervasive -source_path $SML/src -object_path %S/%C/I386/Linux -verbose -compile_pervasive -compile ../../../main/__batch.sml ../../../interpreter/interpreter.sml ../../../interpreter/xinterpreter.sml a || status=6
d597 1
a597 1
    ../../../rts/runtime -load batch.img -pass a -pervasive_dir $SML/src/pervasive -source_path $SML/src -object_path %S/%C/I386/NT -verbose -compile_pervasive -compile ../../../main/__batch.sml ../../../interpreter/win_int.sml a || status=6
d601 1
a601 1
  echo "$script: i386 mo file build failed"
@


1.93
log
@Remove deletion of auto-generated stuff
@
text
@d8 3
d395 4
a398 2
  cd "$SML/src";
  make "make/__recompile";
@


1.92
log
@Add information to say when build finished
@
text
@d8 3
d265 1
d267 2
a268 2
gnumake cleandepend
gnumake cleangen
@


1.91
log
@Add Intel object file build in the same way as the MIPS one
@
text
@d8 3
d602 3
a604 5
rm $SML/tools/daily-lock
#echo "$script: Finished.  I'll just check myself out to be sure..."
#No longer necessary
#cd $SML
#tools/cout tools/daily
@


1.90
log
@Modifications to build object files for other targets
@
text
@d8 3
d274 5
d281 2
d463 3
d524 3
d557 28
d591 1
a591 1
echo "$script: Resetting the link machine -> sparc."
d595 2
@


1.89
log
@Add building of revised initial basis
and basis.img and xm.img
@
text
@d8 4
d483 15
@


1.88
log
@Changed calls to Io_.set_pervasive_dir_from_env and Io_.set_source_path_from_env
in MIPS and 386 builds
@
text
@d8 4
d285 1
d319 1
d399 10
@


1.87
log
@Remove dependencies and generated files when building the runtime system
@
text
@d8 3
d436 2
a437 2
  Io_.set_pervasive_dir_from_env ();
  Io_.set_source_path_from_env ();
d479 2
a480 2
  Io_.set_pervasive_dir_from_env ();
  Io_.set_source_path_from_env ();
@


1.86
log
@set_pervasive_dir_from_env and set_source_path_from_env now take a
location argument.
@
text
@d8 4
d246 2
@


1.85
log
@trap handler to get rid of lock files
@
text
@d8 3
d358 2
a359 2
  Io_.set_pervasive_dir_from_env ();
  Io_.set_source_path_from_env ();
@


1.84
log
@Split cleaning part of rts build from remkaing part of the build
@
text
@d8 3
d157 7
@


1.83
log
@Add gnumake generated in the runtime.
@
text
@d8 3
d228 2
a229 1
gnumake -j 5 -e -k clean generated runtime runtime-g
@


1.82
log
@changed compress to gzip
@
text
@d8 3
d225 1
a225 1
gnumake -j 5 -e -k clean runtime runtime-g
@


1.81
log
@Suspended generation of static runtime (e.g. main-static)
since this clashes with runtime dynamic linking.
@
text
@d8 4
d131 1
a131 2
SML_HOME=/u/sml; export SML_HOME
SML=$SML_HOME/MLW; export SML
d189 1
a189 1
  echo "$script: Zipping NJ image $image into $image.old.Z."
d193 2
a194 2
    rm -f $image.old.Z
    nice compress $image.old &
d202 1
a202 1
(tar cvf - `find . '(' -name '*.mo' -o -name '*.o' ')' -print` | compress -c) > object-backup.tar.Z
d264 1
a264 1
   uncompress smlk.old.Z &&
d298 1
a298 1
   uncompress lambda.old.Z &&
d352 1
a352 1
    echo "$script: Zipping MLWorks image $image into $image.old.Z."
d356 2
a357 2
      rm -f $image.old.Z
      nice compress $image.old &
d387 2
a388 2
    rm -f OUTPUT.old.Z
    nice compress OUTPUT.old &
d421 1
a421 1
    echo "$script: Zipping mips image $image into $image.old.Z."
d425 2
a426 2
      rm -f $image.old.Z
      nice compress $image.old &
d464 1
a464 1
    echo "$script: Zipping i386 image $image into $image.old.Z."
d468 2
a469 2
      rm -f $image.old.Z
      nice compress $image.old &
@


1.80
log
@removing dependencies on ~sml/bin/make
@
text
@d8 3
d219 1
a219 1
gnumake -j 5 -e -k clean all
@


1.79
log
@Modify for new file structure /u
@
text
@d8 3
d216 1
a216 1
$SML_HOME/bin/make -e -k clean all
d356 1
a356 1
  $SML_HOME/bin/make -k batch.img tty.img motif.img || status=6
d425 1
a425 1
  $SML_HOME/bin/make -k batch.img || status=6
d468 1
a468 1
  $SML_HOME/bin/make -k batch.img || status=6
@


1.78
log
@Introducing SML_HOME
@
text
@d8 3
d121 1
a121 1
SML_HOME=/usr/sml; export SML_HOME
@


1.77
log
@Add i386 build. Move to new image directory structure.
@
text
@d8 3
d118 2
a119 1
SML=/usr/sml/MLW; export SML
d210 1
a210 1
/usr/sml/bin/make -e -k clean all
d350 1
a350 1
  /usr/sml/bin/make -k batch.img tty.img motif.img || status=6
d419 1
a419 1
  /usr/sml/bin/make -k batch.img || status=6
d462 1
a462 1
  /usr/sml/bin/make -k batch.img || status=6
@


1.76
log
@Changed module names to use . separator.
@
text
@d8 3
d122 1
a122 1
usage="USAGE: $script [-rts] [-smlk] [-lambda] [-sparc] [-mips] [-test_suite]"
d129 1
d143 1
d287 1
a287 1
if [ $all -eq 1 -o $sparc -eq 1 -o $mips -eq 1 ]; then
d333 1
a333 1
  cd $SML/src/images
d360 1
a360 1
if test -f motif.img
d363 1
a363 1
  ls -l motif.img
d402 1
a402 1
  cd $SML/src/mips-images
d414 1
a414 1
  echo "$script: Making MIPS images from the mo files."
d422 44
a470 1
fi
@


1.75
log
@Change use of make in image building for gnumake
@
text
@d8 3
d321 1
a321 1
  Recompile_.recompile_modules Info_.default_options Options_.default_options ["main/__batch", "interpreter/interpreter", "interpreter/xinterpreter"]
d390 1
a390 1
  Recompile_.recompile_modules Info_.default_options Options_.default_options ["main/__batch"]
@


1.74
log
@Fix csh-ism.
@
text
@d8 3
d338 1
a338 1
  make -k batch.img tty.img motif.img || status=6
d407 1
a407 1
  make -k batch.img || status=6
@


1.73
log
@Remove attempted extra checkout of daily
@
text
@d8 3
d193 2
a194 2
setenv ARCH SPARC
setenv OS SunOS
@


1.72
log
@New runtime structure.
@
text
@d8 3
d417 4
a420 4
echo "$script: Finished.  I'll just check myself out to be sure..."

cd $SML
tools/cout tools/daily
@


1.71
log
@Recompile_.recompile -> Recompile_.recompile_modules.
@
text
@d8 3
d187 3
a189 1
make -k rm-objects all
@


1.70
log
@Added options to select certain phases only.
@
text
@d8 3
d304 1
a304 1
  Recompile_.recompile Info_.default_options Options_.default_options ["main/__batch", "interpreter/interpreter", "interpreter/xinterpreter"]
d373 1
a373 1
  Recompile_.recompile Info_.default_options Options_.default_options ["main/__batch"]
@


1.69
log
@Remove pretty formatting to ensure EOF is at line start
@
text
@d8 3
d101 25
d129 1
d174 1
d178 1
d182 1
d186 1
d195 1
d201 1
d212 1
d217 1
d226 1
d231 1
d246 1
d251 1
d260 1
d262 1
d271 1
d291 1
d299 4
a302 2
  Recompile_.recompile_pervasive Info_.default_options Options_.default_options;
  Recompile_.recompile Info_.default_options Options_.default_options ["main/__batch", "interpreter/interpreter", "interpreter/xinterpreter"];
d328 1
d333 1
d354 1
d356 1
a356 1
=== NOW DO THE MIPS BUILD ===
d358 1
d368 4
a371 2
  Recompile_.recompile_pervasive Info_.default_options Options_.default_options;
  Recompile_.recompile Info_.default_options Options_.default_options ["main/__batch"];
d402 1
d404 1
d410 1
@


1.68
log
@Made image builds dependent on the success of the compilation in question
@
text
@d8 3
d256 1
a256 1
  EOF
d319 1
a319 1
  EOF
@


1.67
log
@New version of cout.
@
text
@d8 3
d246 11
a256 10
(lambda << EOF
cd "$SML/src";
make "make/__recompile";
Io_.set_pervasive_dir_from_env ();
Io_.set_source_path_from_env ();
Recompile_.recompile_pervasive Info_.default_options Options_.default_options;
Recompile_.recompile Info_.default_options Options_.default_options ["main/__batch", "interpreter/interpreter", "interpreter/xinterpreter"];
EOF
) || status=5
echo
d258 11
d270 3
a272 1
# === MLWORKS IMAGE BUILD ===
d274 4
a277 11
cd $SML/src/images
for image in *.img
do
  echo "$script: Zipping MLWorks image $image into $image.old.Z."
  ls -l $image
  if mv -f $image $image.old
  then
    rm -f $image.old.Z
    nice compress $image.old &
  fi
done
a278 4
echo "$script: Making MLWorks images from the mo files."
make -k batch.img tty.img motif.img || status=6
echo

d310 10
a319 9
(lambda << EOF
cd "$SML/src";
Io_.set_pervasive_dir_from_env ();
Io_.set_source_path_from_env ();
Recompile_.recompile_pervasive Info_.default_options Options_.default_options;
Recompile_.recompile Info_.default_options Options_.default_options ["main/__batch"];
EOF
) || status=5
echo
d321 11
a331 1
# === MIPS IMAGE BUILD ===
d333 3
a335 11
cd $SML/src/mips-images
for image in *.img
do
  echo "$script: Zipping mips image $image into $image.old.Z."
  ls -l $image
  if mv -f $image $image.old
  then
    rm -f $image.old.Z
    nice compress $image.old &
  fi
done
d337 4
a340 3
echo "$script: Making MIPS images from the mo files."
make -k batch.img || status=6
echo
@


1.66
log
@Add mkstruct after coutall
@
text
@d8 3
d341 1
a341 1
tools/cout MLWtools daily
@


1.65
log
@Remove hopeless attempts to build under NJ
@
text
@d8 3
d134 2
@


1.64
log
@Ensure in correct directory before dealing with symbolic links
@
text
@d8 3
d218 11
a228 10

echo "$script: Hopeless attempt to build the interpreter under New Jersey."
cd $SML/src
lambda << EOF
cd "$SML/src";
make "main/__batch";
make "interpreter/interpreter";
make "interpreter/xinterpreter";
EOF
echo
@


1.63
log
@Added stuff to compile mips code as well
@
text
@d8 3
d137 1
@


1.62
log
@Changed hope-coutall to coutall
@
text
@d8 3
d132 9
d280 40
@


1.61
log
@Changed default search path to "."
@
text
@d8 3
d120 1
a120 1
$SML/tools/hope-coutall -V
@


1.60
log
@Changed to use tools/cout instead of scripts/hope-cout.
@
text
@d8 3
d71 1
a71 1
MLWORKS_SRC_PATH=$SML/src; export MLWORKS_SRC_PATH
@


1.59
log
@Fixing filenames for recompile.
@
text
@d8 3
d114 1
a114 1
$SML/../scripts/hope-coutall -v
d266 2
a267 2
## cd $SML/tools
## cout daily
@


1.58
log
@Changed location of src directory.
Temporary change to use ../scripts/hope-coutall instead of tools/coutall.
@
text
@d8 4
d212 1
a212 1
Recompile_.recompile Info_.default_options Options_.default_options ["main.__batch", "interpreter.interpreter", "interpreter.xinterpreter"];
@


1.57
log
@Merged in bug fix.
@
text
@d8 3
d57 1
a57 1
SML=/usr/sml; export SML
d106 2
a107 2
cd $SML/src
$SML/tools/coall
d259 2
a260 2
cd $SML/tools
cout daily
@


1.56
log
@Fixed calls to Recompile_.recompile.
@
text
@d8 10
d52 1
d135 1
d165 1
d177 1
a177 1
  exit 2
d199 1
a199 1
lambda << EOF
d207 1
d226 1
a226 1
make -k batch.img tty.img motif.img
d250 1
a250 1
  exit 3
d258 1
@


1.56.1.1
log
@Fork for bug fixing
@
text
@a7 3
# Revision 1.56  1993/08/31  14:19:41  daveb
# Fixed calls to Recompile_.recompile.
#
@


1.56.1.2
log
@Now exits with non-zero status if any error occurs, including recoverable
ones (such as failing to build smlk).
@
text
@a7 3
# Revision 1.56.1.1  1993/08/31  14:19:41  jont
# Fork for bug fixing
#
a44 1
status=0
a126 1
  status=2
a155 1
  status=3
d167 1
a167 1
  exit 4
d189 1
a189 1
(lambda << EOF
a196 1
) || status=5
d215 1
a215 1
make -k batch.img tty.img motif.img || status=6
d239 1
a239 1
  exit 7
a246 1
exit $status
@


1.55
log
@Changed call to Recompile.recompile.
@
text
@d8 3
d192 1
a192 3
Recompile_.recompile Info_.default_options Options_.default_options [] "main.__batch";
Recompile_.recompile Info_.default_options Options_.default_options [] "interpreter.interpreter";
Recompile_.recompile Info_.default_options Options_.default_options [] "interpreter.xinterpreter";
@


1.54
log
@Added call to Io_.set_source_path_from_env ();
@
text
@d8 3
d189 3
a191 3
Recompile_.recompile Info_.default_options Options_.default_options "main.__batch";
Recompile_.recompile Info_.default_options Options_.default_options "interpreter.interpreter";
Recompile_.recompile Info_.default_options Options_.default_options "interpreter.xinterpreter";
@


1.53
log
@Changed the names of the environment variables pointing to the
pervasive directory and source path.  Added instruction to the MLWorks
build under NJ to set the pervasive dir from the environment.
@
text
@d8 5
d184 1
@


1.52
log
@Made UNIX environment variables begin with MLWORKS_ .
@
text
@d8 3
d36 2
a37 2
MLWORKS_SOURCE_PATH=$SML/src; export MLWORKS_SOURCE_PATH
MLWORKS_PERVASIVE_DIR=$SML/src/pervasive; export MLWORKS_PERVASIVE_DIR
d178 1
@


1.51
log
@Fixed name of ML_SOURCE_PATH.
@
text
@d8 3
d33 2
a34 2
ML_SOURCE_PATH=$SML/src; export ML_SOURCE_PATH
PERVASIVE_DIR=$SML/src/pervasive; export PERVASIVE_DIR
@


1.50
log
@Changes for module naming scheme.
@
text
@d8 3
d30 1
a30 1
SOURCE_PATH=$SML/src; export PATH
@


1.49
log
@Added an echo to distinguish test-suite diffs from test-suite output.
@
text
@d8 3
d27 2
d169 4
a172 4
Recompile_.recompile Info_.default_options Options_.default_options "pervasive/__pervasive_library";
Recompile_.recompile Info_.default_options Options_.default_options "main/__batch";
Recompile_.recompile Info_.default_options Options_.default_options "interpreter/interpreter";
Recompile_.recompile Info_.default_options Options_.default_options "interpreter/xinterpreter";
@


1.48
log
@Rewritten from scratch in Bourne shell with much more robust error
checking and backup.  The script now has more of a succeed-at-all-costs
attitude.
@
text
@d7 6
a12 1
# $Log$
d188 1
d203 1
@


1.47
log
@Remove pervasive.img before making batch.img and motif.img
Running test suite conditional on success of motif.img build
@
text
@d1 12
a12 4
#!/bin/csh
if (-e /usr/sml/tools/build_lock) then
  echo can\'t start build: lock set
else
d14 2
a15 1
set path=(/usr/local/bin $path)
d17 50
d68 3
a70 1
if ( `hostname` == cantor )  setenv PWD `pwd`
d72 4
a75 22
echo build in progress > /usr/sml/tools/build_lock
echo setting build lock
echo Daily ML images build at `date`:
echo 
echo moving old images
echo
/bin/mv -f /usr/sml/images/lambda /usr/sml/images/lambda.old
if (-x /usr/sml/images/lambda.old) compress -f /usr/sml/images/lambda.old
cd /home/ml/sml/src
echo
if ( `hostname` == ml ) echo checking out...
if ( `hostname` == ml ) echo
if ( `hostname` == ml ) /home/ml/sml/tools/coall
if ( `hostname` == ml ) echo
if ( `hostname` == ml ) echo Building auto-generated files and rts
if ( `hostname` == ml ) echo
if ( `hostname` == ml ) pushd rts
if ( `hostname` == ml ) make -k
if ( `hostname` == ml ) echo
if ( `hostname` == ml ) popd
if ( `hostname` == ml ) echo Starting the build on Cantor
if ( `hostname` == ml ) sh -c '/usr/ucb/rsh cantor /usr/sml/tools/daily 1> /home/cantor/sml/tools/dailylog 2> /home/cantor/sml/tools/dailyerrorlog < /dev/null' &
d77 4
a80 5
echo
echo running ML:
echo
cd /usr/sml/src/make
/usr/sml/images/sml << EOF
d82 3
a84 1
exportML "/usr/sml/images/smlk";
d86 27
a112 6
chmod 777 /usr/sml/images/smlk
cd /usr/sml/src
/usr/sml/images/smlk << EOF
cd "/home/ml/sml/src";
make "/home/ml/sml/src/make/__recompile";
exportML "/usr/sml/images/lambda";
d114 34
a147 3
/usr/sml/images/lambda << EOF
make "/home/ml/sml/src/main/__batch";
make "/home/ml/sml/src/interpreter/interpreter";
a148 1
if ( -x /usr/sml/images/lambda ) /bin/rm /usr/sml/images/lambda.old
d150 14
a163 1
echo Image build completed
d166 2
a167 10
if (-e /usr/sml/images/lambda) then
echo Recompiling
if(`hostname` == ml) then
/usr/sml/images/lambda <<EOF
make "/usr/sml/src/make/__recompile";
Recompile_.recompile Info_.default_options Options_.default_options "/usr/sml/src/pervasive/__pervasive_library";
Recompile_.recompile Info_.default_options Options_.default_options "/usr/sml/src/interpreter/xinterpreter";
Recompile_.recompile Info_.default_options Options_.default_options "/usr/sml/src/interpreter/interpreter";
Recompile_.recompile Info_.default_options Options_.default_options "/usr/sml/src/main/__batch";
EOF
d169 32
a200 16
cd "/home/ml/sml/src/images";
rm pervasive.img
make batch.img
if { make motif.img } then
cd "/home/ml/sml/src/test_suite";
if (-e /home/ml/sml/src/test_suite/OUTPUT) then
  mv OUTPUT OUTPUT.old
endif
CHECK_RESULT_ALL -src .. | tee OUTPUT
if (-e /home/ml/sml/src/test_suite/OUTPUT.old) then
  diff OUTPUT.old OUTPUT
endif
else
  echo No success in motif.img build
endif
endif
d202 4
a205 2
  echo No success in lambda build
endif
d207 2
a208 3
echo unsetting build lock
/bin/rm /usr/sml/tools/build_lock
endif
d210 1
a210 1
cd /usr/sml/tools
@


1.46
log
@Changed RUN_ALL_TESTS to CHECK_RESULT_ALL, to reflect
change in the test_Suite, and tee'd output to the OUPUT
file so that the output also appears in the daily log.
@
text
@d68 15
d84 1
a86 15
endif

cd "/home/ml/sml/src/images";
make batch.img
make motif.img

if ( `hostname` == ml ) then
  cd "/home/ml/sml/src/test_suite";
  if (-e /home/ml/sml/src/test_suite/OUTPUT) then
    mv OUTPUT OUTPUT.old
  endif
  CHECK_RESULT_ALL -src .. | tee OUTPUT
  if (-e /home/ml/sml/src/test_suite/OUTPUT.old) then
    diff OUTPUT.old OUTPUT
  endif
@


1.45
log
@Options changes
Also a change of Dave's
@
text
@d82 1
a82 1
  RUN_ALL_TESTS -src .. >& OUTPUT
@


1.44
log
@Changes to support motif version of interpreter.
@
text
@d63 4
a66 3
Recompile_.recompile Info_.default_options TopLevel_.default_compiler_options "/usr/sml/src/pervasive/__pervasive_library";
Recompile_.recompile Info_.default_options TopLevel_.default_compiler_options "/usr/sml/src/interpreter/xinterpreter";
Recompile_.recompile Info_.default_options TopLevel_.default_compiler_options "/usr/sml/src/main/__batch";
@


1.43
log
@Ensured that test suite is only run on ml, not on cantor.
@
text
@d64 1
a64 1
Recompile_.recompile Info_.default_options TopLevel_.default_compiler_options "/usr/sml/src/interpreter/interpreter";
d74 1
a74 1
make interpreter.img
@


1.42
log
@Added code to run test suite.
@
text
@d76 9
a84 7
cd "/home/ml/sml/src/test_suite";
if (-e /home/ml/sml/src/test_suite/OUTPUT) then
  mv OUTPUT OUTPUT.old
endif
RUN_ALL_TESTS -src .. >& OUTPUT
if (-e /home/ml/sml/src/test_suite/OUTPUT.old) then
  diff OUTPUT.old OUTPUT
@


1.41
log
@Added make of batch.img and interpreter.img.
@
text
@d76 9
@


1.40
log
@Removed the builds everynight
@
text
@d72 4
@


1.39
log
@Set umask to 002 so that files written by daily are group
writable.
@
text
@a66 5
cd /usr/sml/src/images
make interpreter <<EOF
Shell.Make.make "/usr/sml/src/parser/__parser";
Shell.save "/home/cantor/sml/images/interpreter_with_parser.img";
EOF
@


1.38
log
@Modified the save instruction to Shell.save
@
text
@d7 1
@


1.37
log
@Added compiler_options parameter to recompile.
@
text
@d69 1
a69 1
save "/home/cantor/sml/images/interpreter_with_parser.img";
@


1.36
log
@Added a build of a parser into the interpreter
@
text
@d62 3
a64 3
Recompile_.recompile Info_.default_options "/usr/sml/src/pervasive/__pervasive_library";
Recompile_.recompile Info_.default_options "/usr/sml/src/interpreter/interpreter";
Recompile_.recompile Info_.default_options "/usr/sml/src/main/__batch";
@


1.35
log
@Added the default info options that are required
@
text
@d66 5
@


1.34
log
@Added the make of the batch compiler
@
text
@d62 3
a64 3
Recompile_.recompile "/usr/sml/src/pervasive/__pervasive_library";
Recompile_.recompile "/usr/sml/src/interpreter/interpreter";
Recompile_.recompile "/usr/sml/src/main/__batch";
@


1.33
log
@Added build of mo's in /usr/sml
@
text
@d64 1
@


1.32
log
@Removed irrelevant make "main/__toplevel"
@
text
@d56 14
@


1.31
log
@The overnight build now builds interpreter/interpreter rather
than __toploop.
@
text
@a44 1
make "/home/ml/sml/src/main/__toplevel";
@


1.30
log
@Added a chmod 777 to smlk to allow overwriting by someone else
running the script
@
text
@d50 2
a51 1
make "/home/ml/sml/src/interpreter/__toploop";
@


1.29
log
@Added cd to correct directory within the ml to get parser paths right
@
text
@d41 1
@


1.28
log
@Made the system go back to src before compiling
@
text
@d43 1
@


1.27
log
@Fixed to stop it recompiling after exports
@
text
@d41 1
@


1.26
log
@Changed build to start from `sml' not `sml75' and to export an
`smlk' when it has built the make system.
@
text
@d40 2
d45 3
@


1.25
log
@We now build from the base NewJersey image
@
text
@d37 1
a37 1
/usr/sml/images/sml75 << EOF
d39 1
@


1.24
log
@Added make of recompile system
@
text
@d36 3
a38 1
/usr/sml/images/smlk << EOF
@


1.23
log
@Was removing the build lock in ML home directory
@
text
@d38 1
@


1.22
log
@Added -f flag to compress command.
@
text
@d45 1
a45 1
/bin/rm /home/ml/sml/tools/build_lock
@


1.21
log
@Put full path name in for compress command.
@
text
@d17 1
a17 1
if (-x /usr/sml/images/lambda.old) compress /usr/sml/images/lambda.old
@


1.20
log
@Added automatic start of build on the dec
@
text
@d17 1
a17 1
if (-x /usr/sml/images/lambda.old) compress lambda.old
@


1.19
log
@Removed compilation of my own copies of the parser and lexer
@
text
@d2 1
a2 1
if (-e /home/ml/sml/tools/build_lock) then
d8 3
a10 1
echo build in progress > /home/ml/sml/tools/build_lock
d16 2
a17 1
/bin/mv -f /home/ml/sml/images/lambda /home/ml/sml/images/lambda.old
d20 13
a32 1
echo checking out...
a33 9
/home/ml/sml/tools/coall
echo
echo Building auto-generated files and rts
echo
pushd rts
make -k
echo
popd
echo
d36 3
a38 6
/home/ml/sml/images/smlk << EOF
make "/home/ml/sml/src/lambda/lambdatry";
make"/home/ml/sml/src/make/compileall.sml";
make "/home/ml/sml/src/make/recompile.sml";
Switches_.eliminate_useless := false;
exportML "/home/ml/sml/images/lambda";
d40 1
a40 1
if ( -x /home/ml/sml/images/lambda ) /bin/rm /home/ml/sml/images/lambda.old
d42 1
a42 2
echo ML images build completed
echo Compiling pervasive library etc.
a43 6
/home/ml/sml/images/lambda << EOF
recompile "/home/ml/sml/src/rts/__pervasive_library";
recompile "/home/ml/sml/src/test/lextest.sml";
recompile "/home/ml/sml/src/test/parsetest.sml";
EOF
echo
d47 3
@


1.18
log
@Added instruction to delete lambda.old if lambda is exported successfully.
@
text
@a45 2
recompile "/usr/users/clive/ml/ml_bootstrap/src/test/lextest.sml" ;
recompile "/usr/users/clive/ml/ml_bootstrap/src/test/parsetest.sml" ;
@


1.17
log
@No longer delete __callc_codes.mo every night
@
text
@d37 1
@


1.16
log
@Added compilation of my parsetest and lextest, as i need my own play copy
@
text
@a40 1
rm /home/ml/sml/src/rts/__callc_codes.mo
@


1.15
log
@Added path command.
@
text
@d46 2
@


1.14
log
@Added an automatic recompilation of pervasive-library, lextest and parsetest
@
text
@d6 2
@


1.13
log
@Turned off eliminate useless
@
text
@d39 1
d42 2
@


1.12
log
@Only needed the one call to recompile
@
text
@d32 1
@


1.11
log
@Added the recompile calls for the pervasive_library and co
@
text
@a38 2
recompile "/home/ml/sml/src/rts/__callc_codes";
recompile "/home/ml/sml/src/rts/__builtin_library";
@


1.10
log
@Changed use into make
@
text
@d39 3
a41 3
TopLevel_.compile_file "/home/ml/sml/src/rts/__callc_codes";
TopLevel_.compile_file "/home/ml/sml/src/rts/__builtin_library";
TopLevel_.compile_file "/home/ml/sml/src/rts/__pervasive_library";
@


1.9
log
@Added the new pervasive library code to compile __builtin_library
@
text
@d30 1
a30 1
use"/home/ml/sml/src/make/compileall.sml";
@


1.8
log
@Added build of recompile for recompiling our stuff under our compiler
@
text
@d40 1
@


1.7
log
@Removed compilation of basis, we don't need this any more.
Added build of separate compilation make system
@
text
@d29 1
a29 1
make "lambda/lambdatry";
d31 1
@


1.6
log
@Added a run of the compileall code.
@
text
@a11 1
/bin/mv -f /home/ml/sml/images/basis /home/ml/sml/images/basis.old
a28 4
make "lambda/lambdastart";
exportML "/home/ml/sml/images/basis";
EOF
/home/ml/sml/images/basis << EOF
d30 1
a39 1
use"/home/ml/src/make/compileall.sml";
@


1.5
log
@Added the compilation of the pervasive library to the overnight build.
@
text
@d39 1
a39 1
echo Compiling pervasive library
d44 1
@


1.4
log
@Added `-k' option to make on the runtime system.  This causes make to
continue after an error by trying other rules.
@
text
@d39 7
@


1.3
log
@*** empty log message ***
@
text
@d23 1
a23 1
make
@


1.2
log
@Added building of runtime system and copying over of auto-generated ML
@
text
@a24 7
echo Checking auto-generated stuff for rts
echo
foreach x(*.sml)
  if (-e ../main/$x) then
    /bin/rm -f ../main/$x
  endif
end
a25 1
cp -p rts/*.sml main
@


1.1
log
@Initial revision
@
text
@d20 15
@
