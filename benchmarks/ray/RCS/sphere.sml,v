head	1.3;
access;
symbols
	MLWorks_21c0_1999_03_25:1.3
	MLWorks_20c1_1998_08_20:1.3
	MLWorks_20c0_1998_08_04:1.3
	MLWorks_20b2c2_1998_06_19:1.3
	MLWorks_20b2_Windows_1998_06_12:1.3
	MLWorks_20b1c1_1998_05_07:1.3
	MLWorks_20b0_1998_04_07:1.3
	MLWorks_20b0_1998_03_20:1.3
	MLWorks_20m2_1998_02_16:1.3
	MLWorks_20m1_1997_10_23:1.3
	MLWorks_11r1:1.2.1.1.1.1.1
	MLWorks_11c0_1997_09_09:1.2.1.1.1.1
	MLWorks_10r3:1.2.1.1.3
	MLWorks_10r2_551:1.2.1.1.2
	MLWorks_11:1.2.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.2.1.1
	MLWorks_20m0_1997_06_20:1.3
	MLWorks_1_0_r2c2_1997_06_14:1.2.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.2.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.2.1
	MLWorks_BugFix_1997_04_24:1.2
	MLWorks_1_0_r2_Win32_1997_04_11:1.2
	MLWorks_1_0_r2_Unix_1997_04_04:1.2;
locks; strict;
comment	@ *  @;


1.3
date	97.05.20.15.49.55;	author matthew;	state Exp;
branches;
next	1.2;

1.2
date	97.04.04.12.04.53;	author jont;	state Exp;
branches
	1.2.1.1;
next	1.1;

1.1
date	96.12.11.12.40.52;	author matthew;	state Exp;
branches;
next	;

1.2.1.1
date	97.05.12.10.23.34;	author hope;	state Exp;
branches
	1.2.1.1.1.1
	1.2.1.1.2.1
	1.2.1.1.3.1;
next	;

1.2.1.1.1.1
date	97.07.28.18.09.28;	author daveb;	state Exp;
branches
	1.2.1.1.1.1.1.1;
next	;

1.2.1.1.1.1.1.1
date	97.10.07.11.33.16;	author jkbrook;	state Exp;
branches;
next	;

1.2.1.1.2.1
date	97.09.08.17.02.49;	author daveb;	state Exp;
branches;
next	;

1.2.1.1.3.1
date	97.09.09.13.57.26;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
@


1.3
log
@Fixing warnings
@
text
@(************************************************************************)
(* Sphere Primitive for The Ghost CSG Raytracer - (C) Chris Walton 1994 *)
(************************************************************************)

(*
   Functions to calculate the intersection points and normals for a sphere. 
   Routine modified from the one given in the "Writing a Ray Tracer" paper by
   Paul S. Heckbert. (Chapter 7 - An Introduction to Ray Tracing)

   Sphere primitive definition : 

   primtype = 3 
   vecdata = [MakeVec(Centre)]
   realdata= [radius, radius^2]
   intdata=[]

*)

functor sphere (structure Csg : CSG) : PRIMITIVE =
  struct
    
    structure Csg=Csg
    open Csg
    open Ray
    open Vector
    
    fun intersect (Prim s, surf, Ray (O, D)) =
          let val V = VecSub ((hd(#vecdata s)), O)
              val b = VecDot (V, D)
              val disc = b*b-(VecDot (V, V))+(hd(tl(#realdata s)))
          in
            if disc<0.0 then (false, [])
            else
              let val disc2 = sqrt(disc)
                  val l1 = b+disc2
              in
                if l1<=epsilon then (false, [])
                else
                  let val l0 = b-disc2
                  in
                    if l0>epsilon then 
                      (false, IsectAdd(IsectAdd([], l0, (Prim s, surf), true),
                                      l1, (Prim s, surf), false))
                    else 
                      (true, IsectAdd([], l1, (Prim s, surf), false))
                  end
              end
          end

    fun normal (Prim s, P) = VecUnit(VecSub(P, hd(#vecdata s)))

    (* Inverse mapping function for a sphere. (CURRENTLY UNUSED) *)  
    local val twoPI = PI*2.0
          val PIdiv2 = PI/2.0    

          exception arc_sin
          fun arcsin x = if x == ~1.0 then ~PIdiv2
                         else if x == 1.0 then PIdiv2
                         else if x < ~1.0 orelse x > 1.0 then raise arc_sin
                         else atan(x/sqrt(1.0-x*x))
   
          exception arc_cos
          fun arccos x = PIdiv2-(arcsin x) handle arc_sin => raise arc_cos

    in fun point (Prim s, P, N) =
             let val (VP,E,C) =
               case #vecdata s of 
                 (_::VP::E::C::_) => (VP,E,C)
               | _ => raise Match
                 val r = hd (#realdata s)
                 val phi = arccos(VecDot((VecNeg N), VP))
                 val sphi = sin phi
                 val theta = if Real.== (sphi,0.0) then 0.0 
		             else arccos((VecDot(E, N))/sphi) 
                 val CdN = VecDot(C, N) 
                 val u = if CdN>0.0 then r*theta else r*(twoPI-theta)
             in
               (u, r*phi)
             end
    end 

  end;
@


1.2
log
@[Bug #2025]
Use new version of Real.equal, called Real.==
@
text
@d66 4
a69 1
             let val (_::VP::E::C::_) = #vecdata s
@


1.2.1.1
log
@branched from 1.2
@
text
@@


1.2.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@@


1.2.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@@


1.2.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@@


1.2.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@


1.1
log
@new unit
@
text
@d70 1
a70 1
                 val theta = if Real.equal (sphi,0.0) then 0.0 
@
