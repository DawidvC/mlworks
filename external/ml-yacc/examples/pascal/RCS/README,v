head	1.2;
access;
symbols
	MLWorks_21c0_1999_03_25:1.2
	MLWorks_20c1_1998_08_20:1.1
	MLWorks_20c0_1998_08_04:1.1
	MLWorks_20b2c2_1998_06_19:1.1
	MLWorks_20b2_Windows_1998_06_12:1.1;
locks; strict;
comment	@# @;


1.2
date	98.09.16.14.39.23;	author jkbrook;	state Exp;
branches;
next	1.1;

1.1
date	98.05.25.18.51.10;	author jkbrook;	state Exp;
branches;
next	;


desc
@new unit
Put ML-Yacc port under version control
@


1.2
log
@[Bug #30412]
Update for projects
@
text
@This is a grammar for Berkeley Pascal, hacked to be SLR, though that is
not necessary because ML-Yacc supports LALR(1).

To construct the parser, first use ML-Yacc on the file "pascal.grm" to create
the files "pascal_grm.sml" and "_pascal_grm.sml".  This can be done by loading
ML-Yacc and typing ``ParseGen.parseGen "pascal.grm"''.  Then construct the
lexer by using ML_Lex on the file pascal.lex (``LexGen.lexGen "pascal.lex"'').

To load it into Harlequin MLWorks, in the GUI open the project
yaccpascal.mlp in the Project Workspace tool and compile and load the
targets using Project > Compile Target Sources and Project > Load
Targets.  This will build the parser structure automatically.

The end result is a structure Parser with two functions.  The
The function parse will parse a program in a file.  
The function keybd will parse a program from the standard input.

@


1.1
log
@new unit
Put ML-Yacc port under version control
@
text
@d9 4
a12 12
To load it into Harlequin MLWorks, first extend the source path to
point to the directory containing the ML-Yacc library directory, lib.
To do this in the GUI, use the Paths=>Source_Path dialog.  Alternatively,
one can type

	Shell.Path.setSourcePath(<directory>::(Shell.Path.sourcePath()));

Then, simply type 

	Shell.File.loadSource "__join";

and this will build the Parser structure automatically.
@
