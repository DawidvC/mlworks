head	1.2;
access;
symbols
	MLWorks_21c0_1999_03_25:1.2
	MLWorks_20c1_1998_08_20:1.1
	MLWorks_20c0_1998_08_04:1.1
	MLWorks_20b2c2_1998_06_19:1.1
	MLWorks_20b2_Windows_1998_06_12:1.1;
locks; strict;
comment	@# @;


1.2
date	98.07.21.19.00.31;	author jkbrook;	state Exp;
branches;
next	1.1;

1.1
date	98.05.25.19.11.13;	author jkbrook;	state Exp;
branches;
next	;


desc
@new unit
Put ML-Yacc port under version control
@


1.2
log
@[Bug #30412]
Get rid of non-unit non-final sequence expressions warning
@
text
@require "sigs";
require "$.basis.__int";


(* ML-Yacc Parser Generator (c) 1989 Andrew W. Appel, David R. Tarditi *)

functor mkVerbose(structure Errs : LR_ERRS) : VERBOSE =
struct
   structure Errs = Errs
   open Errs Errs.LrTable
   val mkPrintAction = fn print =>
	let val printInt = print o (Int.toString : int -> string)
	in fn (SHIFT (STATE i)) =>
			(ignore(print "\tshift ");
		 	 ignore(printInt i);
		 	(print "\n"))
	     | (REDUCE rulenum) =>
			(ignore(print "\treduce by rule ");
		 	 ignore(printInt rulenum);
		 	 print "\n")
	     | ACCEPT => print "\taccept\n"
	     | ERROR => print "\terror\n"
	end
   val mkPrintGoto = fn (printNonterm,print) =>
      let val printInt = print o (Int.toString : int -> string)
      in fn (nonterm,STATE i) =>
		(ignore(print "\t");
		 ignore(printNonterm nonterm);
		 ignore(print "\tgoto ");
		 ignore(printInt i);
		 print "\n")
      end

   val mkPrintTermAction = fn (printTerm,print) =>
 	let val printAction = mkPrintAction print
	in fn (term,action) =>
		(ignore(print "\t");
		 ignore(printTerm term);
		 printAction action)
	end
   val mkPrintGoto = fn (printNonterm,print) =>
	fn (nonterm,STATE i) =>
	    let val printInt = print o (Int.toString : int -> string)
	    in (ignore(print "\t");
		ignore(printNonterm nonterm);
		ignore(print "\tgoto ");
		ignore(printInt i);
		print "\n")
	    end
   val mkPrintError = fn (printTerm,printRule,print) =>
     let val printInt = print o (Int.toString : int -> string)
	 val printState = fn STATE s => (ignore(print " state "); printInt s)
     in fn (RR (term,state,r1,r2)) =>
		(ignore(print "error: ");
		 ignore(printState state);
		 ignore(print ": reduce/reduce conflict between rule ");
		 ignore(printInt r1);
		 ignore(print " and rule ");
		 ignore(printInt r2);
		 ignore(print " on ");
		 ignore(printTerm term);
		 print "\n")
	 | (SR (term,state,r1)) =>
		(ignore(print "error: ");
		 ignore(printState state);
		 ignore(print ": shift/reduce conflict ");
		 ignore(print "(shift ");
		 ignore(printTerm term);
		 ignore(print ", reduce by rule ");
		 ignore(printInt r1);
		 print ")\n")
	 | NOT_REDUCED i =>
		(ignore(print "warning: rule <");
		 ignore(printRule i);
		 print "> will never be reduced\n")
	 | START i => 
	        (ignore(print "warning: start symbol appears on the rhs of ");
	         ignore(print "<");
	         ignore(printRule i);
		 print ">\n")
	 | NS (term,i) =>
	        (ignore(print "warning: non-shiftable terminal ");
		 ignore(printTerm term);
		 ignore(print  "appears on the rhs of ");
	         ignore(print "<");
	         ignore(printRule i);
		 print ">\n")
      end
   structure PairList : sig 
                          val app : ('a * 'b -> unit) -> ('a,'b) pairlist -> unit
                          val length : ('a,'b) pairlist -> int
                        end
       =
      struct
         val app = fn f =>
	     let fun g EMPTY = ()
                   | g (PAIR(a,b,r)) = (ignore(f(a,b)); g r)
             in g
             end
         val length = fn l =>
	     let fun g(EMPTY,len) = len
                   | g(PAIR(_,_,r),len) = g(r,len+1)
             in g(l,0)
             end
      end
   val printVerbose =
	fn {termToString,nontermToString,table,stateErrs,entries:int,
	    print,printRule,errs,printCores} =>
	   let 
		val printTerm = print o termToString
		val printNonterm = print o nontermToString

		val printCore = printCores print
		val printTermAction = mkPrintTermAction(printTerm,print)
		val printAction = mkPrintAction print
		val printGoto = mkPrintGoto(printNonterm,print)
		val printError = mkPrintError(printTerm,printRule print,print)

		val gotos = LrTable.describeGoto table
		val actions = LrTable.describeActions table
		val states = numStates table

                val gotoTableSize = ref 0
                val actionTableSize = ref 0
		
		val _ = if length errs > 0 
			   then (printSummary print errs;
			         print "\n";
				 app printError errs)
			   else ()  
		fun loop i =
		  if i=states then ()
		  else let val s = STATE i
		       in (ignore(app printError (stateErrs s));
			   ignore(print "\n");
			   ignore(printCore s);
			   let val (actionList,default) = actions s
			       val gotoList = gotos s
			   in (PairList.app printTermAction actionList;
			       print "\n";
			       PairList.app printGoto gotoList;
			       print "\n";
			       print "\t.";
			       printAction default;
			       print "\n";
			       gotoTableSize:=(!gotoTableSize)+
			                      PairList.length gotoList;
			       actionTableSize := (!actionTableSize) +
			                       PairList.length actionList + 1
			       ) 
			   end;
			   loop (i+1))
			end
	  in loop 0;
	      print (Int.toString entries ^ " of " ^
		     Int.toString (!actionTableSize)^
		     " action table entries left after compaction\n");
	      print (Int.toString (!gotoTableSize)^ " goto table entries\n")
	  end
end;


@


1.1
log
@new unit
Put ML-Yacc port under version control
@
text
@d14 3
a16 3
			(print "\tshift ";
		 	 printInt i;
		 	print "\n")
d18 2
a19 2
			(print "\treduce by rule ";
		 	 printInt rulenum;
d27 4
a30 4
		(print "\t";
		 printNonterm nonterm;
		 print "\tgoto ";
		 printInt i;
d37 2
a38 2
		(print "\t";
		 printTerm term;
d44 4
a47 4
	    in (print "\t";
		printNonterm nonterm;
		print "\tgoto ";
		printInt i;
d52 1
a52 1
	 val printState = fn STATE s => (print " state "; printInt s)
d54 8
a61 8
		(print "error: ";
		 printState state;
		 print ": reduce/reduce conflict between rule ";
		 printInt r1;
		 print " and rule ";
		 printInt r2;
		 print " on ";
		 printTerm term;
d64 7
a70 7
		(print "error: ";
		 printState state;
		 print ": shift/reduce conflict ";
		 print "(shift ";
		 printTerm term;
		 print ", reduce by rule ";
		 printInt r1;
d73 2
a74 2
		(print "warning: rule <";
		 printRule i;
d77 3
a79 3
	        (print "warning: start symbol appears on the rhs of ";
	         print "<";
	         printRule i;
d82 5
a86 5
	        (print "warning: non-shiftable terminal ";
		 printTerm term;
		 print  "appears on the rhs of ";
	         print "<";
	         printRule i;
d97 1
a97 1
                   | g (PAIR(a,b,r)) = (f(a,b); g r)
d134 3
a136 3
		       in (app printError (stateErrs s);
			   print "\n";
			   printCore s;
@
