head	1.2;
access;
symbols
	MLWorks_21c0_1999_03_25:1.2
	MLWorks_20c1_1998_08_20:1.1
	MLWorks_20c0_1998_08_04:1.1
	MLWorks_20b2c2_1998_06_19:1.1
	MLWorks_20b2_Windows_1998_06_12:1.1;
locks; strict;
comment	@# @;


1.2
date	98.09.16.14.47.44;	author jkbrook;	state Exp;
branches;
next	1.1;

1.1
date	98.05.25.19.11.24;	author jkbrook;	state Exp;
branches;
next	;


desc
@new unit
Put ML-Yacc port under version control
@


1.2
log
@[Bug #30412]
Update for new delivery syntax and command-line structure
@
text
@(* deliver-yacc.sml
 *
 * ML-Yacc Parser Generator (c) 1991 Andrew W. Appel, David R. Tarditi
 * adapted for Harlequin Ltd. MLWorks 1997, 1998
 *
 *)

require "$.basis.__text_io";
require "$.basis.__string";
require "$.basis.__command_line";
require "__link";

structure DeliverParseGen : sig

    val parseGen : unit -> unit

  end = struct
    fun err msg = TextIO.output (TextIO.stdErr, msg)

    fun parseGen () =
      let
        val argv = CommandLine.arguments()
        fun parse_gen () =
            (case argv
               of [file] => ParseGen.parseGen file
                | _ => err("Usage: ml-yacc filename\n")
		(* end case *))
	  in
            parse_gen()
            handle MLWorks.Interrupt => ()
                 | ex => err (String.concat
                    [ "? ml-yacc: uncaught exception ", exnMessage ex, "\n"
			  ])
	  end
  end;

fun deliver name = MLWorks.Deliver.deliver(name,DeliverParseGen.parseGen,MLWorks.Deliver.CONSOLE);

@


1.1
log
@new unit
Put ML-Yacc port under version control
@
text
@d4 1
a4 1
 * adapted for Harlequin Ltd. MLWorks 1997
a5 2
 * extend source path with the directory containing the ml-yacc lib
 * directory before Shell.File.loadSource-ing this file.
d10 1
d22 1
a22 1
        val argv = MLWorks.arguments()
d37 1
a37 1
fun deliver name = MLWorks.Deliver.deliver(name,DeliverParseGen.parseGen,true);
@
