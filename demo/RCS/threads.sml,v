head	1.2;
access;
symbols
	MLWorks_21c0_1999_03_25:1.2
	MLWorks_20c1_1998_08_20:1.2
	MLWorks_20c0_1998_08_04:1.2
	MLWorks_20b2c2_1998_06_19:1.2
	MLWorks_20b2_Windows_1998_06_12:1.2
	MLWorks_20b1c1_1998_05_07:1.2
	MLWorks_20b0_1998_04_07:1.2
	MLWorks_20b0_1998_03_20:1.2
	MLWorks_20m2_1998_02_16:1.2
	MLWorks_workspace_97:1.2.8
	MLWorks_20m1_1997_10_23:1.2
	MLWorks_11r1:1.2.7.1.1.1.1
	MLWorks_11c0_1997_09_09:1.2.7.1.1.1
	MLWorks_10r3:1.2.7.1.3
	MLWorks_10r2_551:1.2.7.1.2
	MLWorks_11:1.2.7.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.2.7.1
	MLWorks_20m0_1997_06_20:1.2
	MLWorks_1_0_r2c2_1997_06_14:1.2.7.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.2.7.1
	MLWorks_1_0_r2c1_1997_05_12:1.2.7
	MLWorks_BugFix_1997_04_24:1.2
	MLWorks_1_0_r2_Win32_1997_04_11:1.2
	MLWorks_1_0_r2_Unix_1997_04_04:1.2
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.2.6.1.1
	MLWorks_1_0_Win32_1996_12_17:1.2.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.2.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.2.4.1
	MLWorks_1_0_Irix_1996_11_28:1.2.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.2.5
	MLWorks_1_0_Unix_1996_11_14:1.2.4
	MLWorks_Open_Beta2_1996_10_11:1.2.3
	MLWorks_License_dev:1.2.2
	MLWorks_1_open_beta_1996_09_13:1.2.1
	MLWorks_Open_Beta_1996_08_22:1.2
	MLWorks_Beta_1996_07_02:1.1
	MLWorks_Beta_1996_06_07:1.1
	MLWorks_Beta_1996_06_06:1.1
	MLWorks_Beta_1996_06_05:1.1
	MLWorks_Beta_1996_06_03:1.1
	MLWorks_Beta_1996_05_31:1.1
	MLWorks_Beta_1996_05_30:1.1;
locks; strict;
comment	@ *  @;


1.2
date	96.08.19.16.24.35;	author johnh;	state Exp;
branches
	1.2.1.1
	1.2.2.1
	1.2.3.1
	1.2.4.1
	1.2.5.1
	1.2.6.1
	1.2.7.1
	1.2.8.1;
next	1.1;

1.1
date	95.05.23.11.16.43;	author daveb;	state Exp;
branches;
next	;

1.2.1.1
date	96.09.13.11.07.39;	author hope;	state Exp;
branches;
next	;

1.2.2.1
date	96.10.07.15.58.49;	author hope;	state Exp;
branches;
next	;

1.2.3.1
date	96.10.17.11.17.10;	author hope;	state Exp;
branches;
next	;

1.2.4.1
date	96.11.14.12.40.39;	author hope;	state Exp;
branches
	1.2.4.1.1.1;
next	;

1.2.4.1.1.1
date	96.11.28.14.52.29;	author hope;	state Exp;
branches;
next	;

1.2.5.1
date	96.11.22.18.01.06;	author hope;	state Exp;
branches;
next	;

1.2.6.1
date	96.12.17.17.39.59;	author hope;	state Exp;
branches
	1.2.6.1.1.1;
next	;

1.2.6.1.1.1
date	97.02.24.11.27.12;	author hope;	state Exp;
branches;
next	;

1.2.7.1
date	97.05.12.10.25.01;	author hope;	state Exp;
branches
	1.2.7.1.1.1
	1.2.7.1.2.1
	1.2.7.1.3.1;
next	;

1.2.7.1.1.1
date	97.07.28.18.10.16;	author daveb;	state Exp;
branches
	1.2.7.1.1.1.1.1;
next	;

1.2.7.1.1.1.1.1
date	97.10.07.11.34.18;	author jkbrook;	state Exp;
branches;
next	;

1.2.7.1.2.1
date	97.09.08.17.03.35;	author daveb;	state Exp;
branches;
next	;

1.2.7.1.3.1
date	97.09.09.13.58.14;	author daveb;	state Exp;
branches;
next	;

1.2.8.1
date	97.11.30.16.47.16;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
Threads demo package.
@


1.2
log
@modified get'get' for polymovalue polymorphismcsm.
@
text
@signature THREADS =
sig
  type 'a thread

  val fork : ('a -> 'b) -> 'a -> 'b thread
  val yield : unit -> unit

  datatype 'a result =
    Running		(* still running *)
  | Waiting		(* waiting *)
  | Sleeping		(* sleeping *)
  | Result of 'a	(* completed, with this result *)
  | Exception of exn	(* exited with this uncaught exn *)
  | Died		(* died (e.g. bus error) *)
  | Killed		(* killed *)
  | Expired		(* no longer exists (from a previous image) *)
    
  val result : 'a thread -> 'a result

  structure Internal :
    sig
      eqtype thread_id

      val id : unit -> thread_id		(* this thread *)
      val get_id : 'a thread -> thread_id	(* that thread *)

      val children : thread_id -> thread_id list
      val parent : thread_id -> thread_id

      val all : unit -> thread_id list		(* all threads *)

      val kill : thread_id -> unit		(* kill a thread *)
      val raise_in : thread_id * exn -> unit	(* raise exn in the thread *)
      val yield_to : thread_id -> unit		(* fiddle with scheduling *)

      val state : thread_id -> unit result	(* the state of that thread *)
      val get_num : thread_id -> int		(* the 'thread number' *)

      val set_handler : (unit -> unit) -> unit (* restart fn for this thread *)
	
      structure Preemption : 
	sig
	  val start : unit -> unit
	  val stop : unit -> unit
	  val on : unit -> bool
	  val get_interval : unit -> int	(* milliseconds *)
	  val set_interval : int -> unit
	end
    end
end;

(*
structure Threads : THREADS =
struct
  datatype 'a result =
    Running		(* still running *)
  | Waiting		(* waiting *)
  | Sleeping		(* sleeping *)
  | Result of 'a	(* completed, with this result *)
  | Exception of exn	(* exited with this uncaught exn *)
  | Died		(* died (e.g. bus error) *)
  | Killed		(* killed *)
  | Expired		(* no longer exists (from a previous image) *)
    
  datatype 'a thread =
    Thread of MLWorks.Internal.Value.ml_value result ref * int

  local
    fun get x =
      (MLWorks.Internal.Value.cast
       (MLWorks.Internal.Runtime.environment x)) (* : string -> 'a *)
    val identity = MLWorks.Internal.Value.cast (fn x => x)
  in
    fun result (Thread (r,i)) = MLWorks.Internal.Value.cast (!r);
      
    fun c_fork x = (get "thread fork") x (* : (unit -> 'b) -> 'b thread *)
      
    fun fork (f : 'a -> 'b) a = c_fork (fn () => f a)
      
    val yield = (get "thread yield") : unit -> unit
      
    structure Internal =
      struct
	type thread_id = unit thread

	val id = (get "thread current thread") : unit -> thread_id
	fun get_id t = MLWorks.Internal.Value.cast t : thread_id
	val children = (get "thread children") : thread_id -> thread_id list
	val parent = (get "thread parent") : thread_id -> thread_id
	val all = (get "thread all threads") : unit -> thread_id list

	val kill = (get "thread kill") : thread_id -> unit
	val raise_in = (get "thread raise") : thread_id * exn -> unit
	val yield_to = (get "thread yield to") : thread_id -> unit
	val set_handler = (get "thread set handler") : (unit -> unit) -> unit

	val get_num = (get "thread number") : thread_id -> int
	fun state t =
	  case (result t) of 
	    Running => Running
	  | Waiting => Waiting
	  | Sleeping => Sleeping
	  | Result _ => Result ()
	  | Exception e => Exception e
	  | Died => Died
	  | Killed => Killed
	  | Expired => Expired

	structure Preemption =
	  struct
	    val start = (get "thread start preemption") : unit -> unit
	    val stop = (get "thread stop preemption") : unit -> unit
	    val on = (get "thread preempting") : unit -> bool
	    val get_interval = (get "thread get preemption interval")
				: unit -> int
	    val set_interval = (get "thread set preemption interval")
				: int -> unit
	  end
      end
  end

end;

*)


fun start () = (MLWorks.Threads.Internal.Preemption.set_interval 20;
                MLWorks.Threads.Internal.Preemption.start())

(*fun start () = (Threads.Internal.Preemption.set_interval 20;
		Threads.Internal.Preemption.start ())
*)

(*
fun delay 0 = () | delay n = delay (n-1);

fun short_thread (s,n) =
  let fun loop 0 = ()
	| loop n = (output(std_out,s^"...\n");
		    delay 500000;
		    loop (n-1))
  in (output(std_out,"starting "^s^".\n");
      loop n;
      output(std_out,"finishing "^s^".\n"))
  end;

val _ = start();
val ch1 = Threads.fork short_thread("foo",3);
val ch2 = Threads.fork short_thread("bar",3);
val ch3 = Threads.fork short_thread("baz",3);
val _ = short_thread("qux",3);
*)
@


1.2.8.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@@


1.2.7.1
log
@branched from 1.2
@
text
@@


1.2.7.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@@


1.2.7.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@@


1.2.7.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@@


1.2.7.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@


1.2.6.1
log
@branched from 1.2
@
text
@@


1.2.6.1.1.1
log
@branched from 1.2.6.1
@
text
@@


1.2.5.1
log
@branched from 1.2
@
text
@@


1.2.4.1
log
@branched from 1.2
@
text
@@


1.2.4.1.1.1
log
@branched from 1.2.4.1
@
text
@@


1.2.3.1
log
@branched from 1.2
@
text
@@


1.2.2.1
log
@branched from 1.2
@
text
@@


1.2.1.1
log
@branched from 1.2
@
text
@@


1.1
log
@new unit
Threads demo package.
@
text
@d39 1
a39 1
      val set_restart : (unit -> unit) -> unit (* restart fn for this thread *)
d52 1
d69 1
a69 1
    val get =
d71 1
a71 1
       MLWorks.Internal.Runtime.environment) : string -> 'a
d76 1
a76 1
    val c_fork = (get "thread fork") : (unit -> 'b) -> 'b thread
d87 1
a87 1
	fun get_id t = (identity t) : thread_id
d95 1
a95 1
	val set_restart = (get "thread set restart") : (unit -> unit) -> unit
d121 1
d124 7
a130 1
fun start () = (Threads.Internal.Preemption.set_interval 20;
d132 1
@
