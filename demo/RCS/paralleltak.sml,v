head	1.5;
access;
symbols
	MLWorks_21c0_1999_03_25:1.5
	MLWorks_20c1_1998_08_20:1.5
	MLWorks_20c0_1998_08_04:1.5
	MLWorks_20b2c2_1998_06_19:1.5
	MLWorks_20b2_Windows_1998_06_12:1.5
	MLWorks_20b1c1_1998_05_07:1.5
	MLWorks_20b0_1998_04_07:1.4
	MLWorks_20b0_1998_03_20:1.4
	MLWorks_20m2_1998_02_16:1.4
	MLWorks_workspace_97:1.4.1
	MLWorks_20m1_1997_10_23:1.4
	MLWorks_11r1:1.3.4.1.1.1.1
	MLWorks_11c0_1997_09_09:1.3.4.1.1.1
	MLWorks_10r3:1.3.4.1.3
	MLWorks_10r2_551:1.3.4.1.2
	MLWorks_11:1.3.4.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.3.4.1
	MLWorks_20m0_1997_06_20:1.3
	MLWorks_1_0_r2c2_1997_06_14:1.3.4.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.3.4.1
	MLWorks_1_0_r2c1_1997_05_12:1.3.4
	MLWorks_BugFix_1997_04_24:1.3
	MLWorks_1_0_r2_Win32_1997_04_11:1.3
	MLWorks_1_0_r2_Unix_1997_04_04:1.3
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.3.3.1.1
	MLWorks_1_0_Win32_1996_12_17:1.3.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.3.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.3.1.1
	MLWorks_1_0_Irix_1996_11_28:1.3.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.3.2
	MLWorks_1_0_Unix_1996_11_14:1.3.1
	MLWorks_Open_Beta2_1996_10_11:1.2.3
	MLWorks_License_dev:1.2.2
	MLWorks_1_open_beta_1996_09_13:1.2.1
	MLWorks_Open_Beta_1996_08_22:1.2
	MLWorks_Beta_1996_07_02:1.1
	MLWorks_Beta_1996_06_07:1.1
	MLWorks_Beta_1996_06_06:1.1
	MLWorks_Beta_1996_06_05:1.1
	MLWorks_Beta_1996_06_03:1.1
	MLWorks_Beta_1996_05_31:1.1
	MLWorks_Beta_1996_05_30:1.1;
locks; strict;
comment	@ *  @;


1.5
date	98.05.06.16.03.41;	author johnh;	state Exp;
branches;
next	1.4;

1.4
date	97.07.15.11.16.37;	author brucem;	state Exp;
branches
	1.4.1.1;
next	1.3;

1.3
date	96.11.06.11.54.40;	author matthew;	state Exp;
branches
	1.3.1.1
	1.3.2.1
	1.3.3.1
	1.3.4.1;
next	1.2;

1.2
date	96.08.20.14.47.10;	author johnh;	state Exp;
branches
	1.2.1.1
	1.2.2.1
	1.2.3.1;
next	1.1;

1.1
date	95.05.23.11.15.00;	author daveb;	state Exp;
branches;
next	;

1.2.1.1
date	96.09.13.11.06.57;	author hope;	state Exp;
branches;
next	;

1.2.2.1
date	96.10.07.15.58.02;	author hope;	state Exp;
branches;
next	;

1.2.3.1
date	96.10.17.11.16.24;	author hope;	state Exp;
branches;
next	;

1.3.1.1
date	96.11.14.12.39.26;	author hope;	state Exp;
branches
	1.3.1.1.1.1;
next	;

1.3.1.1.1.1
date	96.11.28.14.51.27;	author hope;	state Exp;
branches;
next	;

1.3.2.1
date	96.11.22.18.00.03;	author hope;	state Exp;
branches;
next	;

1.3.3.1
date	96.12.17.17.38.59;	author hope;	state Exp;
branches
	1.3.3.1.1.1;
next	;

1.3.3.1.1.1
date	97.02.24.11.26.09;	author hope;	state Exp;
branches;
next	;

1.3.4.1
date	97.05.12.10.23.56;	author hope;	state Exp;
branches
	1.3.4.1.1.1
	1.3.4.1.2.1
	1.3.4.1.3.1;
next	;

1.3.4.1.1.1
date	97.07.28.18.10.38;	author daveb;	state Exp;
branches
	1.3.4.1.1.1.1.1;
next	;

1.3.4.1.1.1.1.1
date	97.10.07.11.34.52;	author jkbrook;	state Exp;
branches;
next	;

1.3.4.1.2.1
date	97.09.08.17.03.56;	author daveb;	state Exp;
branches;
next	;

1.3.4.1.3.1
date	97.09.09.13.58.56;	author daveb;	state Exp;
branches;
next	;

1.4.1.1
date	97.11.30.16.49.00;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
Demo of threads and windows.
@


1.5
log
@[Bug #30392]
Fix compiler warnings.
@
text
@(*  ==== Parallel demo  ====
 *
 *  Copyright (C) 1996 Harlequin Ltd
 *
 * $Log: paralleltak.sml,v $
 *  Revision 1.4  1997/07/15  11:16:37  brucem
 *  [Bug #30199]
 *  Changes to structure names.
 *
 *  Revision 1.3  1996/11/06  11:54:40  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
 *  Revision 1.2  1996/08/20  14:47:10  johnh
 *  update to refer to existing threads library,.
 *
 *)

require "$.basis.__int";
require "$.motif.__xm";

structure Threads = MLWorks.Threads;

(* Shell.Path.set_source_path [".", "~sml/MLW/src"];
Shell.Make.load_module "library.__xm";*)

fun text_window {title, height, width} =

  let
    
    val appshell = Xm.initialize (title,
				     "appshellappclass", [])
      
    val text_widget = Xm.Widget.createScrolledText
      (appshell, "text_widget",
       [(Xm.EDIT_MODE, Xm.EDIT_MODE_VALUE Xm.MULTI_LINE_EDIT),
	(Xm.HEIGHT, Xm.INT height),
	(Xm.WIDTH, Xm.INT width)])
      
    val _ = Xm.Widget.manage text_widget
      
    val _ = Xm.Widget.realize appshell
      
    val pos = ref 0
      
    fun output s = 
      let
	val length = size s
	val current = !pos
	val new = current + length
      in
	(Xm.Text.insert (text_widget,
			  current,
			  s);
	 pos := new)
      end
    fun destroy () = Xm.Widget.destroy appshell
  in
    (output,destroy)
  end

local
  fun doit(0,f,a) = ()
    | doit (n,f,a) = (ignore (f a);
		      doit (n-1,f,a))
  fun id x = x
  fun delay n = doit(n,id,())
  fun delayed_dot (d,out) = (delay d;
			     out ".")
  fun slow_line' (n,d,out) = (doit(n,delayed_dot,(d,out));
			     out "\n")
  fun slow_lines (wname,n,m,d,out) =
    (ignore (out("some dots : "^wname^"\n"));
     doit (n,slow_line',(m,d,out));
     out("done some dots for "^wname^"\n"))
in    
  fun slow_window(wname,h,w,n,m,d) =
    let val (ptw,dtw) = text_window{title = wname, height = h, width = w}
    in (slow_lines(wname:string,n,m,d,ptw);
	dtw())
    end
  fun dots () = slow_window("dots",200,200,20,20,50000)
  fun slow_line (n,out) = slow_line'(n,100000,out)
end



fun delay 0 = () | delay n = delay (n-1)

fun force t =
        case Threads.result t of
          Threads.Result r => r
        | Threads.Exception e => raise e
        | _ => (Threads.yield ();
                force t)

val ms = Int.toString 
fun tak_report (p,x,y,z) = 
  p ("tak("^(ms x)^", "^(ms y)^", "^(ms z)^")\n")
fun tak_result (p,n) =
  p ("returning "^(ms n)^"\n")
  
fun tak (x,y,z) =
  if x <= y 
    then z
  else
    if x+y+z < 34 then 
      let
	val x' = tak(x-1,y,z)
	val y' = tak(y-1,z,x)
	val z' = tak(z-1,x,y)
      in
	tak(x',y',z')
      end
    else
      let
	val (ptw,dtw) = text_window{title =" tak",height = 300, width = 400}
	fun tak' (x,y,z) = 
	  if x <= y 
	    then z
	  else
	    if x+y+z < 34 then 
	      let
		val x' = tak(x-1,y,z)
		val y' = tak(y-1,z,x)
		val z' = tak(z-1,x,y)
	      in
		tak(x',y',z')
	      end
	    else
	      let
		val x' = Threads.fork tak(x-1,y,z)
		val _ = (ptw"forking ";
			 tak_report(ptw,x-1,y,z))
		val _ = slow_line(20,ptw)
		val y' = Threads.fork tak(y-1,z,x)
		val _ = (ptw"forking ";
			 tak_report(ptw,y-1,z,x))
		val _ = slow_line(20,ptw)
		val z'' = tak'(z-1,x,y)
		val x'' = force x'
		val y'' = force y'
	      in
		tak'(x'',y'',z'')
	      end
	val _ = tak_report(ptw,x,y,z)
	val _ = slow_line(20,ptw)
	val ans = tak'(x,y,z)
	val _ = tak_result(ptw,ans)
	val _ = slow_line(20,ptw)
      in
	(dtw();
	 ans)
      end

fun tak_test () = (Threads.Internal.Preemption.start();
		   tak (18,12,6))

fun par_tak () = (Threads.Internal.Preemption.start();
		  ignore (Threads.fork tak (18,12,6));
		  ())
	    
(*    fun tak_test() =
      tak(18,12,6)
*)
@


1.4
log
@[Bug #30199]
Changes to structure names.
@
text
@d6 4
d64 1
a64 1
    | doit (n,f,a) = (f a;
d73 1
a73 1
    (out("some dots : "^wname^"\n");
d160 1
a160 1
		  Threads.fork tak (18,12,6);
@


1.4.1.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a5 4
 *  Revision 1.4  1997/07/15  11:16:37  brucem
 *  [Bug #30199]
 *  Changes to structure names.
 *
@


1.3
log
@[Bug #1728]
__integer becomes __int
@
text
@d6 4
d15 2
a16 2
require "basis/__int";
require "motif/__xm";
d27 1
a27 1
    val appshell = Xm_.initialize (title,
d30 1
a30 1
    val text_widget = Xm_.Widget.createScrolledText
d32 3
a34 3
       [(Xm_.EDIT_MODE, Xm_.EDIT_MODE_VALUE Xm_.MULTI_LINE_EDIT),
	(Xm_.HEIGHT, Xm_.INT height),
	(Xm_.WIDTH, Xm_.INT width)])
d36 1
a36 1
    val _ = Xm_.Widget.manage text_widget
d38 1
a38 1
    val _ = Xm_.Widget.realize appshell
d48 1
a48 1
	(Xm_.Text.insert (text_widget,
d53 1
a53 1
    fun destroy () = Xm_.Widget.destroy appshell
@


1.3.4.1
log
@branched from 1.3
@
text
@a5 4
 *  Revision 1.3  1996/11/06  11:54:40  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
@


1.3.4.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a5 3
 *  Revision 1.3.4.1  1997/05/12  10:23:56  hope
 *  branched from 1.3
 *
@


1.3.4.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a5 3
 *  Revision 1.3.4.1  1997/05/12  10:23:56  hope
 *  branched from 1.3
 *
@


1.3.4.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a5 3
 *  Revision 1.3.4.1  1997/05/12  10:23:56  hope
 *  branched from 1.3
 *
@


1.3.4.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a5 3
 *  Revision 1.3.4.1.1.1  1997/07/28  18:10:38  daveb
 *  branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.3.3.1
log
@branched from 1.3
@
text
@a5 4
 *  Revision 1.3  1996/11/06  11:54:40  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
@


1.3.3.1.1.1
log
@branched from 1.3.3.1
@
text
@a5 3
 *  Revision 1.3.3.1  1996/12/17  17:38:59  hope
 *  branched from 1.3
 *
@


1.3.2.1
log
@branched from 1.3
@
text
@a5 4
 *  Revision 1.3  1996/11/06  11:54:40  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
@


1.3.1.1
log
@branched from 1.3
@
text
@a5 4
 *  Revision 1.3  1996/11/06  11:54:40  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
@


1.3.1.1.1.1
log
@branched from 1.3.1.1
@
text
@a5 3
 *  Revision 1.3.1.1  1996/11/14  12:39:26  hope
 *  branched from 1.3
 *
@


1.2
log
@update to refer to existing threads library,.
@
text
@d5 4
a8 1
 * $Log$
d11 1
a11 1
require "basis/__integer";
@


1.2.3.1
log
@branched from 1.2
@
text
@d5 1
a5 4
 * $Log: paralleltak.sml,v $
 *  Revision 1.2  1996/08/20  14:47:10  johnh
 *  update to refer to existing threads library,.
 *
@


1.2.2.1
log
@branched from 1.2
@
text
@d5 1
a5 4
 * $Log: paralleltak.sml,v $
 *  Revision 1.2  1996/08/20  14:47:10  johnh
 *  update to refer to existing threads library,.
 *
@


1.2.1.1
log
@branched from 1.2
@
text
@d5 1
a5 4
 * $Log: paralleltak.sml,v $
 *  Revision 1.2  1996/08/20  14:47:10  johnh
 *  update to refer to existing threads library,.
 *
@


1.1
log
@new unit
Demo of threads and windows.
@
text
@d1 76
d86 1
a86 1
val ms = MLWorks.Integer.makestring 
d106 1
a106 1
	val (ptw,dtw) = text_window{title="tak",height = 100, width = 200}
d145 1
a145 1
fun tak_test () = (start();
d148 1
a148 1
fun par_tak () = (start();
@
