head	1.2;
access;
symbols
	MLWorks_21c0_1999_03_25:1.2
	MLWorks_20c1_1998_08_20:1.2
	MLWorks_20c0_1998_08_04:1.2
	MLWorks_20b2c2_1998_06_19:1.2
	MLWorks_20b2_Windows_1998_06_12:1.2
	MLWorks_20b1c1_1998_05_07:1.2
	MLWorks_20b0_1998_04_07:1.2
	MLWorks_20b0_1998_03_20:1.2
	MLWorks_20m2_1998_02_16:1.2
	MLWorks_workspace_97:1.2.8
	MLWorks_20m1_1997_10_23:1.2
	MLWorks_11r1:1.2.7.1.1.1.1
	MLWorks_11c0_1997_09_09:1.2.7.1.1.1
	MLWorks_10r3:1.2.7.1.3
	MLWorks_10r2_551:1.2.7.1.2
	MLWorks_11:1.2.7.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.2.7.1
	MLWorks_20m0_1997_06_20:1.2
	MLWorks_1_0_r2c2_1997_06_14:1.2.7.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.2.7.1
	MLWorks_1_0_r2c1_1997_05_12:1.2.7
	MLWorks_BugFix_1997_04_24:1.2
	MLWorks_1_0_r2_Win32_1997_04_11:1.2
	MLWorks_1_0_r2_Unix_1997_04_04:1.2
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.2.6.1.1
	MLWorks_1_0_Win32_1996_12_17:1.2.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.2.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.2.4.1
	MLWorks_1_0_Irix_1996_11_28:1.2.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.2.5
	MLWorks_1_0_Unix_1996_11_14:1.2.4
	MLWorks_Open_Beta2_1996_10_11:1.2.3
	MLWorks_License_dev:1.2.2
	MLWorks_1_open_beta_1996_09_13:1.2.1
	MLWorks_Open_Beta_1996_08_22:1.2
	MLWorks_Beta_1996_07_02:1.2
	MLWorks_Beta_1996_06_07:1.2
	MLWorks_Beta_1996_06_06:1.2
	MLWorks_Beta_1996_06_05:1.2
	MLWorks_Beta_1996_06_03:1.2
	MLWorks_Beta_1996_05_31:1.2
	MLWorks_Beta_1996_05_30:1.2;
locks; strict;
comment	@# @;


1.2
date	95.11.13.17.43.34;	author daveb;	state Exp;
branches
	1.2.1.1
	1.2.2.1
	1.2.3.1
	1.2.4.1
	1.2.5.1
	1.2.6.1
	1.2.7.1
	1.2.8.1;
next	1.1;

1.1
date	95.11.03.16.22.32;	author daveb;	state Exp;
branches;
next	;

1.2.1.1
date	96.09.13.11.07.48;	author hope;	state Exp;
branches;
next	;

1.2.2.1
date	96.10.07.15.58.59;	author hope;	state Exp;
branches;
next	;

1.2.3.1
date	96.10.17.11.17.19;	author hope;	state Exp;
branches;
next	;

1.2.4.1
date	96.11.14.12.40.48;	author hope;	state Exp;
branches
	1.2.4.1.1.1;
next	;

1.2.4.1.1.1
date	96.11.28.14.52.41;	author hope;	state Exp;
branches;
next	;

1.2.5.1
date	96.11.22.18.01.17;	author hope;	state Exp;
branches;
next	;

1.2.6.1
date	96.12.17.17.40.11;	author hope;	state Exp;
branches
	1.2.6.1.1.1;
next	;

1.2.6.1.1.1
date	97.02.24.11.27.24;	author hope;	state Exp;
branches;
next	;

1.2.7.1
date	97.05.12.10.25.13;	author hope;	state Exp;
branches
	1.2.7.1.1.1
	1.2.7.1.2.1
	1.2.7.1.3.1;
next	;

1.2.7.1.1.1
date	97.07.28.18.11.06;	author daveb;	state Exp;
branches
	1.2.7.1.1.1.1.1;
next	;

1.2.7.1.1.1.1.1
date	97.10.07.11.35.42;	author jkbrook;	state Exp;
branches;
next	;

1.2.7.1.2.1
date	97.09.08.17.04.25;	author daveb;	state Exp;
branches;
next	;

1.2.7.1.3.1
date	97.09.09.13.59.27;	author daveb;	state Exp;
branches;
next	;

1.2.8.1
date	97.11.30.16.49.33;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
Script for MLWorks demonstrations.
@


1.2
log
@Minor additions from HOOTS notes.
@
text
@                             -*- Text -*-

(The demo directory contains files to use (or include in) as .emacs,
 .twmrc. .mwmrc and .Xresources files.  Also check your environment for
 correct (or incorrect) settings of the PATH, MLWORKS_SRC_PATH,
 MLWORKS_PERVASIVE, MLWORKS_OBJ_PATH, XUSERFILESEARCHPATH, etc.
 Check your X modmap files.  If you want to use the graphics, make sure
 that you have got the necessary motif/windows and initial basis files.)

(Start an emacs first and check that the mlworks server is running.  Ensure
 that you're in the demo directory, and that your source path is set to the
 src directory, or else loading basis files will break.  Check that
 app-defaults/MLWorks-fonts is linked to the appropriate fonts file, and
 use the appropriate elisp font function to set the emacs font.  Check that
 that _simplelib.sml is the original version, and that all .mo files are
 removed.)

Start MLWorks.

  Explain the top-level window.  Explain the `Works' menu and that it
  appears in all the tools.  Explain that we're using a larger font than
  normal.

  Explain our philosophy of integrating with existing systems where possible,
  e.g. host window systems, host editors.
  Explain the editor preferences, and check that emacs is selected.

  Use the options menu to switch on debugging etc.
 
Start a Listener.

  Say `This is the traditional interactive ML interface'.
  Type `val x=1'.

  Type the fibonacci function.  Show that multi-line editing works.
  Press `Evaluate' (or use Control + Enter).

  Trace the fibonacci function and evaluate "fib 4".
  Demonstrate completion and the history menu.

Show the pervasive context browser.

  Show how you can browse structures.

  Select Shell.Make.make_file and paste it into the Listener.
  Load the "data_tree" file.
  Evaluate "y1".

Start an Inspector.

  Show how you can changed the layout of the graph.

  Show that the tools are linked by evaluating "rottree it" and "revtree it"
  in the Listener.

Show the Context History.

  Show that you can examine values in the Context History even after they
  have been redefined.

  Mention that you can disconnect tools from this automatic linking.

Say that you're going to demonstrate stepping and the debugger.

  Select step mode.

  Evaluate "revtree y1".  Make sure the emacs window is visible.
  Step through part of the evaluation, then continue.

Say that you're going to demonstrate profiling.

  Load "__simple".  Explain that this is a standard benchmark.
  Explain that it uses the make system, and that only those files
  that are needed are recompiled.

  Evaluate "Shell.Profile.profile Simple.simple ()"
  Explain the resulting figures.  Demonstrate the slider.

  Edit the most expensive function.  Uncomment the alternative
  implementation.  Unlink the profile tool and run the profile again.
  Point out that only the changed files are being recompiled.


Say that you're going to demonstrate separate compilation.
  Compile "hello.sml".
  Use an xterm to show the .mo file.
  Run the .mo file with mlpervasive.


Say that you're going to demonstrate the error browser.

  Nobble the hello.sml file and remake.  Use the editor function to find
  your error and correct it.  Remake again.

Say that you're going to demonstrate the graphics libraries.

  Load "life.sml".
  While this is loading, explain that we use the host window system 
  whereever possible, to preserve native look and feel and to make
  programming easier.
  Run "test" for a little while.  Point out that you can still type
  at the Listener, etc.
  Load "man-demo.sml" and run "test".

Say that you're going to demonstrate exporting an image.

  Evaluate Shell.exportFn ("life.img", appl)
  Point out that the evironment is still running.
  Run the saved image briefly.



** Secondary and old stuff.

    Explain how MLWorks prints stuff in psuedo-source form.
    Briefly demonstrate the value printer options by changing the
    depth.

  Start the Inspector on a Btree value.

    Show how the Inspector method can be improved by adding a new
    inspect method.
      Use the Context Browser to find Shell.add_inspect_method and
      Btree.members.
      Add the inspect method.
        Explain in passing that you're using a dynamic type.  Use the
        word `reify'.
      Demonstrate it on the previous tree.
      Also, type Btree.eg in the Inspector and explain that it is
      eval'ed to display it.
    Exit the Inspector.

  Say that you're going to demonstrate advanced tracing.

    Load the tracing examples.
      use "examples";
    Put a simple trace on the fib function.
      Shell.trace <<fib>>;
    Run it.
      fib 5;
    (Explain that we'll probably have a graphical tracing tool later.)
    Explain that you can use conditional tracing and breakpoints.
      Shell.trace_full (<<fib>>, <<fn n=>n>2>>, <<fn n=>n=0>>);
    This will pop up a debugger when fib 0 is called.
      Now's your chance to demonstrate frame filters to remove all the
      tracing rubbish.
    Continue from the debugger several times.

  Say that you're going to demonstrate the TTY debugger.
    Unset the "always use window debugger" preference.
    Evaluate "fun f 0 => raise Div | f n = n + f (n-1)".
    Evaluate "f 3".
    Demonstrate the TTY debugger commands.


  Say that you're going to demonstrate the make system.

    Pop up a file tool.  Switch to the demo directory.
    Use the `edit' action to pop up the file number.sml.  It contains
    a signature describing numbers.  Explain this.
    Find the `integer' file.  It contains a structure implementing the
    signature using the built-in integers.  Explain this.  Explain the
    require statement at the top.
    Make the integer file.

  Say that you're going to demonstrate incremental recompilation.

    Find the `church' file.  It contains an implementation using
    Church numerals.  Point out the require.
    Make the church file.  Note that number isn't recompiled.

    Find the `convert' file.  It contains conversions between church
    numbers and integers.  Make it.  Demonstrate the functions.

Say that you're going to demonstrate windows and threads.
  Load "threads.sml".
  Explain that we can distribute libraries in compiled form.
  Load "textwindow.sml".
  Explain that this is loading the xm.mo files.


@


1.2.8.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@@


1.2.7.1
log
@branched from 1.2
@
text
@@


1.2.7.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@@


1.2.7.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@@


1.2.7.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@@


1.2.7.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@


1.2.6.1
log
@branched from 1.2
@
text
@@


1.2.6.1.1.1
log
@branched from 1.2.6.1
@
text
@@


1.2.5.1
log
@branched from 1.2
@
text
@@


1.2.4.1
log
@branched from 1.2
@
text
@@


1.2.4.1.1.1
log
@branched from 1.2.4.1
@
text
@@


1.2.3.1
log
@branched from 1.2
@
text
@@


1.2.2.1
log
@branched from 1.2
@
text
@@


1.2.1.1
log
@branched from 1.2
@
text
@@


1.1
log
@new unit
Script for MLWorks demonstrations.
@
text
@d14 3
a16 4
 use the appropriate elisp font function to set the emacs font.)

(Either start here, or start MLWorks before the demo & check that 
 everything is working.)
d21 2
a22 1
  appears in all the tools.
d24 2
a28 2

(This is the alternative entry point).
@
