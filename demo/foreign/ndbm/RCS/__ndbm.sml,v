head	1.2;
access;
symbols
	MLWorks_21c0_1999_03_25:1.2
	MLWorks_20c1_1998_08_20:1.2
	MLWorks_20c0_1998_08_04:1.2
	MLWorks_20b2c2_1998_06_19:1.2
	MLWorks_20b2_Windows_1998_06_12:1.2
	MLWorks_20b1c1_1998_05_07:1.2
	MLWorks_20b0_1998_04_07:1.2
	MLWorks_20b0_1998_03_20:1.2
	MLWorks_20m2_1998_02_16:1.2
	MLWorks_workspace_97:1.2.1
	MLWorks_20m1_1997_10_23:1.2
	MLWorks_20m0_1997_06_20:1.1;
locks; strict;
comment	@ *  @;


1.2
date	97.07.03.08.14.32;	author stephenb;	state Exp;
branches
	1.2.1.1;
next	1.1;

1.1
date	97.04.29.14.49.42;	author stephenb;	state Exp;
branches;
next	;

1.2.1.1
date	97.11.30.16.47.47;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
[Bug #30030]
@


1.2
log
@[Bug #30029]
The previous version used the signatures/structures from
the prototype version the new FI.  This version uses the
signatures/structures that a customer will see.
@
text
@(* Copyright (C) 1997 The Harlequin Group Limited.  All rights reserved.
 * 
 * This file should be generated by a stub-generator from <ndbm.h>
 * The current version has been written by hand.
 *
 * Revision Log
 * ------------
 * $Log: foreign:ndbm:__ndbm.sml,v $
 *  Revision 1.1  1997/04/29  14:49:42  stephenb
 *  new unit
 *  [Bug #30030]
 *
 *)

require "$.basis.__word";
require "$.foreign.__mlworks_dynamic_library";
require "$.foreign.__mlworks_c_interface";
require "ndbm";
require "__ndbm_stub";


structure Ndbm : NDBM =
  struct
    (* C' is just here to make the code shorter and easier to write.
     * Whether the stub generated version uses this is an up to 
     * the stub generator writer
     *)
    structure C' = MLWorksCInterface

    type c_int = C'.Int.int
    type c_uint = C'.Uint.word
    type c_char = C'.Char.char
    type 'a c_ptr = 'a C'.ptr

    fun scale'' offset addr = C'.next (addr, offset)

    datatype DBM = DBM of C'.void c_ptr

    datatype datum = DATUM of C'.void c_ptr

    (* Hidden utility functions *)
      
    fun DBM'toRep' (DBM addr) = addr

    fun datum'toRep' (DATUM addr) = addr

    (* dbm utilities *)

    val DBM'size' = 0w11 * 0w4 + 0w1024 + 0w4096

    val DBM'addr' = C'.fromVoidPtr o DBM'toRep'

    (* datum utilities *)

    val datum'size' : Word.word = 0w8

    val datum'addr' : datum -> datum c_ptr = C'.fromVoidPtr o datum'toRep'

    (* Fields Addresses *)

    val DBM'dbm_dirf'addr : DBM -> c_int c_ptr = 
      C'.fromVoidPtr o scale'' 0w0 o DBM'toRep'
    
    val DBM'dbm_pagf'addr : DBM -> c_int c_ptr = 
      C'.fromVoidPtr o scale'' 0w4 o DBM'toRep'

    (* ... *)

    (* Field Values *)

    val DBM'dbm_dirf : DBM -> c_int = 
      C'.IntPtr.! o DBM'dbm_dirf'addr
    
    val DBM'dbm_pagf : DBM -> c_int = 
      C'.IntPtr.! o DBM'dbm_pagf'addr
    
    (* ... *)


    (* Fields Addresses *)

    val datum'dptr'addr : datum -> c_char c_ptr c_ptr = 
      C'.fromVoidPtr o scale'' 0w0 o datum'toRep'

    val datum'dsize'addr : datum -> C'.Uint.word c_ptr =
      C'.fromVoidPtr o scale'' 0w4 o datum'toRep'


    (* Fields Values *)

    val datum'dptr : datum -> c_char c_ptr = 
      C'.PtrPtr.! o datum'dptr'addr

    val datum'dsize : datum -> C'.Uint.word =
      C'.UintPtr.! o datum'dsize'addr


    val DBM_INSERT = C'.Int.fromInt 0
    val DBM_REPLACE = C'.Int.fromInt 1

    val dbm_open : c_char c_ptr * c_int * c_int -> DBM c_ptr =
      MLWorksDynamicLibrary.bind "dbm_open"

    val dbm_store : DBM c_ptr * datum * datum * c_int -> c_int =
      MLWorksDynamicLibrary.bind "dbm_store"

    val dbm_delete : DBM c_ptr * datum -> c_int =
      MLWorksDynamicLibrary.bind "dbm_delete"

    val dbm_fetch : DBM c_ptr * datum -> datum =
      MLWorksDynamicLibrary.bind "dbm_fetch"

    val dbm_firstkey : DBM c_ptr -> datum =
      MLWorksDynamicLibrary.bind "dbm_firstkey"

    val dbm_nextkey : DBM c_ptr -> datum =
      MLWorksDynamicLibrary.bind "dbm_nextkey"

    val dbm_error : DBM c_ptr -> c_int =
      MLWorksDynamicLibrary.bind "dbm_error"

    val dbm_clearerr : DBM c_ptr -> c_int =
      MLWorksDynamicLibrary.bind "dbm_clearerr"

    val dbm_close : DBM c_ptr -> unit =
      MLWorksDynamicLibrary.bind "dbm_close"
    
  end
@


1.2.1.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a8 6
 *  Revision 1.2  1997/07/03  08:14:32  stephenb
 *  [Bug #30029]
 *  The previous version used the signatures/structures from
 *  the prototype version the new FI.  This version uses the
 *  signatures/structures that a customer will see.
 *
@


1.1
log
@new unit
[Bug #30030]
@
text
@d1 13
a13 9
(* Copyright 1997 The Harlequin Group Limited.  All rights reserved.
** 
** This file should be generated by a stub-generator from <ndbm.h>
** The current version has been written by hand.
**
** Revision Log
** ------------
** $Log$
*)
d16 2
a17 1
require "$.foreign.__c";
d24 5
a28 1
    datatype dbm = DBM of C.VoidPtr.ptr
d30 4
a33 1
    val null = DBM C.VoidPtr.null
d35 92
a126 26
    structure datum =
      struct
        datatype datum = DATUM of C.VoidPtr.ptr
        val size = 0w8
        fun make n = DATUM (C.Memory.malloc (n*size))
        fun free (DATUM addr) = C.Memory.free addr
        fun fp_dptr (DATUM addr) = C.fromVoidPtr addr
        fun fp_dsize (DATUM addr) = C.fromVoidPtr (C.VoidPtr.next (addr, Word.+(C.ptrSize, C.ptrPadding)))
        val f_dptr = C.deRefPtrPtr o fp_dptr
        val f_dsize = C.deRefIntPtr o fp_dsize
      end

    val DBM_INSERT = C.Int.fromInt 0
    val DBM_REPLACE = C.Int.fromInt 1

    val dbm_open : C.signed C.c_char C.ptr * C.signed C.c_int * C.signed C.c_int -> dbm =
      C.call "dbm_open"
    val dbm_store : dbm * datum.datum * datum.datum * C.signed C.c_int -> C.signed C.c_int =
      C.call "dbm_store"
    val dbm_delete : dbm * datum.datum -> C.signed C.c_int = C.call "dbm_delete"
    val dbm_fetch : dbm * datum.datum -> datum.datum = C.call "dbm_fetch"
    val dbm_firstkey : dbm -> datum.datum = C.call "dbm_firstkey"
    val dbm_nextkey : dbm -> datum.datum = C.call "dbm_nextkey"
    val dbm_error : dbm -> C.signed C.c_int = C.call "dbm_error"
    val dbm_clearerr : dbm -> C.signed C.c_int = C.call "dbm_clearerr"
    val dbm_close : dbm -> unit = C.call "dbm_close"
@
