head	1.2;
access;
symbols
	MLWorks_21c0_1999_03_25:1.2
	MLWorks_20c1_1998_08_20:1.2
	MLWorks_20c0_1998_08_04:1.2
	MLWorks_20b2c2_1998_06_19:1.2
	MLWorks_20b2_Windows_1998_06_12:1.2
	MLWorks_20b1c1_1998_05_07:1.2
	MLWorks_20b0_1998_04_07:1.2
	MLWorks_20b0_1998_03_20:1.2
	MLWorks_20m2_1998_02_16:1.2
	MLWorks_workspace_97:1.2.1
	MLWorks_20m1_1997_10_23:1.2
	MLWorks_20m0_1997_06_20:1.1;
locks; strict;
comment	@ * @;


1.2
date	97.06.30.10.46.20;	author stephenb;	state Exp;
branches
	1.2.1.1;
next	1.1;

1.1
date	97.04.29.14.52.31;	author stephenb;	state Exp;
branches;
next	;

1.2.1.1
date	97.11.30.16.49.07;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
[Bug #30030]
@


1.2
log
@[Bug #30029]
Propagate name changes made in mlw_ci.h
@
text
@/* Copyright (C) 1997 The Harlequin Group Limited.  All rights reserved.
 *
 * This file could/should be generated by a stub generator from <ndbm.h>
 * This version has been written by hand.
 *
 * Revision Log
 * ------------
 * $Log: foreign:ndbm:ndbm_stub.c,v $
 * Revision 1.1  1997/04/29  14:52:31  stephenb
 * new unit
 * [Bug #30030]
 *
 */

#include <ndbm.h>
#include <errno.h>
#include "mlw_ci.h"

static mlw_val mlw_stub_dbm_open(mlw_val arg)
{
  char *file_name= mlw_ci_char_ptr_to_charp(mlw_arg(arg, 0));
  int flags= mlw_ci_int_to_int(mlw_arg(arg, 1));
  int mode= mlw_ci_int_to_int(mlw_arg(arg, 2));
  DBM * dbm= dbm_open(file_name, flags, mode);
  return mlw_ci_void_ptr_from_voidp((void *)dbm);
}



static mlw_val mlw_stub_dbm_fetch(mlw_val arg)
{
  DBM *dbm= (DBM *)mlw_ci_void_ptr_to_voidp(mlw_arg(arg, 0));
  datum * kp= (datum *)mlw_ci_void_ptr_to_voidp(mlw_arg(arg, 1));
  datum * rp;
  datum key, result;
  memcpy(&key, kp, sizeof(datum));
  result= dbm_fetch(dbm, key);
  if ((rp= malloc(sizeof(datum))) == (datum *)0)
    mlw_ci_raise_syserr(errno);
  memcpy(rp, &result, sizeof(datum));
  return mlw_ci_void_ptr_from_voidp(rp);
}



static mlw_val mlw_stub_dbm_store(mlw_val arg)
{
  DBM *dbm= (DBM *)mlw_ci_void_ptr_to_voidp(mlw_arg(arg, 0));
  datum * kp= (datum *)mlw_ci_void_ptr_to_voidp(mlw_arg(arg, 1));
  datum * cp= (datum *)mlw_ci_void_ptr_to_voidp(mlw_arg(arg, 2));
  int flags = mlw_ci_int_to_int(mlw_arg(arg, 3));
  datum key, contents;
  int result;
  memcpy(&key, kp, sizeof(datum));
  memcpy(&contents, cp, sizeof(datum));
  result= dbm_store(dbm, key, contents, flags);
  return mlw_ci_int_from_int(result);
}



static mlw_val mlw_stub_dbm_delete(mlw_val arg)
{
  DBM *dbm= (DBM *)mlw_ci_void_ptr_to_voidp(mlw_arg(arg, 0));
  datum * kp= (datum *)mlw_ci_void_ptr_to_voidp(mlw_arg(arg, 1));
  datum key;
  int result;
  memcpy(&key, kp, sizeof(datum));
  result= dbm_delete(dbm, key);
  return mlw_ci_int_from_int(result);
}



static mlw_val mlw_stub_dbm_firstkey(mlw_val arg)
{
  DBM *dbm= (DBM *)mlw_ci_void_ptr_to_voidp(arg);
  datum * rp;
  datum result;
  result= dbm_firstkey(dbm);
  if ((rp= malloc(sizeof(datum))) == (datum *)0)
    mlw_ci_raise_syserr(errno);
  memcpy(rp, &result, sizeof(datum));
  return mlw_ci_void_ptr_from_voidp(rp);
}



static mlw_val mlw_stub_dbm_nextkey(mlw_val arg)
{
  DBM *dbm= (DBM *)mlw_ci_void_ptr_to_voidp(arg);
  datum * rp;
  datum result;
  result= dbm_nextkey(dbm);
  if ((rp= malloc(sizeof(datum))) == (datum *)0)
    mlw_ci_raise_syserr(errno);
  memcpy(rp, &result, sizeof(datum));
  return mlw_ci_void_ptr_from_voidp(rp);
}



static mlw_val mlw_stub_dbm_error(mlw_val arg)
{
  DBM *dbm= (DBM *)mlw_ci_void_ptr_to_voidp(arg);
  int result= dbm_error(dbm);
  return mlw_ci_int_from_int(result);
}




static mlw_val mlw_stub_dbm_clearerr(mlw_val arg)
{
  DBM *dbm= (DBM *)mlw_ci_void_ptr_to_voidp(arg);
  int result= dbm_clearerr(dbm);
  return mlw_ci_int_from_int(result);
}



static mlw_val mlw_stub_dbm_close(mlw_val arg)
{
  DBM *dbm= (DBM *)mlw_ci_void_ptr_to_voidp(arg);
  dbm_close(dbm);
  return mlw_val_unit;
}



mlw_ci_export void mlw_stub_init_ndbm(void)
{
  mlw_ci_register_function("dbm_open",     mlw_stub_dbm_open);
  mlw_ci_register_function("dbm_close",    mlw_stub_dbm_close);
  mlw_ci_register_function("dbm_fetch",    mlw_stub_dbm_fetch);
  mlw_ci_register_function("dbm_store",    mlw_stub_dbm_store);
  mlw_ci_register_function("dbm_delete",   mlw_stub_dbm_delete);
  mlw_ci_register_function("dbm_firstkey", mlw_stub_dbm_firstkey);
  mlw_ci_register_function("dbm_nextkey",  mlw_stub_dbm_nextkey);
  mlw_ci_register_function("dbm_error",    mlw_stub_dbm_error);
  mlw_ci_register_function("dbm_clearerr", mlw_stub_dbm_clearerr);
}
@


1.2.1.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a8 4
 * Revision 1.2  1997/06/30  10:46:20  stephenb
 * [Bug #30029]
 * Propagate name changes made in mlw_ci.h
 *
@


1.1
log
@new unit
[Bug #30030]
@
text
@d1 13
a13 9
/* Copyright 1997 The Harlequin Group Limited.  All rights reserved.
**
** This file could/should be generated by a stub generator from <ndbm.h>
** This version has been written by hand.
**
** Revision Log
** ------------
** $Log$
*/
d16 1
a16 1
#include <stdio.h>
d19 1
a19 2

static mlw_val dbm_open_stub(mlw_val arg)
d21 3
a23 3
  char *file_name= mlw_val_c_char_ptr_to_charp(mlw_arg(arg, 0));
  int flags= mlw_val_c_int_to_int(mlw_arg(arg, 1));
  int mode= mlw_val_c_int_to_int(mlw_arg(arg, 2));
d25 1
a25 1
  return mlw_val_c_void_ptr_from_voidp((void *)dbm);
d30 1
a30 1
static mlw_val dbm_fetch_stub(mlw_val arg)
d32 2
a33 2
  DBM *dbm= (DBM *)mlw_val_c_void_ptr_to_voidp(mlw_arg(arg, 0));
  datum * kp= (datum *)mlw_val_c_void_ptr_to_voidp(mlw_arg(arg, 1));
d38 2
a39 3
  if ((rp= malloc(sizeof(datum))) == (datum *)0) {
    /* XXX: do something */
  }
d41 1
a41 1
  return mlw_val_c_void_ptr_from_voidp(rp);
d46 1
a46 1
static mlw_val dbm_store_stub(mlw_val arg)
d48 4
a51 4
  DBM *dbm= (DBM *)mlw_val_c_void_ptr_to_voidp(mlw_arg(arg, 0));
  datum * kp= (datum *)mlw_val_c_void_ptr_to_voidp(mlw_arg(arg, 1));
  datum * cp= (datum *)mlw_val_c_void_ptr_to_voidp(mlw_arg(arg, 2));
  int flags = mlw_val_c_int_to_int(mlw_arg(arg, 3));
d57 1
a57 1
  return mlw_val_c_int_from_int(result);
d62 1
a62 1
static mlw_val dbm_delete_stub(mlw_val arg)
d64 2
a65 2
  DBM *dbm= (DBM *)mlw_val_c_void_ptr_to_voidp(mlw_arg(arg, 0));
  datum * kp= (datum *)mlw_val_c_void_ptr_to_voidp(mlw_arg(arg, 1));
d70 1
a70 1
  return mlw_val_c_int_from_int(result);
d75 1
a75 1
static mlw_val dbm_firstkey_stub(mlw_val arg)
d77 1
a77 1
  DBM *dbm= (DBM *)mlw_val_c_void_ptr_to_voidp(arg);
d81 2
a82 3
  if ((rp= malloc(sizeof(datum))) == (datum *)0) {
    /* XXX: do something */
  }
d84 1
a84 1
  return mlw_val_c_void_ptr_from_voidp(rp);
d89 1
a89 1
static mlw_val dbm_nextkey_stub(mlw_val arg)
d91 1
a91 1
  DBM *dbm= (DBM *)mlw_val_c_void_ptr_to_voidp(arg);
d95 2
a96 3
  if ((rp= malloc(sizeof(datum))) == (datum *)0) {
    /* XXX: do something */
  }
d98 1
a98 1
  return mlw_val_c_void_ptr_from_voidp(rp);
d103 1
a103 1
static mlw_val dbm_error_stub(mlw_val arg)
d105 1
a105 1
  DBM *dbm= (DBM *)mlw_val_c_void_ptr_to_voidp(arg);
d107 1
a107 1
  return mlw_val_c_int_from_int(result);
d111 3
a113 1
static mlw_val dbm_clearerr_stub(mlw_val arg)
d115 1
a115 1
  DBM *dbm= (DBM *)mlw_val_c_void_ptr_to_voidp(arg);
d117 1
a117 1
  return mlw_val_c_int_from_int(result);
d122 1
a122 1
static mlw_val dbm_close_stub(mlw_val arg)
d124 1
a124 1
  DBM *dbm= (DBM *)mlw_val_c_void_ptr_to_voidp(arg);
d131 1
a131 1
mlw_ci_export void ndbm_init(void)
d133 9
a141 9
  mlw_ci_register_function("dbm_open",     dbm_open_stub);
  mlw_ci_register_function("dbm_close",    dbm_close_stub);
  mlw_ci_register_function("dbm_fetch",    dbm_fetch_stub);
  mlw_ci_register_function("dbm_store",    dbm_store_stub);
  mlw_ci_register_function("dbm_delete",   dbm_delete_stub);
  mlw_ci_register_function("dbm_firstkey", dbm_firstkey_stub);
  mlw_ci_register_function("dbm_nextkey",  dbm_nextkey_stub);
  mlw_ci_register_function("dbm_error",    dbm_error_stub);
  mlw_ci_register_function("dbm_clearerr", dbm_clearerr_stub);
@
