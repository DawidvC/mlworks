head	1.4;
access;
symbols
	MLWorks_21c0_1999_03_25:1.4
	MLWorks_20c1_1998_08_20:1.3
	MLWorks_20c0_1998_08_04:1.3
	MLWorks_20b2c2_1998_06_19:1.3
	MLWorks_20b2_Windows_1998_06_12:1.3
	MLWorks_20b1c1_1998_05_07:1.3
	MLWorks_20b0_1998_04_07:1.3
	MLWorks_20b0_1998_03_20:1.3
	MLWorks_20m2_1998_02_16:1.3
	MLWorks_workspace_97:1.2.1
	MLWorks_20m1_1997_10_23:1.2
	MLWorks_20m0_1997_06_20:1.1;
locks; strict;
comment	@# @;


1.4
date	98.10.26.18.10.16;	author jkbrook;	state Exp;
branches;
next	1.3;

1.3
date	98.01.27.17.38.05;	author jkbrook;	state Exp;
branches;
next	1.2;

1.2
date	97.07.10.15.13.04;	author stephenb;	state Exp;
branches
	1.2.1.1;
next	1.1;

1.1
date	97.05.13.13.02.26;	author stephenb;	state Exp;
branches;
next	;

1.2.1.1
date	97.11.30.16.48.39;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
[Bug #20035]
@


1.4
log
@[Bug #70184]
Update for projects
@
text
@#!/bin/sh
#
# Copyright 1997 The Harlequin Group Limited.  All rights reserved.
# 
# This file is deliberatly UNIXocentric since the ndbm test doesn't run
# under Win32 -- it could, it is just that no effort has been put into 
# gettting a win32 version of ndbm.
#
# Revision Log
# ------------
# $Log: foreign:ndbm:TEST.sh,v $
# Revision 1.3  1998/01/27  17:38:05  jkbrook
# [Bug #70047]
# Shouldn't print `dumped ok' if executable delivery fails
#
# Revision 1.2  1997/07/10  15:13:04  stephenb
# [Bug #50016]
# Ensure that setting LD_LIBRARY_PATH takes notice of any previous
# LD_LIBRARY_PATH setting rather than unconditionally setting it to .
#
# Revision 1.1  1997/05/13  13:02:26  stephenb
# new unit
# [Bug #20035]
#
#
mlw_src=${1:-../../../src}
mlw_rts=${mlw_src}/rts/bin/$ARCH/$OS/main
mlw_image=${mlw_src}/images/$ARCH/$OS/gui.img
mlw_pervasive=${mlw_src}/pervasive
mlw_include=${mlw_src}/rts/src
mlw_db_name=$ARCH.$OS.db
LD_LIBRARY_PATH=.${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}
export LD_LIBRARY_PATH

case $OS in
  SunOS) mlw_src_path=SunOS:.:${mlw_src} ;;
  *) mlw_src_path=.:${mlw_src} ;;
esac


#
# Make sure the script cleans up after itself.
#

trap "{ rm -f ${mlw_db_name}.* phones; make -s -f Makefile.${OS} clean; }" 0 1


#
# Build the shared library ...
#

if { make -s -f Makefile.${OS} MLWORKS_INCLUDE=${mlw_include} clean all; }
then
  echo "make ok" 
else
  echo "make failed"
  exit 1
fi

#
# Create a .sml file for the current configuration
#

rm -f TEST.sml
sed -e "s?ARCH_OS?$ARCH/$OS?" TEST.sml.in > TEST.sml

#
# Load in the phones code and dump an executable ...
#

if { ${mlw_rts} -MLWpass args -c 15 -batch -load ${mlw_image} args -silent -tty -pervasive-dir ${mlw_pervasive} < TEST.sml  1>/dev/null 2>&1 && test -f ./phones ; }
then
  echo "dump ok"
else
  echo "dump failed"
  exit 1
fi


rm -f ${mlw_db_name}.*

#
# Run some tests ...
#
./phones -c phones.dat ${mlw_db_name};
./phones -d ${mlw_db_name};
./phones -l jon ${mlw_db_name};

@


1.3
log
@[Bug #70047]
Shouldn't print `dumped ok' if executable delivery fails
@
text
@d12 4
a25 1

d60 6
d71 1
a71 1
if { ${mlw_rts} -c 15 -batch -load ${mlw_image} -pass args -silent -tty -pervasive-dir ${mlw_pervasive} -source-path ${mlw_src_path} args < TEST.sml 1>/dev/null 2>&1 && test -f ./phones ; }
d85 3
a87 3
./phones -pass args -c phones.dat ${mlw_db_name} args;
./phones -pass args -d ${mlw_db_name} args;
./phones -pass args -l jon ${mlw_db_name} args;
@


1.2
log
@[Bug #50016]
Ensure that setting LD_LIBRARY_PATH takes notice of any previous
LD_LIBRARY_PATH setting rather than unconditionally setting it to .
@
text
@d12 5
a22 1

a28 1

d62 1
a62 1
if { ${mlw_rts} -c 15 -batch -load ${mlw_image} -pass args -silent -tty -pervasive-dir ${mlw_pervasive} -source-path ${mlw_src_path} args < TEST.sml 1>/dev/null 2>&1 ; }
@


1.2.1.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a11 5
# Revision 1.2  1997/07/10  15:13:04  stephenb
# [Bug #50016]
# Ensure that setting LD_LIBRARY_PATH takes notice of any previous
# LD_LIBRARY_PATH setting rather than unconditionally setting it to .
#
@


1.1
log
@new unit
[Bug #20035]
@
text
@d11 5
a15 1
# $Log$
d26 1
a26 1
LD_LIBRARY_PATH="."
@
