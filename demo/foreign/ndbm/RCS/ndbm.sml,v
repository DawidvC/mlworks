head	1.2;
access;
symbols
	MLWorks_21c0_1999_03_25:1.2
	MLWorks_20c1_1998_08_20:1.2
	MLWorks_20c0_1998_08_04:1.2
	MLWorks_20b2c2_1998_06_19:1.2
	MLWorks_20b2_Windows_1998_06_12:1.2
	MLWorks_20b1c1_1998_05_07:1.2
	MLWorks_20b0_1998_04_07:1.2
	MLWorks_20b0_1998_03_20:1.2
	MLWorks_20m2_1998_02_16:1.2
	MLWorks_workspace_97:1.2.1
	MLWorks_20m1_1997_10_23:1.2
	MLWorks_20m0_1997_06_20:1.1;
locks; strict;
comment	@ *  @;


1.2
date	97.07.03.08.14.04;	author stephenb;	state Exp;
branches
	1.2.1.1;
next	1.1;

1.1
date	97.04.29.14.52.21;	author stephenb;	state Exp;
branches;
next	;

1.2.1.1
date	97.11.30.16.49.36;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
[Bug #30030]
@


1.2
log
@[Bug #30029]
The previous version used the signatures/structures from
the prototype version the new FI.  This version uses the
signatures/structures that a customer will see.
@
text
@(* Copyright (C) 1997 The Harlequin Group Limited.  All rights reserved.
 *
 * This file should be generated by a stub-generator from <ndbm.h>
 * This version has been written by hand.
 *
 * Revision Log
 * ------------
 * $Log: foreign:ndbm:ndbm.sml,v $
 *  Revision 1.1  1997/04/29  14:52:21  stephenb
 *  new unit
 *  [Bug #30030]
 *
 *)
 
require "$.basis.__word";

signature NDBM =
  sig
    eqtype DBM
    eqtype datum

    eqtype c_int
    eqtype c_uint
    eqtype c_char
    eqtype 'a c_ptr
 
    (* DBM utilities *)
    val DBM'size' : Word.word
    val DBM'addr' : DBM -> DBM c_ptr

    (* datum utilities *)
    val datum'size' : Word.word
    val datum'addr' : datum -> datum c_ptr

    (* DBM field addresses *)
    val DBM'dbm_dirf'addr : DBM -> c_int c_ptr
    val DBM'dbm_pagf'addr : DBM -> c_int c_ptr
    (* ... *)

    (* dbm field values *)
    val DBM'dbm_dirf : DBM -> c_int
    val DBM'dbm_pagf : DBM -> c_int
    (* ... *)

    (* datum field addresses *)
    val datum'dptr'addr : datum -> c_char c_ptr c_ptr
    val datum'dsize'addr : datum -> c_uint c_ptr

    (* datum field values *)
    val datum'dptr : datum -> c_char c_ptr
    val datum'dsize : datum -> c_uint


    val DBM_INSERT  : c_int
    val DBM_REPLACE : c_int

    val dbm_open :  c_char c_ptr * c_int * c_int -> DBM c_ptr
    val dbm_store : DBM c_ptr * datum * datum * c_int -> c_int
    val dbm_delete : DBM c_ptr * datum -> c_int
    val dbm_fetch : DBM c_ptr * datum -> datum
    val dbm_firstkey : DBM c_ptr -> datum
    val dbm_nextkey : DBM c_ptr -> datum
    val dbm_error : DBM c_ptr -> c_int
    val dbm_clearerr : DBM c_ptr -> c_int
    val dbm_close : DBM c_ptr -> unit
  end
@


1.2.1.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a8 6
 *  Revision 1.2  1997/07/03  08:14:04  stephenb
 *  [Bug #30029]
 *  The previous version used the signatures/structures from
 *  the prototype version the new FI.  This version uses the
 *  signatures/structures that a customer will see.
 *
@


1.1
log
@new unit
[Bug #30030]
@
text
@d1 14
a14 10
(* Copyright 1997 The Harlequin Group Limited.  All rights reserved.
**
** This file should be generated by a stub-generator from <ndbm.h>
** This version has been written by hand.
**
** Revision Log
** ------------
** $Log$
*)

a15 1
require "$.foreign.__c";
d19 2
a20 3
    type dbm

    val null : dbm
d22 44
a65 26
    structure datum :
      sig
        type datum
        val size : Word.word
        val make : Word.word -> datum
        val free : datum -> unit

        val f_dptr  : datum -> C.signed C.c_char C.ptr
        val f_dsize : datum -> C.unsigned C.c_int

        val fp_dptr  : datum -> C.signed C.c_char C.ptr C.ptr
        val fp_dsize : datum -> C.unsigned C.c_int C.ptr
      end

    val DBM_INSERT  : C.signed C.c_int
    val DBM_REPLACE : C.signed C.c_int

    val dbm_open :  C.signed C.c_char C.ptr * C.signed C.c_int * C.signed C.c_int -> dbm
    val dbm_store : dbm * datum.datum * datum.datum * C.signed C.c_int -> C.signed C.c_int
    val dbm_delete : dbm * datum.datum -> C.signed C.c_int
    val dbm_fetch : dbm * datum.datum -> datum.datum
    val dbm_firstkey : dbm -> datum.datum
    val dbm_nextkey : dbm -> datum.datum
    val dbm_error : dbm -> C.signed C.c_int
    val dbm_clearerr : dbm -> C.signed C.c_int
    val dbm_close : dbm -> unit
@
