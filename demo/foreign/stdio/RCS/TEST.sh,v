head	1.3;
access;
symbols
	MLWorks_21c0_1999_03_25:1.3
	MLWorks_20c1_1998_08_20:1.2
	MLWorks_20c0_1998_08_04:1.2
	MLWorks_20b2c2_1998_06_19:1.2
	MLWorks_20b2_Windows_1998_06_12:1.2
	MLWorks_20b1c1_1998_05_07:1.2
	MLWorks_20b0_1998_04_07:1.2
	MLWorks_20b0_1998_03_20:1.2
	MLWorks_20m2_1998_02_16:1.2
	MLWorks_workspace_97:1.1.1
	MLWorks_20m1_1997_10_23:1.1;
locks; strict;
comment	@# @;


1.3
date	98.10.26.19.43.29;	author jkbrook;	state Exp;
branches;
next	1.2;

1.2
date	98.01.27.17.38.21;	author jkbrook;	state Exp;
branches;
next	1.1;

1.1
date	97.07.01.10.25.24;	author stephenb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.11.30.16.47.38;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
** No reason given. **
@


1.3
log
@[Bug #70184]
Update for projects
@
text
@#!/bin/sh
#
# Copyright (C) 1997 The Harlequin Group Limited.  All rights reserved.
# 
# Revision Log
# ------------
# $Log: foreign:stdio:TEST.sh,v $
# Revision 1.2  1998/01/27  17:38:21  jkbrook
# [Bug #70047]
# Shouldn't print `dumped ok' if executable delivery fails
#
# Revision 1.1  1997/07/01  10:25:24  stephenb
# new unit
# ** No reason given. **
#
#


mlw_src=${1:-../../../src}
mlw_rts=${mlw_src}/rts/bin/$ARCH/$OS/main
mlw_image=${mlw_src}/images/$ARCH/$OS/gui.img
mlw_pervasive=${mlw_src}/pervasive
mlw_include=${mlw_src}/rts/src


if { ../platform_win32.sh ; }
then
  mlw_null=NUL
  mlw_sep=";"
else
  mlw_null=/dev/null
  mlw_sep=":"
fi


#
# Make sure the script cleans up after itself.
#

trap "rm -f kitten cub" 0 1

#
# Create configuration-specific versions of the tests
#

rm -f TEST_kitten.sml TEST_cub.sml
sed -e "s?ARCH_OS?$ARCH/$OS?" TEST_kitten.sml.in > TEST_kitten.sml
sed -e "s?ARCH_OS?$ARCH/$OS?" TEST_cub.sml.in > TEST_cub.sml

#
# Load in the kitten code and dump an executable ...
#

if { ${mlw_rts} -MLWpass args -c 15 -batch -load ${mlw_image} args -tty -pervasive-dir ${mlw_pervasive} < TEST_kitten.sml 1> ${mlw_null} 2>&1 && test -f ./kitten; }
then
  echo "kitten dump ok"
else
  echo "kitten dump failed"
  exit 1
fi


#
# Load in the cub code and dump an executable ...
#

if { ${mlw_rts} -MLWpass args -c 15 -batch -load ${mlw_image} args -tty -pervasive-dir ${mlw_pervasive} < TEST_cub.sml 1> ${mlw_null} 2>&1 && test -f ./cub; }
then
  echo "cub dump ok"
else
  echo "cub dump failed"
  exit 1
fi


#
# Run some tests ...
#
./kitten README.unix README.win32 
./kitten does-not-exist 

./cub README.unix README.win32 
./cub does-not-exist 

exit 0
@


1.2
log
@[Bug #70047]
Shouldn't print `dumped ok' if executable delivery fails
@
text
@d8 4
d42 7
d54 1
a54 1
if { echo 'Shell.File.loadSource "__kitten";' | ${mlw_rts} -c 15 -batch -load ${mlw_image} -pass args -tty -pervasive-dir ${mlw_pervasive} -source-path .${mlw_sep}${mlw_src} args 1> ${mlw_null} 2>&1 && test -f ./kitten; }
d67 1
a67 1
if { echo 'Shell.File.loadSource "__cub";' | ${mlw_rts} -c 15 -batch -load ${mlw_image} -pass args -tty -pervasive-dir ${mlw_pervasive} -source-path .${mlw_sep}${mlw_src} args 1> ${mlw_null} 2>&1 && test -f ./cub ; }
d79 2
a80 2
./kitten -pass args README.unix README.win32 args
./kitten -pass args does-not-exist args
d82 2
a83 2
./cub -pass args README.unix README.win32 args
./cub -pass args does-not-exist args
@


1.1
log
@new unit
** No reason given. **
@
text
@d7 5
a11 1
# $Log$
d43 1
a43 1
if { echo 'Shell.File.loadSource "__kitten";' | ${mlw_rts} -c 15 -batch -load ${mlw_image} -pass args -tty -pervasive-dir ${mlw_pervasive} -source-path .${mlw_sep}${mlw_src} args 1> ${mlw_null} 2>&1 ; }
d56 1
a56 1
if { echo 'Shell.File.loadSource "__cub";' | ${mlw_rts} -c 15 -batch -load ${mlw_image} -pass args -tty -pervasive-dir ${mlw_pervasive} -source-path .${mlw_sep}${mlw_src} args 1> ${mlw_null} 2>&1 ; }
@


1.1.1.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@d7 1
a7 5
# $Log: foreign:stdio:TEST.sh,v $
# Revision 1.1  1997/07/01  10:25:24  stephenb
# new unit
# ** No reason given. **
#
@
