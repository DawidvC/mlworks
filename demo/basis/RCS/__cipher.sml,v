head	1.3;
access;
symbols
	MLWorks_21c0_1999_03_25:1.3
	MLWorks_20c1_1998_08_20:1.3
	MLWorks_20c0_1998_08_04:1.3
	MLWorks_20b2c2_1998_06_19:1.3
	MLWorks_20b2_Windows_1998_06_12:1.3
	MLWorks_20b1c1_1998_05_07:1.3
	MLWorks_20b0_1998_04_07:1.3
	MLWorks_20b0_1998_03_20:1.3
	MLWorks_20m2_1998_02_16:1.3
	MLWorks_workspace_97:1.3.8
	MLWorks_20m1_1997_10_23:1.3
	MLWorks_11r1:1.3.7.1.1.1.1
	MLWorks_11c0_1997_09_09:1.3.7.1.1.1
	MLWorks_10r3:1.3.7.1.3
	MLWorks_10r2_551:1.3.7.1.2
	MLWorks_11:1.3.7.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.3.7.1
	MLWorks_20m0_1997_06_20:1.3
	MLWorks_1_0_r2c2_1997_06_14:1.3.7.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.3.7.1
	MLWorks_1_0_r2c1_1997_05_12:1.3.7
	MLWorks_BugFix_1997_04_24:1.3
	MLWorks_1_0_r2_Win32_1997_04_11:1.3
	MLWorks_1_0_r2_Unix_1997_04_04:1.3
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.3.6.1.1
	MLWorks_1_0_Win32_1996_12_17:1.3.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.3.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.3.4.1
	MLWorks_1_0_Irix_1996_11_28:1.3.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.3.5
	MLWorks_1_0_Unix_1996_11_14:1.3.4
	MLWorks_Open_Beta2_1996_10_11:1.3.3
	MLWorks_License_dev:1.3.2
	MLWorks_1_open_beta_1996_09_13:1.3.1
	MLWorks_Open_Beta_1996_08_22:1.2;
locks; strict;
comment	@ *  @;


1.3
date	96.09.04.11.52.43;	author jont;	state Exp;
branches
	1.3.1.1
	1.3.2.1
	1.3.3.1
	1.3.4.1
	1.3.5.1
	1.3.6.1
	1.3.7.1
	1.3.8.1;
next	1.2;

1.2
date	96.08.09.18.27.53;	author davids;	state Exp;
branches;
next	1.1;

1.1
date	96.07.26.15.38.28;	author davids;	state Exp;
branches;
next	;

1.3.1.1
date	96.09.13.11.06.54;	author hope;	state Exp;
branches;
next	;

1.3.2.1
date	96.10.07.15.57.57;	author hope;	state Exp;
branches;
next	;

1.3.3.1
date	96.10.17.11.16.17;	author hope;	state Exp;
branches;
next	;

1.3.4.1
date	96.11.14.12.39.16;	author hope;	state Exp;
branches
	1.3.4.1.1.1;
next	;

1.3.4.1.1.1
date	96.11.28.14.51.19;	author hope;	state Exp;
branches;
next	;

1.3.5.1
date	96.11.22.17.59.55;	author hope;	state Exp;
branches;
next	;

1.3.6.1
date	96.12.17.17.38.52;	author hope;	state Exp;
branches
	1.3.6.1.1.1;
next	;

1.3.6.1.1.1
date	97.02.24.11.26.01;	author hope;	state Exp;
branches;
next	;

1.3.7.1
date	97.05.12.10.23.48;	author hope;	state Exp;
branches
	1.3.7.1.1.1
	1.3.7.1.2.1
	1.3.7.1.3.1;
next	;

1.3.7.1.1.1
date	97.07.28.18.11.11;	author daveb;	state Exp;
branches
	1.3.7.1.1.1.1.1;
next	;

1.3.7.1.1.1.1.1
date	97.10.07.11.35.52;	author jkbrook;	state Exp;
branches;
next	;

1.3.7.1.2.1
date	97.09.08.17.04.30;	author daveb;	state Exp;
branches;
next	;

1.3.7.1.3.1
date	97.09.09.13.59.33;	author daveb;	state Exp;
branches;
next	;

1.3.8.1
date	97.11.30.16.49.42;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
@


1.3
log
@Make require statements absolute
@
text
@(*  ==== BASIS EXAMPLES : Cipher structure ====
 *
 *  Copyright (C) 1996 Harlequin Ltd.
 *
 *  Description
 *  -----------
 *  This module provides functions for enciphering and deciphering using the
 *  Vigenere cipher.  This technique uses a key (repeated many times if
 *  necessary).  Each letter in the original message is displaced by the
 *  corresponding letter in the key.  The combined use of the Char and String
 *  structures in the basis library is demonstrated.  The ListPair structure
 *  is also used.
 *
 *  Revision Log
 *  ------------
 *  $Log: basis:__cipher.sml,v $
 *  Revision 1.2  1996/08/09  18:27:53  davids
 *  ** No reason given. **
 *
 *  Revision 1.1  1996/07/26  15:38:28  davids
 *  new unit
 *
 *
 *)


require "cipher";
require "$.basis.__list_pair";
require "$.basis.__char";
require "$.basis.__string";

structure Cipher : CIPHER =
  struct


    (* Convert string 's' to a list of upper case letters with all words
     strung together. *)

    fun textList s = 
      let
	(* Find all words, by using all non-letter characters as delimiters. *)
	fun notAlpha c = not (Char.isAlpha c)
        val wordList = String.tokens notAlpha s

	(* Join all words together. *)
	val joinedStr = String.concat wordList
      in 
	(* Explode to a list and convert all letters to upper case. *)
	map Char.toUpper (String.explode joinedStr)
      end


    (* Appends 'key' to itself repeatedly until it is at least as long
     as 'message'. *)

    fun extendKey (message, key) = 
      key @@ extendKey (String.extract (message, length key, NONE), key)
      handle Subscript => key


    (* Displace a single character 'msgChar' by the amount corresponding to
     'keyChar'.  This amount is the letter of the alphabet, with #"A" giving
     a displacement of 0, and #"Z" a displacement of 25. *)

    fun encipherChar (msgChar, keyChar) =
      let
	val ordA = Char.ord #"A"
	val msg = Char.ord msgChar - ordA
	val key = Char.ord keyChar - ordA
      in
	Char.chr ((msg + key) mod 26 + ordA)
      end


    (* The inverse of encipherChar. *)

    fun decipherChar (msgChar, keyChar) =
      let
	val ordA = Char.ord #"A"
	val msg = Char.ord msgChar - ordA
	val key = Char.ord keyChar - ordA
      in
	Char.chr ((msg - key) mod 26 + ordA)
      end


    (* Encode 'message' by applying encipherChar to each corresponding 
     character in 'message' and 'key' (extended using extendKey).  This is 
     done concisely by using ListPair.map.  The result of this is then
     imploded so as to return the result as a string. *)
     
    fun encipher (message, key) =
      String.implode (ListPair.map encipherChar
		      (textList message,
                       extendKey (message, textList (key))))


    (* Decodes 'message' using 'key'. *)

    fun decipher (message, key) =
      String.implode (ListPair.map decipherChar 
		      (String.explode message,
                       extendKey (message, textList (key))))


  end






@


1.3.8.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a16 3
 *  Revision 1.3  1996/09/04  11:52:43  jont
 *  Make require statements absolute
 *
@


1.3.7.1
log
@branched from 1.3
@
text
@a16 3
 *  Revision 1.3  1996/09/04  11:52:43  jont
 *  Make require statements absolute
 *
@


1.3.7.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a16 3
 *  Revision 1.3.7.1  1997/05/12  10:23:48  hope
 *  branched from 1.3
 *
@


1.3.7.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a16 3
 *  Revision 1.3.7.1  1997/05/12  10:23:48  hope
 *  branched from 1.3
 *
@


1.3.7.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a16 3
 *  Revision 1.3.7.1  1997/05/12  10:23:48  hope
 *  branched from 1.3
 *
@


1.3.7.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a16 3
 *  Revision 1.3.7.1.1.1  1997/07/28  18:11:11  daveb
 *  branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.3.6.1
log
@branched from 1.3
@
text
@a16 3
 *  Revision 1.3  1996/09/04  11:52:43  jont
 *  Make require statements absolute
 *
@


1.3.6.1.1.1
log
@branched from 1.3.6.1
@
text
@a16 3
 *  Revision 1.3.6.1  1996/12/17  17:38:52  hope
 *  branched from 1.3
 *
@


1.3.5.1
log
@branched from 1.3
@
text
@a16 3
 *  Revision 1.3  1996/09/04  11:52:43  jont
 *  Make require statements absolute
 *
@


1.3.4.1
log
@branched from 1.3
@
text
@a16 3
 *  Revision 1.3  1996/09/04  11:52:43  jont
 *  Make require statements absolute
 *
@


1.3.4.1.1.1
log
@branched from 1.3.4.1
@
text
@a16 3
 *  Revision 1.3.4.1  1996/11/14  12:39:16  hope
 *  branched from 1.3
 *
@


1.3.3.1
log
@branched from 1.3
@
text
@a16 3
 *  Revision 1.3  1996/09/04  11:52:43  jont
 *  Make require statements absolute
 *
@


1.3.2.1
log
@branched from 1.3
@
text
@a16 3
 *  Revision 1.3  1996/09/04  11:52:43  jont
 *  Make require statements absolute
 *
@


1.3.1.1
log
@branched from 1.3
@
text
@a16 3
 *  Revision 1.3  1996/09/04  11:52:43  jont
 *  Make require statements absolute
 *
@


1.2
log
@** No reason given. **
@
text
@d17 3
d28 3
a30 3
require "basis.__list_pair";
require "basis.__char";
require "basis.__string";
@


1.1
log
@new unit
@
text
@d10 3
a12 3
 *  corresponding letter in the key.  The ListPair structure is used to perform
 *  the main functions.  The combined use of the Char and String structures is
 *  also illustrated.
d16 4
a19 1
 *  $Log$
d23 1
a27 1

@
