head	1.3;
access;
symbols
	MLWorks_21c0_1999_03_25:1.3
	MLWorks_20c1_1998_08_20:1.3
	MLWorks_20c0_1998_08_04:1.3
	MLWorks_20b2c2_1998_06_19:1.3
	MLWorks_20b2_Windows_1998_06_12:1.3
	MLWorks_20b1c1_1998_05_07:1.3
	MLWorks_20b0_1998_04_07:1.3
	MLWorks_20b0_1998_03_20:1.3
	MLWorks_20m2_1998_02_16:1.3
	MLWorks_workspace_97:1.3.8
	MLWorks_20m1_1997_10_23:1.3
	MLWorks_11r1:1.3.7.1.1.1.1
	MLWorks_11c0_1997_09_09:1.3.7.1.1.1
	MLWorks_10r3:1.3.7.1.3
	MLWorks_10r2_551:1.3.7.1.2
	MLWorks_11:1.3.7.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.3.7.1
	MLWorks_20m0_1997_06_20:1.3
	MLWorks_1_0_r2c2_1997_06_14:1.3.7.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.3.7.1
	MLWorks_1_0_r2c1_1997_05_12:1.3.7
	MLWorks_BugFix_1997_04_24:1.3
	MLWorks_1_0_r2_Win32_1997_04_11:1.3
	MLWorks_1_0_r2_Unix_1997_04_04:1.3
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.3.6.1.1
	MLWorks_1_0_Win32_1996_12_17:1.3.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.3.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.3.4.1
	MLWorks_1_0_Irix_1996_11_28:1.3.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.3.5
	MLWorks_1_0_Unix_1996_11_14:1.3.4
	MLWorks_Open_Beta2_1996_10_11:1.3.3
	MLWorks_License_dev:1.3.2
	MLWorks_1_open_beta_1996_09_13:1.3.1
	MLWorks_Open_Beta_1996_08_22:1.2;
locks; strict;
comment	@ *  @;


1.3
date	96.09.04.11.55.47;	author jont;	state Exp;
branches
	1.3.1.1
	1.3.2.1
	1.3.3.1
	1.3.4.1
	1.3.5.1
	1.3.6.1
	1.3.7.1
	1.3.8.1;
next	1.2;

1.2
date	96.08.02.13.19.03;	author davids;	state Exp;
branches;
next	1.1;

1.1
date	96.07.26.15.32.33;	author davids;	state Exp;
branches;
next	;

1.3.1.1
date	96.09.13.11.07.08;	author hope;	state Exp;
branches;
next	;

1.3.2.1
date	96.10.07.15.58.18;	author hope;	state Exp;
branches;
next	;

1.3.3.1
date	96.10.17.11.16.36;	author hope;	state Exp;
branches;
next	;

1.3.4.1
date	96.11.14.12.39.53;	author hope;	state Exp;
branches
	1.3.4.1.1.1;
next	;

1.3.4.1.1.1
date	96.11.28.14.51.45;	author hope;	state Exp;
branches;
next	;

1.3.5.1
date	96.11.22.18.00.24;	author hope;	state Exp;
branches;
next	;

1.3.6.1
date	96.12.17.17.39.18;	author hope;	state Exp;
branches
	1.3.6.1.1.1;
next	;

1.3.6.1.1.1
date	97.02.24.11.26.28;	author hope;	state Exp;
branches;
next	;

1.3.7.1
date	97.05.12.10.24.15;	author hope;	state Exp;
branches
	1.3.7.1.1.1
	1.3.7.1.2.1
	1.3.7.1.3.1;
next	;

1.3.7.1.1.1
date	97.07.28.18.10.50;	author daveb;	state Exp;
branches
	1.3.7.1.1.1.1.1;
next	;

1.3.7.1.1.1.1.1
date	97.10.07.11.35.15;	author jkbrook;	state Exp;
branches;
next	;

1.3.7.1.2.1
date	97.09.08.17.04.09;	author daveb;	state Exp;
branches;
next	;

1.3.7.1.3.1
date	97.09.09.13.59.11;	author daveb;	state Exp;
branches;
next	;

1.3.8.1
date	97.11.30.16.47.52;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
@


1.3
log
@Make require statements absolute
@
text
@(*  ==== BASIS EXAMPLES : Roman structure ====
 *
 *  Copyright (C) 1996 Harlequin Ltd.
 *
 *  Description
 *  -----------
 *  This example program provides functions that can convert Roman numerals
 *  to and from integers.  It demonstrates the basic features of the String
 *  structure in the basis library.
 *
 *  Revision Log
 *  ------------
 *  $Log: basis:__roman.sml,v $
 *  Revision 1.2  1996/08/02  13:19:03  davids
 *  Removed base_ten type and associated functions.
 *
 *  Revision 1.1  1996/07/26  15:32:33  davids
 *  new unit
 *
 *)


require "roman";
require "$.basis.__string";

structure Roman : ROMAN =
  struct

    (* This type stores either the ones, tens, hundreds or thousands of a
     number. *)

    datatype numeral = I of int | X of int | C of int | M of int


    exception Numeral


    (* Convert a single digit into a character list representing the
     equivalent Roman numeral for that digit.  The parameters 'one', 'five'
     and 'ten' represent which characters should be used for the actual
     numerals, eg. #"I", #"V", #"X" for the units digit. *)

    fun digit (0, one, five, ten) = []
      | digit (1, one, five, ten) = [one]
      | digit (2, one, five, ten) = [one, one]
      | digit (3, one, five, ten) = [one, one, one]
      | digit (4, one, five, ten) = [one, five]
      | digit (5, one, five, ten) = [five]
      | digit (6, one, five, ten) = [five, one]
      | digit (7, one, five, ten) = [five, one, one]
      | digit (8, one, five, ten) = [five, one, one, one]
      | digit (9, one, five, ten) = [one, ten]
      | digit _ = []


    (* Convert an amount of a given numeral into a character list representing
     the appropriate Roman numeral.
     eg. numerals (I 9) = [#"I", #"X"] 	*)

    fun numerals (I d) = digit (d, #"I", #"V", #"X")
      | numerals (X d) = digit (d, #"X", #"L", #"C")
      | numerals (C d) = digit (d, #"C", #"D", #"M")
      | numerals (M 0) = []
      | numerals (M n) = #"M" :: numerals (M (n - 1))


    (* Give the corresponding integer value for a given Roman numeral *)

    fun value #"I" = 1
      | value #"V" = 5
      | value #"X" = 10
      | value #"L" = 50
      | value #"C" = 100
      | value #"D" = 500
      | value #"M" = 1000
      | value _    = raise Numeral


    (* Return the Roman numeral string corresponding to 'n'.  This is done
     by pulling 'n' apart into its separate digits, and working out the
     correct Roman numerals to represent each one.  These are then 
     concatenated and returned. *)

    fun intToRoman n = 
      let
	val ones = I (n mod 10)
	val tens = X ((n div 10) mod 10)
	val hundreds = C ((n div 100) mod 10)
	val thousands = M (n div 1000)
      in
	String.implode (numerals thousands @@
			numerals hundreds @@ 
			numerals tens @@
			numerals ones)
      end
	

    (* Parse a Roman numeral string, to give an integer.  An illegal Roman
     numeral (ie. one that contains illegal characters) will give the result
     NONE.  Attempts to parse any Roman numeral string, but incorrect
     representations may give unpredictable results. *)

    fun romanToInt s = 
      let

	(* Work backwards along the string to calculate the number.  If a
	 numeral is of lesser value than the previous one then it should be
	 subtracted, otherwise it should be added.  Complete when trying to
	 look off the beginning of the string. *)

	fun addNumerals (~1, previous) = 0
	  | addNumerals (i, previous) =
	    let
	      val num = value (String.Char.toUpper (String.sub (s, i)))
	    in
	      (if num >= previous then
		 num + addNumerals (i - 1, num)
	       else
		 ~num + addNumerals (i - 1, num))
	    end
      in
        SOME (addNumerals ((String.size s) - 1, 0))
	handle Numeral => NONE
      end

  end




@


1.3.8.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a13 3
 *  Revision 1.3  1996/09/04  11:55:47  jont
 *  Make require statements absolute
 *
@


1.3.7.1
log
@branched from 1.3
@
text
@a13 3
 *  Revision 1.3  1996/09/04  11:55:47  jont
 *  Make require statements absolute
 *
@


1.3.7.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a13 3
 *  Revision 1.3.7.1  1997/05/12  10:24:15  hope
 *  branched from 1.3
 *
@


1.3.7.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a13 3
 *  Revision 1.3.7.1  1997/05/12  10:24:15  hope
 *  branched from 1.3
 *
@


1.3.7.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a13 3
 *  Revision 1.3.7.1  1997/05/12  10:24:15  hope
 *  branched from 1.3
 *
@


1.3.7.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a13 3
 *  Revision 1.3.7.1.1.1  1997/07/28  18:10:50  daveb
 *  branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.3.6.1
log
@branched from 1.3
@
text
@a13 3
 *  Revision 1.3  1996/09/04  11:55:47  jont
 *  Make require statements absolute
 *
@


1.3.6.1.1.1
log
@branched from 1.3.6.1
@
text
@a13 3
 *  Revision 1.3.6.1  1996/12/17  17:39:18  hope
 *  branched from 1.3
 *
@


1.3.5.1
log
@branched from 1.3
@
text
@a13 3
 *  Revision 1.3  1996/09/04  11:55:47  jont
 *  Make require statements absolute
 *
@


1.3.4.1
log
@branched from 1.3
@
text
@a13 3
 *  Revision 1.3  1996/09/04  11:55:47  jont
 *  Make require statements absolute
 *
@


1.3.4.1.1.1
log
@branched from 1.3.4.1
@
text
@a13 3
 *  Revision 1.3.4.1  1996/11/14  12:39:53  hope
 *  branched from 1.3
 *
@


1.3.3.1
log
@branched from 1.3
@
text
@a13 3
 *  Revision 1.3  1996/09/04  11:55:47  jont
 *  Make require statements absolute
 *
@


1.3.2.1
log
@branched from 1.3
@
text
@a13 3
 *  Revision 1.3  1996/09/04  11:55:47  jont
 *  Make require statements absolute
 *
@


1.3.1.1
log
@branched from 1.3
@
text
@a13 3
 *  Revision 1.3  1996/09/04  11:55:47  jont
 *  Make require statements absolute
 *
@


1.2
log
@Removed base_ten type and associated functions.
@
text
@d14 3
d24 1
a24 1
require "basis.__string";
@


1.1
log
@new unit
@
text
@d13 3
a15 1
 *  $Log$
d19 1
d26 2
a27 2
    (*  Use an intermediate representation to store Roman numerals internally,
     as the sum of ones, tens, hundreds, and thousands *)
a29 1
    datatype base_ten = BASE_TEN of numeral * numeral * numeral * numeral
d35 4
a38 1
    (*  Convert a single digit to a character list *)
d50 1
d76 4
a79 1
    (* Pull an integer apart into its ones, tens, hundreds and thousands. *)
d81 12
a92 11
    fun fromInt n = BASE_TEN (I (n mod 10),
			      X ((n div 10) mod 10),
			      C ((n div 100) mod 10),
			      M (n div 1000))                  


    (* Create the correct Roman numeral string from the constituent ones, tens,
     hundreds, thousands. *)

    fun toString (BASE_TEN (is, xs, cs, ms)) = String.implode
      (numerals ms @@ numerals cs @@ numerals xs @@ numerals is)    
d103 15
a117 13
	(* Work backwards along the string to calculate the number.  
	 Complete when String.sub raises Subscript exception. *)

        fun addNumerals (n, previous) =
	  let
	    val num = value (String.Char.toUpper (String.sub (s, n)))
	  in
	    (if num >= previous then
	      num + addNumerals (n - 1, num)
	    else
	      ~num + addNumerals (n - 1, num))
	    handle Subscript => num
	  end
a120 1
	     | Subscript => NONE
a121 5


    (* Return the Roman numeral string corresponding to 'n'. *)

    fun intToRoman n = toString (fromInt n)
@
