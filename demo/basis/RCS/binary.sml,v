head	1.2;
access;
symbols
	MLWorks_21c0_1999_03_25:1.2
	MLWorks_20c1_1998_08_20:1.2
	MLWorks_20c0_1998_08_04:1.2
	MLWorks_20b2c2_1998_06_19:1.2
	MLWorks_20b2_Windows_1998_06_12:1.2
	MLWorks_20b1c1_1998_05_07:1.2
	MLWorks_20b0_1998_04_07:1.2
	MLWorks_20b0_1998_03_20:1.2
	MLWorks_20m2_1998_02_16:1.2
	MLWorks_workspace_97:1.2.8
	MLWorks_20m1_1997_10_23:1.2
	MLWorks_11r1:1.2.7.1.1.1.1
	MLWorks_11c0_1997_09_09:1.2.7.1.1.1
	MLWorks_10r3:1.2.7.1.3
	MLWorks_10r2_551:1.2.7.1.2
	MLWorks_11:1.2.7.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.2.7.1
	MLWorks_20m0_1997_06_20:1.2
	MLWorks_1_0_r2c2_1997_06_14:1.2.7.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.2.7.1
	MLWorks_1_0_r2c1_1997_05_12:1.2.7
	MLWorks_BugFix_1997_04_24:1.2
	MLWorks_1_0_r2_Win32_1997_04_11:1.2
	MLWorks_1_0_r2_Unix_1997_04_04:1.2
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.2.6.1.1
	MLWorks_1_0_Win32_1996_12_17:1.2.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.2.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.2.4.1
	MLWorks_1_0_Irix_1996_11_28:1.2.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.2.5
	MLWorks_1_0_Unix_1996_11_14:1.2.4
	MLWorks_Open_Beta2_1996_10_11:1.2.3
	MLWorks_License_dev:1.2.2
	MLWorks_1_open_beta_1996_09_13:1.2.1
	MLWorks_Open_Beta_1996_08_22:1.1;
locks; strict;
comment	@ *  @;


1.2
date	96.09.04.11.56.50;	author jont;	state Exp;
branches
	1.2.1.1
	1.2.2.1
	1.2.3.1
	1.2.4.1
	1.2.5.1
	1.2.6.1
	1.2.7.1
	1.2.8.1;
next	1.1;

1.1
date	96.07.26.15.45.21;	author davids;	state Exp;
branches;
next	;

1.2.1.1
date	96.09.13.11.07.42;	author hope;	state Exp;
branches;
next	;

1.2.2.1
date	96.10.07.15.58.52;	author hope;	state Exp;
branches;
next	;

1.2.3.1
date	96.10.17.11.17.13;	author hope;	state Exp;
branches;
next	;

1.2.4.1
date	96.11.14.12.40.42;	author hope;	state Exp;
branches
	1.2.4.1.1.1;
next	;

1.2.4.1.1.1
date	96.11.28.14.52.32;	author hope;	state Exp;
branches;
next	;

1.2.5.1
date	96.11.22.18.01.10;	author hope;	state Exp;
branches;
next	;

1.2.6.1
date	96.12.17.17.40.02;	author hope;	state Exp;
branches
	1.2.6.1.1.1;
next	;

1.2.6.1.1.1
date	97.02.24.11.27.15;	author hope;	state Exp;
branches;
next	;

1.2.7.1
date	97.05.12.10.25.04;	author hope;	state Exp;
branches
	1.2.7.1.1.1
	1.2.7.1.2.1
	1.2.7.1.3.1;
next	;

1.2.7.1.1.1
date	97.07.28.18.10.58;	author daveb;	state Exp;
branches
	1.2.7.1.1.1.1.1;
next	;

1.2.7.1.1.1.1.1
date	97.10.07.11.35.29;	author jkbrook;	state Exp;
branches;
next	;

1.2.7.1.2.1
date	97.09.08.17.04.17;	author daveb;	state Exp;
branches;
next	;

1.2.7.1.3.1
date	97.09.09.13.59.20;	author daveb;	state Exp;
branches;
next	;

1.2.8.1
date	97.11.30.16.48.03;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
@


1.2
log
@Make require statements absolute
@
text
@(*  ==== BASIS EXAMPLES : BINARY signature ====
 *
 *  Copyright (C) 1996 Harlequin Ltd.
 *
 *  Description
 *  -----------
 *  This module defines a type 'binary' that is a vector of bits.  It provides
 *  functions to convert strings and bytes (ie. Word8.word) to and from the
 *  binary type.  Functions are also provided to convert a string to and from
 *  the vector of binaries representing the ASCII code of each character.
 *
 *  Revision Log
 *  ------------
 *  $Log: basis:binary.sml,v $
 *  Revision 1.1  1996/07/26  15:45:21  davids
 *  new unit
 *
 *
 *)

require "$.basis.__word8";
require "$.basis.__vector";

signature BINARY =
  sig

    eqtype binary


    (* Convert a string of 0s and 1s into a binary.  Return NONE if string
     contains invalid characters. *)

    val fromString : string -> binary option


    (* Convert 'bin' into a string of 0s and 1s. *)

    val toString : binary -> string


    (* Convert a Word8.word to a binary. *)

    val fromByte : Word8.word -> binary


    (* Convert a binary to a Word8.word. *)

    val toByte : binary -> Word8.word


    (* Convert a string to the vector of binaries representing
     the ASCII code of each character. *)

    val toAscii : string -> binary Vector.vector


    (* Convert vector of binaries to the string made up of the characters given
     by their ASCII values. *)

    val fromAscii : binary Vector.vector -> string


    (* Print out each ASCII binary making up the string 's'. *)

    val printAscii : string -> unit

  end
@


1.2.8.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a14 3
 *  Revision 1.2  1996/09/04  11:56:50  jont
 *  Make require statements absolute
 *
@


1.2.7.1
log
@branched from 1.2
@
text
@a14 3
 *  Revision 1.2  1996/09/04  11:56:50  jont
 *  Make require statements absolute
 *
@


1.2.7.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a14 3
 *  Revision 1.2.7.1  1997/05/12  10:25:04  hope
 *  branched from 1.2
 *
@


1.2.7.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a14 3
 *  Revision 1.2.7.1  1997/05/12  10:25:04  hope
 *  branched from 1.2
 *
@


1.2.7.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a14 3
 *  Revision 1.2.7.1  1997/05/12  10:25:04  hope
 *  branched from 1.2
 *
@


1.2.7.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a14 3
 *  Revision 1.2.7.1.1.1  1997/07/28  18:10:58  daveb
 *  branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.2.6.1
log
@branched from 1.2
@
text
@a14 3
 *  Revision 1.2  1996/09/04  11:56:50  jont
 *  Make require statements absolute
 *
@


1.2.6.1.1.1
log
@branched from 1.2.6.1
@
text
@a14 3
 *  Revision 1.2.6.1  1996/12/17  17:40:02  hope
 *  branched from 1.2
 *
@


1.2.5.1
log
@branched from 1.2
@
text
@a14 3
 *  Revision 1.2  1996/09/04  11:56:50  jont
 *  Make require statements absolute
 *
@


1.2.4.1
log
@branched from 1.2
@
text
@a14 3
 *  Revision 1.2  1996/09/04  11:56:50  jont
 *  Make require statements absolute
 *
@


1.2.4.1.1.1
log
@branched from 1.2.4.1
@
text
@a14 3
 *  Revision 1.2.4.1  1996/11/14  12:40:42  hope
 *  branched from 1.2
 *
@


1.2.3.1
log
@branched from 1.2
@
text
@a14 3
 *  Revision 1.2  1996/09/04  11:56:50  jont
 *  Make require statements absolute
 *
@


1.2.2.1
log
@branched from 1.2
@
text
@a14 3
 *  Revision 1.2  1996/09/04  11:56:50  jont
 *  Make require statements absolute
 *
@


1.2.1.1
log
@branched from 1.2
@
text
@a14 3
 *  Revision 1.2  1996/09/04  11:56:50  jont
 *  Make require statements absolute
 *
@


1.1
log
@new unit
@
text
@d14 4
a17 1
 *  $Log$
d21 2
a22 2
require "basis.__word8";
require "basis.__vector";
@
