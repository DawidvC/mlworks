head	1.4;
access;
symbols
	MLWorks_21c0_1999_03_25:1.4
	MLWorks_20c1_1998_08_20:1.4
	MLWorks_20c0_1998_08_04:1.4
	MLWorks_20b2c2_1998_06_19:1.4
	MLWorks_20b2_Windows_1998_06_12:1.4
	MLWorks_20b1c1_1998_05_07:1.4
	MLWorks_20b0_1998_04_07:1.4
	MLWorks_20b0_1998_03_20:1.4
	MLWorks_20m2_1998_02_16:1.4
	MLWorks_workspace_97:1.4.1
	MLWorks_20m1_1997_10_23:1.4
	MLWorks_11r1:1.3.7.1.1.1.1
	MLWorks_11c0_1997_09_09:1.3.7.1.1.1
	MLWorks_10r3:1.3.7.1.3
	MLWorks_10r2_551:1.3.7.1.2
	MLWorks_11:1.3.7.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.3.7.1
	MLWorks_20m0_1997_06_20:1.4
	MLWorks_1_0_r2c2_1997_06_14:1.3.7.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.3.7.1
	MLWorks_1_0_r2c1_1997_05_12:1.3.7
	MLWorks_BugFix_1997_04_24:1.3
	MLWorks_1_0_r2_Win32_1997_04_11:1.3
	MLWorks_1_0_r2_Unix_1997_04_04:1.3
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.3.6.1.1
	MLWorks_1_0_Win32_1996_12_17:1.3.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.3.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.3.4.1
	MLWorks_1_0_Irix_1996_11_28:1.3.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.3.5
	MLWorks_1_0_Unix_1996_11_14:1.3.4
	MLWorks_Open_Beta2_1996_10_11:1.3.3
	MLWorks_License_dev:1.3.2
	MLWorks_1_open_beta_1996_09_13:1.3.1
	MLWorks_Open_Beta_1996_08_22:1.2;
locks; strict;
comment	@ *  @;


1.4
date	97.05.27.13.31.05;	author jkbrook;	state Exp;
branches
	1.4.1.1;
next	1.3;

1.3
date	96.09.04.11.54.36;	author jont;	state Exp;
branches
	1.3.1.1
	1.3.2.1
	1.3.3.1
	1.3.4.1
	1.3.5.1
	1.3.6.1
	1.3.7.1;
next	1.2;

1.2
date	96.08.12.10.50.15;	author davids;	state Exp;
branches;
next	1.1;

1.1
date	96.08.09.16.12.45;	author davids;	state Exp;
branches;
next	;

1.3.1.1
date	96.09.13.11.07.18;	author hope;	state Exp;
branches;
next	;

1.3.2.1
date	96.10.07.15.58.29;	author hope;	state Exp;
branches;
next	;

1.3.3.1
date	96.10.17.11.16.48;	author hope;	state Exp;
branches;
next	;

1.3.4.1
date	96.11.14.12.40.12;	author hope;	state Exp;
branches
	1.3.4.1.1.1;
next	;

1.3.4.1.1.1
date	96.11.28.14.52.03;	author hope;	state Exp;
branches;
next	;

1.3.5.1
date	96.11.22.18.00.41;	author hope;	state Exp;
branches;
next	;

1.3.6.1
date	96.12.17.17.39.34;	author hope;	state Exp;
branches
	1.3.6.1.1.1;
next	;

1.3.6.1.1.1
date	97.02.24.11.26.44;	author hope;	state Exp;
branches;
next	;

1.3.7.1
date	97.05.12.10.24.33;	author hope;	state Exp;
branches
	1.3.7.1.1.1
	1.3.7.1.2.1
	1.3.7.1.3.1;
next	;

1.3.7.1.1.1
date	97.07.28.18.09.47;	author daveb;	state Exp;
branches
	1.3.7.1.1.1.1.1;
next	;

1.3.7.1.1.1.1.1
date	97.10.07.11.33.34;	author jkbrook;	state Exp;
branches;
next	;

1.3.7.1.2.1
date	97.09.08.17.03.05;	author daveb;	state Exp;
branches;
next	;

1.3.7.1.3.1
date	97.09.09.13.57.41;	author daveb;	state Exp;
branches;
next	;

1.4.1.1
date	97.11.30.16.46.51;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
@


1.4
log
@[Bug #01749]
Use synonym file __large_int for LargeInt
@
text
@(*  ==== BASIS EXAMPLES : Prime structure ====
 *
 *  Copyright (C) 1996 Harlequin Ltd.
 *
 *  Description
 *  -----------
 *  This module defines a function to test whether a given integer is a prime
 *  number.  It illustrates the use of the LargeInt structure in the basis
 *  library.
 *
 *  Revision Log
 *  ------------
 *  $Log: basis:__prime.sml,v $
 *  Revision 1.3  1996/09/04  11:54:36  jont
 *  Make require statements absolute
 *
 *  Revision 1.2  1996/08/12  10:50:15  davids
 *  ** No reason given. **
 *
 *  Revision 1.1  1996/08/09  16:12:45  davids
 *  new unit
 *
 *
 *)


require "prime";
require "$.basis.__large_int";


structure Prime : PRIME =
  struct


    (* Determine whether n is even. *)

    fun even n = LargeInt.rem (n, 2) = 0


    (* Calculate 'm' to the power of 'n', modulo 'modulo'.  The power is
     calculated by repeatedly squaring, multiplying by 'm' whenever the
     power is odd. *)

    fun largePowerMod (m, n, modulo) =
      let

	fun square () =
	  let
	    val next = largePowerMod (m, LargeInt.quot (n, 2), modulo)
	    val sqr = next * next
	  in
	    LargeInt.rem (sqr, modulo)
	  end

      in

	if n = LargeInt.fromInt 0 then
	  LargeInt.fromInt 1
	else

	  if even n then
	    square ()
	  else
	    LargeInt.rem (LargeInt.* (m, square ()), modulo)
      end


    (* Calculate 'm' to the power of 'n', modulo 'modulo'.  Do the
     calculation using LargeInt.int numbers so that as many int values as 
     possible can be used without overflow. *)

    fun powerMod (m, n, modulo) =
      LargeInt.toInt (largePowerMod (LargeInt.fromInt m,
				     LargeInt.fromInt n,
				     LargeInt.fromInt modulo))
		     

    (* Apply Fermat's theorem to the first 'k' integers.  If it fails for any
     test, 'q' is composite.  However, 'k' successful tests do not guarantee
     that q is prime, but if 'k' is not too small then it is extremely likely
     to be correct. *)

    fun fermat (q, 0) = true
      | fermat (q, k) =	
        if powerMod (k, q - 1, q) = 1
          then fermat (q, k - 1)
        else 
	  false


    (* Test whether or not 'q' is a prime number.  Define any numbers <= 1 as
     not prime. *)

    fun testPrime (q, k) =
      if q <= 1 then 
	false
      else
	if k >= q then
	  fermat (q, q - 1)
	else
	  fermat (q, k)
  end
      
@


1.4.1.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a13 4
 *  Revision 1.4  1997/05/27  13:31:05  jkbrook
 *  [Bug #01749]
 *  Use synonym file __large_int for LargeInt
 *
@


1.3
log
@Make require statements absolute
@
text
@d14 3
d28 1
a28 3

(* This is where the LargeInt structure is defined. *)
require "$.basis.__int32";
@


1.3.7.1
log
@branched from 1.3
@
text
@a13 3
 *  Revision 1.3  1996/09/04  11:54:36  jont
 *  Make require statements absolute
 *
@


1.3.7.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a13 3
 *  Revision 1.3.7.1  1997/05/12  10:24:33  hope
 *  branched from 1.3
 *
@


1.3.7.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a13 3
 *  Revision 1.3.7.1  1997/05/12  10:24:33  hope
 *  branched from 1.3
 *
@


1.3.7.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a13 3
 *  Revision 1.3.7.1  1997/05/12  10:24:33  hope
 *  branched from 1.3
 *
@


1.3.7.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a13 3
 *  Revision 1.3.7.1.1.1  1997/07/28  18:09:47  daveb
 *  branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.3.6.1
log
@branched from 1.3
@
text
@a13 3
 *  Revision 1.3  1996/09/04  11:54:36  jont
 *  Make require statements absolute
 *
@


1.3.6.1.1.1
log
@branched from 1.3.6.1
@
text
@a13 3
 *  Revision 1.3.6.1  1996/12/17  17:39:34  hope
 *  branched from 1.3
 *
@


1.3.5.1
log
@branched from 1.3
@
text
@a13 3
 *  Revision 1.3  1996/09/04  11:54:36  jont
 *  Make require statements absolute
 *
@


1.3.4.1
log
@branched from 1.3
@
text
@a13 3
 *  Revision 1.3  1996/09/04  11:54:36  jont
 *  Make require statements absolute
 *
@


1.3.4.1.1.1
log
@branched from 1.3.4.1
@
text
@a13 3
 *  Revision 1.3.4.1  1996/11/14  12:40:12  hope
 *  branched from 1.3
 *
@


1.3.3.1
log
@branched from 1.3
@
text
@a13 3
 *  Revision 1.3  1996/09/04  11:54:36  jont
 *  Make require statements absolute
 *
@


1.3.2.1
log
@branched from 1.3
@
text
@a13 3
 *  Revision 1.3  1996/09/04  11:54:36  jont
 *  Make require statements absolute
 *
@


1.3.1.1
log
@branched from 1.3
@
text
@a13 3
 *  Revision 1.3  1996/09/04  11:54:36  jont
 *  Make require statements absolute
 *
@


1.2
log
@** No reason given. **
@
text
@d14 3
d27 1
a27 1
require "basis.__int32";
@


1.1
log
@new unit
@
text
@d13 4
a16 1
 *  $Log$
d94 4
a97 2
	fermat (q, k)

@
