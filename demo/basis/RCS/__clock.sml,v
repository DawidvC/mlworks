head	1.3;
access;
symbols
	MLWorks_21c0_1999_03_25:1.3
	MLWorks_20c1_1998_08_20:1.3
	MLWorks_20c0_1998_08_04:1.3
	MLWorks_20b2c2_1998_06_19:1.3
	MLWorks_20b2_Windows_1998_06_12:1.3
	MLWorks_20b1c1_1998_05_07:1.3
	MLWorks_20b0_1998_04_07:1.3
	MLWorks_20b0_1998_03_20:1.3
	MLWorks_20m2_1998_02_16:1.3
	MLWorks_workspace_97:1.3.1
	MLWorks_20m1_1997_10_23:1.3
	MLWorks_11r1:1.2.7.1.1.1.1
	MLWorks_11c0_1997_09_09:1.2.7.1.1.1
	MLWorks_10r3:1.2.7.1.3
	MLWorks_10r2_551:1.2.7.1.2
	MLWorks_11:1.2.7.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.2.7.1
	MLWorks_20m0_1997_06_20:1.2
	MLWorks_1_0_r2c2_1997_06_14:1.2.7.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.2.7.1
	MLWorks_1_0_r2c1_1997_05_12:1.2.7
	MLWorks_BugFix_1997_04_24:1.2
	MLWorks_1_0_r2_Win32_1997_04_11:1.2
	MLWorks_1_0_r2_Unix_1997_04_04:1.2
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.2.6.1.1
	MLWorks_1_0_Win32_1996_12_17:1.2.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.2.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.2.4.1
	MLWorks_1_0_Irix_1996_11_28:1.2.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.2.5
	MLWorks_1_0_Unix_1996_11_14:1.2.4
	MLWorks_Open_Beta2_1996_10_11:1.2.3
	MLWorks_License_dev:1.2.2
	MLWorks_1_open_beta_1996_09_13:1.2.1
	MLWorks_Open_Beta_1996_08_22:1.1;
locks; strict;
comment	@ *  @;


1.3
date	97.09.12.14.46.56;	author brucem;	state Exp;
branches
	1.3.1.1;
next	1.2;

1.2
date	96.09.04.11.52.55;	author jont;	state Exp;
branches
	1.2.1.1
	1.2.2.1
	1.2.3.1
	1.2.4.1
	1.2.5.1
	1.2.6.1
	1.2.7.1;
next	1.1;

1.1
date	96.08.09.18.06.49;	author davids;	state Exp;
branches;
next	;

1.2.1.1
date	96.09.13.11.07.13;	author hope;	state Exp;
branches;
next	;

1.2.2.1
date	96.10.07.15.58.22;	author hope;	state Exp;
branches;
next	;

1.2.3.1
date	96.10.17.11.16.41;	author hope;	state Exp;
branches;
next	;

1.2.4.1
date	96.11.14.12.40.02;	author hope;	state Exp;
branches
	1.2.4.1.1.1;
next	;

1.2.4.1.1.1
date	96.11.28.14.51.54;	author hope;	state Exp;
branches;
next	;

1.2.5.1
date	96.11.22.18.00.32;	author hope;	state Exp;
branches;
next	;

1.2.6.1
date	96.12.17.17.39.25;	author hope;	state Exp;
branches
	1.2.6.1.1.1;
next	;

1.2.6.1.1.1
date	97.02.24.11.26.35;	author hope;	state Exp;
branches;
next	;

1.2.7.1
date	97.05.12.10.24.23;	author hope;	state Exp;
branches
	1.2.7.1.1.1
	1.2.7.1.2.1
	1.2.7.1.3.1;
next	;

1.2.7.1.1.1
date	97.07.28.18.11.02;	author daveb;	state Exp;
branches
	1.2.7.1.1.1.1.1;
next	;

1.2.7.1.1.1.1.1
date	97.10.07.11.35.36;	author jkbrook;	state Exp;
branches;
next	;

1.2.7.1.2.1
date	97.09.08.17.04.21;	author daveb;	state Exp;
branches;
next	;

1.2.7.1.3.1
date	97.09.09.13.59.23;	author daveb;	state Exp;
branches;
next	;

1.3.1.1
date	97.11.30.16.49.26;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
@


1.3
log
@[Bug #50002]
Added exception handler to prevent failure when run as delivered application.
Also added explanatory note.
@
text
@(*  ==== BASIS EXAMPLES : Clock structure ====
 *
 *  Copyright (C) 1996 Harlequin Ltd.
 *
 *  Description
 *  -----------
 *  This module provides functions to clock the progress of the current
 *  process.  It demonstrates both the Timer and the Time structures in the
 *  basis library.
 *
 *  Revision Log
 *  ------------
 *  $Log: basis:__clock.sml,v $
 *  Revision 1.2  1996/09/04  11:52:55  jont
 *  Make require statements absolute
 *
 *  Revision 1.1  1996/08/09  18:06:49  davids
 *  new unit
 *
 *
 *)


require "clock";
require "$.basis.__timer";
require "$.system.__time";
require "$.basis.__real";
require "$.basis.__string_cvt";

structure Clock : CLOCK =
  struct

    (* Create a CPU timer to keep track of how much user time has elapsed. *)

    val cpuClock = ref (Timer.startCPUTimer ())


    (* Create a wall clock timer to keep track of how much real time has
     elapsed. *)

    val wallClock = ref (Timer.startRealTimer ())


    (* Restart both the CPU timer and the wall clock timer. *)

    fun reset () =
      (cpuClock := Timer.startCPUTimer ();
       wallClock := Timer.startRealTimer ())

    (* Print the time elapsed on both the wall clock and the CPU timer.
     Calculate and print the percentage of time spent on the current
     process. *)

    (* Timer.checkCPUTimer may fail if you deliver the clock function.
       This is because starting a delivered application creates a new
       process, for which any old timers stored in wallClock and cpuClock
       are invalid.  This is why we wrap an exception handler around
       Timer.checkCPUTimer. *)

    fun clock () =
      let
	val wallTime = Timer.checkRealTimer (!wallClock)
	val userTimeOpt = SOME (#usr (Timer.checkCPUTimer (!cpuClock)))
                          handle Time.Time => NONE
	val percentage = case userTimeOpt of
                           SOME userTime =>
                             (Time.toReal userTime) / 
	                     (Time.toReal wallTime) * 100.0
                         | NONE => 100.0 (* arbitrary, won't be used. *)
      in
        case userTimeOpt of
          SOME userTime =>
            print ("Overall time passed: " ^
                    Time.fmt 1 wallTime ^ 
                    " seconds\n" ^ 
                    "Process has had CPU for: " ^ 
                    Time.fmt 1 userTime ^
                    " seconds\n" ^ 
                    "Time spent on this process is " ^
                    Real.fmt (StringCvt.FIX (SOME 1)) percentage ^
                    "%\n")
        | NONE =>
            print "Can't get user time, timers may have been invalidated.\n"
      end

  end

	
	
@


1.3.1.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a13 5
 *  Revision 1.3  1997/09/12  14:46:56  brucem
 *  [Bug #50002]
 *  Added exception handler to prevent failure when run as delivered application.
 *  Also added explanatory note.
 *
@


1.2
log
@Make require statements absolute
@
text
@d14 3
a49 1

d54 6
a61 1
	val userTime = #usr (Timer.checkCPUTimer (!cpuClock))
d63 7
a69 2
	val percentage = (Time.toReal userTime) / 
			 (Time.toReal wallTime) * 100.0
d71 13
a83 9
	print ("Overall time passed: " ^
	       Time.fmt 1 wallTime ^ 
	       " seconds\n" ^ 
	       "Process has had CPU for: " ^ 
	       Time.fmt 1 userTime ^
	       " seconds\n" ^ 
	       "Time spent on this process is " ^
	       Real.fmt (StringCvt.FIX (SOME 1)) percentage ^
	       "%\n")
@


1.2.7.1
log
@branched from 1.2
@
text
@a13 3
 *  Revision 1.2  1996/09/04  11:52:55  jont
 *  Make require statements absolute
 *
@


1.2.7.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a13 3
 *  Revision 1.2.7.1  1997/05/12  10:24:23  hope
 *  branched from 1.2
 *
@


1.2.7.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a13 3
 *  Revision 1.2.7.1  1997/05/12  10:24:23  hope
 *  branched from 1.2
 *
@


1.2.7.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a13 3
 *  Revision 1.2.7.1  1997/05/12  10:24:23  hope
 *  branched from 1.2
 *
@


1.2.7.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a13 3
 *  Revision 1.2.7.1.1.1  1997/07/28  18:11:02  daveb
 *  branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.2.6.1
log
@branched from 1.2
@
text
@a13 3
 *  Revision 1.2  1996/09/04  11:52:55  jont
 *  Make require statements absolute
 *
@


1.2.6.1.1.1
log
@branched from 1.2.6.1
@
text
@a13 3
 *  Revision 1.2.6.1  1996/12/17  17:39:25  hope
 *  branched from 1.2
 *
@


1.2.5.1
log
@branched from 1.2
@
text
@a13 3
 *  Revision 1.2  1996/09/04  11:52:55  jont
 *  Make require statements absolute
 *
@


1.2.4.1
log
@branched from 1.2
@
text
@a13 3
 *  Revision 1.2  1996/09/04  11:52:55  jont
 *  Make require statements absolute
 *
@


1.2.4.1.1.1
log
@branched from 1.2.4.1
@
text
@a13 3
 *  Revision 1.2.4.1  1996/11/14  12:40:02  hope
 *  branched from 1.2
 *
@


1.2.3.1
log
@branched from 1.2
@
text
@a13 3
 *  Revision 1.2  1996/09/04  11:52:55  jont
 *  Make require statements absolute
 *
@


1.2.2.1
log
@branched from 1.2
@
text
@a13 3
 *  Revision 1.2  1996/09/04  11:52:55  jont
 *  Make require statements absolute
 *
@


1.2.1.1
log
@branched from 1.2
@
text
@a13 3
 *  Revision 1.2  1996/09/04  11:52:55  jont
 *  Make require statements absolute
 *
@


1.1
log
@new unit
@
text
@d13 4
a16 1
 *  $Log$
d22 4
a25 4
require "basis.__timer";
require "system.__time";
require "basis.__real";
require "basis.__string_cvt";
@
