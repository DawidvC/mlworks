head	1.2;
access;
symbols
	MLWorks_21c0_1999_03_25:1.2
	MLWorks_20c1_1998_08_20:1.2
	MLWorks_20c0_1998_08_04:1.2
	MLWorks_20b2c2_1998_06_19:1.2
	MLWorks_20b2_Windows_1998_06_12:1.2
	MLWorks_20b1c1_1998_05_07:1.2
	MLWorks_20b0_1998_04_07:1.2
	MLWorks_20b0_1998_03_20:1.2
	MLWorks_20m2_1998_02_16:1.2
	MLWorks_workspace_97:1.2.8
	MLWorks_20m1_1997_10_23:1.2
	MLWorks_11r1:1.2.7.1.1.1.1
	MLWorks_11c0_1997_09_09:1.2.7.1.1.1
	MLWorks_10r3:1.2.7.1.3
	MLWorks_10r2_551:1.2.7.1.2
	MLWorks_11:1.2.7.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.2.7.1
	MLWorks_20m0_1997_06_20:1.2
	MLWorks_1_0_r2c2_1997_06_14:1.2.7.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.2.7.1
	MLWorks_1_0_r2c1_1997_05_12:1.2.7
	MLWorks_BugFix_1997_04_24:1.2
	MLWorks_1_0_r2_Win32_1997_04_11:1.2
	MLWorks_1_0_r2_Unix_1997_04_04:1.2
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.2.6.1.1
	MLWorks_1_0_Win32_1996_12_17:1.2.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.2.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.2.4.1
	MLWorks_1_0_Irix_1996_11_28:1.2.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.2.5
	MLWorks_1_0_Unix_1996_11_14:1.2.4
	MLWorks_Open_Beta2_1996_10_11:1.2.3
	MLWorks_License_dev:1.2.2
	MLWorks_1_open_beta_1996_09_13:1.2.1
	MLWorks_Open_Beta_1996_08_22:1.1;
locks; strict;
comment	@ *  @;


1.2
date	96.09.04.11.51.59;	author jont;	state Exp;
branches
	1.2.1.1
	1.2.2.1
	1.2.3.1
	1.2.4.1
	1.2.5.1
	1.2.6.1
	1.2.7.1
	1.2.8.1;
next	1.1;

1.1
date	96.08.09.16.08.17;	author davids;	state Exp;
branches;
next	;

1.2.1.1
date	96.09.13.11.07.25;	author hope;	state Exp;
branches;
next	;

1.2.2.1
date	96.10.07.15.58.34;	author hope;	state Exp;
branches;
next	;

1.2.3.1
date	96.10.17.11.16.53;	author hope;	state Exp;
branches;
next	;

1.2.4.1
date	96.11.14.12.40.20;	author hope;	state Exp;
branches
	1.2.4.1.1.1;
next	;

1.2.4.1.1.1
date	96.11.28.14.52.10;	author hope;	state Exp;
branches;
next	;

1.2.5.1
date	96.11.22.18.00.47;	author hope;	state Exp;
branches;
next	;

1.2.6.1
date	96.12.17.17.39.41;	author hope;	state Exp;
branches
	1.2.6.1.1.1;
next	;

1.2.6.1.1.1
date	97.02.24.11.26.52;	author hope;	state Exp;
branches;
next	;

1.2.7.1
date	97.05.12.10.24.41;	author hope;	state Exp;
branches
	1.2.7.1.1.1
	1.2.7.1.2.1
	1.2.7.1.3.1;
next	;

1.2.7.1.1.1
date	97.07.28.18.09.56;	author daveb;	state Exp;
branches
	1.2.7.1.1.1.1.1;
next	;

1.2.7.1.1.1.1.1
date	97.10.07.11.33.46;	author jkbrook;	state Exp;
branches;
next	;

1.2.7.1.2.1
date	97.09.08.17.03.16;	author daveb;	state Exp;
branches;
next	;

1.2.7.1.3.1
date	97.09.09.13.57.51;	author daveb;	state Exp;
branches;
next	;

1.2.8.1
date	97.11.30.16.48.18;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
@


1.2
log
@Make require statements absolute
@
text
@(*  ==== BASIS EXAMPLES : Batch structure ====
 *
 *  Copyright (C) 1996 Harlequin Ltd.
 *
 *  Description
 *  -----------
 *  This module demonstrates the OS.Process structure in the basis library.
 *  It defines a function that will execute multiple commands, and report upon
 *  their success.  Note that this module should be delivered to an image file
 *  or executable rather than run from a Listener.
 *
 *  Revision Log
 *  ------------
 *  $Log: basis:__batch.sml,v $
 *  Revision 1.1  1996/08/09  16:08:17  davids
 *  new unit
 *
 *
 *)

require "batch";
require "$.system.__os";

structure Batch : BATCH =
  struct

    (* Attempt to execute all commands in the list.  If all commands
     are executed successfully, the function will exit the process
     with 'success' status.  Otherwise, it will exit with 'failure' status
     without executing any further commands. *)

    fun runFiles [] = OS.Process.exit OS.Process.success

      | runFiles (file::rest) =

        if OS.Process.system (file) = OS.Process.success then
	  (* Register a message noting success to report later. *)
          (OS.Process.atExit 
	   (fn () => print (file ^ " executed sucessfully.\n"));
           runFiles rest)

        else
	  (* Report failure and exit process. *)
          (print ("Failure reported executing file " ^ file ^ "\n");
           OS.Process.exit OS.Process.failure)

        handle OS.SysErr (message, error) => 
	  (* Report error and exit process. *)
          (print ("Unable to execute file " ^ file ^
		  "due to system error:\n" ^ message ^ "\n");
           OS.Process.exit OS.Process.failure)


    (* Attempt to execute all of the command line arguments given. *)

    fun batch () = runFiles (MLWorks.arguments ())

  end
@


1.2.8.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a14 3
 *  Revision 1.2  1996/09/04  11:51:59  jont
 *  Make require statements absolute
 *
@


1.2.7.1
log
@branched from 1.2
@
text
@a14 3
 *  Revision 1.2  1996/09/04  11:51:59  jont
 *  Make require statements absolute
 *
@


1.2.7.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a14 3
 *  Revision 1.2.7.1  1997/05/12  10:24:41  hope
 *  branched from 1.2
 *
@


1.2.7.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a14 3
 *  Revision 1.2.7.1  1997/05/12  10:24:41  hope
 *  branched from 1.2
 *
@


1.2.7.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a14 3
 *  Revision 1.2.7.1  1997/05/12  10:24:41  hope
 *  branched from 1.2
 *
@


1.2.7.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a14 3
 *  Revision 1.2.7.1.1.1  1997/07/28  18:09:56  daveb
 *  branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.2.6.1
log
@branched from 1.2
@
text
@a14 3
 *  Revision 1.2  1996/09/04  11:51:59  jont
 *  Make require statements absolute
 *
@


1.2.6.1.1.1
log
@branched from 1.2.6.1
@
text
@a14 3
 *  Revision 1.2.6.1  1996/12/17  17:39:41  hope
 *  branched from 1.2
 *
@


1.2.5.1
log
@branched from 1.2
@
text
@a14 3
 *  Revision 1.2  1996/09/04  11:51:59  jont
 *  Make require statements absolute
 *
@


1.2.4.1
log
@branched from 1.2
@
text
@a14 3
 *  Revision 1.2  1996/09/04  11:51:59  jont
 *  Make require statements absolute
 *
@


1.2.4.1.1.1
log
@branched from 1.2.4.1
@
text
@a14 3
 *  Revision 1.2.4.1  1996/11/14  12:40:20  hope
 *  branched from 1.2
 *
@


1.2.3.1
log
@branched from 1.2
@
text
@a14 3
 *  Revision 1.2  1996/09/04  11:51:59  jont
 *  Make require statements absolute
 *
@


1.2.2.1
log
@branched from 1.2
@
text
@a14 3
 *  Revision 1.2  1996/09/04  11:51:59  jont
 *  Make require statements absolute
 *
@


1.2.1.1
log
@branched from 1.2
@
text
@a14 3
 *  Revision 1.2  1996/09/04  11:51:59  jont
 *  Make require statements absolute
 *
@


1.1
log
@new unit
@
text
@d14 4
a17 1
 *  $Log$
d22 1
a22 1
require "system.__os";
@
