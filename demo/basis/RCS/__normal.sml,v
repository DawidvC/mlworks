head	1.4;
access;
symbols
	MLWorks_21c0_1999_03_25:1.4
	MLWorks_20c1_1998_08_20:1.4
	MLWorks_20c0_1998_08_04:1.4
	MLWorks_20b2c2_1998_06_19:1.4
	MLWorks_20b2_Windows_1998_06_12:1.4
	MLWorks_20b1c1_1998_05_07:1.4
	MLWorks_20b0_1998_04_07:1.4
	MLWorks_20b0_1998_03_20:1.4
	MLWorks_20m2_1998_02_16:1.4
	MLWorks_workspace_97:1.4.2
	MLWorks_20m1_1997_10_23:1.4
	MLWorks_11r1:1.4.1.1.1.1.1
	MLWorks_11c0_1997_09_09:1.4.1.1.1.1
	MLWorks_10r3:1.4.1.1.3
	MLWorks_10r2_551:1.4.1.1.2
	MLWorks_11:1.4.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.4.1.1
	MLWorks_20m0_1997_06_20:1.4
	MLWorks_1_0_r2c2_1997_06_14:1.4.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.4.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.4.1
	MLWorks_BugFix_1997_04_24:1.4
	MLWorks_1_0_r2_Win32_1997_04_11:1.4
	MLWorks_1_0_r2_Unix_1997_04_04:1.4
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.3.1.1.1
	MLWorks_1_0_Win32_1996_12_17:1.3.1
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.2.4.1.1.2
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.2.4.2
	MLWorks_1_0_Irix_1996_11_28:1.2.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.2.5
	MLWorks_1_0_Unix_1996_11_14:1.2.4
	MLWorks_Open_Beta2_1996_10_11:1.2.3
	MLWorks_License_dev:1.2.2
	MLWorks_1_open_beta_1996_09_13:1.2.1
	MLWorks_Open_Beta_1996_08_22:1.1;
locks; strict;
comment	@ *  @;


1.4
date	97.04.02.14.33.07;	author jkbrook;	state Exp;
branches
	1.4.1.1
	1.4.2.1;
next	1.3;

1.3
date	96.11.26.10.48.51;	author jont;	state Exp;
branches
	1.3.1.1;
next	1.2;

1.2
date	96.09.04.11.54.06;	author jont;	state Exp;
branches
	1.2.1.1
	1.2.2.1
	1.2.3.1
	1.2.4.1
	1.2.5.1;
next	1.1;

1.1
date	96.08.06.10.54.43;	author davids;	state Exp;
branches;
next	;

1.2.1.1
date	96.09.13.11.07.44;	author hope;	state Exp;
branches;
next	;

1.2.2.1
date	96.10.07.15.58.54;	author hope;	state Exp;
branches;
next	;

1.2.3.1
date	96.10.17.11.17.14;	author hope;	state Exp;
branches;
next	;

1.2.4.1
date	96.11.14.12.40.43;	author hope;	state Exp;
branches
	1.2.4.1.1.1;
next	1.2.4.2;

1.2.4.2
date	96.11.29.18.44.09;	author daveb;	state Exp;
branches;
next	;

1.2.4.1.1.1
date	96.11.28.14.52.34;	author hope;	state Exp;
branches;
next	1.2.4.1.1.2;

1.2.4.1.1.2
date	96.11.28.19.09.18;	author daveb;	state Exp;
branches;
next	;

1.2.5.1
date	96.11.22.18.01.11;	author hope;	state Exp;
branches;
next	;

1.3.1.1
date	96.12.17.17.40.04;	author hope;	state Exp;
branches
	1.3.1.1.1.1;
next	;

1.3.1.1.1.1
date	97.02.24.11.27.17;	author hope;	state Exp;
branches;
next	;

1.4.1.1
date	97.05.12.10.25.05;	author hope;	state Exp;
branches
	1.4.1.1.1.1
	1.4.1.1.2.1
	1.4.1.1.3.1;
next	;

1.4.1.1.1.1
date	97.07.28.18.11.00;	author daveb;	state Exp;
branches
	1.4.1.1.1.1.1.1;
next	;

1.4.1.1.1.1.1.1
date	97.10.07.11.35.33;	author jkbrook;	state Exp;
branches;
next	;

1.4.1.1.2.1
date	97.09.08.17.04.20;	author daveb;	state Exp;
branches;
next	;

1.4.1.1.3.1
date	97.09.09.13.59.22;	author daveb;	state Exp;
branches;
next	;

1.4.2.1
date	97.11.30.16.48.05;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
@


1.4
log
@[Bug #2008]
Replace reference to Real.equal with (synonymous) Real.==
@
text
@(*  ==== BASIS EXAMPLES : Normal structure ====
 *
 *  Copyright (C) 1996 Harlequin Ltd.
 *
 *  Description
 *  -----------
 *  This module calculates probabilities in a normal distribution.  It
 *  illustrates the use of the Math structure in the basis library.
 *
 *  Revision Log
 *  ------------
 *  $Log: basis:__normal.sml,v $
 *  Revision 1.3  1996/11/26  10:48:51  jont
 *  [Bug #1805]
 *  Real no longer an eq type
 *
 *  Revision 1.2  1996/09/04  11:54:06  jont
 *  Make require statements absolute
 *
 *  Revision 1.1  1996/08/06  10:54:43  davids
 *  new unit
 *
 *
 *)


require "normal";
require "__quadrature";
require "$.basis.__math";
require "$.basis.__real";

structure Normal : NORMAL =
  struct

    (* This is the probability density function for the normal distribution. *)

    val realEq = Real.==
    infix realEq
    fun normal variance mean =
      let
	val sigma = Math.sqrt variance
      in
	fn x => Math.exp (~ (Math.pow ((x - mean) / sigma, 2.0) / 2.0))
	        / (sigma * Math.sqrt (2.0 * Math.pi))
      end


    (* This will provide reasonable accuracy for the calculations. *)
    val accuracy = SOME 0.0001

    
    (* Calculate the probability of lying between 'left' and 'right' in a
     normal distribution with parameters 'mean' and 'variance'.  Infinities
     are coped with by utilising the symmetry of the normal distribution
     curve. *)

    fun prob (mean, variance, left, right) =
      let
	val f = normal variance mean
      in

	if left >= right then
	  0.0
	else

	  if left realEq Real.negInf andalso right realEq Real.posInf then
	    1.0
	  else

	    if left realEq Real.negInf then
	      0.5 + Quadrature.integrate (f, mean, right, accuracy)
	    else

	      if right realEq Real.posInf then
		0.5 + Quadrature.integrate (f, left, mean, accuracy)
	      else

		Quadrature.integrate (f, left, right, accuracy)
      end

  end
@


1.4.2.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a12 4
 *  Revision 1.4  1997/04/02  14:33:07  jkbrook
 *  [Bug #2008]
 *  Replace reference to Real.equal with (synonymous) Real.==
 *
@


1.4.1.1
log
@branched from 1.4
@
text
@a12 4
 *  Revision 1.4  1997/04/02  14:33:07  jkbrook
 *  [Bug #2008]
 *  Replace reference to Real.equal with (synonymous) Real.==
 *
@


1.4.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a12 3
 *  Revision 1.4.1.1  1997/05/12  10:25:05  hope
 *  branched from 1.4
 *
@


1.4.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a12 3
 *  Revision 1.4.1.1  1997/05/12  10:25:05  hope
 *  branched from 1.4
 *
@


1.4.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a12 3
 *  Revision 1.4.1.1  1997/05/12  10:25:05  hope
 *  branched from 1.4
 *
@


1.4.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a12 3
 *  Revision 1.4.1.1.1.1  1997/07/28  18:11:00  daveb
 *  branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.3
log
@[Bug #1805]
Real no longer an eq type
@
text
@d13 4
d37 1
a37 1
    val realEq = Real.equal
@


1.3.1.1
log
@branched from 1.3
@
text
@a12 4
 *  Revision 1.3  1996/11/26  10:48:51  jont
 *  [Bug #1805]
 *  Real no longer an eq type
 *
@


1.3.1.1.1.1
log
@branched from 1.3.1.1
@
text
@a12 3
 *  Revision 1.3.1.1  1996/12/17  17:40:04  hope
 *  branched from 1.3
 *
@


1.2
log
@Make require statements absolute
@
text
@d13 3
d33 2
d62 1
a62 1
	  if left = Real.negInf andalso right = Real.posInf then
d66 1
a66 1
	    if left = Real.negInf then
d70 1
a70 1
	      if right = Real.posInf then
@


1.2.5.1
log
@branched from 1.2
@
text
@a12 3
 *  Revision 1.2  1996/09/04  11:54:06  jont
 *  Make require statements absolute
 *
@


1.2.4.1
log
@branched from 1.2
@
text
@a12 3
 *  Revision 1.2  1996/09/04  11:54:06  jont
 *  Make require statements absolute
 *
@


1.2.4.2
log
@[Bug #1805]
Real no longer an eq type.
@
text
@a32 2
    val realEq = Real.equal
    infix realEq
d60 1
a60 1
	  if left realEq Real.negInf andalso right realEq Real.posInf then
d64 1
a64 1
	    if left realEq Real.negInf then
d68 1
a68 1
	      if right realEq Real.posInf then
@


1.2.4.1.1.1
log
@branched from 1.2.4.1
@
text
@a12 3
 *  Revision 1.2.4.1  1996/11/14  12:40:43  hope
 *  branched from 1.2
 *
@


1.2.4.1.1.2
log
@[Bug #1805]
Real no longer an eq type
@
text
@d13 3
a35 2
    val realEq = Real.equal
    infix realEq
d63 1
a63 1
	  if left realEq Real.negInf andalso right realEq Real.posInf then
d67 1
a67 1
	    if left realEq Real.negInf then
d71 1
a71 1
	      if right realEq Real.posInf then
@


1.2.3.1
log
@branched from 1.2
@
text
@a12 3
 *  Revision 1.2  1996/09/04  11:54:06  jont
 *  Make require statements absolute
 *
@


1.2.2.1
log
@branched from 1.2
@
text
@a12 3
 *  Revision 1.2  1996/09/04  11:54:06  jont
 *  Make require statements absolute
 *
@


1.2.1.1
log
@branched from 1.2
@
text
@a12 3
 *  Revision 1.2  1996/09/04  11:54:06  jont
 *  Make require statements absolute
 *
@


1.1
log
@new unit
@
text
@d12 4
a15 1
 *  $Log$
d22 2
a23 2
require "basis.__math";
require "basis.__real";
@
