head	1.3;
access;
symbols
	MLWorks_21c0_1999_03_25:1.3
	MLWorks_20c1_1998_08_20:1.3
	MLWorks_20c0_1998_08_04:1.3
	MLWorks_20b2c2_1998_06_19:1.3
	MLWorks_20b2_Windows_1998_06_12:1.3
	MLWorks_20b1c1_1998_05_07:1.3
	MLWorks_20b0_1998_04_07:1.3
	MLWorks_20b0_1998_03_20:1.3
	MLWorks_20m2_1998_02_16:1.3
	MLWorks_workspace_97:1.3.5
	MLWorks_20m1_1997_10_23:1.3
	MLWorks_11r1:1.3.4.1.1.1.1
	MLWorks_11c0_1997_09_09:1.3.4.1.1.1
	MLWorks_10r3:1.3.4.1.3
	MLWorks_10r2_551:1.3.4.1.2
	MLWorks_11:1.3.4.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.3.4.1
	MLWorks_20m0_1997_06_20:1.3
	MLWorks_1_0_r2c2_1997_06_14:1.3.4.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.3.4.1
	MLWorks_1_0_r2c1_1997_05_12:1.3.4
	MLWorks_BugFix_1997_04_24:1.3
	MLWorks_1_0_r2_Win32_1997_04_11:1.3
	MLWorks_1_0_r2_Unix_1997_04_04:1.3
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.3.3.1.1
	MLWorks_1_0_Win32_1996_12_17:1.3.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.3.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.3.1.1
	MLWorks_1_0_Irix_1996_11_28:1.3.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.3.2
	MLWorks_1_0_Unix_1996_11_14:1.3.1
	MLWorks_Open_Beta2_1996_10_11:1.2.3
	MLWorks_License_dev:1.2.2
	MLWorks_1_open_beta_1996_09_13:1.2.1
	MLWorks_Open_Beta_1996_08_22:1.1;
locks; strict;
comment	@ *  @;


1.3
date	96.11.08.16.10.55;	author jkbrook;	state Exp;
branches
	1.3.1.1
	1.3.2.1
	1.3.3.1
	1.3.4.1
	1.3.5.1;
next	1.2;

1.2
date	96.09.04.11.53.52;	author jont;	state Exp;
branches
	1.2.1.1
	1.2.2.1
	1.2.3.1;
next	1.1;

1.1
date	96.08.09.17.42.39;	author davids;	state Exp;
branches;
next	;

1.2.1.1
date	96.09.13.11.07.29;	author hope;	state Exp;
branches;
next	;

1.2.2.1
date	96.10.07.15.58.38;	author hope;	state Exp;
branches;
next	;

1.2.3.1
date	96.10.17.11.16.58;	author hope;	state Exp;
branches;
next	;

1.3.1.1
date	96.11.14.12.40.26;	author hope;	state Exp;
branches
	1.3.1.1.1.1;
next	;

1.3.1.1.1.1
date	96.11.28.14.52.16;	author hope;	state Exp;
branches;
next	;

1.3.2.1
date	96.11.22.18.00.53;	author hope;	state Exp;
branches;
next	;

1.3.3.1
date	96.12.17.17.39.46;	author hope;	state Exp;
branches
	1.3.3.1.1.1;
next	;

1.3.3.1.1.1
date	97.02.24.11.26.58;	author hope;	state Exp;
branches;
next	;

1.3.4.1
date	97.05.12.10.24.46;	author hope;	state Exp;
branches
	1.3.4.1.1.1
	1.3.4.1.2.1
	1.3.4.1.3.1;
next	;

1.3.4.1.1.1
date	97.07.28.18.10.02;	author daveb;	state Exp;
branches
	1.3.4.1.1.1.1.1;
next	;

1.3.4.1.1.1.1.1
date	97.10.07.11.33.52;	author jkbrook;	state Exp;
branches;
next	;

1.3.4.1.2.1
date	97.09.08.17.03.21;	author daveb;	state Exp;
branches;
next	;

1.3.4.1.3.1
date	97.09.09.13.57.56;	author daveb;	state Exp;
branches;
next	;

1.3.5.1
date	97.11.30.16.48.24;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
@


1.3
log
@[Bug #1745]
Fix problem that Match.match fails when second pattern begins with
wildcard and is shorter than the first (this causes FileFind.find to
fail for some forms of filename patterns.)
@
text
@(*  ==== BASIS EXAMPLES : Match structure ====
 *
 *  Copyright (C) 1996 Harlequin Ltd.
 *
 *  Description
 *  -----------
 *  This module performs basic pattern matching of strings.  It demonstrates
 *  the use of the Substring structure in the basis library.
 *
 *  Revision Log
 *  ------------
 *  $Log: basis:__match.sml,v $
 *  Revision 1.2  1996/09/04  11:53:52  jont
 *  Make require statements absolute
 *
 *  Revision 1.1  1996/08/09  17:42:39  davids
 *  new unit
 *
 *
 *)


require "match";
require "$.basis.__substring";

structure Match : MATCH =
  struct


    (* Determine whether a given character is a wildcard #"*". *)

    fun wildcard #"*" = true
      | wildcard _ = false


    (* Determine whether string 's' is a suffix of substring 'ss'. *)

    fun isSuffix s ss =
      let
	val suffix = Substring.all s
	val diff = Substring.size ss - size s
      in
        if (diff > 0) then
         Substring.compare (suffix, (Substring.slice (ss, diff, NONE))) = EQUAL
        else
         false
      end


    (* Determine whether a list of strings can match with the given substring.
     eg. ["abc", "ef", "j"] matches with "abcdefghij".  This is done by
     working left to right through the substring, searching for each string in
     the list in turn, and chopping off the appropriate part of the substring
     each time a match is found. *)

    fun matchList (_, []) = true

      (* An empty string should match automatically. *)
      | matchList (ss, (""::t)) = matchList (ss, t)

      (* The last string in the list must be a suffix of 'ss'. *)
      | matchList (ss, [s]) = isSuffix s ss

      (* Check whether each string in the list is a prefix of 'ss'.  If not,
       chop the first character off 'ss' and try again. *)
      | matchList (ss, (h::t)) =
	if Substring.isEmpty ss then false
	else
	  if Substring.isPrefix h ss then
	    matchList (Substring.triml (size h) ss, t)
	  else
	    matchList (Substring.triml 1 ss, (h::t))


    (* The first string in the list is special - it must be a prefix of 'ss'.
     The remainder may lie anywhere within 'ss' and are checked with 
     matchList. *)

    fun startMatch (ss, []) = true
      | startMatch (ss, [s]) = Substring.string ss = s
      | startMatch (ss, (h::t)) =
	Substring.isPrefix h ss
	andalso matchList (Substring.triml (size h) ss, t)


    (* Determine whether or not 'inputString' matches the pattern given by
     'matchString'.  Patterns may be any string, with the exception that the
     #"*" character represents a wildcard that will match with any number of
     characters. 

     The method used here is to divide up 'inputString' into various strings
     lying between the wildcards (by using Substring.fields), and then to
     match each one in turn. *)

    fun match (inputString, matchString) =
      startMatch (Substring.all inputString,
		  Substring.String.fields wildcard matchString)

  end


@


1.3.5.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a12 6
 *  Revision 1.3  1996/11/08  16:10:55  jkbrook
 *  [Bug #1745]
 *  Fix problem that Match.match fails when second pattern begins with
 *  wildcard and is shorter than the first (this causes FileFind.find to
 *  fail for some forms of filename patterns.)
 *
@


1.3.4.1
log
@branched from 1.3
@
text
@a12 6
 *  Revision 1.3  1996/11/08  16:10:55  jkbrook
 *  [Bug #1745]
 *  Fix problem that Match.match fails when second pattern begins with
 *  wildcard and is shorter than the first (this causes FileFind.find to
 *  fail for some forms of filename patterns.)
 *
@


1.3.4.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a12 3
 *  Revision 1.3.4.1  1997/05/12  10:24:46  hope
 *  branched from 1.3
 *
@


1.3.4.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a12 3
 *  Revision 1.3.4.1  1997/05/12  10:24:46  hope
 *  branched from 1.3
 *
@


1.3.4.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a12 3
 *  Revision 1.3.4.1  1997/05/12  10:24:46  hope
 *  branched from 1.3
 *
@


1.3.4.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a12 3
 *  Revision 1.3.4.1.1.1  1997/07/28  18:10:02  daveb
 *  branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.3.3.1
log
@branched from 1.3
@
text
@a12 6
 *  Revision 1.3  1996/11/08  16:10:55  jkbrook
 *  [Bug #1745]
 *  Fix problem that Match.match fails when second pattern begins with
 *  wildcard and is shorter than the first (this causes FileFind.find to
 *  fail for some forms of filename patterns.)
 *
@


1.3.3.1.1.1
log
@branched from 1.3.3.1
@
text
@a12 3
 *  Revision 1.3.3.1  1996/12/17  17:39:46  hope
 *  branched from 1.3
 *
@


1.3.2.1
log
@branched from 1.3
@
text
@a12 6
 *  Revision 1.3  1996/11/08  16:10:55  jkbrook
 *  [Bug #1745]
 *  Fix problem that Match.match fails when second pattern begins with
 *  wildcard and is shorter than the first (this causes FileFind.find to
 *  fail for some forms of filename patterns.)
 *
@


1.3.1.1
log
@branched from 1.3
@
text
@a12 6
 *  Revision 1.3  1996/11/08  16:10:55  jkbrook
 *  [Bug #1745]
 *  Fix problem that Match.match fails when second pattern begins with
 *  wildcard and is shorter than the first (this causes FileFind.find to
 *  fail for some forms of filename patterns.)
 *
@


1.3.1.1.1.1
log
@branched from 1.3.1.1
@
text
@a12 3
 *  Revision 1.3.1.1  1996/11/14  12:40:26  hope
 *  branched from 1.3
 *
@


1.2
log
@Make require statements absolute
@
text
@d13 3
d41 1
a41 1
	val last = Substring.slice (ss, Substring.size ss - size s, NONE)
d43 4
a46 1
	Substring.compare (suffix, last) = EQUAL
@


1.2.3.1
log
@branched from 1.2
@
text
@a12 3
 *  Revision 1.2  1996/09/04  11:53:52  jont
 *  Make require statements absolute
 *
@


1.2.2.1
log
@branched from 1.2
@
text
@a12 3
 *  Revision 1.2  1996/09/04  11:53:52  jont
 *  Make require statements absolute
 *
@


1.2.1.1
log
@branched from 1.2
@
text
@a12 3
 *  Revision 1.2  1996/09/04  11:53:52  jont
 *  Make require statements absolute
 *
@


1.1
log
@new unit
@
text
@d12 4
a15 1
 *  $Log$
d21 1
a21 1
require "basis.__substring";
@
