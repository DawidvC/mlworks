head	1.3;
access;
symbols
	MLW_daveb_inline_1_4_99:1.3.1
	MLWorks_21c0_1999_03_25:1.3
	MLWorks_20c1_1998_08_20:1.3
	MLWorks_20c0_1998_08_04:1.3
	MLWorks_20b2c2_1998_06_19:1.3
	MLWorks_20b2_Windows_1998_06_12:1.3
	MLWorks_20b1c1_1998_05_07:1.3
	MLWorks_20b0_1998_04_07:1.3
	MLWorks_20b0_1998_03_20:1.3
	MLWorks_20m2_1998_02_16:1.3
	MLWorks_20m1_1997_10_23:1.2
	MLWorks_11r1:1.2.5.1.1.1.1
	MLWorks_workspace_97:1.2.7
	MLWorks_dt_wizard:1.2.6
	MLWorks_11c0_1997_09_09:1.2.5.1.1.1
	MLWorks_10r3:1.2.5.1.3
	MLWorks_10r2_551:1.2.5.1.2
	MLWorks_11:1.2.5.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.2.5.1
	MLWorks_20m0_1997_06_20:1.2
	MLWorks_1_0_r2c2_1997_06_14:1.2.5.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.2.5.1
	MLWorks_1_0_r2c1_1997_05_12:1.2.5
	MLWorks_BugFix_1997_04_24:1.2
	MLWorks_1_0_r2_Win32_1997_04_11:1.2
	MLWorks_1_0_r2_Unix_1997_04_04:1.2
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.2.3.1.1
	MLWorks_gui_1996_12_18:1.2.4
	MLWorks_1_0_Win32_1996_12_17:1.2.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.2.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.2.1.1
	MLWorks_1_0_Irix_1996_11_28:1.2.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.2.2
	MLWorks_1_0_Unix_1996_11_14:1.2.1
	MLWorks_Open_Beta2_1996_10_11:1.1.3
	MLWorks_License_dev:1.1.2
	MLWorks_1_open_beta_1996_09_13:1.1.1
	MLWorks_Open_Beta_1996_08_22:1.1
	MLWorks_Beta_1996_07_02:1.1;
locks; strict;
comment	@ *  @;


1.3
date	97.10.31.09.28.14;	author johnh;	state Exp;
branches
	1.3.1.1;
next	1.2;

1.2
date	96.10.30.20.07.49;	author io;	state Exp;
branches
	1.2.1.1
	1.2.2.1
	1.2.3.1
	1.2.4.1
	1.2.5.1
	1.2.6.1
	1.2.7.1;
next	1.1;

1.1
date	96.06.11.21.46.24;	author brianm;	state Exp;
branches
	1.1.1.1
	1.1.2.1
	1.1.3.1;
next	;

1.1.1.1
date	96.09.13.11.11.35;	author hope;	state Exp;
branches;
next	;

1.1.2.1
date	96.10.07.16.02.19;	author hope;	state Exp;
branches;
next	;

1.1.3.1
date	96.10.17.11.20.33;	author hope;	state Exp;
branches;
next	;

1.2.1.1
date	96.11.14.12.44.12;	author hope;	state Exp;
branches
	1.2.1.1.1.1;
next	;

1.2.1.1.1.1
date	96.11.28.14.56.09;	author hope;	state Exp;
branches;
next	;

1.2.2.1
date	96.11.22.18.04.36;	author hope;	state Exp;
branches;
next	;

1.2.3.1
date	96.12.17.17.43.34;	author hope;	state Exp;
branches
	1.2.3.1.1.1;
next	;

1.2.3.1.1.1
date	97.02.24.11.32.37;	author hope;	state Exp;
branches;
next	;

1.2.4.1
date	96.12.18.09.37.31;	author hope;	state Exp;
branches;
next	;

1.2.5.1
date	97.05.12.10.29.43;	author hope;	state Exp;
branches
	1.2.5.1.1.1
	1.2.5.1.2.1
	1.2.5.1.3.1;
next	;

1.2.5.1.1.1
date	97.07.28.18.15.35;	author daveb;	state Exp;
branches
	1.2.5.1.1.1.1.1;
next	;

1.2.5.1.1.1.1.1
date	97.10.07.11.40.39;	author jkbrook;	state Exp;
branches;
next	;

1.2.5.1.2.1
date	97.09.08.17.09.07;	author daveb;	state Exp;
branches;
next	;

1.2.5.1.3.1
date	97.09.09.14.04.14;	author daveb;	state Exp;
branches;
next	;

1.2.6.1
date	97.09.10.19.18.42;	author brucem;	state Exp;
branches;
next	;

1.2.7.1
date	97.09.11.20.49.50;	author daveb;	state Exp;
branches;
next	;

1.3.1.1
date	99.04.01.17.53.31;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
New file.
@


1.3
log
@[Bug #30233]
Change editor interface to make connectDialogs distinct from custom commands.
@
text
@(*  === CUSTOM Editor interface ===
 *
 *  $Log: _custom.sml,v $
 *  Revision 1.2  1996/10/30  20:07:49  io
 *  moving String from toplevel
 *
 *  Revision 1.1  1996/06/11  21:46:24  brianm
 *  new unit
 *  New file.
 *
 *
 *  Copyright (C) 1996 Harlequin Ltd
 *
 *)

require "^.basis.__list";
require "custom";

functor CustomEditor () : CUSTOM_EDITOR =
  struct

     val emptyEntry = ("",[])

     type dBentry = (string * string list)

     val editorsOneWay : (string * string) list ref = ref []
     val editorsTwoWay : (string * dBentry) list ref = ref []

     fun split P lst =
         let fun sp (a::l,r) =
                 if P(a) then (SOME(a), List.revAppend (r,l)) else sp(l,a::r)
               | sp ([],_) = (NONE,lst)
         in
             sp(lst,[])
         end

     fun findFirst P lst =
         let fun fF (a::l) =
                 if P(a) then SOME(a) else fF(l)
               | fF ([]) = NONE
         in
             fF(lst)
         end

     fun names edlist () = map (fn (s,_) => s) (!edlist)

     (* Public *)

     fun removeCommand ed =
       let 
	 val (itm,rest) = split (fn (s,_) => (s = ed)) (!editorsOneWay)
         val result =
           case itm of
             NONE => ""
           | SOME (_,r) => r
       in 
	 editorsOneWay := rest;
	 result
       end

     fun removeDialog ed =
       let 
	 val (itm,rest) = split (fn (s,_) => (s = ed)) (!editorsTwoWay)
         val result =
           case itm of
             NONE => emptyEntry
           | SOME((_,r)) => r
       in 
	 editorsTwoWay := rest;
	 result
       end

     fun getCommandEntry ed =
       let 
	 val itm = findFirst (fn (s,_) => (s = ed)) (!editorsOneWay)
       in
         case itm of
           NONE => ""
         | SOME (_,r) => r
       end

     fun getDialogEntry ed =
       let 
	 val itm = findFirst (fn (s,_) => (s = ed)) (!editorsTwoWay)
       in
         case itm of
           NONE => emptyEntry
         | SOME (_,r) => r
       end

     fun addCommand (ed,cmd) =
	 let 
	   val (itm,rest) = split (fn (s,_) => (s = ed)) (!editorsOneWay)
           val new_itm = (ed,cmd)
         in 
           editorsOneWay := new_itm :: rest
         end

     fun addConnectDialog (ed,con_type,cmds) =
	 let 
	   val (itm,rest) = split (fn (s,_) => (s = ed)) (!editorsTwoWay)
           val new_itm = (ed,(con_type,cmds))
         in 
           editorsTwoWay := (new_itm :: rest)
         end

     val commandNames = names editorsOneWay
     val dialogNames = names editorsTwoWay

  end;
@


1.3.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a3 4
 *  Revision 1.3  1997/10/31  09:28:14  johnh
 *  [Bug #30233]
 *  Change editor interface to make connectDialogs distinct from custom commands.
 *
@


1.2
log
@moving String from toplevel
@
text
@d4 3
d22 1
a22 1
     val emptyEntry = ("","",[])
d24 1
a24 1
     type dBentry = (string * string * string list)
d26 2
a27 1
     val editorDb : (string * dBentry) list ref = ref []
d45 2
d49 42
d92 3
a94 6
	 let val (itm,rest) = split (fn (s,_) => (s = ed)) (!editorDb)
             val new_itm =
                 case itm of
                   NONE => (ed,(cmd,"",[]))
                 |
                   SOME((_,(_,a,b))) => (ed,(cmd,a,b))
d96 1
a96 1
             editorDb := new_itm :: rest
d100 3
a102 17
	 let val (itm,rest) = split (fn (s,_) => (s = ed)) (!editorDb)
             val new_itm =
                 case itm of
                   NONE => (ed,("",con_type,cmds))
                 |
                   SOME((_,(cmd,_,_))) => (ed,(cmd,con_type,cmds))
         in 
             editorDb := (new_itm :: rest)
         end

     fun remove (ed) =
	 let val (itm,rest) = split (fn (s,_) => (s = ed)) (!editorDb)
             val result =
                 case itm of
                   NONE => emptyEntry
                 |
                   SOME((_,r)) => r
d104 1
a104 2
	   editorDb := rest ;
	   result
d107 2
a108 1
     fun names () = map (fn (s,_) => s) (!editorDb)
a109 7
     fun getEntry (ed) =
         let val itm = findFirst (fn (s,_) => (s = ed))  (!editorDb)
         in
             case itm of
               NONE => emptyEntry
             | SOME (_,r) => r
         end
@


1.2.7.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a3 3
 *  Revision 1.2  1996/10/30  20:07:49  io
 *  moving String from toplevel
 *
@


1.2.6.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a3 3
 *  Revision 1.2  1996/10/30  20:07:49  io
 *  moving String from toplevel
 *
@


1.2.5.1
log
@branched from 1.2
@
text
@a3 3
 *  Revision 1.2  1996/10/30  20:07:49  io
 *  moving String from toplevel
 *
@


1.2.5.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a3 3
 *  Revision 1.2.5.1  1997/05/12  10:29:43  hope
 *  branched from 1.2
 *
@


1.2.5.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a3 3
 *  Revision 1.2.5.1  1997/05/12  10:29:43  hope
 *  branched from 1.2
 *
@


1.2.5.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a3 3
 *  Revision 1.2.5.1  1997/05/12  10:29:43  hope
 *  branched from 1.2
 *
@


1.2.5.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a3 3
 *  Revision 1.2.5.1.1.1  1997/07/28  18:15:35  daveb
 *  branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.2.4.1
log
@branched from 1.2
@
text
@a3 3
 *  Revision 1.2  1996/10/30  20:07:49  io
 *  moving String from toplevel
 *
@


1.2.3.1
log
@branched from 1.2
@
text
@a3 3
 *  Revision 1.2  1996/10/30  20:07:49  io
 *  moving String from toplevel
 *
@


1.2.3.1.1.1
log
@branched from 1.2.3.1
@
text
@a3 3
 *  Revision 1.2.3.1  1996/12/17  17:43:34  hope
 *  branched from 1.2
 *
@


1.2.2.1
log
@branched from 1.2
@
text
@a3 3
 *  Revision 1.2  1996/10/30  20:07:49  io
 *  moving String from toplevel
 *
@


1.2.1.1
log
@branched from 1.2
@
text
@a3 3
 *  Revision 1.2  1996/10/30  20:07:49  io
 *  moving String from toplevel
 *
@


1.2.1.1.1.1
log
@branched from 1.2.1.1
@
text
@a3 3
 *  Revision 1.2.1.1  1996/11/14  12:44:12  hope
 *  branched from 1.2
 *
@


1.1
log
@new unit
New file.
@
text
@d3 5
a7 1
 *  $Log$
d13 1
a13 2
require "$.utils.lists";

d16 1
a16 3
functor CustomEditor (
   structure Lists : LISTS
) : CUSTOM_EDITOR =
a18 4
     open MLWorks.Option;

     val rev_append = Lists.rev_append

d27 1
a27 1
                 if P(a) then (SOME(a), rev_append(r,l)) else sp(l,a::r)
@


1.1.3.1
log
@branched from 1.1
@
text
@d3 1
a3 5
 *  $Log: _custom.sml,v $
 *  Revision 1.1  1996/06/11  21:46:24  brianm
 *  new unit
 *  New file.
 *
@


1.1.2.1
log
@branched from 1.1
@
text
@d3 1
a3 5
 *  $Log: _custom.sml,v $
 *  Revision 1.1  1996/06/11  21:46:24  brianm
 *  new unit
 *  New file.
 *
@


1.1.1.1
log
@branched from 1.1
@
text
@d3 1
a3 5
 *  $Log: _custom.sml,v $
 *  Revision 1.1  1996/06/11  21:46:24  brianm
 *  new unit
 *  New file.
 *
@
