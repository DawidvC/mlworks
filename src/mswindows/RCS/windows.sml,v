head	1.38;
access;
symbols
	MLWorks_20b0_1998_03_20:1.38
	MLWorks_20m2_1998_02_16:1.38
	MLWorks_20m1_1997_10_23:1.36
	MLWorks_11r1:1.31.1.1.1.1.1
	MLWorks_workspace_97:1.35.2
	MLWorks_dt_wizard:1.35.1
	MLWorks_11c0_1997_09_09:1.31.1.1.1.1
	MLWorks_10r3:1.31.1.1.3
	MLWorks_10r2_551:1.31.1.1.2
	MLWorks_11:1.31.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.31.1.1
	MLWorks_20m0_1997_06_20:1.34
	MLWorks_1_0_r2c2_1997_06_14:1.31.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.31.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.31.1
	MLWorks_BugFix_1997_04_24:1.31
	MLWorks_1_0_r2_Win32_1997_04_11:1.31
	MLWorks_1_0_r2_Unix_1997_04_04:1.31
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.29.4.1.1
	MLWorks_gui_1996_12_18:1.29.5
	MLWorks_1_0_Win32_1996_12_17:1.29.4
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.29.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.29.1.1
	JFHmswindows:1.29.3
	MLWorks_1_0_Irix_1996_11_28:1.29.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.29.2
	MLWorks_1_0_Unix_1996_11_14:1.29.1
	MLWorks_Open_Beta2_1996_10_11:1.27.2
	MLWorks_License_dev:1.27.1
	MLWorks_1_open_beta_1996_09_13:1.26.1
	MLWorks_Open_Beta_1996_08_22:1.26
	MLWorks_Beta_1996_07_02:1.25
	MLWorks_Beta_1996_06_07:1.23
	MLWorks_Beta_1996_06_06:1.23
	MLWorks_Beta_1996_06_05:1.23
	MLWorks_Beta_1996_06_03:1.23
	MLWorks_Beta_1996_05_31:1.23
	MLWorks_Beta_1996_05_30:1.23;
locks; strict;
comment	@ * @;


1.38
date	98.01.27.15.27.12;	author johnh;	state Exp;
branches;
next	1.37;

1.37
date	97.10.21.14.52.08;	author johnh;	state Exp;
branches;
next	1.36;

1.36
date	97.10.16.13.00.10;	author johnh;	state Exp;
branches;
next	1.35;

1.35
date	97.09.05.14.31.31;	author johnh;	state Exp;
branches
	1.35.1.1
	1.35.2.1;
next	1.34;

1.34
date	97.05.19.14.12.18;	author johnh;	state Exp;
branches;
next	1.33;

1.33
date	97.05.16.15.36.33;	author johnh;	state Exp;
branches;
next	1.32;

1.32
date	97.05.01.12.50.02;	author jont;	state Exp;
branches;
next	1.31;

1.31
date	97.03.25.17.25.40;	author johnh;	state Exp;
branches
	1.31.1.1;
next	1.30;

1.30
date	97.03.17.14.22.43;	author johnh;	state Exp;
branches;
next	1.29;

1.29
date	96.11.06.18.53.39;	author daveb;	state Exp;
branches
	1.29.1.1
	1.29.2.1
	1.29.3.1
	1.29.4.1
	1.29.5.1;
next	1.28;

1.28
date	96.10.25.15.46.06;	author johnh;	state Exp;
branches;
next	1.27;

1.27
date	96.09.30.13.43.53;	author johnh;	state Exp;
branches
	1.27.1.1
	1.27.2.1;
next	1.26;

1.26
date	96.07.26.14.59.29;	author daveb;	state Exp;
branches
	1.26.1.1;
next	1.25;

1.25
date	96.06.18.13.16.13;	author daveb;	state Exp;
branches;
next	1.24;

1.24
date	96.06.13.11.23.55;	author daveb;	state Exp;
branches;
next	1.23;

1.23
date	96.05.28.16.08.04;	author jont;	state Exp;
branches;
next	1.22;

1.22
date	96.03.07.15.50.35;	author matthew;	state Exp;
branches;
next	1.21;

1.21
date	96.03.01.11.25.11;	author matthew;	state Exp;
branches;
next	1.20;

1.20
date	96.02.27.17.13.33;	author matthew;	state Exp;
branches;
next	1.19;

1.19
date	96.02.14.11.26.37;	author matthew;	state Exp;
branches;
next	1.18;

1.18
date	96.02.02.15.03.32;	author matthew;	state Exp;
branches;
next	1.17;

1.17
date	96.01.25.12.26.41;	author matthew;	state Exp;
branches;
next	1.16;

1.16
date	96.01.12.16.35.29;	author matthew;	state Exp;
branches;
next	1.15;

1.15
date	96.01.12.10.07.11;	author daveb;	state Exp;
branches;
next	1.14;

1.14
date	96.01.04.16.16.21;	author matthew;	state Exp;
branches;
next	1.13;

1.13
date	95.12.20.15.13.47;	author matthew;	state Exp;
branches;
next	1.12;

1.12
date	95.12.15.13.15.07;	author matthew;	state Exp;
branches;
next	1.11;

1.11
date	95.12.14.14.17.28;	author matthew;	state Exp;
branches;
next	1.10;

1.10
date	95.12.06.17.16.23;	author matthew;	state Exp;
branches;
next	1.9;

1.9
date	95.11.21.11.11.07;	author matthew;	state Exp;
branches;
next	1.8;

1.8
date	95.11.14.13.57.32;	author matthew;	state Exp;
branches;
next	1.7;

1.7
date	95.09.19.14.02.45;	author matthew;	state Exp;
branches;
next	1.6;

1.6
date	95.09.04.13.10.17;	author matthew;	state Exp;
branches;
next	1.5;

1.5
date	95.08.31.10.12.07;	author matthew;	state Exp;
branches;
next	1.4;

1.4
date	95.08.25.10.28.25;	author matthew;	state Exp;
branches;
next	1.3;

1.3
date	95.08.15.11.27.36;	author matthew;	state Exp;
branches;
next	1.2;

1.2
date	95.08.11.08.36.49;	author matthew;	state Exp;
branches;
next	1.1;

1.1
date	95.08.03.12.54.47;	author matthew;	state Exp;
branches;
next	;

1.26.1.1
date	96.09.13.11.20.09;	author hope;	state Exp;
branches;
next	;

1.27.1.1
date	96.10.07.16.10.03;	author hope;	state Exp;
branches;
next	;

1.27.2.1
date	96.10.17.11.28.27;	author hope;	state Exp;
branches;
next	;

1.29.1.1
date	96.11.14.12.54.07;	author hope;	state Exp;
branches
	1.29.1.1.1.1;
next	;

1.29.1.1.1.1
date	96.11.28.15.05.01;	author hope;	state Exp;
branches;
next	;

1.29.2.1
date	96.11.22.18.12.55;	author hope;	state Exp;
branches;
next	;

1.29.3.1
date	96.12.17.09.57.42;	author hope;	state Exp;
branches;
next	;

1.29.4.1
date	96.12.17.17.51.24;	author hope;	state Exp;
branches
	1.29.4.1.1.1;
next	;

1.29.4.1.1.1
date	97.02.24.11.41.55;	author hope;	state Exp;
branches;
next	;

1.29.5.1
date	96.12.18.09.45.40;	author hope;	state Exp;
branches;
next	1.29.5.2;

1.29.5.2
date	96.12.18.14.12.06;	author johnh;	state Exp;
branches;
next	;

1.31.1.1
date	97.05.12.10.38.09;	author hope;	state Exp;
branches
	1.31.1.1.1.1
	1.31.1.1.2.1
	1.31.1.1.3.1;
next	;

1.31.1.1.1.1
date	97.07.28.18.23.20;	author daveb;	state Exp;
branches
	1.31.1.1.1.1.1.1;
next	;

1.31.1.1.1.1.1.1
date	97.10.07.11.49.03;	author jkbrook;	state Exp;
branches;
next	;

1.31.1.1.2.1
date	97.09.08.17.16.43;	author daveb;	state Exp;
branches;
next	;

1.31.1.1.3.1
date	97.09.09.14.12.47;	author daveb;	state Exp;
branches;
next	;

1.35.1.1
date	97.09.10.19.28.45;	author brucem;	state Exp;
branches;
next	;

1.35.2.1
date	97.09.11.20.58.42;	author daveb;	state Exp;
branches;
next	1.35.2.2;

1.35.2.2
date	97.09.12.14.48.42;	author johnh;	state Exp;
branches;
next	1.35.2.3;

1.35.2.3
date	97.11.20.16.11.42;	author johnh;	state Exp;
branches;
next	;


desc
@new unit
MS Windows GUI
@


1.38
log
@[Bug #30071]
Merge in Project Workspace changes.
@
text
@(*
 * $Log: windows.sml,v $
 * Revision 1.37  1997/10/21  14:52:08  johnh
 * [Bug #30059]
 * Implement combo boxes for create dialog.
 *
 * Revision 1.35.2.3  1997/11/20  16:11:42  johnh
 * [Bug #30071]
 * Generalise openFileDialog to take a description and a mask.
 *
 * Revision 1.35.2.2  1997/09/12  14:48:42  johnh
 * [Bug #30071]
 * Redesign Compilation Manager -> Project Workspace.
 * Implement dialog support functions.
 *
 * Revision 1.35  1997/09/05  14:31:31  johnh
 * [Bug #30241]
 * Implementing proper Find Dialog.
 *
 * Revision 1.34  1997/05/19  14:12:18  johnh
 * Implementing toolbar.
 *
 * Revision 1.33  1997/05/16  15:36:33  johnh
 * Implementing single menu bar on Windows.
 *
 * Revision 1.32  1997/05/01  12:50:02  jont
 * [Bug #30088]
 * Get rid of MLWorks.Option
 *
 * Revision 1.31  1997/03/25  17:25:40  johnh
 * [Bug #1992]
 * Added WM_CONTEXTMENU message value.
 *
 * Revision 1.30  1997/03/17  14:22:43  johnh
 * [Bug #1954]
 * Added WM_SIZING value (used by Capi.set_min_window_size).
 *
 * Revision 1.29  1996/11/06  18:53:39  daveb
 * [Bug #1718]
 * Removed extraneous comments, as users can see this file.
 *
 * Revision 1.28  1996/10/25  15:46:06  johnh
 * [Bug #1687]
 * Removed redundant isAltOn function.
 *
 * Revision 1.27  1996/09/30  13:43:53  johnh
 * [Bug #1621]
 * Added scrolling functionality to list box.
 *
 * Revision 1.26  1996/07/26  14:59:29  daveb
 * [Bug #1478]
 * Added WM_USER[0-5] messages.
 *
 * Revision 1.25  1996/06/18  13:16:13  daveb
 * Moved exception WindowSystemError here from _capi.
 * Added DEFAULT_GUI_FONT to stock_object datatype.
 * Added WM_INITDIALOG to message datatype.
 *
 * Revision 1.24  1996/06/13  11:23:55  daveb
 * Added WM_SYSCOMMAND, sc_value and convertScValue, and SW_RESTORE etc.
 *
 * Revision 1.23  1996/05/28  16:08:04  jont
 * add saveImageDailog
 *
 * Revision 1.22  1996/03/07  15:50:35  matthew
 * Adding new functionality
 *
 * Revision 1.21  1996/03/01  11:25:11  matthew
 * Extending library functions
 *
 * Revision 1.20  1996/02/27  17:13:33  matthew
 * More rationalization
 *
 * Revision 1.19  1996/02/14  11:26:37  matthew
 * Commenting and Rationalizing
 *
 * Revision 1.18  1996/02/02  15:03:32  matthew
 * Extending library functions
 *
 * Revision 1.17  1996/01/25  12:26:41  matthew
 * Adding get_bg_color etc.
 *
 * Revision 1.16  1996/01/12  16:35:29  matthew
 * Adding WM_SETREDRAW message
 *
 * Revision 1.15  1996/01/12  10:07:11  daveb
 * Added open_file_dialog, open_dir_dialog and save_as_dialog.
 *
 * Revision 1.14  1996/01/04  16:16:21  matthew
 * Adding get_stock_object
 *
 * Revision 1.13  1995/12/20  15:13:47  matthew
 * Adding color functions
 *
 * Revision 1.12  1995/12/15  13:15:07  matthew
 * Adding new window styles.
 *
 * Revision 1.11  1995/12/14  14:17:28  matthew
 * Changing message handling
 *
 * Revision 1.10  1995/12/06  17:16:23  matthew
 * Adding clipboard functionality
 *
 * Revision 1.9  1995/11/21  11:11:07  matthew
 * More stuff
 *
 * Revision 1.8  1995/11/14  13:57:32  matthew
 * Extending for graphics
 *
 * Revision 1.7  1995/09/19  14:02:45  matthew
 * Adding DeleteMenu etc.
 *
 * Revision 1.6  1995/09/04  13:10:17  matthew
 * Adding word_to_signed_int
 *
 * Revision 1.5  1995/08/31  10:12:07  matthew
 * Adding extra menu functions
 *
 * Revision 1.4  1995/08/25  10:28:25  matthew
 * More stuff
 *
 * Revision 1.3  1995/08/15  11:27:36  matthew
 * Extending
 *
 * Revision 1.2  1995/08/11  08:36:49  matthew
 * Making it all work
 *
 * Revision 1.1  1995/08/03  12:54:47  matthew
 * new unit
 * MS Windows GUI
 *
 *)

signature WINDOWS =
  sig

    (* Types *)
    eqtype hwnd 
    eqtype hmenu
    eqtype word

    (* Expose the constructors to allow easy conversion *)
    datatype accelerator_table = ACCELERATOR_TABLE of word
    datatype wparam = WPARAM of word
    datatype lparam = LPARAM of word
    datatype hdc = HDC of word
    datatype rect = RECT of {left:int,top:int,right:int,bottom:int}
    datatype point = POINT of {x:int,y:int}
    datatype color = COLOR of word
    datatype cursor = CURSOR of word

    exception WindowSystemError of string

    datatype message =
      BM_GETCHECK |
      BM_GETSTATE |
      BM_SETCHECK |
      BM_SETSTATE |
      BM_SETSTYLE |
      
      BN_CLICKED |
      BN_DISABLE |
      BN_DOUBLECLICKED |
      BN_HILITE |
      BN_PAINT |
      BN_UNHILITE |

      CBN_CLOSEUP |
      CBN_DBLCLK |
      CBN_DROPDOWN |
      CBN_EDITCHANGE |
      CBN_EDITUPDATE |
      CBN_ERRSPACE |
      CBN_KILLFOCUS |
      CBN_SELCHANGE |
      CBN_SELENDCANCEL |
      CBN_SELENDOK |
      CBN_SETFOCUS |

      CB_ADDSTRING |
      CB_DELETESTRING |
      CB_DIR |
      CB_FINDSTRING |
      CB_FINDSTRINGEXACT |
      CB_GETCOUNT |
      CB_GETCURSEL |
      CB_GETDROPPEDCONTROLRECT |
      CB_GETDROPPEDSTATE |
      CB_GETDROPPEDWIDTH |
      CB_GETEDITSEL |
      CB_GETEXTENDEDUI |
      CB_GETHORIZONTALEXTENT |
      CB_GETITEMDATA |
      CB_GETITEMHEIGHT |
      CB_GETLBTEXT |
      CB_GETLBTEXTLEN |
      CB_GETLOCALE |
      CB_GETTOPINDEX |
      CB_INITSTORAGE |
      CB_INSERTSTRING |
      CB_LIMITTEXT |
      CB_RESETCONTENT |
      CB_SELECTSTRING |
      CB_SETCURSEL |
      CB_SETDROPPEDWIDTH |
      CB_SETEDITSEL |
      CB_SETEXTENDEDUI |
      CB_SETHORIZONTALEXTENT |
      CB_SETITEMDATA |
      CB_SETITEMHEIGHT |
      CB_SETLOCALE |
      CB_SETTOPINDEX |
      CB_SHOWDROPDOWN |

      DM_GETDEFID |
      DM_SETDEFID |
      
      EM_CANUNDO |
      EM_EMPTYUNDOBUFFER |
      EM_FMTLINES |
      EM_GETFIRSTVISIBLELINE |
      EM_GETHANDLE |
      EM_GETLINE |
      EM_GETLINECOUNT |
      EM_GETMODIFY |
      EM_GETPASSWORDCHAR |
      EM_GETRECT |
      EM_GETSEL |
      EM_GETWORDBREAKPROC |
      EM_LIMITTEXT |
      EM_LINEFROMCHAR |
      EM_LINEINDEX |
      EM_LINELENGTH |
      EM_LINESCROLL |
      EM_REPLACESEL |
      EM_SCROLL |
      EM_SCROLLCARET |
      EM_SETHANDLE |
      EM_SETMODIFY |
      EM_SETPASSWORDCHAR |
      EM_SETREADONLY |
      EM_SETRECT |
      EM_SETRECTNP |
      EM_SETSEL |
      EM_SETTABSTOPS |
      EM_SETWORDBREAKPROC |
      EM_UNDO |
      EN_CHANGE |
      EN_ERRSPACE |
      EN_HSCROLL |
      EN_KILLFOCUS |
      EN_MAXTEXT |
      EN_SETFOCUS |
      EN_UPDATE |
      EN_VSCROLL |

      FINDMSGSTRING |

      LBN_DBLCLK |
      LBN_ERRSPACE |
      LBN_KILLFOCUS |
      LBN_SELCANCEL |
      LBN_SELCHANGE |
      LBN_SETFOCUS |
      
      LB_ADDFILE |
      LB_ADDSTRING |
      LB_DELETESTRING |
      LB_DIR |
      LB_FINDSTRING |
      LB_FINDSTRINGEXACT |
      LB_GETANCHORINDEX |
      LB_GETCARETINDEX |
      LB_GETCOUNT |
      LB_GETCURSEL |
      LB_GETHORIZONTALEXTENT |
      LB_GETITEMDATA |
      LB_GETITEMHEIGHT |
      LB_GETITEMRECT |
      LB_GETLOCALE |
      LB_GETSEL |
      LB_GETSELCOUNT |
      LB_GETSELITEMS |
      LB_GETTEXT |
      LB_GETTEXTLEN |
      LB_GETTOPINDEX |
      LB_INSERTSTRING |
      LB_RESETCONTENT |
      LB_SELECTSTRING |
      LB_SELITEMRANGE |
      LB_SELITEMRANGEEX |
      LB_SETANCHORINDEX |
      LB_SETCARETINDEX |
      LB_SETCOLUMNWIDTH |
      LB_SETCOUNT |
      LB_SETCURSEL |
      LB_SETHORIZONTALEXTENT |
      LB_SETITEMDATA |
      LB_SETITEMHEIGHT |
      LB_SETLOCALE |
      LB_SETSEL |
      LB_SETTABSTOPS |
      LB_SETTOPINDEX |
      
      TB_GETSTATE |
      TB_SETSTATE |

      WM_ACTIVATE |
      WM_ACTIVATEAPP |
      WM_CANCELMODE |
      WM_CHAR |
      WM_CHARTOITEM |
      WM_CHILDACTIVATE |
      WM_CLOSE |
      WM_COMMAND |
      WM_CONTEXTMENU |
      WM_COPY |
      WM_COPYDATA |
      WM_CUT |
      WM_CREATE |
      WM_CTLCOLORBTN |
      WM_CTLCOLOREDIT |
      WM_DEADCHAR |
      WM_DESTROY |
      WM_ENABLE |
      WM_ENDSESSION |
      WM_ERASEBKGND |
      WM_GETFONT |
      WM_GETMINMAXINFO |
      WM_GETTEXT |
      WM_GETTEXTLENGTH |
      WM_HSCROLL |
      WM_HOTKEY |
      WM_INITDIALOG |
      WM_INITMENU |
      WM_KEYDOWN |
      WM_KEYUP |
      WM_KILLFOCUS |
      WM_LBUTTONDBLCLK |
      WM_LBUTTONDOWN |
      WM_LBUTTONUP |
      WM_MBUTTONDBLCLK |
      WM_MBUTTONDOWN |
      WM_MBUTTONUP |
      WM_MOUSEACTIVATE |
      WM_MOUSEMOVE |
      WM_MOVE |
      WM_NCACTIVATE |
      WM_NCCALCSIZE |
      WM_NCCREATE |
      WM_NCDESTROY |
      WM_NCHITTEST |
      WM_NCLBUTTONDBLCLK |
      WM_NCLBUTTONDOWN |
      WM_NCLBUTTONUP |
      WM_NCMBUTTONDBLCLK |
      WM_NCMBUTTONDOWN |
      WM_NCMBUTTONUP |
      WM_NCMOUSEMOVE |
      WM_NCRBUTTONDBLCLK |
      WM_NCRBUTTONDOWN |
      WM_NCRBUTTONUP |
      WM_NOTIFY |
      WM_PAINT |
      WM_PARENTNOTIFY |
      WM_PASTE |
      WM_POWER |
      WM_QUERYENDSESSION |
      WM_QUERYOPEN |
      WM_QUEUESYNC |
      WM_QUIT |
      WM_RBUTTONDBLCLK |
      WM_RBUTTONDOWN |
      WM_RBUTTONUP |
      WM_SETCURSOR | 
      WM_SETFOCUS |
      WM_SETFONT |
      WM_SETREDRAW |
      WM_SETTEXT |
      WM_SHOWWINDOW |
      WM_SIZE |
      WM_SIZING |
      WM_SYSCHAR |
      WM_SYSCOMMAND |
      WM_SYSDEADCHAR |
      WM_SYSKEYDOWN |
      WM_SYSKEYUP |
      WM_UNDO |
      WM_VSCROLL |
      WM_WINDOWPOSCHANGED |
      WM_WINDOWPOSCHANGING |

      WM_USER0 |
      WM_USER1 |
      WM_USER2 |
      WM_USER3 |
      WM_USER4 |
      WM_USER5


    datatype window_style =
      BS_3STATE |
      BS_AUTO3STATE |
      BS_AUTOCHECKBOX |
      BS_AUTORADIOBUTTON |
      BS_CHECKBOX |
      BS_DEFPUSHBUTTON |
      BS_GROUPBOX |
      BS_LEFTTEXT |
      BS_OWNERDRAW |
      BS_PUSHBUTTON |
      BS_RADIOBUTTON |
      BS_USERBUTTON |

      CBS_AUTOHSCROLL |
      CBS_DISABLENOSCROLL |
      CBS_DROPDOWN |
      CBS_DROPDOWNLIST |
      CBS_HASSTRINGS |
      CBS_NOINTEGRALHEIGHT |
      CBS_OEMCONVERT |
      CBS_OWNERDRAWFIXED |
      CBS_OWNERDRAWVARIABLE |
      CBS_SIMPLE |
      CBS_SORT |

      DS_ABSALIGN |
      DS_LOCALEDIT |
      DS_MODALFRAME |
      DS_NOIDLEMSG |
      DS_SETFONT |
      DS_SETFOREGROUND |
      DS_SYSMODAL |

      ES_AUTOHSCROLL |
      ES_AUTOVSCROLL |
      ES_CENTER |
      ES_LEFT |
      ES_LOWERCASE |
      ES_MULTILINE |
      ES_NOHIDESEL |
      ES_OEMCONVERT |
      ES_PASSWORD |
      ES_READONLY |
      ES_RIGHT |
      ES_UPPERCASE |
      ES_WANTRETURN |

      LBS_DISABLENOSCROLL |
      LBS_EXTENDEDSEL |
      LBS_HASSTRINGS |
      LBS_MULTICOLUMN |
      LBS_MULTIPLESEL |
      LBS_NODATA |
      LBS_NOINTEGRALHEIGHT |
      LBS_NOREDRAW |
      LBS_NOTIFY |
      LBS_OWNERDRAWFIXED |
      LBS_OWNERDRAWVARIABLE |
      LBS_SORT |
      LBS_STANDARD |
      LBS_USETABSTOPS |
      LBS_WANTKEYBOARDINPUT |

      SBS_BOTTOMALIGN |
      SBS_HORZ |
      SBS_LEFTALIGN |
      SBS_RIGHTALIGN |
      SBS_SIZEBOX |
      SBS_SIZEBOXBOTTOMRIGHTALIGN |
      SBS_SIZEBOXTOPLEFTALIGN |
      SBS_TOPALIGN |
      SBS_VERT |

      SS_BLACKFRAME |
      SS_BLACKRECT |
      SS_CENTER |
      SS_GRAYFRAME |
      SS_GRAYRECT |
      SS_ICON |
      SS_LEFT |
      SS_LEFTNOWORDWRAP |
      SS_NOPREFIX |
      SS_RIGHT |
      SS_SIMPLE |
      SS_WHITEFRAME |
      SS_WHITERECT |

      TBSTYLE_ALTDRAG  |
      TBSTYLE_TOOLTIPS |
      TBSTYLE_WRAPABLE |

      WS_BORDER |
      WS_CAPTION |
      WS_CHILD |
      WS_CLIPCHILDREN |
      WS_CLIPSIBLINGS |
      WS_DISABLED |
      WS_DLGFRAME |
      WS_GROUP |
      WS_HSCROLL |
      WS_ICONIC |
      WS_MAXIMIZE |
      WS_MAXIMIZEBOX |
      WS_MINIMIZE |
      WS_MINIMIZEBOX |
      WS_OVERLAPPED |
      WS_OVERLAPPED_WINDOW |
      WS_POPUP |
      WS_POPUPWINDOW |
      WS_SYSMENU |
      WS_TABSTOP |
      WS_THICKFRAME |
      WS_TILEDWINDOW |
      WS_VISIBLE |
      WS_VSCROLL

    datatype sw_arg =
      SW_HIDE |
      SW_MAXIMIZE |
      SW_MINIMIZE |
      SW_RESTORE |
      SW_SHOW |
      SW_SHOWDEFAULT |
      SW_SHOWMAXIMIZED |
      SW_SHOWMINIMIZED |
      SW_SHOWMINNOACTIVE |
      SW_SHOWNA |
      SW_SHOWNOACTIVE |
      SW_SHOWNORMAL

    datatype gw_arg =
      GW_CHILD |
      GW_HWNDFIRST |
      GW_HWNDLAST |
      GW_HWNDNEXT |
      GW_HWNDPREV |
      GW_OWNER

    datatype gwl_value =
      DWL_DLGPROC |
      DWL_MSGRESULT |
      DWL_USER |

      GWL_EXSTYLE |
      GWL_HINSTANCE |
      GWL_HWNDPARENT | 
      GWL_ID | 
      GWL_USERDATA |
      GWL_WNDPROC

    datatype sb_value =
      SB_BOTH |
      SB_BOTTOM |
      SB_CTL |
      SB_ENDSCROLL |
      SB_HORZ |
      SB_LINEDOWN |
      SB_LINELEFT |
      SB_LINERIGHT |
      SB_LINEUP |
      SB_PAGEDOWN |
      SB_PAGELEFT |
      SB_PAGERIGHT |
      SB_PAGEUP |
      SB_THUMBPOSITION |
      SB_THUMBTRACK |
      SB_TOP |
      SB_VERT

    datatype esb_value =
      ESB_DISABLE_BOTH
    | ESB_DISABLE_DOWN
    | ESB_DISABLE_LEFT
    | ESB_DISABLE_LTUP
    | ESB_DISABLE_RIGHT
    | ESB_DISABLE_RTDN
    | ESB_DISABLE_UP
    | ESB_ENABLE_BOTH

    datatype sc_value =
      SC_CLOSE
    | SC_CONTEXTHELP
    | SC_DEFAULT
    | SC_HOTKEY
    | SC_HSCROLL
    | SC_KEYMENU
    | SC_MAXIMIZE
    | SC_MINIMIZE
    | SC_MOUSEMENU
    | SC_MOVE
    | SC_NEXTWINDOW
    | SC_PREVWINDOW
    | SC_RESTORE
    | SC_SCREENSAVE
    | SC_SIZE
    | SC_TASKLIST
    | SC_VSCROLL

    datatype wa_value = 
      WA_ACTIVE |
      WA_CLICKACTIVE |
      WA_INACTIVE

    datatype menu_value = SUBMENU of hmenu | ITEM of word

    datatype menu_flag =
      MF_BITMAP |
      MF_BYCOMMAND |
      MF_BYPOSITION |
      MF_CHECKED |
      MF_DISABLED |
      MF_ENABLED |
      MF_GRAYED |
      MF_MENUBARBREAK |
      MF_MENUBREAK |
      MF_OWNERDRAW |
      MF_POPUP |
      MF_SEPARATOR |
      MF_STRING |
      MF_UNCHECKED

    (* Miscellaneous conversion functions *)
    val windowToWord : hwnd -> word
    val menuToWord : hmenu -> word
    val intToWord : int -> word
    val nullWord : word

    val nullWindow : hwnd
    val isNullWindow : hwnd -> bool

    val mainLoop : unit -> unit
    val mainInit : unit -> hwnd
    val doInput : unit -> bool (* Returns true if the application terminates *)
    val convertWaValue : wa_value -> int
    val convertSbValue : sb_value -> int
    val convertScValue : sc_value -> int
    val newControlId : unit -> word

    (* Ch. 1 Windows Functions *)
    val anyPopup : unit -> bool
    val bringWindowToTop : hwnd -> unit
    val childWindowFromPoint : hwnd * (int * int) -> hwnd
    val closeWindow : hwnd -> unit
    val createWindow : {class: string,
                        name: string,
                        styles : window_style list,
                        width : int,
                        height : int,
                        parent : hwnd,
                        menu : word} -> 
                        hwnd
    val destroyWindow : hwnd -> unit
    val enumChildWindows : hwnd * (hwnd -> unit) -> unit
    val enumWindows : (hwnd -> unit) -> unit
    val findWindow : string * string -> hwnd
    val getClientRect : hwnd -> rect
    val getDesktopWindow : unit-> hwnd
    val getForegroundWindow : unit-> hwnd
    val getLastActivePopup : hwnd -> hwnd
    val getNextWindow : hwnd * gw_arg -> hwnd
    val getParent : hwnd -> hwnd
    val getTopWindow : hwnd -> hwnd
    val getWindow : hwnd * gw_arg -> hwnd
    val getWindowRect : hwnd -> rect
    val getWindowPlacement : hwnd -> int * point * point * rect
    val isChild : hwnd * hwnd -> bool
    val isIconic : hwnd -> bool
    val isWindow : hwnd -> bool
    val isWindowUnicode : hwnd -> bool
    val isWindowVisible : hwnd -> bool
    val isZoomed : hwnd -> bool
    val moveWindow : hwnd * int * int * int * int * bool -> unit
    val setForegroundWindow : hwnd -> unit
    val setParent : hwnd * hwnd -> hwnd
    val setWindowText : hwnd * string -> unit
    val setWindowPos : hwnd * {x: int, y: int, height: int, width: int} -> unit
    val showOwnedPopups : hwnd * bool -> unit
    val showWindow : hwnd * sw_arg -> unit
    val updateWindow : hwnd -> unit
    val windowFromPoint : int * int -> hwnd

    val getMinMaxInfo : word -> point * point * point * point
    val setMinMaxInfo : word * point * point * point * point -> word

    (* Ch 2. Messages *)
    val getInputState : unit -> bool
    val getMessagePos : unit -> int * int 
    val getMessageTime : unit -> int
    val inSendMessage : unit -> bool
    val postMessage : hwnd * message * wparam * lparam -> unit
    val postQuitMessage : int -> unit
    val sendMessage : hwnd * message * wparam * lparam -> word 
    val messageToWord : message -> word

    (* Ch. 3 Window Classes *)

    val getWindowLong : hwnd * gwl_value -> word
    val setWindowLong : hwnd * gwl_value * word -> word

    (* Ch. 4 Window Procedures *)

    (* Ch. 5 Keyboard Input *)

    val enableWindow : hwnd * bool -> bool
    val getActiveWindow  : unit -> hwnd
    val getFocus : unit -> hwnd
    val isWindowEnabled : hwnd -> bool
    val setActiveWindow  : hwnd -> hwnd
    val setFocus : hwnd -> hwnd

    (* Ch. 6 Mouse Input *)

    val getCapture : unit -> hwnd
    val releaseCapture : unit -> unit
    val setCapture : hwnd -> hwnd

    (* Ch. 7 Timers *)

    type timer
    val killTimer : hwnd * timer -> unit
    val setTimer : hwnd * 
                   int (* timeout, ms *) * 
                   (unit -> unit) -> timer


    (* Ch, 10 Buttons *)

    val checkDlgButton: hwnd * word * int -> unit
    val checkRadioButton: hwnd * word * word * word -> unit
    val isDlgButtonChecked: hwnd * word -> int;

    (* Ch. 14 Scroll Bars *)

    val enableScrollBar : hwnd * sb_value * esb_value -> unit
    val getScrollPos : hwnd * sb_value -> int
    val getScrollRange : hwnd * sb_value -> int * int
    val setScrollPos : hwnd * sb_value * int * bool -> unit
    val setScrollRange : hwnd * sb_value * int * int * bool -> unit
    val showScrollBar : hwnd * sb_value * bool -> unit
    val getScrollInfo : hwnd * sb_value -> int * word * word * int * int * word * int * int 

    (* Ch. 16 Menus *)
    val appendMenu: hmenu * menu_flag list * menu_value * string -> unit
    val checkMenuItem : hmenu * word * menu_flag list -> unit
    val createMenu : unit -> hmenu
    val createPopupMenu : unit -> hmenu
    val destroyMenu : hmenu -> unit
    val deleteMenu : hmenu * word * menu_flag -> unit
    val drawMenuBar : hwnd -> unit
    val enableMenuItem : hmenu * word * menu_flag list -> unit
    val getMenu : hwnd -> hmenu
    val getMenuItemId : hmenu * int -> word
    val getMenuItemCount : hmenu -> int
    val getMenuState : hmenu * word * menu_flag -> menu_flag list
    val getMenuString : hmenu * word * menu_flag -> string
    val getSubmenu : hmenu * int -> hmenu
    val getSystemMenu : hwnd * bool -> hmenu
    val setMenu : hwnd * hmenu -> unit
    val removeMenu : hmenu * word * menu_flag -> unit

    (* Ch. 17 Keyboard Accelerators *)

    datatype accelerator_flag =
      FALT
    | FCONTROL
    | FNOINVERT
    | FSHIFT
    | FVIRTKEY

    (* First int is the key, the second is the command identifier *)
    val createAcceleratorTable : (accelerator_flag list * int * int) list -> accelerator_table
    val destroyAcceleratorTable : accelerator_table -> unit


    (* Ch. 18 Dialog Boxes *)

    datatype message_box_style =
      MB_ABORTRETRYIGNORE |
      MB_APPLMODAL |
      MB_ICONASTERISK |
      MB_ICONEXCLAMATION |
      MB_ICONHAND |
      MB_ICONINFORMATION |
      MB_ICONQUESTION |
      MB_ICONSTOP |
      MB_OK |
      MB_OKCANCEL |
      MB_RETRYCANCEL |
      MB_YESNO |
      MB_YESNOCANCEL

    val messageBox : hwnd * string * string * message_box_style list -> int

    val endDialog : hwnd * int -> unit
    val getDlgItem : hwnd * word -> hwnd
    val getDlgCtrlID : hwnd -> int

    val getDialogBaseUnits : unit -> word

    val getFindFlags : word -> {searchStr: string,
             searchDown: bool,
             matchCase: bool,
             wholeWord: bool,
             findNext: bool,
	     closing: bool}
    val findDialog : hwnd * string * bool option * bool option * bool option -> hwnd

    (* Ch. 20 Painting and drawing *)
    val getBkColor : hdc -> color
    val setBkColor : hdc * color -> color
    val validateRect : hwnd * rect option -> unit
    val invalidateRect : hwnd * rect option * bool -> unit
    val windowFromDC : hdc -> hwnd
    val setPixel : hdc * int * int * color -> color 

    datatype rop2_mode =
      R2_BLACK |
      R2_COPYPEN |
      R2_MASKNOTPEN |
      R2_MASKPEN |
      R2_MASKPENNOT |
      R2_MERGENOTPEN |
      R2_MERGEPEN |
      R2_MERGEPENNOT |
      R2_NOP |
      R2_NOT |
      R2_NOTCOPYPEN |
      R2_NOTMASKPEN |
      R2_NOTMERGEPEN |
      R2_NOTXORPEN |
      R2_WHITE |
      R2_XORPEN

    val getRop2 : hdc -> rop2_mode
    val setRop2 : hdc * rop2_mode -> rop2_mode

    datatype rop_mode =
      BLACKNESS |
      DSTINVERT |
      MERGECOPY |
      MERGEPAINT |
      NOTSRCCOPY |
      NOTSRCERASE |
      PATCOPY |
      PATINVERT |
      PATPAINT |
      SRCAND |
      SRCCOPY |
      SRCERASE |
      SRCINVERT |
      SRCPAINT |
      WHITENESS
      
    (* Ch. 21 Cursors *)

    datatype cursor_shape = 
      IDC_APPSTARTING |
      IDC_ARROW |
      IDC_CROSS |
      IDC_IBEAM |
      IDC_ICON |
      IDC_NO |
      IDC_SIZE |
      IDC_SIZEALL |
      IDC_SIZENESW |
      IDC_SIZENS |
      IDC_SIZEWE |
      IDC_UPARROW |
      IDC_WAIT

    val clipCursor : rect option -> unit
    val getClipCursor : unit -> rect
    val getCursorPos : unit -> point
    val setCursorPos : int * int -> unit
    val showCursor : bool -> int
    val loadCursor : cursor_shape -> cursor
    val setCursor : cursor -> cursor

    (* Ch. 25 Clipboard *)

    val openClipboard : hwnd -> bool
    val closeClipboard : unit -> unit
    val emptyClipboard : unit -> unit
    val setClipboardData : string -> unit
    val getClipboardData : unit -> string

    (* Ch. 28 Device contexts *)

    datatype object = OBJECT of word
    datatype hbrush = HBRUSH of word
    datatype hpen = HPEN of word

    datatype object_type = 
      OBJ_PEN | 
      OBJ_BRUSH |
      OBJ_PAL |
      OBJ_FONT |
      OBJ_BITMAP

    datatype stock_object =
      ANSI_FIXED_FONT |
      ANSI_VAR_FONT |
      BLACK_BRUSH |
      BLACK_PEN |
      DEFAULT_GUI_FONT |
      DEFAULT_PALETTE |
      DKGRAY_BRUSH |
      GRAY_BRUSH |
      HOLLOW_BRUSH |
      LTGRAY_BRUSH |
      NULL_BRUSH |
      NULL_PEN |
      OEM_FIXED_FONT |
      SYSTEM_FIXED_FONT |
      SYSTEM_FONT |
      WHITE_BRUSH |
      WHITE_PEN

    val cancelDC : hdc -> unit 
    val createCompatibleDC : hdc -> hdc
    val deleteObject : object -> unit
    val getCurrentObject : hdc * object_type -> object
    val getDC : hwnd -> hdc
    val getDCOrgEx : hdc -> point
    val getStockObject : stock_object -> object
    val releaseDC : hwnd * hdc -> unit
    val restoreDC : hdc * int -> unit
    val saveDC : hdc -> int
    val selectObject : hdc * object -> object

    (* Ch. 29 Bitmaps *)
    val bitBlt : hdc * int * int * int *int * hdc * int * int * rop_mode -> unit

    (* Ch. 30 Brushes *)

    datatype hatch_style =
      HS_BDIAGONAL
    | HS_CROSS
    | HS_DIAGCROSS
    | HS_FDIAGONAL
    | HS_HORIZONTAL
    | HS_VERTICAL
      
    val createHatchBrush : hatch_style * color -> hbrush
    val createSolidBrush : color -> hbrush

    (* Ch. 31 Pens *)

    datatype pen_style =
      PS_DASH |
      PS_DASHDOT |
      PS_DASHDOTDOT |
      PS_DOT |
      PS_NULL |
      PS_SOLID |
      PS_INSIDEFRAME

    val createPen : pen_style * int * color -> hpen

    (* Ch. 33 Lines and curves *)
    datatype arc_direction = AD_COUNTERCLOCKWISE | AD_CLOCKWISE

    val angleArc : hdc * int * int * int * real * real -> unit
    val arc : hdc * int * int * int * int * int * int * int * int -> unit
    val arcTo : hdc * int * int * int * int * int * int * int * int -> unit
    val getArcDirection : hdc -> arc_direction
    val lineTo : hdc * int * int -> unit
    val moveTo : hdc * int * int * word -> unit
    val polyBezier : hdc * point list -> unit
    val polyBezierTo : hdc * point list -> unit
    val polyline : hdc * point list -> unit
    val polylineTo : hdc * point list -> unit
    val polyPolyline : hdc * point list list -> unit
    val setArcDirection : hdc * arc_direction -> unit

    (* Ch. 34 Filled Shapes *)
    val chord : hdc * int * int * int * int * int * int * int * int -> unit
    val ellipse : hdc * int * int * int * int -> unit
    val fillRect : hdc * rect * hbrush -> unit
    val frameRect : hdc * rect * hbrush -> unit
    val invertRect : hdc * rect -> unit
    val pie : hdc * int * int * int * int * int * int * int * int -> unit
    val polygon : hdc * point list -> unit
    val polyPolygon : hdc * point list list -> unit
    val rectangle : hdc * int * int * int * int -> unit
    val roundRect : hdc * int * int * int * int * int * int -> unit

    (* Ch. 35 Fonts and text *)
    val getTextColor : hdc -> color
    val getTextExtentPoint : hdc * string -> int * int
    val setTextColor : hdc * color -> color
    val	textOut : hdc * int * int * string -> unit

    (* Ch. 39 Coordinate Spaces & Transformations *)
    val clientToScreen : hwnd * point -> point
    val screenToClient : hwnd * point -> point

    (* Book Two stuff *)

    val messageBeep : message_box_style -> unit

    (* Toolbars *)

    datatype tb_button_state = 
      TBSTATE_CHECKED |
      TBSTATE_ENABLED |
      TBSTATE_HIDDEN |
      TBSTATE_INDETERMINATE |
      TBSTATE_PRESSED |
      TBSTATE_WRAP

    val tbStatesToWord : tb_button_state list -> word

    datatype tb_button_style = 
      TBSTYLE_BUTTON |
      TBSTYLE_CHECK |
      TBSTYLE_CHECKGROUP |
      TBSTYLE_GROUP |
      TBSTYLE_SEP

    val createToolbarEx : 
	{bmp_id: word,
	 buttons: (int * word * tb_button_state list * tb_button_style list * word * int) list,
	 num_bmps: int,
	 num_buttons: int,
	 parent: hwnd,
	 styles: window_style list,
	 toolbar_id: word,
	 x_bitmap: int,
	 x_button: int,
	 y_bitmap: int,
	 y_button: int} -> hwnd

    (* System information *)
    datatype color_spec =
      COLOR_ACTIVEBORDER |
      COLOR_ACTIVECAPTION |
      COLOR_APPWORKSPACE |
      COLOR_BACKGROUND |
      COLOR_BTNSHADOW |
      COLOR_BTNTEXT |
      COLOR_CAPTIONTEXT |
      COLOR_GRAYTEXT |
      COLOR_HIGHLIGHT |
      COLOR_HIGHLIGHTTEXT |
      COLOR_INACTIVEBORDER |
      COLOR_INACTIVECAPTION |
      COLOR_INACTIVECAPTIONTEXT |
      COLOR_MENU |
      COLOR_SCROLLBAR |
      COLOR_WINDOW |
      COLOR_WINDOWFRAME |
      COLOR_WINDOWTEXT

    val getSysColor : color_spec -> color

    val openFileDialog : hwnd * string * string -> string
    val openDirDialog : hwnd -> string
    val saveDialog : hwnd * string * string -> string

    (* MLWorks Specific functions *)
    val setAcceleratorTable : accelerator_table -> unit

    (* Register dialogs for keyboard traversal *)
    val registerPopupWindow : hwnd -> unit
    val unregisterPopupWindow : hwnd -> unit

    (* WINDOW PROCEDURES *)

    val addMessageHandler : 
      hwnd * message *
      (wparam * lparam -> word option) -> unit

    (* The word is a C window procedure *)
    val addNewWindow : hwnd * word -> unit

    val removeWindow : hwnd -> unit

    (* Returns the address of the standard ML window procedure *)
    val getMlWindowProc : unit -> word

    val addCommandHandler : hwnd * word * (hwnd * int -> unit) -> unit

    (* MISC *)
    val malloc : int -> word
    val free : word -> unit
    val wordToString : word -> string
    val wordToInt : word -> int
    val wordToSignedInt : word -> int
    val setByte : word * int * int -> unit
    val makeCString : string -> word (* malloc and copy *)
    val hiword : word -> int
    val loword : word -> int
  end
@


1.37
log
@[Bug #30059]
Implement combo boxes for create dialog.
@
text
@d3 13
d150 1
d375 1
d797 1
d856 16
d877 2
d1058 1
a1058 1
    val openFileDialog : hwnd * string -> string
d1060 1
a1060 2
    val saveAsDialog : hwnd -> string
    val saveImageDialog : hwnd -> string
@


1.36
log
@[Bug #30193]
Implement SetWindowPos.
@
text
@d153 48
a200 1
      
@


1.35
log
@[Bug #30241]
Implementing proper Find Dialog.
@
text
@d3 4
d615 1
@


1.35.2.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a2 4
 * Revision 1.35  1997/09/05  14:31:31  johnh
 * [Bug #30241]
 * Implementing proper Find Dialog.
 *
@


1.35.2.2
log
@[Bug #30071]
Redesign Compilation Manager -> Project Workspace.
Implement dialog support functions.
@
text
@a733 1
    val getDlgCtrlID : hwnd -> int
d978 2
a979 1
    val saveDialog : hwnd * string * string -> string
@


1.35.2.3
log
@[Bug #30071]
Generalise openFileDialog to take a description and a mask.
@
text
@a2 5
 * Revision 1.35.2.2  1997/09/12  14:48:42  johnh
 * [Bug #30071]
 * Redesign Compilation Manager -> Project Workspace.
 * Implement dialog support functions.
 *
a136 1
    datatype cursor = CURSOR of word
a313 1
      WM_SETCURSOR | 
a792 16

    datatype cursor_shape = 
      IDC_APPSTARTING |
      IDC_ARROW |
      IDC_CROSS |
      IDC_IBEAM |
      IDC_ICON |
      IDC_NO |
      IDC_SIZE |
      IDC_SIZEALL |
      IDC_SIZENESW |
      IDC_SIZENS |
      IDC_SIZEWE |
      IDC_UPARROW |
      IDC_WAIT

a797 2
    val loadCursor : cursor_shape -> cursor
    val setCursor : cursor -> cursor
d977 1
a977 1
    val openFileDialog : hwnd * string * string -> string
@


1.35.1.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a2 4
 * Revision 1.35  1997/09/05  14:31:31  johnh
 * [Bug #30241]
 * Implementing proper Find Dialog.
 *
@


1.34
log
@Implementing toolbar.
@
text
@d3 3
d192 2
d733 7
@


1.33
log
@Implementing single menu bar on Windows.
@
text
@d3 3
d235 3
d293 1
d418 4
d904 32
@


1.32
log
@[Bug #30088]
Get rid of MLWorks.Option
@
text
@d3 4
d518 5
d553 1
d584 1
d599 3
@


1.31
log
@[Bug #1992]
Added WM_CONTEXTMENU message value.
@
text
@d3 4
d13 1
a13 1
 * Removed extraneous comments befo, as users can see this file.
d707 2
a708 2
    val validateRect : hwnd * rect MLWorks.Option.option -> unit
    val invalidateRect : hwnd * rect MLWorks.Option.option * bool -> unit
d751 1
a751 1
    val clipCursor : rect MLWorks.Option.option -> unit
d919 1
a919 1
      (wparam * lparam -> word MLWorks.Option.option) -> unit
@


1.31.1.1
log
@branched from 1.31
@
text
@a2 4
 * Revision 1.31  1997/03/25  17:25:40  johnh
 * [Bug #1992]
 * Added WM_CONTEXTMENU message value.
 *
@


1.31.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a2 3
 * Revision 1.31.1.1  1997/05/12  10:38:09  hope
 * branched from 1.31
 *
@


1.31.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a2 3
 * Revision 1.31.1.1  1997/05/12  10:38:09  hope
 * branched from 1.31
 *
@


1.31.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a2 3
 * Revision 1.31.1.1  1997/05/12  10:38:09  hope
 * branched from 1.31
 *
@


1.31.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a2 3
 * Revision 1.31.1.1.1.1  1997/07/28  18:23:20  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.30
log
@[Bug #1954]
Added WM_SIZING value (used by Capi.set_min_window_size).
@
text
@d3 4
d232 1
@


1.29
log
@[Bug #1718]
Removed extraneous comments befo, as users can see this file.
@
text
@d3 4
d291 1
@


1.29.5.1
log
@branched from 1.29
@
text
@a2 4
 * Revision 1.29  1996/11/06  18:53:39  daveb
 * [Bug #1718]
 * Removed extraneous comments befo, as users can see this file.
 *
@


1.29.5.2
log
@Implemented CreateToolbarEx including the extra styles.
@
text
@a2 3
 * Revision 1.29.5.1  1996/12/18  09:45:40  hope
 * branched from 1.29
 *
a219 3
      TB_GETSTATE |
      TB_SETSTATE |

a273 1
      WM_NOTIFY |
a396 4
      TBSTYLE_ALTDRAG  |
      TBSTYLE_TOOLTIPS |
      TBSTYLE_WRAPABLE |

a868 32

    (* Toolbars *)

    datatype tb_button_state = 
      TBSTATE_CHECKED |
      TBSTATE_ENABLED |
      TBSTATE_HIDDEN |
      TBSTATE_INDETERMINATE |
      TBSTATE_PRESSED |
      TBSTATE_WRAP

    val tbStateToWord : tb_button_state -> word

    datatype tb_button_style = 
      TBSTYLE_BUTTON |
      TBSTYLE_CHECK |
      TBSTYLE_CHECKGROUP |
      TBSTYLE_GROUP |
      TBSTYLE_SEP

    val createToolbarEx : 
	{bmp_id: word,
	 buttons: (int * int * tb_button_state list * tb_button_style list * word * int) list,
	 num_bmps: int,
	 num_buttons: int,
	 parent: hwnd,
	 styles: window_style list,
	 toolbar_id: word,
	 x_bitmap: int,
	 x_button: int,
	 y_bitmap: int,
	 y_button: int} -> hwnd
@


1.29.4.1
log
@branched from 1.29
@
text
@a2 4
 * Revision 1.29  1996/11/06  18:53:39  daveb
 * [Bug #1718]
 * Removed extraneous comments befo, as users can see this file.
 *
@


1.29.4.1.1.1
log
@branched from 1.29.4.1
@
text
@a2 3
 * Revision 1.29.4.1  1996/12/17  17:51:24  hope
 * branched from 1.29
 *
@


1.29.3.1
log
@branched from 1.29
@
text
@a2 4
 * Revision 1.29  1996/11/06  18:53:39  daveb
 * [Bug #1718]
 * Removed extraneous comments befo, as users can see this file.
 *
@


1.29.2.1
log
@branched from 1.29
@
text
@a2 4
 * Revision 1.29  1996/11/06  18:53:39  daveb
 * [Bug #1718]
 * Removed extraneous comments befo, as users can see this file.
 *
@


1.29.1.1
log
@branched from 1.29
@
text
@a2 4
 * Revision 1.29  1996/11/06  18:53:39  daveb
 * [Bug #1718]
 * Removed extraneous comments befo, as users can see this file.
 *
@


1.29.1.1.1.1
log
@branched from 1.29.1.1
@
text
@a2 3
 * Revision 1.29.1.1  1996/11/14  12:54:07  hope
 * branched from 1.29
 *
@


1.28
log
@[Bug #1687]
Removed redundant isAltOn function.
@
text
@d3 4
a8 1
 * [Bug #1621]
a113 4
    (* Arguably, these datatypes should be implemented as values of abstract
       types, so that we can add new ones easily.  For example, Windows 95
       adds SC_MONITORPOWER to the list of SC_* values.
     *)
d545 1
a545 1
                        menu : word} -> (* Actually null, a menu or a control_id *)
d582 1
a582 1
    val sendMessage : hwnd * message * wparam * lparam -> word (* message result *)
a607 3
    (* This no work currently *)
    (* Need a sensible implementation *)
    (* There is some confusion over exactly what should happen *)
a614 5
    (* Ch. 8 Hooks *)
    (* Look at this *)

    (* Ch. 9 Controls *)
(*    val createStatusBar: word * string * hwnd * int -> hwnd*)
a617 1
    (* What are the words here? *)
a621 9
    (* Ch. 11 List Boxes *)
    (* Just some stuff for directories *)

    (* Ch. 12 Edit Controls *)
    (* No functions *)

    (* Ch. 13 Combo boxes *)
    (* Need to look at these *)

a622 1
    (* Needs scrollDC, scrollWindow -- need rect stuff *)
a631 3
    (* Ch. 15 Static Controls *)
    (* No functions *)

a632 1
    (* A more robust bypos/bycommand would be desirable *)
a649 1
    (* and many more *)
a663 1
    (* also need copy_accelerator_table, load_accelerators, translate_accelerator *)
a666 2
    (* There are also functions defined locally in _menus *)
    (* Should be moved in here *)
a681 1
    (* We need a way of interpreting the result here *)
a688 1
    (* & many, many more (as usual) *)
a736 1
    (* No functions for manipulating cursor objects just yet *)
d783 1
a783 1
    val cancelDC : hdc -> unit (* only of use with native threads *)
a795 1
    (* Need some creation functions too *)
a810 6
(* Only meaningful with bitmaps, which aren't supported just yet *)
(*
    val getBrushOrgEx : hdc -> point
    val setBrushOrg : hdc * point -> unit
*)

a821 1
    (* Make a pen *)
a834 1
    (* polyDraw needs some thought *)
a840 1
    (* needs types filling in *)
a852 1
    (* The more complex functions are missing here *)
a862 2
    (* This is not intended to be complete *)
    (* Just the useful stuff for GUI code *)
a863 1
    (* Ch. ?, Errors *)
d907 2
a908 1
    val addNewWindow : hwnd * word -> unit (* The word is a C window procedure *)
d917 1
a917 1
    (* MISC -- these should be somewhere else probably *)
@


1.27
log
@[Bug #1621]
[Bug #1621]
Added scrolling functionality to list box.
@
text
@d3 5
a970 1
    val isAltOn : word -> bool
@


1.27.2.1
log
@branched from 1.27
@
text
@a2 5
 * Revision 1.27  1996/09/30  13:43:53  johnh
 * [Bug #1621]
 * [Bug #1621]
 * Added scrolling functionality to list box.
 *
@


1.27.1.1
log
@branched from 1.27
@
text
@a2 5
 * Revision 1.27  1996/09/30  13:43:53  johnh
 * [Bug #1621]
 * [Bug #1621]
 * Added scrolling functionality to list box.
 *
@


1.26
log
@[Bug #1478]
Added WM_USER[0-5] messages.
@
text
@d3 4
d618 1
a618 1
    (* No functions in here -- Hurrah!! *)
d645 1
d711 2
d721 1
@


1.26.1.1
log
@branched from 1.26
@
text
@a2 4
 * Revision 1.26  1996/07/26  14:59:29  daveb
 * [Bug #1478]
 * Added WM_USER[0-5] messages.
 *
@


1.25
log
@Moved exception WindowSystemError here from _capi.
Added DEFAULT_GUI_FONT to stock_object datatype.
Added WM_INITDIALOG to message datatype.
@
text
@d3 5
d287 9
a295 1
      WM_WINDOWPOSCHANGING
@


1.24
log
@Added WM_SYSCOMMAND, sc_value and convertScValue, and SW_RESTORE etc.
@
text
@d3 3
d95 2
d228 1
d774 1
a775 1
      DEVICE_DEFAULT_FONT |
@


1.23
log
@add saveImageDailog
@
text
@d3 3
d92 4
d269 1
d395 1
d397 7
a403 1
      SW_SHOWDEFAULT
d454 19
d504 1
@


1.22
log
@Adding new functionality
@
text
@d3 3
d15 55
a69 55
# Revision 1.18  1996/02/02  15:03:32  matthew
# Extending library functions
#
# Revision 1.17  1996/01/25  12:26:41  matthew
# Adding get_bg_color etc.
#
# Revision 1.16  1996/01/12  16:35:29  matthew
# Adding WM_SETREDRAW message
#
# Revision 1.15  1996/01/12  10:07:11  daveb
# Added open_file_dialog, open_dir_dialog and save_as_dialog.
#
# Revision 1.14  1996/01/04  16:16:21  matthew
# Adding get_stock_object
#
# Revision 1.13  1995/12/20  15:13:47  matthew
# Adding color functions
#
# Revision 1.12  1995/12/15  13:15:07  matthew
# Adding new window styles.
#
# Revision 1.11  1995/12/14  14:17:28  matthew
# Changing message handling
#
# Revision 1.10  1995/12/06  17:16:23  matthew
# Adding clipboard functionality
#
# Revision 1.9  1995/11/21  11:11:07  matthew
# More stuff
#
# Revision 1.8  1995/11/14  13:57:32  matthew
# Extending for graphics
#
# Revision 1.7  1995/09/19  14:02:45  matthew
# Adding DeleteMenu etc.
#
# Revision 1.6  1995/09/04  13:10:17  matthew
# Adding word_to_signed_int
#
# Revision 1.5  1995/08/31  10:12:07  matthew
# Adding extra menu functions
#
# Revision 1.4  1995/08/25  10:28:25  matthew
# More stuff
#
# Revision 1.3  1995/08/15  11:27:36  matthew
# Extending
#
# Revision 1.2  1995/08/11  08:36:49  matthew
# Making it all work
#
# Revision 1.1  1995/08/03  12:54:47  matthew
# new unit
# MS Windows GUI
#
d870 1
@


1.21
log
@Extending library functions
@
text
@d3 3
d77 1
a81 1

d84 1
d545 1
a549 1
                   int (* identifier *) * 
d576 1
a576 1
    (* Needs scrollDc, scrollWindow -- need rect stuff *)
d652 2
a653 2
    val getBkColor : hdc -> word
    val setBkColor : hdc * word -> word
d679 17
d714 10
a723 4
    val getDc : hwnd -> hdc
    val releaseDc : hwnd * hdc -> unit

    (* Ch. 30 Brushes *)
a724 2
    (* This is just sort of generic in fact *)
    (* get_stock_object etc *)
d744 25
a768 1
    val getStockObject : stock_object -> word
d770 23
d794 7
d802 7
a808 1
    val lineTo : hdc * int * int -> unit
d811 11
a821 3

    val fillRectangle : hdc * int * int * int * int -> unit
    val clearRectangle : hdc * int * int * int * int -> unit
d824 4
a827 3

    val setTextColor : hdc * word -> word
    val getTextColor : hdc -> word
a828 1
    val getTextExtentPoint : hdc * string -> int * int
d862 1
a862 1
    val getSysColor : color_spec -> word
@


1.20
log
@More rationalization
@
text
@d3 3
d648 1
d650 3
a652 2
    val getBkColor : hdc -> word
    val validateClientArea : hwnd -> unit
@


1.19
log
@Commenting and Rationalizing
@
text
@d3 3
d67 2
a68 2
    eqtype Hwnd (* HWND *)
    eqtype Hmenu (* HMENU *)
d71 4
a74 4
    datatype AcceleratorTable = ACCELERATORTABLE of word
    datatype WParam = WPARAM of word
    datatype LParam = LPARAM of word
    datatype HDC = HDC of word
d76 2
a77 2
    datatype Rect = RECT of {left:int,top:int,right:int,bottom:int}
    datatype Point = POINT of {x:int,y:int}
d79 1
a79 2
    (* It would be nice to auto generate this lot *)
    datatype Message =
a233 1
      (* WM_OPENICON | *)
a258 2
      (* WN_DELETEITEM | *)
      (* WN_VKEYTOITEM *)
d260 1
a260 1
    datatype WindowStyle =
d373 1
a373 1
    datatype SWArg =
d380 1
a380 1
    datatype GWArg =
d388 1
a388 1
    datatype GwlValue =
d400 1
a400 1
    datatype SB_Value =
d419 1
a419 1
    datatype ESB_Value =
d429 1
a429 1
    datatype MenuValue = SUBMENU of Hmenu | ITEM of word
d431 1
a431 1
    datatype MenuFlag =
d448 13
a460 13
    val window_to_word : Hwnd -> word
    val menu_to_word : Hmenu -> word
    val int_to_word : int -> word
    val null_word : word

    val null_window : Hwnd
    val is_null_window : Hwnd -> bool

    val main_loop : unit -> unit
    val main_init : unit -> Hwnd
    val do_input : unit -> bool (* Returns true if the application terminates *)
    val convert_sb_value : SB_Value -> int
    val new_control_id : unit -> word
d463 39
a501 40
    val any_popup : unit -> bool
    val bring_window_to_top : Hwnd -> unit
    val child_window_from_point : Hwnd * (int * int) -> Hwnd
    val close_window : Hwnd -> unit
    val create_window : 
      {class: string,
       name: string,
       styles : WindowStyle list,
       width : int,
       height : int,
       parent : Hwnd,
       menu : word} -> 
      Hwnd
    val destroy_window : Hwnd -> unit
    val enum_child_windows : Hwnd * (Hwnd -> unit) -> unit
    val enum_windows : (Hwnd -> unit) -> unit
    val find_window : string * string -> Hwnd
    val get_client_rect : Hwnd -> Rect
    val get_desktop_window : unit-> Hwnd
    val get_foreground_window : unit-> Hwnd
    val get_last_active_popup : Hwnd -> Hwnd
    val get_next_window : Hwnd * GWArg -> Hwnd
    val get_parent : Hwnd -> Hwnd
    val get_top_window : Hwnd -> Hwnd
    val get_window : Hwnd * GWArg -> Hwnd
    val get_window_rect : Hwnd -> Rect
    val is_child : Hwnd * Hwnd -> bool
    val is_iconic : Hwnd -> bool
    val is_window : Hwnd -> bool
    val is_window_unicode : Hwnd -> bool
    val is_window_visible : Hwnd -> bool
    val is_zoomed : Hwnd -> bool
    val move_window : Hwnd * int * int * int * int * bool -> unit
    val set_foreground_window : Hwnd -> unit
    val set_parent : Hwnd * Hwnd -> Hwnd
    val set_window_text : Hwnd * string -> unit
    val show_owned_popups : Hwnd * bool -> unit
    val show_window : Hwnd * SWArg -> unit
    val update_window : Hwnd -> unit
    val window_from_point : int * int -> Hwnd
d504 8
a511 9
    val get_input_state : unit -> bool
    val get_message_pos : unit -> int * int 
    val get_message_time : unit -> int
    val in_send_message : unit -> bool
    val post_message : Hwnd * Message * WParam * LParam -> unit
    val post_quit_message : int -> unit
    val send_message : Hwnd * Message * WParam * LParam -> word

    val message_to_word : Message -> word
d515 2
a516 2
    val get_window_long : Hwnd * GwlValue -> word
    val set_window_long : Hwnd * GwlValue * word -> word
d522 6
a527 6
    val enable_window : Hwnd * bool -> bool
    val get_active_window  : unit -> Hwnd
    val get_focus : unit -> Hwnd
    val is_window_enabled : Hwnd -> bool
    val set_active_window  : Hwnd -> Hwnd
    val set_focus : Hwnd -> Hwnd
d531 3
a533 3
    val get_capture : unit -> Hwnd
    val release_capture : unit -> unit
    val set_capture : Hwnd -> Hwnd
d539 6
a544 7
    type Timer
    val kill_timer : Hwnd * Timer -> unit
    val set_timer : 
      Hwnd * 
      int (* identifier *) * 
      int (* timeout, ms *) * 
      (unit -> unit) -> Timer
d554 4
a557 3
    val check_dlg_button: Hwnd * word * int -> unit
    val check_radio_button: Hwnd * word * word * word -> unit
    val is_dlg_button_checked: Hwnd * word -> int;
d569 1
a569 1
    (* Needs scroll_dc, scroll_window -- need rect stuff *)
d571 6
a576 6
    val enable_scroll_bar : Hwnd * SB_Value * ESB_Value -> unit
    val get_scroll_pos : Hwnd * SB_Value -> int
    val get_scroll_range : Hwnd * SB_Value -> int * int
    val set_scroll_pos : Hwnd * SB_Value * int * bool -> unit
    val set_scroll_range : Hwnd * SB_Value * int * int * bool -> unit
    val show_scroll_bar : Hwnd * SB_Value * bool -> unit
d583 17
a599 17
    val append_menu: Hmenu * MenuFlag list * MenuValue * string -> unit
    val check_menu_item : Hmenu * word * MenuFlag list -> unit
    val create_menu : unit -> Hmenu
    val create_popup_menu : unit -> Hmenu
    val destroy_menu : Hmenu -> unit
    val delete_menu : Hmenu * word * MenuFlag -> unit
    val draw_menu_bar : Hwnd -> unit
    val enable_menu_item : Hmenu * word * MenuFlag list -> unit
    val get_menu : Hwnd -> Hmenu
    val get_menu_item_id : Hmenu * int -> word
    val get_menu_item_count : Hmenu -> int
    val get_menu_state : Hmenu * word * MenuFlag -> MenuFlag list
    val get_menu_string : Hmenu * word * MenuFlag -> string
    val get_submenu : Hmenu * int -> Hmenu
    val get_system_menu : Hwnd * bool -> Hmenu
    val set_menu : Hwnd * Hmenu -> unit
    val remove_menu : Hmenu * word * MenuFlag -> unit
d604 1
a604 1
    datatype AcceleratorFlag =
d612 2
a613 2
    val create_accelerator_table : (AcceleratorFlag list * int * int) list -> AcceleratorTable
    val destroy_accelerator_table : AcceleratorTable -> unit
d621 1
a621 1
    datatype MessageBoxStyle =
d637 1
a637 1
    val message_box : Hwnd * string * string * MessageBoxStyle list -> int
d639 2
a640 2
    val end_dialog : Hwnd * int -> unit
    val get_dlg_item : Hwnd * word -> Hwnd
d645 3
a647 3
    val set_bk_color : HDC * word -> word
    val get_bk_color : HDC -> word
    val validate_client_area : Hwnd -> unit
d649 1
a649 1
    datatype ROP2Mode =
d667 2
a668 2
    val get_rop2 : HDC -> ROP2Mode
    val set_rop2 : HDC * ROP2Mode -> ROP2Mode
d672 5
a676 5
    val clip_cursor : Rect MLWorks.Option.option -> unit
    val get_clip_cursor : unit -> Rect
    val get_cursor_pos : unit -> Point
    val set_cursor_pos : int * int -> unit
    val show_cursor : bool -> int
d680 5
a684 5
    val open_clipboard : Hwnd -> bool
    val close_clipboard : unit -> unit
    val empty_clipboard : unit -> unit
    val set_clipboard_data : string -> unit
    val get_clipboard_data : unit -> string
d688 2
a689 2
    val get_dc : Hwnd -> HDC
    val release_dc : Hwnd * HDC -> unit
d695 1
a695 1
    datatype StockObject =
d714 1
a714 1
    val get_stock_object : StockObject -> word
d717 2
a718 2
    val move_to : HDC * int * int * word -> unit
    val line_to : HDC * int * int -> unit
d722 2
a723 2
    val fill_rectangle : HDC * int * int * int * int -> unit
    val clear_rectangle : HDC * int * int * int * int -> unit
d727 4
a730 4
    val set_text_color : HDC * word -> word
    val get_text_color : HDC -> word
    val	text_out : HDC * int * int * string -> unit
    val get_text_extent_point : HDC * string -> int * int
d733 2
a734 2
    val client_to_screen : Hwnd * Point -> Point
    val screen_to_client : Hwnd * Point -> Point
d741 1
a741 1
    val message_beep : MessageBoxStyle -> unit
d744 1
a744 1
    datatype ColorSpec =
d764 1
a764 1
    val get_sys_color : ColorSpec -> word
d766 3
a768 3
    val open_file_dialog : Hwnd * string -> string
    val open_dir_dialog : Hwnd -> string
    val save_as_dialog : Hwnd -> string
d771 1
a771 1
    val set_accelerator_table : AcceleratorTable -> unit
d774 2
a775 2
    val register_popup_window : Hwnd -> unit
    val unregister_popup_window : Hwnd -> unit
d779 3
a781 3
    val add_message_handler : 
      Hwnd * Message *
      (WParam * LParam -> word MLWorks.Option.option) -> unit
d783 1
a783 1
    val add_new_window : Hwnd * word -> unit (* The word is a C window procedure *)
d785 1
a785 1
    val remove_window : Hwnd -> unit
d788 1
a788 1
    val get_ml_window_proc : unit -> word
d790 1
a790 1
    val add_command_handler : Hwnd * word * (Hwnd * int -> unit) -> unit
d795 5
a799 5
    val word_to_string : word -> string
    val word_to_int : word -> int
    val word_to_signed_int : word -> int
    val set_byte : word * int * int -> unit
    val make_c_string : string -> word (* malloc and copy *)
d802 1
a802 1
    val is_alt_on : word -> bool
@


1.18
log
@Extending library functions
@
text
@d3 3
d647 26
d681 1
a681 3
    (* Ch. 39 Coordinate Spaces & Transformations *)
    val client_to_screen : Hwnd * Point -> Point
    val screen_to_client : Hwnd * Point -> Point
d683 5
a687 14
    (* Ch. ?, Errors *)
    val message_beep : MessageBoxStyle -> unit

    (* ???? *)
    val open_file_dialog : Hwnd * string -> string
    val open_dir_dialog : Hwnd -> string
    val save_as_dialog : Hwnd -> string

    (* MLWorks Specific functions *)
    val set_accelerator_table : AcceleratorTable -> unit

    (* Register dialogs for keyboard traversal *)
    val register_popup_window : Hwnd -> unit
    val unregister_popup_window : Hwnd -> unit
d689 1
a689 1
    (* WINDOW PROCEDURES *)
a690 14
    val add_message_handler : 
      Hwnd * Message *
      (WParam * LParam -> word MLWorks.Option.option) -> unit

    val add_new_window : Hwnd * word -> unit (* The word is a C window procedure *)

    val remove_window : Hwnd -> unit

    (* Returns the address of the standard ML window procedure *)
    val get_ml_window_proc : unit -> word

    val add_command_handler : Hwnd * word * (Hwnd * int -> unit) -> unit

    (* GRAPHICS *)
d694 3
d719 28
a767 11
    val set_bk_color : HDC * word -> word
    val get_bk_color : HDC -> word
    val set_text_color : HDC * word -> word
    val get_text_color : HDC -> word
    val move_to : HDC * int * int * word -> unit
    val line_to : HDC * int * int -> unit
    val fill_rectangle : HDC * int * int * int * int -> unit
    val clear_rectangle : HDC * int * int * int * int -> unit
    val	text_out : HDC * int * int * string -> unit
    val get_text_extent_point : HDC * string -> int * int
    val validate_client_area : Hwnd -> unit
d769 18
a786 17
    datatype ROP2Mode =
      R2_BLACK |
      R2_COPYPEN |
      R2_MASKNOTPEN |
      R2_MASKPEN |
      R2_MASKPENNOT |
      R2_MERGENOTPEN |
      R2_MERGEPEN |
      R2_MERGEPENNOT |
      R2_NOP |
      R2_NOT |
      R2_NOTCOPYPEN |
      R2_NOTMASKPEN |
      R2_NOTMERGEPEN |
      R2_NOTXORPEN |
      R2_WHITE |
      R2_XORPEN
d788 1
a788 2
    val get_rop2 : HDC -> ROP2Mode
    val set_rop2 : HDC * ROP2Mode -> ROP2Mode
d790 2
a791 1
    (* clipboard *)
d793 1
a793 5
    val open_clipboard : Hwnd -> bool
    val close_clipboard : unit -> unit
    val empty_clipboard : unit -> unit
    val set_clipboard_data : string -> unit
    val get_clipboard_data : unit -> string
@


1.17
log
@Adding get_bg_color etc.
@
text
@d3 3
d59 2
a72 12
    val window_to_word : Hwnd -> word
    val menu_to_word : Hmenu -> word
    val int_to_word : int -> word
    val null_word : word

    val null_window : Hwnd
    val is_null_window : Hwnd -> bool

    val main_loop : unit -> unit
    val main_init : unit -> Hwnd
    val do_input : unit -> bool (* Returns true if the application terminates *)

a370 12
    val create_window : 
      {class: string,
       name: string,
       styles : WindowStyle list,
       width : int,
       height : int,
       parent : Hwnd,
       menu : word} -> 
      Hwnd

    val move_window : Hwnd * int * int * int * int * bool -> unit

a377 2
    val show_window : Hwnd * SWArg -> unit

a385 25
    val get_window : Hwnd * GWArg -> Hwnd

    val update_window : Hwnd -> unit
    val enable_window : Hwnd * bool -> bool
    val is_window : Hwnd -> bool
    val bring_window_to_top : Hwnd -> unit
    val close_window : Hwnd -> unit
    val destroy_window : Hwnd -> unit
    val get_parent : Hwnd -> Hwnd

    val enum_windows : (Hwnd -> unit) -> unit
    val enum_child_windows : Hwnd * (Hwnd -> unit) -> unit

    val get_window_rect : Hwnd -> Rect
    val get_client_rect : Hwnd -> Rect
    val client_to_screen : Hwnd * Point -> Point
    val screen_to_client : Hwnd * Point -> Point

    val set_focus : Hwnd -> Hwnd
    val set_active_window  : Hwnd -> Hwnd
    val get_focus : unit -> Hwnd

    val get_window_long : Hwnd * int -> word
    val set_window_long : Hwnd * int * word -> word

d398 18
a415 9
    val convert_gwl_value : GwlValue -> int

    (* WINDOW PROCEDURES *)

    val add_message_handler : 
      Hwnd * Message *
      (WParam * LParam -> word MLWorks.Option.option) -> unit

    val add_new_window : Hwnd * word -> unit (* The word is a C window procedure *)
d417 9
a425 4
    val remove_window : Hwnd -> unit

    (* Returns the address of the standard ML window procedure *)
    val get_ml_window_proc : unit -> word
a426 3
    (* MENUS *)

    val new_control_id : unit -> word
d445 5
a449 8
    val get_menu : Hwnd -> Hmenu
    val get_submenu : Hmenu * int -> Hmenu
    val set_menu : Hwnd * Hmenu -> unit
    val create_menu : unit -> Hmenu
    val create_popup_menu : unit -> Hmenu
    val append_menu: Hmenu * MenuFlag list * MenuValue * string -> unit
    val remove_menu : Hmenu * word * MenuFlag -> unit
    val delete_menu : Hmenu * word * MenuFlag -> unit
d451 2
a452 2
    val check_menu_item : Hmenu * word * MenuFlag list -> unit
    val enable_menu_item : Hmenu * word * MenuFlag list -> unit
d454 5
a458 1
    val add_command_handler : Hwnd * word * (Hwnd * int -> unit) -> unit
d460 41
a500 1
    (* MESSAGES *)
d502 1
d510 1
d513 33
a545 1
    (* DIALOGS *)
d547 71
a617 2
    val register_popup_window : Hwnd -> unit
    val unregister_popup_window : Hwnd -> unit
d619 2
a637 1
    val message_beep : MessageBoxStyle -> unit
d642 18
d664 14
a677 4
    (* BUTTON CONTROLS *)
    val check_dlg_button: Hwnd * word * int -> unit
    val check_radio_button: Hwnd * word * word * word -> unit
    val is_dlg_button_checked: Hwnd * word -> int;
d679 1
a679 1
    (* SCROLLBARS *)
d681 2
a682 17
    datatype SB_Value =
      SB_BOTTOM |
      SB_CTL |
      SB_ENDSCROLL |
      SB_HORZ |
      SB_LINEDOWN |
      SB_LINELEFT |
      SB_LINERIGHT |
      SB_LINEUP |
      SB_PAGEDOWN |
      SB_PAGELEFT |
      SB_PAGERIGHT |
      SB_PAGEUP |
      SB_THUMBPOSITION |
      SB_THUMBTRACK |
      SB_TOP |
      SB_VERT
d684 1
a684 5
    val set_scroll_range : Hwnd * SB_Value * int * int * bool -> unit
    val get_scroll_range : Hwnd * SB_Value -> int * int
    val set_scroll_pos : Hwnd * SB_Value * int * bool -> unit
    val get_scroll_pos : Hwnd * SB_Value -> int
    val convert_sb_value : SB_Value -> int
a764 14

    (* Accelerator tables *)

    datatype AcceleratorFlag =
      FALT
    | FCONTROL
    | FNOINVERT
    | FSHIFT
    | FVIRTKEY

    (* First int is the key, the second is the command identifier *)
    val create_accelerator_table : (AcceleratorFlag list * int * int) list -> AcceleratorTable
    val destroy_accelerator_table : AcceleratorTable -> unit
    val set_accelerator_table : AcceleratorTable -> unit
@


1.16
log
@Adding WM_SETREDRAW message
@
text
@d3 3
d615 3
@


1.15
log
@Added open_file_dialog, open_dir_dialog and save_as_dialog.
@
text
@d3 3
d247 1
@


1.14
log
@Adding get_stock_object
@
text
@d3 3
d524 4
@


1.13
log
@Adding color functions
@
text
@d3 3
d557 22
@


1.12
log
@Adding new window styles.
@
text
@d3 3
d553 23
@


1.11
log
@Changing message handling
@
text
@d3 3
d261 1
d265 2
d272 1
d275 8
d317 3
d346 1
d358 1
d373 1
d380 1
d382 11
d410 1
@


1.10
log
@Adding clipboard functionality
@
text
@d3 3
d398 10
a407 3
    val set_ml_window_proc : (Hwnd * word * WParam * LParam -> word MLWorks.Option.option) -> unit
    val call_window_proc : word * (Hwnd * word * WParam * LParam) -> word (* call a C window procedure *)
    val get_simple_window_proc : unit -> word
d451 1
a453 2
    val add_message_handler : Hwnd * Message * (WParam * LParam -> word) -> unit
    val despatch_message : Hwnd * word * WParam * LParam -> word MLWorks.Option.option
@


1.9
log
@More stuff
@
text
@d3 3
a363 1
    val callback_add : (Hwnd * int * ('a -> unit)) -> unit
d549 8
@


1.8
log
@Extending for graphics
@
text
@d3 3
d36 1
d430 1
a430 1
    val add_command_handler : word * (Hwnd * int -> unit) -> unit
d446 3
d533 14
@


1.7
log
@Adding DeleteMenu etc.
@
text
@d3 3
d35 1
d173 1
d178 1
d209 1
d230 1
d469 58
d537 1
@


1.6
log
@Adding word_to_signed_int
@
text
@d3 3
d392 2
d412 2
@


1.5
log
@Adding extra menu functions
@
text
@d3 3
d459 1
@


1.4
log
@More stuff
@
text
@d3 3
d24 2
a25 2
    datatype WParam = WPWORD of word
    datatype LParam = LPWORD of word
d168 1
d375 2
a376 2
    val set_ml_window_proc : (Hwnd * word * word * word -> word MLWorks.Option.option) -> unit
    val call_window_proc : word * (Hwnd * word * word * word) -> word (* call a C window procedure *)
d405 4
a408 1
    val add_command_handler : word * (int->unit) -> unit
d419 2
@


1.3
log
@Extending
@
text
@d3 3
d21 2
a22 2
    datatype WParam = WPWORD of word | WPSTRING of string
    datatype LParam = LPWORD of word | LPSTRING of string
d37 1
d333 2
d352 22
a373 2
    val set_window_long : Hwnd * int -> word
    val get_window_long : Hwnd * int * word -> word
d433 9
a441 1
      
d448 3
@


1.2
log
@Making it all work
@
text
@d3 3
a15 1
    eqtype MenuId (* a boxed int *)
d316 2
a317 1
       parent: Hwnd} -> 
d351 2
a352 2
    val new_menu_id : unit -> MenuId
    datatype MenuValue = SUBMENU of Hmenu | ITEM of MenuId
d356 7
d364 3
a366 1
      MF_STRING
d375 1
a375 1
    val add_menu_command : MenuId * (unit->unit) -> unit
@


1.1
log
@new unit
MS Windows GUI
@
text
@d3 4
d11 19
a29 2
    datatype window = WINDOW of int
    val null_window : window
d31 371
a401 3
    val main_init : unit -> window
    val make_window : string -> window
    val callback_add : (window * int * ('a -> unit)) -> unit
@
