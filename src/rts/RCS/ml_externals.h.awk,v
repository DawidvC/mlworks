head	1.1;
access;
symbols
	Final_version_of_old_runtime:1.1
	ML_revised_beta_release_25/05/94:1.1
	ML_final_beta_release_02/03/94:1.1
	mlworks-28-01-1994:1.1
	Release:1.1
	mlworks-beta-01-09-1993:1.1
	MLWorks-1-0-3-21/12/1992:1.1
	MLWorks-1-0-2-15/12/1992:1.1
	MLWorks-1-0-1-04/12/1992:1.1
	checkpoint_17_08_92:1.1;
locks; strict;


1.1
date	91.10.29.14.56.15;	author davidt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	91.10.29.14.56.15;	author jont;	state Exp;
branches;
next	;


desc
@Awk file for generating ml_externals.h
@



1.1
log
@Initial revision
@
text
@BEGIN {
	print "\n/*";
	print " * External C function interface";
	print " * Machine generated file : DO NOT ALTER";
	print " * Generated from : ml_externals.src";
	print " */\n";
	print ("/* Avoid multiple inclusion */");
	print ("#ifndef ml_externals_h");
	print ("#define ml_externals_h");
	print ("\n/* For efficiency */");
	print ("#ifndef types_h");
	print ("#include \"types.h\"");
	print ("#endif\n");
      }

/^[^#\n\t ].*/ {
	RESULT = $(NF);
	if (RESULT == "int") { RESULT = "word"; } else \
	if (RESULT == "unit") { RESULT = "void"; } else \
	if (RESULT == "string") { RESULT = "char *"; } else \
	if (RESULT == "cptr") { RESULT = "void *"; };
	printf ("extern %s %s (", RESULT, $1);
	for (i = 3; i < (NF - 1); i++) \
	{
	  if ($i == "*") { printf (","); } else \
	  if ($i == "int") { printf ("word"); } else \
	  if ($i == "unit") { printf ("void"); } else \
	  if ($i == "cptr") { printf ("void *"); } else \
	  if ($i == "string") { printf ("char *"); } else \
	  printf ("%s", $i);
	};
	print (");");
       }

END {
	print ("\n#endif");
    }
@


1.1.1.1
log
@Fork for bug fixing
@
text
@@
