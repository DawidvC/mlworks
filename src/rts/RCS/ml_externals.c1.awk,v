head	1.1;
access;
symbols
	Final_version_of_old_runtime:1.1
	ML_revised_beta_release_25/05/94:1.1
	ML_final_beta_release_02/03/94:1.1
	mlworks-28-01-1994:1.1
	Release:1.1
	mlworks-beta-01-09-1993:1.1
	MLWorks-1-0-3-21/12/1992:1.1
	MLWorks-1-0-2-15/12/1992:1.1
	MLWorks-1-0-1-04/12/1992:1.1
	checkpoint_17_08_92:1.1;
locks; strict;


1.1
date	91.10.29.12.58.57;	author davidt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	91.10.29.12.58.57;	author jont;	state Exp;
branches;
next	;


desc
@Awk file for generating ml_externals.c
@



1.1
log
@Initial revision
@
text
@BEGIN {
	print "\n/*";
	print " * External C function interface";
	print " * Machine generated file : DO NOT ALTER";
	print " * Generated from : ml_externals.src";
	print " */\n";
	print ("#include \"ml_externals.h\"");
	print ("#include \"mltypes.h\"");
	print ("#include \"values.h\"");
      }

/^[^#\n\t ].*/ {
	printf ("\nstatic mlval ml_%s (mlval argument)\n", $1);
	print ("{");
	if ($NF == "string") printf ("  return ml_string(");
	if ($NF == "int") printf ("  return MLINT(");
	if ($NF == "cptr") printf ("  return (mlval)(");
	if ($NF == "unit") printf ("  ");
	printf ("%s(", $1);
	if (NF > 5) { UNTUPLE = 1; } else UNTUPLE = 0;
	for (i = 3; i < (NF - 1); i++) \
	{
	  if (UNTUPLE) { ARG = "GETFIELD(argument," ((i-3)/2) ")"; } else \
	  ARG = "argument";
	  if ($i == "*") { printf (","); } else \
	  if ($i == "int") { printf ("CINT(%s)", ARG); } else \
	  if ($i == "cptr") { printf ("(void *)%s", ARG); } else \
	  if ($i == "string") { printf ("CSTRING(%s)", ARG); } else \
	  printf ("%s", $i);
	};
	if ($NF == "unit") { print (");"); } else print ("));");
	if ($NF == "unit") print ("  return NULL;");
	print ("}");
       }
@


1.1.1.1
log
@Fork for bug fixing
@
text
@@
