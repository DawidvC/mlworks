head	1.6;
access;
symbols
	Final_version_of_old_runtime:1.6
	ML_revised_beta_release_25/05/94:1.6
	ML_final_beta_release_02/03/94:1.6
	mlworks-28-01-1994:1.6
	Release:1.6
	mlworks-beta-01-09-1993:1.6
	MLWorks-1-0-3-21/12/1992:1.4
	MLWorks-1-0-2-15/12/1992:1.4
	MLWorks-1-0-1-04/12/1992:1.4
	checkpoint_17_08_92:1.3;
locks; strict;
comment	@ *  @;


1.6
date	93.06.02.13.01.33;	author richard;	state Exp;
branches
	1.6.1.1;
next	1.5;

1.5
date	93.01.22.16.46.41;	author richard;	state Exp;
branches;
next	1.4;

1.4
date	92.10.02.08.33.59;	author richard;	state Exp;
branches;
next	1.3;

1.3
date	92.07.17.14.15.17;	author richard;	state Exp;
branches;
next	1.2;

1.2
date	92.06.30.08.22.04;	author richard;	state Exp;
branches;
next	1.1;

1.1
date	92.01.17.11.46.11;	author richard;	state Exp;
branches;
next	;

1.6.1.1
date	93.06.02.13.01.33;	author jont;	state Exp;
branches;
next	;


desc
@Robust C heap allocator.
@


1.6
log
@Commented out the prototypes of malloc, free, etc.  These shouldn't
really be duplicated here.
@
text
@/*  ==== C HEAP MANAGER ====
 *
 *  Copyright (C) 1991 Harlequin Ltd.
 *
 *  Description
 *  -----------
 *  These replacements for the system versions of calloc(), malloc(),
 *  realloc(), and free().  It is necessary to replace the system versions
 *  in order to integrate with the ML memory management scheme.
 *
 *  Revision Log
 *  ------------
 *  $Log: alloc.h,v $
 *  Revision 1.5  1993/01/22  16:46:41  richard
 *  Corrected header comment.
 *
 *  Revision 1.4  1992/10/02  08:33:59  richard
 *  Changed types to become non-standard but compatable with GCC across
 *  platforms.
 *
 *  Revision 1.3  1992/07/17  14:15:17  richard
 *  Removed init_alloc(), and caused allocation to automatically request
 *  an initial area when first called.  This simplifies the interface to
 *  the memory manager.
 *
 *  Revision 1.2  1992/06/30  08:22:04  richard
 *  Moved ALLOC_INITIAL_MINIMUM to storeman.h and changed to to C_HEAP_MINIMUM.
 *
 *  Revision 1.1  1992/01/17  11:46:11  richard
 *  Initial revision
 */


#ifndef alloc_h
#define alloc_h

#include <stddef.h>		/* for size_t */


/*  === ALLOCATION FUNCTIONS ===
 *
 *  See ANSI C standard section 40.10.3 for documentation.
 *  These functions have non-standard types in order that they compile under
 *  UNIX.
 */

/* Commented out to get GCC2 to work.  Ho hum.
extern char *calloc(size_t number, size_t size);
extern int  free(void *p);
extern char *malloc(size_t size);
extern char *realloc(void *p, size_t size);
*/


#endif
@


1.6.1.1
log
@Fork for bug fixing
@
text
@a13 4
 *  Revision 1.6  1993/06/02  13:01:33  richard
 *  Commented out the prototypes of malloc, free, etc.  These shouldn't
 *  really be duplicated here.
 *
@


1.5
log
@Corrected header comment.
@
text
@d14 3
d47 1
d52 1
@


1.4
log
@Changed types to become non-standard but compatable with GCC across
platforms.
@
text
@d8 2
a9 3
 *  realloc(), and free() use a robust (though relatively slow) method which
 *  will detect corruption.  They also integrate properly with the ML memory
 *  management scheme.
d14 4
@


1.3
log
@Removed init_alloc(), and caused allocation to automatically request
an initial area when first called.  This simplifies the interface to
the memory manager.
@
text
@d15 5
d37 2
d41 4
a44 4
void *calloc(size_t number, size_t size);
int  free(void *p);		/* non-standard, for UNIX, see man free */
void *malloc(size_t size);
void *realloc(void *p, size_t size);
@


1.2
log
@Moved ALLOC_INITIAL_MINIMUM to storeman.h and changed to to C_HEAP_MINIMUM.
@
text
@d1 1
a1 1
/*  ==== ROBUST MEMORY ALLOCATION ====
d15 3
a25 1

a26 13


/*  === INITIALIZE THE HEAP ===
 *
 *  This function sets up the memory area which will be used by the
 *  allocation functions for future requests.  When this memory is exhausted
 *  get_blocks() (see mem.h) is called to allocate more space.  The size of
 *  the initial heap area must be at least C_HEAP_MINIMUM (defined in
 *  "storeman.h") and both the area and the size must be aligned.  Returns
 *  non-zero iff successful.
 */

int init_alloc(void *initial_heap, size_t size);
@


1.1
log
@Initial revision
@
text
@d14 3
a16 1
 *  $Log$
d19 1
d32 3
a34 2
 *  the initial heap area must be at least ALLOC_INITIAL_MINIMUM, and both
 *  the area and the size must be aligned.  Returns non-zero iff successful.
a35 2

#define ALLOC_INITIAL_MINIMUM	1024
@
