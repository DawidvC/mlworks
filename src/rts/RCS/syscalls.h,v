head	1.2;
access;
symbols
	Final_version_of_old_runtime:1.2
	ML_revised_beta_release_25/05/94:1.2
	ML_final_beta_release_02/03/94:1.2;
locks; strict;
comment	@ * @;


1.2
date	94.02.08.18.04.34;	author matthew;	state Exp;
branches;
next	1.1;

1.1
date	94.01.28.16.18.13;	author johnk;	state Exp;
branches;
next	;


desc
@new file
@


1.2
log
@Added realpath
@
text
@/*  ==== UNIX SYSCALL DECLARATIONS HEADER ====
 *
 *  Copyright (C) 1994 Harlequin Ltd
 *
 *  Description
 *  -----------
 *  This header declares Unix system calls which are not declared in
 *  system header files. 
 *
 *  $Id: syscalls.h,v 1.1 1994/01/28 16:18:13 johnk Exp $
 */

#ifndef syscall_h
#define syscall_h

#ifdef sparc

/* Hardly anything gets defined properly in SunOS header files */

#include <stdio.h>
#include <sys/types.h>
#include <sys/time.h>
#include <signal.h>
#include <sys/resource.h>
#include <sys/socket.h>
#include <sys/stat.h>

/* files */

/* open has an optional argument for mode. Files which use the mode
should define OPEN_MODE_ARGUMENT before including this file. C is a
language too stupid to live */

extern int open (char *path, int flags
#ifdef OPEN_MODE_ARGUMENT
, mode_t mode
#endif
		 );

extern int close (int fd);
extern int read (int fd, char *buf, int nbyte);
extern int write (int fd, char *buf, int nbyte);
extern char *getwd (char *pathname);
extern char* realpath(char *path,char resolved_path[]);
extern int chdir (char *path);
extern int rmdir (char *path);
extern int unlink (char *path);
extern int fsync (int fd);
extern int pipe (int fd[2]);

/* GNU has its own header files, which do not use ANSI-style function
prototypes for certain functions. For mkdir this is a problem since
mode_t is a type with implicit promotion. */

#ifdef __GNUC__
extern int mkdir ();
#else
extern int mkdir (char *path, mode_t mode);
#endif

/* time */

extern int gettimeofday(struct timeval *tp, struct timezone *tzp);
extern int setitimer (int which, struct itimerval *value, struct itimerval *ovalue);

/* memory */

extern int brk (caddr_t addr);
extern caddr_t sbrk (int incr);
extern int plock (int op);
extern void bcopy (char *b1, char *b2, int length);
extern int munmap (caddr_t addr, int len); /* mmap is in <sys/mman.h> */
extern int getpagesize (void);

/* signals */

extern int sigblock (int mask);
extern int sigvec (int sig, struct sigvec *vec, struct sigvec *ovec);
extern int sigstack (struct sigstack *ss, struct sigstack *oss);

/* processes */

extern int getpid(void);
extern int sleep(unsigned int seconds);
extern int kill (int pid, int signal);
extern volatile void _exit (int status);
extern int getrusage (int who, struct rusage *rusage);
extern int execve (char *path, char *argv[], char *envp[]);
extern int execv (char *path, char *argv[]);
extern int execvp (char *file, char *argv[]);
extern int fork (void);
extern int vfork (void);
extern char **environ;

/* uids */

extern int seteuid(int euid);
extern int getuid(void);

/* sockets */

extern int socket (int domain, int type, int protocol);
extern int connect (int s, struct sockaddr *name, int namelen);
extern int bind (int s, struct sockaddr *name, int namelen);
extern int getsockname (int s, struct sockaddr *name, int *namelen);
extern int getpeername (int s, struct sockaddr *name, int *namelen);
extern int listen (int s, int backlog);
extern int accept (int s, struct sockaddr *name, int *namelen);

/* passwords */

extern void setpwent(void);
extern void endpwent(void);

/* misc */

extern int gethostname (char *name, int namelen);
extern char *optarg;
extern int optind;
extern char *sys_errlist [];

#endif /* sparc */
#endif /* syscall_h */
@


1.1
log
@new file
@
text
@d10 1
a10 1
 *  $Id: $
d44 1
@
