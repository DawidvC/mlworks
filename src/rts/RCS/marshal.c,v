head	1.2;
access;
symbols
	Final_version_of_old_runtime:1.2
	ML_revised_beta_release_25/05/94:1.2
	ML_final_beta_release_02/03/94:1.2
	mlworks-28-01-1994:1.2
	Release:1.2
	mlworks-beta-01-09-1993:1.2
	MLWorks-1-0-3-21/12/1992:1.1
	MLWorks-1-0-2-15/12/1992:1.1
	MLWorks-1-0-1-04/12/1992:1.1;
locks; strict;
comment	@ *  @;


1.2
date	93.06.02.13.05.50;	author richard;	state Exp;
branches
	1.2.1.1;
next	1.1;

1.1
date	92.10.29.12.59.35;	author richard;	state Exp;
branches;
next	;

1.2.1.1
date	93.06.02.13.05.50;	author jont;	state Exp;
branches;
next	;


desc
@Marshalling
@


1.2
log
@Added extra parentheses around conditionals as suggested by GCC 2.
@
text
@/*  ==== MARSHALLING ====
 *
 *  Copyright (C) 1992 Harlequin Ltd
 *
 *  Implementation
 *  --------------
 *
 *  Revision Log
 *  ------------
 *  $Log: marshal.c,v $
 *  Revision 1.1  1992/10/29  12:59:35  richard
 *  Initial revision
 *
 */

#include <stdarg.h>
#include <stddef.h>
#include <errno.h>

#include "marshal.h"


static char *marshal_long(char *out, unsigned long int i)
{
  while(i & ~0x7F)
  {
    *out++ = (i & 0x7F) | 0x80;
    i >>= 7;
  }

  *out++ = i;

  return(out);
}

static char *unmarshal_long(char *in, unsigned long int *ip)
{
  char c;
  unsigned long int i = 0;
  int shift = 0;

  do
  {
    c = *in++;
    i |= (c & 0x7F) << shift;
    shift += 7;
  }
  while(c & ~0x7F);

  *ip = i;
  return(in);
}

char *marshal(char *out, const char *desc, ...)
{
  va_list arg;
  char code;

  va_start(arg, desc);

  while((code = *desc++))
    switch(code)
    {
      /* Characters are encoded as themselves. */

      case 'c':
      *out++ = va_arg(arg, char);
      break;

      /* Integers are encoded in 7-bit chunks with the eighth bit indicating */
      /* that there is another chunk to come. */

      case 's':
      out = marshal_long(out, (unsigned long int)va_arg(arg, unsigned short int));
      break;

      case 'i':
      out = marshal_long(out, (unsigned long int)va_arg(arg, unsigned int));
      break;

      case 'l':
      out = marshal_long(out, (unsigned long int)va_arg(arg, unsigned long int));
      break;

      default:
      errno = EMARSHALDESC;
      return(NULL);
    }

  va_end(arg);

  return(out);
}

char *unmarshal(char *in, const char *desc, ...)
{
  va_list arg;
  char code;

  va_start(arg, desc);

  while((code = *desc++))
    switch(code)
    {
      /* Characters are encoded as themselves. */

      case 'c':
      *va_arg(arg, char *) = *in++;
      break;

      /* Integers are encoded in 7-bit chunks with the eighth bit indicating */
      /* that there is another chunk to come. */

      case 's':
      {
	unsigned long int l;
	in = unmarshal_long(in, &l);
	*va_arg(arg, unsigned short int *) = (unsigned short int)l;
      }
      break;

      case 'i':
      {
	unsigned long int l;
	in = unmarshal_long(in, &l);
	*va_arg(arg, unsigned int *) = (unsigned int)l;
      }
      break;

      case 'l':
      {
	unsigned long int l;
	in = unmarshal_long(in, &l);
	*va_arg(arg, unsigned long int *) = l;
      }
      break;

      default:
      errno = EMARSHALDESC;
      return(NULL);
    }

  va_end(arg);

  return(in);
}

@


1.2.1.1
log
@Fork for bug fixing
@
text
@a10 3
 *  Revision 1.2  1993/06/02  13:05:50  richard
 *  Added extra parentheses around conditionals as suggested by GCC 2.
 *
@


1.1
log
@Initial revision
@
text
@d10 4
a13 1
 *  $Log$
d61 1
a61 1
  while(code = *desc++)
d102 1
a102 1
  while(code = *desc++)
@
