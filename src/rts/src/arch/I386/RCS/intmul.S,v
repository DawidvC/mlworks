head	1.1;
access;
symbols
	MLW_daveb_inline_1_4_99:1.1.13
	MLWorks_21c0_1999_03_25:1.1
	MLWorks_20c1_1998_08_20:1.1
	MLWorks_20c0_1998_08_04:1.1
	MLWorks_20b2c2_1998_06_19:1.1
	MLWorks_20b2_Windows_1998_06_12:1.1
	MLWorks_20b1c1_1998_05_07:1.1
	MLWorks_20b0_1998_04_07:1.1
	MLWorks_20b0_1998_03_20:1.1
	MLWorks_20m2_1998_02_16:1.1
	MLWorks_MM_adapt:1.1.12
	MLWorks_20m1_1997_10_23:1.1
	MLWorks_11r1:1.1.9.1.1.1.1
	MLWorks_workspace_97:1.1.11
	MLWorks_dt_wizard:1.1.10
	MLWorks_11c0_1997_09_09:1.1.9.1.1.1
	MLWorks_10r3:1.1.9.1.3
	MLWorks_10r2_551:1.1.9.1.2
	MLWorks_11:1.1.9.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.1.9.1
	MLWorks_20m0_1997_06_20:1.1
	MLWorks_1_0_r2c2_1997_06_14:1.1.9.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.1.9.1
	MLWorks_1_0_r2c1_1997_05_12:1.1.9
	MLWorks_BugFix_1997_04_24:1.1
	MLWorks_1_0_r2_Win32_1997_04_11:1.1
	MLWorks_1_0_r2_Unix_1997_04_04:1.1
	MM_ML_release_korma_1997_04_01:1.1
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.1.7.1.1
	MLWorks_gui_1996_12_18:1.1.8
	MLWorks_1_0_Win32_1996_12_17:1.1.7
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.1.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.1.4.1
	JFHrts:1.1.6
	MLWorks_1_0_Irix_1996_11_28:1.1.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.1.5
	MLWorks_1_0_Unix_1996_11_14:1.1.4
	MLWorks_Open_Beta2_1996_10_11:1.1.3
	MLWorks_License_dev:1.1.2
	MLWorks_1_open_beta_1996_09_13:1.1.1
	MLWorks_Open_Beta_1996_08_22:1.1
	MLWorks_Beta_1996_07_02:1.1
	MLWorks_Beta_1996_06_07:1.1
	MLWorks_Beta_1996_06_06:1.1
	MLWorks_Beta_1996_06_05:1.1
	MLWorks_Beta_1996_06_03:1.1
	MLWorks_Beta_1996_05_31:1.1
	MLWorks_Beta_1996_05_30:1.1;
locks; strict;
comment	@# @;


1.1
date	94.10.04.16.50.54;	author jont;	state Exp;
branches
	1.1.1.1
	1.1.2.1
	1.1.3.1
	1.1.4.1
	1.1.5.1
	1.1.6.1
	1.1.7.1
	1.1.8.1
	1.1.9.1
	1.1.10.1
	1.1.11.1
	1.1.12.1
	1.1.13.1;
next	;

1.1.1.1
date	96.09.13.11.25.23;	author hope;	state Exp;
branches;
next	;

1.1.2.1
date	96.10.07.16.15.47;	author hope;	state Exp;
branches;
next	;

1.1.3.1
date	96.10.17.11.35.13;	author hope;	state Exp;
branches;
next	;

1.1.4.1
date	96.11.14.13.00.52;	author hope;	state Exp;
branches
	1.1.4.1.1.1;
next	;

1.1.4.1.1.1
date	96.11.28.15.10.55;	author hope;	state Exp;
branches;
next	;

1.1.5.1
date	96.11.22.18.18.43;	author hope;	state Exp;
branches;
next	;

1.1.6.1
date	96.12.17.10.05.25;	author hope;	state Exp;
branches;
next	;

1.1.7.1
date	96.12.17.17.56.59;	author hope;	state Exp;
branches
	1.1.7.1.1.1;
next	;

1.1.7.1.1.1
date	97.02.24.11.48.39;	author hope;	state Exp;
branches;
next	;

1.1.8.1
date	96.12.18.09.51.39;	author hope;	state Exp;
branches;
next	;

1.1.9.1
date	97.05.12.10.45.21;	author hope;	state Exp;
branches
	1.1.9.1.1.1
	1.1.9.1.2.1
	1.1.9.1.3.1;
next	;

1.1.9.1.1.1
date	97.07.28.18.25.33;	author daveb;	state Exp;
branches
	1.1.9.1.1.1.1.1;
next	;

1.1.9.1.1.1.1.1
date	97.10.07.11.51.24;	author jkbrook;	state Exp;
branches;
next	;

1.1.9.1.2.1
date	97.09.08.17.18.46;	author daveb;	state Exp;
branches;
next	;

1.1.9.1.3.1
date	97.09.09.14.14.54;	author daveb;	state Exp;
branches;
next	;

1.1.10.1
date	97.09.10.19.31.41;	author brucem;	state Exp;
branches;
next	;

1.1.11.1
date	97.09.11.21.01.05;	author daveb;	state Exp;
branches;
next	;

1.1.12.1
date	97.10.31.13.44.05;	author nickb;	state Exp;
branches;
next	;

1.1.13.1
date	99.04.01.18.00.58;	author daveb;	state Exp;
branches;
next	;


desc
@new file
@


1.1
log
@new file
@
text
@!
!  A multiply routine rewritten by NickH
!
!
!
! Revision Log
! ------------
! $Log: src:arch:SPARC:intmul.S,v $
! Revision 1.5  1994/09/13  14:20:54  nickb
! Rewrite this routine to be called directly from ML, not through
! C as before (huge speedups seen).
!
! Revision 1.4  1994/07/06  13:38:02  nickh
! Asm and C name prefixes differ according to OS.
!
! Revision 1.3  1994/07/04  12:18:31  nickh
! Fix comment prefix in log.
!
! Revision 1.2  1994/06/09  14:30:37  nickh
! new file
!
! Revision 1.1  1994/06/09  10:55:09  nickh
! new file
!
!
!

#include "naming.h"

	.text
	.align 4
	.global C_NAME(mach_int_mul)
C_NAME(mach_int_mul):	

/* We are passed an ML pair containing the multiplier and mutiplicand
as ML ints. We untag the multiplier, so that the product is the
correct ML product. We case on the multiplier to choose how many
multiply steps to do (according to whether there are 4, 8, 12, 16, or
more significant bits). We do the multiply steps, then extract the
result and test for overflow. We avoid using the closure register
o1. The multiplication corrupts registers o4 and o5, so we have to
clear those on the way out. */

	ld	[%o0+3],%o2		/* get cdr of arg into o2 */
	ld	[%o0-1],%o0		/* get car of arg into o0 */
	sra	%o0, 2, %o0		/* shift multiplier by 2 */
	mov	%o0, %y			/* do the multiply.... */
	andncc	%o0, 0xf, %o4
	be	mul_4_bits_only		/* 4 bits */
	sethi	%hi(0xffff0000), %o5	
	andncc	%o0, 0xff, %o4
	be,a	 mul_8_bits_only	/* 8 bits */
	mulscc	%o4, %o2, %o4
	andncc	%o0, 0xfff, %o4
	be,a	 mul_12_bits_only	/* 12 bits */
	mulscc	%o4, %o2, %o4
	andcc	%o0, %o5, %o4
	be,a	 mul_16_bits_only	/* 16 bits */
	mulscc	%o4, %o2, %o4		
	andcc	%g0, %g0, %o4		/* clear o4 and the flags */
	mulscc	%o4, %o2, %o4		/* a full set of multiply steps ... */
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %g0, %o4
	tst	%o0
	rd	%y, %o0			/* get low bits out of y */
	bge	mul_non_neg_multiplier	/* if multiplier negative ... */
	tst	%o0
	sub	%o4, %o2, %o4	/* ... subtract multiplicand from high bits */
	
mul_non_neg_multiplier:
	bge,a	mul_pos_result+4/* if low bits positive, go to pos_result */
	addcc	%o4, %g0, %g0	/* set zero flag if the high word is zero */

mul_neg_result:				/* otherwise result is negative */
	cmp	%o4, -1			/* if high word not -1 ... */
	bnz 	mach_int_mul_overflow	/* ... overflow */
	mov	%g0, %o4		/* otherwise return clearing o4/o5 */
	retl
	mov	%g0, %o5
	
mul_8_bits_only:		/* get here having done one multiply step */
	
	mulscc	%o4, %o2, %o4	/* 8 more multiply steps */
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %g0, %o4
	rd	%y, %o5		/* get result out of y and o4 */
	sll	%o4, 8, %o0
	srl	%o5, 0x18, %o5
	orcc	%o5, %o0, %o0
	bge	mul_pos_result	/* if low bits positive */
	sra	%o4, 0x18, %o4
	cmp	%o4, -1			/* if high word not -1 ... */
	bnz 	mach_int_mul_overflow	/* ... overflow */
	mov	%g0, %o4		/* otherwise return clearing o4/o5 */
	retl
	mov	%g0, %o5
	
mul_12_bits_only:		/* get here having done one multiply step */
	
	mulscc	%o4, %o2, %o4	/* 12 more multiply steps */
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %g0, %o4
	rd	%y, %o5		/* get result out of y and o4 */
	sll	%o4, 0xc, %o0
	srl	%o5, 0x14, %o5
	orcc	%o5, %o0, %o0
	bge	mul_pos_result		/* if low bits +ve, result +ve */
	sra	%o4, 0x14, %o4
	cmp	%o4, -1			/* if high word not -1 ... */
	bnz 	mach_int_mul_overflow	/* ... overflow */
	mov	%g0, %o4		/* otherwise return clearing o4/o5 */
	retl
	mov	%g0, %o5
	
mul_16_bits_only:		/* get here having done one multiply step */
	
	mulscc	%o4, %o2, %o4	/* 16 more multiply steps */
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %g0, %o4
	rd	%y, %o5		/* get result out of y and o4 */
	sll	%o4, 0x10, %o0
	srl	%o5, 0x10, %o5
	orcc	%o5, %o0, %o0
	bge	mul_pos_result	/* if low bits +ve, result +ve */
	sra	%o4, 0x10, %o4
	cmp	%o4, -1			/* if high word not -1 ... */
	bnz 	mach_int_mul_overflow	/* ... overflow */
	mov	%g0, %o4		/* otherwise return clearing o4/o5 */
	retl
	mov	%g0, %o5
	
mul_4_bits_only:
	
	mulscc	%o4, %o2, %o4	/* do 5 multiply steps */
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %o2, %o4
	mulscc	%o4, %g0, %o4
	rd	%y, %o5		/* get result out of y and o4 */
	sll	%o4, 4, %o0
	srl	%o5, 0x1c, %o5
	orcc	%o5, %o0, %o0
	bl	mul_neg_result	/* if low bits negative, result is negative */
	sra	%o4, 0x1c, %o4
	
mul_pos_result:
	addcc	%o4, %g0, %g0 		/* if high word is not zero ... */
	bnz,a	mach_int_mul_overflow   /* ... overflow */
	mov	%g0, %o4		
	retl				/* otherwise, clear o5 and return */
	mov	%g0, %o5

mach_int_mul_overflow:

	sethi	%hi(C_NAME(perv_exn_ref_prod)), %o5
	or	%o5, %lo(C_NAME(perv_exn_ref_prod)), %o5
	ld	[%o5], %o4			/* perv_exn_ref_prod */
	call 	C_NAME(ml_raise_leaf)		/* raise the exception */
	ld	[%o4 + 9], %o0			/* DEREF(perv_exn_ref_prod) */
@


1.1.13.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@d8 1
a8 4
! $Log: src:arch:I386:intmul.S,v $
# Revision 1.1  1994/10/04  16:50:54  jont
# new file
#
@


1.1.12.1
log
@branched from trunk for label MLWorks_MM_adapt
@
text
@d8 1
a8 4
! $Log: src:arch:I386:intmul.S,v $
# Revision 1.1  1994/10/04  16:50:54  jont
# new file
#
@


1.1.11.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@d8 1
a8 4
! $Log: src:arch:I386:intmul.S,v $
# Revision 1.1  1994/10/04  16:50:54  jont
# new file
#
@


1.1.10.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@d8 1
a8 4
! $Log: src:arch:I386:intmul.S,v $
# Revision 1.1  1994/10/04  16:50:54  jont
# new file
#
@


1.1.9.1
log
@branched from 1.1
@
text
@d8 1
a8 4
! $Log: src:arch:I386:intmul.S,v $
# Revision 1.1  1994/10/04  16:50:54  jont
# new file
#
@


1.1.9.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a8 3
# Revision 1.1.9.1  1997/05/12  10:45:21  hope
# branched from 1.1
#
@


1.1.9.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a8 3
# Revision 1.1.9.1  1997/05/12  10:45:21  hope
# branched from 1.1
#
@


1.1.9.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a8 3
# Revision 1.1.9.1  1997/05/12  10:45:21  hope
# branched from 1.1
#
@


1.1.9.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a8 3
# Revision 1.1.9.1.1.1  1997/07/28  18:25:33  daveb
# branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
#
@


1.1.8.1
log
@branched from 1.1
@
text
@d8 1
a8 4
! $Log: src:arch:I386:intmul.S,v $
# Revision 1.1  1994/10/04  16:50:54  jont
# new file
#
@


1.1.7.1
log
@branched from 1.1
@
text
@d8 1
a8 4
! $Log: src:arch:I386:intmul.S,v $
# Revision 1.1  1994/10/04  16:50:54  jont
# new file
#
@


1.1.7.1.1.1
log
@branched from 1.1.7.1
@
text
@a8 3
# Revision 1.1.7.1  1996/12/17  17:56:59  hope
# branched from 1.1
#
@


1.1.6.1
log
@branched from 1.1
@
text
@d8 1
a8 4
! $Log: src:arch:I386:intmul.S,v $
# Revision 1.1  1994/10/04  16:50:54  jont
# new file
#
@


1.1.5.1
log
@branched from 1.1
@
text
@d8 1
a8 4
! $Log: src:arch:I386:intmul.S,v $
# Revision 1.1  1994/10/04  16:50:54  jont
# new file
#
@


1.1.4.1
log
@branched from 1.1
@
text
@d8 1
a8 4
! $Log: src:arch:I386:intmul.S,v $
# Revision 1.1  1994/10/04  16:50:54  jont
# new file
#
@


1.1.4.1.1.1
log
@branched from 1.1.4.1
@
text
@a8 3
# Revision 1.1.4.1  1996/11/14  13:00:52  hope
# branched from 1.1
#
@


1.1.3.1
log
@branched from 1.1
@
text
@d8 1
a8 4
! $Log: src:arch:I386:intmul.S,v $
# Revision 1.1  1994/10/04  16:50:54  jont
# new file
#
@


1.1.2.1
log
@branched from 1.1
@
text
@d8 1
a8 4
! $Log: src:arch:I386:intmul.S,v $
# Revision 1.1  1994/10/04  16:50:54  jont
# new file
#
@


1.1.1.1
log
@branched from 1.1
@
text
@d8 1
a8 4
! $Log: src:arch:I386:intmul.S,v $
# Revision 1.1  1994/10/04  16:50:54  jont
# new file
#
@
