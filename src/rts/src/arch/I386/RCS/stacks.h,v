head	1.7;
access;
symbols
	MLW_daveb_inline_1_4_99:1.7.1
	MLWorks_21c0_1999_03_25:1.7
	MLWorks_20c1_1998_08_20:1.7
	MLWorks_20c0_1998_08_04:1.7
	MLWorks_20b2c2_1998_06_19:1.7
	MLWorks_20b2_Windows_1998_06_12:1.7
	MLWorks_20b1c1_1998_05_07:1.7
	MLWorks_20b0_1998_04_07:1.7
	MLWorks_20b0_1998_03_20:1.7
	MLWorks_20m2_1998_02_16:1.6
	MLWorks_MM_adapt:1.6.11
	MLWorks_20m1_1997_10_23:1.6
	MLWorks_11r1:1.6.8.1.1.1.1
	MLWorks_workspace_97:1.6.10
	MLWorks_dt_wizard:1.6.9
	MLWorks_11c0_1997_09_09:1.6.8.1.1.1
	MLWorks_10r3:1.6.8.1.3
	MLWorks_10r2_551:1.6.8.1.2
	MLWorks_11:1.6.8.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.6.8.1
	MLWorks_20m0_1997_06_20:1.6
	MLWorks_1_0_r2c2_1997_06_14:1.6.8.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.6.8.1
	MLWorks_1_0_r2c1_1997_05_12:1.6.8
	MLWorks_BugFix_1997_04_24:1.6
	MLWorks_1_0_r2_Win32_1997_04_11:1.6
	MLWorks_1_0_r2_Unix_1997_04_04:1.6
	MM_ML_release_korma_1997_04_01:1.6
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.6.6.1.1
	MLWorks_gui_1996_12_18:1.6.7
	MLWorks_1_0_Win32_1996_12_17:1.6.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.6.3.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.6.3.1
	JFHrts:1.6.5
	MLWorks_1_0_Irix_1996_11_28:1.6.3.1.1
	MLWorks_1_0_Win32_1996_11_22:1.6.4
	MLWorks_1_0_Unix_1996_11_14:1.6.3
	MLWorks_Open_Beta2_1996_10_11:1.6.2
	MLWorks_License_dev:1.6.1
	MLWorks_1_open_beta_1996_09_13:1.5.1
	MLWorks_Open_Beta_1996_08_22:1.5
	MLWorks_Beta_1996_07_02:1.5
	MLWorks_Beta_1996_06_07:1.5
	MLWorks_Beta_1996_06_06:1.5
	MLWorks_Beta_1996_06_05:1.5
	MLWorks_Beta_1996_06_03:1.5
	MLWorks_Beta_1996_05_31:1.5
	MLWorks_Beta_1996_05_30:1.5;
locks; strict;
comment	@ * @;


1.7
date	98.03.03.17.13.20;	author jont;	state Exp;
branches
	1.7.1.1;
next	1.6;

1.6
date	96.10.04.15.23.52;	author stephenb;	state Exp;
branches
	1.6.1.1
	1.6.2.1
	1.6.3.1
	1.6.4.1
	1.6.5.1
	1.6.6.1
	1.6.7.1
	1.6.8.1
	1.6.9.1
	1.6.10.1
	1.6.11.1;
next	1.5;

1.5
date	96.02.14.12.52.45;	author nickb;	state Exp;
branches
	1.5.1.1;
next	1.4;

1.4
date	95.05.05.08.33.13;	author nickb;	state Exp;
branches;
next	1.3;

1.3
date	95.03.15.14.51.55;	author nickb;	state Exp;
branches;
next	1.2;

1.2
date	94.10.07.11.03.13;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	94.10.04.16.54.21;	author jont;	state Exp;
branches;
next	;

1.5.1.1
date	96.09.13.11.21.41;	author hope;	state Exp;
branches;
next	;

1.6.1.1
date	96.10.07.16.11.43;	author hope;	state Exp;
branches;
next	;

1.6.2.1
date	96.10.17.11.30.25;	author hope;	state Exp;
branches;
next	;

1.6.3.1
date	96.11.14.12.56.22;	author hope;	state Exp;
branches
	1.6.3.1.1.1;
next	;

1.6.3.1.1.1
date	96.11.28.15.06.49;	author hope;	state Exp;
branches;
next	;

1.6.4.1
date	96.11.22.18.14.30;	author hope;	state Exp;
branches;
next	;

1.6.5.1
date	96.12.17.10.01.18;	author hope;	state Exp;
branches;
next	;

1.6.6.1
date	96.12.17.17.53.01;	author hope;	state Exp;
branches
	1.6.6.1.1.1;
next	;

1.6.6.1.1.1
date	97.02.24.11.43.54;	author hope;	state Exp;
branches;
next	;

1.6.7.1
date	96.12.18.09.47.36;	author hope;	state Exp;
branches;
next	;

1.6.8.1
date	97.05.12.10.39.59;	author hope;	state Exp;
branches
	1.6.8.1.1.1
	1.6.8.1.2.1
	1.6.8.1.3.1;
next	;

1.6.8.1.1.1
date	97.07.28.18.26.27;	author daveb;	state Exp;
branches
	1.6.8.1.1.1.1.1;
next	;

1.6.8.1.1.1.1.1
date	97.10.07.11.52.18;	author jkbrook;	state Exp;
branches;
next	;

1.6.8.1.2.1
date	97.09.08.17.19.39;	author daveb;	state Exp;
branches;
next	;

1.6.8.1.3.1
date	97.09.09.14.15.45;	author daveb;	state Exp;
branches;
next	;

1.6.9.1
date	97.09.10.19.32.59;	author brucem;	state Exp;
branches;
next	;

1.6.10.1
date	97.09.11.21.02.15;	author daveb;	state Exp;
branches;
next	;

1.6.11.1
date	97.10.31.13.45.06;	author nickb;	state Exp;
branches;
next	;

1.7.1.1
date	99.04.01.18.01.41;	author daveb;	state Exp;
branches;
next	;


desc
@new file
@


1.7
log
@[Bug #70018]
Split stack_crawl into two phases
@
text
@/*  === SPARC STACK ROUTINES ===
 *
 *  Copyright (C) 1994 Harlequin Ltd
 *
 *  Description
 *  -----------
 * All architecture-dependent routines that deal with the stack.
 *
 *  Revision Log
 *  ------------
 *  $Log: src:arch:I386:stacks.h,v $
 * Revision 1.6  1996/10/04  15:23:52  stephenb
 * Add a cross reference to some mlworks mail about the lr field
 * in the stack_frame.
 *
 * Revision 1.5  1996/02/14  12:52:45  nickb
 * Add heap-exploration hooks.
 *
 * Revision 1.4  1995/05/05  08:33:13  nickb
 * Add is_stack_top
 *
 * Revision 1.3  1995/03/15  14:51:55  nickb
 * Introduce the threads system.
 *
 * Revision 1.2  1994/10/07  11:03:13  jont
 * Make it Intel architecture specific
 *
 *
 */

#ifndef stacks_h
#define stacks_h

#include "types.h"
#include "mltypes.h"
#include "threads.h"
#include <stdio.h>

/* An ML stack frame for the Intel 386.
 *
 * Note that the lr field does not really contain the return address.
 * The return address is really at the top of the frame i.e.
 * in ((word *)(sp->fp))-4, since that is where the CALL instruction
 * puts it.
 *
 * Why is the lr field here if it isn't used?  Well once it was used,
 * and since it was discovered it probably isn't, nobody has taken the time 
 * to ensure that nothing breaks if it is taken out.  See
 * mlworks.mail.823[234] for the source of this tidbit of information.
 * - stephenb
 */

struct stack_frame
{
  struct stack_frame *fp;
  word closure;
  word lr;			/* not the return address, see above */
};




/* stack_crawl is part of the GC. It crawls over the stack, fixing up
 * ML values, using the macros in fixup.h
 * The first phase converts return addresses into code offsets,
 * in case the code moves.
 * The second phase does all the fixup work, including
 * converting the return offsets back into addresses.
 */

extern void stack_crawl_phase_one(void);
extern mlval *stack_crawl_phase_two(mlval *to);

/*  == Stack backtrace ==  */

extern int max_backtrace_depth;

extern void backtrace(struct stack_frame *sp,
		      struct thread_state *thread,
		      int depth_max);

/* This macro and function can be used for crawling around on a stack
 * (e.g. in the profiler) */

/* is_stack_top(sp,thread) is true if sp is the top of the stack for
   that thread; i.e. sp does not point to a genuine frame. */

#define is_stack_top(sp, thread)     ((!(sp)) ||			      \
				      ((word)(sp) ==			      \
				       (thread)->ml_state.stack_top))

/* is_ml_frame(sp) returns the code item of the closure contained
 * within the indicated frame, or MLUNIT if there is no such
 * closure. It should only be called if is_stack_top(sp,thread) is
 * false */

extern mlval is_ml_frame(struct stack_frame *sp);

#ifdef EXPLORER

/* explore_stacks() scans the stacks, locating GC roots for the
 * explorer.  It calls explore_stack_registers() on each area of
 * GCable registers, and explore_stack_allocated(begin,end) on each
 * stack allocated area */

extern void explore_stacks(void);

#endif

extern void stacks_init(void);

#endif
@


1.7.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a11 4
 * Revision 1.7  1998/03/03  17:13:20  jont
 * [Bug #70018]
 * Split stack_crawl into two phases
 *
@


1.6
log
@Add a cross reference to some mlworks mail about the lr field
in the stack_frame.
@
text
@d12 4
d64 6
a69 1
 * ML values, using the macros in fixup.h */
d71 2
a72 1
extern mlval *stack_crawl (mlval *to);
@


1.6.11.1
log
@branched from trunk for label MLWorks_MM_adapt
@
text
@a11 4
 * Revision 1.6  1996/10/04  15:23:52  stephenb
 * Add a cross reference to some mlworks mail about the lr field
 * in the stack_frame.
 *
@


1.6.10.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a11 4
 * Revision 1.6  1996/10/04  15:23:52  stephenb
 * Add a cross reference to some mlworks mail about the lr field
 * in the stack_frame.
 *
@


1.6.9.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a11 4
 * Revision 1.6  1996/10/04  15:23:52  stephenb
 * Add a cross reference to some mlworks mail about the lr field
 * in the stack_frame.
 *
@


1.6.8.1
log
@branched from 1.6
@
text
@a11 4
 * Revision 1.6  1996/10/04  15:23:52  stephenb
 * Add a cross reference to some mlworks mail about the lr field
 * in the stack_frame.
 *
@


1.6.8.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a11 3
 * Revision 1.6.8.1  1997/05/12  10:39:59  hope
 * branched from 1.6
 *
@


1.6.8.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a11 3
 * Revision 1.6.8.1  1997/05/12  10:39:59  hope
 * branched from 1.6
 *
@


1.6.8.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a11 3
 * Revision 1.6.8.1  1997/05/12  10:39:59  hope
 * branched from 1.6
 *
@


1.6.8.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a11 3
 * Revision 1.6.8.1.1.1  1997/07/28  18:26:27  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.6.7.1
log
@branched from 1.6
@
text
@a11 4
 * Revision 1.6  1996/10/04  15:23:52  stephenb
 * Add a cross reference to some mlworks mail about the lr field
 * in the stack_frame.
 *
@


1.6.6.1
log
@branched from 1.6
@
text
@a11 4
 * Revision 1.6  1996/10/04  15:23:52  stephenb
 * Add a cross reference to some mlworks mail about the lr field
 * in the stack_frame.
 *
@


1.6.6.1.1.1
log
@branched from 1.6.6.1
@
text
@a11 3
 * Revision 1.6.6.1  1996/12/17  17:53:01  hope
 * branched from 1.6
 *
@


1.6.5.1
log
@branched from 1.6
@
text
@a11 4
 * Revision 1.6  1996/10/04  15:23:52  stephenb
 * Add a cross reference to some mlworks mail about the lr field
 * in the stack_frame.
 *
@


1.6.4.1
log
@branched from 1.6
@
text
@a11 4
 * Revision 1.6  1996/10/04  15:23:52  stephenb
 * Add a cross reference to some mlworks mail about the lr field
 * in the stack_frame.
 *
@


1.6.3.1
log
@branched from 1.6
@
text
@a11 4
 * Revision 1.6  1996/10/04  15:23:52  stephenb
 * Add a cross reference to some mlworks mail about the lr field
 * in the stack_frame.
 *
@


1.6.3.1.1.1
log
@branched from 1.6.3.1
@
text
@a11 3
 * Revision 1.6.3.1  1996/11/14  12:56:22  hope
 * branched from 1.6
 *
@


1.6.2.1
log
@branched from 1.6
@
text
@a11 4
 * Revision 1.6  1996/10/04  15:23:52  stephenb
 * Add a cross reference to some mlworks mail about the lr field
 * in the stack_frame.
 *
@


1.6.1.1
log
@branched from 1.6
@
text
@a11 4
 * Revision 1.6  1996/10/04  15:23:52  stephenb
 * Add a cross reference to some mlworks mail about the lr field
 * in the stack_frame.
 *
@


1.5
log
@Add heap-exploration hooks.
@
text
@d12 3
d35 13
a47 1
/*  == Intel 386 stack frame == */
d53 1
a53 1
  word lr;			/* Note that actually lr is at the top of the frame */
d55 3
@


1.5.1.1
log
@branched from 1.5
@
text
@a11 3
 * Revision 1.5  1996/02/14  12:52:45  nickb
 * Add heap-exploration hooks.
 *
@


1.4
log
@Add is_stack_top
@
text
@d12 3
d70 11
@


1.3
log
@Introduce the threads system.
@
text
@d12 3
d51 14
a64 4
/*  This function examines a stack frame to determine whether it is that of
 *  an ML function, and returns the functions code vector if so.  Otherwise
 *  it returns MLUNIT.
 */
@


1.2
log
@Make it Intel architecture specific
@
text
@d11 3
a13 1
 *  $Log$
d15 1
d23 1
a34 2
extern struct stack_frame *top_stack_pointer; /* The first stack top in the world */

d44 3
a46 1
extern void backtrace(FILE *stream, struct stack_frame *sp, int depth_max);
@


1.1
log
@new file
@
text
@d11 1
a11 3
 *  $Log: src:arch:SPARC:stacks.h,v $
 * Revision 1.2  1994/06/09  14:29:24  nickh
 * new file
a12 4
 * Revision 1.1  1994/06/09  10:53:50  nickh
 * new file
 *
 *
d20 1
d22 1
a22 1
/*  == Sparc stack frame == */
a25 2
  word l0, l1, l2, l3, l4, l5, l6, l7;
  word i0, closure, i2, i3, i4, i5;
d27 2
a28 1
  word lr;
d30 2
@
