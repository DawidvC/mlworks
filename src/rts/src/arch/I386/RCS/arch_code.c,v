head	1.4;
access;
symbols
	MLW_daveb_inline_1_4_99:1.4.1
	MLWorks_21c0_1999_03_25:1.4
	MLWorks_20c1_1998_08_20:1.3
	MLWorks_20c0_1998_08_04:1.3
	MLWorks_20b2c2_1998_06_19:1.3
	MLWorks_20b2_Windows_1998_06_12:1.3
	MLWorks_20b1c1_1998_05_07:1.3
	MLWorks_20b0_1998_04_07:1.3
	MLWorks_20b0_1998_03_20:1.3
	MLWorks_20m2_1998_02_16:1.3
	MLWorks_MM_adapt:1.3.4
	MLWorks_20m1_1997_10_23:1.3
	MLWorks_11r1:1.3.1.1.1.1.1
	MLWorks_workspace_97:1.3.3
	MLWorks_dt_wizard:1.3.2
	MLWorks_11c0_1997_09_09:1.3.1.1.1.1
	MLWorks_10r3:1.3.1.1.3
	MLWorks_10r2_551:1.3.1.1.2
	MLWorks_11:1.3.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.3.1.1
	MLWorks_20m0_1997_06_20:1.3
	MLWorks_1_0_r2c2_1997_06_14:1.3.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.3.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.3.1
	MLWorks_BugFix_1997_04_24:1.3
	MLWorks_1_0_r2_Win32_1997_04_11:1.3
	MLWorks_1_0_r2_Unix_1997_04_04:1.3
	MM_ML_release_korma_1997_04_01:1.3
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.2.7.1.1
	MLWorks_gui_1996_12_18:1.2.8
	MLWorks_1_0_Win32_1996_12_17:1.2.7
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.2.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.2.4.1
	JFHrts:1.2.6
	MLWorks_1_0_Irix_1996_11_28:1.2.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.2.5
	MLWorks_1_0_Unix_1996_11_14:1.2.4
	MLWorks_Open_Beta2_1996_10_11:1.2.3
	MLWorks_License_dev:1.2.2
	MLWorks_1_open_beta_1996_09_13:1.2.1
	MLWorks_Open_Beta_1996_08_22:1.2
	MLWorks_Beta_1996_07_02:1.2
	MLWorks_Beta_1996_06_07:1.2
	MLWorks_Beta_1996_06_06:1.2
	MLWorks_Beta_1996_06_05:1.2
	MLWorks_Beta_1996_06_03:1.2
	MLWorks_Beta_1996_05_31:1.2
	MLWorks_Beta_1996_05_30:1.2;
locks; strict;
comment	@ * @;


1.4
date	98.08.21.14.54.07;	author jont;	state Exp;
branches
	1.4.1.1;
next	1.3;

1.3
date	96.12.19.13.25.53;	author nickb;	state Exp;
branches
	1.3.1.1
	1.3.2.1
	1.3.3.1
	1.3.4.1;
next	1.2;

1.2
date	95.12.13.11.36.51;	author nickb;	state Exp;
branches
	1.2.1.1
	1.2.2.1
	1.2.3.1
	1.2.4.1
	1.2.5.1
	1.2.6.1
	1.2.7.1
	1.2.8.1;
next	1.1;

1.1
date	95.12.12.17.53.14;	author nickb;	state Exp;
branches;
next	;

1.2.1.1
date	96.09.13.11.22.21;	author hope;	state Exp;
branches;
next	;

1.2.2.1
date	96.10.07.16.12.28;	author hope;	state Exp;
branches;
next	;

1.2.3.1
date	96.10.17.11.31.28;	author hope;	state Exp;
branches;
next	;

1.2.4.1
date	96.11.14.12.57.24;	author hope;	state Exp;
branches
	1.2.4.1.1.1;
next	;

1.2.4.1.1.1
date	96.11.28.15.07.33;	author hope;	state Exp;
branches;
next	;

1.2.5.1
date	96.11.22.18.15.14;	author hope;	state Exp;
branches;
next	;

1.2.6.1
date	96.12.17.10.02.01;	author hope;	state Exp;
branches;
next	;

1.2.7.1
date	96.12.17.17.53.44;	author hope;	state Exp;
branches
	1.2.7.1.1.1;
next	;

1.2.7.1.1.1
date	97.02.24.11.44.45;	author hope;	state Exp;
branches;
next	;

1.2.8.1
date	96.12.18.09.48.19;	author hope;	state Exp;
branches;
next	;

1.3.1.1
date	97.05.12.10.40.42;	author hope;	state Exp;
branches
	1.3.1.1.1.1
	1.3.1.1.2.1
	1.3.1.1.3.1;
next	;

1.3.1.1.1.1
date	97.07.28.18.28.05;	author daveb;	state Exp;
branches
	1.3.1.1.1.1.1.1;
next	;

1.3.1.1.1.1.1.1
date	97.10.07.11.54.00;	author jkbrook;	state Exp;
branches;
next	;

1.3.1.1.2.1
date	97.09.08.17.21.04;	author daveb;	state Exp;
branches;
next	;

1.3.1.1.3.1
date	97.09.09.14.17.10;	author daveb;	state Exp;
branches;
next	;

1.3.2.1
date	97.09.10.19.35.48;	author brucem;	state Exp;
branches;
next	;

1.3.3.1
date	97.09.11.21.04.16;	author daveb;	state Exp;
branches;
next	;

1.3.4.1
date	97.10.31.13.47.21;	author nickb;	state Exp;
branches;
next	;

1.4.1.1
date	99.04.01.18.03.09;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
Trial implementation of space profiling code.
@


1.4
log
@[Bug #20133]
Stop modifying code vectors for space profiling
@
text
@/* rts/src/arch/$ARCH/arch_code.c
 *
 * Functions for recognising and manipulating architecture-specific code
 * sequences.
 * 
 * Copyright (C) 1995 Harlequin Ltd.
 *
 * $Log: src:arch:I386:arch_code.c,v $
 * Revision 1.3  1996/12/19  13:25:53  nickb
 * Add instruction cache flushing.
 *
 * Revision 1.2  1995/12/13  11:36:51  nickb
 * OK, now let's make it work.
 *
 * Revision 1.1  1995/12/12  17:53:14  nickb
 * new unit
 * Trial implementation of space profiling code.
 *
 */

#include "tags.h"
#include "mltypes.h"
#include "values.h"
#include "utils.h"
#include "extensions.h"
#include "environment.h"
#include "arch_code.h"
#include "i386_code.h"
#include "offsets.h"

/* Space profiling code vectors.
 *
 * We manipulate allocation sequences in code objects so that they all
 * cause a transfer of control to bits of code in the runtime which
 * record the allocation.
 *
 * We have to provide transformations in each direction. */

/*

Non-profiled allocation sequences:

	...
3bxx54	cmp	reg, gc_limit(thread)
	...
ff5604	call 	ml_gc(thread)

Profiled allocation sequences replace the comparison and the call:

3bxx54 cmp	reg, gc_limit(thread)

becomes

3bxxyy cmo	reg, gc_base(thread)	; the jb is never taken

ff5604	call	ml_gc(thread)

becomes

ff56xx	call	ml_profile_alloc(thread)

*/

#define CMP_BYTE_1	0x3b
#define CMP_BYTE_2_MASK	0xc7
#define CMP_BYTE_2_TEST	0x46
#define CMP_BYTE_3	IMPLICIT_gc_limit

#define PROF_CMP_BYTE_3	IMPLICIT_gc_base

#define CALL_BYTE_1	0xff
#define CALL_BYTE_2	0x56
#define CALL_BYTE_3	IMPLICIT_gc

#define PROF_CALL_BYTE_3 IMPLICIT_profile_alloc

/* Adding space profiling */

static inline int add_space_profiling (word *from, word *to)
{
  byte *p = (byte*) from;
  register byte *q = (byte*) to;
  register int replace_cmp = 0, replace_call = 0;

  for( ; p < q ; ) { 
    if (p[0] == CMP_BYTE_1 &&
	((p[1] & CMP_BYTE_2_MASK) == CMP_BYTE_2_TEST) &&
	p[2] == CMP_BYTE_3) {
      replace_cmp++;
      p[2] = PROF_CMP_BYTE_3;
    } else if (p[0] == CALL_BYTE_1 &&
	       p[1] == CALL_BYTE_2 &&
	       p[2] == CALL_BYTE_3) {
      replace_call++;
      p[2] = PROF_CALL_BYTE_3;
    }
    if (!read_instr(&p))
      error("Code replacement from 0x%08x to 0x%08x "
	    "found unreadable code at 0x%08x", from, to, p);
  }
  if (replace_cmp != replace_call)
    error("Code replacement from 0x%08x to 0x%08x found %d/%d mismatch",
	  from, to, replace_cmp, replace_call);

  return replace_cmp;
}

/* Removing space profiling */

static inline int remove_space_profiling (word *from, word *to)
{
  byte *p = (byte*) from;
  register byte *q = (byte*) to;
  register int replace_cmp = 0, replace_call = 0;

  for( ; p < q ; ) { 
    if (p[0] == CMP_BYTE_1 &&
	((p[1] & CMP_BYTE_2_MASK) == CMP_BYTE_2_TEST) &&
	p[2] == PROF_CMP_BYTE_3) {
      replace_cmp++;
      p[2] = CMP_BYTE_3;
    } else if (p[0] == CALL_BYTE_1 &&
	       p[1] == CALL_BYTE_2 &&
	       p[2] == PROF_CALL_BYTE_3) {
      replace_call++;
      p[2] = CALL_BYTE_3;
    }
    if (!read_instr(&p))
      error("Code replacement from 0x%08x to 0x%08x "
	    "found unreadable code at 0x%08x", from, to, p);
  }
  if (replace_cmp != replace_call)
    error("Code replacement from 0x%08x to 0x%08x found %d/%d mismatch",
	  from, to, replace_cmp, replace_call);

  return replace_cmp;
}

static void first_and_last_instructions(word**first, word **last,
					mlval codepointer)
{
  mlval codeobject  = FOLLOWBACK(codepointer);
  mlval ancillaries = CCVANCILLARY(codeobject);
  mlval profiles = FIELD(ancillaries,ANC_PROFILES);
  size_t length = NFIELDS(profiles);
  unsigned int codenumber = CCODENUMBER(codepointer);
  
  *first = (word*) (codepointer-POINTER+8);
  *last = NULL;

  if (length == codenumber+1) {
    mlval header = *(mlval*)(codeobject-POINTER);
    *last = ((word*) (codeobject-POINTER))+LENGTH(header)-1;
  } else {
    word *p = *first;
    size_t offset = (codepointer-codeobject+8);
    for(; p+=2, offset += 8; ) {
      word w = *p;
      if (SECONDARY(w) == BACKPTR && LENGTH(w) == offset) {
	*last = p-1;
	break;
      }
    }
    if (*last == NULL)
      error ("no backptr found!\n");
  }
}

extern int arch_space_unprofile_code(mlval codepointer)
{
  word *first_instruction, *last_instruction;
  int changes;
  first_and_last_instructions(&first_instruction, &last_instruction,
			      codepointer);
  changes = remove_space_profiling(first_instruction, last_instruction);
  /* would flush icache here if that was meaningful on x86 */
  return changes;
}
    
extern int arch_space_profile_code(mlval codepointer)
{
#ifdef SPACE_PROFILE_OVERFLOW
  return 0;
#else
  word *first_instruction, *last_instruction;
  int changes;
  first_and_last_instructions(&first_instruction, &last_instruction,
			      codepointer);
  changes = add_space_profiling(first_instruction, last_instruction);
  /* would flush icache here if that was meaningful on x86 */
  return changes;
#endif  
}
@


1.4.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a8 4
 * Revision 1.4  1998/08/21  14:54:07  jont
 * [Bug #20133]
 * Stop modifying code vectors for space profiling
 *
@


1.3
log
@Add instruction cache flushing.
@
text
@d9 3
d182 3
d192 1
a192 1
  
@


1.3.4.1
log
@branched from trunk for label MLWorks_MM_adapt
@
text
@a8 3
 * Revision 1.3  1996/12/19  13:25:53  nickb
 * Add instruction cache flushing.
 *
@


1.3.3.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a8 3
 * Revision 1.3  1996/12/19  13:25:53  nickb
 * Add instruction cache flushing.
 *
@


1.3.2.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a8 3
 * Revision 1.3  1996/12/19  13:25:53  nickb
 * Add instruction cache flushing.
 *
@


1.3.1.1
log
@branched from 1.3
@
text
@a8 3
 * Revision 1.3  1996/12/19  13:25:53  nickb
 * Add instruction cache flushing.
 *
@


1.3.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a8 3
 * Revision 1.3.1.1  1997/05/12  10:40:42  hope
 * branched from 1.3
 *
@


1.3.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a8 3
 * Revision 1.3.1.1  1997/05/12  10:40:42  hope
 * branched from 1.3
 *
@


1.3.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a8 3
 * Revision 1.3.1.1  1997/05/12  10:40:42  hope
 * branched from 1.3
 *
@


1.3.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a8 3
 * Revision 1.3.1.1.1.1  1997/07/28  18:28:05  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.2
log
@OK, now let's make it work.
@
text
@d9 3
d169 1
d172 3
a174 1
  return remove_space_profiling(first_instruction, last_instruction);
d180 1
d183 4
a186 1
  return add_space_profiling(first_instruction, last_instruction);
@


1.2.8.1
log
@branched from 1.2
@
text
@a8 3
 * Revision 1.2  1995/12/13  11:36:51  nickb
 * OK, now let's make it work.
 *
@


1.2.7.1
log
@branched from 1.2
@
text
@a8 3
 * Revision 1.2  1995/12/13  11:36:51  nickb
 * OK, now let's make it work.
 *
@


1.2.7.1.1.1
log
@branched from 1.2.7.1
@
text
@a8 3
 * Revision 1.2.7.1  1996/12/17  17:53:44  hope
 * branched from 1.2
 *
@


1.2.6.1
log
@branched from 1.2
@
text
@a8 3
 * Revision 1.2  1995/12/13  11:36:51  nickb
 * OK, now let's make it work.
 *
@


1.2.5.1
log
@branched from 1.2
@
text
@a8 3
 * Revision 1.2  1995/12/13  11:36:51  nickb
 * OK, now let's make it work.
 *
@


1.2.4.1
log
@branched from 1.2
@
text
@a8 3
 * Revision 1.2  1995/12/13  11:36:51  nickb
 * OK, now let's make it work.
 *
@


1.2.4.1.1.1
log
@branched from 1.2.4.1
@
text
@a8 3
 * Revision 1.2.4.1  1996/11/14  12:57:24  hope
 * branched from 1.2
 *
@


1.2.3.1
log
@branched from 1.2
@
text
@a8 3
 * Revision 1.2  1995/12/13  11:36:51  nickb
 * OK, now let's make it work.
 *
@


1.2.2.1
log
@branched from 1.2
@
text
@a8 3
 * Revision 1.2  1995/12/13  11:36:51  nickb
 * OK, now let's make it work.
 *
@


1.2.1.1
log
@branched from 1.2
@
text
@a8 3
 * Revision 1.2  1995/12/13  11:36:51  nickb
 * OK, now let's make it work.
 *
@


1.1
log
@new unit
Trial implementation of space profiling code.
@
text
@d8 5
a12 1
 * $Log$
d85 3
a87 3
    } else if (p[1] == CALL_BYTE_1 &&
	       p[2] == CALL_BYTE_2 &&
	       p[3] == CALL_BYTE_3) {
d116 3
a118 3
    } else if (p[1] == CALL_BYTE_1 &&
	       p[2] == CALL_BYTE_2 &&
	       p[3] == PROF_CALL_BYTE_3) {
@
