head	1.4;
access;
symbols
	hope_poo:1.4.1
	ML_beta_release_12/08/94:1.4.1.1
	ML_beta_release_03/08/94:1.4;
locks; strict;
comment	@ * @;


1.4
date	94.07.19.09.29.55;	author nickh;	state Exp;
branches
	1.4.1.1;
next	1.3;

1.3
date	94.07.08.09.02.52;	author nickh;	state Exp;
branches;
next	1.2;

1.2
date	94.06.09.14.28.52;	author nickh;	state Exp;
branches;
next	1.1;

1.1
date	94.06.09.10.53.14;	author nickh;	state Exp;
branches;
next	;

1.4.1.1
date	95.07.05.10.30.07;	author hope;	state Exp;
branches;
next	;


desc
@new file
@


1.4
log
@Add architecture-specific state initialisation.
\\
@
text
@/*
 * state.c
 * The ML and C states are stored here.
 * $Log: src:arch:SPARC:state.c,v $
 * Revision 1.3  1994/07/08  09:02:52  nickh
 * Add alignment to ml_state and c_state.
 *
 * Revision 1.2  1994/06/09  14:28:52  nickh
 * new file
 *
 * Revision 1.1  1994/06/09  10:53:14  nickh
 * new file
 *
 * Revision 1.7  1992/07/27  12:47:03  richard
 * Moved stack_extension_count and raise_count here from the obsolete
 * callc_codes.c.
 *
 * Revision 1.6  1992/07/02  15:15:23  richard
 * Removed vacuous initialisation.
 *
 * Revision 1.5  1992/03/24  14:16:26  richard
 * Changed the types of the C and ML states.
 *
 * Revision 1.4  1992/01/07  16:02:12  richard
 * Initialized ml_state to prevent garbage collector going awol.
 *
 * Revision 1.3  1991/10/23  16:00:35  davidt
 * The complete register set in now stored in ml_state and c_state
 * so that ml_callc can function correctly.
 *
 * Revision 1.2  91/10/18  18:36:04  davidt
 * We don't need the setjmp stuff any more.
 * 
 * Revision 1.1  91/10/18  16:17:31  davidt
 * Initial revision
 * 
 *
 * Copyright (c) 1991 Harlequin Ltd.
 */

#include "mltypes.h"
#include "tags.h"
#include "state.h"
#include "mem.h"
#include "gc.h"
#include "implicit.h"
#include "values.h"
#include "extensions.h"

struct ml_state data_aligned(ml_state,8);
struct c_state data_aligned(c_state,8);

unsigned int stack_extension_count;
unsigned int raise_count;

extern void state_initialise(struct stack *initial_stack)
{
  GC_STACK = STACK_LIMIT(initial_stack);
  ml_state.base = initial_stack->top;
  GC_SP = NULL;

  ml_state.implicit = &implicit_vector;
  GC_MODIFIED_LIST = NULL;

  ml_state.g7 = MLUNIT;
  declare_root(&ml_state.g7);
}
@


1.4.1.1
log
@branched from 1.4
@
text
@a4 4
 * Revision 1.4  1994/07/19  09:29:55  nickh
 * Add architecture-specific state initialisation.
 * \\
 *
@


1.3
log
@Add alignment to ml_state and c_state.
@
text
@d5 3
d42 1
d44 4
d55 13
@


1.2
log
@new file
@
text
@d5 3
d40 1
d42 2
a43 2
struct ml_state ml_state;
struct c_state c_state;
@


1.1
log
@new file
@
text
@d4 4
a7 1
 * $Log: state.c,v $
@
