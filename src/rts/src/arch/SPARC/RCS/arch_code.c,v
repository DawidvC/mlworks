head	1.3;
access;
symbols
	MLW_daveb_inline_1_4_99:1.3.1
	MLWorks_21c0_1999_03_25:1.3
	MLWorks_20c1_1998_08_20:1.3
	MLWorks_20c0_1998_08_04:1.3
	MLWorks_20b2c2_1998_06_19:1.3
	MLWorks_20b2_Windows_1998_06_12:1.3
	MLWorks_20b1c1_1998_05_07:1.3
	MLWorks_20b0_1998_04_07:1.3
	MLWorks_20b0_1998_03_20:1.3
	MLWorks_20m2_1998_02_16:1.2
	MLWorks_MM_adapt:1.2.4
	MLWorks_20m1_1997_10_23:1.2
	MLWorks_11r1:1.2.1.1.1.1.1
	MLWorks_workspace_97:1.2.3
	MLWorks_dt_wizard:1.2.2
	MLWorks_11c0_1997_09_09:1.2.1.1.1.1
	MLWorks_10r3:1.2.1.1.3
	MLWorks_10r2_551:1.2.1.1.2
	MLWorks_11:1.2.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.2.1.1
	MLWorks_20m0_1997_06_20:1.2
	MLWorks_1_0_r2c2_1997_06_14:1.2.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.2.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.2.1
	MLWorks_BugFix_1997_04_24:1.2
	MLWorks_1_0_r2_Win32_1997_04_11:1.2
	MLWorks_1_0_r2_Unix_1997_04_04:1.2
	MM_ML_release_korma_1997_04_01:1.2
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.1.7.1.1
	MLWorks_gui_1996_12_18:1.1.8
	MLWorks_1_0_Win32_1996_12_17:1.1.7
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.1.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.1.4.1
	JFHrts:1.1.6
	MLWorks_1_0_Irix_1996_11_28:1.1.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.1.5
	MLWorks_1_0_Unix_1996_11_14:1.1.4
	MLWorks_Open_Beta2_1996_10_11:1.1.3
	MLWorks_License_dev:1.1.2
	MLWorks_1_open_beta_1996_09_13:1.1.1
	MLWorks_Open_Beta_1996_08_22:1.1
	MLWorks_Beta_1996_07_02:1.1
	MLWorks_Beta_1996_06_07:1.1
	MLWorks_Beta_1996_06_06:1.1
	MLWorks_Beta_1996_06_05:1.1
	MLWorks_Beta_1996_06_03:1.1
	MLWorks_Beta_1996_05_31:1.1
	MLWorks_Beta_1996_05_30:1.1;
locks; strict;
comment	@ * @;


1.3
date	98.03.18.16.43.27;	author jont;	state Exp;
branches
	1.3.1.1;
next	1.2;

1.2
date	96.12.19.13.31.53;	author nickb;	state Exp;
branches
	1.2.1.1
	1.2.2.1
	1.2.3.1
	1.2.4.1;
next	1.1;

1.1
date	95.07.19.13.35.17;	author nickb;	state Exp;
branches
	1.1.1.1
	1.1.2.1
	1.1.3.1
	1.1.4.1
	1.1.5.1
	1.1.6.1
	1.1.7.1
	1.1.8.1;
next	;

1.1.1.1
date	96.09.13.11.23.20;	author hope;	state Exp;
branches;
next	;

1.1.2.1
date	96.10.07.16.13.31;	author hope;	state Exp;
branches;
next	;

1.1.3.1
date	96.10.17.11.32.53;	author hope;	state Exp;
branches;
next	;

1.1.4.1
date	96.11.14.12.58.42;	author hope;	state Exp;
branches
	1.1.4.1.1.1;
next	;

1.1.4.1.1.1
date	96.11.28.15.08.39;	author hope;	state Exp;
branches;
next	;

1.1.5.1
date	96.11.22.18.16.21;	author hope;	state Exp;
branches;
next	;

1.1.6.1
date	96.12.17.10.03.07;	author hope;	state Exp;
branches;
next	;

1.1.7.1
date	96.12.17.17.54.44;	author hope;	state Exp;
branches
	1.1.7.1.1.1;
next	;

1.1.7.1.1.1
date	97.02.24.11.45.50;	author hope;	state Exp;
branches;
next	;

1.1.8.1
date	96.12.18.09.49.20;	author hope;	state Exp;
branches;
next	;

1.2.1.1
date	97.05.12.10.41.44;	author hope;	state Exp;
branches
	1.2.1.1.1.1
	1.2.1.1.2.1
	1.2.1.1.3.1;
next	;

1.2.1.1.1.1
date	97.07.28.18.25.50;	author daveb;	state Exp;
branches
	1.2.1.1.1.1.1.1;
next	;

1.2.1.1.1.1.1.1
date	97.10.07.11.51.35;	author jkbrook;	state Exp;
branches;
next	;

1.2.1.1.2.1
date	97.09.08.17.19.04;	author daveb;	state Exp;
branches;
next	;

1.2.1.1.3.1
date	97.09.09.14.15.13;	author daveb;	state Exp;
branches;
next	;

1.2.2.1
date	97.09.10.19.32.06;	author brucem;	state Exp;
branches;
next	;

1.2.3.1
date	97.09.11.21.01.27;	author daveb;	state Exp;
branches;
next	;

1.2.4.1
date	97.10.31.13.44.24;	author nickb;	state Exp;
branches;
next	;

1.3.1.1
date	99.04.01.18.01.11;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
dinking about with bits of machine code.
@


1.3
log
@[Bug #70026]
Allow profiling of stub_c functions, recording the time according
to the name of the runtime system functions
@
text
@/* rts/src/arch/$ARCH/arch_code.c
 *
 * Functions for recognising and manipulating architecture-specific code
 * sequences.
 * 
 * Copyright (C) 1995 Harlequin Ltd.
 *
 * $Log: src:arch:SPARC:arch_code.c,v $
 * Revision 1.2  1996/12/19  13:31:53  nickb
 * Add instruction cache flushing.
 *
 * Revision 1.1  1995/07/19  13:35:17  nickb
 * new unit
 * dinking about with bits of machine code.
 *
 */

#include "tags.h"
#include "mltypes.h"
#include "values.h"
#include "utils.h"
#include "extensions.h"
#include "environment.h"
#include "arch_code.h"
#include "offsets.h"
#include "cache.h"

/* Space profiling code vectors.
 *
 * We replace allocation sequences in code objects with branches to
 * bits of code in the runtime which record the allocation.
 *
 * We have to provide transformations in each direction.
 */

/*

Non-profiled allocation sequences:

taddcctv g1, <size>, g1		      	1000 0011 0001 0000 01<size>
add/or	 g2, #<tag>, <result>		10rr rrr0 000b 0000 1010 0000 0000 0tag
add	 g2, <size>, g2			1000 0100 0000 0000 10<size>

	(where <size> = #<isize> or <size> = g4,
	 b = leaf,
	 rrrrr = result register)

Profiled allocation sequences:

jmpl	 g5+profile_alloc{_leaf}, g5	1000 1011 1100 0001 011<offset>
add/or	 g0, <size>, g4			1000 1000 0001 0000 00<size>
add	 g4, #<tag>, <result>		10rr rrr0 000b 0001 0010 0000 0000 0tag

jmpinstr = 0x8bc16000 + IMPLICIT_profile_alloc
jmpinstr_leaf = 0x8bc16000 + IMPLICIT_profile_alloc_leaf

To find non-profiled sequence, search for:

instr1 & 0xffffc000 == 0x83104000
size = instr1 & 0x00003fff
instr2 & 0xc1effff8 == 0x8000a000
leaf = (instr2 & 0x00100000)
instr3 & 0xffffc000 == 0x84008000,
size == instr3 & 0x00003fff

To make a profiled sequence:

instr1 = leaf ? jmpinstr_leaf : jmpinstr
instr2 = 0x88100000 + size
instr3 = oldinstr2 + 0x00008000

To find profiled sequence:

instr1 == jmpinstr || instr1 = jmpinstr_leaf
instr2 & 0xffffc000 == 0x88100000
size = instr2 & 0x00003fff
instr3 & 0xc1effff8 == 0x80012000

To make an unprofiled sequence:

instr1 = 0x83104000 + size
instr2 = oldinstr3 - 0x00008000
instr3 = 0x84008000 + size

*/

#define JMPINSTR      (0x8bc16000 + IMPLICIT_profile_alloc)
#define JMPINSTR_LEAF (0x8bc16000 + IMPLICIT_profile_alloc_leaf)

#define ARITH_MASK     0xffffc000
#define TADDCCTV_BITS  0x83104000
#define SIZE_MASK      0x00003fff

#define ADD_OR_MASK    0xc1effff8
#define ADD_OR_G2_BITS 0x8000a000
#define ADD_OR_G4_BITS 0x80012000
#define LEAF_MASK      0x00100000

#define ADD_BITS       0x84008000
#define MOV_BITS       0x88100000

#define G2_G4_DIFFERENCE 0x00008000

/* Adding space profiling */

static inline int add_space_profiling (word *from, word *to)
{
  register word instr1, instr2, instr3, size, leaf, *p = from, *q = to;
  register int replacements=0;

  instr1 = *p;

  for( ; p < q ; ) {
    if ((instr1 & ARITH_MASK) == TADDCCTV_BITS) {
      size = instr1 & SIZE_MASK;
      instr2 = p[1];
      if ((instr2 & ADD_OR_MASK) == ADD_OR_G2_BITS) {
	leaf = instr2 & LEAF_MASK;
	instr3 = p[2];
	if ((instr3 & ARITH_MASK) == ADD_BITS) {
	  p[0] = leaf ? JMPINSTR_LEAF : JMPINSTR;
	  p[1] = MOV_BITS + size;
	  p[2] = instr2 + G2_G4_DIFFERENCE;
	  replacements++;
	  p+= 3;
	  instr1 = *p;
	} else {
	  instr1 = instr3;
	  p += 2;
	}
      } else {
	instr1 = instr2;
	p++;
      }
    } else {
      p++;
      instr1 = *p;
    }
  }

  return replacements;
}

/* Removing space profiling */

static inline int remove_space_profiling (word *from, word *to)
{
  register word instr1, instr2, instr3, size, *p = from, *q = to;
  register int replacements=0;

  instr1 = *p;

  for( ; p < q ; ) {
    if ((instr1 == JMPINSTR_LEAF) || (instr1 == JMPINSTR)) {
      instr2 = p[1];
      if ((instr2 & ARITH_MASK) == MOV_BITS) {
	size = instr2 & SIZE_MASK;
	instr3 = p[2];
	if ((instr3 & ADD_OR_MASK) == ADD_OR_G4_BITS) {
	  p[0] = TADDCCTV_BITS + size;
	  p[1] = instr3 - G2_G4_DIFFERENCE;
	  p[2] = ADD_BITS + size;
	  replacements++;
	  p+= 3;
	  instr1 = *p;
	} else {
	  instr1 = instr3;
	  p += 2;
	}
      } else {
	instr1 = instr2;
	p++;
      }
    } else {
      p++;
      instr1 = *p;
    }
  }
  return replacements;
}

static void first_and_last_instructions(word**first, word **last,
					mlval codepointer)
{
  mlval codeobject  = FOLLOWBACK(codepointer);
  mlval ancillaries = CCVANCILLARY(codeobject);
  mlval profiles = FIELD(ancillaries,ANC_PROFILES);
  size_t length = NFIELDS(profiles);
  unsigned int codenumber = CCODENUMBER(codepointer);
  
  *first = (word*) (codepointer-POINTER+8);
  *last = NULL;

  if (length == codenumber+1) {
    mlval header = *(mlval*)(codeobject-POINTER);
    *last = ((word*) (codeobject-POINTER))+LENGTH(header)-1;
  } else {
    word *p = *first;
    size_t offset = (codepointer-codeobject+8);
    for(; p+=2, offset += 8; ) {
      word w = *p;
      if (SECONDARY(w) == BACKPTR && LENGTH(w) == offset) {
	*last = p-1;
	break;
      }
    }
    if (*last == NULL)
      error ("no backptr found!\n");
  }
}

static void icache_flush(word *first, word *last)
{
  if (first < last)
    cache_flush((void*)first, (last-first)*sizeof(word));
}

extern int arch_space_unprofile_code(mlval codepointer)
{
  word *first_instruction, *last_instruction;
  int changes;
  first_and_last_instructions(&first_instruction, &last_instruction,
			      codepointer);
  changes = remove_space_profiling(first_instruction, last_instruction);
  icache_flush(first_instruction, last_instruction);
  return changes;
}
    
extern int arch_space_profile_code(mlval codepointer)
{
  word *first_instruction, *last_instruction;
  int changes;
  first_and_last_instructions(&first_instruction, &last_instruction,
			      codepointer);
  changes = add_space_profiling(first_instruction, last_instruction);
  icache_flush(first_instruction, last_instruction);
  return changes;
}
@


1.3.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a8 5
 * Revision 1.3  1998/03/18  16:43:27  jont
 * [Bug #70026]
 * Allow profiling of stub_c functions, recording the time according
 * to the name of the runtime system functions
 *
@


1.2
log
@Add instruction cache flushing.
@
text
@d9 3
d214 2
a215 1
  cache_flush((void*)first, (last-first)*sizeof(word));
@


1.2.4.1
log
@branched from trunk for label MLWorks_MM_adapt
@
text
@a8 3
 * Revision 1.2  1996/12/19  13:31:53  nickb
 * Add instruction cache flushing.
 *
@


1.2.3.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a8 3
 * Revision 1.2  1996/12/19  13:31:53  nickb
 * Add instruction cache flushing.
 *
@


1.2.2.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a8 3
 * Revision 1.2  1996/12/19  13:31:53  nickb
 * Add instruction cache flushing.
 *
@


1.2.1.1
log
@branched from 1.2
@
text
@a8 3
 * Revision 1.2  1996/12/19  13:31:53  nickb
 * Add instruction cache flushing.
 *
@


1.2.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a8 3
 * Revision 1.2.1.1  1997/05/12  10:41:44  hope
 * branched from 1.2
 *
@


1.2.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a8 3
 * Revision 1.2.1.1  1997/05/12  10:41:44  hope
 * branched from 1.2
 *
@


1.2.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a8 3
 * Revision 1.2.1.1  1997/05/12  10:41:44  hope
 * branched from 1.2
 *
@


1.2.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a8 3
 * Revision 1.2.1.1.1.1  1997/07/28  18:25:50  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.1
log
@new unit
dinking about with bits of machine code.
@
text
@d8 5
a12 1
 * $Log$
d23 1
d209 5
d217 1
d220 3
a222 1
  return remove_space_profiling(first_instruction, last_instruction);
d228 1
d231 3
a233 1
  return add_space_profiling(first_instruction, last_instruction);
@


1.1.8.1
log
@branched from 1.1
@
text
@d8 1
a8 5
 * $Log: src:arch:SPARC:arch_code.c,v $
 * Revision 1.1  1995/07/19  13:35:17  nickb
 * new unit
 * dinking about with bits of machine code.
 *
@


1.1.7.1
log
@branched from 1.1
@
text
@d8 1
a8 5
 * $Log: src:arch:SPARC:arch_code.c,v $
 * Revision 1.1  1995/07/19  13:35:17  nickb
 * new unit
 * dinking about with bits of machine code.
 *
@


1.1.7.1.1.1
log
@branched from 1.1.7.1
@
text
@a8 3
 * Revision 1.1.7.1  1996/12/17  17:54:44  hope
 * branched from 1.1
 *
@


1.1.6.1
log
@branched from 1.1
@
text
@d8 1
a8 5
 * $Log: src:arch:SPARC:arch_code.c,v $
 * Revision 1.1  1995/07/19  13:35:17  nickb
 * new unit
 * dinking about with bits of machine code.
 *
@


1.1.5.1
log
@branched from 1.1
@
text
@d8 1
a8 5
 * $Log: src:arch:SPARC:arch_code.c,v $
 * Revision 1.1  1995/07/19  13:35:17  nickb
 * new unit
 * dinking about with bits of machine code.
 *
@


1.1.4.1
log
@branched from 1.1
@
text
@d8 1
a8 5
 * $Log: src:arch:SPARC:arch_code.c,v $
 * Revision 1.1  1995/07/19  13:35:17  nickb
 * new unit
 * dinking about with bits of machine code.
 *
@


1.1.4.1.1.1
log
@branched from 1.1.4.1
@
text
@a8 3
 * Revision 1.1.4.1  1996/11/14  12:58:42  hope
 * branched from 1.1
 *
@


1.1.3.1
log
@branched from 1.1
@
text
@d8 1
a8 5
 * $Log: src:arch:SPARC:arch_code.c,v $
 * Revision 1.1  1995/07/19  13:35:17  nickb
 * new unit
 * dinking about with bits of machine code.
 *
@


1.1.2.1
log
@branched from 1.1
@
text
@d8 1
a8 5
 * $Log: src:arch:SPARC:arch_code.c,v $
 * Revision 1.1  1995/07/19  13:35:17  nickb
 * new unit
 * dinking about with bits of machine code.
 *
@


1.1.1.1
log
@branched from 1.1
@
text
@d8 1
a8 5
 * $Log: src:arch:SPARC:arch_code.c,v $
 * Revision 1.1  1995/07/19  13:35:17  nickb
 * new unit
 * dinking about with bits of machine code.
 *
@
