head	1.3;
access;
symbols
	MLW_daveb_inline_1_4_99:1.3.13
	MLWorks_21c0_1999_03_25:1.3
	MLWorks_20c1_1998_08_20:1.3
	MLWorks_20c0_1998_08_04:1.3
	MLWorks_20b2c2_1998_06_19:1.3
	MLWorks_20b2_Windows_1998_06_12:1.3
	MLWorks_20b1c1_1998_05_07:1.3
	MLWorks_20b0_1998_04_07:1.3
	MLWorks_20b0_1998_03_20:1.3
	MLWorks_20m2_1998_02_16:1.3
	MLWorks_MM_adapt:1.3.12
	MLWorks_20m1_1997_10_23:1.3
	MLWorks_11r1:1.3.9.1.1.1.1
	MLWorks_workspace_97:1.3.11
	MLWorks_dt_wizard:1.3.10
	MLWorks_11c0_1997_09_09:1.3.9.1.1.1
	MLWorks_10r3:1.3.9.1.3
	MLWorks_10r2_551:1.3.9.1.2
	MLWorks_11:1.3.9.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.3.9.1
	MLWorks_20m0_1997_06_20:1.3
	MLWorks_1_0_r2c2_1997_06_14:1.3.9.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.3.9.1
	MLWorks_1_0_r2c1_1997_05_12:1.3.9
	MLWorks_BugFix_1997_04_24:1.3
	MLWorks_1_0_r2_Win32_1997_04_11:1.3
	MLWorks_1_0_r2_Unix_1997_04_04:1.3
	MM_ML_release_korma_1997_04_01:1.3
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.3.7.1.1
	MLWorks_gui_1996_12_18:1.3.8
	MLWorks_1_0_Win32_1996_12_17:1.3.7
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.3.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.3.4.1
	JFHrts:1.3.6
	MLWorks_1_0_Irix_1996_11_28:1.3.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.3.5
	MLWorks_1_0_Unix_1996_11_14:1.3.4
	MLWorks_Open_Beta2_1996_10_11:1.3.3
	MLWorks_License_dev:1.3.2
	MLWorks_1_open_beta_1996_09_13:1.3.1
	MLWorks_Open_Beta_1996_08_22:1.3
	MLWorks_Beta_1996_07_02:1.3
	MLWorks_Beta_1996_06_07:1.3
	MLWorks_Beta_1996_06_06:1.3
	MLWorks_Beta_1996_06_05:1.3
	MLWorks_Beta_1996_06_03:1.3
	MLWorks_Beta_1996_05_31:1.3
	MLWorks_Beta_1996_05_30:1.3
	hope_poo:1.1.1
	ML_beta_release_12/08/94:1.1.1.1
	ML_beta_release_03/08/94:1.1;
locks; strict;
comment	@# @;


1.3
date	96.04.19.11.22.27;	author matthew;	state Exp;
branches
	1.3.1.1
	1.3.2.1
	1.3.3.1
	1.3.4.1
	1.3.5.1
	1.3.6.1
	1.3.7.1
	1.3.8.1
	1.3.9.1
	1.3.10.1
	1.3.11.1
	1.3.12.1
	1.3.13.1;
next	1.2;

1.2
date	95.06.27.11.01.22;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	94.07.12.12.06.38;	author jont;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.07.05.10.28.55;	author hope;	state Exp;
branches;
next	;

1.3.1.1
date	96.09.13.11.23.27;	author hope;	state Exp;
branches;
next	;

1.3.2.1
date	96.10.07.16.13.38;	author hope;	state Exp;
branches;
next	;

1.3.3.1
date	96.10.17.11.33.04;	author hope;	state Exp;
branches;
next	;

1.3.4.1
date	96.11.14.12.58.50;	author hope;	state Exp;
branches
	1.3.4.1.1.1;
next	;

1.3.4.1.1.1
date	96.11.28.15.08.48;	author hope;	state Exp;
branches;
next	;

1.3.5.1
date	96.11.22.18.16.31;	author hope;	state Exp;
branches;
next	;

1.3.6.1
date	96.12.17.10.03.16;	author hope;	state Exp;
branches;
next	;

1.3.7.1
date	96.12.17.17.54.54;	author hope;	state Exp;
branches
	1.3.7.1.1.1;
next	;

1.3.7.1.1.1
date	97.02.24.11.46.01;	author hope;	state Exp;
branches;
next	;

1.3.8.1
date	96.12.18.09.49.29;	author hope;	state Exp;
branches;
next	;

1.3.9.1
date	97.05.12.10.41.53;	author hope;	state Exp;
branches
	1.3.9.1.1.1
	1.3.9.1.2.1
	1.3.9.1.3.1;
next	;

1.3.9.1.1.1
date	97.07.28.18.28.48;	author daveb;	state Exp;
branches
	1.3.9.1.1.1.1.1;
next	;

1.3.9.1.1.1.1.1
date	97.10.07.11.54.39;	author jkbrook;	state Exp;
branches;
next	;

1.3.9.1.2.1
date	97.09.08.17.21.45;	author daveb;	state Exp;
branches;
next	;

1.3.9.1.3.1
date	97.09.09.14.17.49;	author daveb;	state Exp;
branches;
next	;

1.3.10.1
date	97.09.10.19.36.59;	author brucem;	state Exp;
branches;
next	;

1.3.11.1
date	97.09.11.21.05.05;	author daveb;	state Exp;
branches;
next	;

1.3.12.1
date	97.10.31.13.48.08;	author nickb;	state Exp;
branches;
next	;

1.3.13.1
date	99.04.01.18.03.53;	author daveb;	state Exp;
branches;
next	;


desc
@new file
@


1.3
log
@Exception changes
@
text
@/*
 * MIPS assembler multiply routine
 *
 * Revision Log
 * ------------
 * $Log: src:arch:MIPS:intmul.S,v $
# Revision 1.2  1995/06/27  11:01:22  jont
# Implement assembler integer multiply
#
 * Revision 1.1  1994/07/12  12:06:38  jont
 * new file
 *
 * Revision 1.2  1994/06/09  14:30:37  nickh
 * new file
 *
 * Revision 1.1  1994/06/09  10:55:09  nickh
 * new file
 *
 *
 */

#define C_NAME(x) x

	.set	noreorder
	.text
	.align 4
	.globl C_NAME(mach_int_mul)
C_NAME(mach_int_mul):

/*
 * Leaf function
 *
 * $4 argument pointer
 * $5 closure
 * $6 caller's closure
 * $1, $16 - $23 caller save
 * 
 * $31 return address
 */

	lw	$16, -1($4)		/* Arg 1 */
	lw	$17, 3($4)		/* Arg 2 */
	sra	$16, 2			/* Remove tagging from one operand */
	mult	$16, $17		/* The actual multiplication */
	nop				/* Can't look at HI or LO yet */
	nop				/* Can't look at HI or LO yet */
	mfhi	$16
	mflo	$4
/*
 * Now check for integer overflow
 * We require $4 >> 31 == $16 for correct operation
 */
	sra	$18, $4, 31		/* The sign bit */
	bne	$18, $16, overflow	/* Branch if not good */
	li	$16, 0			/* Clear a potential gc bad value */
	jr	$31			/* Return if ok */
	li	$18, 0			/* Clear a potential gc bad value */
overflow:
/*
 * Raise Prod
 * and clear the bad register ($18)
 */
	la	$4, C_NAME(perv_exn_ref_overflow)
	la	$17, C_NAME(ml_raise_leaf)
	lw	$18, 0($4)		/* perv_exn_ref_prod */
	jalr	$17			/* raise the exception */
	lw	$4, 9($18)		/* DEREF(perv_exn_ref_prod) */
@


1.3.13.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a6 3
# Revision 1.3  1996/04/19  11:22:27  matthew
# Exception changes
#
@


1.3.12.1
log
@branched from trunk for label MLWorks_MM_adapt
@
text
@a6 3
# Revision 1.3  1996/04/19  11:22:27  matthew
# Exception changes
#
@


1.3.11.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a6 3
# Revision 1.3  1996/04/19  11:22:27  matthew
# Exception changes
#
@


1.3.10.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a6 3
# Revision 1.3  1996/04/19  11:22:27  matthew
# Exception changes
#
@


1.3.9.1
log
@branched from 1.3
@
text
@a6 3
# Revision 1.3  1996/04/19  11:22:27  matthew
# Exception changes
#
@


1.3.9.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a6 3
# Revision 1.3.9.1  1997/05/12  10:41:53  hope
# branched from 1.3
#
@


1.3.9.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a6 3
# Revision 1.3.9.1  1997/05/12  10:41:53  hope
# branched from 1.3
#
@


1.3.9.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a6 3
# Revision 1.3.9.1  1997/05/12  10:41:53  hope
# branched from 1.3
#
@


1.3.9.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a6 3
# Revision 1.3.9.1.1.1  1997/07/28  18:28:48  daveb
# branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
#
@


1.3.8.1
log
@branched from 1.3
@
text
@a6 3
# Revision 1.3  1996/04/19  11:22:27  matthew
# Exception changes
#
@


1.3.7.1
log
@branched from 1.3
@
text
@a6 3
# Revision 1.3  1996/04/19  11:22:27  matthew
# Exception changes
#
@


1.3.7.1.1.1
log
@branched from 1.3.7.1
@
text
@a6 3
# Revision 1.3.7.1  1996/12/17  17:54:54  hope
# branched from 1.3
#
@


1.3.6.1
log
@branched from 1.3
@
text
@a6 3
# Revision 1.3  1996/04/19  11:22:27  matthew
# Exception changes
#
@


1.3.5.1
log
@branched from 1.3
@
text
@a6 3
# Revision 1.3  1996/04/19  11:22:27  matthew
# Exception changes
#
@


1.3.4.1
log
@branched from 1.3
@
text
@a6 3
# Revision 1.3  1996/04/19  11:22:27  matthew
# Exception changes
#
@


1.3.4.1.1.1
log
@branched from 1.3.4.1
@
text
@a6 3
# Revision 1.3.4.1  1996/11/14  12:58:50  hope
# branched from 1.3
#
@


1.3.3.1
log
@branched from 1.3
@
text
@a6 3
# Revision 1.3  1996/04/19  11:22:27  matthew
# Exception changes
#
@


1.3.2.1
log
@branched from 1.3
@
text
@a6 3
# Revision 1.3  1996/04/19  11:22:27  matthew
# Exception changes
#
@


1.3.1.1
log
@branched from 1.3
@
text
@a6 3
# Revision 1.3  1996/04/19  11:22:27  matthew
# Exception changes
#
@


1.2
log
@Implement assembler integer multiply
@
text
@d7 3
d63 1
a63 1
	la	$4, C_NAME(perv_exn_ref_prod)
@


1.1
log
@new file
@
text
@d1 21
a21 16
!
!  A multiply routine submitted by MarkT
!
!
!
! Revision Log
! ------------
! $Log: src:arch:SPARC:intmul.S,v $
# Revision 1.2  1994/06/09  14:30:37  nickh
# new file
#
# Revision 1.1  1994/06/09  10:55:09  nickh
# new file
#
!
!
d24 2
a25 128
	.global _mach_ovfl_mul
_mach_ovfl_mul:
 	andncc %o1, 0x3ff, %g0  ! test for b being in range 0..1023
	bne    m_not_right
	mov    %o1, %y          ! know b is short, swap arguments a and b, putting
	mov    %o0, %o1         ! b into %y
	nop                     !! nop because 2 cycle delay for %y
	andcc  %g0, %g0, %o4    ! zero the multiply step register
	mov    %y, %o0
! 10 steps
	mulscc %o4, %o1, %o4    ! do 10 shifts and adds, %y gets shifted right,
	mulscc %o4, %o1, %o4    ! %o4 shifted left and accumulates result
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4

        mulscc %o4, %g0, %o4    ! have to do one more shift to get last bit out
!!	mov    %o1, %o5		! might want to swap arguments back
!!				! for error reporting
!!	mov    %o0, %o1
!!	mov    %o5, %o0

m_short_tidy:
	mov    %y, %o5          ! now get results out and check for overflow
	sll    %o4, 10, %o2     ! %o2 gets lo partial result, from %y & %o4
	srl    %o5, 22, %o5
	orcc   %o5, %o2, %o2    ! see if lo result looks +ve or -ve
	sra    %o4, 22, %o3     ! get hi partial result, sign extended
	bge    m_exit
	addcc  %o3, %g0, %g0    ! if lo >= 0, overflow when hi <> 0
	ba     m_exit
	subcc  %o3, -1, %g0     ! if lo < 0, overflow when hi <> -1
	                        ! overflow represented zero flag being unset

m_not_right:
	andncc %o0, 0x3ff, %g0  ! test for a being in range 0..1023
	mov    %o0, %y    
	bne    m_long
	andcc  %g0, %g0, %o4    ! in delay slot
! 10 steps
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4

	ba     m_short_tidy
	mulscc %o4, %g0, %o4    ! in delay slot

m_long:	
! 32 steps case, when neither argument in 0..1023 range
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4

	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4

	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4

	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4
	mulscc %o4, %o1, %o4

! done 32 steps (shame we cannot do another 7 more!) (sorry)
	mulscc %o4, %g0, %o4
	orcc   %o0, %g0, %g0	! test sign of a, the arg that went into %y
	mov    %y, %o2        	! %o2 is the low word of result, %o4 the hi
	bge    m_no_adjust
	orcc   %o2, %g0, %g0  	! in delay slot!
	sub    %o4, %o1, %o4  	! if a < 0, then res -= b

m_no_adjust:
	bge    m_exit         	! test to see how to test for overflow
	addcc  %o4, %g0, %o3  	! delay slot!
	subcc  %o3, -1, %g0

m_exit:	bne    m_overflow     	! test for overflow, and if not just return result
	nop
	jmp    %o7+8
	mov    %o2, %o0		! result is the lo part, naturally
m_overflow:
	save   %sp, -0x48, %sp  ! get a frame to do call with
				! the 0x48 is 64 byte frame plus the
				! spare for structure result passing
				! which is almost certainly unnecessary
	mov    %i0, %o0
	mov    %i1, %o1
	mov    %i2, %o2         ! pass original args, and
	call   _multiply_overflow_fn     ! hi & lo partial results
	mov    %i3, %o3

	mov    %i2, %i0
	jmp    %i7+8            ! return lo result as before
	restore 
d27 38
@


1.1.1.1
log
@branched from 1.1
@
text
@d8 1
a8 4
! $Log: src:arch:MIPS:intmul.S,v $
# Revision 1.1  1994/07/12  12:06:38  jont
# new file
#
@
