head	1.3;
access;
symbols
	MLW_daveb_inline_1_4_99:1.3.1
	MLWorks_21c0_1999_03_25:1.3
	MLWorks_20c1_1998_08_20:1.3
	MLWorks_20c0_1998_08_04:1.3
	MLWorks_20b2c2_1998_06_19:1.3
	MLWorks_20b2_Windows_1998_06_12:1.3
	MLWorks_20b1c1_1998_05_07:1.3
	MLWorks_20b0_1998_04_07:1.3
	MLWorks_20b0_1998_03_20:1.3
	MLWorks_20m2_1998_02_16:1.2
	MLWorks_MM_adapt:1.2.4
	MLWorks_20m1_1997_10_23:1.2
	MLWorks_11r1:1.2.1.1.1.1.1
	MLWorks_workspace_97:1.2.3
	MLWorks_dt_wizard:1.2.2
	MLWorks_11c0_1997_09_09:1.2.1.1.1.1
	MLWorks_10r3:1.2.1.1.3
	MLWorks_10r2_551:1.2.1.1.2
	MLWorks_11:1.2.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.2.1.1
	MLWorks_20m0_1997_06_20:1.2
	MLWorks_1_0_r2c2_1997_06_14:1.2.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.2.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.2.1
	MLWorks_BugFix_1997_04_24:1.2
	MLWorks_1_0_r2_Win32_1997_04_11:1.2
	MLWorks_1_0_r2_Unix_1997_04_04:1.2
	MM_ML_release_korma_1997_04_01:1.2
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.1.7.1.1
	MLWorks_gui_1996_12_18:1.1.8
	MLWorks_1_0_Win32_1996_12_17:1.1.7
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.1.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.1.4.1
	JFHrts:1.1.6
	MLWorks_1_0_Irix_1996_11_28:1.1.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.1.5
	MLWorks_1_0_Unix_1996_11_14:1.1.4
	MLWorks_Open_Beta2_1996_10_11:1.1.3
	MLWorks_License_dev:1.1.2
	MLWorks_1_open_beta_1996_09_13:1.1.1
	MLWorks_Open_Beta_1996_08_22:1.1
	MLWorks_Beta_1996_07_02:1.1
	MLWorks_Beta_1996_06_07:1.1
	MLWorks_Beta_1996_06_06:1.1
	MLWorks_Beta_1996_06_05:1.1
	MLWorks_Beta_1996_06_03:1.1
	MLWorks_Beta_1996_05_31:1.1
	MLWorks_Beta_1996_05_30:1.1;
locks; strict;
comment	@ * @;


1.3
date	98.03.19.11.54.56;	author jont;	state Exp;
branches
	1.3.1.1;
next	1.2;

1.2
date	96.12.19.13.39.09;	author nickb;	state Exp;
branches
	1.2.1.1
	1.2.2.1
	1.2.3.1
	1.2.4.1;
next	1.1;

1.1
date	95.12.11.14.21.49;	author nickb;	state Exp;
branches
	1.1.1.1
	1.1.2.1
	1.1.3.1
	1.1.4.1
	1.1.5.1
	1.1.6.1
	1.1.7.1
	1.1.8.1;
next	;

1.1.1.1
date	96.09.13.11.24.08;	author hope;	state Exp;
branches;
next	;

1.1.2.1
date	96.10.07.16.14.25;	author hope;	state Exp;
branches;
next	;

1.1.3.1
date	96.10.17.11.33.52;	author hope;	state Exp;
branches;
next	;

1.1.4.1
date	96.11.14.12.59.32;	author hope;	state Exp;
branches
	1.1.4.1.1.1;
next	;

1.1.4.1.1.1
date	96.11.28.15.09.33;	author hope;	state Exp;
branches;
next	;

1.1.5.1
date	96.11.22.18.17.17;	author hope;	state Exp;
branches;
next	;

1.1.6.1
date	96.12.17.10.04.02;	author hope;	state Exp;
branches;
next	;

1.1.7.1
date	96.12.17.17.55.38;	author hope;	state Exp;
branches
	1.1.7.1.1.1;
next	;

1.1.7.1.1.1
date	97.02.24.11.47.08;	author hope;	state Exp;
branches;
next	;

1.1.8.1
date	96.12.18.09.50.14;	author hope;	state Exp;
branches;
next	;

1.2.1.1
date	97.05.12.10.43.56;	author hope;	state Exp;
branches
	1.2.1.1.1.1
	1.2.1.1.2.1
	1.2.1.1.3.1;
next	;

1.2.1.1.1.1
date	97.07.28.18.25.00;	author daveb;	state Exp;
branches
	1.2.1.1.1.1.1.1;
next	;

1.2.1.1.1.1.1.1
date	97.10.07.11.50.51;	author jkbrook;	state Exp;
branches;
next	;

1.2.1.1.2.1
date	97.09.08.17.18.14;	author daveb;	state Exp;
branches;
next	;

1.2.1.1.3.1
date	97.09.09.14.14.25;	author daveb;	state Exp;
branches;
next	;

1.2.2.1
date	97.09.10.19.30.48;	author brucem;	state Exp;
branches;
next	;

1.2.3.1
date	97.09.11.21.00.22;	author daveb;	state Exp;
branches;
next	;

1.2.4.1
date	97.10.31.13.43.31;	author nickb;	state Exp;
branches;
next	;

1.3.1.1
date	99.04.01.18.00.35;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
Adding space profiling for the MIPS
@


1.3
log
@[Bug #70026]
Allow profiling of stub_c functions, recording the time according
to the name of the runtime system functions
@
text
@/* rts/src/arch/$ARCH/arch_code.c
 *
 * Functions for recognising and manipulating architecture-specific code
 * sequences.
 * 
 * Copyright (C) 1995 Harlequin Ltd.
 *
 * $Log: src:arch:MIPS:arch_code.c,v $
 * Revision 1.2  1996/12/19  13:39:09  nickb
 * Add instruction cache flushing.
 *
 * Revision 1.1  1995/12/11  14:21:49  nickb
 * new unit
 * Adding space profiling for the MIPS
 *
 *
 */

#include "tags.h"
#include "mltypes.h"
#include "values.h"
#include "utils.h"
#include "extensions.h"
#include "environment.h"
#include "arch_code.h"
#include "offsets.h"
#include "cache.h"

/* Space profiling code vectors.
 *
 * We manipulate allocation sequences in code objects so that they all
 * cause a transfer of control to bits of code in the runtime which
 * record the allocation.
 *
 * We have to provide transformations in each direction. */

/*

Non-profiled allocation sequences:

         ...			; update alloc point register gc1 (register 2)
00430822 sub	global,gc1,gc2	; check for allocation overflow
         bltz	no_gc
         ...
8d21000x lw	global, gc_entry[thread]
				; get GC entry address
				  (gc_entry = IMPLICIT_gc or IMPLICIT_gc_leaf)
         ...

Profiled allocation sequences replace the subtraction and the load
from the thread:

00430822 sub	global,gc1,gc2

becomes

00420822 sub	global,gc1,gc1	; the bltz is never taken

8d21000x lw	global, IMPLICIT_gc[thread]

becomes

8d2100yy lw	global, IMPLICIT_profile_space[thread]

[and similarly for the leaf case]

*/

#define SUBINSTR       0x00430822
#define PROF_SUBINSTR  0x00420822

#define GC_LOAD        (0x8d210000 + IMPLICIT_gc)
#define GC_LEAF_LOAD   (0x8d210000 + IMPLICIT_gc_leaf)

#define PROF_LOAD      (0x8d210000 + IMPLICIT_profile_alloc)
#define PROF_LEAF_LOAD (0x8d210000 + IMPLICIT_profile_alloc_leaf)

/* Adding space profiling */

static inline int add_space_profiling (word *from, word *to)
{
  register word *p = from, *q = to, instr;
  register int replace_sub = 0, replace_load = 0, replace_leaf_load = 0;

  for( ; p < q ; ) { 
    instr = *p;
    if (instr == SUBINSTR) {
      *p = PROF_SUBINSTR;
      replace_sub++;
    } else if (instr == GC_LOAD) {
      *p = PROF_LOAD;
      replace_load++;
    } else if (instr == GC_LEAF_LOAD) {
      *p = PROF_LEAF_LOAD;
      replace_leaf_load++;
    }
    p++;
  }
  if (replace_load == 0)
    replace_load = replace_leaf_load;
  else if (replace_leaf_load)
    error("Code replacement from 0x%08x to 0x%08x found leaf and non-leaf",
	  from, to);
  if (replace_sub != replace_load)
    error("Code replacement from 0x%08x to 0x%08x found %d/%d mismatch",
	  from, to, replace_sub, replace_load);

  return replace_sub;
}

/* Removing space profiling */

static inline int remove_space_profiling (word *from, word *to)
{
  register word *p = from, *q = to, instr;
  register int replace_sub = 0, replace_load = 0, replace_leaf_load = 0;

  for( ; p < q ; ) { 
    instr = *p;
    if (instr == PROF_SUBINSTR) {
      *p = SUBINSTR;
      replace_sub++;
    } else if (instr == PROF_LOAD) {
      *p = GC_LOAD;
      replace_load++;
    } else if (instr == PROF_LEAF_LOAD) {
      *p = GC_LEAF_LOAD;
      replace_leaf_load++;
    }
    p++;
  }
  if (replace_load == 0)
    replace_load = replace_leaf_load;
  else if (replace_leaf_load)
    error("Code replacement from 0x%08x to 0x%08x found leaf and non-leaf",
	  from, to);
  if (replace_sub != replace_load)
    error("Code replacement from 0x%08x to 0x%08x found %d/%d mismatch",
	  from, to, replace_sub, replace_load);

  return replace_sub;
}

static void first_and_last_instructions(word**first, word **last,
					mlval codepointer)
{
  mlval codeobject  = FOLLOWBACK(codepointer);
  mlval ancillaries = CCVANCILLARY(codeobject);
  mlval profiles = FIELD(ancillaries,ANC_PROFILES);
  size_t length = NFIELDS(profiles);
  unsigned int codenumber = CCODENUMBER(codepointer);
  
  *first = (word*) (codepointer-POINTER+8);
  *last = NULL;

  if (length == codenumber+1) {
    mlval header = *(mlval*)(codeobject-POINTER);
    *last = ((word*) (codeobject-POINTER))+LENGTH(header)-1;
  } else {
    word *p = *first;
    size_t offset = (codepointer-codeobject+8);
    for(; p+=2, offset += 8; ) {
      word w = *p;
      if (SECONDARY(w) == BACKPTR && LENGTH(w) == offset) {
	*last = p-1;
	break;
      }
    }
    if (*last == NULL)
      error ("no backptr found!\n");
  }
}

static void icache_flush(word *first, word *last)
{
  if (first < last)
    cache_flush((void*)first, (last-first)*sizeof(word));
}

extern int arch_space_unprofile_code(mlval codepointer)
{
  word *first_instruction, *last_instruction;
  int changes;
  first_and_last_instructions(&first_instruction, &last_instruction,
			      codepointer);
  changes = remove_space_profiling(first_instruction, last_instruction);
  icache_flush(first_instruction, last_instruction);
  return changes;
}
    
extern int arch_space_profile_code(mlval codepointer)
{
  word *first_instruction, *last_instruction;
  int changes;
  first_and_last_instructions(&first_instruction, &last_instruction,
			      codepointer);
  changes = add_space_profiling(first_instruction, last_instruction);
  icache_flush(first_instruction, last_instruction);
  return changes;
}
@


1.3.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a8 5
 * Revision 1.3  1998/03/19  11:54:56  jont
 * [Bug #70026]
 * Allow profiling of stub_c functions, recording the time according
 * to the name of the runtime system functions
 *
@


1.2
log
@Add instruction cache flushing.
@
text
@d9 3
d176 2
a177 1
  cache_flush((void*)first, (last-first)*sizeof(word));
@


1.2.4.1
log
@branched from trunk for label MLWorks_MM_adapt
@
text
@a8 3
 * Revision 1.2  1996/12/19  13:39:09  nickb
 * Add instruction cache flushing.
 *
@


1.2.3.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a8 3
 * Revision 1.2  1996/12/19  13:39:09  nickb
 * Add instruction cache flushing.
 *
@


1.2.2.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a8 3
 * Revision 1.2  1996/12/19  13:39:09  nickb
 * Add instruction cache flushing.
 *
@


1.2.1.1
log
@branched from 1.2
@
text
@a8 3
 * Revision 1.2  1996/12/19  13:39:09  nickb
 * Add instruction cache flushing.
 *
@


1.2.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a8 3
 * Revision 1.2.1.1  1997/05/12  10:43:56  hope
 * branched from 1.2
 *
@


1.2.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a8 3
 * Revision 1.2.1.1  1997/05/12  10:43:56  hope
 * branched from 1.2
 *
@


1.2.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a8 3
 * Revision 1.2.1.1  1997/05/12  10:43:56  hope
 * branched from 1.2
 *
@


1.2.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a8 3
 * Revision 1.2.1.1.1.1  1997/07/28  18:25:00  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.1
log
@new unit
Adding space profiling for the MIPS
@
text
@d8 5
a12 1
 * $Log$
d24 1
d171 5
d179 1
d182 3
a184 1
  return remove_space_profiling(first_instruction, last_instruction);
d190 1
d193 3
a195 1
  return add_space_profiling(first_instruction, last_instruction);
@


1.1.8.1
log
@branched from 1.1
@
text
@d8 1
a8 5
 * $Log: src:arch:MIPS:arch_code.c,v $
 * Revision 1.1  1995/12/11  14:21:49  nickb
 * new unit
 * Adding space profiling for the MIPS
 *
@


1.1.7.1
log
@branched from 1.1
@
text
@d8 1
a8 5
 * $Log: src:arch:MIPS:arch_code.c,v $
 * Revision 1.1  1995/12/11  14:21:49  nickb
 * new unit
 * Adding space profiling for the MIPS
 *
@


1.1.7.1.1.1
log
@branched from 1.1.7.1
@
text
@a8 3
 * Revision 1.1.7.1  1996/12/17  17:55:38  hope
 * branched from 1.1
 *
@


1.1.6.1
log
@branched from 1.1
@
text
@d8 1
a8 5
 * $Log: src:arch:MIPS:arch_code.c,v $
 * Revision 1.1  1995/12/11  14:21:49  nickb
 * new unit
 * Adding space profiling for the MIPS
 *
@


1.1.5.1
log
@branched from 1.1
@
text
@d8 1
a8 5
 * $Log: src:arch:MIPS:arch_code.c,v $
 * Revision 1.1  1995/12/11  14:21:49  nickb
 * new unit
 * Adding space profiling for the MIPS
 *
@


1.1.4.1
log
@branched from 1.1
@
text
@d8 1
a8 5
 * $Log: src:arch:MIPS:arch_code.c,v $
 * Revision 1.1  1995/12/11  14:21:49  nickb
 * new unit
 * Adding space profiling for the MIPS
 *
@


1.1.4.1.1.1
log
@branched from 1.1.4.1
@
text
@a8 3
 * Revision 1.1.4.1  1996/11/14  12:59:32  hope
 * branched from 1.1
 *
@


1.1.3.1
log
@branched from 1.1
@
text
@d8 1
a8 5
 * $Log: src:arch:MIPS:arch_code.c,v $
 * Revision 1.1  1995/12/11  14:21:49  nickb
 * new unit
 * Adding space profiling for the MIPS
 *
@


1.1.2.1
log
@branched from 1.1
@
text
@d8 1
a8 5
 * $Log: src:arch:MIPS:arch_code.c,v $
 * Revision 1.1  1995/12/11  14:21:49  nickb
 * new unit
 * Adding space profiling for the MIPS
 *
@


1.1.1.1
log
@branched from 1.1
@
text
@d8 1
a8 5
 * $Log: src:arch:MIPS:arch_code.c,v $
 * Revision 1.1  1995/12/11  14:21:49  nickb
 * new unit
 * Adding space profiling for the MIPS
 *
@
