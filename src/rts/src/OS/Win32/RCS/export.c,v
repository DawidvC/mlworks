head	1.9;
access;
symbols
	MLW_daveb_inline_1_4_99:1.9.1
	MLWorks_21c0_1999_03_25:1.9
	MLWorks_20c1_1998_08_20:1.9
	MLWorks_20c0_1998_08_04:1.9
	MLWorks_20b2c2_1998_06_19:1.9
	MLWorks_20b2_Windows_1998_06_12:1.9
	MLWorks_20b1c1_1998_05_07:1.7
	MLWorks_20b0_1998_04_07:1.7
	MLWorks_20b0_1998_03_20:1.7
	MLWorks_20m2_1998_02_16:1.6
	MLWorks_MM_adapt:1.5.1
	MLWorks_20m1_1997_10_23:1.5
	MLWorks_11r1:1.3.1.2.1.1.1
	MLWorks_workspace_97:1.4.2
	MLWorks_dt_wizard:1.4.1
	MLWorks_11c0_1997_09_09:1.3.1.2.1.1
	MLWorks_10r3:1.3.1.2.3
	MLWorks_10r2_551:1.3.1.2.2
	MLWorks_11:1.3.1.2.1
	MLWorks_1_0_r2c2_1997_07_28:1.3.1.2
	MLWorks_20m0_1997_06_20:1.4
	MLWorks_1_0_r2c2_1997_06_14:1.3.1.2
	MLWorks_1_0_r2c1_released_1997_05_23:1.3.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.3.1
	MLWorks_BugFix_1997_04_24:1.3
	MLWorks_1_0_r2_Win32_1997_04_11:1.3
	MLWorks_1_0_r2_Unix_1997_04_04:1.2
	MM_ML_release_korma_1997_04_01:1.2
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.1.7.1.1
	MLWorks_gui_1996_12_18:1.1.8
	MLWorks_1_0_Win32_1996_12_17:1.1.7
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.1.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.1.4.1
	JFHrts:1.1.6
	MLWorks_1_0_Irix_1996_11_28:1.1.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.1.5
	MLWorks_1_0_Unix_1996_11_14:1.1.4
	MLWorks_Open_Beta2_1996_10_11:1.1.3
	MLWorks_License_dev:1.1.2
	MLWorks_1_open_beta_1996_09_13:1.1.1
	MLWorks_Open_Beta_1996_08_22:1.1
	MLWorks_Beta_1996_07_02:1.1
	MLWorks_Beta_1996_06_07:1.1
	MLWorks_Beta_1996_06_06:1.1
	MLWorks_Beta_1996_06_05:1.1
	MLWorks_Beta_1996_06_03:1.1
	MLWorks_Beta_1996_05_31:1.1
	MLWorks_Beta_1996_05_30:1.1;
locks; strict;
comment	@ * @;


1.9
date	98.06.09.15.11.00;	author mitchell;	state Exp;
branches
	1.9.1.1;
next	1.8;

1.8
date	98.05.11.15.40.06;	author johnh;	state Exp;
branches;
next	1.7;

1.7
date	98.02.24.11.21.21;	author jont;	state Exp;
branches;
next	1.6;

1.6
date	97.11.26.15.43.36;	author johnh;	state Exp;
branches;
next	1.5;

1.5
date	97.10.10.16.14.20;	author johnh;	state Exp;
branches
	1.5.1.1;
next	1.4;

1.4
date	97.06.13.13.36.47;	author jkbrook;	state Exp;
branches
	1.4.1.1
	1.4.2.1;
next	1.3;

1.3
date	97.04.08.14.16.33;	author jont;	state Exp;
branches
	1.3.1.1;
next	1.2;

1.2
date	97.02.27.11.29.58;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	96.02.20.10.19.28;	author stephenb;	state Exp;
branches
	1.1.1.1
	1.1.2.1
	1.1.3.1
	1.1.4.1
	1.1.5.1
	1.1.6.1
	1.1.7.1
	1.1.8.1;
next	;

1.1.1.1
date	96.09.13.11.22.00;	author hope;	state Exp;
branches;
next	;

1.1.2.1
date	96.10.07.16.12.05;	author hope;	state Exp;
branches;
next	;

1.1.3.1
date	96.10.17.11.30.58;	author hope;	state Exp;
branches;
next	;

1.1.4.1
date	96.11.14.12.56.52;	author hope;	state Exp;
branches
	1.1.4.1.1.1;
next	;

1.1.4.1.1.1
date	96.11.28.15.07.11;	author hope;	state Exp;
branches;
next	;

1.1.5.1
date	96.11.22.18.14.51;	author hope;	state Exp;
branches;
next	;

1.1.6.1
date	96.12.17.10.01.39;	author hope;	state Exp;
branches;
next	;

1.1.7.1
date	96.12.17.17.53.23;	author hope;	state Exp;
branches
	1.1.7.1.1.1;
next	;

1.1.7.1.1.1
date	97.02.24.11.44.20;	author hope;	state Exp;
branches;
next	;

1.1.8.1
date	96.12.18.09.47.56;	author hope;	state Exp;
branches;
next	;

1.3.1.1
date	97.05.12.10.40.21;	author hope;	state Exp;
branches;
next	1.3.1.2;

1.3.1.2
date	97.06.10.13.28.58;	author daveb;	state Exp;
branches
	1.3.1.2.1.1
	1.3.1.2.2.1
	1.3.1.2.3.1;
next	;

1.3.1.2.1.1
date	97.07.28.18.25.05;	author daveb;	state Exp;
branches
	1.3.1.2.1.1.1.1;
next	;

1.3.1.2.1.1.1.1
date	97.10.07.11.50.58;	author jkbrook;	state Exp;
branches;
next	;

1.3.1.2.2.1
date	97.09.08.17.18.19;	author daveb;	state Exp;
branches;
next	;

1.3.1.2.3.1
date	97.09.09.14.14.31;	author daveb;	state Exp;
branches;
next	;

1.4.1.1
date	97.09.10.19.30.54;	author brucem;	state Exp;
branches;
next	;

1.4.2.1
date	97.09.11.21.00.30;	author daveb;	state Exp;
branches;
next	;

1.5.1.1
date	97.10.31.13.43.36;	author nickb;	state Exp;
branches;
next	;

1.9.1.1
date	99.04.01.18.00.38;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
This used to be src/rts/src/OS/{NT,Win95}/win_export.c
@


1.9
log
@[Bug #30419]
Move free edition check to rts!src:system.c
@
text
@/* Copyright (C) 1996 Harlequin Ltd
 *
 * An interface to exporting functions (win32 version).
 *
 * $Log: src:OS:Win32:export.c,v $
 * Revision 1.8  1998/05/11  15:40:06  johnh
 * [Bug #30303]
 * Disabling image saving for student edition.
 *
 * Revision 1.7  1998/02/24  11:21:21  jont
 * [Bug #70018]
 * Modify declare_root to accept a second parameter
 * indicating whether the root is live for image save
 *
 * Revision 1.6  1997/11/26  15:43:36  johnh
 * [Bug #30134]
 * Change deliverFn to only save executeables and also differentiate between console and window apps.
 *
 * Revision 1.5  1997/10/10  16:14:20  johnh
 * [Bug #20084]
 * Add .exe extension if none is given (save_executable).
 *
 * Revision 1.4  1997/06/13  13:36:47  jkbrook
 * [Bug #50004]
 * Merging changes from 1.0r2c2 into 2.0m0
 *
 * Revision 1.3  1997/04/08  14:16:33  jont
 * Make sure save_executable doesn't fail silently
 *
 * Revision 1.2  1997/02/27  11:29:58  jont
 * [Bug #1811]
 * In deliverFn, use the third argument to determine
 * whether to deliver an executable or an image.
 * False => image, True => executable
 *
 * Revision 1.1  1996/02/20  10:19:28  stephenb
 * new unit
 * This used to be src/rts/src/OS/{NT,Win95}/win_export.c
 *
 * Revision 1.7  1996/02/19  15:14:02  nickb
 * Get rid of ad-hoc root clearing.
 *
 * Revision 1.6  1996/02/16  12:33:24  nickb
 * Change to global_pack().
 *
 * Revision 1.5  1996/02/14  16:07:59  jont
 * Changing ERROR to MLERROR
 *
 * Revision 1.4  1996/02/14  11:48:13  jont
 * Fixing some compiler warnings under VC++
 *
 * Revision 1.3  1996/02/09  13:57:50  jont
 * Improve error handling wheh exportFn fails
 *
 * Revision 1.2  1996/02/09  12:26:09  jont
 * Implement terminating exportFn
 *
 * Revision 1.1  1996/02/08  17:34:48  jont
 * new unit
 *
 *
 */

#include "diagnostic.h"
#include "gc.h"
#include "exceptions.h"
#include "main.h"
#include "global.h"
#include "allocator.h"
#include "image.h"
#include "export.h"
#include "ansi.h"
#include "exec_delivery.h"
#include "utils.h"
#include "license.h"
#include "mlw_mklic.h"

#include <string.h>
#include <stdio.h>
#include <stdlib.h>

mlval deliverFn(mlval argument)
{
/*
 * We'd like to use fork here, but Win32 doesn't provide anything remotely like it.
 * So this is a single shot implementation.
 * Caveat emptor
 */
  mlval global;
  mlval filename = FIELD(argument, 0);
  /* This ml arg must match datatype definition in pervasive library */
  mlval console_app = CINT(FIELD(argument, 2));
  char* c_filename = CSTRING(filename);
  FILE* test_file;
  int i, ext_exists=0, consoleApp;
  char* c_filename_exe = (char*) malloc(strlen(c_filename) + 4);

  if (c_filename_exe == NULL)
    error("Unable to malloc.  Out of memory.");

  for(i=0; i < (int) strlen(c_filename); i++)
    if (c_filename[i] == '.') 
      ext_exists = 1;

  strcpy(c_filename_exe, c_filename);

  if (ext_exists == 0)
    strcat(c_filename_exe, ".exe");

  /* Check that we can write the file before going any further, because
   * once we're past this stage on Windows, the process is doomed to die.
   */
  test_file = fopen(c_filename_exe, "wb");
  if (test_file == NULL) {
    exn_raise_string(perv_exn_ref_save, "Unable to open file for delivery");
  } else {
    fclose(test_file);
  }

  image_continuation = FIELD(argument, 1); /* This is a global, and hence a root */
  declare_root(&filename, 1);
    
  global = global_pack(1);	/* 1 = delivery rather than image save */
  declare_root(&global, 1);
    
  gc_clean_image(global);

  consoleApp = (console_app == 0) ? APP_CONSOLE : APP_WINDOWS;

  if (save_executable(c_filename_exe, global, consoleApp) == MLERROR) {
    DIAGNOSTIC(1,"save_executable failed, exiting with errno %d",errno,0);
    switch (errno) {
    case EIMPL:
      error("Function save not implemented");
    case EIMAGEWRITE:
      error("Error writing opened image file");
    case EIMAGEOPEN:
      error("Unable to open image file");
    default:
      break;
    }
    if (errno) error(strerror(errno));
    error("deliver failed with unknown error");
    exit(-1); /* NOT REACHED */
  } else {
    DIAGNOSTIC(1,"save_executable succeeded, exiting with errno %d",errno,0);
  }

  exit(0);
  /*** NOT REACHED ***/
  return MLUNIT;
}

@


1.9.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a5 4
 * Revision 1.9  1998/06/09  15:11:00  mitchell
 * [Bug #30419]
 * Move free edition check to rts!src:system.c
 *
@


1.8
log
@[Bug #30303]
Disabling image saving for student edition.
@
text
@d6 4
a99 5

  if (EDITION == STUDENT) {
    exn_raise_string(perv_exn_ref_save, "Delivery not enabled for this edition");
    return MLUNIT;
  }
@


1.7
log
@[Bug #70018]
Modify declare_root to accept a second parameter
indicating whether the root is live for image save
@
text
@d6 5
d71 2
d96 5
@


1.6
log
@[Bug #30134]
Change deliverFn to only save executeables and also differentiate between console and window apps.
@
text
@d6 4
d110 1
a110 1
  declare_root(&filename);
d113 1
a113 1
  declare_root(&global);
@


1.5
log
@[Bug #20084]
Add .exe extension if none is given (save_executable).
@
text
@d6 4
d76 2
a77 1
  mlval save_exec= FIELD(argument, 2);
d80 1
a80 1
  int i, ext_exists=0;
d98 1
a98 1
  test_file = save_exec ? fopen(c_filename_exe, "wb") : fopen(c_filename, "wb");
d112 14
a125 20
    
  if (save_exec == MLFALSE) {
    argument = allocate_record(2);
    FIELD(argument, 0) = filename;
    FIELD(argument, 1) = global;
    retract_root(&filename);
    retract_root(&global);
    
    if(image_save(argument) == MLERROR) {
      switch (errno) {
      case EIMPL:
	error("Function save not implemented");
      case EIMAGEWRITE:
	error("Error writing opened image file");
      case EIMAGEOPEN:
	error("Unable to open image file");
      default:
	break;
      }
      exit(errno ? errno : -1);
d127 3
d131 1
a131 18
    if (save_executable(c_filename_exe, global) == MLERROR) {
      DIAGNOSTIC(1,"save_executable failed, exiting with errno %d",errno,0);
      switch (errno) {
      case EIMPL:
	error("Function save not implemented");
      case EIMAGEWRITE:
	error("Error writing opened image file");
      case EIMAGEOPEN:
	error("Unable to open image file");
      default:
	break;
      }
      if (errno) error(strerror(errno));
      error("deliver failed with unknown error");
      exit(-1); /* NOT REACHED */
    } else {
      DIAGNOSTIC(1,"save_executable succeeded, exiting with errno %d",errno,0);
    }
d133 1
@


1.5.1.1
log
@branched from trunk for label MLWorks_MM_adapt
@
text
@a5 4
 * Revision 1.5  1997/10/10  16:14:20  johnh
 * [Bug #20084]
 * Add .exe extension if none is given (save_executable).
 *
@


1.4
log
@[Bug #50004]
Merging changes from 1.0r2c2 into 2.0m0
@
text
@d6 4
d61 1
d75 14
d93 1
a93 1
  test_file = fopen(c_filename, "wb");
d129 1
a129 1
    if (save_executable(CSTRING(filename), global) == MLERROR) {
@


1.4.2.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a5 4
 * Revision 1.4  1997/06/13  13:36:47  jkbrook
 * [Bug #50004]
 * Merging changes from 1.0r2c2 into 2.0m0
 *
@


1.4.1.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a5 4
 * Revision 1.4  1997/06/13  13:36:47  jkbrook
 * [Bug #50004]
 * Merging changes from 1.0r2c2 into 2.0m0
 *
@


1.3
log
@Make sure save_executable doesn't fail silently
@
text
@d6 3
d56 1
d68 13
@


1.3.1.1
log
@branched from 1.3
@
text
@a5 3
 * Revision 1.3  1997/04/08  14:16:33  jont
 * Make sure save_executable doesn't fail silently
 *
@


1.3.1.2
log
@[Bug #50004]
Moved check for ability to create file to here from generic system.c.
@
text
@a5 3
 * Revision 1.3.1.1  1997/05/12  10:40:21  hope
 * branched from 1.3
 *
a55 1
#include <stdio.h>
a66 13
  char* c_filename = CSTRING(filename);
  FILE* test_file;

  /* Check that we can write the file before going any further, because
   * once we're past this stage on Windows, the process is doomed to die.
   */
  test_file = fopen(c_filename, "wb");
  if (test_file == NULL) {
    exn_raise_string(perv_exn_ref_save, "Unable to open file for delivery");
  } else {
    fclose(test_file);
  }

@


1.3.1.2.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a5 4
 * Revision 1.3.1.2  1997/06/10  13:28:58  daveb
 * [Bug #50004]
 * Moved check for ability to create file to here from generic system.c.
 *
@


1.3.1.2.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a5 4
 * Revision 1.3.1.2  1997/06/10  13:28:58  daveb
 * [Bug #50004]
 * Moved check for ability to create file to here from generic system.c.
 *
@


1.3.1.2.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a5 4
 * Revision 1.3.1.2  1997/06/10  13:28:58  daveb
 * [Bug #50004]
 * Moved check for ability to create file to here from generic system.c.
 *
@


1.3.1.2.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a5 3
 * Revision 1.3.1.2.1.1  1997/07/28  18:25:05  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.2
log
@[Bug #1811]
In deliverFn, use the third argument to determine
whether to deliver an executable or an image.
False => image, True => executable
@
text
@d6 6
d52 2
d95 13
a107 1
      exit(errno ? errno : -1);
@


1.1
log
@new unit
This used to be src/rts/src/OS/{NT,Win95}/win_export.c
@
text
@d5 5
a9 1
 * $Log: src:OS:common:win32_export.c,v $
d43 1
d55 1
d64 6
a69 5
  argument = allocate_record(2);
  FIELD(argument, 0) = filename;
  FIELD(argument, 1) = global;
  retract_root(&filename);
  retract_root(&global);
d71 19
a89 10
  if(image_save(argument) == MLERROR) {
    switch (errno) {
    case EIMPL:
      error("Function save not implemented");
    case EIMAGEWRITE:
      error("Error writing opened image file");
    case EIMAGEOPEN:
      error("Unable to open image file");
    default:
      break;
a90 2
    exit(errno ? errno : -1);

@


1.1.8.1
log
@branched from 1.1
@
text
@d5 1
a5 5
 * $Log: src:OS:Win32:export.c,v $
 * Revision 1.1  1996/02/20  10:19:28  stephenb
 * new unit
 * This used to be src/rts/src/OS/{NT,Win95}/win_export.c
 *
@


1.1.7.1
log
@branched from 1.1
@
text
@d5 1
a5 5
 * $Log: src:OS:Win32:export.c,v $
 * Revision 1.1  1996/02/20  10:19:28  stephenb
 * new unit
 * This used to be src/rts/src/OS/{NT,Win95}/win_export.c
 *
@


1.1.7.1.1.1
log
@branched from 1.1.7.1
@
text
@a5 3
 * Revision 1.1.7.1  1996/12/17  17:53:23  hope
 * branched from 1.1
 *
@


1.1.6.1
log
@branched from 1.1
@
text
@d5 1
a5 5
 * $Log: src:OS:Win32:export.c,v $
 * Revision 1.1  1996/02/20  10:19:28  stephenb
 * new unit
 * This used to be src/rts/src/OS/{NT,Win95}/win_export.c
 *
@


1.1.5.1
log
@branched from 1.1
@
text
@d5 1
a5 5
 * $Log: src:OS:Win32:export.c,v $
 * Revision 1.1  1996/02/20  10:19:28  stephenb
 * new unit
 * This used to be src/rts/src/OS/{NT,Win95}/win_export.c
 *
@


1.1.4.1
log
@branched from 1.1
@
text
@d5 1
a5 5
 * $Log: src:OS:Win32:export.c,v $
 * Revision 1.1  1996/02/20  10:19:28  stephenb
 * new unit
 * This used to be src/rts/src/OS/{NT,Win95}/win_export.c
 *
@


1.1.4.1.1.1
log
@branched from 1.1.4.1
@
text
@a5 3
 * Revision 1.1.4.1  1996/11/14  12:56:52  hope
 * branched from 1.1
 *
@


1.1.3.1
log
@branched from 1.1
@
text
@d5 1
a5 5
 * $Log: src:OS:Win32:export.c,v $
 * Revision 1.1  1996/02/20  10:19:28  stephenb
 * new unit
 * This used to be src/rts/src/OS/{NT,Win95}/win_export.c
 *
@


1.1.2.1
log
@branched from 1.1
@
text
@d5 1
a5 5
 * $Log: src:OS:Win32:export.c,v $
 * Revision 1.1  1996/02/20  10:19:28  stephenb
 * new unit
 * This used to be src/rts/src/OS/{NT,Win95}/win_export.c
 *
@


1.1.1.1
log
@branched from 1.1
@
text
@d5 1
a5 5
 * $Log: src:OS:Win32:export.c,v $
 * Revision 1.1  1996/02/20  10:19:28  stephenb
 * new unit
 * This used to be src/rts/src/OS/{NT,Win95}/win_export.c
 *
@
