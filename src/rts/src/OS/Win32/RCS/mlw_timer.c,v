head	1.3;
access;
symbols
	MLWorks_Beta_1996_06_07:1.1
	MLWorks_Beta_1996_06_06:1.1
	MLWorks_Beta_1996_06_05:1.1
	MLWorks_Beta_1996_06_03:1.1
	MLWorks_Beta_1996_05_31:1.1;
locks; strict;
comment	@ * @;


1.3
date	96.06.17.10.28.35;	author stephenb;	state Exp;
branches;
next	1.2;

1.2
date	96.06.12.09.38.45;	author stephenb;	state Exp;
branches;
next	1.1;

1.1
date	96.05.30.10.26.26;	author stephenb;	state Exp;
branches;
next	;


desc
@new unit
@


1.3
log
@Flesh out the mlw_timer_now stub.
@
text
@/* Copyright 1996 The Harlequin Group Limited.  All rights reserved.
 *
 * The default Win32 implementation of runtime routines to support the 
 * Timer structure as defined in the basis.
 *
 * $Log: src:OS:Win32:mlw_timer.c,v $
 * Revision 1.2  1996/06/12  09:38:45  stephenb
 * Update wrt changes in the time_date interface.
 *
 * Revision 1.1  1996/05/30  10:26:26  stephenb
 * new unit
 *
 */

#include <windows.h>
#include "environment.h"	/* env_function ... etc. */
#include "allocator.h"		/* allocate_record */
#include "gc.h"			/* gc_clock, declare_root, ... etc. */
#include "utils.h"		/* error */
#include "time_date.h"		/* mlw_time_from_double, ... */
#include "mlw_timer.h"
#include "mlw_timer_init.h"



/*
 * Timer.now : unit -> cpu_timer
 *
 * This is an auxiliary function that it used to support the implementation
 * of Timer.startCPUTimer and Timer.checkCPUTimer.  It just returns the
 * current user, system and gc time.
 */

static mlval mlw_timer_now(mlval unit)
{
  mlval gc_time, usr_time, sys_time, cpu_time;

  gc_time= mlw_time_from_double(gc_clock/1000.0);
  declare_root(&gc_time);

  {
    usr_time= mlw_time_from_double(0.0);
    declare_root(&usr_time);
    sys_time= mlw_time_from_double(0.0);
    declare_root(&sys_time);
  }

  {
    HANDLE process= GetCurrentProcess();
    FILETIME creation_time, exit_time, kernel_time, user_time;
    if (GetProcessTimes(process, &creation_time, &exit_time, &kernel_time, &user_time) == FALSE) {
      error("MLWorks cannot determine process times");
    }
    usr_time= mlw_time_from_file_time(&user_time);
    declare_root(&usr_time);
    sys_time= mlw_time_from_file_time(&kernel_time);
    declare_root(&sys_time);
  }

  cpu_time= mlw_timer_cpu_make();
  mlw_timer_cpu_usr(cpu_time)= usr_time;
  mlw_timer_cpu_sys(cpu_time)= sys_time;
  mlw_timer_cpu_gc(cpu_time)= gc_time;
  retract_root(&sys_time);
  retract_root(&usr_time);
  retract_root(&gc_time);
  return cpu_time;
}



void mlw_timer_init(void)
{
  env_function("Timer.now", mlw_timer_now);
}
@


1.2
log
@Update wrt changes in the time_date interface.
@
text
@d7 3
d19 1
a32 3
/* XXX: This is just a stub for the moment.  It is only here so that
 * the restricted (Unix) beta release can compile.
 */
d45 12
@


1.1
log
@new unit
@
text
@d6 4
a9 1
 * $Log$
d16 1
a16 1
#include "time_date.h"		/* mlw_time_make */
d37 2
a38 7
  {
    long gc_time_sec, gc_time_usec;
    gc_time_sec= (long)(gc_clock / 1000000.0);
    gc_time_usec= (long)(gc_clock - ((double)gc_time_sec * 1000000.0));
    gc_time= mlw_time_make(gc_time_sec, gc_time_usec);
    declare_root(&gc_time);
  }
d41 1
a41 1
    usr_time= mlw_time_make(0, 0);
d43 1
a43 1
    sys_time= mlw_time_make(0, 0);
@
