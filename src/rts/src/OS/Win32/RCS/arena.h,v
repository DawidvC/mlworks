head	1.3;
access;
symbols
	MLWorks_20b1c1_1998_05_07:1.3
	MLWorks_20b0_1998_04_07:1.3
	MLWorks_20b0_1998_03_20:1.3
	MLWorks_20m2_1998_02_16:1.3
	MLWorks_MM_adapt:1.3.9
	MLWorks_20m1_1997_10_23:1.3
	MLWorks_11r1:1.3.6.1.1.1.1
	MLWorks_workspace_97:1.3.8
	MLWorks_dt_wizard:1.3.7
	MLWorks_11c0_1997_09_09:1.3.6.1.1.1
	MLWorks_10r3:1.3.6.1.3
	MLWorks_10r2_551:1.3.6.1.2
	MLWorks_11:1.3.6.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.3.6.1
	MLWorks_20m0_1997_06_20:1.3
	MLWorks_1_0_r2c2_1997_06_14:1.3.6.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.3.6.1
	MLWorks_1_0_r2c1_1997_05_12:1.3.6
	MLWorks_BugFix_1997_04_24:1.3
	MLWorks_1_0_r2_Win32_1997_04_11:1.3
	MLWorks_1_0_r2_Unix_1997_04_04:1.3
	MM_ML_release_korma_1997_04_01:1.3
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.3.4.1.1
	MLWorks_gui_1996_12_18:1.3.5
	MLWorks_1_0_Win32_1996_12_17:1.3.4
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.3.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.3.1.1
	JFHrts:1.3.3
	MLWorks_1_0_Irix_1996_11_28:1.3.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.3.2
	MLWorks_1_0_Unix_1996_11_14:1.3.1
	MLWorks_Open_Beta2_1996_10_11:1.2.3
	MLWorks_License_dev:1.2.2
	MLWorks_1_open_beta_1996_09_13:1.2.1
	MLWorks_Open_Beta_1996_08_22:1.2
	MLWorks_Beta_1996_07_02:1.2
	MLWorks_Beta_1996_06_07:1.2
	MLWorks_Beta_1996_06_06:1.2
	MLWorks_Beta_1996_06_05:1.2
	MLWorks_Beta_1996_06_03:1.2
	MLWorks_Beta_1996_05_31:1.1
	MLWorks_Beta_1996_05_30:1.1;
locks; strict;
comment	@ * @;


1.3
date	96.10.29.17.17.01;	author nickb;	state Exp;
branches
	1.3.1.1
	1.3.2.1
	1.3.3.1
	1.3.4.1
	1.3.5.1
	1.3.6.1
	1.3.7.1
	1.3.8.1
	1.3.9.1;
next	1.2;

1.2
date	96.05.31.15.40.08;	author nickb;	state Exp;
branches
	1.2.1.1
	1.2.2.1
	1.2.3.1;
next	1.1;

1.1
date	96.03.06.11.23.04;	author stephenb;	state Exp;
branches;
next	;

1.2.1.1
date	96.09.13.11.24.34;	author hope;	state Exp;
branches;
next	;

1.2.2.1
date	96.10.07.16.14.53;	author hope;	state Exp;
branches;
next	;

1.2.3.1
date	96.10.17.11.34.19;	author hope;	state Exp;
branches;
next	;

1.3.1.1
date	96.11.14.12.59.58;	author hope;	state Exp;
branches
	1.3.1.1.1.1;
next	;

1.3.1.1.1.1
date	96.11.28.15.10.00;	author hope;	state Exp;
branches;
next	;

1.3.2.1
date	96.11.22.18.17.47;	author hope;	state Exp;
branches;
next	;

1.3.3.1
date	96.12.17.10.04.30;	author hope;	state Exp;
branches;
next	;

1.3.4.1
date	96.12.17.17.56.06;	author hope;	state Exp;
branches
	1.3.4.1.1.1;
next	;

1.3.4.1.1.1
date	97.02.24.11.47.39;	author hope;	state Exp;
branches;
next	;

1.3.5.1
date	96.12.18.09.50.43;	author hope;	state Exp;
branches;
next	;

1.3.6.1
date	97.05.12.10.44.24;	author hope;	state Exp;
branches
	1.3.6.1.1.1
	1.3.6.1.2.1
	1.3.6.1.3.1;
next	;

1.3.6.1.1.1
date	97.07.28.18.25.58;	author daveb;	state Exp;
branches
	1.3.6.1.1.1.1.1;
next	;

1.3.6.1.1.1.1.1
date	97.10.07.11.51.46;	author jkbrook;	state Exp;
branches;
next	;

1.3.6.1.2.1
date	97.09.08.17.19.13;	author daveb;	state Exp;
branches;
next	;

1.3.6.1.3.1
date	97.09.09.14.15.22;	author daveb;	state Exp;
branches;
next	;

1.3.7.1
date	97.09.10.19.32.21;	author brucem;	state Exp;
branches;
next	;

1.3.8.1
date	97.09.11.21.01.41;	author daveb;	state Exp;
branches;
next	;

1.3.9.1
date	97.10.31.13.44.36;	author nickb;	state Exp;
branches;
next	;


desc
@new unit
This replaces src/rts/src/OS/{NT,Win95}/arena.h
@


1.3
log
@Fix space lookup for pointers with top bit set.
@
text
@/*  ==== ARENA MANAGEMENT ====
 *
 *  Copyright (C) 1996 Harlequin Ltd
 *
 *  Description
 *  -----------
 *  This library manages the address space of the runtime system process,
 *  otherwise known as the `arena'.
 *
 *  The arena is the area of address space between address 0 and 1 <<
 *  ARENA_WIDTH. It is divided into a number of large `spaces' of size
 *  1 << SPACE_WIDTH.
 * 
 *  Some spaces are further subdivided into blocks of size 1 <<
 *  BLOCK_WIDTH. Contiguous sets of blocks are allocated and freed in
 *  a manner similar to malloc(). Virtual memory is only mapped for
 *  those blocks which are currently allocated.
 *
 *  Virtual memory is mapped for a non-block space from its base to
 *  its "extent". "Holes" may be allowed in the VM mapping of such a
 *  space.
 *
 *  Each block or space is allocated a `type'.  The client of this code is
 *  free to use types from 1 to 127.  Other types are reserved.  TYPE(addr)
 *  returns the type of the block or space which contains the address addr.
 *  SPACE_TYPE(addr) is a faster version which returns the type of a space
 *  or TYPE_BLOCKS for block spaces.
 *
 *  Revision Log
 *  ------------
 *  $Log: src:OS:Win32:arena.h,v $
 * Revision 1.2  1996/05/31  15:40:08  nickb
 * Add test_mapping().
 *
 * Revision 1.1  1996/03/06  11:23:04  stephenb
 * new unit
 * This replaces src/rts/src/OS/{NT,Win95}/arena.h
 *
 * Revision 1.4  1995/10/09  14:42:59  jont
 * Improve space number algorithm to allow transfer of images between
 * NT and Win95.
 *
 * Revision 1.3  1995/04/05  14:00:38  nickb
 * Add maximum memory use reporting.
 *
 * Revision 1.2  1995/03/01  13:39:09  nickb
 * Add interface for holes and make space_gen array general.
 *
 * Revision 1.1  1994/12/12  14:23:08  jont
 * new file
 *
 * Revision 1.2  1994/10/13  13:29:52  nickb
 * Allow multiple block spaces, so blocks can occupy more of arena.
 *
 * Revision 1.1  1994/10/04  16:31:54  jont
 * new file
 *
 * Revision 1.2  1994/06/09  14:25:33  nickh
 * new file
 *
 * Revision 1.1  1994/06/09  10:50:17  nickh
 * new file
 */

#ifndef arena_h
#define arena_h

#include "types.h"
#include <stddef.h>
#include "arenadefs.h"

/* SPACE_SIZE is the size of a single space, in bytes 			*/
/* NR_SPACES is the number of spaces in the whole address space		*/
/* SPACES_IN_ARENA is the number of spaces in the arena			*/
/* BLOCK_SIZE is the size of a single block, in bytes 			*/
/* BLOCKS_PER_SPACE is the number of blocks in the arena		*/

#define SPACE_SIZE	(1 << SPACE_WIDTH)
#define NR_SPACES	(1 << (ADDRESS_WIDTH-SPACE_WIDTH))
#define SPACES_IN_ARENA (1 << (ARENA_WIDTH-SPACE_WIDTH))
#define BLOCK_SIZE	(1 << BLOCK_WIDTH)
#define BLOCKS_PER_SPACE (1 << (SPACE_WIDTH-BLOCK_WIDTH))

#define SPACE(addr)	((word)(addr) >> SPACE_WIDTH)
#define SPACE_BASE(s)	((byte *)((s) << SPACE_WIDTH))
#define SPACE_OFFSET(a) ((byte*)(a) - SPACE_BASE(SPACE(a)))
#define BLOCK_BASE(s,b) (SPACE_BASE(s) + ((b) << BLOCK_WIDTH))
#define BLOCK_NR(addr)  (SPACE_OFFSET(addr) >> BLOCK_WIDTH)
#define BLOCKS(size)	(((size) + BLOCK_SIZE-1) >> BLOCK_WIDTH)
#define BLOCKROUND(size) (BLOCKS(size) << BLOCK_WIDTH)

extern byte space_type[NR_SPACES];
extern size_t space_extent[NR_SPACES];

/* space_info[s] is a pointer to information about the space. For
   block spaces, it is a pointer to the block type map for that space.
   For other spaces, it is at the disposal of the client. */

extern void *space_info[NR_SPACES];
#define SPACE_MAP(space)	((byte*) space_info[space])

#define TYPE(addr) \
   (space_type[SPACE(addr)] != TYPE_BLOCKS ?	\
       space_type[SPACE(addr)] : 		\
       (SPACE_MAP(SPACE(addr))[BLOCK_NR(addr)]))

#define SPACE_TYPE(addr) (space_type[SPACE(addr)])

#define TYPE_RESERVED	((byte)-2)
#define TYPE_BLOCKS	((byte)-1)
#define TYPE_FREE	0

/* Total amount of memory mapped */

extern size_t arena_extent;

#ifdef COLLECT_STATS
/* we keep track of the largest heap usage */
extern size_t max_arena_extent;
#endif

extern void arena_init(void);
extern byte *block_alloc(byte type, size_t size);
extern void block_free(byte *block, size_t size);
extern byte *space_alloc(byte type, size_t extent);
extern void space_free(byte *space);
extern void space_resize(byte *space, size_t extent);
extern void space_allow_hole(byte *hole, size_t extent);
extern void space_remove_hole(byte *hole, size_t extent);

#ifdef DEBUG
extern void test_mapping(void);
#endif

#endif
@


1.3.9.1
log
@branched from trunk for label MLWorks_MM_adapt
@
text
@a31 3
 * Revision 1.3  1996/10/29  17:17:01  nickb
 * Fix space lookup for pointers with top bit set.
 *
@


1.3.8.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a31 3
 * Revision 1.3  1996/10/29  17:17:01  nickb
 * Fix space lookup for pointers with top bit set.
 *
@


1.3.7.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a31 3
 * Revision 1.3  1996/10/29  17:17:01  nickb
 * Fix space lookup for pointers with top bit set.
 *
@


1.3.6.1
log
@branched from 1.3
@
text
@a31 3
 * Revision 1.3  1996/10/29  17:17:01  nickb
 * Fix space lookup for pointers with top bit set.
 *
@


1.3.6.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a31 3
 * Revision 1.3.6.1  1997/05/12  10:44:24  hope
 * branched from 1.3
 *
@


1.3.6.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a31 3
 * Revision 1.3.6.1  1997/05/12  10:44:24  hope
 * branched from 1.3
 *
@


1.3.6.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a31 3
 * Revision 1.3.6.1  1997/05/12  10:44:24  hope
 * branched from 1.3
 *
@


1.3.6.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a31 3
 * Revision 1.3.6.1.1.1  1997/07/28  18:25:58  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.3.5.1
log
@branched from 1.3
@
text
@a31 3
 * Revision 1.3  1996/10/29  17:17:01  nickb
 * Fix space lookup for pointers with top bit set.
 *
@


1.3.4.1
log
@branched from 1.3
@
text
@a31 3
 * Revision 1.3  1996/10/29  17:17:01  nickb
 * Fix space lookup for pointers with top bit set.
 *
@


1.3.4.1.1.1
log
@branched from 1.3.4.1
@
text
@a31 3
 * Revision 1.3.4.1  1996/12/17  17:56:06  hope
 * branched from 1.3
 *
@


1.3.3.1
log
@branched from 1.3
@
text
@a31 3
 * Revision 1.3  1996/10/29  17:17:01  nickb
 * Fix space lookup for pointers with top bit set.
 *
@


1.3.2.1
log
@branched from 1.3
@
text
@a31 3
 * Revision 1.3  1996/10/29  17:17:01  nickb
 * Fix space lookup for pointers with top bit set.
 *
@


1.3.1.1
log
@branched from 1.3
@
text
@a31 3
 * Revision 1.3  1996/10/29  17:17:01  nickb
 * Fix space lookup for pointers with top bit set.
 *
@


1.3.1.1.1.1
log
@branched from 1.3.1.1
@
text
@a31 3
 * Revision 1.3.1.1  1996/11/14  12:59:58  hope
 * branched from 1.3
 *
@


1.2
log
@Add test_mapping().
@
text
@d3 1
a3 1
 *  Copyright (C) 1992 Harlequin Ltd
d10 12
a21 11
 *  The arena is the area of address space between address arena_base and
 *  2^ADDRESS_WIDTH (typically 1Gb).  It is divided into a number of large
 *  `spaces' of size 2^SPACE_WIDTH (typically 16Mb).  Virtual memory is
 *  mapped from the beginning of each space up to its `extent'.
 *
 *  Some spaces are used for a different type of allocation.  These
 *  spaces are divided into BLOCKS of size 2^BLOCK_WIDTH (typically
 *  64Kb).  Contiguous areas of memory in the block spaces are
 *  allocated and freed in a manner similar to malloc().  Virtual
 *  memory is only mapped for those block which are currently
 *  allocated.
d32 3
d72 13
a84 2
#define ADDRESS_TOP	((1ul << ADDRESS_WIDTH)-1)
#define SPACE(addr)	(((word)(addr)) >> SPACE_WIDTH)
d90 1
a90 1
#define BLOCKROUND(size)(BLOCKS(size) << BLOCK_WIDTH)
d94 5
d100 1
a100 2

#define SPACE_MAP(space)	((char*)space_info[space])
d103 1
a103 2
  ((word)addr > ADDRESS_TOP ? TYPE_RESERVED :	\
     space_type[SPACE(addr)] != TYPE_BLOCKS ?	\
d107 1
a107 2
#define SPACE_TYPE(addr) \
  ((word)addr > ADDRESS_TOP ? TYPE_RESERVED : space_type[SPACE(addr)])
d113 2
d116 1
@


1.2.3.1
log
@branched from 1.2
@
text
@a30 3
 * Revision 1.2  1996/05/31  15:40:08  nickb
 * Add test_mapping().
 *
@


1.2.2.1
log
@branched from 1.2
@
text
@a30 3
 * Revision 1.2  1996/05/31  15:40:08  nickb
 * Add test_mapping().
 *
@


1.2.1.1
log
@branched from 1.2
@
text
@a30 3
 * Revision 1.2  1996/05/31  15:40:08  nickb
 * Add test_mapping().
 *
@


1.1
log
@new unit
This replaces src/rts/src/OS/{NT,Win95}/arena.h
@
text
@d30 5
a34 1
 *  $Log: src:OS:NT:arena.h,v $
d110 4
@
