head	1.12;
access;
symbols
	MLW_daveb_inline_1_4_99:1.12.1
	MLWorks_21c0_1999_03_25:1.12
	MLWorks_20c1_1998_08_20:1.10
	MLWorks_20c0_1998_08_04:1.10
	MLWorks_20b2c2_1998_06_19:1.10
	MLWorks_20b2_Windows_1998_06_12:1.10
	MLWorks_20b1c1_1998_05_07:1.10
	MLWorks_20b0_1998_04_07:1.10
	MLWorks_20b0_1998_03_20:1.10
	MLWorks_20m2_1998_02_16:1.10
	MLWorks_MM_adapt:1.10.4
	MLWorks_20m1_1997_10_23:1.10
	MLWorks_11r1:1.10.1.1.1.1.1
	MLWorks_workspace_97:1.10.3
	MLWorks_dt_wizard:1.10.2
	MLWorks_11c0_1997_09_09:1.10.1.1.1.1
	MLWorks_10r3:1.10.1.1.3
	MLWorks_10r2_551:1.10.1.1.2
	MLWorks_11:1.10.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.10.1.1
	MLWorks_20m0_1997_06_20:1.10
	MLWorks_1_0_r2c2_1997_06_14:1.10.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.10.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.10.1
	MLWorks_BugFix_1997_04_24:1.10
	MLWorks_1_0_r2_Win32_1997_04_11:1.10
	MLWorks_1_0_r2_Unix_1997_04_04:1.10
	MM_ML_release_korma_1997_04_01:1.10
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.8.4.1.1
	MLWorks_gui_1996_12_18:1.8.5
	MLWorks_1_0_Win32_1996_12_17:1.8.4
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.8.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.8.1.1
	JFHrts:1.8.3
	MLWorks_1_0_Irix_1996_11_28:1.8.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.8.2
	MLWorks_1_0_Unix_1996_11_14:1.8.1
	MLWorks_Open_Beta2_1996_10_11:1.7.3
	MLWorks_License_dev:1.7.2
	MLWorks_1_open_beta_1996_09_13:1.7.1
	MLWorks_Open_Beta_1996_08_22:1.6
	MLWorks_Beta_1996_07_02:1.6
	MLWorks_Beta_1996_06_07:1.5
	MLWorks_Beta_1996_06_06:1.5
	MLWorks_Beta_1996_06_05:1.5
	MLWorks_Beta_1996_06_03:1.5
	MLWorks_Beta_1996_05_31:1.5
	MLWorks_Beta_1996_05_30:1.4;
locks; strict;
comment	@ * @;


1.12
date	98.09.16.15.16.05;	author jont;	state Exp;
branches
	1.12.1.1;
next	1.11;

1.11
date	98.09.16.10.53.27;	author jont;	state Exp;
branches;
next	1.10;

1.10
date	97.03.25.12.41.37;	author nickb;	state Exp;
branches
	1.10.1.1
	1.10.2.1
	1.10.3.1
	1.10.4.1;
next	1.9;

1.9
date	97.03.24.15.03.30;	author nickb;	state Exp;
branches;
next	1.8;

1.8
date	96.10.30.14.47.42;	author johnh;	state Exp;
branches
	1.8.1.1
	1.8.2.1
	1.8.3.1
	1.8.4.1
	1.8.5.1;
next	1.7;

1.7
date	96.08.27.16.22.02;	author nickb;	state Exp;
branches
	1.7.1.1
	1.7.2.1
	1.7.3.1;
next	1.6;

1.6
date	96.06.18.14.35.28;	author stephenb;	state Exp;
branches;
next	1.5;

1.5
date	96.05.30.10.14.36;	author stephenb;	state Exp;
branches;
next	1.4;

1.4
date	96.05.13.12.01.44;	author stephenb;	state Exp;
branches;
next	1.3;

1.3
date	96.05.10.09.10.52;	author matthew;	state Exp;
branches;
next	1.2;

1.2
date	96.05.07.12.42.05;	author stephenb;	state Exp;
branches;
next	1.1;

1.1
date	96.03.06.11.23.04;	author stephenb;	state Exp;
branches;
next	;

1.7.1.1
date	96.09.13.11.23.12;	author hope;	state Exp;
branches;
next	;

1.7.2.1
date	96.10.07.16.13.22;	author hope;	state Exp;
branches;
next	;

1.7.3.1
date	96.10.17.11.32.40;	author hope;	state Exp;
branches;
next	;

1.8.1.1
date	96.11.14.12.58.33;	author hope;	state Exp;
branches
	1.8.1.1.1.1;
next	;

1.8.1.1.1.1
date	96.11.28.15.08.31;	author hope;	state Exp;
branches;
next	;

1.8.2.1
date	96.11.22.18.16.12;	author hope;	state Exp;
branches;
next	;

1.8.3.1
date	96.12.17.10.02.57;	author hope;	state Exp;
branches;
next	;

1.8.4.1
date	96.12.17.17.54.36;	author hope;	state Exp;
branches
	1.8.4.1.1.1;
next	;

1.8.4.1.1.1
date	97.02.24.11.45.42;	author hope;	state Exp;
branches;
next	;

1.8.5.1
date	96.12.18.09.49.13;	author hope;	state Exp;
branches;
next	;

1.10.1.1
date	97.05.12.10.41.37;	author hope;	state Exp;
branches
	1.10.1.1.1.1
	1.10.1.1.2.1
	1.10.1.1.3.1;
next	;

1.10.1.1.1.1
date	97.07.28.18.28.56;	author daveb;	state Exp;
branches
	1.10.1.1.1.1.1.1;
next	;

1.10.1.1.1.1.1.1
date	97.10.07.11.54.47;	author jkbrook;	state Exp;
branches;
next	;

1.10.1.1.2.1
date	97.09.08.17.21.54;	author daveb;	state Exp;
branches;
next	;

1.10.1.1.3.1
date	97.09.09.14.17.57;	author daveb;	state Exp;
branches;
next	;

1.10.2.1
date	97.09.10.19.37.13;	author brucem;	state Exp;
branches;
next	;

1.10.3.1
date	97.09.11.21.05.14;	author daveb;	state Exp;
branches;
next	;

1.10.4.1
date	97.10.31.13.48.17;	author nickb;	state Exp;
branches;
next	;

1.12.1.1
date	99.04.01.18.03.58;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
This replaces src/rts/src/OS/{NT,Win95}/os.c
@


1.12
log
@[Bug #70174]
Modify type of parse_command_line to fix compiler warnings
@
text
@/*  ==== OPERATING SYSTEM INTERFACE ====
 *
 *  Copyright (C) 1994 Harlequin Ltd
 *
 *  Revision Log
 *  ------------
 *  $Log: src:OS:Win32:os.c,v $
 * Revision 1.11  1998/09/16  10:53:27  jont
 * [Bug #30108]
 * System specific stuff for command lines
 *
 * Revision 1.10  1997/03/25  12:41:37  nickb
 * Fix compilation problem.
 *
 * Revision 1.9  1997/03/24  15:03:30  nickb
 * Make malloc() and realloc() edge cases match the OS libraries.
 *
 * Revision 1.8  1996/10/30  14:47:42  johnh
 * Add interrupt functionality on Windows.
 *
 * Revision 1.7  1996/08/27  16:22:02  nickb
 * Add os_on_exit.
 *
 * Revision 1.6  1996/06/18  14:35:28  stephenb
 * Fix #1390 - rounding mode controls not working.
 *
 * Revision 1.5  1996/05/30  10:14:36  stephenb
 * os_init: add call to mlw_timer_init.
 *
 * Revision 1.4  1996/05/13  12:01:44  stephenb
 * Flesh out the rounding mode routines.
 *
 * Revision 1.3  1996/05/10  09:10:52  matthew
 * Adding get/set rounding mode functions
 *
 * Revision 1.2  1996/05/07  12:42:05  stephenb
 * Add support for basis Time structure.
 *
 * Revision 1.1  1996/03/06  11:23:04  stephenb
 * new unit
 * This replaces src/rts/src/OS/{NT,Win95}/os.c
 *
 * Revision 1.6  1996/01/22  15:43:24  stephenb
 * change nt_init to win32_init.
 *
 * Revision 1.5  1996/01/18  14:26:22  stephenb
 * OS reorganisation: remove any reference to UNIX since this
 * is no longer in the pervasive library.
 *
 * Revision 1.4  1995/08/02  15:20:27  jont
 * Remove dependence on winmain.h
 *
 * Revision 1.3  1995/04/24  14:10:45  nickb
 * Add os_update_windows().
 *
 * Revision 1.2  1995/03/01  16:41:00  jont
 * Add winmain initialisation
 *
 * Revision 1.1  1994/12/12  14:27:06  jont
 * new file
 *
 * Revision 1.1  1994/10/04  16:27:57  jont
 * new file
 *
 * Revision 1.2  1994/06/09  14:28:33  nickh
 * new file
 *
 * Revision 1.1  1994/06/09  10:52:56  nickh
 * new file
 *
 *
 */

#include <assert.h>		/* assert */
#include <float.h>		/* _controlfp */
#include <stdlib.h>		/* atexit */
#include <windows.h>

#include "utils.h"
#include "diagnostic.h"
#include "win32.h"		/* win32_init */
#include "dde_lib.h"		/* dde_init */
#include "time_date_init.h"	/* mlw_time_date_init */
#include "mlw_timer_init.h"	/* mlw_timer_init */
#include "os_io_poll.h"		/* mlw_os_io_poll_init */
#include "alloc.h"

#include "os.h"

extern void winmain_init(void);	/* should be in window.h or an equivalent */
extern void mlw_expose_windows(void);

extern void os_init(void)
{
  dde_init();
  mlw_os_io_poll_init();
  mlw_time_date_init();
  mlw_timer_init();
  win32_init();
  winmain_init();
}

extern void os_on_exit(void (*f)(void))
{
  atexit(f);
}

/* On Solbournes, need a call to fsync between flushing and closing,
otherwise the wrong modification time may be obtained subsequently */

extern void os_filesync(FILE *f)
{
/*
  fsync(fileno(f));
*/
}

/* this gets called 'every so often'. 
 * It is used to handle expose events and check to see if the interrupt
 * button has been pressed. */

extern void os_update_windows(void)
{
  mlw_expose_windows();
/* the non-NT ports have this here:
   x_handle_expose_events();
*/
}



/* Support for IEEEReal.{set,get}RoundingMode 
 *
 * os_{get,set}_rounding_mode are expected to return/take modes with the
 * following meanings :-
 *
 *  0 : to nearest
 *  1 : to zero
 *  2 : to positive infinity
 *  3 : to negative infinity
 *
 * The Visual C++ manual isn't very explicit about what the rounding modes
 * it supports actually mean (espcially wrt IEEE modes).  Currently they
 * are mapped as follows :-
 *
 * _RC_NEAR : to nearest
 * _RC_DOWN : to negative infinity
 * _RC_UP   : to positive infinity
 * _RC_CHOP : to zero
 */


int os_get_rounding_mode (void)
{
  unsigned int c_mode= _controlfp(0, 0);
  switch(c_mode & _MCW_RC) {
  case _RC_NEAR:
    return 0;
  case _RC_DOWN:
    return 3;
  case _RC_UP:
    return 2;
  case _RC_CHOP:
    return 1;
  default:
    assert(0);
  }
}



static unsigned int
mlw_ieeefp_ml_to_c[]= { _RC_NEAR, _RC_CHOP, _RC_UP, _RC_DOWN };


void os_set_rounding_mode(int mode)
{
  assert(mode >= 0 && mode <= 3);
  (void)_controlfp(mlw_ieeefp_ml_to_c[mode], _MCW_RC);
}

/* The behaviour of malloc(0), realloc(NULL,0) and realloc(p,0)
 * depends on the OS, because we have to maintain compatibility with
 * the OS libraries See <URI:spring://MM_InfoSys/analysis/realloc> for
 * more information. */

extern void *os_allocator(int code, void *arg)
{
  switch (code) {
  case OS_ALLOCATOR_MALLOC_ZERO:
    DIAGNOSTIC(4,"malloc(0)",0,0);
    return malloc(1);
    break;
  case OS_ALLOCATOR_REALLOC_NULL_ZERO:
    DIAGNOSTIC(4,"realloc(NULL,0)",0,0);
    return malloc(1);
    break;
  case OS_ALLOCATOR_REALLOC_P_ZERO:
    DIAGNOSTIC(4,"realloc(0x%08x,0)",arg,0);
    free(arg);
    return NULL;
    break;
  default:
    error("Unknown code in os_allocator");
  }
  return NULL;
}

/*
 * Parses a command line into its constituent command name and arguments
 * according to the rules given in Microsoft's Visual C++ C reference
 * in the section "Parsing C Command-Line Arguments".  Basically, the
 * rules are simple except for the treatment of the escape character (\\)
 * which is also the pathname delimiter character.
 * Copied from dylan version.
 */

static int is_whitespace(char ch)
{
  return (ch == ' ' || ch == '\t' || ch == '\n');
}

static int skip_whitespace(int start, int end, char *args)
{
  char ch = args[start];
  while (start < end && is_whitespace(args[start])) {
    start++;
  }
  return start;
}

static int add_escapes(char *arg, int escapes, int res_ptr)
{
  while (escapes-- > 0) {
    arg[res_ptr++] = '\\';
  }
  return res_ptr;
}

static int next_token(int start, int end, char *args, char **arg)
{
  int res_ptr = 0;
  int ptr = skip_whitespace(start, end, args);
  *arg = malloc(end + 1 - ptr); /* Maximum it can be */
  if (arg == NULL) {
    error_without_alloc("Cannot allocate process argument array\n");
  }
  if (ptr < end) {
    int escaped = 0;
    int quoted = 0;
    while (ptr < end) {
      char ch = args[ptr++];
      if (escaped) {
	if (ch == '\\') {
	  escaped ++;
	} else {
	  if (ch == '"') {
	    if (escaped % 2 == 0) {
	      res_ptr = add_escapes(*arg, escaped / 2, res_ptr);
	      ptr--; /* reread the " */
	    } else {
	      res_ptr = add_escapes(*arg, (escaped - 1) / 2, res_ptr);
	      (*arg)[res_ptr++] = ch;
	    }
	  } else {
	    res_ptr = add_escapes(*arg, escaped, res_ptr);
	    (*arg)[res_ptr++] = ch;
	  }
	  escaped = 0;
	}
      } else {
	if (is_whitespace(ch) && !quoted) {
	  break;
	}
	switch (ch) {
	case '\\':
	  escaped = 1; /* Don't add this escape until later */
	  break;
	case '"':
	  quoted = !quoted;
	default:
	  (*arg)[res_ptr++] = ch; /* All other characters added at read time */
	  break;
	}
      }
    }
  } else {
    return -1;
  }
  (*arg)[res_ptr] = '\0'; /* Terminate the arg */
  return ptr;
}

static char **parse(int *argc, char *args)
{
  int start = 0;
  int end = strlen(args);
  int tokens = 0;
  char **argv = malloc(end+1);
  if (argv == NULL) {
    error_without_alloc("Cannot allocate process argument array\n");
  }
  while (start < end) {
    char *arg;
    start = next_token(start, end, args, &arg);
    if (start >= 0) {
      argv[tokens++] = arg; /* Pointer to current token */
    } else {
      break;
    }
  }
  *argc = tokens;
  return argv;
}

extern const char *const *parse_command_line(int *argc)
{
  LPTSTR command_line = GetCommandLine();
  return parse(argc, command_line);
}

BOOL WINAPI DllMain(HANDLE hModule, DWORD fdwreason, LPVOID reserved)
{
  switch (fdwreason) {
  case DLL_PROCESS_ATTACH:
  case DLL_THREAD_ATTACH:
  case DLL_THREAD_DETACH:
  case DLL_PROCESS_DETACH:
  default:;
    /* No action */
  }
  return 1;
}
@


1.12.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a7 4
 * Revision 1.12  1998/09/16  15:16:05  jont
 * [Bug #70174]
 * Modify type of parse_command_line to fix compiler warnings
 *
@


1.11
log
@[Bug #30108]
System specific stuff for command lines
@
text
@d8 4
d316 1
a316 1
extern char **parse_command_line(int *argc)
@


1.10
log
@Fix compilation problem.
@
text
@d8 3
d73 1
d205 125
@


1.10.4.1
log
@branched from trunk for label MLWorks_MM_adapt
@
text
@a7 3
 * Revision 1.10  1997/03/25  12:41:37  nickb
 * Fix compilation problem.
 *
@


1.10.3.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a7 3
 * Revision 1.10  1997/03/25  12:41:37  nickb
 * Fix compilation problem.
 *
@


1.10.2.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a7 3
 * Revision 1.10  1997/03/25  12:41:37  nickb
 * Fix compilation problem.
 *
@


1.10.1.1
log
@branched from 1.10
@
text
@a7 3
 * Revision 1.10  1997/03/25  12:41:37  nickb
 * Fix compilation problem.
 *
@


1.10.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a7 3
 * Revision 1.10.1.1  1997/05/12  10:41:37  hope
 * branched from 1.10
 *
@


1.10.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a7 3
 * Revision 1.10.1.1  1997/05/12  10:41:37  hope
 * branched from 1.10
 *
@


1.10.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a7 3
 * Revision 1.10.1.1  1997/05/12  10:41:37  hope
 * branched from 1.10
 *
@


1.10.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a7 3
 * Revision 1.10.1.1.1.1  1997/07/28  18:28:56  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.9
log
@Make malloc() and realloc() edge cases match the OS libraries.
@
text
@d8 3
d70 3
a72 1
#include "os.h"
d78 3
a80 1
#include "diagnostic.h"
d192 1
a192 1
    free(p);
@


1.8
log
@Add interrupt functionality on Windows.
@
text
@d8 3
d73 1
a73 1

d166 28
@


1.8.5.1
log
@branched from 1.8
@
text
@a7 3
 * Revision 1.8  1996/10/30  14:47:42  johnh
 * Add interrupt functionality on Windows.
 *
@


1.8.4.1
log
@branched from 1.8
@
text
@a7 3
 * Revision 1.8  1996/10/30  14:47:42  johnh
 * Add interrupt functionality on Windows.
 *
@


1.8.4.1.1.1
log
@branched from 1.8.4.1
@
text
@a7 3
 * Revision 1.8.4.1  1996/12/17  17:54:36  hope
 * branched from 1.8
 *
@


1.8.3.1
log
@branched from 1.8
@
text
@a7 3
 * Revision 1.8  1996/10/30  14:47:42  johnh
 * Add interrupt functionality on Windows.
 *
@


1.8.2.1
log
@branched from 1.8
@
text
@a7 3
 * Revision 1.8  1996/10/30  14:47:42  johnh
 * Add interrupt functionality on Windows.
 *
@


1.8.1.1
log
@branched from 1.8
@
text
@a7 3
 * Revision 1.8  1996/10/30  14:47:42  johnh
 * Add interrupt functionality on Windows.
 *
@


1.8.1.1.1.1
log
@branched from 1.8.1.1
@
text
@a7 3
 * Revision 1.8.1.1  1996/11/14  12:58:33  hope
 * branched from 1.8
 *
@


1.7
log
@Add os_on_exit.
@
text
@d8 3
d73 1
d100 3
a102 2
/* this gets called 'every so often'. We could use it to handle expose
 * events, but I don't know whether that's appropriate in NT */
d106 1
@


1.7.3.1
log
@branched from 1.7
@
text
@a7 3
 * Revision 1.7  1996/08/27  16:22:02  nickb
 * Add os_on_exit.
 *
@


1.7.2.1
log
@branched from 1.7
@
text
@a7 3
 * Revision 1.7  1996/08/27  16:22:02  nickb
 * Add os_on_exit.
 *
@


1.7.1.1
log
@branched from 1.7
@
text
@a7 3
 * Revision 1.7  1996/08/27  16:22:02  nickb
 * Add os_on_exit.
 *
@


1.6
log
@Fix #1390 - rounding mode controls not working.
@
text
@d8 3
d60 1
d79 5
@


1.5
log
@os_init: add call to mlw_timer_init.
@
text
@d8 3
d122 2
a123 2
  int c_mode= _controlfp(0,_MCW_RC);
  switch(c_mode) {
d136 1
@


1.4
log
@Flesh out the rounding mode routines.
@
text
@d8 3
d55 6
a60 4
#include "win32.h"
#include "dde_lib.h"
#include "time_date_init.h"
#include "os_io_poll.h"
d69 1
@


1.3
log
@Adding get/set rounding mode functions
@
text
@d8 3
d49 2
a87 6
/* Modes are :
  0 : to nearest
  1 : to zero
  2 : to positive infinity
  3 : to negative infinity
*/
d89 23
a111 1
extern int os_get_rounding_mode (void)
d113 13
a125 2
  printf ("os_get_rounding_mode unimplemented");
  return (0);
d128 6
a133 1
extern void os_set_rounding_mode (int arg)
d135 2
a136 1
  printf ("os_set_rounding_mode unimplemented");
@


1.2
log
@Add support for basis Time structure.
@
text
@d8 3
d81 18
@


1.1
log
@new unit
This replaces src/rts/src/OS/{NT,Win95}/os.c
@
text
@d7 5
a11 1
 *  $Log: src:OS:NT:os.c,v $
a42 2
#include <stdio.h>

d45 5
a49 1
#include "syscalls.h"
d53 3
@
