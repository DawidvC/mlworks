head	1.13;
access;
symbols
	MLW_daveb_inline_1_4_99:1.13.10
	MLWorks_21c0_1999_03_25:1.13
	MLWorks_20c1_1998_08_20:1.13
	MLWorks_20c0_1998_08_04:1.13
	MLWorks_20b2c2_1998_06_19:1.13
	MLWorks_20b2_Windows_1998_06_12:1.13
	MLWorks_20b1c1_1998_05_07:1.13
	MLWorks_20b0_1998_04_07:1.13
	MLWorks_20b0_1998_03_20:1.13
	MLWorks_20m2_1998_02_16:1.13
	MLWorks_MM_adapt:1.13.9
	MLWorks_20m1_1997_10_23:1.13
	MLWorks_11r1:1.13.6.1.1.1.1
	MLWorks_workspace_97:1.13.8
	MLWorks_dt_wizard:1.13.7
	MLWorks_11c0_1997_09_09:1.13.6.1.1.1
	MLWorks_10r3:1.13.6.1.3
	MLWorks_10r2_551:1.13.6.1.2
	MLWorks_11:1.13.6.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.13.6.1
	MLWorks_20m0_1997_06_20:1.13
	MLWorks_1_0_r2c2_1997_06_14:1.13.6.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.13.6.1
	MLWorks_1_0_r2c1_1997_05_12:1.13.6
	MLWorks_BugFix_1997_04_24:1.13
	MLWorks_1_0_r2_Win32_1997_04_11:1.13
	MLWorks_1_0_r2_Unix_1997_04_04:1.13
	MM_ML_release_korma_1997_04_01:1.13
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.13.4.1.1
	MLWorks_gui_1996_12_18:1.13.5
	MLWorks_1_0_Win32_1996_12_17:1.13.4
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.13.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.13.1.1
	JFHrts:1.13.3
	MLWorks_1_0_Irix_1996_11_28:1.13.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.13.2
	MLWorks_1_0_Unix_1996_11_14:1.13.1
	MLWorks_Open_Beta2_1996_10_11:1.12.3
	MLWorks_License_dev:1.12.2
	MLWorks_1_open_beta_1996_09_13:1.12.1
	MLWorks_Open_Beta_1996_08_22:1.12
	MLWorks_Beta_1996_07_02:1.12
	MLWorks_Beta_1996_06_07:1.12
	MLWorks_Beta_1996_06_06:1.12
	MLWorks_Beta_1996_06_05:1.12
	MLWorks_Beta_1996_06_03:1.12
	MLWorks_Beta_1996_05_31:1.10
	MLWorks_Beta_1996_05_30:1.9
	hope_poo:1.2.1
	ML_beta_release_12/08/94:1.2.1.1
	ML_beta_release_03/08/94:1.2;
locks; strict;
comment	@ * @;


1.13
date	96.10.29.17.26.42;	author nickb;	state Exp;
branches
	1.13.1.1
	1.13.2.1
	1.13.3.1
	1.13.4.1
	1.13.5.1
	1.13.6.1
	1.13.7.1
	1.13.8.1
	1.13.9.1
	1.13.10.1;
next	1.12;

1.12
date	96.05.31.10.41.58;	author nickb;	state Exp;
branches
	1.12.1.1
	1.12.2.1
	1.12.3.1;
next	1.11;

1.11
date	96.05.31.09.20.17;	author nickb;	state Exp;
branches;
next	1.10;

1.10
date	96.05.30.16.23.19;	author nickb;	state Exp;
branches;
next	1.9;

1.9
date	96.05.14.16.31.24;	author nickb;	state Exp;
branches;
next	1.8;

1.8
date	96.01.29.15.07.48;	author stephenb;	state Exp;
branches;
next	1.7;

1.7
date	95.04.05.13.40.37;	author nickb;	state Exp;
branches;
next	1.6;

1.6
date	95.03.28.14.37.02;	author io;	state Exp;
branches;
next	1.5;

1.5
date	95.03.01.13.42.09;	author nickb;	state Exp;
branches;
next	1.4;

1.4
date	95.02.28.12.59.56;	author nickb;	state Exp;
branches;
next	1.3;

1.3
date	94.10.13.12.51.11;	author nickb;	state Exp;
branches;
next	1.2;

1.2
date	94.06.09.14.25.14;	author nickh;	state Exp;
branches
	1.2.1.1;
next	1.1;

1.1
date	94.06.09.10.50.00;	author nickh;	state Exp;
branches;
next	;

1.2.1.1
date	95.07.05.10.29.50;	author hope;	state Exp;
branches;
next	;

1.12.1.1
date	96.09.13.11.22.52;	author hope;	state Exp;
branches;
next	;

1.12.2.1
date	96.10.07.16.13.01;	author hope;	state Exp;
branches;
next	;

1.12.3.1
date	96.10.17.11.32.16;	author hope;	state Exp;
branches;
next	;

1.13.1.1
date	96.11.14.12.58.13;	author hope;	state Exp;
branches
	1.13.1.1.1.1;
next	;

1.13.1.1.1.1
date	96.11.28.15.08.09;	author hope;	state Exp;
branches;
next	;

1.13.2.1
date	96.11.22.18.15.49;	author hope;	state Exp;
branches;
next	;

1.13.3.1
date	96.12.17.10.02.32;	author hope;	state Exp;
branches;
next	;

1.13.4.1
date	96.12.17.17.54.15;	author hope;	state Exp;
branches
	1.13.4.1.1.1;
next	;

1.13.4.1.1.1
date	97.02.24.11.45.18;	author hope;	state Exp;
branches;
next	;

1.13.5.1
date	96.12.18.09.48.51;	author hope;	state Exp;
branches;
next	;

1.13.6.1
date	97.05.12.10.41.14;	author hope;	state Exp;
branches
	1.13.6.1.1.1
	1.13.6.1.2.1
	1.13.6.1.3.1;
next	;

1.13.6.1.1.1
date	97.07.28.18.29.24;	author daveb;	state Exp;
branches
	1.13.6.1.1.1.1.1;
next	;

1.13.6.1.1.1.1.1
date	97.10.07.11.55.15;	author jkbrook;	state Exp;
branches;
next	;

1.13.6.1.2.1
date	97.09.08.17.22.25;	author daveb;	state Exp;
branches;
next	;

1.13.6.1.3.1
date	97.09.09.14.18.28;	author daveb;	state Exp;
branches;
next	;

1.13.7.1
date	97.09.10.19.38.00;	author brucem;	state Exp;
branches;
next	;

1.13.8.1
date	97.09.11.21.05.43;	author daveb;	state Exp;
branches;
next	;

1.13.9.1
date	97.10.31.13.48.46;	author nickb;	state Exp;
branches;
next	;

1.13.10.1
date	99.04.01.18.04.27;	author daveb;	state Exp;
branches;
next	;


desc
@new file
@


1.13
log
@Fix space lookup for pointers with top bit set.
@
text
@/*  ==== ARENA MANAGEMENT ====
 *
 *  Copyright (C) 1992 Harlequin Ltd
 *
 *  Implementation
 *  --------------
 *  The system call mmap() is used to map in areas of virtual memory at
 *  fairly arbitrary addresses throughout the arena.  The functions map()
 *  and unmap() deal with this.  In particular, map() always succeeds or
 *  causes an error.
 *
 *  Revision Log
 *  ------------
 *  $Log: src:OS:SunOS:arena.c,v $
 * Revision 1.12  1996/05/31  10:41:58  nickb
 * Correct mmap failure switch and add some testing code.
 *
 * Revision 1.11  1996/05/31  09:20:17  nickb
 * Remove PLOCK.
 *
 * Revision 1.10  1996/05/30  16:23:19  nickb
 * Add mapping-tester.
 *
 * Revision 1.9  1996/05/14  16:31:24  nickb
 * Improve out-of-memory behaviour.
 *
 * Revision 1.8  1996/01/29  15:07:48  stephenb
 * Add <unistd.h>
 *
 * Revision 1.7  1995/04/05  13:40:37  nickb
 * Add maximum memory use reporting.
 *
 * Revision 1.6  1995/03/28  14:37:02  io
 * add nonzero exit status for EOF case when no vm avail
 *
 * Revision 1.5  1995/03/01  13:42:09  nickb
 * Make space_gen array general.
 *
 * Revision 1.4  1995/02/28  12:59:56  nickb
 * Interface for making holes in static spaces.
 *
 * Revision 1.3  1994/10/13  12:51:11  nickb
 * Allow multiple block spaces, so blocks can occupy more of arena.
 *
 * Revision 1.2  1994/06/09  14:25:14  nickh
 * new file
 *
 * Revision 1.1  1994/06/09  10:50:00  nickh
 * new file
 *
 *  Revision 1.9  1994/01/28  17:47:14  nickh
 *  Moved extern function declarations to header files.
 *
 *  Revision 1.8  1993/12/14  17:41:08  nickh
 *  Added comment, a couple of minor fixes resulting from a code read-through.
 *
 *  Revision 1.7  1993/06/02  13:11:46  richard
 *  Added parentheses suggested by GCC 2.
 *
 *  Revision 1.6  1992/12/14  12:25:29  daveb
 *  Instead of suspending when we run out of virtual memory, we now prompt
 *  the user to continue or quit.
 *
 *  Revision 1.5  1992/10/19  11:43:36  richard
 *  Changed the grain rounding mechanism to lessen the overhead of small
 *  spaces.
 *
 *  Revision 1.4  1992/10/02  08:32:30  richard
 *  Added missing include of utils.h.
 *
 *  Revision 1.3  1992/08/27  16:20:08  richard
 *  Changed output of suspension message again.
 *
 *  Revision 1.2  1992/08/25  15:12:18  richard
 *  Improved the messages.
 *
 *  Revision 1.1  1992/08/04  11:35:46  richard
 *  Initial revision
 *
 */

#include "ansi.h"
#include "arena.h"
#include "mem.h"
#include "types.h"
#include "diagnostic.h"
#include "utils.h"
#include "syscalls.h"

#include <stddef.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <stdio.h>

#include <unistd.h>
#include <sys/mman.h>
#include <sys/types.h>
#include <sys/lock.h>
#include <fcntl.h>
#include <signal.h>

/* type and extent tables */

byte space_type[NR_SPACES];
size_t space_extent[NR_SPACES];
void *space_info[NR_SPACES];

/* The first block space has a statically-allocated map. Later block
   spaces have their maps in a reserved region within the first block
   space. The pointer 'block_maps' indicates the next available
   location for a map in this region */

byte first_block_space_map[BLOCKS_PER_SPACE];
byte *block_maps = NULL;

size_t arena_extent = 0;
#ifdef COLLECT_STATS
size_t max_arena_extent = 0;
#endif

static int zero_device;
static int page_size;

/* arena_state is UNINITIALIZED until the arena has been initialized.
 * See arena_init() and block_alloc() below.
 *
 * GCC 2.x calls __main() before main(). __main() can call malloc().
 * Our malloc(), on first call, calls block_alloc() to get some heap.
 * If the arena has been initialized, we simply allocate a block.
 * Otherwise we initialize the arena then. */

enum {
  UNINITIALIZED = 0,
  INITIALIZING,
  INITIALIZED};

static int arena_state = UNINITIALIZED;

/* grains. The purpose of grain_round is to round its argument (a
number of bytes) up to a convenient size, where "convenient" means "a
multiple of 2^n (where n<=20), which does not waste more than
GRAIN_OVERHEAD bytes per 0x100". */

#define MAX_GRAIN_SIZE		0x100000	/* 1Mb */
#define GRAIN_OVERHEAD		0x10		/* per 0x100 */
#define GRAINROUND(grain, size)	(((size)+(grain)-1) & ~((grain)-1))

static size_t grain_round(size_t size)
{
  int grain;
  /* we round at least to the nearest page */
  size_t rounded = GRAINROUND(page_size, size);
  /* maximum is the maximum acceptable size (any more wastes too much) */
  size_t maximum = (size * (0x100+GRAIN_OVERHEAD))/ 0x100;

  if(rounded > 0)
    for(grain = MAX_GRAIN_SIZE; grain >= page_size; grain >>= 1)
    {
      rounded = GRAINROUND(grain, size);
      
      if (rounded < maximum)
	break;
    }

  return(rounded);
}

static unsigned long map_attempt = 0;

static void map(void *start, size_t length)
{
  map_attempt ++;

  if (arena_state != INITIALIZED)
    error_without_alloc("Trying to map memory before arena initialized.\n");

  while(length > 0 &&
	mmap((caddr_t)start, length,
	     PROT_READ | PROT_WRITE | PROT_EXEC,
	     MAP_FIXED | MAP_PRIVATE,
	     zero_device, 0) == (caddr_t)-1)
    switch(errno) {

/* man mmap on SunOS does not reveal this, but exhausting swap space
 * always sets errno to ENOMEM. The man says this for ENOMEM:

     ENOMEM         MAP_FIXED was specified, and the range [addr,
                    addr  +  len)  exceeded  that allowed for the
                    address space of a process.

                    MAP_FIXED was not  specified  and  there  was
                    insufficient  room  in  the  address space to
                    effect the mapping.

 */

      case ENOMEM:
      if ((out_of_memory_dialog == NULL) ||
	  ((*out_of_memory_dialog)(map_attempt, arena_extent, length) == 0))
	error_without_alloc("Out of virtual memory.\n");
      break;

      default:
      error("map from 0x%08x length 0x%08x failed with code %d",
	    start, length, errno);
    }

  arena_extent += length;
#ifdef COLLECT_STATS
  if (arena_extent > max_arena_extent)
    max_arena_extent = arena_extent;
#endif
}

static void unmap(void *start, size_t length)
{
  if(length > 0 && munmap((caddr_t)start, length) == -1)
    error("munmap() has returned an unexpected error code %d", errno);

  arena_extent -= length;
}

#ifdef DEBUG

void test_mapping(void)
{
  int i,j;
  byte *block_map;
  for (i=0 ; i<NR_SPACES; ++i) {
    switch (space_type[i]) {
    case TYPE_RESERVED:
      /* these are reserved */
      message("space at 0x%08x reserved",SPACE_BASE(i));
      break;
    case TYPE_BLOCKS:
      /* test each block */
      block_map = SPACE_MAP(i);
      message("testing block space at 0x%08x",SPACE_BASE(i));
      for (j=0; j < BLOCKS_PER_SPACE; j++) {
	switch (block_map[j]) {
	case TYPE_FREE:
	  message("  testing block at 0x%08x",BLOCK_BASE(i,j));
	  map (BLOCK_BASE(i,j), BLOCK_SIZE);
	  unmap (BLOCK_BASE(i,j), BLOCK_SIZE);
	  break;
	default:
	  message("  block at 0x%08x has type %d",
		  BLOCK_BASE(i,j),block_map[j]);
	}
      }
      break;
    case TYPE_FREE:
      /* test the whole space */
      message("testing space at 0x%08x",SPACE_BASE(i));
      map(SPACE_BASE(i), SPACE_SIZE);
      unmap(SPACE_BASE(i), SPACE_SIZE);
      break;
    default:
      message("space at 0x%08x used with type %d",
	      SPACE_BASE(i), space_type[i]);
    }
  }
}

#endif

void arena_init(void)
{
  byte *data_end;
  int first_block_space, i;
  
  switch (arena_state) {
    
  case UNINITIALIZED: {
    arena_state = INITIALIZING;
    data_end = (byte *)sbrk(0);
    /* leave a space for the OS to meddle with */
    first_block_space = SPACE(data_end)+2;
    page_size = getpagesize();
    
    zero_device = open("/dev/zero", O_RDONLY);
    if(zero_device < 0)
      error_without_alloc("Arena initializing unable to open /dev/zero.");
    
    for(i=0; i<first_block_space; ++i) {
      space_type[i]   = TYPE_RESERVED;
      space_extent[i] = (size_t)-1;
      SPACE_MAP(i)    = NULL;
    }
    
    for (i=0; i < BLOCKS_PER_SPACE; ++i) {
      first_block_space_map[i] = TYPE_FREE;
    }
    
    SPACE_MAP(first_block_space) = first_block_space_map;
    space_type[first_block_space] = TYPE_BLOCKS;
    space_extent[first_block_space] = (size_t)-2;
    
    for(i=first_block_space+1; i<SPACES_IN_ARENA; ++i) {
      space_type[i]   = TYPE_FREE;
      space_extent[i] = 0;
      SPACE_MAP(i) = NULL;
    }

    for(i=SPACES_IN_ARENA; i<NR_SPACES; ++i) {
      space_type[i]   = TYPE_RESERVED;
      space_extent[i] = (size_t)-1;
      SPACE_MAP(i) = NULL;
    }
    
    arena_extent = 0;
#ifdef COLLECT_STATS
    max_arena_extent = 0;
#endif
    arena_state = INITIALIZED;

    /* The arena is now initialized, so we can call block_alloc */
    block_maps = block_alloc(TYPE_RESERVED,
			     (unsigned long)SPACES_IN_ARENA*BLOCKS_PER_SPACE);
    break;
  }
  case INITIALIZING:
    error_without_alloc("Allocation during arena startup.");
  case INITIALIZED:
    /* Could get to here if we alloc before arena_init gets called. */
    break;
  default:
    error_without_alloc("Arena state inconsistent.");
  }
}

void space_free(byte *space)
{
  unsigned int space_no = SPACE(space);
  unmap(space, space_extent[space_no]);
  space_type[space_no] = TYPE_FREE;
  space_extent[space_no] = 0;
}

void space_resize(byte *space, size_t extent)
{
  unsigned int space_no = SPACE(space);
  size_t current = space_extent[space_no];

  extent = grain_round(extent);

  if(extent > current)
    map(space+current, extent-current);
  else if(current > extent)
    unmap(space+extent, current-extent);

  space_extent[space_no] = extent;
}

byte *space_alloc(byte type, size_t extent)
{
  unsigned int i;

  if (extent > SPACE_SIZE) {
    error("Allocating too large a space");
  }

  for(i=0; i<SPACES_IN_ARENA; ++i)
    if(space_type[i] == TYPE_FREE) {
      space_type[i] = type;
      space_extent[i] = 0;
      space_resize(SPACE_BASE(i), extent);
      return SPACE_BASE(i);
    }

  error("Run out of arena spaces.");
}

/* Allow general mapping holes inside spaces; note that both of these
 * functions can be no-ops to start with */

void space_allow_hole(byte *hole, size_t extent)
{
}

void space_remove_hole(byte *hole, size_t extent)
{
}

byte *block_alloc(byte type, size_t size)
{
  int s, b, found = 0, blocks = BLOCKS(size);
  byte *block_map;
  byte *space;

  if (arena_state != INITIALIZED)
    arena_init();

  if (blocks > BLOCKS_PER_SPACE)
    error("Trying to allocate too many contiguous blocks.");

  for(s=0; s<SPACES_IN_ARENA; ++s) {
    if (space_type[s] == TYPE_BLOCKS) {
      block_map = SPACE_MAP(s);
      for (b=0; b<BLOCKS_PER_SPACE; b++) {
	if (block_map[b] == TYPE_FREE) {
	  found ++;
	  if(found >= blocks) {
	    int start = b+1-found, k;

	    for(k=start; k<=b; ++k)
	      block_map[k] = type;
	    map(BLOCK_BASE(s,start), GRAINROUND(page_size, size));
	    return(BLOCK_BASE(s,start));
	  }
	}
	else
	  found = 0;
      }
      found = 0;
    }
  }

  /* None of the existing block spaces have room; let's make a new one */

  space = space_alloc(TYPE_BLOCKS,0);    /* allocate the new space */
  s = SPACE(space);
  block_map = SPACE_MAP(s) = block_maps; /* allocate a map ... */
  block_maps += BLOCKS_PER_SPACE;       

  for(b=0; b< blocks; ++b)
    block_map[b] = type;
  for (b=blocks; b < BLOCKS_PER_SPACE; b++)
    block_map[b] = TYPE_FREE;		 /* ... and initialize it */

  map(space, GRAINROUND(page_size, size));
  return(space);
}

void block_free(byte *block, size_t size)
{
  unsigned int space_nr = SPACE(block);
  unsigned int block_nr = BLOCK_NR(block);
  size_t blocks = BLOCKS(size);
  byte *block_map = SPACE_MAP(space_nr);
  int i;

  for(i=0; i<blocks; ++i)
    block_map[block_nr+i] = TYPE_FREE;

  unmap(block, GRAINROUND(page_size, size));
}
@


1.13.10.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a14 3
 * Revision 1.13  1996/10/29  17:26:42  nickb
 * Fix space lookup for pointers with top bit set.
 *
@


1.13.9.1
log
@branched from trunk for label MLWorks_MM_adapt
@
text
@a14 3
 * Revision 1.13  1996/10/29  17:26:42  nickb
 * Fix space lookup for pointers with top bit set.
 *
@


1.13.8.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a14 3
 * Revision 1.13  1996/10/29  17:26:42  nickb
 * Fix space lookup for pointers with top bit set.
 *
@


1.13.7.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a14 3
 * Revision 1.13  1996/10/29  17:26:42  nickb
 * Fix space lookup for pointers with top bit set.
 *
@


1.13.6.1
log
@branched from 1.13
@
text
@a14 3
 * Revision 1.13  1996/10/29  17:26:42  nickb
 * Fix space lookup for pointers with top bit set.
 *
@


1.13.6.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a14 3
 * Revision 1.13.6.1  1997/05/12  10:41:14  hope
 * branched from 1.13
 *
@


1.13.6.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a14 3
 * Revision 1.13.6.1  1997/05/12  10:41:14  hope
 * branched from 1.13
 *
@


1.13.6.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a14 3
 * Revision 1.13.6.1  1997/05/12  10:41:14  hope
 * branched from 1.13
 *
@


1.13.6.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a14 3
 * Revision 1.13.6.1.1.1  1997/07/28  18:29:24  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.13.5.1
log
@branched from 1.13
@
text
@a14 3
 * Revision 1.13  1996/10/29  17:26:42  nickb
 * Fix space lookup for pointers with top bit set.
 *
@


1.13.4.1
log
@branched from 1.13
@
text
@a14 3
 * Revision 1.13  1996/10/29  17:26:42  nickb
 * Fix space lookup for pointers with top bit set.
 *
@


1.13.4.1.1.1
log
@branched from 1.13.4.1
@
text
@a14 3
 * Revision 1.13.4.1  1996/12/17  17:54:15  hope
 * branched from 1.13
 *
@


1.13.3.1
log
@branched from 1.13
@
text
@a14 3
 * Revision 1.13  1996/10/29  17:26:42  nickb
 * Fix space lookup for pointers with top bit set.
 *
@


1.13.2.1
log
@branched from 1.13
@
text
@a14 3
 * Revision 1.13  1996/10/29  17:26:42  nickb
 * Fix space lookup for pointers with top bit set.
 *
@


1.13.1.1
log
@branched from 1.13
@
text
@a14 3
 * Revision 1.13  1996/10/29  17:26:42  nickb
 * Fix space lookup for pointers with top bit set.
 *
@


1.13.1.1.1.1
log
@branched from 1.13.1.1
@
text
@a14 3
 * Revision 1.13.1.1  1996/11/14  12:58:13  hope
 * branched from 1.13
 *
@


1.12
log
@Correct mmap failure switch and add some testing code.
@
text
@d15 3
d169 1
a169 1
static unsigned long int map_attempt = 0;
d278 2
a279 1
    first_block_space = SPACE(data_end)+1;
d292 4
d298 1
a298 1
    space_extent[i] = (size_t)-2;
d300 1
a300 1
    for(i=first_block_space+1; i<NR_SPACES; ++i) {
d305 5
a309 3
    
    for (i=0; i < BLOCKS_PER_SPACE; ++i) {
      first_block_space_map[i] = TYPE_FREE;
d320 1
a320 1
			     (unsigned long)NR_SPACES*BLOCKS_PER_SPACE);
d364 2
a365 3
  for(i=0; i<NR_SPACES; ++i)
    if(space_type[i] == TYPE_FREE)
    {
d398 1
a398 1
  for(s=0; s<NR_SPACES; ++s) {
a448 1

@


1.12.3.1
log
@branched from 1.12
@
text
@a14 3
 * Revision 1.12  1996/05/31  10:41:58  nickb
 * Correct mmap failure switch and add some testing code.
 *
@


1.12.2.1
log
@branched from 1.12
@
text
@a14 3
 * Revision 1.12  1996/05/31  10:41:58  nickb
 * Correct mmap failure switch and add some testing code.
 *
@


1.12.1.1
log
@branched from 1.12
@
text
@a14 3
 * Revision 1.12  1996/05/31  10:41:58  nickb
 * Correct mmap failure switch and add some testing code.
 *
@


1.11
log
@Remove PLOCK.
@
text
@d15 3
d181 14
@


1.10
log
@Add mapping-tester.
@
text
@d15 3
d177 1
a177 25
    switch(errno)
    {
#ifdef PLOCK
      case EAGAIN:
      if(plock(UNLOCK) == -1)
	switch(errno)
	{
	  case EINVAL:
	  error
	    ("mmap() reported that real memory had been exhausted and yet "
	     "plock() said that the process wasn't locked in real memory.");

	  case EPERM:
	  error
	    ("Real memory is exhausted and unable to unlock the process.");

	  default:
	  error
	    ("plock(UNLOCK) returned an unexpected error code %d.", errno);
	}
      message("Warning: Real memory has been exhausted."
	      "Process unlocked from real memory.");
      break;
#endif

@


1.9
log
@Improve out-of-memory behaviour.
@
text
@d15 3
d206 2
a207 1
      error("mmap() has returned an unexpected error code %d", errno);
d224 44
@


1.8
log
@Add <unistd.h>
@
text
@d15 3
d72 1
a112 2
#define BACKOFF_LIMIT	5

d157 2
d161 1
a161 1
  unsigned int backoff = 1;
d197 3
a199 28

      if(backoff >= BACKOFF_LIMIT)
      {
	int pid = getpid();

	message("Unable to obtain virtual memory (%uMb used, %uKb requested);\n"
		"Enter q to quit mlworks, c to continue.",
		arena_extent >> 20, length >> 10, pid);
	while (1) {
	  char c;
	  c = getchar();
	  if (c == EOF)
	    exit(1);
	  else if (c == 'q')
	    exit(0);
	  else if (c == 'c') {
	    backoff = 1;
	    break;
	  }
	}
      } else {
        message(
	  "Warning: Unable to obtain virtual memory.  Waiting %u seconds.",
	  backoff
	);
        sleep(backoff);
        backoff <<= 1;
      }
@


1.7
log
@Add maximum memory use reporting.
@
text
@d15 3
d80 1
@


1.6
log
@add nonzero exit status for EOF case when no vm avail
@
text
@d15 3
d98 3
d224 4
d276 3
@


1.5
log
@Make space_gen array general.
@
text
@d15 3
d193 5
a197 2
	  if ((c = getchar()) == -1 || c == 'q')
	    exit (0);
@


1.4
log
@Interface for making holes in static spaces.
@
text
@d15 3
d81 1
a81 1
byte *space_map[NR_SPACES];
d242 1
a242 1
      space_map[i]    = NULL;
d245 1
a245 1
    space_map[first_block_space] = first_block_space_map;
d252 1
a252 1
      space_map[i] = NULL;
d345 1
a345 1
      block_map = space_map[s];
d369 1
a369 1
  block_map = space_map[s] = block_maps; /* allocate a map ... */
d386 1
a386 1
  byte *block_map = space_map[space_nr];
@


1.3
log
@Allow multiple block spaces, so blocks can occupy more of arena.
@
text
@d15 3
d315 11
@


1.2
log
@new file
@
text
@d15 3
a72 2
byte *block_base;
byte block_type[NR_BLOCKS];
d75 10
d98 1
a98 2
 * Otherwise we initialize the arena then.
 */
d119 1
d121 2
d129 1
a129 1
      if(((rounded-size) * 0x100) / size <= GRAIN_OVERHEAD)
d218 2
a219 2
  byte *text_end;
  int free_space, i;
d225 2
a226 2
    text_end = (byte *)sbrk(0);
    free_space = SPACE(text_end)+1;
d233 1
a233 1
    for(i=0; i<free_space; ++i) {
d236 1
d239 3
a241 6
    block_base = SPACE_BASE(free_space);
    
    for(i=free_space; i<free_space+BLOCK_SPACES; ++i) {
      space_type[i]   = TYPE_BLOCKS;
      space_extent[i] = (size_t)-2;
    }
d243 1
a243 1
    for(i=free_space+BLOCK_SPACES; i<NR_SPACES; ++i) {
d246 1
d249 2
a250 2
    for (i=0; i < NR_BLOCKS; ++i) {
      block_type[i] = TYPE_FREE;
d255 4
d271 1
a271 31
int block_alloc(byte type, size_t size)
{
  int i, found = 0, blocks = BLOCKS(size);

  if (arena_state != INITIALIZED)
    arena_init();

  for(i=0; i<NR_BLOCKS; ++i)
  {
    if(block_type[i] == TYPE_FREE)
    {
      if(++found >= blocks)
      {
	int start = i+1-found, j;

	for(j=start; j<=i; ++j)
	  block_type[j] = type;

	map(BLOCK_BASE(start), GRAINROUND(page_size, size));

	return(start);
      }
    }
    else
      found = 0;
  }

  error("Unable to find %u contiguous free blocks in the block space.", blocks);
}

void block_free(int block, size_t size)
d273 4
a276 7
  size_t blocks = BLOCKS(size);
  int i;

  for(i=0; i<blocks; ++i)
    block_type[block+i] = TYPE_FREE;

  unmap(BLOCK_BASE(block), GRAINROUND(page_size, size));
d279 1
a279 1
void space_resize(unsigned int space, size_t extent)
d281 2
a282 1
  size_t current = space_extent[space];
d287 1
a287 1
    map(SPACE_BASE(space)+current, extent-current);
d289 1
a289 1
    unmap(SPACE_BASE(space)+extent, current-extent);
d291 1
a291 1
  space_extent[space] = extent;
d294 1
a294 1
int space_alloc(byte type, size_t extent)
d307 2
a308 2
      space_resize(i, extent);
      return(i);
d314 51
a364 1
void space_free(unsigned int space)
d366 10
a375 3
  unmap(SPACE_BASE(space), space_extent[space]);
  space_type[space] = TYPE_FREE;
  space_extent[space] = 0;
d377 1
@


1.2.1.1
log
@branched from 1.2
@
text
@a14 3
 * Revision 1.2  1994/06/09  14:25:14  nickh
 * new file
 *
@


1.1
log
@new file
@
text
@d14 4
a17 1
 *  $Log: arena.c,v $
@
