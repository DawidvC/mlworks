head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	96.02.14.12.42.17;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	95.10.17.13.43.37;	author jont;	state Exp;
branches;
next	;


desc
@new unit
@


1.2
log
@Use the common syscalls for Win32
@
text
@/*  ==== UNIX SYSCALL DECLARATIONS HEADER ====
 *
 *  Copyright (C) 1994 Harlequin Ltd
 *
 *  Description
 *  -----------
 *  This header declares Unix system calls which are not declared in
 *  system header files. 
 *
 *  $Id: src:OS:Win95:syscalls.h,v 1.1 1995/10/17 13:43:37 jont Exp $
 */

#ifndef syscall_h
#define syscall_h

#include "win32_syscalls.h"
#endif /* syscall_h */
@


1.1
log
@new unit
@
text
@d10 1
a10 1
 *  $Id: src:OS:NT:syscalls.h,v 1.2 1995/08/02 16:13:33 jont Exp $
d16 1
a16 95
#if 0
/* Hardly anything gets defined properly in SunOS header files */

#include <stdio.h>
#include <sys/types.h>
#include <signal.h>
#include <sys/stat.h>
#include <math.h>
#endif

typedef void *LPVOID;
typedef unsigned long DWORD;
#define PAGE_NOACCESS          0x01
#define PAGE_READONLY          0x02
#define PAGE_READWRITE         0x04
#define PAGE_WRITECOPY         0x08
#define PAGE_EXECUTE           0x10
#define PAGE_EXECUTE_READ      0x20
#define PAGE_EXECUTE_READWRITE 0x40
#define PAGE_EXECUTE_WRITECOPY 0x80
#define PAGE_GUARD            0x100
#define PAGE_NOCACHE          0x200
#define MEM_COMMIT           0x1000
#define MEM_RESERVE          0x2000
#define MEM_DECOMMIT         0x4000
#define MEM_RELEASE          0x8000
#define MEM_FREE            0x10000
#define MEM_PRIVATE         0x20000
#define MEM_MAPPED          0x40000
#define MEM_TOP_DOWN       0x100000

extern void * VirtualAlloc(LPVOID start, DWORD length, DWORD alloc_type, DWORD prot);
extern int VirtualFree(LPVOID start, DWORD length, DWORD free_type);
typedef struct _SYSTEM_INFO {
    DWORD dwOemId;
    DWORD dwPageSize;
    LPVOID lpMinimumApplicationAddress;
    LPVOID lpMaximumApplicationAddress;
    DWORD dwActiveProcessorMask;
    DWORD dwNumberOfProcessors;
    DWORD dwProcessorType;
    DWORD dwAllocationGranularity;
    DWORD dwReserved;
} SYSTEM_INFO, *LPSYSTEM_INFO;
extern DWORD GetLastError(void);

typedef struct  _FILETIME
{
  DWORD dwLowDateTime;
  DWORD dwHighDateTime;
} FILETIME;

typedef void *HANDLE;

typedef unsigned short WORD;
typedef char CHAR;

typedef struct  _SYSTEMTIME
{
  WORD wYear;
  WORD wMonth;
  WORD wDayOfWeek;
  WORD wDay;
  WORD wHour;
  WORD wMinute;
  WORD wSecond;
  WORD wMilliseconds;
} SYSTEMTIME;

#define MAX_PATH 260

typedef struct _WIN32_FIND_DATAA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    CHAR   cFileName[ MAX_PATH ];
    CHAR   cAlternateFileName[ 14 ];
} WIN32_FIND_DATAA, *PWIN32_FIND_DATAA, *LPWIN32_FIND_DATAA, WIN32_FIND_DATA;

#define INVALID_HANDLE_VALUE (HANDLE)-1

#define FALSE 0
#define TRUE 1

extern void winmain_init(void);

#define GetFullPathName GetFullPathNameA
#define GetCurrentDirectory GetCurrentDirectoryA
#define FindFirstFile FindFirstFileA

@
