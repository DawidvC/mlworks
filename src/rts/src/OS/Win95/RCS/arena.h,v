head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	95.10.17.13.39.51;	author jont;	state Exp;
branches;
next	;


desc
@new unit
@


1.1
log
@new unit
@
text
@/*  ==== ARENA MANAGEMENT ====
 *
 *  Copyright (C) 1992 Harlequin Ltd
 *
 *  Description
 *  -----------
 *  This library manages the address space of the runtime system process,
 *  otherwise known as the `arena'.
 *
 *  The arena is the area of address space between address arena_base and
 *  2^ADDRESS_WIDTH (typically 1Gb).  It is divided into a number of large
 *  `spaces' of size 2^SPACE_WIDTH (typically 16Mb).  Virtual memory is
 *  mapped from the beginning of each space up to its `extent'.
 *
 *  Some spaces are used for a different type of allocation.  These
 *  spaces are divided into BLOCKS of size 2^BLOCK_WIDTH (typically
 *  64Kb).  Contiguous areas of memory in the block spaces are
 *  allocated and freed in a manner similar to malloc().  Virtual
 *  memory is only mapped for those block which are currently
 *  allocated.
 *
 *  Each block or space is allocated a `type'.  The client of this code is
 *  free to use types from 1 to 127.  Other types are reserved.  TYPE(addr)
 *  returns the type of the block or space which contains the address addr.
 *  SPACE_TYPE(addr) is a faster version which returns the type of a space
 *  or TYPE_BLOCKS for block spaces.
 *
 *  Revision Log
 *  ------------
 *  $Log: src:OS:NT:arena.h,v $
 * Revision 1.3  1995/04/05  14:00:38  nickb
 * Add maximum memory use reporting.
 *
 * Revision 1.2  1995/03/01  13:39:09  nickb
 * Add interface for holes and make space_gen array general.
 *
 * Revision 1.1  1994/12/12  14:23:08  jont
 * new file
 *
 * Revision 1.2  1994/10/13  13:29:52  nickb
 * Allow multiple block spaces, so blocks can occupy more of arena.
 *
 * Revision 1.1  1994/10/04  16:31:54  jont
 * new file
 *
 * Revision 1.2  1994/06/09  14:25:33  nickh
 * new file
 *
 * Revision 1.1  1994/06/09  10:50:17  nickh
 * new file
 */

#ifndef arena_h
#define arena_h

#include "types.h"
#include <stddef.h>
#include "arenadefs.h"

#define ADDRESS_TOP	((1ul << ADDRESS_WIDTH)-1)
#define SPACE(addr)	(((word)(addr)) >> SPACE_WIDTH)
#define SPACE_BASE(s)	((byte *)((s) << SPACE_WIDTH))
#define SPACE_OFFSET(a) ((byte*)(a) - SPACE_BASE(SPACE(a)))
#define BLOCK_BASE(s,b) (SPACE_BASE(s) + ((b) << BLOCK_WIDTH))
#define BLOCK_NR(addr)  (SPACE_OFFSET(addr) >> BLOCK_WIDTH)
#define BLOCKS(size)	(((size) + BLOCK_SIZE-1) >> BLOCK_WIDTH)
#define BLOCKROUND(size)(BLOCKS(size) << BLOCK_WIDTH)

extern byte space_type[NR_SPACES];
extern size_t space_extent[NR_SPACES];
extern void *space_info[NR_SPACES];

#define SPACE_MAP(space)	((char*)space_info[space])

#define TYPE(addr) \
  ((word)addr > ADDRESS_TOP ? TYPE_RESERVED :	\
     space_type[SPACE(addr)] != TYPE_BLOCKS ?	\
       space_type[SPACE(addr)] : 		\
       (SPACE_MAP(SPACE(addr))[BLOCK_NR(addr)]))

#define SPACE_TYPE(addr) \
  ((word)addr > ADDRESS_TOP ? TYPE_RESERVED : space_type[SPACE(addr)])

#define TYPE_RESERVED	((byte)-2)
#define TYPE_BLOCKS	((byte)-1)
#define TYPE_FREE	0

extern size_t arena_extent;
#ifdef COLLECT_STATS
/* we keep track of the largest heap usage */
extern size_t max_arena_extent;
#endif

extern void arena_init(void);
extern byte *block_alloc(byte type, size_t size);
extern void block_free(byte *block, size_t size);
extern byte *space_alloc(byte type, size_t extent);
extern void space_free(byte *space);
extern void space_resize(byte *space, size_t extent);
extern void space_allow_hole(byte *hole, size_t extent);
extern void space_remove_hole(byte *hole, size_t extent);

#endif
@
