head	1.13;
access;
symbols
	MLW_daveb_inline_1_4_99:1.13.1
	MLWorks_21c0_1999_03_25:1.13
	MLWorks_20c1_1998_08_20:1.12
	MLWorks_20c0_1998_08_04:1.12
	MLWorks_20b2c2_1998_06_19:1.12
	MLWorks_20b2_Windows_1998_06_12:1.12
	MLWorks_20b1c1_1998_05_07:1.12
	MLWorks_20b0_1998_04_07:1.12
	MLWorks_20b0_1998_03_20:1.12
	MLWorks_20m2_1998_02_16:1.12
	MLWorks_MM_adapt:1.12.4
	MLWorks_20m1_1997_10_23:1.12
	MLWorks_11r1:1.12.1.1.1.1.1
	MLWorks_workspace_97:1.12.3
	MLWorks_dt_wizard:1.12.2
	MLWorks_11c0_1997_09_09:1.12.1.1.1.1
	MLWorks_10r3:1.12.1.1.3
	MLWorks_10r2_551:1.12.1.1.2
	MLWorks_11:1.12.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.12.1.1
	MLWorks_20m0_1997_06_20:1.12
	MLWorks_1_0_r2c2_1997_06_14:1.12.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.12.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.12.1
	MLWorks_BugFix_1997_04_24:1.12
	MLWorks_1_0_r2_Win32_1997_04_11:1.12
	MLWorks_1_0_r2_Unix_1997_04_04:1.12
	MM_ML_release_korma_1997_04_01:1.12
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.10.5.1.1
	MLWorks_gui_1996_12_18:1.10.6
	MLWorks_1_0_Win32_1996_12_17:1.10.5
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.10.2.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.10.2.1
	JFHrts:1.10.4
	MLWorks_1_0_Irix_1996_11_28:1.10.2.1.1
	MLWorks_1_0_Win32_1996_11_22:1.10.3
	MLWorks_1_0_Unix_1996_11_14:1.10.2
	MLWorks_Open_Beta2_1996_10_11:1.10.1
	MLWorks_License_dev:1.9.2
	MLWorks_1_open_beta_1996_09_13:1.9.1
	MLWorks_Open_Beta_1996_08_22:1.8
	MLWorks_Beta_1996_07_02:1.8
	MLWorks_Beta_1996_06_07:1.8
	MLWorks_Beta_1996_06_06:1.8
	MLWorks_Beta_1996_06_05:1.8
	MLWorks_Beta_1996_06_03:1.8
	MLWorks_Beta_1996_05_31:1.8
	MLWorks_Beta_1996_05_30:1.8
	hope_poo:1.1.1
	ML_beta_release_12/08/94:1.1.1.1
	ML_beta_release_03/08/94:1.1;
locks; strict;
comment	@ * @;


1.13
date	98.09.17.14.24.16;	author jont;	state Exp;
branches
	1.13.1.1;
next	1.12;

1.12
date	97.03.24.15.03.36;	author nickb;	state Exp;
branches
	1.12.1.1
	1.12.2.1
	1.12.3.1
	1.12.4.1;
next	1.11;

1.11
date	97.03.19.16.56.26;	author daveb;	state Exp;
branches;
next	1.10;

1.10
date	96.10.14.14.13.08;	author nickb;	state Exp;
branches
	1.10.1.1
	1.10.2.1
	1.10.3.1
	1.10.4.1
	1.10.5.1
	1.10.6.1;
next	1.9;

1.9
date	96.08.27.15.35.19;	author nickb;	state Exp;
branches
	1.9.1.1
	1.9.2.1;
next	1.8;

1.8
date	96.05.13.10.18.03;	author stephenb;	state Exp;
branches;
next	1.7;

1.7
date	96.05.10.09.09.09;	author matthew;	state Exp;
branches;
next	1.6;

1.6
date	96.01.17.15.20.37;	author stephenb;	state Exp;
branches;
next	1.5;

1.5
date	95.04.24.14.08.31;	author nickb;	state Exp;
branches;
next	1.4;

1.4
date	95.02.24.09.41.36;	author nickb;	state Exp;
branches;
next	1.3;

1.3
date	95.02.23.14.36.07;	author nickb;	state Exp;
branches;
next	1.2;

1.2
date	94.12.12.11.05.00;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	94.07.08.10.44.13;	author nickh;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.07.05.10.30.05;	author hope;	state Exp;
branches;
next	;

1.9.1.1
date	96.09.13.11.24.06;	author hope;	state Exp;
branches;
next	;

1.9.2.1
date	96.10.07.16.14.23;	author hope;	state Exp;
branches;
next	;

1.10.1.1
date	96.10.17.11.33.49;	author hope;	state Exp;
branches;
next	;

1.10.2.1
date	96.11.14.12.59.29;	author hope;	state Exp;
branches
	1.10.2.1.1.1;
next	;

1.10.2.1.1.1
date	96.11.28.15.09.29;	author hope;	state Exp;
branches;
next	;

1.10.3.1
date	96.11.22.18.17.12;	author hope;	state Exp;
branches;
next	;

1.10.4.1
date	96.12.17.10.03.57;	author hope;	state Exp;
branches;
next	;

1.10.5.1
date	96.12.17.17.55.33;	author hope;	state Exp;
branches
	1.10.5.1.1.1;
next	;

1.10.5.1.1.1
date	97.02.24.11.46.59;	author hope;	state Exp;
branches;
next	;

1.10.6.1
date	96.12.18.09.50.09;	author hope;	state Exp;
branches;
next	;

1.12.1.1
date	97.05.12.10.43.51;	author hope;	state Exp;
branches
	1.12.1.1.1.1
	1.12.1.1.2.1
	1.12.1.1.3.1;
next	;

1.12.1.1.1.1
date	97.07.28.18.28.51;	author daveb;	state Exp;
branches
	1.12.1.1.1.1.1.1;
next	;

1.12.1.1.1.1.1.1
date	97.10.07.11.54.40;	author jkbrook;	state Exp;
branches;
next	;

1.12.1.1.2.1
date	97.09.08.17.21.48;	author daveb;	state Exp;
branches;
next	;

1.12.1.1.3.1
date	97.09.09.14.17.53;	author daveb;	state Exp;
branches;
next	;

1.12.2.1
date	97.09.10.19.37.07;	author brucem;	state Exp;
branches;
next	;

1.12.3.1
date	97.09.11.21.05.10;	author daveb;	state Exp;
branches;
next	;

1.12.4.1
date	97.10.31.13.48.12;	author nickb;	state Exp;
branches;
next	;

1.13.1.1
date	99.04.01.18.03.56;	author daveb;	state Exp;
branches;
next	;


desc
@new file
@


1.13
log
@[Bug #30108]
Move dummy definitions os asm_trampoline from unix.c into os.c
@
text
@/*  ==== OPERATING SYSTEM INTERFACE ====
 *
 *  Copyright (C) 1994 Harlequin Ltd
 *
 *  Revision Log
 *  ------------
 *  $Log: src:OS:Solaris:os.c,v $
 * Revision 1.12  1997/03/24  15:03:36  nickb
 * Make malloc() and realloc() edge cases match the OS libraries.
 *
 * Revision 1.11  1997/03/19  16:56:26  daveb
 * [Bug #1941]
 * Made the error message understandable for when the OS doesn't have the
 * necessary patch to run MLWorks on the UltraSPARC.
 *
 * Revision 1.10  1996/10/14  14:13:08  nickb
 * Add check_windows().
 *
 * Revision 1.9  1996/08/27  15:35:19  nickb
 * Add os_on_exit.
 *
 * Revision 1.8  1996/05/13  10:18:03  stephenb
 * Flesh out the rounding mode routines.
 *
 * Revision 1.7  1996/05/10  09:09:09  matthew
 * Adding get/set rounding mode functions
 *
 * Revision 1.6  1996/01/17  15:20:37  stephenb
 * OS reorganisation: remove any reference to NT.
 *
 * Revision 1.5  1995/04/24  14:08:31  nickb
 * Add os_update_windows().
 *
 * Revision 1.4  1995/02/24  09:41:36  nickb
 * Add include for pioc.h
 *
 * Revision 1.3  1995/02/23  14:36:07  nickb
 * Add pioc_init().
 *
 * Revision 1.2  1994/12/12  11:05:00  jont
 * Add call to nt_init
 *
 * Revision 1.1  1994/07/08  10:44:13  nickh
 * new file
 *
 *
 */

#include <assert.h>
#include <ieeefp.h>		/* fp{get,set}round */
#include <stdlib.h>
#include "os.h"
#include "unix.h"
#include "x.h"
#include "pioc.h"
#include "check_windows.h"
#include "types.h"
#include "diagnostic.h"
#include "utils.h"

extern void os_init(void)
{
  word x = check_windows();
  if (x)
    error ("This computer requires a Sun kernel "
	   "patch before this application will run.\n"
           "Please contact the application's vendor "
	   "for details of the patch required.");
  pioc_init();
  unix_init();
  x_init();
}

extern void os_on_exit(void (*f)(void))
{
  atexit(f);
}


/* Don't know whether a call to fsync is necessary under Solaris; it
is on Solbourne machines. */

void os_filesync(FILE *f)
{
/* Do nothing; on SunOS we do fsync(fileno(f)) here. */
}



/* this gets called 'every so often'. We use it to handle expose
 * events so windows which are brought to the top don't sit there
 * un-refreshed. */

void os_update_windows(void)
{
  x_handle_expose_events();
}




/* Support for IEEEReal.{set,get}RoundingMode 
 *
 * os_{get,set}_rounding_mode are expected to return/take modes with the
 * following meanings :-
 *
 *  0 : to nearest
 *  1 : to zero
 *  2 : to positive infinity
 *  3 : to negative infinity
 *
 * The assertions in the following are there to make sure that the system
 * values are the same as the above.  If you ever get an assertion error
 * when running a test for these routines, then alter both of the following
 * to use some sort of mapping between the FP_R{N,Z,P,M} codes and the
 * required values.
 */


int os_get_rounding_mode(void)
{
  assert(FP_RN == 0);
  assert(FP_RZ == 1);
  assert(FP_RP == 2);
  assert(FP_RM == 3);
  return fpgetround();
}



void os_set_rounding_mode(int mode)
{
  assert(mode >= 0 && mode <= 3);
  assert(FP_RN == 0);
  assert(FP_RZ == 1);
  assert(FP_RP == 2);
  assert(FP_RM == 3);
  (void)fpsetround(mode);
}

/* The behaviour of malloc(0), realloc(NULL,0) and realloc(p,0)
 * depends on the OS, because we have to maintain compatibility with
 * the OS libraries See <URI:spring://MM_InfoSys/analysis/realloc> for
 * more information. */

extern void *os_allocator(int code, void *arg)
{
  switch (code) {
  case OS_ALLOCATOR_MALLOC_ZERO:
    DIAGNOSTIC(4,"malloc(0)",0,0);
    return malloc(1);
    break;
  case OS_ALLOCATOR_REALLOC_NULL_ZERO:
    DIAGNOSTIC(4,"realloc(NULL,0)",0,0);
    return malloc(1);
    break;
  case OS_ALLOCATOR_REALLOC_P_ZERO:
    DIAGNOSTIC(4,"realloc(0x%08x,0)",arg,0);
    free(arg);
    return malloc(1);
    break;
  default:
    error("Unknown code in os_allocator");
  }
  return NULL;
}

extern mlval asm_trampoline(mlval x);

extern mlval asm_trampoline(mlval x)
{
  error("Unix version of asm_trampoline not yet implemented and shouldn't be called");
}
@


1.13.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a7 4
 * Revision 1.13  1998/09/17  14:24:16  jont
 * [Bug #30108]
 * Move dummy definitions os asm_trampoline from unix.c into os.c
 *
@


1.12
log
@Make malloc() and realloc() edge cases match the OS libraries.
@
text
@d8 3
d168 6
@


1.12.4.1
log
@branched from trunk for label MLWorks_MM_adapt
@
text
@a7 3
 * Revision 1.12  1997/03/24  15:03:36  nickb
 * Make malloc() and realloc() edge cases match the OS libraries.
 *
@


1.12.3.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a7 3
 * Revision 1.12  1997/03/24  15:03:36  nickb
 * Make malloc() and realloc() edge cases match the OS libraries.
 *
@


1.12.2.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a7 3
 * Revision 1.12  1997/03/24  15:03:36  nickb
 * Make malloc() and realloc() edge cases match the OS libraries.
 *
@


1.12.1.1
log
@branched from 1.12
@
text
@a7 3
 * Revision 1.12  1997/03/24  15:03:36  nickb
 * Make malloc() and realloc() edge cases match the OS libraries.
 *
@


1.12.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a7 3
 * Revision 1.12.1.1  1997/05/12  10:43:51  hope
 * branched from 1.12
 *
@


1.12.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a7 3
 * Revision 1.12.1.1  1997/05/12  10:43:51  hope
 * branched from 1.12
 *
@


1.12.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a7 3
 * Revision 1.12.1.1  1997/05/12  10:43:51  hope
 * branched from 1.12
 *
@


1.12.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a7 3
 * Revision 1.12.1.1.1.1  1997/07/28  18:28:51  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.11
log
@[Bug #1941]
Made the error message understandable for when the OS doesn't have the
necessary patch to run MLWorks on the UltraSPARC.
@
text
@d8 5
d55 1
d137 28
@


1.10
log
@Add check_windows().
@
text
@d8 3
d56 4
a59 1
    error ("Platform has incompatible implementation of ST_CLEAN_WINDOWS.");
@


1.10.6.1
log
@branched from 1.10
@
text
@a7 3
 * Revision 1.10  1996/10/14  14:13:08  nickb
 * Add check_windows().
 *
@


1.10.5.1
log
@branched from 1.10
@
text
@a7 3
 * Revision 1.10  1996/10/14  14:13:08  nickb
 * Add check_windows().
 *
@


1.10.5.1.1.1
log
@branched from 1.10.5.1
@
text
@a7 3
 * Revision 1.10.5.1  1996/12/17  17:55:33  hope
 * branched from 1.10
 *
@


1.10.4.1
log
@branched from 1.10
@
text
@a7 3
 * Revision 1.10  1996/10/14  14:13:08  nickb
 * Add check_windows().
 *
@


1.10.3.1
log
@branched from 1.10
@
text
@a7 3
 * Revision 1.10  1996/10/14  14:13:08  nickb
 * Add check_windows().
 *
@


1.10.2.1
log
@branched from 1.10
@
text
@a7 3
 * Revision 1.10  1996/10/14  14:13:08  nickb
 * Add check_windows().
 *
@


1.10.2.1.1.1
log
@branched from 1.10.2.1
@
text
@a7 3
 * Revision 1.10.2.1  1996/11/14  12:59:29  hope
 * branched from 1.10
 *
@


1.10.1.1
log
@branched from 1.10
@
text
@a7 3
 * Revision 1.10  1996/10/14  14:13:08  nickb
 * Add check_windows().
 *
@


1.9
log
@Add os_on_exit.
@
text
@d8 3
d45 3
a47 1

d51 3
@


1.9.2.1
log
@branched from 1.9
@
text
@a7 3
 * Revision 1.9  1996/08/27  15:35:19  nickb
 * Add os_on_exit.
 *
@


1.9.1.1
log
@branched from 1.9
@
text
@a7 3
 * Revision 1.9  1996/08/27  15:35:19  nickb
 * Add os_on_exit.
 *
@


1.8
log
@Flesh out the rounding mode routines.
@
text
@d8 3
d37 1
d49 5
@


1.7
log
@Adding get/set rounding mode functions
@
text
@d8 3
d32 2
d39 1
d47 1
d51 1
a51 1
extern void os_filesync(FILE *f)
d56 2
d62 1
a62 1
extern void os_update_windows(void)
a66 6
/* Modes are :
  0 : to nearest
  1 : to zero
  2 : to positive infinity
  3 : to negative infinity
*/
d68 21
a88 1
extern int os_get_rounding_mode (void)
d90 5
a94 2
  printf ("os_get_rounding_mode unimplemented");
  return (0);
d97 3
a99 1
extern void os_set_rounding_mode (int arg)
d101 6
a106 1
  printf ("os_set_rounding_mode unimplemented");
@


1.6
log
@OS reorganisation: remove any reference to NT.
@
text
@d8 3
d56 18
@


1.5
log
@Add os_update_windows().
@
text
@d8 3
a27 1
#include "nt.h"
a34 1
  nt_init();
@


1.4
log
@Add include for pioc.h
@
text
@d8 3
d43 9
@


1.3
log
@Add pioc_init().
@
text
@d8 3
d24 1
@


1.2
log
@Add call to nt_init
@
text
@d8 3
d24 1
@


1.1
log
@new file
@
text
@d7 3
a9 1
 *  $Log: $
d11 1
d16 1
d22 1
@


1.1.1.1
log
@branched from 1.1
@
text
@d7 1
a7 4
 *  $Log: src:OS:Solaris:os.c,v $
 * Revision 1.1  1994/07/08  10:44:13  nickh
 * new file
 *
@
