head	1.3;
access;
symbols
	MLW_daveb_inline_1_4_99:1.3.13
	MLWorks_21c0_1999_03_25:1.3
	MLWorks_20c1_1998_08_20:1.3
	MLWorks_20c0_1998_08_04:1.3
	MLWorks_20b2c2_1998_06_19:1.3
	MLWorks_20b2_Windows_1998_06_12:1.3
	MLWorks_20b1c1_1998_05_07:1.3
	MLWorks_20b0_1998_04_07:1.3
	MLWorks_20b0_1998_03_20:1.3
	MLWorks_20m2_1998_02_16:1.3
	MLWorks_MM_adapt:1.3.12
	MLWorks_20m1_1997_10_23:1.3
	MLWorks_workspace_97:1.3.11
	MLWorks_dt_wizard:1.3.10
	MLWorks_10r3:1.3.9.1.3
	MLWorks_10r2_551:1.3.9.1.2
	MLWorks_11:1.3.9.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.3.9.1
	MLWorks_20m0_1997_06_20:1.3
	MLWorks_1_0_r2c2_1997_06_14:1.3.9.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.3.9.1
	MLWorks_1_0_r2c1_1997_05_12:1.3.9
	MLWorks_BugFix_1997_04_24:1.3
	MLWorks_1_0_r2_Win32_1997_04_11:1.3
	MLWorks_1_0_r2_Unix_1997_04_04:1.3
	MM_ML_release_korma_1997_04_01:1.3
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.3.7.1.1
	MLWorks_gui_1996_12_18:1.3.8
	MLWorks_1_0_Win32_1996_12_17:1.3.7
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.3.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.3.4.1
	JFHrts:1.3.6
	MLWorks_1_0_Irix_1996_11_28:1.3.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.3.5
	MLWorks_1_0_Unix_1996_11_14:1.3.4
	MLWorks_Open_Beta2_1996_10_11:1.3.3
	MLWorks_License_dev:1.3.2
	MLWorks_1_open_beta_1996_09_13:1.3.1
	MLWorks_Open_Beta_1996_08_22:1.3
	MLWorks_Beta_1996_07_02:1.3
	MLWorks_Beta_1996_06_07:1.3
	MLWorks_Beta_1996_06_06:1.3
	MLWorks_Beta_1996_06_05:1.3
	MLWorks_Beta_1996_06_03:1.3
	MLWorks_Beta_1996_05_31:1.3
	MLWorks_Beta_1996_05_30:1.3;
locks; strict;
comment	@ * @;


1.3
date	95.03.23.16.45.41;	author brianm;	state Exp;
branches
	1.3.1.1
	1.3.2.1
	1.3.3.1
	1.3.4.1
	1.3.5.1
	1.3.6.1
	1.3.7.1
	1.3.8.1
	1.3.9.1
	1.3.10.1
	1.3.11.1
	1.3.12.1
	1.3.13.1;
next	1.2;

1.2
date	95.03.01.15.51.43;	author brianm;	state Exp;
branches;
next	1.1;

1.1
date	95.03.01.09.51.14;	author brianm;	state Exp;
branches;
next	;

1.3.1.1
date	96.09.13.11.24.09;	author hope;	state Exp;
branches;
next	;

1.3.2.1
date	96.10.07.16.14.26;	author hope;	state Exp;
branches;
next	;

1.3.3.1
date	96.10.17.11.33.53;	author hope;	state Exp;
branches;
next	;

1.3.4.1
date	96.11.14.12.59.33;	author hope;	state Exp;
branches
	1.3.4.1.1.1;
next	;

1.3.4.1.1.1
date	96.11.28.15.09.33;	author hope;	state Exp;
branches;
next	;

1.3.5.1
date	96.11.22.18.17.18;	author hope;	state Exp;
branches;
next	;

1.3.6.1
date	96.12.17.10.04.03;	author hope;	state Exp;
branches;
next	;

1.3.7.1
date	96.12.17.17.55.39;	author hope;	state Exp;
branches
	1.3.7.1.1.1;
next	;

1.3.7.1.1.1
date	97.02.24.11.47.11;	author hope;	state Exp;
branches;
next	;

1.3.8.1
date	96.12.18.09.50.14;	author hope;	state Exp;
branches;
next	;

1.3.9.1
date	97.05.12.10.43.56;	author hope;	state Exp;
branches
	1.3.9.1.1.1
	1.3.9.1.2.1
	1.3.9.1.3.1;
next	;

1.3.9.1.1.1
date	97.07.28.18.25.33;	author daveb;	state Exp;
branches;
next	;

1.3.9.1.2.1
date	97.09.08.17.18.47;	author daveb;	state Exp;
branches;
next	;

1.3.9.1.3.1
date	97.09.09.14.14.55;	author daveb;	state Exp;
branches;
next	;

1.3.10.1
date	97.09.10.19.31.42;	author brucem;	state Exp;
branches;
next	;

1.3.11.1
date	97.09.11.21.01.06;	author daveb;	state Exp;
branches;
next	;

1.3.12.1
date	97.10.31.13.44.06;	author nickb;	state Exp;
branches;
next	;

1.3.13.1
date	99.04.01.18.00.58;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
Header for foreign object loading
@


1.3
log
@Restricting exported functions and added ifndef locks to prevent multiple loading.
@
text
@/*  ==== FOREIGN OBJECT LOADER ====
 *
 *  Copyright (C) 1995 Harlequin Ltd.
 *
 *  Description
 *  -----------
 *  Provides core C/ML interface to foreign loader - based upon
 *  OS-provided run-time dynamic linking libraries (libdl).
 *
 *  Revision Log
 *  ------------
 *  $Log: src:foreign_loader.h,v $
 * Revision 1.2  1995/03/01  15:51:43  brianm
 * Minor corrections.
 *
 * Revision 1.1  1995/03/01  09:51:14  brianm
 * new unit
 * Header for foreign object loading
 * */

#ifndef foreign_loader_h
#define foreign_loader_h

#include "fi_call_stub.h"

/* ==== Error hook for foreign interface call ====
 *
 *  Function called when num. args to foreign function is too large.
 *  (i.e. exceeds MAX_FI_ARG_LIMIT, defined in fi_call_stub.h).
 *
 */
extern mlval call_ffun_error(int);

/* ==== Foreign loader init function ====
 *
 *  Code to export foreign loading interface functions into the ML
 *  environment.
 *
 */
extern void  foreign_init(void);

#endif
@


1.3.13.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a12 3
 * Revision 1.3  1995/03/23  16:45:41  brianm
 * Restricting exported functions and added ifndef locks to prevent multiple loading.
 *
@


1.3.12.1
log
@branched from trunk for label MLWorks_MM_adapt
@
text
@a12 3
 * Revision 1.3  1995/03/23  16:45:41  brianm
 * Restricting exported functions and added ifndef locks to prevent multiple loading.
 *
@


1.3.11.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a12 3
 * Revision 1.3  1995/03/23  16:45:41  brianm
 * Restricting exported functions and added ifndef locks to prevent multiple loading.
 *
@


1.3.10.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a12 3
 * Revision 1.3  1995/03/23  16:45:41  brianm
 * Restricting exported functions and added ifndef locks to prevent multiple loading.
 *
@


1.3.9.1
log
@branched from 1.3
@
text
@a12 3
 * Revision 1.3  1995/03/23  16:45:41  brianm
 * Restricting exported functions and added ifndef locks to prevent multiple loading.
 *
@


1.3.9.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a12 3
 * Revision 1.3.9.1  1997/05/12  10:43:56  hope
 * branched from 1.3
 *
@


1.3.9.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a12 3
 * Revision 1.3.9.1  1997/05/12  10:43:56  hope
 * branched from 1.3
 *
@


1.3.9.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a12 3
 * Revision 1.3.9.1  1997/05/12  10:43:56  hope
 * branched from 1.3
 *
@


1.3.8.1
log
@branched from 1.3
@
text
@a12 3
 * Revision 1.3  1995/03/23  16:45:41  brianm
 * Restricting exported functions and added ifndef locks to prevent multiple loading.
 *
@


1.3.7.1
log
@branched from 1.3
@
text
@a12 3
 * Revision 1.3  1995/03/23  16:45:41  brianm
 * Restricting exported functions and added ifndef locks to prevent multiple loading.
 *
@


1.3.7.1.1.1
log
@branched from 1.3.7.1
@
text
@a12 3
 * Revision 1.3.7.1  1996/12/17  17:55:39  hope
 * branched from 1.3
 *
@


1.3.6.1
log
@branched from 1.3
@
text
@a12 3
 * Revision 1.3  1995/03/23  16:45:41  brianm
 * Restricting exported functions and added ifndef locks to prevent multiple loading.
 *
@


1.3.5.1
log
@branched from 1.3
@
text
@a12 3
 * Revision 1.3  1995/03/23  16:45:41  brianm
 * Restricting exported functions and added ifndef locks to prevent multiple loading.
 *
@


1.3.4.1
log
@branched from 1.3
@
text
@a12 3
 * Revision 1.3  1995/03/23  16:45:41  brianm
 * Restricting exported functions and added ifndef locks to prevent multiple loading.
 *
@


1.3.4.1.1.1
log
@branched from 1.3.4.1
@
text
@a12 3
 * Revision 1.3.4.1  1996/11/14  12:59:33  hope
 * branched from 1.3
 *
@


1.3.3.1
log
@branched from 1.3
@
text
@a12 3
 * Revision 1.3  1995/03/23  16:45:41  brianm
 * Restricting exported functions and added ifndef locks to prevent multiple loading.
 *
@


1.3.2.1
log
@branched from 1.3
@
text
@a12 3
 * Revision 1.3  1995/03/23  16:45:41  brianm
 * Restricting exported functions and added ifndef locks to prevent multiple loading.
 *
@


1.3.1.1
log
@branched from 1.3
@
text
@a12 3
 * Revision 1.3  1995/03/23  16:45:41  brianm
 * Restricting exported functions and added ifndef locks to prevent multiple loading.
 *
@


1.2
log
@Minor corrections.
@
text
@d7 2
a8 1
 *  Still experimental and under development.
d13 3
d19 1
a19 2
 *
 */
d21 2
d26 1
a26 13

extern mlval load_foreign_object(mlval);
/*
 *  <ML> load_foreign_object : string -> foreign_object
 *
 *  Given a pathname (as a string), this dynamiclly links the
 *  specified executable object file and returns a foreign_object.
 */


extern mlval lookup_foreign_value(mlval);
/*
 *  <ML> lookup_foreign_value : (foreign_object * string) -> foreign_value
d28 2
a29 8
 *  Given a name (as a ML string) and a foreign object, this looks up
 *  the foreign value within the given foreign object.
 */


extern mlval call_unit_function(mlval);
/*
 *  <ML> call_unit_function : foreign_object -> unit
a30 1
 *  Calls a foreign unit function (included for testing purposes only).
d32 1
d34 1
a34 13

extern mlval call_foreign_function(mlval);
/*
 *  <ML> call_foreign_function : (function * memory * int * memory) -> unit
 *
 *  Calls a foreign function on a given array of (4 byte) argument values and
 *  returning a 4 byte value.  The integer argument specifies the number of
 *  arguments to be passed.
 */

extern mlval pack_foreign_value(void *);
/*
 *  pack_foreign_value(pointer) : foreign_value
d36 2
a37 8
 *  Takes a pointer and produces a valid ML record representing the
 *  pointer (i.e. as an ML integer pair).
 */


extern void  *unpack_foreign_value(mlval);
/*
 *  unpack_foreign_value(foreign_value) : pointer
a38 2
 *  Takes an ML integer pair (i.e. a foreign_value) representing the pointer
 *  and returns the raw pointer value. 
d40 1
a40 1

d42 1
a42 4
extern void  foreign_init(void);
/*
 *  Code to export functions into the ML environment.
 */
@


1.1
log
@new unit
Header for foreign object loading
@
text
@d11 5
a15 1
 *  $Log$
d19 1
d40 9
a48 1
extern ml call_foreign_function(mlval);
@
