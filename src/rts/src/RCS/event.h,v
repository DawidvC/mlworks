head	1.5;
access;
symbols
	MLW_daveb_inline_1_4_99:1.5.13
	MLWorks_21c0_1999_03_25:1.5
	MLWorks_20c1_1998_08_20:1.5
	MLWorks_20c0_1998_08_04:1.5
	MLWorks_20b2c2_1998_06_19:1.5
	MLWorks_20b2_Windows_1998_06_12:1.5
	MLWorks_20b1c1_1998_05_07:1.5
	MLWorks_20b0_1998_04_07:1.5
	MLWorks_20b0_1998_03_20:1.5
	MLWorks_20m2_1998_02_16:1.5
	MLWorks_MM_adapt:1.5.12
	MLWorks_20m1_1997_10_23:1.5
	MLWorks_11r1:1.5.9.1.1.1.1
	MLWorks_workspace_97:1.5.11
	MLWorks_dt_wizard:1.5.10
	MLWorks_11c0_1997_09_09:1.5.9.1.1.1
	MLWorks_10r3:1.5.9.1.3
	MLWorks_10r2_551:1.5.9.1.2
	MLWorks_11:1.5.9.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.5.9.1
	MLWorks_20m0_1997_06_20:1.5
	MLWorks_1_0_r2c2_1997_06_14:1.5.9.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.5.9.1
	MLWorks_1_0_r2c1_1997_05_12:1.5.9
	MLWorks_BugFix_1997_04_24:1.5
	MLWorks_1_0_r2_Win32_1997_04_11:1.5
	MLWorks_1_0_r2_Unix_1997_04_04:1.5
	MM_ML_release_korma_1997_04_01:1.5
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.5.7.1.1
	MLWorks_gui_1996_12_18:1.5.8
	MLWorks_1_0_Win32_1996_12_17:1.5.7
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.5.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.5.4.1
	JFHrts:1.5.6
	MLWorks_1_0_Irix_1996_11_28:1.5.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.5.5
	MLWorks_1_0_Unix_1996_11_14:1.5.4
	MLWorks_Open_Beta2_1996_10_11:1.5.3
	MLWorks_License_dev:1.5.2
	MLWorks_1_open_beta_1996_09_13:1.5.1
	MLWorks_Open_Beta_1996_08_22:1.5
	MLWorks_Beta_1996_07_02:1.5
	MLWorks_Beta_1996_06_07:1.5
	MLWorks_Beta_1996_06_06:1.5
	MLWorks_Beta_1996_06_05:1.5
	MLWorks_Beta_1996_06_03:1.5
	MLWorks_Beta_1996_05_31:1.5
	MLWorks_Beta_1996_05_30:1.5
	hope_poo:1.2.1
	ML_beta_release_12/08/94:1.2.1.1
	ML_beta_release_03/08/94:1.2;
locks; strict;
comment	@ * @;


1.5
date	96.02.19.13.59.26;	author nickb;	state Exp;
branches
	1.5.1.1
	1.5.2.1
	1.5.3.1
	1.5.4.1
	1.5.5.1
	1.5.6.1
	1.5.7.1
	1.5.8.1
	1.5.9.1
	1.5.10.1
	1.5.11.1
	1.5.12.1
	1.5.13.1;
next	1.4;

1.4
date	96.01.05.16.38.00;	author nickb;	state Exp;
branches;
next	1.3;

1.3
date	95.09.12.14.32.17;	author jont;	state Exp;
branches;
next	1.2;

1.2
date	94.06.09.14.35.36;	author nickh;	state Exp;
branches
	1.2.1.1;
next	1.1;

1.1
date	94.06.09.11.01.59;	author nickh;	state Exp;
branches;
next	;

1.2.1.1
date	95.07.05.10.30.00;	author hope;	state Exp;
branches;
next	;

1.5.1.1
date	96.09.13.11.24.42;	author hope;	state Exp;
branches;
next	;

1.5.2.1
date	96.10.07.16.15.01;	author hope;	state Exp;
branches;
next	;

1.5.3.1
date	96.10.17.11.34.27;	author hope;	state Exp;
branches;
next	;

1.5.4.1
date	96.11.14.13.00.06;	author hope;	state Exp;
branches
	1.5.4.1.1.1;
next	;

1.5.4.1.1.1
date	96.11.28.15.10.09;	author hope;	state Exp;
branches;
next	;

1.5.5.1
date	96.11.22.18.17.55;	author hope;	state Exp;
branches;
next	;

1.5.6.1
date	96.12.17.10.04.38;	author hope;	state Exp;
branches;
next	;

1.5.7.1
date	96.12.17.17.56.14;	author hope;	state Exp;
branches
	1.5.7.1.1.1;
next	;

1.5.7.1.1.1
date	97.02.24.11.47.48;	author hope;	state Exp;
branches;
next	;

1.5.8.1
date	96.12.18.09.50.53;	author hope;	state Exp;
branches;
next	;

1.5.9.1
date	97.05.12.10.44.32;	author hope;	state Exp;
branches
	1.5.9.1.1.1
	1.5.9.1.2.1
	1.5.9.1.3.1;
next	;

1.5.9.1.1.1
date	97.07.28.18.29.45;	author daveb;	state Exp;
branches
	1.5.9.1.1.1.1.1;
next	;

1.5.9.1.1.1.1.1
date	97.10.07.11.55.34;	author jkbrook;	state Exp;
branches;
next	;

1.5.9.1.2.1
date	97.09.08.17.22.43;	author daveb;	state Exp;
branches;
next	;

1.5.9.1.3.1
date	97.09.09.14.18.47;	author daveb;	state Exp;
branches;
next	;

1.5.10.1
date	97.09.10.19.38.19;	author brucem;	state Exp;
branches;
next	;

1.5.11.1
date	97.09.11.21.06.01;	author daveb;	state Exp;
branches;
next	;

1.5.12.1
date	97.10.31.13.49.05;	author nickb;	state Exp;
branches;
next	;

1.5.13.1
date	99.04.01.18.04.42;	author daveb;	state Exp;
branches;
next	;


desc
@new file
@


1.5
log
@Get rid of clean_handlers();
@
text
@/*  ==== EVENT HANDLER ====
 *
 *  Copyright (C) 1992 Harlequin Ltd
 *
 *  Description
 *  -----------
 *  The event handler deals with asynchronous events such as signals and
 *  turns them into synchronous events that ML can deal with.  (ML can't be
 *  interrupted in the middle of an allocation, for example.)
 *
 *  Revision Log
 *  ------------
 *  $Log: src:event.h,v $
 * Revision 1.4  1996/01/05  16:38:00  nickb
 * Add interrupt and stack-overflow events.
 *
 * Revision 1.3  1995/09/12  14:32:17  jont
 * Add a clear_handlers function for use by exportFn
 *
 * Revision 1.2  1994/06/09  14:35:36  nickh
 * new file
 *
 * Revision 1.1  1994/06/09  11:01:59  nickh
 * new file
 *
 *  Revision 1.1  1992/10/23  10:19:16  richard
 *  Initial revision
 *
 */

#ifndef event_h
#define event_h

#include "mltypes.h"
#include "tags.h"


/*  === INITIALISE ===
 *
 *  This must be called before any other function in this module.  It may
 *  declare global roots.
 */

extern void ev_init(void);


/*  === POLL EVENTS ===
 *
 *  This function may be called to clear pending events.  It is usually
 *  called by the ML interface code when it detects a pending event.
 */

extern void ev_poll(void);

/*  == Event queue ==
 *
 *  If an asynchronous event occurs while another is pending, it is queued.
 */

/* event types */

enum {
  EV_SENTINEL,	/* used as a sentinel on the event queue */
  EV_SIGNAL,	/* there has been a signal; the event value is the signal no */
  EV_STACK,	/* soft stack limit exceeded */
  EV_SWITCH,	/* thread pre-empt now */
  EV_INTERRUPT,	/* there has been an interrupt */
  EV_WINDOWS	/* now might be a good time to handle window updates */
};

extern void record_event(int type, word value);

#endif
@


1.5.13.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a13 3
 * Revision 1.5  1996/02/19  13:59:26  nickb
 * Get rid of clean_handlers();
 *
@


1.5.12.1
log
@branched from trunk for label MLWorks_MM_adapt
@
text
@a13 3
 * Revision 1.5  1996/02/19  13:59:26  nickb
 * Get rid of clean_handlers();
 *
@


1.5.11.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a13 3
 * Revision 1.5  1996/02/19  13:59:26  nickb
 * Get rid of clean_handlers();
 *
@


1.5.10.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a13 3
 * Revision 1.5  1996/02/19  13:59:26  nickb
 * Get rid of clean_handlers();
 *
@


1.5.9.1
log
@branched from 1.5
@
text
@a13 3
 * Revision 1.5  1996/02/19  13:59:26  nickb
 * Get rid of clean_handlers();
 *
@


1.5.9.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a13 3
 * Revision 1.5.9.1  1997/05/12  10:44:32  hope
 * branched from 1.5
 *
@


1.5.9.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a13 3
 * Revision 1.5.9.1  1997/05/12  10:44:32  hope
 * branched from 1.5
 *
@


1.5.9.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a13 3
 * Revision 1.5.9.1  1997/05/12  10:44:32  hope
 * branched from 1.5
 *
@


1.5.9.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a13 3
 * Revision 1.5.9.1.1.1  1997/07/28  18:29:45  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.5.8.1
log
@branched from 1.5
@
text
@a13 3
 * Revision 1.5  1996/02/19  13:59:26  nickb
 * Get rid of clean_handlers();
 *
@


1.5.7.1
log
@branched from 1.5
@
text
@a13 3
 * Revision 1.5  1996/02/19  13:59:26  nickb
 * Get rid of clean_handlers();
 *
@


1.5.7.1.1.1
log
@branched from 1.5.7.1
@
text
@a13 3
 * Revision 1.5.7.1  1996/12/17  17:56:14  hope
 * branched from 1.5
 *
@


1.5.6.1
log
@branched from 1.5
@
text
@a13 3
 * Revision 1.5  1996/02/19  13:59:26  nickb
 * Get rid of clean_handlers();
 *
@


1.5.5.1
log
@branched from 1.5
@
text
@a13 3
 * Revision 1.5  1996/02/19  13:59:26  nickb
 * Get rid of clean_handlers();
 *
@


1.5.4.1
log
@branched from 1.5
@
text
@a13 3
 * Revision 1.5  1996/02/19  13:59:26  nickb
 * Get rid of clean_handlers();
 *
@


1.5.4.1.1.1
log
@branched from 1.5.4.1
@
text
@a13 3
 * Revision 1.5.4.1  1996/11/14  13:00:06  hope
 * branched from 1.5
 *
@


1.5.3.1
log
@branched from 1.5
@
text
@a13 3
 * Revision 1.5  1996/02/19  13:59:26  nickb
 * Get rid of clean_handlers();
 *
@


1.5.2.1
log
@branched from 1.5
@
text
@a13 3
 * Revision 1.5  1996/02/19  13:59:26  nickb
 * Get rid of clean_handlers();
 *
@


1.5.1.1
log
@branched from 1.5
@
text
@a13 3
 * Revision 1.5  1996/02/19  13:59:26  nickb
 * Get rid of clean_handlers();
 *
@


1.4
log
@Add interrupt and stack-overflow events.
@
text
@d14 3
a45 8

/* === REMOVE ALL HANDLERS ===
 *
 * This is used by exportFn in order to prevent the debugger
 * from being part of the saved image
 */

void clear_handlers(void);
@


1.3
log
@Add a clear_handlers function for use by exportFn
@
text
@d14 3
d65 9
a73 9
struct event
{
  struct event *forward, *back;
  enum {SENTINEL, SIGNAL} type;
  union
  {
    int sentinel_count;
    int signal;
  } the;
d76 1
a76 1
extern struct event event_queue;
@


1.2
log
@new file
@
text
@d14 3
d40 8
@


1.2.1.1
log
@branched from 1.2
@
text
@a13 3
 * Revision 1.2  1994/06/09  14:35:36  nickh
 * new file
 *
@


1.1
log
@new file
@
text
@d13 4
a16 1
 *  $Log: event.h,v $
@
