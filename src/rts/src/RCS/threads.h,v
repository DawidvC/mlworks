head	1.11;
access;
symbols
	MLW_daveb_inline_1_4_99:1.11.1
	MLWorks_21c0_1999_03_25:1.11
	MLWorks_20c1_1998_08_20:1.10
	MLWorks_20c0_1998_08_04:1.10
	MLWorks_20b2c2_1998_06_19:1.9
	MLWorks_20b2_Windows_1998_06_12:1.9
	MLWorks_20b1c1_1998_05_07:1.9
	MLWorks_20b0_1998_04_07:1.9
	MLWorks_20b0_1998_03_20:1.9
	MLWorks_20m2_1998_02_16:1.9
	MLWorks_MM_adapt:1.9.4
	MLWorks_20m1_1997_10_23:1.9
	MLWorks_11r1:1.9.1.1.1.1.1
	MLWorks_workspace_97:1.9.3
	MLWorks_dt_wizard:1.9.2
	MLWorks_11c0_1997_09_09:1.9.1.1.1.1
	MLWorks_10r3:1.9.1.1.3
	MLWorks_10r2_551:1.9.1.1.2
	MLWorks_11:1.9.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.9.1.1
	MLWorks_20m0_1997_06_20:1.9
	MLWorks_1_0_r2c2_1997_06_14:1.9.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.9.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.9.1
	MLWorks_BugFix_1997_04_24:1.9
	MLWorks_1_0_r2_Win32_1997_04_11:1.9
	MLWorks_1_0_r2_Unix_1997_04_04:1.9
	MM_ML_release_korma_1997_04_01:1.9
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.6.7.1.1
	MLWorks_gui_1996_12_18:1.6.8
	MLWorks_1_0_Win32_1996_12_17:1.6.7
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.6.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.6.4.1
	JFHrts:1.6.6
	MLWorks_1_0_Irix_1996_11_28:1.6.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.6.5
	MLWorks_1_0_Unix_1996_11_14:1.6.4
	MLWorks_Open_Beta2_1996_10_11:1.6.3
	MLWorks_License_dev:1.6.2
	MLWorks_1_open_beta_1996_09_13:1.6.1
	MLWorks_Open_Beta_1996_08_22:1.6
	MLWorks_Beta_1996_07_02:1.6
	MLWorks_Beta_1996_06_07:1.6
	MLWorks_Beta_1996_06_06:1.6
	MLWorks_Beta_1996_06_05:1.6
	MLWorks_Beta_1996_06_03:1.6
	MLWorks_Beta_1996_05_31:1.6
	MLWorks_Beta_1996_05_30:1.6;
locks; strict;
comment	@ * @;


1.11
date	98.07.08.10.39.00;	author jont;	state Exp;
branches
	1.11.1.1;
next	1.10;

1.10
date	98.07.02.14.03.36;	author jont;	state Exp;
branches;
next	1.9;

1.9
date	97.01.29.11.40.40;	author andreww;	state Exp;
branches
	1.9.1.1
	1.9.2.1
	1.9.3.1
	1.9.4.1;
next	1.8;

1.8
date	97.01.21.15.35.36;	author andreww;	state Exp;
branches;
next	1.7;

1.7
date	97.01.20.15.22.23;	author andreww;	state Exp;
branches;
next	1.6;

1.6
date	96.01.15.11.31.08;	author nickb;	state Exp;
branches
	1.6.1.1
	1.6.2.1
	1.6.3.1
	1.6.4.1
	1.6.5.1
	1.6.6.1
	1.6.7.1
	1.6.8.1;
next	1.5;

1.5
date	96.01.11.16.18.34;	author stephenb;	state Exp;
branches;
next	1.4;

1.4
date	95.09.12.16.27.26;	author jont;	state Exp;
branches;
next	1.3;

1.3
date	95.06.01.15.27.33;	author nickb;	state Exp;
branches;
next	1.2;

1.2
date	95.04.24.13.45.04;	author nickb;	state Exp;
branches;
next	1.1;

1.1
date	95.03.30.14.04.08;	author nickb;	state Exp;
branches;
next	;

1.6.1.1
date	96.09.13.11.24.32;	author hope;	state Exp;
branches;
next	;

1.6.2.1
date	96.10.07.16.14.51;	author hope;	state Exp;
branches;
next	;

1.6.3.1
date	96.10.17.11.34.16;	author hope;	state Exp;
branches;
next	;

1.6.4.1
date	96.11.14.12.59.56;	author hope;	state Exp;
branches
	1.6.4.1.1.1;
next	;

1.6.4.1.1.1
date	96.11.28.15.09.58;	author hope;	state Exp;
branches;
next	;

1.6.5.1
date	96.11.22.18.17.44;	author hope;	state Exp;
branches;
next	;

1.6.6.1
date	96.12.17.10.04.27;	author hope;	state Exp;
branches;
next	;

1.6.7.1
date	96.12.17.17.56.04;	author hope;	state Exp;
branches
	1.6.7.1.1.1;
next	;

1.6.7.1.1.1
date	97.02.24.11.47.36;	author hope;	state Exp;
branches;
next	;

1.6.8.1
date	96.12.18.09.50.41;	author hope;	state Exp;
branches;
next	;

1.9.1.1
date	97.05.12.10.44.22;	author hope;	state Exp;
branches
	1.9.1.1.1.1
	1.9.1.1.2.1
	1.9.1.1.3.1;
next	;

1.9.1.1.1.1
date	97.07.28.18.28.02;	author daveb;	state Exp;
branches
	1.9.1.1.1.1.1.1;
next	;

1.9.1.1.1.1.1.1
date	97.10.07.11.53.57;	author jkbrook;	state Exp;
branches;
next	;

1.9.1.1.2.1
date	97.09.08.17.21.02;	author daveb;	state Exp;
branches;
next	;

1.9.1.1.3.1
date	97.09.09.14.17.07;	author daveb;	state Exp;
branches;
next	;

1.9.2.1
date	97.09.10.19.35.44;	author brucem;	state Exp;
branches;
next	;

1.9.3.1
date	97.09.11.21.04.12;	author daveb;	state Exp;
branches;
next	;

1.9.4.1
date	97.10.31.13.47.17;	author nickb;	state Exp;
branches;
next	;

1.11.1.1
date	99.04.01.18.03.07;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
Portable threads code.
@


1.11
log
@[Bug #30108]
Implement DLL based ML code
@
text
@/* rts/src/threads.h
 *
 * We define structs describing the state of a thread and functions to
 * manipulate them.
 *
 * Copyright (C) 1995 Harlequin Ltd.
 *
 * $Log: src:threads.h,v $
 * Revision 1.10  1998/07/02  14:03:36  jont
 * [Bug #70131]
 * Add names to threads
 *
 * Revision 1.9  1997/01/29  11:40:40  andreww
 * [Bug #1891]
 * Adding flag for critical section
 *
 * Revision 1.8  1997/01/21  15:35:36  andreww
 * [Bug #1896]
 * Adding new state THREAD_KILLED_SLEEPING.
 * purely to maintain an accurate count of runnable threads
 * (i.e., so that it isn't decremented both when a thread goes to
 * sleep, and then when it is subsequently killed.)
 *
 * Revision 1.7  1997/01/20  15:22:23  andreww
 * [Bug #1894]
 * Adding new thread_root index for thread exceptions
 *
 * Revision 1.6  1996/01/15  11:31:08  nickb
 * Add facility to check for runnable threads.
 *
 * Revision 1.5  1996/01/11  16:18:34  stephenb
 * Add field to thread_state to indicate if currently inside a fatal
 * signal handler.
 *
 * Revision 1.4  1995/09/12  16:27:26  jont
 * Add a function to clean up c roots in ml_state etc
 *
 * Revision 1.3  1995/06/01  15:27:33  nickb
 * Fatal error handing.
 *
 * Revision 1.2  1995/04/24  13:45:04  nickb
 * Add thread_preemption_pending.
 *
 * Revision 1.1  1995/03/30  14:04:08  nickb
 * new unit
 * Portable threads code.
 *
 */

#ifndef _threads_h
#define _threads_h
#include "implicit.h"
#include "mem.h"
#include "mach_state.h"

/* a thread_state contains all the information necessary to continue
 * that thread. Continuing a thread consists of restoring C registers
 * (and the appropriate C stack) and jumping to the location indicated
 * by the C pc. All that information is in the C state, and is non
 * portable. There is also non-portable information in the ML
 * state. Those state structs are defined in mach_state.h.
 *
 * If you change any of the data layout here, you will also need to
 * change mach/$ARCH/asm_offsets.h.  */

/* how many roots in each thread_state */

#define THREAD_ROOTS 4

/* the meanings of a couple of those roots: */
/* roots[THREAD_CLOSURE] is the closure to run in this (new) thread */
/* roots[THREAD_HANDLER] is the fatal error handler for this thread. */
/* roots[THREAD_EXCEPTION_ROOT] is the exception root for this thread. */

#define THREAD_CLOSURE 0
#define THREAD_HANDLER 1
#define THREAD_EXCEPTION_ROOT 2


/* how many non-root thread locals in each thread_state */

#define THREAD_LOCALS 8

struct thread_state {
  struct implicit_vector implicit;	/* entry points &c */

  /* Values relating to the C and ML states */

  struct c_state c_state;
  struct ml_state ml_state;

  /* root maintenance; root[n] is declared iff declared[n] != 0 */

  mlval roots[THREAD_ROOTS];
  mlval declared[THREAD_ROOTS];

  /* a place to keep thread-local values which are not roots */

  word locals[THREAD_LOCALS];
  
  /* Now a pointer to the global state */

  struct global_state *global;

  /* now thread hierarchy structure information */

  word children;

  /* first and last children */

  struct thread_state *first_child;
  struct thread_state *last_child;

  /* siblings are a doubly-linked list, with the parent as sentinel */

  struct thread_state *next_sib; /* doubly-linked list of siblings */
  struct thread_state *last_sib;

  struct thread_state *parent;

  /* lastly thread management information */

  struct thread_state *next; 	/* allows this thread to be on one of */
  struct thread_state *last; 	/* several doubly-linked lists e.g. */
  				/* 'all runnable threads' */
  mlval ml_thread;		/* root to the ML thread value */
  word number;			/* unique to this thread */

  word in_fatal_signal_handler;
  char *name; /* A name for this thread */
};


/* There is a global state, which includes global state information
 * and also a thread state for the top level thread. The top level
 * thread runs only in C, on the OS-provided C stack, and is in charge
 * of scheduling; when a thread completes it returns to this
 * thread. This thread is also the ultimate ancestor of all threads
 * and the dummy member in the list of all threads. The global state
 * is declared in state.h and defined in state.c */

struct global_state {
  word in_ML;			/* used in signal handlers: are we in ML? */
  struct thread_state *current_thread;
  struct thread_state toplevel;
};

extern void run_scheduler(int (*start_mlworks)(int, const char *const *, mlval, void (*)(void)),
			  int argc, const char *const *argv, mlval, void (*)(void));

extern unsigned long int next_thread_number;

extern void threads_init(void);
extern mlval thread_yield(mlval arg);
extern void thread_suicide(void);
extern void clear_thread_roots(void);

extern int thread_preemption_on;
extern int thread_preemption_pending;
extern int thread_in_critical_section;
extern int runnable_threads;

#define ML_THREAD(c_thread)	((c_thread)->ml_thread)
#define C_THREAD(ml_thread)	((struct thread_state *)(FIELD(ml_thread,1)))

#define THREAD_DIED		(MLINT(0))	/* received fatal signal */
#define THREAD_EXCEPTION	(MLINT(1))	/* raised uncaught exn */
#define THREAD_EXPIRED		(MLINT(2))	/* lost when image was saved */
#define THREAD_KILLED		(MLINT(3))	/* killed */
#define THREAD_RESULT		(MLINT(4))	/* completed */
#define THREAD_RUNNING		(MLINT(5))	/* still running */
#define THREAD_SLEEPING		(MLINT(6))	/* thread asleep */
#define THREAD_WAITING		(MLINT(7))	/* not implemented */
#define THREAD_KILLED_SLEEPING  (MLINT(8))      /* needed to keep
						   runnable_threads OK */

/* NB, if you change these numbers (which correspond to the
 * constructor numbers in the datatype MLWorks.Threads.result) then
 * you're going to have to change the said datatype plus functions.
 */

#define SET_RESULT(ml_thread,r) (MLUPDATE(FIELD(ml_thread,0),0,r))
#define GET_RESULT(ml_thread)   (MLSUB(FIELD(ml_thread,0),0))

#define SET_CONTINUATION(thread,fn) (C_PC(&thread->c_state) = (word)(fn))

#define THREAD_ERROR_HANDLER(thread) ((thread)->declared[THREAD_HANDLER] ? \
				      (thread)->roots[THREAD_HANDLER] :    \
				      MLUNIT)

#endif
@


1.11.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a8 4
 * Revision 1.11  1998/07/08  10:39:00  jont
 * [Bug #30108]
 * Implement DLL based ML code
 *
@


1.10
log
@[Bug #70131]
Add names to threads
@
text
@d9 4
d148 2
a149 2
extern void run_scheduler(int (*start_mlworks)(int, const char *const *),
			  int argc, const char *const *argv);
@


1.9
log
@[Bug #1891]
Adding flag for critical section
@
text
@d9 4
d126 1
@


1.9.4.1
log
@branched from trunk for label MLWorks_MM_adapt
@
text
@a8 4
 * Revision 1.9  1997/01/29  11:40:40  andreww
 * [Bug #1891]
 * Adding flag for critical section
 *
@


1.9.3.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a8 4
 * Revision 1.9  1997/01/29  11:40:40  andreww
 * [Bug #1891]
 * Adding flag for critical section
 *
@


1.9.2.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a8 4
 * Revision 1.9  1997/01/29  11:40:40  andreww
 * [Bug #1891]
 * Adding flag for critical section
 *
@


1.9.1.1
log
@branched from 1.9
@
text
@a8 4
 * Revision 1.9  1997/01/29  11:40:40  andreww
 * [Bug #1891]
 * Adding flag for critical section
 *
@


1.9.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a8 3
 * Revision 1.9.1.1  1997/05/12  10:44:22  hope
 * branched from 1.9
 *
@


1.9.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a8 3
 * Revision 1.9.1.1  1997/05/12  10:44:22  hope
 * branched from 1.9
 *
@


1.9.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a8 3
 * Revision 1.9.1.1  1997/05/12  10:44:22  hope
 * branched from 1.9
 *
@


1.9.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a8 3
 * Revision 1.9.1.1.1.1  1997/07/28  18:28:02  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.8
log
@[Bug #1896]
Adding new state THREAD_KILLED_SLEEPING.
purely to maintain an accurate count of runnable threads
(i.e., so that it isn't decremented both when a thread goes to
sleep, and then when it is subsequently killed.)
@
text
@d9 7
d151 1
@


1.7
log
@[Bug #1894]
Adding new thread_root index for thread exceptions
@
text
@d9 4
d155 1
a155 1
#define THREAD_SLEEPING		(MLINT(6))	/* not implemented */
d157 7
@


1.6
log
@Add facility to check for runnable threads.
@
text
@d9 3
d54 1
d58 2
@


1.6.8.1
log
@branched from 1.6
@
text
@a8 3
 * Revision 1.6  1996/01/15  11:31:08  nickb
 * Add facility to check for runnable threads.
 *
@


1.6.7.1
log
@branched from 1.6
@
text
@a8 3
 * Revision 1.6  1996/01/15  11:31:08  nickb
 * Add facility to check for runnable threads.
 *
@


1.6.7.1.1.1
log
@branched from 1.6.7.1
@
text
@a8 3
 * Revision 1.6.7.1  1996/12/17  17:56:04  hope
 * branched from 1.6
 *
@


1.6.6.1
log
@branched from 1.6
@
text
@a8 3
 * Revision 1.6  1996/01/15  11:31:08  nickb
 * Add facility to check for runnable threads.
 *
@


1.6.5.1
log
@branched from 1.6
@
text
@a8 3
 * Revision 1.6  1996/01/15  11:31:08  nickb
 * Add facility to check for runnable threads.
 *
@


1.6.4.1
log
@branched from 1.6
@
text
@a8 3
 * Revision 1.6  1996/01/15  11:31:08  nickb
 * Add facility to check for runnable threads.
 *
@


1.6.4.1.1.1
log
@branched from 1.6.4.1
@
text
@a8 3
 * Revision 1.6.4.1  1996/11/14  12:59:56  hope
 * branched from 1.6
 *
@


1.6.3.1
log
@branched from 1.6
@
text
@a8 3
 * Revision 1.6  1996/01/15  11:31:08  nickb
 * Add facility to check for runnable threads.
 *
@


1.6.2.1
log
@branched from 1.6
@
text
@a8 3
 * Revision 1.6  1996/01/15  11:31:08  nickb
 * Add facility to check for runnable threads.
 *
@


1.6.1.1
log
@branched from 1.6
@
text
@a8 3
 * Revision 1.6  1996/01/15  11:31:08  nickb
 * Add facility to check for runnable threads.
 *
@


1.5
log
@Add field to thread_state to indicate if currently inside a fatal
signal handler.
@
text
@d9 4
d134 1
@


1.4
log
@Add a function to clean up c roots in ml_state etc
@
text
@d9 3
d99 2
d102 1
@


1.3
log
@Fatal error handing.
@
text
@d9 3
d120 1
@


1.2
log
@Add thread_preemption_pending.
@
text
@d9 3
d29 4
a32 1
 * state. Those state structs are defined in mach_state.h. */
d34 2
d37 5
d43 4
a46 1
#define THREAD_RESTART 1
d137 4
@


1.1
log
@new unit
Portable threads code.
@
text
@d8 5
a12 1
 * $Log$
d99 1
a99 1
extern mlval thread_yield(mlval);
d103 1
@
