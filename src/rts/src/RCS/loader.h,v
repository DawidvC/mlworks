head	1.6;
access;
symbols
	MLW_daveb_inline_1_4_99:1.6.1
	MLWorks_21c0_1999_03_25:1.6
	MLWorks_20c1_1998_08_20:1.5
	MLWorks_20c0_1998_08_04:1.5
	MLWorks_20b2c2_1998_06_19:1.5
	MLWorks_20b2_Windows_1998_06_12:1.5
	MLWorks_20b1c1_1998_05_07:1.5
	MLWorks_20b0_1998_04_07:1.5
	MLWorks_20b0_1998_03_20:1.5
	MLWorks_20m2_1998_02_16:1.4
	MLWorks_MM_adapt:1.4.12
	MLWorks_20m1_1997_10_23:1.4
	MLWorks_11r1:1.4.9.1.1.1.1
	MLWorks_workspace_97:1.4.11
	MLWorks_dt_wizard:1.4.10
	MLWorks_11c0_1997_09_09:1.4.9.1.1.1
	MLWorks_10r3:1.4.9.1.3
	MLWorks_10r2_551:1.4.9.1.2
	MLWorks_11:1.4.9.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.4.9.1
	MLWorks_20m0_1997_06_20:1.4
	MLWorks_1_0_r2c2_1997_06_14:1.4.9.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.4.9.1
	MLWorks_1_0_r2c1_1997_05_12:1.4.9
	MLWorks_BugFix_1997_04_24:1.4
	MLWorks_1_0_r2_Win32_1997_04_11:1.4
	MLWorks_1_0_r2_Unix_1997_04_04:1.4
	MM_ML_release_korma_1997_04_01:1.4
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.4.7.1.1
	MLWorks_gui_1996_12_18:1.4.8
	MLWorks_1_0_Win32_1996_12_17:1.4.7
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.4.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.4.4.1
	JFHrts:1.4.6
	MLWorks_1_0_Irix_1996_11_28:1.4.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.4.5
	MLWorks_1_0_Unix_1996_11_14:1.4.4
	MLWorks_Open_Beta2_1996_10_11:1.4.3
	MLWorks_License_dev:1.4.2
	MLWorks_1_open_beta_1996_09_13:1.4.1
	MLWorks_Open_Beta_1996_08_22:1.4
	MLWorks_Beta_1996_07_02:1.4
	MLWorks_Beta_1996_06_07:1.4
	MLWorks_Beta_1996_06_06:1.4
	MLWorks_Beta_1996_06_05:1.4
	MLWorks_Beta_1996_06_03:1.4
	MLWorks_Beta_1996_05_31:1.4
	MLWorks_Beta_1996_05_30:1.4
	hope_poo:1.2.1
	ML_beta_release_12/08/94:1.2.1.1
	ML_beta_release_03/08/94:1.2;
locks; strict;
comment	@ * @;


1.6
date	98.07.23.11.08.01;	author jont;	state Exp;
branches
	1.6.1.1;
next	1.5;

1.5
date	98.03.18.11.49.51;	author jont;	state Exp;
branches;
next	1.4;

1.4
date	95.05.05.14.17.17;	author jont;	state Exp;
branches
	1.4.1.1
	1.4.2.1
	1.4.3.1
	1.4.4.1
	1.4.5.1
	1.4.6.1
	1.4.7.1
	1.4.8.1
	1.4.9.1
	1.4.10.1
	1.4.11.1
	1.4.12.1;
next	1.3;

1.3
date	95.02.20.14.41.31;	author matthew;	state Exp;
branches;
next	1.2;

1.2
date	94.06.09.14.41.20;	author nickh;	state Exp;
branches
	1.2.1.1;
next	1.1;

1.1
date	94.06.09.11.09.08;	author nickh;	state Exp;
branches;
next	;

1.2.1.1
date	95.07.05.10.30.32;	author hope;	state Exp;
branches;
next	;

1.4.1.1
date	96.09.13.11.25.41;	author hope;	state Exp;
branches;
next	;

1.4.2.1
date	96.10.07.16.16.07;	author hope;	state Exp;
branches;
next	;

1.4.3.1
date	96.10.17.11.35.31;	author hope;	state Exp;
branches;
next	;

1.4.4.1
date	96.11.14.13.01.08;	author hope;	state Exp;
branches
	1.4.4.1.1.1;
next	;

1.4.4.1.1.1
date	96.11.28.15.11.12;	author hope;	state Exp;
branches;
next	;

1.4.5.1
date	96.11.22.18.19.00;	author hope;	state Exp;
branches;
next	;

1.4.6.1
date	96.12.17.10.05.43;	author hope;	state Exp;
branches;
next	;

1.4.7.1
date	96.12.17.17.57.17;	author hope;	state Exp;
branches
	1.4.7.1.1.1;
next	;

1.4.7.1.1.1
date	97.02.24.11.49.00;	author hope;	state Exp;
branches;
next	;

1.4.8.1
date	96.12.18.09.51.58;	author hope;	state Exp;
branches;
next	;

1.4.9.1
date	97.05.12.10.45.39;	author hope;	state Exp;
branches
	1.4.9.1.1.1
	1.4.9.1.2.1
	1.4.9.1.3.1;
next	;

1.4.9.1.1.1
date	97.07.28.18.27.00;	author daveb;	state Exp;
branches
	1.4.9.1.1.1.1.1;
next	;

1.4.9.1.1.1.1.1
date	97.10.07.11.53.00;	author jkbrook;	state Exp;
branches;
next	;

1.4.9.1.2.1
date	97.09.08.17.20.07;	author daveb;	state Exp;
branches;
next	;

1.4.9.1.3.1
date	97.09.09.14.16.14;	author daveb;	state Exp;
branches;
next	;

1.4.10.1
date	97.09.10.19.33.50;	author brucem;	state Exp;
branches;
next	;

1.4.11.1
date	97.09.11.21.03.00;	author daveb;	state Exp;
branches;
next	;

1.4.12.1
date	97.10.31.13.45.52;	author nickb;	state Exp;
branches;
next	;

1.6.1.1
date	99.04.01.18.02.08;	author daveb;	state Exp;
branches;
next	;


desc
@new file
@


1.6
log
@[Bug #30108]
Implement DLL based ML code
@
text
@/*  ==== MODULE LOADER ====
 *
 *  Copyright (C) 1992 Harlequin Ltd.
 *
 *  Description
 *  -----------
 *  The loader reads a file in ML module format and executes the module
 *  setup procedure with the parameters specified therein.  This yields a
 *  module structure: the result of the compilation unit represented by the
 *  module.
 *
 *  The loader also supplies functions for the `loading' of compiler results
 *  already on the heap, for use by the interpreter.
 *
 *  Revision Log
 *  ------------
 *  $Log: src:loader.h,v $
 * Revision 1.5  1998/03/18  11:49:51  jont
 * [Bug #70026]
 * Allow profiling of stub_c functions, recording the time according
 * to the name of the runtime system functions
 *
 * Revision 1.4  1995/05/05  14:17:17  jont
 * Make load_module static, as it's only called internally.
 *
 * Revision 1.3  1995/02/20  14:41:31  matthew
 * Adding ml_observer function
 *
 * Revision 1.2  1994/06/09  14:41:20  nickh
 * new file
 *
 * Revision 1.1  1994/06/09  11:09:08  nickh
 * new file
 *
 *  Revision 1.22  1994/01/10  13:41:58  matthew
 *  > Added function internal_load_link for use by image builder and by the ml mo loader.
 *
 *  Revision 1.21  1993/12/22  11:38:04  jont
 *  Added delivery option which discards code vector names
 *
 *  Revision 1.20  1993/11/23  12:03:49  jont
 *  Changed type of load_module to allow extra parameter to indicate whether
 *  to check for inconsistent sets of mos
 *
 *  Revision 1.19  1993/08/26  16:04:07  daveb
 *  load_module sets the module name from the consistency information in the
 *  file.
 *
 *  Revision 1.18  1993/03/12  13:30:04  richard
 *  Removed fatal errors and replaced them with error codes.
 *
 *  Revision 1.17  1992/08/07  08:27:30  richard
 *  The loader keeps track of code vectors (again) but an observer
 *  function can be declared from any profiler.  This gives more
 *  flexibility for use by the memory auditer.
 *
 *  Revision 1.16  1992/07/29  14:22:55  richard
 *  The profiler, rather than the loader, maintains a list of code vectors.
 *
 *  Revision 1.15  1992/07/27  13:00:26  richard
 *  Added declare_code().
 *
 *  Revision 1.14  1992/07/15  17:24:27  richard
 *  Added load_wordset().
 *
 *  Revision 1.13  1992/07/14  08:16:39  richard
 *  Added load_code_vectors, and removed profile parameter from load_module().
 *
 *  Revision 1.12  1992/07/02  09:12:43  richard
 *  Returns ERROR to indicate error rather than IMPOSSIBLE.
 *
 *  Revision 1.11  1992/07/01  13:47:48  richard
 *  Changed module table types.  See modules.h.
 *
 *  Revision 1.10  1992/04/13  16:32:31  clive
 *  First version of the profiler
 *
 *  Revision 1.9  1992/03/20  14:42:14  richard
 *  Added new error: ELOADVERSION.
 *
 *  Revision 1.8  1992/03/17  17:24:55  richard
 *  Changed error behaviour and parameterised the module table.
 *
 *  Revision 1.7  1991/12/23  11:33:55  richard
 *  Added a missing #include.
 *
 *  Revision 1.6  91/12/17  16:49:08  nickh
 *  add in_ML flag.
 *  
 *  Revision 1.5  91/10/18  14:56:30  davidt
 *  Made loader_error now take an extra argument.
 *  
 *  Revision 1.4  91/10/17  16:10:47  davidt
 *  Put in loader_error macro. load_module now takes different arguments,
 *  partly to deal with the slightly different behaviour required
 *  when we load the last module.
 *  
 *  Revision 1.3  91/10/16  13:32:49  davidt
 *  I intend to change the loader so that it returns the pointer
 *  to the module and the main program updates the table of modules
 *  (instead of load_module side-effecting the table of modules).
 *  
 *  Revision 1.2  91/05/15  15:29:51  jont
 *  Revised interface for second version of load format
 *  
 *  Revision 1.1  91/05/14  11:08:54  jont
 *  Initial revision
 */


#ifndef loader_h
#define loader_h

#include <stdio.h>
#include <stdlib.h>

#include "mltypes.h"
#include "modules.h"



/*  === INITIALISE LOADER ===
 *
 *  This should be called once before any other function in this module.
 */

extern void load_init(void);



/*  == Loaded code vector list ==
 *
 *  The loader maintains a weak list of all code vectors it has loaded.
 *  (See global.h for functions which manipulate such lists.)
 *
 *  A profiler of some sort may need to observe the appearance of new code
 *  vectors in order to initialise profiling tables.  The function pointer
 *  loader_code_observer is called on each new code vector if not NULL.
 *
 *  On image the profiler slots of all code vectors are intialised to
 *  PROFILE_DISABLE.
 */

extern mlval loader_code;
extern void (*loader_code_observer)(mlval code);
extern void (*loader_code_trace_observer)(mlval code);

extern void loader_code_add(mlval code); /* Allow dll based stuff to call this */

/*  === LOAD AN ML MODULE ===
 *
 *  See header comment for description.  The paramters are the filename of
 *  the module file to read, a table of modules which might be used as
 *  external parameters to the module.  The function reads the contents of
 *  the module file and constructs the top-level function of the module on
 *  the heap.  The result is the closure for this function which, when
 *  applied to itself, yields the module result structure.
 *
 *  In the event of an error `errno' is set to one of the enum values below
 *  and ERROR is returned.
 *
 *  In the event of an ELOADEXTERNAL error, `load_external' is assigned the
 *  name of the module referenced.  This variable should not be changed
 *  otherwise.
 */

enum /* errno */
{
  ELOADREAD = 1,	/* An error occurred reading the file. */
  ELOADOPEN,		/* Unable to open the file specified. */
  ELOADALLOC,		/* Unable to allocate memory at some point. */
  ELOADVERSION,		/* The module version is incompatable with the loader. */
  ELOADFORMAT,		/* The module file is not in the proper format. */
  ELOADEXTERNAL		/* A module referenced wasn't in the table. */
};

extern mlval load_external;

extern mlval internal_load_link (const char *filename,
				 mlval *mod_name,
				 int verbose, 
				 int dont_check_cons,
				 int delivery);

/*  === LOAD A COMPILED WORD SET ===
 *
 *  Part of the result of a compilation is a wordset (see MachTypes) which
 *  represents a set of functions to be loaded into one code vector.  This
 *  function takes a wordset on the heap and `loads it' into a code vector.
 *
 *  The result is a list of pairs of positions and code pointers, or ERROR
 *  if an error occurs, in which case errno is set.
 */

enum /* errno */
{
  ELOADNEWER = 1,	/* code is in newer format than expected */
  ELOADOLDER,		/* code is in older format than expected */
  ELOADALIGN,		/* a code string is of unaligned length */
  ELOADEMPTY		/* the wordset was empty */
};

extern mlval load_wordset(mlval wordset);

/* Make ancillary stuff */
extern mlval make_ancill(word saves,
			 word spill,
			 word leaf,
			 int intercept, /* signed! */
			 word stack_param,
			 word code_no);

#endif
@


1.6.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a17 4
 * Revision 1.6  1998/07/23  11:08:01  jont
 * [Bug #30108]
 * Implement DLL based ML code
 *
@


1.5
log
@[Bug #70026]
Allow profiling of stub_c functions, recording the time according
to the name of the runtime system functions
@
text
@d18 5
d148 1
@


1.4
log
@Make load_module static, as it's only called internally.
@
text
@d18 3
d199 7
@


1.4.12.1
log
@branched from trunk for label MLWorks_MM_adapt
@
text
@a17 3
 * Revision 1.4  1995/05/05  14:17:17  jont
 * Make load_module static, as it's only called internally.
 *
@


1.4.11.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a17 3
 * Revision 1.4  1995/05/05  14:17:17  jont
 * Make load_module static, as it's only called internally.
 *
@


1.4.10.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a17 3
 * Revision 1.4  1995/05/05  14:17:17  jont
 * Make load_module static, as it's only called internally.
 *
@


1.4.9.1
log
@branched from 1.4
@
text
@a17 3
 * Revision 1.4  1995/05/05  14:17:17  jont
 * Make load_module static, as it's only called internally.
 *
@


1.4.9.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a17 3
 * Revision 1.4.9.1  1997/05/12  10:45:39  hope
 * branched from 1.4
 *
@


1.4.9.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a17 3
 * Revision 1.4.9.1  1997/05/12  10:45:39  hope
 * branched from 1.4
 *
@


1.4.9.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a17 3
 * Revision 1.4.9.1  1997/05/12  10:45:39  hope
 * branched from 1.4
 *
@


1.4.9.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a17 3
 * Revision 1.4.9.1.1.1  1997/07/28  18:27:00  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.4.8.1
log
@branched from 1.4
@
text
@a17 3
 * Revision 1.4  1995/05/05  14:17:17  jont
 * Make load_module static, as it's only called internally.
 *
@


1.4.7.1
log
@branched from 1.4
@
text
@a17 3
 * Revision 1.4  1995/05/05  14:17:17  jont
 * Make load_module static, as it's only called internally.
 *
@


1.4.7.1.1.1
log
@branched from 1.4.7.1
@
text
@a17 3
 * Revision 1.4.7.1  1996/12/17  17:57:17  hope
 * branched from 1.4
 *
@


1.4.6.1
log
@branched from 1.4
@
text
@a17 3
 * Revision 1.4  1995/05/05  14:17:17  jont
 * Make load_module static, as it's only called internally.
 *
@


1.4.5.1
log
@branched from 1.4
@
text
@a17 3
 * Revision 1.4  1995/05/05  14:17:17  jont
 * Make load_module static, as it's only called internally.
 *
@


1.4.4.1
log
@branched from 1.4
@
text
@a17 3
 * Revision 1.4  1995/05/05  14:17:17  jont
 * Make load_module static, as it's only called internally.
 *
@


1.4.4.1.1.1
log
@branched from 1.4.4.1
@
text
@a17 3
 * Revision 1.4.4.1  1996/11/14  13:01:08  hope
 * branched from 1.4
 *
@


1.4.3.1
log
@branched from 1.4
@
text
@a17 3
 * Revision 1.4  1995/05/05  14:17:17  jont
 * Make load_module static, as it's only called internally.
 *
@


1.4.2.1
log
@branched from 1.4
@
text
@a17 3
 * Revision 1.4  1995/05/05  14:17:17  jont
 * Make load_module static, as it's only called internally.
 *
@


1.4.1.1
log
@branched from 1.4
@
text
@a17 3
 * Revision 1.4  1995/05/05  14:17:17  jont
 * Make load_module static, as it's only called internally.
 *
@


1.3
log
@Adding ml_observer function
@
text
@d18 3
a168 5

/* mod_name is set by this function. */
extern mlval load_module(const char *filename, mlval *mod_name,
			 mlval modules, int verbose, int dont_check_cons, int delivery);

@


1.2
log
@new file
@
text
@d18 3
d135 1
a135 1

@


1.2.1.1
log
@branched from 1.2
@
text
@a17 3
 * Revision 1.2  1994/06/09  14:41:20  nickh
 * new file
 *
@


1.1
log
@new file
@
text
@d17 4
a20 1
 *  $Log: loader.h,v $
@
