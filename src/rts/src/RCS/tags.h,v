head	1.7;
access;
symbols
	MLW_daveb_inline_1_4_99:1.7.10
	MLWorks_21c0_1999_03_25:1.7
	MLWorks_20c1_1998_08_20:1.7
	MLWorks_20c0_1998_08_04:1.7
	MLWorks_20b2c2_1998_06_19:1.7
	MLWorks_20b2_Windows_1998_06_12:1.7
	MLWorks_20b1c1_1998_05_07:1.7
	MLWorks_20b0_1998_04_07:1.7
	MLWorks_20b0_1998_03_20:1.7
	MLWorks_20m2_1998_02_16:1.7
	MLWorks_MM_adapt:1.7.9
	MLWorks_20m1_1997_10_23:1.7
	MLWorks_11r1:1.7.6.1.1.1.1
	MLWorks_workspace_97:1.7.8
	MLWorks_dt_wizard:1.7.7
	MLWorks_11c0_1997_09_09:1.7.6.1.1.1
	MLWorks_10r3:1.7.6.1.3
	MLWorks_10r2_551:1.7.6.1.2
	MLWorks_11:1.7.6.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.7.6.1
	MLWorks_20m0_1997_06_20:1.7
	MLWorks_1_0_r2c2_1997_06_14:1.7.6.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.7.6.1
	MLWorks_1_0_r2c1_1997_05_12:1.7.6
	MLWorks_BugFix_1997_04_24:1.7
	MLWorks_1_0_r2_Win32_1997_04_11:1.7
	MLWorks_1_0_r2_Unix_1997_04_04:1.7
	MM_ML_release_korma_1997_04_01:1.7
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.7.4.1.1
	MLWorks_gui_1996_12_18:1.7.5
	MLWorks_1_0_Win32_1996_12_17:1.7.4
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.7.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.7.1.1
	JFHrts:1.7.3
	MLWorks_1_0_Irix_1996_11_28:1.7.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.7.2
	MLWorks_1_0_Unix_1996_11_14:1.7.1
	MLWorks_Open_Beta2_1996_10_11:1.6.3
	MLWorks_License_dev:1.6.2
	MLWorks_1_open_beta_1996_09_13:1.6.1
	MLWorks_Open_Beta_1996_08_22:1.6
	MLWorks_Beta_1996_07_02:1.6
	MLWorks_Beta_1996_06_07:1.6
	MLWorks_Beta_1996_06_06:1.6
	MLWorks_Beta_1996_06_05:1.6
	MLWorks_Beta_1996_06_03:1.6
	MLWorks_Beta_1996_05_31:1.6
	MLWorks_Beta_1996_05_30:1.6
	hope_poo:1.3.1
	ML_beta_release_12/08/94:1.3.1.1
	ML_beta_release_03/08/94:1.3;
locks; strict;
comment	@ * @;


1.7
date	96.11.07.17.30.29;	author stephenb;	state Exp;
branches
	1.7.1.1
	1.7.2.1
	1.7.3.1
	1.7.4.1
	1.7.5.1
	1.7.6.1
	1.7.7.1
	1.7.8.1
	1.7.9.1
	1.7.10.1;
next	1.6;

1.6
date	96.02.14.14.49.57;	author jont;	state Exp;
branches
	1.6.1.1
	1.6.2.1
	1.6.3.1;
next	1.5;

1.5
date	95.08.31.10.16.32;	author nickb;	state Exp;
branches;
next	1.4;

1.4
date	95.06.19.14.50.31;	author nickb;	state Exp;
branches;
next	1.3;

1.3
date	94.06.21.16.02.11;	author nickh;	state Exp;
branches
	1.3.1.1;
next	1.2;

1.2
date	94.06.09.14.32.53;	author nickh;	state Exp;
branches;
next	1.1;

1.1
date	94.06.09.10.57.59;	author nickh;	state Exp;
branches;
next	;

1.3.1.1
date	95.07.05.10.31.28;	author hope;	state Exp;
branches;
next	;

1.6.1.1
date	96.09.13.11.25.05;	author hope;	state Exp;
branches;
next	;

1.6.2.1
date	96.10.07.16.15.28;	author hope;	state Exp;
branches;
next	;

1.6.3.1
date	96.10.17.11.34.54;	author hope;	state Exp;
branches;
next	;

1.7.1.1
date	96.11.14.13.00.34;	author hope;	state Exp;
branches
	1.7.1.1.1.1;
next	;

1.7.1.1.1.1
date	96.11.28.15.10.36;	author hope;	state Exp;
branches;
next	;

1.7.2.1
date	96.11.22.18.18.24;	author hope;	state Exp;
branches;
next	;

1.7.3.1
date	96.12.17.10.05.06;	author hope;	state Exp;
branches;
next	;

1.7.4.1
date	96.12.17.17.56.42;	author hope;	state Exp;
branches
	1.7.4.1.1.1;
next	;

1.7.4.1.1.1
date	97.02.24.11.48.20;	author hope;	state Exp;
branches;
next	;

1.7.5.1
date	96.12.18.09.51.20;	author hope;	state Exp;
branches;
next	;

1.7.6.1
date	97.05.12.10.45.02;	author hope;	state Exp;
branches
	1.7.6.1.1.1
	1.7.6.1.2.1
	1.7.6.1.3.1;
next	;

1.7.6.1.1.1
date	97.07.28.18.28.04;	author daveb;	state Exp;
branches
	1.7.6.1.1.1.1.1;
next	;

1.7.6.1.1.1.1.1
date	97.10.07.11.53.59;	author jkbrook;	state Exp;
branches;
next	;

1.7.6.1.2.1
date	97.09.08.17.21.03;	author daveb;	state Exp;
branches;
next	;

1.7.6.1.3.1
date	97.09.09.14.17.09;	author daveb;	state Exp;
branches;
next	;

1.7.7.1
date	97.09.10.19.35.47;	author brucem;	state Exp;
branches;
next	;

1.7.8.1
date	97.09.11.21.04.15;	author daveb;	state Exp;
branches;
next	;

1.7.9.1
date	97.10.31.13.47.20;	author nickb;	state Exp;
branches;
next	;

1.7.10.1
date	99.04.01.18.03.08;	author daveb;	state Exp;
branches;
next	;


desc
@new file
@


1.7
log
@[Bug #1461]
Add a tag.
@
text
@/*  ==== ML OBJECT TAGS ====
 *
 *  Copyright (C) 1992 Harlequin Ltd.
 *
 *  Description
 *  -----------
 *  This header is used by both C and assembler files and defines the tags
 *  used for ML values and other garbage collector markers, as well as
 *  macros for manipulating them.
 *
 *  IMPORTANT
 *  ---------
 *  This file is scanned by tags.awk and __tags.awk to produce SML sources.
 *  Any #define which defines an upper case integer will be included.
 *
 *  $Id: src:tags.h,v 1.6 1996/02/14 14:49:57 jont Exp $
 */


#ifndef tags_h
#define tags_h


/*  === PRIMARY TAGS ===
 *
 *  Every mlval is tagged in the bottom 3 bits as below.  Odd tags are
 *  always pointers, even tags are always immediates.  Possible uses
 *  for PRIMARY6 and PRIMARY7 include weak pointers,  floating-point,
 *  foreign pointers. Note that PAIRPTR and POINTER are such that
 *  (mlval - 1) is always the address of the first data word of the
 *  object (pairs being unheaded).
 */

#define INTEGER0 0		/* 000 : even integer		*/
#define PAIRPTR  1		/* 001 : pair pointer		*/
#define HEADER   2		/* 010 : header word		*/
#define REFPTR   3		/* 011 : reference pointer	*/
#define INTEGER1 4		/* 100 : odd integer		*/
#define POINTER  5		/* 101 : any other pointer	*/
#define PRIMARY6 6		/* 110 : unused : not a pointer	*/
#define PRIMARY7 7		/* 111 : unused : a pointer	*/


/*  === SECONDARY TAGS ===
 *
 *  These all live in header words.  Ordinary objects have bit 5 unset.
 *  For ordinary objects: objects with `normal' equality have bit 4
 *  unset, and objects containing pointers have bit 3 unset.  For back
 *  pointers the length field is the distance back to the start of the
 *  object.
 */

#define RECORD		 2	/* 000010 pointers, simple equality	*/
#define STRING		10	/* 001010 no pointers, simple equality	*/
#define ARRAY		18	/* 010010 pointers, ref equality 	*/
#define BYTEARRAY	26	/* 011010 no pointers, ref equality	*/
#define BACKPTR		34	/* 100010 back pointer (see above)	*/
#define CODE		42	/* 101010 no pointers, ref equality	*/
#define HEADER50	50	/* 110010 unused			*/
#define WEAKARRAY       58      /* 111010 special pointers, ref equality*/


/*  === SPECIAL VALUES AND MARKERS ===
 *
 *  These values are used as markers.  An `impossible' value is one which
 *  can not be generated by ML.
 *
 *  MLERROR          impossible value used to flag errors
 *  EVACUATED        impossible value used to mark evacuated objects in the
 *                   garabge collector
 *  DEAD	     impossible value used to annul weak array entries
 *
 *  The values beginning with STACK are placed in the closure register in
 *  special stack frames so that they can be recognised by various parts of
 *  the runtime system.
 */

#define MLERROR			5
#define EVACUATED		1
#define DEAD			6    /* NOTE: not a pointer */
#define STACK_START		4    /* start of ML stack (see callml) */
#define STACK_DISTURB_EVENT	8    /* event poll in ml_disturbance */
#define STACK_EXTENSION		12   /* first frame on new stack block */
#define STACK_RAISE             16   /* raise frame */
#define STACK_EVENT		20   /* event check frame */
#define STACK_C_RAISE		24   /* raise from C */
#define STACK_C_CALL		28   /* call to C */
#define STACK_INTERCEPT		32   /* code vector interception frame */
#define STACK_SPACE_PROFILE	36   /* space profiling entry frame */


/*  === CODE VECTOR ANCILLARY ===
 *
 *  Each code vector has attached to it a record (usually a pair)
 *  containing tables/arrays of information for the code objects in that
 *  vector. This record is called the ancillary record. The macros
 *  beginning with ANC_ define the index within that record.
 *  See also values.h.
 *
 *  NAMES	the name strings
 *  PROFILES	profiling handle (see the profiler)
 *  INTERFNS	the functions to call on interception/replacement
 */

#define ANC_NAMES		0
#define ANC_PROFILES		1
#define ANC_INTERFNS		2

/*  === OTHER RUNTIME PARAMETERS ===
 *
 *  STACK_BUFFER is the number of `unused' bytes that must be maintained
 *  between an ML stack frame and the stack limit register %g6.
 *  CODE_OFFSET is the number to be added to an mlval code vector to address
 *  its first instruction.
 *  *_INTERCEPT_LENGTH is the length in bytes of the code in a code vector
 *  which is altered to implement interception.  (See intercept.h and
 *  interface.S.)
 */

#define STACK_BUFFER		2048
#define DEFAULT_STACK_SIZE	64
#define CODE_OFFSET		3
#define SPARC_INTERCEPT_LENGTH	12
#define MIPS_INTERCEPT_LENGTH   16
#define I386_INTERCEPT_LENGTH   3

#endif /* tags_h */
@


1.7.10.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@d16 1
a16 1
 *  $Id: src:tags.h,v 1.7 1996/11/07 17:30:29 stephenb Exp $
@


1.7.9.1
log
@branched from trunk for label MLWorks_MM_adapt
@
text
@d16 1
a16 1
 *  $Id: src:tags.h,v 1.7 1996/11/07 17:30:29 stephenb Exp $
@


1.7.8.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@d16 1
a16 1
 *  $Id: src:tags.h,v 1.7 1996/11/07 17:30:29 stephenb Exp $
@


1.7.7.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@d16 1
a16 1
 *  $Id: src:tags.h,v 1.7 1996/11/07 17:30:29 stephenb Exp $
@


1.7.6.1
log
@branched from 1.7
@
text
@d16 1
a16 1
 *  $Id: src:tags.h,v 1.7 1996/11/07 17:30:29 stephenb Exp $
@


1.7.6.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@d16 1
a16 1
 *  $Id: src:tags.h,v 1.7.6.1 1997/05/12 10:45:02 hope Exp $
@


1.7.6.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@d16 1
a16 1
 *  $Id: src:tags.h,v 1.7.6.1 1997/05/12 10:45:02 hope Exp $
@


1.7.6.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@d16 1
a16 1
 *  $Id: src:tags.h,v 1.7.6.1 1997/05/12 10:45:02 hope Exp $
@


1.7.6.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@d16 1
a16 1
 *  $Id: src:tags.h,v 1.7.6.1.1.1 1997/07/28 18:28:04 daveb Exp $
@


1.7.5.1
log
@branched from 1.7
@
text
@d16 1
a16 1
 *  $Id: src:tags.h,v 1.7 1996/11/07 17:30:29 stephenb Exp $
@


1.7.4.1
log
@branched from 1.7
@
text
@d16 1
a16 1
 *  $Id: src:tags.h,v 1.7 1996/11/07 17:30:29 stephenb Exp $
@


1.7.4.1.1.1
log
@branched from 1.7.4.1
@
text
@d16 1
a16 1
 *  $Id: src:tags.h,v 1.7.4.1 1996/12/17 17:56:42 hope Exp $
@


1.7.3.1
log
@branched from 1.7
@
text
@d16 1
a16 1
 *  $Id: src:tags.h,v 1.7 1996/11/07 17:30:29 stephenb Exp $
@


1.7.2.1
log
@branched from 1.7
@
text
@d16 1
a16 1
 *  $Id: src:tags.h,v 1.7 1996/11/07 17:30:29 stephenb Exp $
@


1.7.1.1
log
@branched from 1.7
@
text
@d16 1
a16 1
 *  $Id: src:tags.h,v 1.7 1996/11/07 17:30:29 stephenb Exp $
@


1.7.1.1.1.1
log
@branched from 1.7.1.1
@
text
@d16 1
a16 1
 *  $Id: src:tags.h,v 1.7.1.1 1996/11/14 13:00:34 hope Exp $
@


1.6
log
@Change ERROR to MLERROR as it clashes with VC++
@
text
@d16 1
a16 1
 *  $Id: src:tags.h,v 1.5 1995/08/31 10:16:32 nickb Exp $
d82 8
a89 12
#define STACK_START_INTERCEPT	44   /* start of ML stack (see callml_intercept) */
#define STACK_END		8    /* marks end of ML stack */
#define STACK_EXTENSION		12   /* link back to old stack area */
#define STACK_LEAF_RAISE	16   /* wrapper frame for leaf case raise */
#define STACK_RAISE             20   /* raise frame */
#define STACK_RESUME		24   /* resumable raise frame */
#define STACK_PROFILE		28   /* profiler code frames */
#define STACK_EVENT		32   /* event handler frames */
#define STACK_C_RAISE		36   /* raise from C */
#define STACK_C_CALL		40   /* call to C */
#define STACK_INTERCEPT		44   /* code vector interception frame */
#define STACK_SPACE_PROFILE	48   /* space profiling entry frame */
@


1.6.3.1
log
@branched from 1.6
@
text
@d16 1
a16 1
 *  $Id: src:tags.h,v 1.6 1996/02/14 14:49:57 jont Exp $
@


1.6.2.1
log
@branched from 1.6
@
text
@d16 1
a16 1
 *  $Id: src:tags.h,v 1.6 1996/02/14 14:49:57 jont Exp $
@


1.6.1.1
log
@branched from 1.6
@
text
@d16 1
a16 1
 *  $Id: src:tags.h,v 1.6 1996/02/14 14:49:57 jont Exp $
@


1.5
log
@Change INTERCEPT_LENGTH to allow platform-specific values.
@
text
@d16 1
a16 1
 *  $Id: src:tags.h,v 1.4 1995/06/19 14:50:31 nickb Exp $
d68 1
a68 1
 *  ERROR            impossible value used to flag errors
d78 1
a78 1
#define ERROR			5
@


1.4
log
@Add STACK_SPACE_PROFILE
@
text
@d16 1
a16 1
 *  $Id: src:tags.h,v 1.3 1994/06/21 16:02:11 nickh Exp $
d119 1
a119 1
 *  INTERCEPT_LENGTH is the length in words of the code in a code vector
d121 1
a121 1
 *  interface.m4s.)
d127 3
a129 2
#define INTERCEPT_LENGTH	3

@


1.3
log
@New ancillary structure and forced GC on image save.
@
text
@d16 1
a16 1
 *  $Id: src:tags.h,v 1.2 1994/06/09 14:32:53 nickh Exp $
d93 1
@


1.3.1.1
log
@branched from 1.3
@
text
@d16 1
a16 1
 *  $Id: src:tags.h,v 1.3 1994/06/21 16:02:11 nickh Exp $
@


1.2
log
@new file
@
text
@d16 1
a16 1
 *  $Id: src:tags.h,v 1.1 1994/06/09 10:57:59 nickh Exp $
d97 4
a100 2
 *  The macros beginning with ANC_ define the index within the ancillary
 *  (the array attached to a code vector) of various bits of information.
a102 1
 *  SPILLS	number of non-GC spills
a104 1
 *  INTERCEPTS	offset of the intercept/replace code fragment
a105 1
 *  LEAFS	whether a code vector is a leaf procedure
d108 3
a110 8
#define ANCILLARY_SIZE		6
#define ANC_SPILLS		0
#define ANC_NAMES		1
#define ANC_LEAFS		2
#define ANC_PROFILES		3
#define ANC_INTERCEPTS		4
#define ANC_INTERFNS		5

@


1.1
log
@new file
@
text
@d16 1
a16 1
 *  $Id: tags.h,v 1.16 1993/06/22 11:15:28 richard Exp $
@
