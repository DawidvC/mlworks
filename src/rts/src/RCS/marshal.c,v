head	1.3;
access;
symbols
	MLW_daveb_inline_1_4_99:1.3.13
	MLWorks_21c0_1999_03_25:1.3
	MLWorks_20c1_1998_08_20:1.3
	MLWorks_20c0_1998_08_04:1.3
	MLWorks_20b2c2_1998_06_19:1.3
	MLWorks_20b2_Windows_1998_06_12:1.3
	MLWorks_20b1c1_1998_05_07:1.3
	MLWorks_20b0_1998_04_07:1.3
	MLWorks_20b0_1998_03_20:1.3
	MLWorks_20m2_1998_02_16:1.3
	MLWorks_MM_adapt:1.3.12
	MLWorks_20m1_1997_10_23:1.3
	MLWorks_11r1:1.3.9.1.1.1.1
	MLWorks_workspace_97:1.3.11
	MLWorks_dt_wizard:1.3.10
	MLWorks_11c0_1997_09_09:1.3.9.1.1.1
	MLWorks_10r3:1.3.9.1.3
	MLWorks_10r2_551:1.3.9.1.2
	MLWorks_11:1.3.9.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.3.9.1
	MLWorks_20m0_1997_06_20:1.3
	MLWorks_1_0_r2c2_1997_06_14:1.3.9.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.3.9.1
	MLWorks_1_0_r2c1_1997_05_12:1.3.9
	MLWorks_BugFix_1997_04_24:1.3
	MLWorks_1_0_r2_Win32_1997_04_11:1.3
	MLWorks_1_0_r2_Unix_1997_04_04:1.3
	MM_ML_release_korma_1997_04_01:1.3
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.3.7.1.1
	MLWorks_gui_1996_12_18:1.3.8
	MLWorks_1_0_Win32_1996_12_17:1.3.7
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.3.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.3.4.1
	JFHrts:1.3.6
	MLWorks_1_0_Irix_1996_11_28:1.3.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.3.5
	MLWorks_1_0_Unix_1996_11_14:1.3.4
	MLWorks_Open_Beta2_1996_10_11:1.3.3
	MLWorks_License_dev:1.3.2
	MLWorks_1_open_beta_1996_09_13:1.3.1
	MLWorks_Open_Beta_1996_08_22:1.3
	MLWorks_Beta_1996_07_02:1.3
	MLWorks_Beta_1996_06_07:1.3
	MLWorks_Beta_1996_06_06:1.3
	MLWorks_Beta_1996_06_05:1.3
	MLWorks_Beta_1996_06_03:1.3
	MLWorks_Beta_1996_05_31:1.3
	MLWorks_Beta_1996_05_30:1.3
	hope_poo:1.2.1
	ML_beta_release_12/08/94:1.2.1.1
	ML_beta_release_03/08/94:1.2;
locks; strict;
comment	@ * @;


1.3
date	96.02.13.17.20.35;	author jont;	state Exp;
branches
	1.3.1.1
	1.3.2.1
	1.3.3.1
	1.3.4.1
	1.3.5.1
	1.3.6.1
	1.3.7.1
	1.3.8.1
	1.3.9.1
	1.3.10.1
	1.3.11.1
	1.3.12.1
	1.3.13.1;
next	1.2;

1.2
date	94.06.09.14.42.31;	author nickh;	state Exp;
branches
	1.2.1.1;
next	1.1;

1.1
date	94.06.09.11.10.27;	author nickh;	state Exp;
branches;
next	;

1.2.1.1
date	95.07.05.10.31.53;	author hope;	state Exp;
branches;
next	;

1.3.1.1
date	96.09.13.11.24.58;	author hope;	state Exp;
branches;
next	;

1.3.2.1
date	96.10.07.16.15.19;	author hope;	state Exp;
branches;
next	;

1.3.3.1
date	96.10.17.11.34.46;	author hope;	state Exp;
branches;
next	;

1.3.4.1
date	96.11.14.13.00.27;	author hope;	state Exp;
branches
	1.3.4.1.1.1;
next	;

1.3.4.1.1.1
date	96.11.28.15.10.29;	author hope;	state Exp;
branches;
next	;

1.3.5.1
date	96.11.22.18.18.17;	author hope;	state Exp;
branches;
next	;

1.3.6.1
date	96.12.17.10.04.59;	author hope;	state Exp;
branches;
next	;

1.3.7.1
date	96.12.17.17.56.35;	author hope;	state Exp;
branches
	1.3.7.1.1.1;
next	;

1.3.7.1.1.1
date	97.02.24.11.48.10;	author hope;	state Exp;
branches;
next	;

1.3.8.1
date	96.12.18.09.51.13;	author hope;	state Exp;
branches;
next	;

1.3.9.1
date	97.05.12.10.44.53;	author hope;	state Exp;
branches
	1.3.9.1.1.1
	1.3.9.1.2.1
	1.3.9.1.3.1;
next	;

1.3.9.1.1.1
date	97.07.28.18.28.34;	author daveb;	state Exp;
branches
	1.3.9.1.1.1.1.1;
next	;

1.3.9.1.1.1.1.1
date	97.10.07.11.54.29;	author jkbrook;	state Exp;
branches;
next	;

1.3.9.1.2.1
date	97.09.08.17.21.33;	author daveb;	state Exp;
branches;
next	;

1.3.9.1.3.1
date	97.09.09.14.17.38;	author daveb;	state Exp;
branches;
next	;

1.3.10.1
date	97.09.10.19.36.43;	author brucem;	state Exp;
branches;
next	;

1.3.11.1
date	97.09.11.21.04.53;	author daveb;	state Exp;
branches;
next	;

1.3.12.1
date	97.10.31.13.47.57;	author nickb;	state Exp;
branches;
next	;

1.3.13.1
date	99.04.01.18.03.40;	author daveb;	state Exp;
branches;
next	;


desc
@new file
@


1.3
log
@Add some type casts to allow compilation without warnings under VC++
@
text
@/*  ==== MARSHALLING ====
 *
 *  Copyright (C) 1992 Harlequin Ltd
 *
 *  Implementation
 *  --------------
 *
 *  Revision Log
 *  ------------
 *  $Log: src:marshal.c,v $
 * Revision 1.2  1994/06/09  14:42:31  nickh
 * new file
 *
 * Revision 1.1  1994/06/09  11:10:27  nickh
 * new file
 *
 *  Revision 1.2  1993/06/02  13:05:50  richard
 *  Added extra parentheses around conditionals as suggested by GCC 2.
 *
 *  Revision 1.1  1992/10/29  12:59:35  richard
 *  Initial revision
 *
 */

#include <stdarg.h>
#include <stddef.h>
#include <errno.h>

#include "marshal.h"


static char *marshal_long(char *out, unsigned long int i)
{
  while(i & ~0x7Fu)
  {
    *out++ = (char)((i & 0x7F) | 0x80);
    i >>= 7;
  }

  *out++ = (char)i;

  return(out);
}

static char *unmarshal_long(char *in, unsigned long int *ip)
{
  char c;
  unsigned long int i = 0;
  int shift = 0;

  do
  {
    c = *in++;
    i |= (c & 0x7F) << shift;
    shift += 7;
  }
  while(c & ~0x7F);

  *ip = i;
  return(in);
}

char *marshal(char *out, const char *desc, ...)
{
  va_list arg;
  char code;

  va_start(arg, desc);

  while((code = *desc++))
    switch(code)
    {
      /* Characters are encoded as themselves. */

      case 'c':
      *out++ = va_arg(arg, char);
      break;

      /* Integers are encoded in 7-bit chunks with the eighth bit indicating */
      /* that there is another chunk to come. */

      case 's':
      out = marshal_long(out, (unsigned long int)va_arg(arg, unsigned short int));
      break;

      case 'i':
      out = marshal_long(out, (unsigned long int)va_arg(arg, unsigned int));
      break;

      case 'l':
      out = marshal_long(out, (unsigned long int)va_arg(arg, unsigned long int));
      break;

      default:
      errno = EMARSHALDESC;
      return(NULL);
    }

  va_end(arg);

  return(out);
}

char *unmarshal(char *in, const char *desc, ...)
{
  va_list arg;
  char code;

  va_start(arg, desc);

  while((code = *desc++))
    switch(code)
    {
      /* Characters are encoded as themselves. */

      case 'c':
      *va_arg(arg, char *) = *in++;
      break;

      /* Integers are encoded in 7-bit chunks with the eighth bit indicating */
      /* that there is another chunk to come. */

      case 's':
      {
	unsigned long int l;
	in = unmarshal_long(in, &l);
	*va_arg(arg, unsigned short int *) = (unsigned short int)l;
      }
      break;

      case 'i':
      {
	unsigned long int l;
	in = unmarshal_long(in, &l);
	*va_arg(arg, unsigned int *) = (unsigned int)l;
      }
      break;

      case 'l':
      {
	unsigned long int l;
	in = unmarshal_long(in, &l);
	*va_arg(arg, unsigned long int *) = l;
      }
      break;

      default:
      errno = EMARSHALDESC;
      return(NULL);
    }

  va_end(arg);

  return(in);
}

@


1.3.13.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a10 3
 * Revision 1.3  1996/02/13  17:20:35  jont
 * Add some type casts to allow compilation without warnings under VC++
 *
@


1.3.12.1
log
@branched from trunk for label MLWorks_MM_adapt
@
text
@a10 3
 * Revision 1.3  1996/02/13  17:20:35  jont
 * Add some type casts to allow compilation without warnings under VC++
 *
@


1.3.11.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a10 3
 * Revision 1.3  1996/02/13  17:20:35  jont
 * Add some type casts to allow compilation without warnings under VC++
 *
@


1.3.10.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a10 3
 * Revision 1.3  1996/02/13  17:20:35  jont
 * Add some type casts to allow compilation without warnings under VC++
 *
@


1.3.9.1
log
@branched from 1.3
@
text
@a10 3
 * Revision 1.3  1996/02/13  17:20:35  jont
 * Add some type casts to allow compilation without warnings under VC++
 *
@


1.3.9.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a10 3
 * Revision 1.3.9.1  1997/05/12  10:44:53  hope
 * branched from 1.3
 *
@


1.3.9.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a10 3
 * Revision 1.3.9.1  1997/05/12  10:44:53  hope
 * branched from 1.3
 *
@


1.3.9.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a10 3
 * Revision 1.3.9.1  1997/05/12  10:44:53  hope
 * branched from 1.3
 *
@


1.3.9.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a10 3
 * Revision 1.3.9.1.1.1  1997/07/28  18:28:34  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.3.8.1
log
@branched from 1.3
@
text
@a10 3
 * Revision 1.3  1996/02/13  17:20:35  jont
 * Add some type casts to allow compilation without warnings under VC++
 *
@


1.3.7.1
log
@branched from 1.3
@
text
@a10 3
 * Revision 1.3  1996/02/13  17:20:35  jont
 * Add some type casts to allow compilation without warnings under VC++
 *
@


1.3.7.1.1.1
log
@branched from 1.3.7.1
@
text
@a10 3
 * Revision 1.3.7.1  1996/12/17  17:56:35  hope
 * branched from 1.3
 *
@


1.3.6.1
log
@branched from 1.3
@
text
@a10 3
 * Revision 1.3  1996/02/13  17:20:35  jont
 * Add some type casts to allow compilation without warnings under VC++
 *
@


1.3.5.1
log
@branched from 1.3
@
text
@a10 3
 * Revision 1.3  1996/02/13  17:20:35  jont
 * Add some type casts to allow compilation without warnings under VC++
 *
@


1.3.4.1
log
@branched from 1.3
@
text
@a10 3
 * Revision 1.3  1996/02/13  17:20:35  jont
 * Add some type casts to allow compilation without warnings under VC++
 *
@


1.3.4.1.1.1
log
@branched from 1.3.4.1
@
text
@a10 3
 * Revision 1.3.4.1  1996/11/14  13:00:27  hope
 * branched from 1.3
 *
@


1.3.3.1
log
@branched from 1.3
@
text
@a10 3
 * Revision 1.3  1996/02/13  17:20:35  jont
 * Add some type casts to allow compilation without warnings under VC++
 *
@


1.3.2.1
log
@branched from 1.3
@
text
@a10 3
 * Revision 1.3  1996/02/13  17:20:35  jont
 * Add some type casts to allow compilation without warnings under VC++
 *
@


1.3.1.1
log
@branched from 1.3
@
text
@a10 3
 * Revision 1.3  1996/02/13  17:20:35  jont
 * Add some type casts to allow compilation without warnings under VC++
 *
@


1.2
log
@new file
@
text
@d11 3
d36 1
a36 1
    *out++ = (i & 0x7F) | 0x80;
d40 1
a40 1
  *out++ = i;
@


1.2.1.1
log
@branched from 1.2
@
text
@a10 3
 * Revision 1.2  1994/06/09  14:42:31  nickh
 * new file
 *
@


1.1
log
@new file
@
text
@d10 4
a13 1
 *  $Log: marshal.c,v $
@
