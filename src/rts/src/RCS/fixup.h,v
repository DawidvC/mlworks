head	1.9;
access;
symbols
	MLW_daveb_inline_1_4_99:1.9.1
	MLWorks_21c0_1999_03_25:1.9
	MLWorks_20c1_1998_08_20:1.9
	MLWorks_20c0_1998_08_04:1.9
	MLWorks_20b2c2_1998_06_19:1.9
	MLWorks_20b2_Windows_1998_06_12:1.9
	MLWorks_20b1c1_1998_05_07:1.9
	MLWorks_20b0_1998_04_07:1.9
	MLWorks_20b0_1998_03_20:1.9
	MLWorks_20m2_1998_02_16:1.8
	MLWorks_MM_adapt:1.8.4
	MLWorks_20m1_1997_10_23:1.8
	MLWorks_11r1:1.8.1.1.1.1.1
	MLWorks_workspace_97:1.8.3
	MLWorks_dt_wizard:1.8.2
	MLWorks_11c0_1997_09_09:1.8.1.1.1.1
	MLWorks_10r3:1.8.1.1.3
	MLWorks_10r2_551:1.8.1.1.2
	MLWorks_11:1.8.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.8.1.1
	MLWorks_20m0_1997_06_20:1.8
	MLWorks_1_0_r2c2_1997_06_14:1.8.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.8.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.8.1
	MLWorks_BugFix_1997_04_24:1.8
	MLWorks_1_0_r2_Win32_1997_04_11:1.8
	MLWorks_1_0_r2_Unix_1997_04_04:1.8
	MM_ML_release_korma_1997_04_01:1.8
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.7.7.1.1
	MLWorks_gui_1996_12_18:1.7.8
	MLWorks_1_0_Win32_1996_12_17:1.7.7
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.7.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.7.4.1
	JFHrts:1.7.6
	MLWorks_1_0_Irix_1996_11_28:1.7.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.7.5
	MLWorks_1_0_Unix_1996_11_14:1.7.4
	MLWorks_Open_Beta2_1996_10_11:1.7.3
	MLWorks_License_dev:1.7.2
	MLWorks_1_open_beta_1996_09_13:1.7.1
	MLWorks_Open_Beta_1996_08_22:1.7
	MLWorks_Beta_1996_07_02:1.6
	MLWorks_Beta_1996_06_07:1.6
	MLWorks_Beta_1996_06_06:1.6
	MLWorks_Beta_1996_06_05:1.6
	MLWorks_Beta_1996_06_03:1.6
	MLWorks_Beta_1996_05_31:1.6
	MLWorks_Beta_1996_05_30:1.6
	hope_poo:1.3.1
	ML_beta_release_12/08/94:1.3.1.1
	ML_beta_release_03/08/94:1.3;
locks; strict;
comment	@ * @;


1.9
date	98.03.17.16.05.43;	author jont;	state Exp;
branches
	1.9.1.1;
next	1.8;

1.8
date	96.12.19.09.33.05;	author stephenb;	state Exp;
branches
	1.8.1.1
	1.8.2.1
	1.8.3.1
	1.8.4.1;
next	1.7;

1.7
date	96.08.19.14.43.08;	author nickb;	state Exp;
branches
	1.7.1.1
	1.7.2.1
	1.7.3.1
	1.7.4.1
	1.7.5.1
	1.7.6.1
	1.7.7.1
	1.7.8.1;
next	1.6;

1.6
date	96.02.14.17.24.09;	author jont;	state Exp;
branches;
next	1.5;

1.5
date	95.07.26.13.58.16;	author nickb;	state Exp;
branches;
next	1.4;

1.4
date	95.03.28.13.22.39;	author nickb;	state Exp;
branches;
next	1.3;

1.3
date	94.07.01.10.43.51;	author nickh;	state Exp;
branches
	1.3.1.1;
next	1.2;

1.2
date	94.06.09.14.44.16;	author nickh;	state Exp;
branches;
next	1.1;

1.1
date	94.06.09.11.12.56;	author nickh;	state Exp;
branches;
next	;

1.3.1.1
date	95.07.05.10.30.19;	author hope;	state Exp;
branches;
next	;

1.7.1.1
date	96.09.13.11.24.15;	author hope;	state Exp;
branches;
next	;

1.7.2.1
date	96.10.07.16.14.32;	author hope;	state Exp;
branches;
next	;

1.7.3.1
date	96.10.17.11.33.59;	author hope;	state Exp;
branches;
next	;

1.7.4.1
date	96.11.14.12.59.39;	author hope;	state Exp;
branches
	1.7.4.1.1.1;
next	;

1.7.4.1.1.1
date	96.11.28.15.09.42;	author hope;	state Exp;
branches;
next	;

1.7.5.1
date	96.11.22.18.17.27;	author hope;	state Exp;
branches;
next	;

1.7.6.1
date	96.12.17.10.04.10;	author hope;	state Exp;
branches;
next	;

1.7.7.1
date	96.12.17.17.55.46;	author hope;	state Exp;
branches
	1.7.7.1.1.1;
next	;

1.7.7.1.1.1
date	97.02.24.11.47.19;	author hope;	state Exp;
branches;
next	;

1.7.8.1
date	96.12.18.09.50.22;	author hope;	state Exp;
branches;
next	;

1.8.1.1
date	97.05.12.10.44.03;	author hope;	state Exp;
branches
	1.8.1.1.1.1
	1.8.1.1.2.1
	1.8.1.1.3.1;
next	;

1.8.1.1.1.1
date	97.07.28.18.29.01;	author daveb;	state Exp;
branches
	1.8.1.1.1.1.1.1;
next	;

1.8.1.1.1.1.1.1
date	97.10.07.11.54.51;	author jkbrook;	state Exp;
branches;
next	;

1.8.1.1.2.1
date	97.09.08.17.21.58;	author daveb;	state Exp;
branches;
next	;

1.8.1.1.3.1
date	97.09.09.14.18.01;	author daveb;	state Exp;
branches;
next	;

1.8.2.1
date	97.09.10.19.37.20;	author brucem;	state Exp;
branches;
next	;

1.8.3.1
date	97.09.11.21.05.18;	author daveb;	state Exp;
branches;
next	;

1.8.4.1
date	97.10.31.13.48.21;	author nickb;	state Exp;
branches;
next	;

1.9.1.1
date	99.04.01.18.04.03;	author daveb;	state Exp;
branches;
next	;


desc
@new file
@


1.9
log
@[Bug #30360]
Modify fix_reg not to trap when finding header values.
@
text
@/*  === GARBAGE COLLECTION FIXUP ===
 *
 *  Copyright (C) 1994 Harlequin Ltd
 *
 *  Description
 *  -----------
 * The innermost code of the garbage collector. It has to be separated
 * out from gc.c because it is also called from stacks.c:stack_crawl,
 * which is machine dependent.
 *
 *  Revision Log
 *  ------------
 *  $Log: src:fixup.h,v $
 * Revision 1.8  1996/12/19  09:33:05  stephenb
 * [Bug #1790]
 * fix_reg: wrap the macro body in a do { ... } while (0) to avoid
 * any incorrect binding problems.
 *
 * Revision 1.7  1996/08/19  14:43:08  nickb
 * Change error behaviour.
 *
 * Revision 1.6  1996/02/14  17:24:09  jont
 * ISPTR becomes MLVALISPTR
 *
 * Revision 1.5  1995/07/26  13:58:16  nickb
 * Add measurements.
 *
 * Revision 1.4  1995/03/28  13:22:39  nickb
 * Thread system changes.
 *
 * Revision 1.3  1994/07/01  10:43:51  nickh
 * Remove SPARC-specific debugger trap generator.
 *
 * Revision 1.2  1994/06/09  14:44:16  nickh
 * new file
 *
 * Revision 1.1  1994/06/09  11:12:56  nickh
 * new file
 *
 *
 */

#ifndef fixup_h
#define fixup_h

#include "values.h"
#include "tags.h"
#include "mltypes.h"

/*  == Fix: Collect one object ==
 *
 *  The macro fix() does the job of moving an ML object and marking the
 *  original as evacuated.  It takes a pointer to an ML value and, if it
 *  points to an object in a space of type FROM, copies the object to the
 *  `to' parameter and overwrites the original with a forwarding pointer.
 *  The original ML value is then updated to point to the new object and the
 *  `to' parameter is updated to point after the copied object.
 *
 *  Notes:
 *    1. If the macro MACH_FIXUP is defined (say, by the Makefile) then a
 *       machine specific version of fixup(), called mach_fixup() will be
 *       used.
 *    2. fixup() is a leaf procedure.  Error are detected by a macro which
 *       wraps up calls.  This may or may not help with register allocation.
 *
 */

extern void fixup_bad_header(mlval *what, mlval val, mlval header, mlval *obj);
extern void fixup_bad_primary(mlval *what, mlval val); 

#ifdef MACH_FIXUP

#include "mach_fixup.h"

#define fix(to, what)				\
do { mlval val = *(what);			\
  if (MLVALISPTR(val))				\
    to = mach_fixup(to, what, val);		\
} while(0)

#else /* use the C version */

extern mlval *fixup (mlval *to, mlval *what);

#ifdef MEASURE_FIXUP
extern void report_fixup(void);
#endif

#define fix(to, what) (to = fixup(to, what))

#endif /* MACH_FIXUP */

/*  == Scanning: Fixing a block of heap ==
 *
 *  Scanning is the act of running through a chunk of memory fixing up all
 *  the ML objects it contains.  Basically, every word is treated as a valid
 *  ML object and fixed, except for STRINGs, BYTEARRAYs, CODE vectors, and
 *  WEAKARRAYs which are skipped.  WEAKARRAYS are fixed specially.
 *
 *  Notes:
 *    1.  The `end' parameter is evaluated every time round the loop.  This
 *        allows it to be the same as the `to' parameter when fixing the to
 *        space.  (See gc.c:collect_gen())
 *    2.  For extensive notes on the cost of scan, and on possible
 *        improvements to the scan() code, see the comments in fixup.S
 */

#define scan(start, end, to)						      \
{									      \
  register mlval *f = (start);						      \
									      \
  while(f < (end))							      \
  {									      \
    mlval value = *f;							      \
									      \
    if(FIXABLE(value))							      \
    {									      \
      fix(to, f);							      \
      ++f;								      \
    }									      \
    else								      \
      switch(SECONDARY(value))						      \
      {									      \
	case WEAKARRAY:                                                       \
	f += LENGTH(value)+3;						      \
	break;								      \
									      \
	case CODE:							      \
	fix(to, f+1);							      \
	f += LENGTH(value)+1;						      \
	break;								      \
									      \
	case BYTEARRAY:							      \
	case STRING:							      \
	f = (mlval *)double_align((byte *)f + LENGTH(value) + sizeof(mlval)); \
      }									      \
  }									      \
}

/* When fixing values in a stack frame, we must not use scan(), as
 * it will do special things with header-valued register slots. So we
 * call fix_reg on each slot. */

#ifdef DEBUG
#define fix_reg(to, what)						\
do {									\
  mlval primary = PRIMARY(*(what));					\
									\
  if(primary == HEADER)							\
  {									\
    message("fix_reg: found header 0x%X at 0x%X.  Ignoring.",		\
            *(what), (what));						\
	      backtrace(GC_SP(CURRENT_THREAD),				\
			CURRENT_THREAD, max_backtrace_depth);		\
  }									\
									\
  fix(to, what);							\
} while (0)
#else /* DEBUG */
#define fix_reg fix
#endif /* DEBUG */

#endif /* fixup_h */
@


1.9.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a13 4
 * Revision 1.9  1998/03/17  16:05:43  jont
 * [Bug #30360]
 * Modify fix_reg not to trap when finding header values.
 *
@


1.8
log
@[Bug #1790]
fix_reg: wrap the macro body in a do { ... } while (0) to avoid
any incorrect binding problems.
@
text
@d14 5
d151 1
a151 1
    message("fix_reg: found header 0x%X at 0x%X.  Trapping.",		\
a154 1
    generate_debugger_trap();						\
@


1.8.4.1
log
@branched from trunk for label MLWorks_MM_adapt
@
text
@a13 5
 * Revision 1.8  1996/12/19  09:33:05  stephenb
 * [Bug #1790]
 * fix_reg: wrap the macro body in a do { ... } while (0) to avoid
 * any incorrect binding problems.
 *
@


1.8.3.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a13 5
 * Revision 1.8  1996/12/19  09:33:05  stephenb
 * [Bug #1790]
 * fix_reg: wrap the macro body in a do { ... } while (0) to avoid
 * any incorrect binding problems.
 *
@


1.8.2.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a13 5
 * Revision 1.8  1996/12/19  09:33:05  stephenb
 * [Bug #1790]
 * fix_reg: wrap the macro body in a do { ... } while (0) to avoid
 * any incorrect binding problems.
 *
@


1.8.1.1
log
@branched from 1.8
@
text
@a13 5
 * Revision 1.8  1996/12/19  09:33:05  stephenb
 * [Bug #1790]
 * fix_reg: wrap the macro body in a do { ... } while (0) to avoid
 * any incorrect binding problems.
 *
@


1.8.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a13 3
 * Revision 1.8.1.1  1997/05/12  10:44:03  hope
 * branched from 1.8
 *
@


1.8.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a13 3
 * Revision 1.8.1.1  1997/05/12  10:44:03  hope
 * branched from 1.8
 *
@


1.8.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a13 3
 * Revision 1.8.1.1  1997/05/12  10:44:03  hope
 * branched from 1.8
 *
@


1.8.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a13 3
 * Revision 1.8.1.1.1.1  1997/07/28  18:29:01  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.7
log
@Change error behaviour.
@
text
@d14 3
d141 1
a141 1
{									\
d154 1
a154 1
}
@


1.7.8.1
log
@branched from 1.7
@
text
@a13 3
 * Revision 1.7  1996/08/19  14:43:08  nickb
 * Change error behaviour.
 *
@


1.7.7.1
log
@branched from 1.7
@
text
@a13 3
 * Revision 1.7  1996/08/19  14:43:08  nickb
 * Change error behaviour.
 *
@


1.7.7.1.1.1
log
@branched from 1.7.7.1
@
text
@a13 3
 * Revision 1.7.7.1  1996/12/17  17:55:46  hope
 * branched from 1.7
 *
@


1.7.6.1
log
@branched from 1.7
@
text
@a13 3
 * Revision 1.7  1996/08/19  14:43:08  nickb
 * Change error behaviour.
 *
@


1.7.5.1
log
@branched from 1.7
@
text
@a13 3
 * Revision 1.7  1996/08/19  14:43:08  nickb
 * Change error behaviour.
 *
@


1.7.4.1
log
@branched from 1.7
@
text
@a13 3
 * Revision 1.7  1996/08/19  14:43:08  nickb
 * Change error behaviour.
 *
@


1.7.4.1.1.1
log
@branched from 1.7.4.1
@
text
@a13 3
 * Revision 1.7.4.1  1996/11/14  12:59:39  hope
 * branched from 1.7
 *
@


1.7.3.1
log
@branched from 1.7
@
text
@a13 3
 * Revision 1.7  1996/08/19  14:43:08  nickb
 * Change error behaviour.
 *
@


1.7.2.1
log
@branched from 1.7
@
text
@a13 3
 * Revision 1.7  1996/08/19  14:43:08  nickb
 * Change error behaviour.
 *
@


1.7.1.1
log
@branched from 1.7
@
text
@a13 3
 * Revision 1.7  1996/08/19  14:43:08  nickb
 * Change error behaviour.
 *
@


1.6
log
@ISPTR becomes MLVALISPTR
@
text
@d14 3
d60 3
d67 2
a68 2
#define fix(to, what) \
{ mlval val = *(what);	                        \
d71 1
a71 1
}
a74 1
extern const char *gc_error_format;
d81 1
a81 5
#define fix(to, what) \
{ 						\
  if(((to)=fixup(to, what)) == NULL) 		\
    error(gc_error_format, what, *what);	\
}
@


1.5
log
@Add measurements.
@
text
@d14 3
d63 1
a63 1
  if (ISPTR(val))				\
@


1.4
log
@Thread system changes.
@
text
@d14 3
d68 4
@


1.3
log
@Remove SPARC-specific debugger trap generator.
@
text
@d14 3
d134 2
a135 1
	      backtrace(stderr, GC_SP, max_backtrace_depth);		\
@


1.3.1.1
log
@branched from 1.3
@
text
@a13 3
 * Revision 1.3  1994/07/01  10:43:51  nickh
 * Remove SPARC-specific debugger trap generator.
 *
@


1.2
log
@new file
@
text
@d14 3
d132 1
a132 1
    __asm__("ta 1");							\
@


1.1
log
@new file
@
text
@d13 4
a16 1
 *  $Log:$
@
