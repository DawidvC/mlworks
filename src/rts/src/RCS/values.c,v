head	1.7;
access;
symbols
	MLW_daveb_inline_1_4_99:1.7.1
	MLWorks_21c0_1999_03_25:1.7
	MLWorks_20c1_1998_08_20:1.7
	MLWorks_20c0_1998_08_04:1.7
	MLWorks_20b2c2_1998_06_19:1.7
	MLWorks_20b2_Windows_1998_06_12:1.7
	MLWorks_20b1c1_1998_05_07:1.7
	MLWorks_20b0_1998_04_07:1.7
	MLWorks_20b0_1998_03_20:1.7
	MLWorks_20m2_1998_02_16:1.6
	MLWorks_MM_adapt:1.6.12
	MLWorks_20m1_1997_10_23:1.6
	MLWorks_11r1:1.6.9.1.1.1.1
	MLWorks_workspace_97:1.6.11
	MLWorks_dt_wizard:1.6.10
	MLWorks_11c0_1997_09_09:1.6.9.1.1.1
	MLWorks_10r3:1.6.9.1.3
	MLWorks_10r2_551:1.6.9.1.2
	MLWorks_11:1.6.9.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.6.9.1
	MLWorks_20m0_1997_06_20:1.6
	MLWorks_1_0_r2c2_1997_06_14:1.6.9.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.6.9.1
	MLWorks_1_0_r2c1_1997_05_12:1.6.9
	MLWorks_BugFix_1997_04_24:1.6
	MLWorks_1_0_r2_Win32_1997_04_11:1.6
	MLWorks_1_0_r2_Unix_1997_04_04:1.6
	MM_ML_release_korma_1997_04_01:1.6
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.6.7.1.1
	MLWorks_gui_1996_12_18:1.6.8
	MLWorks_1_0_Win32_1996_12_17:1.6.7
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.6.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.6.4.1
	JFHrts:1.6.6
	MLWorks_1_0_Irix_1996_11_28:1.6.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.6.5
	MLWorks_1_0_Unix_1996_11_14:1.6.4
	MLWorks_Open_Beta2_1996_10_11:1.6.3
	MLWorks_License_dev:1.6.2
	MLWorks_1_open_beta_1996_09_13:1.6.1
	MLWorks_Open_Beta_1996_08_22:1.5
	MLWorks_Beta_1996_07_02:1.4
	MLWorks_Beta_1996_06_07:1.4
	MLWorks_Beta_1996_06_06:1.4
	MLWorks_Beta_1996_06_05:1.4
	MLWorks_Beta_1996_06_03:1.4
	MLWorks_Beta_1996_05_31:1.4
	MLWorks_Beta_1996_05_30:1.4
	hope_poo:1.2.1
	ML_beta_release_12/08/94:1.2.1.1
	ML_beta_release_03/08/94:1.2;
locks; strict;
comment	@ * @;


1.7
date	98.02.23.18.43.36;	author jont;	state Exp;
branches
	1.7.1.1;
next	1.6;

1.6
date	96.08.27.13.41.14;	author stephenb;	state Exp;
branches
	1.6.1.1
	1.6.2.1
	1.6.3.1
	1.6.4.1
	1.6.5.1
	1.6.6.1
	1.6.7.1
	1.6.8.1
	1.6.9.1
	1.6.10.1
	1.6.11.1
	1.6.12.1;
next	1.5;

1.5
date	96.07.10.09.38.46;	author stephenb;	state Exp;
branches;
next	1.4;

1.4
date	96.05.10.10.59.27;	author stephenb;	state Exp;
branches;
next	1.3;

1.3
date	96.05.07.09.10.44;	author stephenb;	state Exp;
branches;
next	1.2;

1.2
date	94.06.09.14.48.31;	author nickh;	state Exp;
branches
	1.2.1.1;
next	1.1;

1.1
date	94.06.09.11.21.00;	author nickh;	state Exp;
branches;
next	;

1.2.1.1
date	95.07.05.10.29.46;	author hope;	state Exp;
branches;
next	;

1.6.1.1
date	96.09.13.11.25.33;	author hope;	state Exp;
branches;
next	;

1.6.2.1
date	96.10.07.16.15.58;	author hope;	state Exp;
branches;
next	;

1.6.3.1
date	96.10.17.11.35.24;	author hope;	state Exp;
branches;
next	;

1.6.4.1
date	96.11.14.13.01.02;	author hope;	state Exp;
branches
	1.6.4.1.1.1;
next	;

1.6.4.1.1.1
date	96.11.28.15.11.05;	author hope;	state Exp;
branches;
next	;

1.6.5.1
date	96.11.22.18.18.53;	author hope;	state Exp;
branches;
next	;

1.6.6.1
date	96.12.17.10.05.36;	author hope;	state Exp;
branches;
next	;

1.6.7.1
date	96.12.17.17.57.10;	author hope;	state Exp;
branches
	1.6.7.1.1.1;
next	;

1.6.7.1.1.1
date	97.02.24.11.48.52;	author hope;	state Exp;
branches;
next	;

1.6.8.1
date	96.12.18.09.51.50;	author hope;	state Exp;
branches;
next	;

1.6.9.1
date	97.05.12.10.45.32;	author hope;	state Exp;
branches
	1.6.9.1.1.1
	1.6.9.1.2.1
	1.6.9.1.3.1;
next	;

1.6.9.1.1.1
date	97.07.28.18.26.53;	author daveb;	state Exp;
branches
	1.6.9.1.1.1.1.1;
next	;

1.6.9.1.1.1.1.1
date	97.10.07.11.52.50;	author jkbrook;	state Exp;
branches;
next	;

1.6.9.1.2.1
date	97.09.08.17.20.01;	author daveb;	state Exp;
branches;
next	;

1.6.9.1.3.1
date	97.09.09.14.16.08;	author daveb;	state Exp;
branches;
next	;

1.6.10.1
date	97.09.10.19.33.37;	author brucem;	state Exp;
branches;
next	;

1.6.11.1
date	97.09.11.21.02.48;	author daveb;	state Exp;
branches;
next	;

1.6.12.1
date	97.10.31.13.45.39;	author nickb;	state Exp;
branches;
next	;

1.7.1.1
date	99.04.01.18.02.01;	author daveb;	state Exp;
branches;
next	;


desc
@new file
@


1.7
log
@[Bug #70018]
Modify declare_root to accept a second parameter
indicating whether the root is live for image save
@
text
@/*  ==== ML VALUE TOOLS ====
 *
 *  Copyright (C) 1991 Harlequin Ltd.
 *
 *  Revision Log
 *  ------------
 *  $Log: src:values.c,v $
 * Revision 1.6  1996/08/27  13:41:14  stephenb
 * mlupdate: change the type of subscript argument to a word
 * so it is less likely that someone will pass an MLINT as
 * a subscript rather than a plain C int.
 *
 * Also took the opportunity to rename mlupdate -> mlw_update
 * in line with rolling program to have "mlw" prefix on all
 * external symbols.
 *
 * Revision 1.5  1996/07/10  09:38:46  stephenb
 * Add some documentation to cons and update the mlw_option_make_some
 * description to indicate that the argument is now declared/retracted
 * as a root by mlw_option_make_some.
 *
 * Revision 1.4  1996/05/10  10:59:27  stephenb
 * mlw_option_make_some: fix so that it returns the constructed value not
 * the argument!
 *
 * Revision 1.3  1996/05/07  09:10:44  stephenb
 * Add support for Option type.
 *
 * Revision 1.2  1994/06/09  14:48:31  nickh
 * new file
 *
 * Revision 1.1  1994/06/09  11:21:00  nickh
 * new file
 *
 *  Revision 1.29  1993/04/19  13:08:12  richard
 *  Removed rusty value printer.  (Now in print.c.)
 *
 *  Revision 1.28  1993/02/04  12:32:02  jont
 *  Changes for code vector reform.
 *
 *  Revision 1.27  1993/02/01  16:04:20  richard
 *  Abolished SETFIELD and GETFIELD in favour of lvalue FIELD.
 *
 *  Revision 1.26  1993/01/14  14:52:32  daveb
 *  Changed cons to use the new list representation.
 *
 *  Revision 1.25  1992/10/29  11:11:21  richard
 *  Fixed some mistakes in string output.
 *
 *  Revision 1.24  1992/08/24  15:20:27  richard
 *  Corrected the printing of bytearrays and reals.
 *
 *  Revision 1.23  1992/08/24  10:52:14  richard
 *  Corrected printing of bytearrays.
 *
 *  Revision 1.22  1992/07/27  17:38:45  richard
 *  Added exn_name(), exn(), and ref().
 *
 *  Revision 1.21  1992/07/22  15:30:33  clive
 *  Weak array printing
 *
 *  Revision 1.20  1992/07/20  13:30:36  richard
 *  Removed storage manager specific stuff from value printing.
 *
 *  Revision 1.19  1992/07/15  15:35:33  richard
 *  Corrected mlupdate.
 *
 *  Revision 1.18  1992/07/01  13:21:54  richard
 *  Added mlupdate().
 *
 *  Revision 1.17  1992/03/25  09:50:09  richard
 *  Improved polymorphic equality function.
 *
 *  Revision 1.16  1992/03/20  15:24:37  richard
 *  Added code to val_print() to deal with shared closures.
 *
 *  Revision 1.15  1992/03/18  13:32:02  richard
 *  Generalised parameter mechanism to val_print().
 *
 *  Revision 1.14  1992/03/11  12:37:50  richard
 *  Miscellaneous minor improvements and changes to printing to deal with
 *  the new memory arrangement.
 *
 *  Revision 1.13  1992/03/06  16:13:14  clive
 *  Equality for strings was also checking the nulls, but there is currently some
 *  error so that some strings are not null terminated
 *
 *  Revision 1.12  1992/03/06  14:33:10  clive
 *  equality for strings now uses memcmp
 *
 *  Revision 1.11  1992/02/27  11:04:20  clive
 *   Needed to use declare_root around calls to allocate in case a garbage collection was
 *  forced
 *
 *  Revision 1.10  1992/02/25  15:48:45  clive
 *  Added val_print in the System structure in ML
 *
 *  Revision 1.9  1992/02/17  11:15:25  richard
 *  Added parameters to string_print() to limit the length of strings.
 *  Added other cases to tuple printing to spot records on the stack and outside
 *  the heap.
 *  Added a missing `break' after array printing.
 *
 *  Revision 1.8  1992/02/14  17:08:22  richard
 *  Added extra debugging information to val_print.  This is switched on with the
 *  `-i' option.  (See main.c)
 *
 *  Revision 1.7  1992/01/20  15:35:25  richard
 *  Modified polymorphic equality to work with REFPTRs.
 *
 *  Revision 1.6  1992/01/16  14:11:38  richard
 *   Changed the way that arrays are printed, as the primary tag for an array
 *  is now REFPTR.
 *
 *  Revision 1.5  1992/01/14  15:51:12  richard
 *  Added BACKPTR to the printing routine.
 *
 *  Revision 1.4  1991/12/23  13:18:38  richard
 *  Added some missing #include's.  Added void casts to some
 *  unused results.
 *
 *  Revision 1.3  91/12/17  14:03:48  richard
 *  Removed debugging code and added printing of reals.
 *  Added pointer equality as a short cut.
 *  
 *  Revision 1.2  91/12/16  11:02:18  richard
 *  Wrote polymorphic equality and list cons.
 *  
 *  Revision 1.1  91/12/13  16:15:50  richard
 *  Initial revision
 *  
 */


#include "mltypes.h"
#include "gc.h"
#include "values.h"
#include "allocator.h"
#include "utils.h"
#include "diagnostic.h"
#include "state.h"

#include <stdio.h>
#include <ctype.h>
#include <string.h>


/*  == Update an array element ==
 *
 *  An updated array needs to be unlinked from its entry list and linked to
 *  the modified list.
 */

void mlw_update(mlval a, word subscript, mlval value)
{
  union ml_array_header *array = (union ml_array_header *)(a-REFPTR);

  if(array->the.forward != NULL)
  {
    if(array->the.back != NULL)
    {
      array->the.forward->the.back = array->the.back;
      array->the.back->the.forward = array->the.forward;
    }
    array->the.forward = NULL;
    array->the.back = GC_MODIFIED_LIST;
    GC_MODIFIED_LIST = array;
  }

  array->the.element[subscript] = value;
}


/*  === LIST CONSTRUCTOR ===  */


/* If you are tempted to remove the declare/retract roots in the
 * following, then think again.  They must be there as they
 * are here protect the head and tail values in this function
 * against movement not the head and tail values as seen by
 * the caller.
 *
 * This comment is true for other functions that
 * allocate and so they refer to this one rather than repeating
 * the explanation.  Therefore if you update this one, try and make
 * sure it is still valid for them too (to find them search for
 * a reference to mlw_cons).
 */
mlval mlw_cons(mlval head, mlval tail)
{
  mlval result;

  declare_root(& head, 0);
  declare_root(& tail, 0);
  result = allocate_record(2);
  retract_root(& head);
  retract_root(& tail);

  FIELD(result, 0) = head;
  FIELD(result, 1) = tail;

  return(result);
}



/*  == Make an exception name ==
 *
 *  An ML exception name is a pair consisting of a unique (ref unit) and a
 *  string.
 */

mlval exn_name(const char *name)
{
  mlval exn_name, unique, string;

  unique = allocate_array(1);
  MLUPDATE(unique, 0, MLUNIT);
  declare_root(&unique, 0);
  string = ml_string(name);
  declare_root(&string, 0);
  exn_name = allocate_record(2);
  FIELD(exn_name, 0) = unique;
  FIELD(exn_name, 1) = string;
  retract_root(&string);
  retract_root(&unique);

  return(exn_name);
}



/*  == Make an exception packet ==
 *
 *  An exception packet is a pair consisting of an exception name and its
 *  argument.
 */

mlval exn(mlval exn_name, mlval arg)
{
  mlval exn;

  declare_root(&exn_name, 0);
  declare_root(&arg, 0);
  exn = allocate_record(2);
  FIELD(exn, 0) = exn_name;
  FIELD(exn, 1) = arg;
  retract_root(&arg);
  retract_root(&exn_name);

  return(exn);
}




/* See mlw_cons comment as to why the declare/retract roots
 * are necessary here.
 */
mlval mlw_ref_make(mlval value)
{
  mlval r;

  declare_root(&value, 0);
  r= allocate_array(1);
  retract_root(&value);
  mlw_update(r, 0, value);

  return r;
}




/* See mlw_cons comment as to why the declare/retract roots
 * are necessary here.
 */
mlval mlw_option_make_some(mlval arg)
{
  mlval some;
  declare_root(&arg, 0);
  some= allocate_record(2);
  FIELD(some, 0)= MLINT(1);
  FIELD(some, 1)= arg;
  retract_root(&arg);
  return some;
}
@


1.7.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a7 5
 * Revision 1.7  1998/02/23  18:43:36  jont
 * [Bug #70018]
 * Modify declare_root to accept a second parameter
 * indicating whether the root is live for image save
 *
@


1.6
log
@mlupdate: change the type of subscript argument to a word
so it is less likely that someone will pass an MLINT as
a subscript rather than a plain C int.

Also took the opportunity to rename mlupdate -> mlw_update
in line with rolling program to have "mlw" prefix on all
external symbols.
@
text
@d8 9
d193 2
a194 2
  declare_root(& head);
  declare_root(& tail);
d219 1
a219 1
  declare_root(&unique);
d221 1
a221 1
  declare_root(&string);
d243 2
a244 2
  declare_root(&exn_name);
  declare_root(&arg);
d264 1
a264 1
  declare_root(&value);
d281 1
a281 1
  declare_root(&arg);
@


1.6.12.1
log
@branched from trunk for label MLWorks_MM_adapt
@
text
@a7 9
 * Revision 1.6  1996/08/27  13:41:14  stephenb
 * mlupdate: change the type of subscript argument to a word
 * so it is less likely that someone will pass an MLINT as
 * a subscript rather than a plain C int.
 *
 * Also took the opportunity to rename mlupdate -> mlw_update
 * in line with rolling program to have "mlw" prefix on all
 * external symbols.
 *
@


1.6.11.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a7 9
 * Revision 1.6  1996/08/27  13:41:14  stephenb
 * mlupdate: change the type of subscript argument to a word
 * so it is less likely that someone will pass an MLINT as
 * a subscript rather than a plain C int.
 *
 * Also took the opportunity to rename mlupdate -> mlw_update
 * in line with rolling program to have "mlw" prefix on all
 * external symbols.
 *
@


1.6.10.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a7 9
 * Revision 1.6  1996/08/27  13:41:14  stephenb
 * mlupdate: change the type of subscript argument to a word
 * so it is less likely that someone will pass an MLINT as
 * a subscript rather than a plain C int.
 *
 * Also took the opportunity to rename mlupdate -> mlw_update
 * in line with rolling program to have "mlw" prefix on all
 * external symbols.
 *
@


1.6.9.1
log
@branched from 1.6
@
text
@a7 9
 * Revision 1.6  1996/08/27  13:41:14  stephenb
 * mlupdate: change the type of subscript argument to a word
 * so it is less likely that someone will pass an MLINT as
 * a subscript rather than a plain C int.
 *
 * Also took the opportunity to rename mlupdate -> mlw_update
 * in line with rolling program to have "mlw" prefix on all
 * external symbols.
 *
@


1.6.9.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a7 3
 * Revision 1.6.9.1  1997/05/12  10:45:32  hope
 * branched from 1.6
 *
@


1.6.9.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a7 3
 * Revision 1.6.9.1  1997/05/12  10:45:32  hope
 * branched from 1.6
 *
@


1.6.9.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a7 3
 * Revision 1.6.9.1  1997/05/12  10:45:32  hope
 * branched from 1.6
 *
@


1.6.9.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a7 3
 * Revision 1.6.9.1.1.1  1997/07/28  18:26:53  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.6.8.1
log
@branched from 1.6
@
text
@a7 9
 * Revision 1.6  1996/08/27  13:41:14  stephenb
 * mlupdate: change the type of subscript argument to a word
 * so it is less likely that someone will pass an MLINT as
 * a subscript rather than a plain C int.
 *
 * Also took the opportunity to rename mlupdate -> mlw_update
 * in line with rolling program to have "mlw" prefix on all
 * external symbols.
 *
@


1.6.7.1
log
@branched from 1.6
@
text
@a7 9
 * Revision 1.6  1996/08/27  13:41:14  stephenb
 * mlupdate: change the type of subscript argument to a word
 * so it is less likely that someone will pass an MLINT as
 * a subscript rather than a plain C int.
 *
 * Also took the opportunity to rename mlupdate -> mlw_update
 * in line with rolling program to have "mlw" prefix on all
 * external symbols.
 *
@


1.6.7.1.1.1
log
@branched from 1.6.7.1
@
text
@a7 3
 * Revision 1.6.7.1  1996/12/17  17:57:10  hope
 * branched from 1.6
 *
@


1.6.6.1
log
@branched from 1.6
@
text
@a7 9
 * Revision 1.6  1996/08/27  13:41:14  stephenb
 * mlupdate: change the type of subscript argument to a word
 * so it is less likely that someone will pass an MLINT as
 * a subscript rather than a plain C int.
 *
 * Also took the opportunity to rename mlupdate -> mlw_update
 * in line with rolling program to have "mlw" prefix on all
 * external symbols.
 *
@


1.6.5.1
log
@branched from 1.6
@
text
@a7 9
 * Revision 1.6  1996/08/27  13:41:14  stephenb
 * mlupdate: change the type of subscript argument to a word
 * so it is less likely that someone will pass an MLINT as
 * a subscript rather than a plain C int.
 *
 * Also took the opportunity to rename mlupdate -> mlw_update
 * in line with rolling program to have "mlw" prefix on all
 * external symbols.
 *
@


1.6.4.1
log
@branched from 1.6
@
text
@a7 9
 * Revision 1.6  1996/08/27  13:41:14  stephenb
 * mlupdate: change the type of subscript argument to a word
 * so it is less likely that someone will pass an MLINT as
 * a subscript rather than a plain C int.
 *
 * Also took the opportunity to rename mlupdate -> mlw_update
 * in line with rolling program to have "mlw" prefix on all
 * external symbols.
 *
@


1.6.4.1.1.1
log
@branched from 1.6.4.1
@
text
@a7 3
 * Revision 1.6.4.1  1996/11/14  13:01:02  hope
 * branched from 1.6
 *
@


1.6.3.1
log
@branched from 1.6
@
text
@a7 9
 * Revision 1.6  1996/08/27  13:41:14  stephenb
 * mlupdate: change the type of subscript argument to a word
 * so it is less likely that someone will pass an MLINT as
 * a subscript rather than a plain C int.
 *
 * Also took the opportunity to rename mlupdate -> mlw_update
 * in line with rolling program to have "mlw" prefix on all
 * external symbols.
 *
@


1.6.2.1
log
@branched from 1.6
@
text
@a7 9
 * Revision 1.6  1996/08/27  13:41:14  stephenb
 * mlupdate: change the type of subscript argument to a word
 * so it is less likely that someone will pass an MLINT as
 * a subscript rather than a plain C int.
 *
 * Also took the opportunity to rename mlupdate -> mlw_update
 * in line with rolling program to have "mlw" prefix on all
 * external symbols.
 *
@


1.6.1.1
log
@branched from 1.6
@
text
@a7 9
 * Revision 1.6  1996/08/27  13:41:14  stephenb
 * mlupdate: change the type of subscript argument to a word
 * so it is less likely that someone will pass an MLINT as
 * a subscript rather than a plain C int.
 *
 * Also took the opportunity to rename mlupdate -> mlw_update
 * in line with rolling program to have "mlw" prefix on all
 * external symbols.
 *
@


1.5
log
@Add some documentation to cons and update the mlw_option_make_some
description to indicate that the argument is now declared/retracted
as a root by mlw_option_make_some.
@
text
@d8 5
d145 1
a145 1
void mlupdate(mlval a, mlval subscript, mlval value)
d258 1
a258 1
  mlupdate(r, 0, value);
@


1.4
log
@mlw_option_make_some: fix so that it returns the constructed value not
the argument!
@
text
@d8 4
d162 14
a175 1
mlval cons(mlval head, mlval tail)
d192 1
d218 1
d241 4
a244 3
/*  == Make a ref cell ==
 *
 *  A ref cell is just a single element array.
d246 1
a246 2

mlval ref(mlval value)
d251 1
a251 1
  r = allocate_array(1);
d255 1
a255 1
  return(r);
d261 4
a264 1
extern mlval mlw_option_make_some(mlval arg)
d266 3
a268 1
  mlval some= allocate_record(2);
d271 1
@


1.3
log
@Add support for Option type.
@
text
@d8 3
d247 1
a247 1
  return arg;
@


1.2
log
@new file
@
text
@d8 3
d234 11
@


1.2.1.1
log
@branched from 1.2
@
text
@a7 3
 * Revision 1.2  1994/06/09  14:48:31  nickh
 * new file
 *
@


1.1
log
@new file
@
text
@d7 4
a10 1
 *  $Log: values.c,v $
@
