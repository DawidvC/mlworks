head	1.6;
access;
symbols
	MLW_daveb_inline_1_4_99:1.6.4
	MLWorks_21c0_1999_03_25:1.6
	MLWorks_20c1_1998_08_20:1.6
	MLWorks_20c0_1998_08_04:1.6
	MLWorks_20b2c2_1998_06_19:1.6
	MLWorks_20b2_Windows_1998_06_12:1.6
	MLWorks_20b1c1_1998_05_07:1.6
	MLWorks_20b0_1998_04_07:1.6
	MLWorks_20b0_1998_03_20:1.6
	MLWorks_20m2_1998_02_16:1.6
	MLWorks_MM_adapt:1.6.3
	MLWorks_20m1_1997_10_23:1.6
	MLWorks_11r1:1.5.9.1.1.1.1
	MLWorks_workspace_97:1.6.2
	MLWorks_dt_wizard:1.6.1
	MLWorks_11c0_1997_09_09:1.5.9.1.1.1
	MLWorks_10r3:1.5.9.1.3
	MLWorks_10r2_551:1.5.9.1.2
	MLWorks_11:1.5.9.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.5.9.1
	MLWorks_20m0_1997_06_20:1.5
	MLWorks_1_0_r2c2_1997_06_14:1.5.9.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.5.9.1
	MLWorks_1_0_r2c1_1997_05_12:1.5.9
	MLWorks_BugFix_1997_04_24:1.5
	MLWorks_1_0_r2_Win32_1997_04_11:1.5
	MLWorks_1_0_r2_Unix_1997_04_04:1.5
	MM_ML_release_korma_1997_04_01:1.5
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.5.7.1.1
	MLWorks_gui_1996_12_18:1.5.8
	MLWorks_1_0_Win32_1996_12_17:1.5.7
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.5.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.5.4.1
	JFHrts:1.5.6
	MLWorks_1_0_Irix_1996_11_28:1.5.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.5.5
	MLWorks_1_0_Unix_1996_11_14:1.5.4
	MLWorks_Open_Beta2_1996_10_11:1.5.3
	MLWorks_License_dev:1.5.2
	MLWorks_1_open_beta_1996_09_13:1.5.1
	MLWorks_Open_Beta_1996_08_22:1.5
	MLWorks_Beta_1996_07_02:1.5
	MLWorks_Beta_1996_06_07:1.5
	MLWorks_Beta_1996_06_06:1.5
	MLWorks_Beta_1996_06_05:1.5
	MLWorks_Beta_1996_06_03:1.5
	MLWorks_Beta_1996_05_31:1.5
	MLWorks_Beta_1996_05_30:1.5
	hope_poo:1.3.1
	ML_beta_release_12/08/94:1.3.1.1
	ML_beta_release_03/08/94:1.2;
locks; strict;
comment	@ * @;


1.6
date	97.08.19.15.14.10;	author nickb;	state Exp;
branches
	1.6.1.1
	1.6.2.1
	1.6.3.1
	1.6.4.1;
next	1.5;

1.5
date	95.04.03.11.14.19;	author brianm;	state Exp;
branches
	1.5.1.1
	1.5.2.1
	1.5.3.1
	1.5.4.1
	1.5.5.1
	1.5.6.1
	1.5.7.1
	1.5.8.1
	1.5.9.1;
next	1.4;

1.4
date	95.03.01.16.03.33;	author nickb;	state Exp;
branches;
next	1.3;

1.3
date	94.08.11.11.18.01;	author matthew;	state Exp;
branches
	1.3.1.1;
next	1.2;

1.2
date	94.06.09.14.32.23;	author nickh;	state Exp;
branches;
next	1.1;

1.1
date	94.06.09.10.57.20;	author nickh;	state Exp;
branches;
next	;

1.3.1.1
date	95.07.05.10.31.45;	author hope;	state Exp;
branches;
next	;

1.5.1.1
date	96.09.13.11.25.24;	author hope;	state Exp;
branches;
next	;

1.5.2.1
date	96.10.07.16.15.48;	author hope;	state Exp;
branches;
next	;

1.5.3.1
date	96.10.17.11.35.14;	author hope;	state Exp;
branches;
next	;

1.5.4.1
date	96.11.14.13.00.52;	author hope;	state Exp;
branches
	1.5.4.1.1.1;
next	;

1.5.4.1.1.1
date	96.11.28.15.10.56;	author hope;	state Exp;
branches;
next	;

1.5.5.1
date	96.11.22.18.18.44;	author hope;	state Exp;
branches;
next	;

1.5.6.1
date	96.12.17.10.05.26;	author hope;	state Exp;
branches;
next	;

1.5.7.1
date	96.12.17.17.57.00;	author hope;	state Exp;
branches
	1.5.7.1.1.1;
next	;

1.5.7.1.1.1
date	97.02.24.11.48.40;	author hope;	state Exp;
branches;
next	;

1.5.8.1
date	96.12.18.09.51.40;	author hope;	state Exp;
branches;
next	;

1.5.9.1
date	97.05.12.10.45.22;	author hope;	state Exp;
branches
	1.5.9.1.1.1
	1.5.9.1.2.1
	1.5.9.1.3.1;
next	;

1.5.9.1.1.1
date	97.07.28.18.27.30;	author daveb;	state Exp;
branches
	1.5.9.1.1.1.1.1;
next	;

1.5.9.1.1.1.1.1
date	97.10.07.11.53.30;	author jkbrook;	state Exp;
branches;
next	;

1.5.9.1.2.1
date	97.09.08.17.20.35;	author daveb;	state Exp;
branches;
next	;

1.5.9.1.3.1
date	97.09.09.14.16.42;	author daveb;	state Exp;
branches;
next	;

1.6.1.1
date	97.09.10.19.34.44;	author brucem;	state Exp;
branches;
next	;

1.6.2.1
date	97.09.11.21.03.38;	author daveb;	state Exp;
branches;
next	;

1.6.3.1
date	97.10.31.13.46.34;	author nickb;	state Exp;
branches;
next	;

1.6.4.1
date	99.04.01.18.02.39;	author daveb;	state Exp;
branches;
next	;


desc
@new file
@


1.6
log
@[Bug #30250]
Bugs in use of allocate_record and allocate_array: add debug-filling code.
@
text
@/*  ==== ML VALUE HEAP ALLOCATOR ====
 *
 *  Copyright (C) 1992 Harelquint Ltd.
 *
 *  Description
 *  -----------
 *  This library contains functions which allocate ML objects on the ML
 *  heap.  A garbage collection may be caused by any of the functions, so
 *  any ML pointer values which need to be preserved must be declared as
 *  roots before calling them.  The objects returned are uninitialized; they
 *  must be filled with valid ML values (where applicable) before the next
 *  garbage collection. In the debugging runtime, scannable objects returned
 *  are filled with DEAD, to help identifying uninitialized objects.
 *
 *  Revision Log
 *  ------------
 *  $Log: src:allocator.h,v $
 * Revision 1.5  1995/04/03  11:14:19  brianm
 * Adding allocate_word32.
 *
 * Revision 1.4  1995/03/01  16:03:33  nickb
 * Add static object allocation.
 *
 * Revision 1.3  1994/08/11  11:18:01  matthew
 * Adding allocate_vector
 *
 * Revision 1.2  1994/06/09  14:32:23  nickh
 * new file
 *
 * Revision 1.1  1994/06/09  10:57:20  nickh
 * new file
 *
 *  Revision 1.17  1992/09/08  13:47:46  richard
 *  Added `allocate_multiple'.
 *
 *  Revision 1.16  1992/08/24  08:05:17  richard
 *  Added allocate_bytearray.
 *
 *  Revision 1.15  1992/08/05  17:10:02  richard
 *  Added allocate_code().
 *
 *  Revision 1.14  1992/07/30  11:13:29  richard
 *  Added static_string().
 *
 *  Revision 1.13  1992/07/23  11:22:48  richard
 *  `ml_string' now takes a const char *.
 *
 *  Revision 1.12  1992/07/14  08:17:07  richard
 *  Added allocate_array() and allocate_weak_array().
 *
 *  Revision 1.11  1992/06/30  09:55:52  richard
 *  Added storeman.h to headers.
 *
 *  Revision 1.10  1992/03/11  14:22:05  richard
 *  Tidied up and improved type abstration.
 *
 *  Revision 1.9  1991/12/17  16:01:42  nickh
 *  removed declare_root and retract_root (these are now in gc.c)
 *
 *  Revision 1.8  91/12/17  14:51:23  richard
 *  Removed argument from allocate_real.
 *  
 *  Revision 1.7  91/11/11  17:12:33  jont
 *  Added allocate_real
 *  
 *  Revision 1.6  91/10/21  09:19:26  davidt
 *  Changed the types of declare_root and retract_root so that the
 *  garbage collector is free to move the root objects (updating
 *  their new values using the address provided).
 *  
 *  Revision 1.5  91/10/18  15:52:52  davidt
 *  Allocation routines for various ML objects.
 *  
 *  Revision 1.4  91/10/17  15:12:44  davidt
 *  Took out all sorts of junk which had gone out of date.
 *  
 *  Revision 1.3  91/05/22  12:11:56  jont
 *  *** empty log message ***
 *  
 *  Revision 1.2  91/05/15  15:27:52  jont
 *  Updated for second revision of load structure
 *  
 *  Revision 1.1  91/05/14  11:06:01  jont
 *  Initial revision
 */

#ifndef allocator_h
#define allocator_h

#include "values.h"

#include <stddef.h>


/*  === ALLOCATE UNINITIALIZED OBJECT ===
 *
 *  The objects allocated by these functions are uninitialized, and so must
 *  be filled in with valid ML values before the next garbage collection or
 *  allocation.
 *
 *  Note:  The size passed to allocate_string() is the entire size,
 *  including the terminating '\0' character, if any.
 *
 */

extern mlval allocate_record(size_t number_of_fields);
extern mlval allocate_vector(size_t number_of_fields);
extern mlval allocate_string(size_t size_in_bytes);
extern mlval allocate_bytearray(size_t size_in_bytes);
extern mlval allocate_code(size_t size_in_words);
extern mlval allocate_real(void);
extern mlval allocate_array(size_t length);
extern mlval allocate_weak_array(size_t length);
extern mlval allocate_word32(void);

/*  === ALLOCATE STATIC OBJECTS ===
 *
 * These are just like the above, but allocate in the static spaces
 * (see mem.h).
 */

extern mlval allocate_static_bytearray(size_t size_in_bytes);

/*  === MAKE ML STRING FROM C STRING ===
 *
 *  Creates an ML string object corresponding to a C string.
 */

extern mlval ml_string(const char *cstring);


/*  === ALLOCATE MULTIPLE OBJECTS ===
 *
 *  This function allocates a block of contiguous memory in one go.  It
 *  attempts to allocate space for `number' objects, each of size `size'
 *  values.  It returns the number of objects available and sets *start to
 *  point at the beginning of the memory.  Guaranteed not to enter the
 *  garbage collector.
 */

extern size_t allocate_multiple(size_t size, size_t number, mlval **start);

#endif
@


1.6.4.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a17 4
 * Revision 1.6  1997/08/19  15:14:10  nickb
 * [Bug #30250]
 * Bugs in use of allocate_record and allocate_array: add debug-filling code.
 *
@


1.6.3.1
log
@branched from trunk for label MLWorks_MM_adapt
@
text
@a17 4
 * Revision 1.6  1997/08/19  15:14:10  nickb
 * [Bug #30250]
 * Bugs in use of allocate_record and allocate_array: add debug-filling code.
 *
@


1.6.2.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a17 4
 * Revision 1.6  1997/08/19  15:14:10  nickb
 * [Bug #30250]
 * Bugs in use of allocate_record and allocate_array: add debug-filling code.
 *
@


1.6.1.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a17 4
 * Revision 1.6  1997/08/19  15:14:10  nickb
 * [Bug #30250]
 * Bugs in use of allocate_record and allocate_array: add debug-filling code.
 *
@


1.5
log
@Adding allocate_word32.
@
text
@d12 2
a13 1
 *  garbage collection.
d18 3
@


1.5.9.1
log
@branched from 1.5
@
text
@a16 3
 * Revision 1.5  1995/04/03  11:14:19  brianm
 * Adding allocate_word32.
 *
@


1.5.9.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a16 3
 * Revision 1.5.9.1  1997/05/12  10:45:22  hope
 * branched from 1.5
 *
@


1.5.9.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a16 3
 * Revision 1.5.9.1  1997/05/12  10:45:22  hope
 * branched from 1.5
 *
@


1.5.9.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a16 3
 * Revision 1.5.9.1  1997/05/12  10:45:22  hope
 * branched from 1.5
 *
@


1.5.9.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a16 3
 * Revision 1.5.9.1.1.1  1997/07/28  18:27:30  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.5.8.1
log
@branched from 1.5
@
text
@a16 3
 * Revision 1.5  1995/04/03  11:14:19  brianm
 * Adding allocate_word32.
 *
@


1.5.7.1
log
@branched from 1.5
@
text
@a16 3
 * Revision 1.5  1995/04/03  11:14:19  brianm
 * Adding allocate_word32.
 *
@


1.5.7.1.1.1
log
@branched from 1.5.7.1
@
text
@a16 3
 * Revision 1.5.7.1  1996/12/17  17:57:00  hope
 * branched from 1.5
 *
@


1.5.6.1
log
@branched from 1.5
@
text
@a16 3
 * Revision 1.5  1995/04/03  11:14:19  brianm
 * Adding allocate_word32.
 *
@


1.5.5.1
log
@branched from 1.5
@
text
@a16 3
 * Revision 1.5  1995/04/03  11:14:19  brianm
 * Adding allocate_word32.
 *
@


1.5.4.1
log
@branched from 1.5
@
text
@a16 3
 * Revision 1.5  1995/04/03  11:14:19  brianm
 * Adding allocate_word32.
 *
@


1.5.4.1.1.1
log
@branched from 1.5.4.1
@
text
@a16 3
 * Revision 1.5.4.1  1996/11/14  13:00:52  hope
 * branched from 1.5
 *
@


1.5.3.1
log
@branched from 1.5
@
text
@a16 3
 * Revision 1.5  1995/04/03  11:14:19  brianm
 * Adding allocate_word32.
 *
@


1.5.2.1
log
@branched from 1.5
@
text
@a16 3
 * Revision 1.5  1995/04/03  11:14:19  brianm
 * Adding allocate_word32.
 *
@


1.5.1.1
log
@branched from 1.5
@
text
@a16 3
 * Revision 1.5  1995/04/03  11:14:19  brianm
 * Adding allocate_word32.
 *
@


1.4
log
@Add static object allocation.
@
text
@d17 3
d110 1
@


1.3
log
@Adding allocate_vector
@
text
@d17 3
a96 3
 *  The static versions of these function allocate ML values on the C heap.
 *  Care must be taken to preserve these values across image save and
 *  reload.
d108 5
a112 1
extern mlval static_string(size_t size_in_bytes);
d114 1
@


1.3.1.1
log
@branched from 1.3
@
text
@a16 3
 * Revision 1.3  1994/08/11  11:18:01  matthew
 * Adding allocate_vector
 *
@


1.2
log
@new file
@
text
@d17 3
d100 1
@


1.1
log
@new file
@
text
@d16 4
a19 1
 *  $Log: allocator.h,v $
@
