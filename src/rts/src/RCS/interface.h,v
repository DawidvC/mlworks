head	1.10;
access;
symbols
	MLW_daveb_inline_1_4_99:1.10.13
	MLWorks_21c0_1999_03_25:1.10
	MLWorks_20c1_1998_08_20:1.10
	MLWorks_20c0_1998_08_04:1.10
	MLWorks_20b2c2_1998_06_19:1.10
	MLWorks_20b2_Windows_1998_06_12:1.10
	MLWorks_20b1c1_1998_05_07:1.10
	MLWorks_20b0_1998_04_07:1.10
	MLWorks_20b0_1998_03_20:1.10
	MLWorks_20m2_1998_02_16:1.10
	MLWorks_MM_adapt:1.10.12
	MLWorks_20m1_1997_10_23:1.10
	MLWorks_11r1:1.10.9.1.1.1.1
	MLWorks_workspace_97:1.10.11
	MLWorks_dt_wizard:1.10.10
	MLWorks_11c0_1997_09_09:1.10.9.1.1.1
	MLWorks_10r3:1.10.9.1.3
	MLWorks_10r2_551:1.10.9.1.2
	MLWorks_11:1.10.9.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.10.9.1
	MLWorks_20m0_1997_06_20:1.10
	MLWorks_1_0_r2c2_1997_06_14:1.10.9.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.10.9.1
	MLWorks_1_0_r2c1_1997_05_12:1.10.9
	MLWorks_BugFix_1997_04_24:1.10
	MLWorks_1_0_r2_Win32_1997_04_11:1.10
	MLWorks_1_0_r2_Unix_1997_04_04:1.10
	MM_ML_release_korma_1997_04_01:1.10
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.10.7.1.1
	MLWorks_gui_1996_12_18:1.10.8
	MLWorks_1_0_Win32_1996_12_17:1.10.7
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.10.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.10.4.1
	JFHrts:1.10.6
	MLWorks_1_0_Irix_1996_11_28:1.10.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.10.5
	MLWorks_1_0_Unix_1996_11_14:1.10.4
	MLWorks_Open_Beta2_1996_10_11:1.10.3
	MLWorks_License_dev:1.10.2
	MLWorks_1_open_beta_1996_09_13:1.10.1
	MLWorks_Open_Beta_1996_08_22:1.10
	MLWorks_Beta_1996_07_02:1.10
	MLWorks_Beta_1996_06_07:1.10
	MLWorks_Beta_1996_06_06:1.10
	MLWorks_Beta_1996_06_05:1.10
	MLWorks_Beta_1996_06_03:1.10
	MLWorks_Beta_1996_05_31:1.10
	MLWorks_Beta_1996_05_30:1.10
	hope_poo:1.3.1
	ML_beta_release_12/08/94:1.3.1.1
	ML_beta_release_03/08/94:1.3;
locks; strict;
comment	@ * @;


1.10
date	95.12.11.14.29.13;	author nickb;	state Exp;
branches
	1.10.1.1
	1.10.2.1
	1.10.3.1
	1.10.4.1
	1.10.5.1
	1.10.6.1
	1.10.7.1
	1.10.8.1
	1.10.9.1
	1.10.10.1
	1.10.11.1
	1.10.12.1
	1.10.13.1;
next	1.9;

1.9
date	95.11.13.12.45.33;	author nickb;	state Exp;
branches;
next	1.8;

1.8
date	95.08.31.13.00.05;	author nickb;	state Exp;
branches;
next	1.7;

1.7
date	95.06.19.14.33.56;	author nickb;	state Exp;
branches;
next	1.6;

1.6
date	95.03.15.15.16.24;	author nickb;	state Exp;
branches;
next	1.5;

1.5
date	94.11.23.16.47.31;	author nickb;	state Exp;
branches;
next	1.4;

1.4
date	94.10.19.15.27.39;	author nickb;	state Exp;
branches;
next	1.3;

1.3
date	94.07.01.10.38.09;	author nickh;	state Exp;
branches
	1.3.1.1;
next	1.2;

1.2
date	94.06.09.14.40.16;	author nickh;	state Exp;
branches;
next	1.1;

1.1
date	94.06.09.11.07.52;	author nickh;	state Exp;
branches;
next	;

1.3.1.1
date	95.07.05.10.29.36;	author hope;	state Exp;
branches;
next	;

1.10.1.1
date	96.09.13.11.22.06;	author hope;	state Exp;
branches;
next	;

1.10.2.1
date	96.10.07.16.12.11;	author hope;	state Exp;
branches;
next	;

1.10.3.1
date	96.10.17.11.31.07;	author hope;	state Exp;
branches;
next	;

1.10.4.1
date	96.11.14.12.57.02;	author hope;	state Exp;
branches
	1.10.4.1.1.1;
next	;

1.10.4.1.1.1
date	96.11.28.15.07.17;	author hope;	state Exp;
branches;
next	;

1.10.5.1
date	96.11.22.18.14.57;	author hope;	state Exp;
branches;
next	;

1.10.6.1
date	96.12.17.10.01.45;	author hope;	state Exp;
branches;
next	;

1.10.7.1
date	96.12.17.17.53.29;	author hope;	state Exp;
branches
	1.10.7.1.1.1;
next	;

1.10.7.1.1.1
date	97.02.24.11.44.28;	author hope;	state Exp;
branches;
next	;

1.10.8.1
date	96.12.18.09.48.02;	author hope;	state Exp;
branches;
next	;

1.10.9.1
date	97.05.12.10.40.27;	author hope;	state Exp;
branches
	1.10.9.1.1.1
	1.10.9.1.2.1
	1.10.9.1.3.1;
next	;

1.10.9.1.1.1
date	97.07.28.18.29.05;	author daveb;	state Exp;
branches
	1.10.9.1.1.1.1.1;
next	;

1.10.9.1.1.1.1.1
date	97.10.07.11.54.56;	author jkbrook;	state Exp;
branches;
next	;

1.10.9.1.2.1
date	97.09.08.17.22.03;	author daveb;	state Exp;
branches;
next	;

1.10.9.1.3.1
date	97.09.09.14.18.08;	author daveb;	state Exp;
branches;
next	;

1.10.10.1
date	97.09.10.19.37.27;	author brucem;	state Exp;
branches;
next	;

1.10.11.1
date	97.09.11.21.05.23;	author daveb;	state Exp;
branches;
next	;

1.10.12.1
date	97.10.31.13.48.26;	author nickb;	state Exp;
branches;
next	;

1.10.13.1
date	99.04.01.18.04.07;	author daveb;	state Exp;
branches;
next	;


desc
@new file
@


1.10
log
@Add space profiling for MIPS.
@
text
@/*
 * interface.h
 * Assembly code interfacing C and ML.
 *
 * $Log: src:interface.h,v $
 * Revision 1.9  1995/11/13  12:45:33  nickb
 * Change parameters to switch_to_thread().
 *
 * Revision 1.8  1995/08/31  13:00:05  nickb
 * Change INTERCEPT_LENGTH to allow platform-specific values.
 *
 * Revision 1.7  1995/06/19  14:33:56  nickb
 * Add space profiling hooks.
 *
 * Revision 1.6  1995/03/15  15:16:24  nickb
 * Change to thread system.
 *
 * Revision 1.5  1994/11/23  16:47:31  nickb
 * Remove set_stack_underflow, not needed on non-SPARCs.
 *
 * Revision 1.4  1994/10/19  15:27:39  nickb
 * The method of declaring functions to be non-returning has changed.
 *
 * Revision 1.3  1994/07/01  10:38:09  nickh
 * Add debugger trap.
 *
 * Revision 1.2  1994/06/09  14:40:16  nickh
 * new file
 *
 * Revision 1.1  1994/06/09  11:07:52  nickh
 * new file
 *
 * Revision 1.30  1993/11/05  15:12:26  jont
 * Added check_event entries for leaf and non-leaf.
 *
 * Revision 1.29  1993/04/21  14:16:56  jont
 * Added leaf raise code
 *
 * Revision 1.28  1993/04/14  13:24:02  richard
 * Ripped out old tracing mechanism and installed a new one.
 *
 * Revision 1.27  1992/11/11  16:26:30  clive
 * Access to functions needed for tracing
 *
 * Revision 1.26  1992/10/02  09:23:42  richard
 * Made c_raise nonreturning.
 *
 * Revision 1.25  1992/08/17  10:47:58  richard
 * Added set_stack_underflow().
 *
 * Revision 1.24  1992/08/11  15:27:39  clive
 * Work on tracing
 *
 * Revision 1.23  1992/08/07  13:56:50  clive
 * Changed the functionality of some of the debugger functions - added support
 * for tracing
 *
 * Revision 1.22  1992/07/31  08:14:09  richard
 * The C and assembler calling stubs are now single static code vectors.
 *
 * Revision 1.21  1992/07/27  14:00:28  richard
 * Added poly_equal() and poly_not_equal() so that they can be added to the
 * runtime environment by pervasives.c.
 * Added callasm_code.
 *
 * Revision 1.20  1992/07/22  14:07:17  clive
 * Took out ml_profile
 *
 * Revision 1.19  1992/07/21  15:32:15  richard
 * Changed ml_call_c to callc.
 *
 * Revision 1.18  1992/07/15  12:12:05  richard
 * Added ml_call_c stuff, and ml_boot_environment, although these aren't
 * used at the moment.
 *
 * Revision 1.17  1992/07/03  13:51:09  richard
 * Removed some redundant things and added ml_disturbance.
 *
 * Revision 1.16  1992/06/22  14:08:58  clive
 * A few changes for the new debugger
 *
 * Revision 1.15  1992/06/18  11:47:54  richard
 * Tidied up.
 *
 * Revision 1.14  1992/06/17  13:38:50  richard
 * Added ml_gc_leaf.
 *
 * Revision 1.13  1992/06/01  13:23:47  clive
 * Defined a macro to determine if we are in Raise code
 *
 * Revision 1.12  1992/05/08  13:04:29  clive
 * Added code for memory profiling
 *
 * Revision 1.11  1992/04/13  16:44:46  clive
 * First version of the profiler
 *
 * Revision 1.10  1992/03/25  09:52:41  richard
 * Added ml_poly_equal.
 *
 * Revision 1.9  1992/03/24  15:46:21  richard
 * Removed obsolete `ml_preserve' and updated documentation.
 *
 * Revision 1.8  1992/01/14  10:12:01  richard
 * Added ml_raise and removed ml_toplevel_handler.
 *
 * Revision 1.7  1992/01/08  12:48:14  richard
 * Changed the names of the routines in interface.s.
 *
 * Revision 1.6  1992/01/03  12:49:16  richard
 * Added ml_preserve and documentation.
 *
 * Revision 1.5  1991/10/24  17:16:27  davidt
 * Added header for ml_toplevel_handler.
 *
 * Revision 1.4  91/10/24  16:16:23  davidt
 * Put in headers for ml_callgc and ml_callc.
 * 
 * Revision 1.3  91/10/18  15:59:45  davidt
 * We don't need all those arguments to callml because it really
 * should just access the global variables directly.
 * 
 * Revision 1.2  91/10/16  17:22:22  davidt
 * Changed the type char* to void* and the type tagged_value which
 * is now called mlval.
 * 
 * Revision 1.1  91/10/16  15:24:20  davidt
 * Initial revision
 * 
 * Copyright (c) 1991 Harlequin Ltd.
 */


#ifndef interface_h
#define interface_h

#include "mltypes.h"
#include "extensions.h"
#include "tags.h"
#include "mach_values.h"


/*  === C INTERFACE TO ML ===
 *
 *  callml() invokes an ML function, applying it to an argument.  The return
 *  value is the result of the function.
 *
 *  c_raise() raises the exception passed as its argument.  It does not
 *  return.
 */

extern mlval callml(mlval argument, mlval closure);
nonreturning (extern void, c_raise,(mlval exception));

/*  === ML INTERFACE TO C ===
 *
 *  These routines are included here because they must be entered in the
 *  `implicit vector' (see implicit.h).
 *
 *  Note: The address of ml_extend is also used to mark stack extension
 *  frames.  See interface code and garbage collector.
 */

extern void ml_gc(void);		/* GC entry point from ML */
extern void ml_gc_leaf(void);		/* ditto for leaf procedures */
extern void ml_lookup_pervasive(void);	/* ML interface to lookup_pervasive */
extern void ml_disturbance(void);	/* Disturbed function entry */
extern void ml_raise(void);		/* Raise an exception */
extern void ml_raise_leaf(void);	/* Raise an exception */
extern void ml_trap(void);		/* Debugging trap */
extern void ml_replace(void);		/* Code vector replacement entry point */
extern void ml_replace_leaf(void);
extern void ml_intercept(void);		/* Code vector interception entry point */
extern void ml_intercept_leaf(void);
extern byte ml_replace_on[INTERCEPT_LENGTH];	/* Replacing code fragment */
extern byte ml_replace_on_leaf[INTERCEPT_LENGTH];
extern byte ml_intercept_on[INTERCEPT_LENGTH];	/* Intercepting code fragment */
extern byte ml_intercept_on_leaf[INTERCEPT_LENGTH];
extern byte ml_nop[INTERCEPT_LENGTH];		/* No operation code fragment */
extern void ml_event_check(void);       /* Check for events */
extern void ml_event_check_leaf(void);  /* Check for events */

#ifdef IMPLICIT_PROFILE_CODE

/* Code is copied from these locations onto the implicit vector */

extern word implicit_profile_alloc_code;/* allocate when space profiling */
extern word implicit_profile_alloc_code_end;

#else

extern void ml_profile_alloc(void);	 /* space profile entry point */
extern void ml_profile_alloc_leaf(void); /* space profile entry point */

#endif

/* On the SPARC the register windows need to be flushed to memory
 *  before the garbage collector or other runtime code can examine the
 *  stack.  On other processors other actions may be necessary. The
 *  function flush_windows() performs these actions. */

extern void flush_windows(void);

/*  == C and assembler calling ML code ==
 *
 *  These values are ML values which refer to static ML code vectors.  When
 *  called the code vectors call the C or assembler routine pointed to by
 *  their first closure element, after any housekeeping.  The assembler stub
 *  calls assembler routines in the ML state.
 */

extern mlval stub_c, stub_asm;

/*  == Cause a debugger trap ==
 * 
 * This is called from the runtime when something fatal has gone wrong
 * and we'd like to enter the debugger. Its use is unusual.
 *
 */

nonreturning(extern void, generate_debugger_trap,(void));


/* switch_to_thread() is an asm function which saves the current state
   in the current C state, switches to the C stack of the argument
   thread state, reinstalls the C state of that thread and jumps to
   the C pc. When it returns (when some other thread switches back to
   this one), it returns the thread state of the previous thread */

struct thread_state *switch_to_thread(struct thread_state *old_thread,
				      struct thread_state *new_thread);

#ifdef COLLECT_STATS

extern unsigned int stack_extension_count;
extern unsigned int raise_count;

#endif

#endif
@


1.10.13.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a5 3
 * Revision 1.10  1995/12/11  14:29:13  nickb
 * Add space profiling for MIPS.
 *
@


1.10.12.1
log
@branched from trunk for label MLWorks_MM_adapt
@
text
@a5 3
 * Revision 1.10  1995/12/11  14:29:13  nickb
 * Add space profiling for MIPS.
 *
@


1.10.11.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a5 3
 * Revision 1.10  1995/12/11  14:29:13  nickb
 * Add space profiling for MIPS.
 *
@


1.10.10.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a5 3
 * Revision 1.10  1995/12/11  14:29:13  nickb
 * Add space profiling for MIPS.
 *
@


1.10.9.1
log
@branched from 1.10
@
text
@a5 3
 * Revision 1.10  1995/12/11  14:29:13  nickb
 * Add space profiling for MIPS.
 *
@


1.10.9.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a5 3
 * Revision 1.10.9.1  1997/05/12  10:40:27  hope
 * branched from 1.10
 *
@


1.10.9.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a5 3
 * Revision 1.10.9.1  1997/05/12  10:40:27  hope
 * branched from 1.10
 *
@


1.10.9.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a5 3
 * Revision 1.10.9.1  1997/05/12  10:40:27  hope
 * branched from 1.10
 *
@


1.10.9.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a5 3
 * Revision 1.10.9.1.1.1  1997/07/28  18:29:05  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.10.8.1
log
@branched from 1.10
@
text
@a5 3
 * Revision 1.10  1995/12/11  14:29:13  nickb
 * Add space profiling for MIPS.
 *
@


1.10.7.1
log
@branched from 1.10
@
text
@a5 3
 * Revision 1.10  1995/12/11  14:29:13  nickb
 * Add space profiling for MIPS.
 *
@


1.10.7.1.1.1
log
@branched from 1.10.7.1
@
text
@a5 3
 * Revision 1.10.7.1  1996/12/17  17:53:29  hope
 * branched from 1.10
 *
@


1.10.6.1
log
@branched from 1.10
@
text
@a5 3
 * Revision 1.10  1995/12/11  14:29:13  nickb
 * Add space profiling for MIPS.
 *
@


1.10.5.1
log
@branched from 1.10
@
text
@a5 3
 * Revision 1.10  1995/12/11  14:29:13  nickb
 * Add space profiling for MIPS.
 *
@


1.10.4.1
log
@branched from 1.10
@
text
@a5 3
 * Revision 1.10  1995/12/11  14:29:13  nickb
 * Add space profiling for MIPS.
 *
@


1.10.4.1.1.1
log
@branched from 1.10.4.1
@
text
@a5 3
 * Revision 1.10.4.1  1996/11/14  12:57:02  hope
 * branched from 1.10
 *
@


1.10.3.1
log
@branched from 1.10
@
text
@a5 3
 * Revision 1.10  1995/12/11  14:29:13  nickb
 * Add space profiling for MIPS.
 *
@


1.10.2.1
log
@branched from 1.10
@
text
@a5 3
 * Revision 1.10  1995/12/11  14:29:13  nickb
 * Add space profiling for MIPS.
 *
@


1.10.1.1
log
@branched from 1.10
@
text
@a5 3
 * Revision 1.10  1995/12/11  14:29:13  nickb
 * Add space profiling for MIPS.
 *
@


1.9
log
@Change parameters to switch_to_thread().
@
text
@d6 3
d182 2
d188 7
@


1.8
log
@Change INTERCEPT_LENGTH to allow platform-specific values.
@
text
@d6 3
d217 2
a218 1
struct thread_state *switch_to_thread(struct thread_state *thread);
@


1.7
log
@Add space profiling hooks.
@
text
@d6 3
d133 1
d168 5
a172 5
extern word ml_replace_on[INTERCEPT_LENGTH];	/* Replacing code fragment */
extern word ml_replace_on_leaf[INTERCEPT_LENGTH];
extern word ml_intercept_on[INTERCEPT_LENGTH];	/* Intercepting code fragment */
extern word ml_intercept_on_leaf[INTERCEPT_LENGTH];
extern word ml_nop[INTERCEPT_LENGTH];		/* No operation code fragment */
@


1.6
log
@Change to thread system.
@
text
@d6 3
d171 5
@


1.5
log
@Remove set_stack_underflow, not needed on non-SPARCs.
@
text
@d6 3
d194 16
@


1.4
log
@The method of declaring functions to be non-returning has changed.
@
text
@d6 3
a132 4
 *
 *  set_stack_underflow() is a ghastly hack which, when called from a signal
 *  handler, sets the stack register in the signal context to a value which
 *  will cause a disturbance.
a136 1
extern void set_stack_underflow(void);
a137 1

d166 4
a169 4
/*  On the SPARC the register windows need to be flushed to memory before
 *  the garbage collector can examine the stack state.  The function
 *  flush_windows() performs this action.
 */
@


1.3
log
@Add debugger trap.
@
text
@d6 3
d137 1
a137 1
extern nonreturning void c_raise(mlval exception);
d193 1
a193 1
extern nonreturning void generate_debugger_trap(void);
@


1.3.1.1
log
@branched from 1.3
@
text
@a5 3
 * Revision 1.3  1994/07/01  10:38:09  nickh
 * Add debugger trap.
 *
@


1.2
log
@new file
@
text
@d6 3
d182 9
@


1.1
log
@new file
@
text
@d5 4
a8 1
 * $Log: interface.h,v $
@
