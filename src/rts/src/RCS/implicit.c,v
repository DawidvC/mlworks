head	1.10;
access;
symbols
	MLW_daveb_inline_1_4_99:1.10.1
	MLWorks_21c0_1999_03_25:1.10
	MLWorks_20c1_1998_08_20:1.9
	MLWorks_20c0_1998_08_04:1.9
	MLWorks_20b2c2_1998_06_19:1.9
	MLWorks_20b2_Windows_1998_06_12:1.9
	MLWorks_20b1c1_1998_05_07:1.9
	MLWorks_20b0_1998_04_07:1.9
	MLWorks_20b0_1998_03_20:1.9
	MLWorks_20m2_1998_02_16:1.9
	MLWorks_MM_adapt:1.9.12
	MLWorks_20m1_1997_10_23:1.9
	MLWorks_11r1:1.9.9.1.1.1.1
	MLWorks_workspace_97:1.9.11
	MLWorks_dt_wizard:1.9.10
	MLWorks_11c0_1997_09_09:1.9.9.1.1.1
	MLWorks_10r3:1.9.9.1.3
	MLWorks_10r2_551:1.9.9.1.2
	MLWorks_11:1.9.9.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.9.9.1
	MLWorks_20m0_1997_06_20:1.9
	MLWorks_1_0_r2c2_1997_06_14:1.9.9.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.9.9.1
	MLWorks_1_0_r2c1_1997_05_12:1.9.9
	MLWorks_BugFix_1997_04_24:1.9
	MLWorks_1_0_r2_Win32_1997_04_11:1.9
	MLWorks_1_0_r2_Unix_1997_04_04:1.9
	MM_ML_release_korma_1997_04_01:1.9
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.9.7.1.1
	MLWorks_gui_1996_12_18:1.9.8
	MLWorks_1_0_Win32_1996_12_17:1.9.7
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.9.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.9.4.1
	JFHrts:1.9.6
	MLWorks_1_0_Irix_1996_11_28:1.9.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.9.5
	MLWorks_1_0_Unix_1996_11_14:1.9.4
	MLWorks_Open_Beta2_1996_10_11:1.9.3
	MLWorks_License_dev:1.9.2
	MLWorks_1_open_beta_1996_09_13:1.9.1
	MLWorks_Open_Beta_1996_08_22:1.9
	MLWorks_Beta_1996_07_02:1.9
	MLWorks_Beta_1996_06_07:1.9
	MLWorks_Beta_1996_06_06:1.9
	MLWorks_Beta_1996_06_05:1.9
	MLWorks_Beta_1996_06_03:1.9
	MLWorks_Beta_1996_05_31:1.9
	MLWorks_Beta_1996_05_30:1.9
	hope_poo:1.2.1
	ML_beta_release_12/08/94:1.2.1.1
	ML_beta_release_03/08/94:1.2;
locks; strict;
comment	@ * @;


1.10
date	98.07.30.11.03.04;	author jont;	state Exp;
branches
	1.10.1.1;
next	1.9;

1.9
date	95.12.11.15.43.18;	author nickb;	state Exp;
branches
	1.9.1.1
	1.9.2.1
	1.9.3.1
	1.9.4.1
	1.9.5.1
	1.9.6.1
	1.9.7.1
	1.9.8.1
	1.9.9.1
	1.9.10.1
	1.9.11.1
	1.9.12.1;
next	1.8;

1.8
date	95.06.19.14.36.10;	author nickb;	state Exp;
branches;
next	1.7;

1.7
date	95.06.02.15.06.28;	author jont;	state Exp;
branches;
next	1.6;

1.6
date	95.05.03.09.23.44;	author matthew;	state Exp;
branches;
next	1.5;

1.5
date	95.03.28.13.06.10;	author nickb;	state Exp;
branches;
next	1.4;

1.4
date	95.02.10.16.35.52;	author matthew;	state Exp;
branches;
next	1.3;

1.3
date	94.09.19.11.50.19;	author jont;	state Exp;
branches;
next	1.2;

1.2
date	94.06.09.14.37.02;	author nickh;	state Exp;
branches
	1.2.1.1;
next	1.1;

1.1
date	94.06.09.11.03.54;	author nickh;	state Exp;
branches;
next	;

1.2.1.1
date	95.07.05.10.31.20;	author hope;	state Exp;
branches;
next	;

1.9.1.1
date	96.09.13.11.22.33;	author hope;	state Exp;
branches;
next	;

1.9.2.1
date	96.10.07.16.12.39;	author hope;	state Exp;
branches;
next	;

1.9.3.1
date	96.10.17.11.31.42;	author hope;	state Exp;
branches;
next	;

1.9.4.1
date	96.11.14.12.57.45;	author hope;	state Exp;
branches
	1.9.4.1.1.1;
next	;

1.9.4.1.1.1
date	96.11.28.15.07.47;	author hope;	state Exp;
branches;
next	;

1.9.5.1
date	96.11.22.18.15.29;	author hope;	state Exp;
branches;
next	;

1.9.6.1
date	96.12.17.10.02.12;	author hope;	state Exp;
branches;
next	;

1.9.7.1
date	96.12.17.17.53.56;	author hope;	state Exp;
branches
	1.9.7.1.1.1;
next	;

1.9.7.1.1.1
date	97.02.24.11.44.58;	author hope;	state Exp;
branches;
next	;

1.9.8.1
date	96.12.18.09.48.31;	author hope;	state Exp;
branches;
next	;

1.9.9.1
date	97.05.12.10.40.55;	author hope;	state Exp;
branches
	1.9.9.1.1.1
	1.9.9.1.2.1
	1.9.9.1.3.1;
next	;

1.9.9.1.1.1
date	97.07.28.18.27.41;	author daveb;	state Exp;
branches
	1.9.9.1.1.1.1.1;
next	;

1.9.9.1.1.1.1.1
date	97.10.07.11.53.42;	author jkbrook;	state Exp;
branches;
next	;

1.9.9.1.2.1
date	97.09.08.17.20.47;	author daveb;	state Exp;
branches;
next	;

1.9.9.1.3.1
date	97.09.09.14.16.52;	author daveb;	state Exp;
branches;
next	;

1.9.10.1
date	97.09.10.19.35.10;	author brucem;	state Exp;
branches;
next	;

1.9.11.1
date	97.09.11.21.03.55;	author daveb;	state Exp;
branches;
next	;

1.9.12.1
date	97.10.31.13.46.53;	author nickb;	state Exp;
branches;
next	;

1.10.1.1
date	99.04.01.18.02.52;	author daveb;	state Exp;
branches;
next	;


desc
@new file
@


1.10
log
@[Bug #20133]
Initialise gc_real_limit
@
text
@/*  ==== THE IMPLICIT VECTOR ====
 *
 *  Copyright (C) 1991 Harlequin Ltd
 *
 *  IMPORTANT
 *  ---------
 *  This file is scanned automatically to produce the file
 *  implicit.sml so follow the instructions in the comments when
 *  modifying it.
 *
 *  Revision Log
 *  ------------
 *  $Log: src:implicit.c,v $
 * Revision 1.9  1995/12/11  15:43:18  nickb
 * Add space profiling for MIPS.
 *
 * Revision 1.8  1995/06/19  14:36:10  nickb
 * Add profiling slots.
 *
 * Revision 1.7  1995/06/02  15:06:28  jont
 * Add field for stack limit register (for Intel)
 *
 * Revision 1.6  1995/05/03  09:23:44  matthew
 * Removing debugger slots from implicit vector
 *
 * Revision 1.5  1995/03/28  13:06:10  nickb
 * Introduce the threads system.
 *
 * Revision 1.4  1995/02/10  16:35:52  matthew
 * Adding implicit vector entries for step and breakpoint functions
 *
 * Revision 1.3  1994/09/19  11:50:19  jont
 * Add PC slots for gc, handler and stack_limit
 *
 * Revision 1.2  1994/06/09  14:37:02  nickh
 * new file
 *
 * Revision 1.1  1994/06/09  11:03:54  nickh
 * new file
 *
 *  Revision 1.19  1993/11/05  14:32:16  jont
 *  Added check_event entries for leaf and non-leaf.
 *
 *  Revision 1.18  1993/04/22  16:50:46  jont
 *  Added leaf raise code
 *
 *  Revision 1.17  1993/04/14  13:24:05  richard
 *  Removed old junk.  Added entries for new tracing mechanism.
 *
 *  Revision 1.16  1992/11/11  11:38:16  clive
 *  Added a trace hook
 *
 *  Revision 1.15  1992/07/31  07:55:28  richard
 *  Added ml_trap, which might be useful.
 *
 *  Revision 1.14  1992/07/27  14:05:54  richard
 *  poly_equal was never used.
 *  ml_external is now ml_lookup_pervasive.
 *
 *  Revision 1.13  1992/07/22  13:39:37  clive
 *  Zeroed out profiler slot
 *
 *  Revision 1.12  1992/07/10  14:19:29  richard
 *  Removed redundent memory_profiler entry.
 *
 *  Revision 1.11  1992/07/03  13:51:11  richard
 *  The implicit vector is now a struct, since it contains
 *  various things of various types.
 *
 *  Revision 1.10  1992/06/17  13:38:14  richard
 *  Added ml_gc_leaf to implicit vector.
 *
 *  Revision 1.9  1992/05/08  16:32:06  clive
 *  Added code for memory profiling
 *
 *  Revision 1.8  1992/04/13  16:23:05  clive
 *  First version of the profiler
 *
 *  Revision 1.7  1992/03/25  09:52:37  richard
 *  Added ml_poly_equal to implicit vector.
 *
 *  Revision 1.6  1992/03/24  16:08:27  richard
 *  Removed obsolete `ml_preserve' from implicit vector.
 *
 *  Revision 1.5  1992/01/20  13:51:29  richard
 *  Added ref_chain.
 *
 *  Revision 1.4  1992/01/14  14:51:26  richard
 *  Added raise_code.
 *
 *  Revision 1.3  1992/01/08  12:48:16  richard
 *  Tidied up documentation, changed the names of the externals to be more
 *  meaningful and added a new external `extend'.
 *
 *  Revision 1.2  1992/01/03  12:44:30  richard
 *  Added ml_preserve to the implicit vector.
 *
 *  Revision 1.1  1991/10/24  16:24:22  davidt
 *  Initial revision
 */

#include "mltypes.h"
#include "values.h"
#include "state.h"
#include "interface.h"
#include "environment.h"
#include "global.h"

/* there is no longer a struct implicit_vector called implicit_vector;
 * its role has been subsumed by global_state.toplevel.implicit */

void initialize_top_thread_implicit(void)
{
  TOP_THREAD.implicit.gc 		= ml_gc;
  TOP_THREAD.implicit.gc_leaf	 	= ml_gc_leaf;
  TOP_THREAD.implicit.external		= ml_lookup_pervasive;
  TOP_THREAD.implicit.extend		= ml_disturbance;
  TOP_THREAD.implicit.raise		= ml_raise;
  TOP_THREAD.implicit.ml_raise_leaf	= ml_raise_leaf;
  TOP_THREAD.implicit.replace		= ml_replace;
  TOP_THREAD.implicit.replace_leaf	= ml_replace_leaf;
  TOP_THREAD.implicit.intercept		= ml_intercept;
  TOP_THREAD.implicit.intercept_leaf	= ml_intercept_leaf;
  TOP_THREAD.implicit.event_check	= ml_event_check;
  TOP_THREAD.implicit.event_check_leaf	= ml_event_check_leaf;

  TOP_THREAD.implicit.interrupt		= 0;
  TOP_THREAD.implicit.handler		= 0;
  TOP_THREAD.implicit.stack_limit	= 0;
  TOP_THREAD.implicit.register_stack_limit = 0;
  TOP_THREAD.implicit.gc_modified_list	= NULL;
  TOP_THREAD.implicit.gc_base		= 0;
  TOP_THREAD.implicit.gc_limit		= 0;
  TOP_THREAD.implicit.real_gc_limit	= 0;

#ifdef IMPLICIT_PROFILE_CODE
  {
    size_t bytes =
      ((char*)(&implicit_profile_alloc_code_end))-
	((char*)(&implicit_profile_alloc_code));

    memcpy (((char*)&TOP_THREAD.implicit.ml_profile_alloc),
	    ((char*)(&implicit_profile_alloc_code)),
	    bytes);
  }
#else
  TOP_THREAD.implicit.ml_profile_alloc      = (word)ml_profile_alloc;
  TOP_THREAD.implicit.ml_profile_alloc_leaf = (word)ml_profile_alloc_leaf;
#endif
}

/* don't do anything here now */
void implicit_init(void)
{
}
@


1.10.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a13 4
 * Revision 1.10  1998/07/30  11:03:04  jont
 * [Bug #20133]
 * Initialise gc_real_limit
 *
@


1.9
log
@Add space profiling for MIPS.
@
text
@d14 3
d134 1
@


1.9.12.1
log
@branched from trunk for label MLWorks_MM_adapt
@
text
@a13 3
 * Revision 1.9  1995/12/11  15:43:18  nickb
 * Add space profiling for MIPS.
 *
@


1.9.11.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a13 3
 * Revision 1.9  1995/12/11  15:43:18  nickb
 * Add space profiling for MIPS.
 *
@


1.9.10.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a13 3
 * Revision 1.9  1995/12/11  15:43:18  nickb
 * Add space profiling for MIPS.
 *
@


1.9.9.1
log
@branched from 1.9
@
text
@a13 3
 * Revision 1.9  1995/12/11  15:43:18  nickb
 * Add space profiling for MIPS.
 *
@


1.9.9.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a13 3
 * Revision 1.9.9.1  1997/05/12  10:40:55  hope
 * branched from 1.9
 *
@


1.9.9.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a13 3
 * Revision 1.9.9.1  1997/05/12  10:40:55  hope
 * branched from 1.9
 *
@


1.9.9.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a13 3
 * Revision 1.9.9.1  1997/05/12  10:40:55  hope
 * branched from 1.9
 *
@


1.9.9.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a13 3
 * Revision 1.9.9.1.1.1  1997/07/28  18:27:41  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.9.8.1
log
@branched from 1.9
@
text
@a13 3
 * Revision 1.9  1995/12/11  15:43:18  nickb
 * Add space profiling for MIPS.
 *
@


1.9.7.1
log
@branched from 1.9
@
text
@a13 3
 * Revision 1.9  1995/12/11  15:43:18  nickb
 * Add space profiling for MIPS.
 *
@


1.9.7.1.1.1
log
@branched from 1.9.7.1
@
text
@a13 3
 * Revision 1.9.7.1  1996/12/17  17:53:56  hope
 * branched from 1.9
 *
@


1.9.6.1
log
@branched from 1.9
@
text
@a13 3
 * Revision 1.9  1995/12/11  15:43:18  nickb
 * Add space profiling for MIPS.
 *
@


1.9.5.1
log
@branched from 1.9
@
text
@a13 3
 * Revision 1.9  1995/12/11  15:43:18  nickb
 * Add space profiling for MIPS.
 *
@


1.9.4.1
log
@branched from 1.9
@
text
@a13 3
 * Revision 1.9  1995/12/11  15:43:18  nickb
 * Add space profiling for MIPS.
 *
@


1.9.4.1.1.1
log
@branched from 1.9.4.1
@
text
@a13 3
 * Revision 1.9.4.1  1996/11/14  12:57:45  hope
 * branched from 1.9
 *
@


1.9.3.1
log
@branched from 1.9
@
text
@a13 3
 * Revision 1.9  1995/12/11  15:43:18  nickb
 * Add space profiling for MIPS.
 *
@


1.9.2.1
log
@branched from 1.9
@
text
@a13 3
 * Revision 1.9  1995/12/11  15:43:18  nickb
 * Add space profiling for MIPS.
 *
@


1.9.1.1
log
@branched from 1.9
@
text
@a13 3
 * Revision 1.9  1995/12/11  15:43:18  nickb
 * Add space profiling for MIPS.
 *
@


1.8
log
@Add profiling slots.
@
text
@d14 3
a110 2
  size_t bytes;

d132 14
a145 7
  bytes =
    ((char*)(&implicit_profile_alloc_code_end))-
    ((char*)(&implicit_profile_alloc_code));

  memcpy (((char*)&TOP_THREAD.implicit.ml_profile_alloc),
	  ((char*)(&implicit_profile_alloc_code)),
	  bytes);
@


1.7
log
@Add field for stack limit register (for Intel)
@
text
@d14 3
d108 2
d130 8
@


1.6
log
@Removing debugger slots from implicit vector
@
text
@d14 3
d121 1
@


1.5
log
@Introduce the threads system.
@
text
@d14 3
a120 49
  TOP_THREAD.implicit.breakpoint_fn	= MLUNIT;
  TOP_THREAD.implicit.exit_breakpoint_fn= MLUNIT;
  TOP_THREAD.implicit.stepper_fn	= MLUNIT;
  TOP_THREAD.implicit.stepper_handler_fn= MLUNIT;
}

/* four entries on the implicit vector are manipulated by the ML
 * debugger. They only need to be correct in the thread in which they
 * are set, but when an image is saved and reloaded these entries need
 * to be correct, so we also set them in the topmost thread. */

static mlval set_breakpoint_function (mlval arg)
{
  TOP_THREAD.implicit.breakpoint_fn = arg;
  CURRENT_THREAD->implicit.breakpoint_fn = arg;
  return (MLUNIT);
}

static mlval set_exit_breakpoint_function (mlval arg)
{
  TOP_THREAD.implicit.exit_breakpoint_fn = arg;
  CURRENT_THREAD->implicit.exit_breakpoint_fn = arg;
  return (MLUNIT);
}

static mlval set_stepper_function (mlval arg)
{
  TOP_THREAD.implicit.stepper_fn = arg;
  CURRENT_THREAD->implicit.stepper_fn = arg;
  return (MLUNIT);
}

static mlval set_stepper_handler_function (mlval arg)
{
  TOP_THREAD.implicit.stepper_handler_fn = arg;
  CURRENT_THREAD->implicit.stepper_handler_fn = arg;
  return (MLUNIT);
}

/* When an image is reloaded, we fix the above four implicit vector
 * values in the topmost thread and in thread 1 */

static void implicit_entry_fix(mlval *root, mlval value)
{
  size_t offset;
  *root = value;
  /* also fix the value in thread 1 */
  offset = (byte*)root - (byte*)&TOP_THREAD;
  *(mlval*)((byte*)TOP_THREAD.next + offset) = value;
d123 1
a125 19
  declare_global("debugger breakpoint fn",
		 &TOP_THREAD.implicit.breakpoint_fn,
		 implicit_entry_fix);
  declare_global("debugger stepper fn",
		 &TOP_THREAD.implicit.stepper_fn,
		 implicit_entry_fix);
  declare_global("debugger exit breakpoint fn",
		 &TOP_THREAD.implicit.exit_breakpoint_fn,
		 implicit_entry_fix);
  declare_global("debugger stepper handler fn",
		 &TOP_THREAD.implicit.stepper_handler_fn,
		 implicit_entry_fix);

  env_function("debugger set breakpoint function",set_breakpoint_function);
  env_function("debugger set stepper function",set_stepper_function);
  env_function("debugger set exit breakpoint function",
	       set_exit_breakpoint_function);
  env_function("debugger set stepper handler function",
	       set_stepper_handler_function);
@


1.4
log
@Adding implicit vector entries for step and breakpoint functions
@
text
@d14 3
d89 1
a89 1
#include "implicit.h"
d91 65
d157 13
a169 1
struct implicit_vector implicit_vector =
d171 20
a190 23
  /* ref_chain              */  NULL,
  /* gc                     */  ml_gc,
  /* gc_leaf                */  ml_gc_leaf,
  /* external               */  ml_lookup_pervasive,
  /* extend                 */  ml_disturbance,
  /* raise_code             */  ml_raise,
  /* leaf raise_code        */  ml_raise_leaf,
  /* replace		    */  ml_replace,
  /* replace_leaf	    */  ml_replace_leaf,
  /* intercept              */  ml_intercept,
  /* intercept_leaf         */  ml_intercept_leaf,
  /* interrupt              */  0,
  /* event_check	    */  ml_event_check,
  /* event_check_leaf	    */  ml_event_check_leaf,
  /* gc_base		    */  0, /* All set dynamically */
  /* gc_limit		    */  0,
  /* handler		    */  0,
  /* stack_limit	    */  0,
  /* breakpoint_fn	    */  MLUNIT,
  /* stepper_fn	    	    */  MLUNIT,
  /* exit_breakpoint_fn	    */  MLUNIT,
  /* stepper_handler_fn	    */  MLUNIT
};
@


1.3
log
@Add PC slots for gc, handler and stack_limit
@
text
@d14 3
d108 5
a112 1
  /* stack_limit	    */  0
@


1.2
log
@new file
@
text
@d14 3
d101 5
a105 1
  /* event_check_leaf	    */  ml_event_check_leaf
@


1.2.1.1
log
@branched from 1.2
@
text
@a13 3
 * Revision 1.2  1994/06/09  14:37:02  nickh
 * new file
 *
@


1.1
log
@new file
@
text
@d13 4
a16 1
 *  $Log: implicit.c,v $
@
