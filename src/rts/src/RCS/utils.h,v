head	1.11;
access;
symbols
	MLW_daveb_inline_1_4_99:1.11.1
	MLWorks_21c0_1999_03_25:1.11
	MLWorks_20c1_1998_08_20:1.11
	MLWorks_20c0_1998_08_04:1.11
	MLWorks_20b2c2_1998_06_19:1.11
	MLWorks_20b2_Windows_1998_06_12:1.11
	MLWorks_20b1c1_1998_05_07:1.9
	MLWorks_20b0_1998_04_07:1.9
	MLWorks_20b0_1998_03_20:1.8
	MLWorks_20m2_1998_02_16:1.8
	MLWorks_MM_adapt:1.8.12
	MLWorks_20m1_1997_10_23:1.8
	MLWorks_11r1:1.8.9.1.1.1.1
	MLWorks_workspace_97:1.8.11
	MLWorks_dt_wizard:1.8.10
	MLWorks_11c0_1997_09_09:1.8.9.1.1.1
	MLWorks_10r3:1.8.9.1.3
	MLWorks_10r2_551:1.8.9.1.2
	MLWorks_11:1.8.9.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.8.9.1
	MLWorks_20m0_1997_06_20:1.8
	MLWorks_1_0_r2c2_1997_06_14:1.8.9.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.8.9.1
	MLWorks_1_0_r2c1_1997_05_12:1.8.9
	MLWorks_BugFix_1997_04_24:1.8
	MLWorks_1_0_r2_Win32_1997_04_11:1.8
	MLWorks_1_0_r2_Unix_1997_04_04:1.8
	MM_ML_release_korma_1997_04_01:1.8
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.8.7.1.1
	MLWorks_gui_1996_12_18:1.8.8
	MLWorks_1_0_Win32_1996_12_17:1.8.7
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.8.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.8.4.1
	JFHrts:1.8.6
	MLWorks_1_0_Irix_1996_11_28:1.8.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.8.5
	MLWorks_1_0_Unix_1996_11_14:1.8.4
	MLWorks_Open_Beta2_1996_10_11:1.8.3
	MLWorks_License_dev:1.8.2
	MLWorks_1_open_beta_1996_09_13:1.8.1
	MLWorks_Open_Beta_1996_08_22:1.8
	MLWorks_Beta_1996_07_02:1.8
	MLWorks_Beta_1996_06_07:1.8
	MLWorks_Beta_1996_06_06:1.8
	MLWorks_Beta_1996_06_05:1.8
	MLWorks_Beta_1996_06_03:1.8
	MLWorks_Beta_1996_05_31:1.8
	MLWorks_Beta_1996_05_30:1.8
	hope_poo:1.3.1
	ML_beta_release_12/08/94:1.3.1.1
	ML_beta_release_03/08/94:1.3;
locks; strict;
comment	@ * @;


1.11
date	98.05.26.15.40.12;	author mitchell;	state Exp;
branches
	1.11.1.1;
next	1.10;

1.10
date	98.05.19.14.41.24;	author jont;	state Exp;
branches;
next	1.9;

1.9
date	98.03.26.15.02.43;	author jont;	state Exp;
branches;
next	1.8;

1.8
date	96.05.14.13.23.08;	author nickb;	state Exp;
branches
	1.8.1.1
	1.8.2.1
	1.8.3.1
	1.8.4.1
	1.8.5.1
	1.8.6.1
	1.8.7.1
	1.8.8.1
	1.8.9.1
	1.8.10.1
	1.8.11.1
	1.8.12.1;
next	1.7;

1.7
date	96.01.11.16.39.42;	author nickb;	state Exp;
branches;
next	1.6;

1.6
date	95.06.09.15.54.25;	author nickb;	state Exp;
branches;
next	1.5;

1.5
date	95.01.24.14.29.54;	author daveb;	state Exp;
branches;
next	1.4;

1.4
date	94.10.19.15.22.33;	author nickb;	state Exp;
branches;
next	1.3;

1.3
date	94.06.30.11.48.20;	author nickh;	state Exp;
branches
	1.3.1.1;
next	1.2;

1.2
date	94.06.09.14.47.08;	author nickh;	state Exp;
branches;
next	1.1;

1.1
date	94.06.09.11.18.18;	author nickh;	state Exp;
branches;
next	;

1.3.1.1
date	95.07.05.10.31.04;	author hope;	state Exp;
branches;
next	;

1.8.1.1
date	96.09.13.11.24.17;	author hope;	state Exp;
branches;
next	;

1.8.2.1
date	96.10.07.16.14.36;	author hope;	state Exp;
branches;
next	;

1.8.3.1
date	96.10.17.11.34.03;	author hope;	state Exp;
branches;
next	;

1.8.4.1
date	96.11.14.12.59.42;	author hope;	state Exp;
branches
	1.8.4.1.1.1;
next	;

1.8.4.1.1.1
date	96.11.28.15.09.44;	author hope;	state Exp;
branches;
next	;

1.8.5.1
date	96.11.22.18.17.29;	author hope;	state Exp;
branches;
next	;

1.8.6.1
date	96.12.17.10.04.13;	author hope;	state Exp;
branches;
next	;

1.8.7.1
date	96.12.17.17.55.49;	author hope;	state Exp;
branches
	1.8.7.1.1.1;
next	;

1.8.7.1.1.1
date	97.02.24.11.47.22;	author hope;	state Exp;
branches;
next	;

1.8.8.1
date	96.12.18.09.50.25;	author hope;	state Exp;
branches;
next	;

1.8.9.1
date	97.05.12.10.44.07;	author hope;	state Exp;
branches
	1.8.9.1.1.1
	1.8.9.1.2.1
	1.8.9.1.3.1;
next	;

1.8.9.1.1.1
date	97.07.28.18.29.06;	author daveb;	state Exp;
branches
	1.8.9.1.1.1.1.1;
next	;

1.8.9.1.1.1.1.1
date	97.10.07.11.54.57;	author jkbrook;	state Exp;
branches;
next	;

1.8.9.1.2.1
date	97.09.08.17.22.04;	author daveb;	state Exp;
branches;
next	;

1.8.9.1.3.1
date	97.09.09.14.18.08;	author daveb;	state Exp;
branches;
next	;

1.8.10.1
date	97.09.10.19.37.28;	author brucem;	state Exp;
branches;
next	;

1.8.11.1
date	97.09.11.21.05.24;	author daveb;	state Exp;
branches;
next	;

1.8.12.1
date	97.10.31.13.48.27;	author nickb;	state Exp;
branches;
next	;

1.11.1.1
date	99.04.01.18.04.08;	author daveb;	state Exp;
branches;
next	;


desc
@new file
@


1.11
log
@[Bug #30411]
Support for time-limited runtime
@
text
@/*  ==== MISCELLANEOUS UTILITY FUNCTIONS ====
 *
 *  Copyright (C) 1991 Harlequin Ltd.
 *
 *  $Log: src:utils.h,v $
 * Revision 1.10  1998/05/19  14:41:24  jont
 * [Bug #70120]
 * Make error_without_alloc nonreturning
 *
 * Revision 1.9  1998/03/26  15:02:43  jont
 * [Bug #30090]
 * Add format_to_ml_string for use when making syserr
 *
 * Revision 1.8  1996/05/14  13:23:08  nickb
 * Add standard streams out-of-memory dialog.
 *
 * Revision 1.7  1996/01/11  16:39:42  nickb
 * Runtime error message buffer problem.
 *
 * Revision 1.6  1995/06/09  15:54:25  nickb
 * Add alloc_zero.
 *
 * Revision 1.5  1995/01/24  14:29:54  daveb
 * Removed MAXIMUM_RUNTIME_MESSAGE_SIZE, which was not used.
 *
 * Revision 1.4  1994/10/19  15:22:33  nickb
 * The method of declaring functions to be non-returning has changed.
 *
 * Revision 1.3  1994/06/30  11:48:20  nickh
 * Add messaging function hooks.
 *
 * Revision 1.2  1994/06/09  14:47:08  nickh
 * new file
 *
 * Revision 1.1  1994/06/09  11:18:18  nickh
 * new file
 *
 *  Revision 1.10  1993/08/26  18:46:15  daveb
 *  The runtime reads the module name from the consistency information in the
 *  file.  Therefore module_name() isn't needed any more.
 *
 *  Revision 1.9  1993/08/12  13:48:52  daveb
 *  Replaced basename with module_name.
 *
 *  Revision 1.8  1993/06/22  11:14:42  richard
 *  Moved stack backtrace here from GC and top-level handler.
 *
 *  Revision 1.7  1992/07/20  10:09:52  richard
 *  Added is_ml_frame().
 *
 *  Revision 1.6  1992/06/30  09:40:31  richard
 *  Moved some declarations to storeman.h.
 *
 *  Revision 1.5  1992/03/12  16:47:55  richard
 *  Made basename() take a const argument.
 *
 *  Revision 1.4  1992/01/20  16:00:20  richard
 *  Changed message() and error() to use variable argument lists.
 *
 *  Revision 1.3  1991/12/23  13:18:45  richard
 *  Changed the names of runtime_error() and runtime_message() to preserve
 *  the six-character monocase uniqueness required by ANSI.  Added basename().
 *
 *  Revision 1.2  91/12/19  16:01:42  richard
 *  Added an exit code to runtime_error().
 * 
 *  Revision 1.1  91/10/18  13:08:35  davidt
 *  Initial revision
 */


#ifndef utils_h
#define utils_h

#include <stdio.h>
#include <time.h>
#include <stdarg.h>

#include "extensions.h"
#include "mltypes.h"

/* Runtime messages */

/* NOTE: a fixed-sized buffer is used to format messages. Messages
 * containing strings of unknown length (e.g. file names, paths,
 * unrecognised command-line options), must therefore be split up
 * using message_start(), message_end() and passing the strings using
 * message_string().
 *
 *** Failure to observe this discipline may cause memory corruption ***/

/* The function message() writes a [bracketed] message to the MLWorks
 * message 'stream' in a manner similar to fprintf().
 *
 * If messager_function is non-NULL, it is applied to the formatted
 * message (it might, for instance, putthe message in a window). If
 * message_flusher is non-NULL, it is then applied.
 *
 * If messager_function is NULL, the message is printed to stderr. 
 */
extern void (*messager_function) (const char * message);
extern void (*message_flusher)(void);

extern void message(const char *format, ...);

/* These functions can be used to construct large messages. They
 * output strings in the same manner as message() above, but the
 * message brackets [ ... ] are output by message_start() and
 * message_end, and {v}message_content() can be used to output 
 * intervening parts of the message. 
 *
 * message_string() MUST be used when outputting strings of unknown
 * length. */

extern void message_start(void);
extern void message_end(void);
extern void message_content(const char *format, ...);
extern void message_string(const char *string);

extern void vmessage_content(const char *format, va_list arg);

/* The functions message_stderr() and error() write a message to
 *  stderr using fprintf(). error() displays the message as a fatal
 *  error message and terminates the runtime system.  It does not
 *  return.  It may call malloc() and therefore should not be called
 *  before the C heap is allocated. 
 */

extern void message_stderr(const char *format, ...);
nonreturning (extern void, error,(const char *format, ...));

/* error_without_alloc prints an error message to stderr and exits
 * without calling anything which allocates (as printf does sometimes).
 * This is for use before the arena is initialized. */

nonreturning(extern void, error_without_alloc, (const char *string));

/*  alloc() is a variation on malloc() which, if unable to allocate memory,
 *  causes a fatal error in a manner similar to error(). */

extern void *alloc(size_t size, const char *format, ...);
extern void *alloc_zero(size_t size, const char *format, ...);

/* standard_out_of_memory_dialog uses the standard streams to conduct
 * an out-of-memory dialog with the user. It returns non-zero iff a
 * retry is appropriate. */

extern int standard_out_of_memory_dialog(unsigned long int attempt,
					 size_t extent,
					 size_t size);

extern void check_elapsed_time(void);

extern void display_simple_message_box(const char *message);

extern mlval format_to_ml_string(const char *format, ...);

#endif
@


1.11.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a5 4
 * Revision 1.11  1998/05/26  15:40:12  mitchell
 * [Bug #30411]
 * Support for time-limited runtime
 *
@


1.10
log
@[Bug #70120]
Make error_without_alloc nonreturning
@
text
@d6 4
d151 4
@


1.9
log
@[Bug #30090]
Add format_to_ml_string for use when making syserr
@
text
@d6 4
d132 1
a132 1
extern void error_without_alloc(const char *string);
@


1.8
log
@Add standard streams out-of-memory dialog.
@
text
@d6 3
d72 1
d143 2
@


1.8.12.1
log
@branched from trunk for label MLWorks_MM_adapt
@
text
@a5 3
 * Revision 1.8  1996/05/14  13:23:08  nickb
 * Add standard streams out-of-memory dialog.
 *
@


1.8.11.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a5 3
 * Revision 1.8  1996/05/14  13:23:08  nickb
 * Add standard streams out-of-memory dialog.
 *
@


1.8.10.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a5 3
 * Revision 1.8  1996/05/14  13:23:08  nickb
 * Add standard streams out-of-memory dialog.
 *
@


1.8.9.1
log
@branched from 1.8
@
text
@a5 3
 * Revision 1.8  1996/05/14  13:23:08  nickb
 * Add standard streams out-of-memory dialog.
 *
@


1.8.9.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a5 3
 * Revision 1.8.9.1  1997/05/12  10:44:07  hope
 * branched from 1.8
 *
@


1.8.9.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a5 3
 * Revision 1.8.9.1  1997/05/12  10:44:07  hope
 * branched from 1.8
 *
@


1.8.9.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a5 3
 * Revision 1.8.9.1  1997/05/12  10:44:07  hope
 * branched from 1.8
 *
@


1.8.9.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a5 3
 * Revision 1.8.9.1.1.1  1997/07/28  18:29:06  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.8.8.1
log
@branched from 1.8
@
text
@a5 3
 * Revision 1.8  1996/05/14  13:23:08  nickb
 * Add standard streams out-of-memory dialog.
 *
@


1.8.7.1
log
@branched from 1.8
@
text
@a5 3
 * Revision 1.8  1996/05/14  13:23:08  nickb
 * Add standard streams out-of-memory dialog.
 *
@


1.8.7.1.1.1
log
@branched from 1.8.7.1
@
text
@a5 3
 * Revision 1.8.7.1  1996/12/17  17:55:49  hope
 * branched from 1.8
 *
@


1.8.6.1
log
@branched from 1.8
@
text
@a5 3
 * Revision 1.8  1996/05/14  13:23:08  nickb
 * Add standard streams out-of-memory dialog.
 *
@


1.8.5.1
log
@branched from 1.8
@
text
@a5 3
 * Revision 1.8  1996/05/14  13:23:08  nickb
 * Add standard streams out-of-memory dialog.
 *
@


1.8.4.1
log
@branched from 1.8
@
text
@a5 3
 * Revision 1.8  1996/05/14  13:23:08  nickb
 * Add standard streams out-of-memory dialog.
 *
@


1.8.4.1.1.1
log
@branched from 1.8.4.1
@
text
@a5 3
 * Revision 1.8.4.1  1996/11/14  12:59:42  hope
 * branched from 1.8
 *
@


1.8.3.1
log
@branched from 1.8
@
text
@a5 3
 * Revision 1.8  1996/05/14  13:23:08  nickb
 * Add standard streams out-of-memory dialog.
 *
@


1.8.2.1
log
@branched from 1.8
@
text
@a5 3
 * Revision 1.8  1996/05/14  13:23:08  nickb
 * Add standard streams out-of-memory dialog.
 *
@


1.8.1.1
log
@branched from 1.8
@
text
@a5 3
 * Revision 1.8  1996/05/14  13:23:08  nickb
 * Add standard streams out-of-memory dialog.
 *
@


1.7
log
@Runtime error message buffer problem.
@
text
@d6 3
d131 8
@


1.6
log
@Add alloc_zero.
@
text
@d6 3
d67 18
a84 7
/* The function message() writes a message to the MLWorks message
 *  'stream' in a manner similar to fprintf().  It may call malloc()
 * and therefore should not be called before the C heap is allocated.
 *
 * If the variable messager_function is NULL, the message is written to
 * stderr. Otherwise messager_function is applied to the message (this
 * might, for instance, put the message in a window).
a85 1

d89 1
a89 1
extern void message(const char *, ...);
d91 8
a98 5
/* These three functions can be used to construct large messages. They
 *  output strings in the same manner as message() above, but the
 *  message brackets [ ... ] are output by message_start() and
 *  message_end, and {v}message_content() can be used to output the
 *  intervening parts of the message without the brackets. */
d102 4
a105 2
extern void message_content(const char *, ...);
extern void vmessage_content(const char *, va_list arg);
d111 2
a112 1
 *  before the C heap is allocated.  */
d114 2
a115 2
extern void message_stderr(const char *, ...);
nonreturning (extern void, error,(const char *, ...));
d124 1
a124 2
 *  causes a fatal error in a manner similar to error().
 */
d126 2
a127 2
extern void *alloc(size_t size, const char *, ...);
extern void *alloc_zero(size_t size, const char *, ...);
@


1.5
log
@Removed MAXIMUM_RUNTIME_MESSAGE_SIZE, which was not used.
@
text
@d6 3
d109 1
@


1.4
log
@The method of declaring functions to be non-returning has changed.
@
text
@d6 3
a68 2

#define MAXIMUM_RUNTIME_MESSAGE_SIZE 160
@


1.3
log
@Add messaging function hooks.
@
text
@d6 3
d92 1
a92 1
extern nonreturning void error(const char *, ...);
@


1.3.1.1
log
@branched from 1.3
@
text
@a5 3
 * Revision 1.3  1994/06/30  11:48:20  nickh
 * Add messaging function hooks.
 *
@


1.2
log
@new file
@
text
@d6 3
d51 1
d55 7
a61 5
/*  The functions message() and error() write a message to the standard
 *  error stream in a manner similar to fprintf().  The function error()
 *  displays the message as a fatal error message and terminates the runtime
 *  system.  It does not return.  Either function may call malloc() and
 *  therefore should not be called before the C heap is allocated.
d64 5
d70 19
@


1.1
log
@new file
@
text
@d5 4
a8 1
 *  $Log: utils.h,v $
@
