head	1.3;
access;
symbols
	MLW_daveb_inline_1_4_99:1.3.13
	MLWorks_21c0_1999_03_25:1.3
	MLWorks_20c1_1998_08_20:1.3
	MLWorks_20c0_1998_08_04:1.3
	MLWorks_20b2c2_1998_06_19:1.3
	MLWorks_20b2_Windows_1998_06_12:1.3
	MLWorks_20b1c1_1998_05_07:1.3
	MLWorks_20b0_1998_04_07:1.3
	MLWorks_20b0_1998_03_20:1.3
	MLWorks_20m2_1998_02_16:1.3
	MLWorks_MM_adapt:1.3.12
	MLWorks_20m1_1997_10_23:1.3
	MLWorks_11r1:1.3.9.1.1.1.1
	MLWorks_workspace_97:1.3.11
	MLWorks_dt_wizard:1.3.10
	MLWorks_11c0_1997_09_09:1.3.9.1.1.1
	MLWorks_10r3:1.3.9.1.3
	MLWorks_10r2_551:1.3.9.1.2
	MLWorks_11:1.3.9.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.3.9.1
	MLWorks_20m0_1997_06_20:1.3
	MLWorks_1_0_r2c2_1997_06_14:1.3.9.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.3.9.1
	MLWorks_1_0_r2c1_1997_05_12:1.3.9
	MLWorks_BugFix_1997_04_24:1.3
	MLWorks_1_0_r2_Win32_1997_04_11:1.3
	MLWorks_1_0_r2_Unix_1997_04_04:1.3
	MM_ML_release_korma_1997_04_01:1.3
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.3.7.1.1
	MLWorks_gui_1996_12_18:1.3.8
	MLWorks_1_0_Win32_1996_12_17:1.3.7
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.3.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.3.4.1
	JFHrts:1.3.6
	MLWorks_1_0_Irix_1996_11_28:1.3.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.3.5
	MLWorks_1_0_Unix_1996_11_14:1.3.4
	MLWorks_Open_Beta2_1996_10_11:1.3.3
	MLWorks_License_dev:1.3.2
	MLWorks_1_open_beta_1996_09_13:1.3.1
	MLWorks_Open_Beta_1996_08_22:1.3
	MLWorks_Beta_1996_07_02:1.3
	MLWorks_Beta_1996_06_07:1.3
	MLWorks_Beta_1996_06_06:1.3
	MLWorks_Beta_1996_06_05:1.3
	MLWorks_Beta_1996_06_03:1.3
	MLWorks_Beta_1996_05_31:1.3
	MLWorks_Beta_1996_05_30:1.3
	hope_poo:1.2.1
	ML_beta_release_12/08/94:1.2.1.1
	ML_beta_release_03/08/94:1.2;
locks; strict;
comment	@ * @;


1.3
date	96.02.14.10.12.47;	author jont;	state Exp;
branches
	1.3.1.1
	1.3.2.1
	1.3.3.1
	1.3.4.1
	1.3.5.1
	1.3.6.1
	1.3.7.1
	1.3.8.1
	1.3.9.1
	1.3.10.1
	1.3.11.1
	1.3.12.1
	1.3.13.1;
next	1.2;

1.2
date	94.06.09.14.44.33;	author nickh;	state Exp;
branches
	1.2.1.1;
next	1.1;

1.1
date	94.06.09.11.13.20;	author nickh;	state Exp;
branches;
next	;

1.2.1.1
date	95.07.05.10.30.13;	author hope;	state Exp;
branches;
next	;

1.3.1.1
date	96.09.13.11.22.02;	author hope;	state Exp;
branches;
next	;

1.3.2.1
date	96.10.07.16.12.07;	author hope;	state Exp;
branches;
next	;

1.3.3.1
date	96.10.17.11.31.01;	author hope;	state Exp;
branches;
next	;

1.3.4.1
date	96.11.14.12.56.55;	author hope;	state Exp;
branches
	1.3.4.1.1.1;
next	;

1.3.4.1.1.1
date	96.11.28.15.07.13;	author hope;	state Exp;
branches;
next	;

1.3.5.1
date	96.11.22.18.14.53;	author hope;	state Exp;
branches;
next	;

1.3.6.1
date	96.12.17.10.01.41;	author hope;	state Exp;
branches;
next	;

1.3.7.1
date	96.12.17.17.53.25;	author hope;	state Exp;
branches
	1.3.7.1.1.1;
next	;

1.3.7.1.1.1
date	97.02.24.11.44.23;	author hope;	state Exp;
branches;
next	;

1.3.8.1
date	96.12.18.09.47.58;	author hope;	state Exp;
branches;
next	;

1.3.9.1
date	97.05.12.10.40.23;	author hope;	state Exp;
branches
	1.3.9.1.1.1
	1.3.9.1.2.1
	1.3.9.1.3.1;
next	;

1.3.9.1.1.1
date	97.07.28.18.25.07;	author daveb;	state Exp;
branches
	1.3.9.1.1.1.1.1;
next	;

1.3.9.1.1.1.1.1
date	97.10.07.11.51.01;	author jkbrook;	state Exp;
branches;
next	;

1.3.9.1.2.1
date	97.09.08.17.18.21;	author daveb;	state Exp;
branches;
next	;

1.3.9.1.3.1
date	97.09.09.14.14.32;	author daveb;	state Exp;
branches;
next	;

1.3.10.1
date	97.09.10.19.30.57;	author brucem;	state Exp;
branches;
next	;

1.3.11.1
date	97.09.11.21.00.32;	author daveb;	state Exp;
branches;
next	;

1.3.12.1
date	97.10.31.13.43.38;	author nickb;	state Exp;
branches;
next	;

1.3.13.1
date	99.04.01.18.00.39;	author daveb;	state Exp;
branches;
next	;


desc
@new file
@


1.3
log
@Add a type cast to avoid compiler warnings under VC++
@
text
@/*  ==== COMMAND LINE OPTIONS PARSER ====
 *
 *  Copyright (C) 1992 Harlequin Ltd.
 *
 *  Implementation
 *  --------------
 *
 *  Revision Log
 *  ------------
 *  $Log: src:options.c,v $
 * Revision 1.2  1994/06/09  14:44:33  nickh
 * new file
 *
 * Revision 1.1  1994/06/09  11:13:20  nickh
 * new file
 *
 *  Revision 1.6  1994/01/26  17:03:41  nickh
 *  Moved extern function declarations to header files.
 *
 *  Revision 1.5  1993/06/02  13:06:37  richard
 *  Improved the use of const on the argv parameter type.
 *
 *  Revision 1.4  1993/06/01  15:39:36  richard
 *  Removed unused variable.
 *
 *  Revision 1.3  1993/04/30  12:36:40  richard
 *  Multiple arguments can now be passed to the storage manager in a general
 *  way.
 *
 *  Revision 1.2  1992/09/01  11:19:01  richard
 *  Implemented delimited options.
 *
 *  Revision 1.1  1992/03/18  14:07:38  richard
 *  Initial revision
 *
 */


#include "ansi.h"
#include "options.h"
#include "utils.h"

#include <string.h>
#include <errno.h>


int option_parse(int *argcp,
		 argv_t *argvp,
		 struct option *options[])
{
  /* While there are strings left in the command line array... */
  while(*argcp != 0)
  {
    const char *arg = (*argvp)[0];
    int argc = *argcp;
    argv_t argv = *argvp;
    size_t i;

    /* If the argument isn't an option then we're finished. */
    if(arg[0] != OPTION_CHAR)
      return(1);

    *argcp -= 1;
    *argvp += 1;

    /* If the argument is the special double-option character then we're */
    /* finished, and argv points to the next argument. */
    if(arg[1] == OPTION_CHAR && arg[2] == '\0')
      return(1);

    for(i=0; options[i]->name != NULL; ++i)
      if(strcmp(options[i]->name, arg+1) == 0)
      {
	size_t n = options[i]->nr_arguments;

	/* If the option count is negative then it's a variable length */
	/* argument list delimited by the next argument. */

	if(n == -1)
	{
	  const char *delimiter;

	  if(*argcp < 2)
	  {
	    errno = EOPTIONARGS;
	    *argcp = argc;
	    *argvp = argv;
	    return(0);
	  }

	  options[i]->arguments = *argvp+1;

	  delimiter = (*argvp)[0];
	  do
	  {
	    ++options[i]->nr_arguments;
	    *argcp -= 1;
	    *argvp += 1;

	    if(*argcp == 0)
	    {
	      errno = EOPTIONDELIM;
	      *argcp = argc;
	      *argvp = argv;
	      return(0);
	    }
	  }
	  while(strcmp((*argvp)[0], delimiter) != 0);

	  *argcp -= 1;
	  *argvp += 1;
	  options[i]->specified = 1;
	}
	else
	{
	  /* It's an ordinary argument list of length n. */

	  if((unsigned)*argcp < n)
	  {
	    errno = EOPTIONARGS;
	    *argcp = argc;
	    *argvp = argv;
	    return(0);
	  }

	  options[i]->specified = 1;
	  options[i]->arguments = *argvp;

	  *argcp -= n;
	  *argvp += n;
	}

	goto found;
      }

    errno = EOPTIONUNKNOWN;
    *argcp += 1;
    *argvp -= 1;
    return(0);

    found: continue;
  }

  return(1);
}


int to_int(const char *s)
{
  int n;
  char dummy;

  if(sscanf(s, " %d%c", &n, &dummy) != 1)
    error("`%s' is not a number.", s);

  return(n);
}


unsigned int to_unsigned(const char *s)
{
  unsigned int n;
  char dummy;

  if(sscanf(s, " %u%c", &n, &dummy) != 1)
    error("`%s' is not an unsigned number.", s);

  return(n);
}

@


1.3.13.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a10 3
 * Revision 1.3  1996/02/14  10:12:47  jont
 * Add a type cast to avoid compiler warnings under VC++
 *
@


1.3.12.1
log
@branched from trunk for label MLWorks_MM_adapt
@
text
@a10 3
 * Revision 1.3  1996/02/14  10:12:47  jont
 * Add a type cast to avoid compiler warnings under VC++
 *
@


1.3.11.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a10 3
 * Revision 1.3  1996/02/14  10:12:47  jont
 * Add a type cast to avoid compiler warnings under VC++
 *
@


1.3.10.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a10 3
 * Revision 1.3  1996/02/14  10:12:47  jont
 * Add a type cast to avoid compiler warnings under VC++
 *
@


1.3.9.1
log
@branched from 1.3
@
text
@a10 3
 * Revision 1.3  1996/02/14  10:12:47  jont
 * Add a type cast to avoid compiler warnings under VC++
 *
@


1.3.9.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a10 3
 * Revision 1.3.9.1  1997/05/12  10:40:23  hope
 * branched from 1.3
 *
@


1.3.9.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a10 3
 * Revision 1.3.9.1  1997/05/12  10:40:23  hope
 * branched from 1.3
 *
@


1.3.9.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a10 3
 * Revision 1.3.9.1  1997/05/12  10:40:23  hope
 * branched from 1.3
 *
@


1.3.9.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a10 3
 * Revision 1.3.9.1.1.1  1997/07/28  18:25:07  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.3.8.1
log
@branched from 1.3
@
text
@a10 3
 * Revision 1.3  1996/02/14  10:12:47  jont
 * Add a type cast to avoid compiler warnings under VC++
 *
@


1.3.7.1
log
@branched from 1.3
@
text
@a10 3
 * Revision 1.3  1996/02/14  10:12:47  jont
 * Add a type cast to avoid compiler warnings under VC++
 *
@


1.3.7.1.1.1
log
@branched from 1.3.7.1
@
text
@a10 3
 * Revision 1.3.7.1  1996/12/17  17:53:25  hope
 * branched from 1.3
 *
@


1.3.6.1
log
@branched from 1.3
@
text
@a10 3
 * Revision 1.3  1996/02/14  10:12:47  jont
 * Add a type cast to avoid compiler warnings under VC++
 *
@


1.3.5.1
log
@branched from 1.3
@
text
@a10 3
 * Revision 1.3  1996/02/14  10:12:47  jont
 * Add a type cast to avoid compiler warnings under VC++
 *
@


1.3.4.1
log
@branched from 1.3
@
text
@a10 3
 * Revision 1.3  1996/02/14  10:12:47  jont
 * Add a type cast to avoid compiler warnings under VC++
 *
@


1.3.4.1.1.1
log
@branched from 1.3.4.1
@
text
@a10 3
 * Revision 1.3.4.1  1996/11/14  12:56:55  hope
 * branched from 1.3
 *
@


1.3.3.1
log
@branched from 1.3
@
text
@a10 3
 * Revision 1.3  1996/02/14  10:12:47  jont
 * Add a type cast to avoid compiler warnings under VC++
 *
@


1.3.2.1
log
@branched from 1.3
@
text
@a10 3
 * Revision 1.3  1996/02/14  10:12:47  jont
 * Add a type cast to avoid compiler warnings under VC++
 *
@


1.3.1.1
log
@branched from 1.3
@
text
@a10 3
 * Revision 1.3  1996/02/14  10:12:47  jont
 * Add a type cast to avoid compiler warnings under VC++
 *
@


1.2
log
@new file
@
text
@d11 3
d118 1
a118 1
	  if(*argcp < n)
@


1.2.1.1
log
@branched from 1.2
@
text
@a10 3
 * Revision 1.2  1994/06/09  14:44:33  nickh
 * new file
 *
@


1.1
log
@new file
@
text
@d10 4
a13 1
 *  $Log: options.c,v $
@
