head	1.3;
access;
symbols
	MLW_daveb_inline_1_4_99:1.3.1
	MLWorks_21c0_1999_03_25:1.3
	MLWorks_20c1_1998_08_20:1.2
	MLWorks_20c0_1998_08_04:1.2
	MLWorks_20b2c2_1998_06_19:1.1
	MLWorks_20b2_Windows_1998_06_12:1.1;
locks; strict;
comment	@ * @;


1.3
date	99.03.09.15.55.16;	author mitchell;	state Exp;
branches
	1.3.1.1;
next	1.2;

1.2
date	98.07.30.15.03.33;	author jkbrook;	state Exp;
branches;
next	1.1;

1.1
date	98.06.11.19.11.58;	author jkbrook;	state Exp;
branches;
next	;

1.3.1.1
date	99.04.01.18.01.04;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
Start to centralise version information
@


1.3
log
@[Bug #190509]
Update version strings to 2.1
@
text
@/*  === LICENSING ===
 *
 *  Copyright (C) 1998 Harlequin Group plc.
 *
 *  Description
 *  -----------
 *  Centralised location for version information in runtime 
 *
 *  $Log: src:version.h,v $
 * Revision 1.2  1998/07/30  15:03:33  jkbrook
 * [Bug #30456]
 * Update for 2.0c0
 *
 * Revision 1.1  1998/06/11  19:11:58  jkbrook
 * new unit
 * Start to centralise version information
 *
 *
 */

/* 
   This is currently used to differentiate stored licence files and
   registry entries.  If version is full, then candidate numbers should
   be ignored as licences will need to be reinstalled too often.

   The problem of specifying these things explicitly will disappear 
   when this file represents version info in a simliarly structured 
   way to main/__version.sml.
*/

#define VERSION_STR "2.1"

#define MAJOR_VERSION 2.1

@


1.3.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a9 4
 * Revision 1.3  1999/03/09  15:55:16  mitchell
 * [Bug #190509]
 * Update version strings to 2.1
 *
@


1.2
log
@[Bug #30456]
Update for 2.0c0
@
text
@d10 4
d31 1
a31 1
#define VERSION_STR "2.0"
d33 1
a33 1
#define MAJOR_VERSION 2.0
@


1.1
log
@new unit
Start to centralise version information
@
text
@d9 5
a13 1
 *  $Log:$
d17 11
a27 1
#define VERSION_STR "2.0b2"
@
