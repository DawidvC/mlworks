head	1.3;
access;
symbols
	MLW_daveb_inline_1_4_99:1.3.4
	MLWorks_21c0_1999_03_25:1.3
	MLWorks_20c1_1998_08_20:1.3
	MLWorks_20c0_1998_08_04:1.3
	MLWorks_20b2c2_1998_06_19:1.3
	MLWorks_20b2_Windows_1998_06_12:1.3
	MLWorks_20b1c1_1998_05_07:1.3
	MLWorks_20b0_1998_04_07:1.3
	MLWorks_20b0_1998_03_20:1.3
	MLWorks_20m2_1998_02_16:1.3
	MLWorks_MM_adapt:1.3.3
	MLWorks_20m1_1997_10_23:1.3
	MLWorks_11r1:1.2.9.1.1.1.1
	MLWorks_workspace_97:1.3.2
	MLWorks_dt_wizard:1.3.1
	MLWorks_11c0_1997_09_09:1.2.9.1.1.1
	MLWorks_10r3:1.2.9.1.3
	MLWorks_10r2_551:1.2.9.1.2
	MLWorks_11:1.2.9.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.2.9.1
	MLWorks_20m0_1997_06_20:1.3
	MLWorks_1_0_r2c2_1997_06_14:1.2.9.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.2.9.1
	MLWorks_1_0_r2c1_1997_05_12:1.2.9
	MLWorks_BugFix_1997_04_24:1.2
	MLWorks_1_0_r2_Win32_1997_04_11:1.2
	MLWorks_1_0_r2_Unix_1997_04_04:1.2
	MM_ML_release_korma_1997_04_01:1.2
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.2.7.1.1
	MLWorks_gui_1996_12_18:1.2.8
	MLWorks_1_0_Win32_1996_12_17:1.2.7
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.2.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.2.4.1
	JFHrts:1.2.6
	MLWorks_1_0_Irix_1996_11_28:1.2.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.2.5
	MLWorks_1_0_Unix_1996_11_14:1.2.4
	MLWorks_Open_Beta2_1996_10_11:1.2.3
	MLWorks_License_dev:1.2.2
	MLWorks_1_open_beta_1996_09_13:1.2.1
	MLWorks_Open_Beta_1996_08_22:1.2
	MLWorks_Beta_1996_07_02:1.2
	MLWorks_Beta_1996_06_07:1.2
	MLWorks_Beta_1996_06_06:1.2
	MLWorks_Beta_1996_06_05:1.2
	MLWorks_Beta_1996_06_03:1.1
	MLWorks_Beta_1996_05_31:1.1
	MLWorks_Beta_1996_05_30:1.1;
locks; strict;
comment	@# @;


1.3
date	97.05.21.13.40.50;	author johnh;	state Exp;
branches
	1.3.1.1
	1.3.2.1
	1.3.3.1
	1.3.4.1;
next	1.2;

1.2
date	96.06.04.12.03.12;	author stephenb;	state Exp;
branches
	1.2.1.1
	1.2.2.1
	1.2.3.1
	1.2.4.1
	1.2.5.1
	1.2.6.1
	1.2.7.1
	1.2.8.1
	1.2.9.1;
next	1.1;

1.1
date	96.05.28.12.06.06;	author stephenb;	state Exp;
branches;
next	;

1.2.1.1
date	96.09.13.11.22.45;	author hope;	state Exp;
branches;
next	;

1.2.2.1
date	96.10.07.16.12.52;	author hope;	state Exp;
branches;
next	;

1.2.3.1
date	96.10.17.11.32.05;	author hope;	state Exp;
branches;
next	;

1.2.4.1
date	96.11.14.12.58.07;	author hope;	state Exp;
branches
	1.2.4.1.1.1;
next	;

1.2.4.1.1.1
date	96.11.28.15.08.02;	author hope;	state Exp;
branches;
next	;

1.2.5.1
date	96.11.22.18.15.42;	author hope;	state Exp;
branches;
next	;

1.2.6.1
date	96.12.17.10.02.25;	author hope;	state Exp;
branches;
next	;

1.2.7.1
date	96.12.17.17.54.09;	author hope;	state Exp;
branches
	1.2.7.1.1.1;
next	;

1.2.7.1.1.1
date	97.02.24.11.45.12;	author hope;	state Exp;
branches;
next	;

1.2.8.1
date	96.12.18.09.48.45;	author hope;	state Exp;
branches;
next	;

1.2.9.1
date	97.05.12.10.41.08;	author hope;	state Exp;
branches
	1.2.9.1.1.1
	1.2.9.1.2.1
	1.2.9.1.3.1;
next	;

1.2.9.1.1.1
date	97.07.28.18.28.43;	author daveb;	state Exp;
branches
	1.2.9.1.1.1.1.1;
next	;

1.2.9.1.1.1.1.1
date	97.10.07.11.54.33;	author jkbrook;	state Exp;
branches;
next	;

1.2.9.1.2.1
date	97.09.08.17.21.39;	author daveb;	state Exp;
branches;
next	;

1.2.9.1.3.1
date	97.09.09.14.17.44;	author daveb;	state Exp;
branches;
next	;

1.3.1.1
date	97.09.10.19.36.49;	author brucem;	state Exp;
branches;
next	;

1.3.2.1
date	97.09.11.21.04.58;	author daveb;	state Exp;
branches;
next	;

1.3.3.1
date	97.10.31.13.48.01;	author nickb;	state Exp;
branches;
next	;

1.3.4.1
date	99.04.01.18.03.45;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
@


1.3
log
@[Bug #01702]
mlw_win32_strerror no longer automatically generated - see
src/OS/Win32/win32_error.c
@
text
@# Copyright (C) 1996 Harlequin Ltd
#
# Generate C functions to implement OS.errorName and OS.syserror 
# based on the contents of C:/msdev/include/winerror.h
#
# $Log: awk:win32_os_errors_c.awk,v $
# Revision 1.2  1996/06/04  12:03:12  stephenb
# Extend to deal with C (errno) errors as well as Win32 errors.
#
# Revision 1.1  1996/05/28  12:06:06  stephenb
# new unit
#

BEGIN {
  printf("/* Copyright (c) 1996 Harlequin Ltd.\n");
  printf("**\n");
  printf("** This file was generated from winerror.h using win32_os_errors_c.awk.\n");
  printf("**\n");
  printf("** It would be better go generate the first two functions as SML\n");
  printf("** rather than C.  The only reason this is not being done\n");
  printf("** that at the time this is added there is no consensus\n");
  printf("** on how to structure the generated SML files such that they\n");
  printf("** can be distributed as part of the basis implementation.\n");
  printf("** Generating C and pulling the code through the runtime\n");
  printf("** avoids this problem.  Hopefully a consensus will be reached\n");
  printf("** in the near future and this file can go away.\n");
  printf("**\n");
  printf("*/\n\n\n");
  printf("#include \"allocator.h\" /* ml_string */\n");
  printf("#include \"values.h\" /* mlw_option_make_some */\n");
  printf("#include <stdio.h> /* DWORD */\n");
  printf("#include <windows.h> /* DWORD */\n");
  printf("#if !defined(_WIN32) && !defined(WIN32)\n");
  printf("#include <ver.h>\n");
  printf("#endif\n");
  printf("#include \"os_errors.h\"\n");
  printf("\n\n");
}

/^\/\/ MessageId:/ {
  errorName= $3;
  next;
}

/^\/\/ MessageText:/ {
  inErrorMessage= 1;
  next;
}

/^\/\/[\t ]*$/ {
  next;
}

/^#define/ {
  errorNumber=substr($3, 0, length($3)-1)
  if (errorName) {
    errors[errorNumber]= errorName;
  }
  errorName=0;
  if (inErrorMessage) {
    errorMessages[errorNumber]= errorMessage;
    inErrorMessage= 0;
    errorMessage="";
  }
  next;
}



#
# The file winerrors.h contains error codes for OLE.  Since a) we don't
# support it and b) the errors are in a different format, just quit
# processing at this point.
#

/OLE Error Codes/ {
  exit;
}


{
  if (inErrorMessage) {
    if (errorMessage)
      errorMessage=errorMessage" "substr($0, 5);
    else
      errorMessage=substr($0, 5)
  }
}


END {
  printf("static char const * mlw_win32_error_name(unsigned int error_code)\n");
  printf("{\n");
  printf("  switch (error_code) {\n");
  for (i in errors) {
     printf("  case %4d: return \"%s\";\n", i, errors[i])  
  }
  printf("  default: return \"MLWORKS_INTERNAL_ERROR\";\n");
  printf("  }\n");
  printf("}\n");
  printf("\n\n\n");


  printf("/*\n");
  printf("** OS.errorName : syserror -> string\n");
  printf("*/\n");
  printf("mlval mlw_os_error_name(mlval arg)\n");
  printf("{\n");
  printf("  unsigned int error_code= CWORD(arg);\n");
  printf("  char const *error_name= ((error_code&0x1) == 0)\n");
  printf("    ? mlw_win32_error_name(error_code>>1)\n")
  printf("    : mlw_c_error_name(error_code>>1);\n")
  printf("  return ml_string(error_name);\n");
  printf("}\n");
  printf("\n\n\n");


  print "/* The implementation is rather simple in that it effectively"
  print "** performs a linear search to find the matching code."
  print "** A more efficient approach would be to build a trie"
  print "** and generate a tree of if statements."
  print "** The only reason this hasn't been implemented is that"
  print "** it is rather tough to do in AWK and this code is"
  print "** not critical enough to warrant rewriting it in C"
  print "** which is the only other language that is available to our"
  print "** build process on NT and Unix."
  print "*/"
  printf("static int mlw_win32_syserror(char const *error_message)\n");
  printf("{\n");
  for (i in errors) {
    printf("  if (strcmp(error_message, \"%s\") == 0)\n", errors[i])
    printf("    return %d;\n", i)
  }
  printf("  return 0;\n");
  printf("}\n\n\n\n");


  printf("/*\n");
  printf("** OS.syserror : string -> syserror option\n");
  printf("*/\n");
  printf("mlval mlw_os_syserror(mlval arg)\n");
  printf("{\n");
  printf("  char const * error_message= CSTRING(arg);\n");
  printf("  int error_code= mlw_win32_syserror(error_message);\n");
  printf("  if (error_code != 0) {\n");
  printf("    return mlw_option_make_some(MLINT(error_code<<1));\n");
  printf("  } else if ((error_code= mlw_c_syserror(error_message)) != 0) {\n");
  printf("    return mlw_option_make_some(MLINT((error_code<<1)|1));\n");
  printf("  } else {\n");
  printf("    return mlw_option_make_none();\n");
  printf("  }\n");
  printf("}\n\n\n\n");

}
@


1.3.4.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a6 5
# Revision 1.3  1997/05/21  13:40:50  johnh
# [Bug #01702]
# mlw_win32_strerror no longer automatically generated - see
# src/OS/Win32/win32_error.c
#
@


1.3.3.1
log
@branched from trunk for label MLWorks_MM_adapt
@
text
@a6 5
# Revision 1.3  1997/05/21  13:40:50  johnh
# [Bug #01702]
# mlw_win32_strerror no longer automatically generated - see
# src/OS/Win32/win32_error.c
#
@


1.3.2.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a6 5
# Revision 1.3  1997/05/21  13:40:50  johnh
# [Bug #01702]
# mlw_win32_strerror no longer automatically generated - see
# src/OS/Win32/win32_error.c
#
@


1.3.1.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a6 5
# Revision 1.3  1997/05/21  13:40:50  johnh
# [Bug #01702]
# mlw_win32_strerror no longer automatically generated - see
# src/OS/Win32/win32_error.c
#
@


1.2
log
@Extend to deal with C (errno) errors as well as Win32 errors.
@
text
@d7 3
a152 26


  printf("/* Given an error returned by GetLastError, returns\n");
  printf("** a string which explains what the error is.\n");
  printf("**\n");
  printf("** Note that no attempt is made to check the severity,\n");
  printf("** customer, reserved and facilitiy bits in the error code.\n");
  printf("** as it is assumed that all the codes are system codes.\n");
  printf("**\n");
  printf("** In the case where the code does not match any known error\n");
  printf("** a string containing message indicating an MLWorks internal\n");
  printf("** error is returned.\n");
  printf("*/\n"); 
  printf("char const * mlw_win32_strerror(unsigned int error_code)\n");
  printf("{\n");
  printf("  switch(error_code&0xffff) {\n");
  for (i in errorMessages) {
    printf("    case %s:\n      return \"%s\";\n", i, errorMessages[i]);
  }
  printf("  default:\n");
  printf("    return\n");
  printf("      \"Unknown error.\"\n");
  printf("      \"  This is non-fatal internal MLWorks error in OS.errorMsg.\"\n");
  printf("      \"  Please report to MLWorks support.\";\n");
  printf("  }\n");
  printf("}\n");
@


1.2.9.1
log
@branched from 1.2
@
text
@a6 3
# Revision 1.2  1996/06/04  12:03:12  stephenb
# Extend to deal with C (errno) errors as well as Win32 errors.
#
@


1.2.9.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a6 3
# Revision 1.2.9.1  1997/05/12  10:41:08  hope
# branched from 1.2
#
@


1.2.9.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a6 3
# Revision 1.2.9.1  1997/05/12  10:41:08  hope
# branched from 1.2
#
@


1.2.9.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a6 3
# Revision 1.2.9.1  1997/05/12  10:41:08  hope
# branched from 1.2
#
@


1.2.9.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a6 3
# Revision 1.2.9.1.1.1  1997/07/28  18:28:43  daveb
# branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
#
@


1.2.8.1
log
@branched from 1.2
@
text
@a6 3
# Revision 1.2  1996/06/04  12:03:12  stephenb
# Extend to deal with C (errno) errors as well as Win32 errors.
#
@


1.2.7.1
log
@branched from 1.2
@
text
@a6 3
# Revision 1.2  1996/06/04  12:03:12  stephenb
# Extend to deal with C (errno) errors as well as Win32 errors.
#
@


1.2.7.1.1.1
log
@branched from 1.2.7.1
@
text
@a6 3
# Revision 1.2.7.1  1996/12/17  17:54:09  hope
# branched from 1.2
#
@


1.2.6.1
log
@branched from 1.2
@
text
@a6 3
# Revision 1.2  1996/06/04  12:03:12  stephenb
# Extend to deal with C (errno) errors as well as Win32 errors.
#
@


1.2.5.1
log
@branched from 1.2
@
text
@a6 3
# Revision 1.2  1996/06/04  12:03:12  stephenb
# Extend to deal with C (errno) errors as well as Win32 errors.
#
@


1.2.4.1
log
@branched from 1.2
@
text
@a6 3
# Revision 1.2  1996/06/04  12:03:12  stephenb
# Extend to deal with C (errno) errors as well as Win32 errors.
#
@


1.2.4.1.1.1
log
@branched from 1.2.4.1
@
text
@a6 3
# Revision 1.2.4.1  1996/11/14  12:58:07  hope
# branched from 1.2
#
@


1.2.3.1
log
@branched from 1.2
@
text
@a6 3
# Revision 1.2  1996/06/04  12:03:12  stephenb
# Extend to deal with C (errno) errors as well as Win32 errors.
#
@


1.2.2.1
log
@branched from 1.2
@
text
@a6 3
# Revision 1.2  1996/06/04  12:03:12  stephenb
# Extend to deal with C (errno) errors as well as Win32 errors.
#
@


1.2.1.1
log
@branched from 1.2
@
text
@a6 3
# Revision 1.2  1996/06/04  12:03:12  stephenb
# Extend to deal with C (errno) errors as well as Win32 errors.
#
@


1.1
log
@new unit
@
text
@d6 4
a9 1
# $Log$
d28 1
d89 1
a89 4
  printf("/*\n");
  printf("** OS.errorName : syserror -> string\n");
  printf("*/\n");
  printf("mlval mlw_os_error_name(mlval arg)\n");
a90 2
  printf("  int error_code= CINT(arg);\n");
  printf("  char const *error_name;\n");
d93 1
a93 1
     printf("  case %4d: error_name= \"%s\"; break;\n", i, errors[i])  
d95 1
a95 1
  printf("  default: error_name= \"MLWORKS_INTERNAL_ERROR\";\n");
a96 1
  printf("  return ml_string(error_name);\n");
d102 1
a102 1
  printf("** OS.syserror : string -> syserror option\n");
d104 11
d125 1
a125 1
  printf("mlval mlw_os_syserror(mlval arg)\n");
a126 2
  printf("  char const * error_message= CSTRING(arg);\n");
  printf("  int error_code= 0;\n");
d129 1
a129 1
    printf("    error_code= %d;\n", i)
d131 1
a131 1
  printf("  return mlw_option_make_some(MLINT(error_code));\n");
d136 1
a136 1
  printf("** OS.errorMsg : syserror -> string\n");
d138 14
d163 1
a163 1
  printf("char const * mlw_os_strerror(DWORD error_code)\n");
@
