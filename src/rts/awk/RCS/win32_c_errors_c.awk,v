head	1.1;
access;
symbols
	MLW_daveb_inline_1_4_99:1.1.13
	MLWorks_21c0_1999_03_25:1.1
	MLWorks_20c1_1998_08_20:1.1
	MLWorks_20c0_1998_08_04:1.1
	MLWorks_20b2c2_1998_06_19:1.1
	MLWorks_20b2_Windows_1998_06_12:1.1
	MLWorks_20b1c1_1998_05_07:1.1
	MLWorks_20b0_1998_04_07:1.1
	MLWorks_20b0_1998_03_20:1.1
	MLWorks_20m2_1998_02_16:1.1
	MLWorks_MM_adapt:1.1.12
	MLWorks_20m1_1997_10_23:1.1
	MLWorks_11r1:1.1.9.1.1.1.1
	MLWorks_workspace_97:1.1.11
	MLWorks_dt_wizard:1.1.10
	MLWorks_11c0_1997_09_09:1.1.9.1.1.1
	MLWorks_10r3:1.1.9.1.3
	MLWorks_10r2_551:1.1.9.1.2
	MLWorks_11:1.1.9.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.1.9.1
	MLWorks_20m0_1997_06_20:1.1
	MLWorks_1_0_r2c2_1997_06_14:1.1.9.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.1.9.1
	MLWorks_1_0_r2c1_1997_05_12:1.1.9
	MLWorks_BugFix_1997_04_24:1.1
	MLWorks_1_0_r2_Win32_1997_04_11:1.1
	MLWorks_1_0_r2_Unix_1997_04_04:1.1
	MM_ML_release_korma_1997_04_01:1.1
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.1.7.1.1
	MLWorks_gui_1996_12_18:1.1.8
	MLWorks_1_0_Win32_1996_12_17:1.1.7
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.1.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.1.4.1
	JFHrts:1.1.6
	MLWorks_1_0_Irix_1996_11_28:1.1.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.1.5
	MLWorks_1_0_Unix_1996_11_14:1.1.4
	MLWorks_Open_Beta2_1996_10_11:1.1.3
	MLWorks_License_dev:1.1.2
	MLWorks_1_open_beta_1996_09_13:1.1.1
	MLWorks_Open_Beta_1996_08_22:1.1
	MLWorks_Beta_1996_07_02:1.1
	MLWorks_Beta_1996_06_07:1.1
	MLWorks_Beta_1996_06_06:1.1
	MLWorks_Beta_1996_06_05:1.1;
locks; strict;
comment	@# @;


1.1
date	96.06.04.13.14.43;	author stephenb;	state Exp;
branches
	1.1.1.1
	1.1.2.1
	1.1.3.1
	1.1.4.1
	1.1.5.1
	1.1.6.1
	1.1.7.1
	1.1.8.1
	1.1.9.1
	1.1.10.1
	1.1.11.1
	1.1.12.1
	1.1.13.1;
next	;

1.1.1.1
date	96.09.13.11.23.13;	author hope;	state Exp;
branches;
next	;

1.1.2.1
date	96.10.07.16.13.22;	author hope;	state Exp;
branches;
next	;

1.1.3.1
date	96.10.17.11.32.41;	author hope;	state Exp;
branches;
next	;

1.1.4.1
date	96.11.14.12.58.34;	author hope;	state Exp;
branches
	1.1.4.1.1.1;
next	;

1.1.4.1.1.1
date	96.11.28.15.08.32;	author hope;	state Exp;
branches;
next	;

1.1.5.1
date	96.11.22.18.16.13;	author hope;	state Exp;
branches;
next	;

1.1.6.1
date	96.12.17.10.02.58;	author hope;	state Exp;
branches;
next	;

1.1.7.1
date	96.12.17.17.54.37;	author hope;	state Exp;
branches
	1.1.7.1.1.1;
next	;

1.1.7.1.1.1
date	97.02.24.11.45.43;	author hope;	state Exp;
branches;
next	;

1.1.8.1
date	96.12.18.09.49.13;	author hope;	state Exp;
branches;
next	;

1.1.9.1
date	97.05.12.10.41.37;	author hope;	state Exp;
branches
	1.1.9.1.1.1
	1.1.9.1.2.1
	1.1.9.1.3.1;
next	;

1.1.9.1.1.1
date	97.07.28.18.26.50;	author daveb;	state Exp;
branches
	1.1.9.1.1.1.1.1;
next	;

1.1.9.1.1.1.1.1
date	97.10.07.11.52.46;	author jkbrook;	state Exp;
branches;
next	;

1.1.9.1.2.1
date	97.09.08.17.19.59;	author daveb;	state Exp;
branches;
next	;

1.1.9.1.3.1
date	97.09.09.14.16.06;	author daveb;	state Exp;
branches;
next	;

1.1.10.1
date	97.09.10.19.33.34;	author brucem;	state Exp;
branches;
next	;

1.1.11.1
date	97.09.11.21.02.44;	author daveb;	state Exp;
branches;
next	;

1.1.12.1
date	97.10.31.13.45.35;	author nickb;	state Exp;
branches;
next	;

1.1.13.1
date	99.04.01.18.01.59;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
@


1.1
log
@new unit
@
text
@# Copyright (C) 1996 Harlequin Ltd
#
# Generate C functions which partially implement OS.errorName and OS.syserror 
# based on the contents of (a local copy of) C:/msdev/include/sys/errno.h
#
# $Log$
#

BEGIN {
  printf("/* Copyright (c) 1996 Harlequin Ltd.\n");
  printf("**\n");
  printf("** This file was generated from sys/errno.h using unix_error_name_c.awk.\n");
  printf("** DO NOT ALTER by hand.\n");
  printf("**\n");
  printf("** Note it would be better go generate both the functions as SML\n");
  printf("** rather than C.  The only reason this is not being done\n");
  printf("** that at the time this is added there is no consensus\n");
  printf("** on how to structure the generated SML files such that they\n");
  printf("** can be distributed as part of the basis implementation.\n");
  printf("** Generating C and pulling the code through the runtime\n");
  printf("** avoids this problem.  Hopefully a consensus will be reached\n");
  printf("** in the near future and this file can go away.\n");

  printf("*/\n\n");
  printf("#include <errno.h> /* E[A-Z]* */\n");
  printf("#include <string.h> /* strcmp */\n");
  printf("\n\n");
}


# The [0-9][0-9]* stuff in the following pattern is there so that defines
# that are not defined in terms of literal numbers are ignored.
# This is to avoid duplicate branches in case statements that result from
# things like the following from the Irix errno.h header file :-
#
#   #define EWOULDBLOCK EAGAIN
#
# Of course this could break badly on systems where the error codes
# are all defined in terms of the previous error code + 1.  However, we'll
# cross that bridge when we come to it. 

/^#define[\t ]*E[A-Za-z0-9]*[\t ]*[0-9][0-9]*/ {
  errors[$3]= $2
  next;
}

END {
  printf("/*\n");
  printf("** XXX\n");
  printf("*/\n");
  printf("static char * mlw_c_error_name(unsigned int error_code)\n");
  printf("{\n");
  printf("  switch (error_code) {\n");
  printf("  case   0: return \"\";  break;\n");
  for (i in errors) {
    printf("  case %12s: return \"%s\";\n", errors[i], errors[i]);
  }
  printf("  default: return \"MLWORKS_INTERNAL_ERROR\";\n");
  printf("  }\n");
  printf("}\n");
  printf("\n\n\n");
  printf("/*\n");
  printf("** XXX\n");
  printf("*/\n");
  print "/* The implementation is rather simple in that it effectively"
  print "** performs a linear search to find the matching code."
  print "** A more efficient approach would be to build a trie"
  print "** and generate a tree of if statements."
  print "** The only reason this hasn't been implemented is that"
  print "** it is rather tough to do in AWK and this code is"
  print "** not critical enough to warrant rewriting it in C"
  print "** which is the only other language that is available to our"
  print "** build process on NT and Unix."
  print "*/"
  printf("static int mlw_c_syserror(char const * error_message)\n");
  printf("{\n");
  for (i in errors) {
    printf("  if (strcmp(error_message, \"%s\") == 0)\n", errors[i])
    printf("    return %s;\n", errors[i])
  }
  printf("  return 0;\n");
  printf("}\n");
}
@


1.1.13.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@d6 1
a6 4
# $Log: awk:win32_c_errors_c.awk,v $
# Revision 1.1  1996/06/04  13:14:43  stephenb
# new unit
#
@


1.1.12.1
log
@branched from trunk for label MLWorks_MM_adapt
@
text
@d6 1
a6 4
# $Log: awk:win32_c_errors_c.awk,v $
# Revision 1.1  1996/06/04  13:14:43  stephenb
# new unit
#
@


1.1.11.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@d6 1
a6 4
# $Log: awk:win32_c_errors_c.awk,v $
# Revision 1.1  1996/06/04  13:14:43  stephenb
# new unit
#
@


1.1.10.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@d6 1
a6 4
# $Log: awk:win32_c_errors_c.awk,v $
# Revision 1.1  1996/06/04  13:14:43  stephenb
# new unit
#
@


1.1.9.1
log
@branched from 1.1
@
text
@d6 1
a6 4
# $Log: awk:win32_c_errors_c.awk,v $
# Revision 1.1  1996/06/04  13:14:43  stephenb
# new unit
#
@


1.1.9.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a6 3
# Revision 1.1.9.1  1997/05/12  10:41:37  hope
# branched from 1.1
#
@


1.1.9.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a6 3
# Revision 1.1.9.1  1997/05/12  10:41:37  hope
# branched from 1.1
#
@


1.1.9.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a6 3
# Revision 1.1.9.1  1997/05/12  10:41:37  hope
# branched from 1.1
#
@


1.1.9.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a6 3
# Revision 1.1.9.1.1.1  1997/07/28  18:26:50  daveb
# branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
#
@


1.1.8.1
log
@branched from 1.1
@
text
@d6 1
a6 4
# $Log: awk:win32_c_errors_c.awk,v $
# Revision 1.1  1996/06/04  13:14:43  stephenb
# new unit
#
@


1.1.7.1
log
@branched from 1.1
@
text
@d6 1
a6 4
# $Log: awk:win32_c_errors_c.awk,v $
# Revision 1.1  1996/06/04  13:14:43  stephenb
# new unit
#
@


1.1.7.1.1.1
log
@branched from 1.1.7.1
@
text
@a6 3
# Revision 1.1.7.1  1996/12/17  17:54:37  hope
# branched from 1.1
#
@


1.1.6.1
log
@branched from 1.1
@
text
@d6 1
a6 4
# $Log: awk:win32_c_errors_c.awk,v $
# Revision 1.1  1996/06/04  13:14:43  stephenb
# new unit
#
@


1.1.5.1
log
@branched from 1.1
@
text
@d6 1
a6 4
# $Log: awk:win32_c_errors_c.awk,v $
# Revision 1.1  1996/06/04  13:14:43  stephenb
# new unit
#
@


1.1.4.1
log
@branched from 1.1
@
text
@d6 1
a6 4
# $Log: awk:win32_c_errors_c.awk,v $
# Revision 1.1  1996/06/04  13:14:43  stephenb
# new unit
#
@


1.1.4.1.1.1
log
@branched from 1.1.4.1
@
text
@a6 3
# Revision 1.1.4.1  1996/11/14  12:58:34  hope
# branched from 1.1
#
@


1.1.3.1
log
@branched from 1.1
@
text
@d6 1
a6 4
# $Log: awk:win32_c_errors_c.awk,v $
# Revision 1.1  1996/06/04  13:14:43  stephenb
# new unit
#
@


1.1.2.1
log
@branched from 1.1
@
text
@d6 1
a6 4
# $Log: awk:win32_c_errors_c.awk,v $
# Revision 1.1  1996/06/04  13:14:43  stephenb
# new unit
#
@


1.1.1.1
log
@branched from 1.1
@
text
@d6 1
a6 4
# $Log: awk:win32_c_errors_c.awk,v $
# Revision 1.1  1996/06/04  13:14:43  stephenb
# new unit
#
@
