head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	95.03.01.16.31.18;	author brianm;	state Exp;
branches;
next	1.2;

1.2
date	95.02.28.18.33.05;	author brianm;	state Exp;
branches;
next	1.1;

1.1
date	95.02.28.15.50.50;	author brianm;	state Exp;
branches;
next	;


desc
@new unit
new file.
@


1.3
log
@Minor correction to prototype ...
@
text
@/*  ==== FOREIGN INTERFACE CALL STUB GENERATOR ====
 *
 *  Copyright (C) 1995 Harlequin Ltd.
 *
 *  Implementation
 *  --------------
 *
 *  Revision Log
 *  ------------
 *  $Log: misc:fi_call_stub_gen.c,v $
 * Revision 1.2  1995/02/28  18:33:05  brianm
 * minor correction and added ANSI prototypes for printf, sscanf
 *
 * Revision 1.1  1995/02/28  15:50:50  brianm
 * new unit
 * new file.
 *
 *
 */


#include <stdio.h>
#include <fcntl.h>


extern int    printf(const char *, ...);
extern int    sscanf(const char *, const char *, ...);


/* call stub file name */
#define filename       "fi_call_stub"

/* call stub function name */
#define vcall_ffun     "call_ffun"

/* function variable name */
#define vffun          "ffun"

/* argument vector name */
#define vargv          "argv"

/* argument vector name */
#define varg_limit     "MAX_FI_ARG_LIMIT"

/* argument size name */
#define vsize          "size"

/* argument (and return) type */
#define argtype        "void *"


/* Formatting sizes */
#define cwidth         5
#define cwidth_1       (cwidth - 1)



/* Prototypes */
void nl(void);
void idn(int);
void idn_items(void);

void print_switch_case(int);
void print_cast(int);
void print_args(int);


/* Definitions */
void nl(void){ printf("\n"); }

void idn(int n)
{ int i;

  nl();

  for (i=0; i < n; i++)
     { printf("  "); };
  return;
}
 
void idn_items()
{
   idn(4);
   printf("       ");
   return;
}

void print_switch_case(int i)
{
  idn(2); printf("case %d : ", i);
  idn(4); printf("return(");
          print_cast(i);
          print_args(i);
  idn(4); printf("      );");
  nl();
  return;
}

void print_cast(int args)
{
  int i, j, ln, cn;

  ln = args / cwidth;
  cn = args % cwidth;

  printf("((%s(*)(", argtype);
  if ( ln > 0 )
    {
      for (i=0;i<ln;i++)
         {
           if (i > 0)
             {
               idn_items();
               printf(",");
             };
           printf(" ");
           for (j=0;j<cwidth_1;j++)
              { printf("%s, ", argtype); };
           printf("%s ", argtype);
         };
    };
  if ( cn > 0 )
    { cn--;
      if (ln > 0)
        {
          idn_items();
          printf(",");
        };
      printf(" ");
      for (i=0;i<cn;i++)
         { printf("%s, ", argtype); };
      printf("%s ", argtype);
    };
  printf("))%s)",vffun);
}

void print_args(int args)
{
  int i, j, ln, cn, idx;

  ln = args / cwidth;
  cn = args % cwidth;

  idx = 0;

  if ( args > 0 )
    { idn_items(); };

  printf("(");
  if ( ln > 0 )
    {
      for (i=0;i<ln;i++)
         {
           if (i > 0)
             {
               idn_items();
               printf(",");
             };
           printf(" ");
           for (j=0;j<cwidth_1;j++)
              {
                printf("%s[%d], ", vargv, idx);
                idx++;
              };
           printf("%s[%d]", vargv, idx);
           idx++;
         };
    };
  if ( cn > 0 )
    { cn--;
      if (ln > 0)
        {
          idn_items();
          printf(",");
        };
      printf(" ");
      for (i=0;i<cn;i++)
         { printf("%s[%d], ", vargv, idx);
           idx++;
         };
      printf("%s[%d] ", vargv, idx);
    };
  printf(")");
}


int main(int argc, char *argv[])
{
  int size, i, code;

  switch (argc)
  {
    case  2: code = sscanf(argv[1],"%d",&size);
             if (code != 1)
               { printf("Need an integer argument.\n");
                 exit(1);
	       };
             break;

    default: printf("Usage : %s <size> - makes foreign call stub of size <size>\n"
                   ,argv[0]);
             exit(0);
  };

  printf("   /*=====================================================*/\n");
  printf("   /*                                                     */\n");
  printf("   /*             FOREIGN INTERFACE CALL STUB             */\n");
  printf("   /*             ---------------------------             */\n");
  printf("   /*                                                     */\n");
  printf("   /*   Generated by rts/misc/fi_call_stub_gen.c          */\n");
  printf("   /*                                                     */\n");
  printf("   /*   (C) 1995 Harlequin Ltd.                           */\n");
  printf("   /*=====================================================*/\n");
  nl();
  nl();
  printf("#include \"%s.h\"",filename);
  nl();
  nl();
  idn(0); printf("%s%s(void *%s, %s%s[], int %s)"
                , argtype
                , vcall_ffun
                , vffun
                , argtype
                , vargv
                , vsize
                );
  idn(0); printf("{");
  idn(1); printf("switch (%s) {",vsize);
             for (i=0; i<=size;i++) { print_switch_case(i); };
  idn(2); printf("default : return((%s)%s_error(%s));",argtype,vcall_ffun,vsize);
  idn(1); printf("};");
  idn(0); printf("}");
  idn(0);
  return(0);
}
@


1.2
log
@minor correction and added ANSI prototypes for printf, sscanf
@
text
@d11 3
d25 1
d27 1
a27 1
extern int    sscanf(char *, const char *, ...);
d30 3
a38 1

d42 2
d216 4
a219 1
  idn(0); printf("%s%s_%i(void *%s, %s%s[], int %s)"
a221 1
                , size
d230 1
a230 1
  idn(2); printf("default : return(%s_error());",vcall_ffun);
@


1.1
log
@new unit
new file.
@
text
@d10 4
a13 1
 *  $Log$
d15 1
d22 4
d141 1
a143 1
      printf("(");
@
