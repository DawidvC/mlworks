head	1.23;
access;
symbols
	MLW_daveb_inline_1_4_99:1.23.1
	MLWorks_21c0_1999_03_25:1.23
	MLWorks_20c1_1998_08_20:1.18
	MLWorks_20c0_1998_08_04:1.18
	MLWorks_20b2c2_1998_06_19:1.18
	MLWorks_20b2_Windows_1998_06_12:1.18
	MLWorks_20b1c1_1998_05_07:1.18
	MLWorks_20b0_1998_04_07:1.18
	MLWorks_20b0_1998_03_20:1.18
	MLWorks_20m2_1998_02_16:1.18
	MLWorks_20m1_1997_10_23:1.17
	MLWorks_11r1:1.16.1.1.1.1.1
	MLWorks_workspace_97:1.17.2
	MLWorks_dt_wizard:1.17.1
	MLWorks_11c0_1997_09_09:1.16.1.1.1.1
	MLWorks_10r3:1.16.1.1.3
	MLWorks_10r2_551:1.16.1.1.2
	MLWorks_11:1.16.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.16.1.1
	MLWorks_20m0_1997_06_20:1.17
	MLWorks_1_0_r2c2_1997_06_14:1.16.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.16.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.16.1
	MLWorks_BugFix_1997_04_24:1.16
	MLWorks_1_0_r2_Win32_1997_04_11:1.16
	MLWorks_1_0_r2_Unix_1997_04_04:1.16
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.15.3.1.1
	MLWorks_gui_1996_12_18:1.15.4
	MLWorks_1_0_Win32_1996_12_17:1.15.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.15.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.15.1.1
	MLWorks_1_0_Irix_1996_11_28:1.15.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.15.2
	MLWorks_1_0_Unix_1996_11_14:1.15.1
	MLWorks_Open_Beta2_1996_10_11:1.13.3
	MLWorks_License_dev:1.13.2
	MLWorks_1_open_beta_1996_09_13:1.13.1
	MLWorks_Open_Beta_1996_08_22:1.12
	MLWorks_Beta_1996_07_02:1.10
	MLWorks_Beta_1996_06_07:1.8
	MLWorks_Beta_1996_06_06:1.8
	MLWorks_Beta_1996_06_05:1.8
	MLWorks_Beta_1996_06_03:1.8
	MLWorks_Beta_1996_05_31:1.8
	MLWorks_Beta_1996_05_30:1.8;
locks; strict;
comment	@ * @;


1.23
date	99.03.22.17.02.23;	author mitchell;	state Exp;
branches
	1.23.1.1;
next	1.22;

1.22
date	99.03.14.11.52.51;	author daveb;	state Exp;
branches;
next	1.21;

1.21
date	99.03.03.14.20.12;	author johnh;	state Exp;
branches;
next	1.20;

1.20
date	99.02.03.10.45.05;	author mitchell;	state Exp;
branches;
next	1.19;

1.19
date	99.02.02.16.02.00;	author mitchell;	state Exp;
branches;
next	1.18;

1.18
date	97.11.09.17.50.59;	author jont;	state Exp;
branches;
next	1.17;

1.17
date	97.05.27.13.33.29;	author jkbrook;	state Exp;
branches
	1.17.1.1
	1.17.2.1;
next	1.16;

1.16
date	97.01.15.12.18.12;	author io;	state Exp;
branches
	1.16.1.1;
next	1.15;

1.15
date	96.11.08.14.29.13;	author matthew;	state Exp;
branches
	1.15.1.1
	1.15.2.1
	1.15.3.1
	1.15.4.1;
next	1.14;

1.14
date	96.10.21.15.23.50;	author jont;	state Exp;
branches;
next	1.13;

1.13
date	96.08.21.10.05.25;	author stephenb;	state Exp;
branches
	1.13.1.1
	1.13.2.1
	1.13.3.1;
next	1.12;

1.12
date	96.08.09.10.28.55;	author daveb;	state Exp;
branches;
next	1.11;

1.11
date	96.07.17.17.12.25;	author andreww;	state Exp;
branches;
next	1.10;

1.10
date	96.06.10.11.56.54;	author stephenb;	state Exp;
branches;
next	1.9;

1.9
date	96.06.07.15.03.55;	author andreww;	state Exp;
branches;
next	1.8;

1.8
date	96.05.28.11.11.01;	author stephenb;	state Exp;
branches;
next	1.7;

1.7
date	96.05.16.14.12.20;	author stephenb;	state Exp;
branches;
next	1.6;

1.6
date	96.05.03.15.51.09;	author stephenb;	state Exp;
branches;
next	1.5;

1.5
date	96.04.01.11.08.08;	author stephenb;	state Exp;
branches;
next	1.4;

1.4
date	96.01.29.16.56.36;	author stephenb;	state Exp;
branches;
next	1.3;

1.3
date	96.01.24.16.54.43;	author stephenb;	state Exp;
branches;
next	1.2;

1.2
date	96.01.22.14.07.02;	author stephenb;	state Exp;
branches;
next	1.1;

1.1
date	96.01.22.09.28.10;	author stephenb;	state Exp;
branches;
next	;

1.13.1.1
date	96.09.13.11.42.36;	author hope;	state Exp;
branches;
next	;

1.13.2.1
date	96.10.07.16.35.43;	author hope;	state Exp;
branches;
next	;

1.13.3.1
date	96.10.17.11.54.48;	author hope;	state Exp;
branches;
next	;

1.15.1.1
date	96.11.14.13.23.09;	author hope;	state Exp;
branches
	1.15.1.1.1.1;
next	;

1.15.1.1.1.1
date	96.11.28.15.33.39;	author hope;	state Exp;
branches;
next	;

1.15.2.1
date	96.11.22.18.40.10;	author hope;	state Exp;
branches;
next	;

1.15.3.1
date	96.12.17.18.19.11;	author hope;	state Exp;
branches
	1.15.3.1.1.1;
next	;

1.15.3.1.1.1
date	97.02.24.12.13.31;	author hope;	state Exp;
branches;
next	;

1.15.4.1
date	96.12.18.10.14.35;	author hope;	state Exp;
branches;
next	;

1.16.1.1
date	97.05.12.10.52.45;	author hope;	state Exp;
branches
	1.16.1.1.1.1
	1.16.1.1.2.1
	1.16.1.1.3.1;
next	;

1.16.1.1.1.1
date	97.07.28.18.34.55;	author daveb;	state Exp;
branches
	1.16.1.1.1.1.1.1;
next	;

1.16.1.1.1.1.1.1
date	97.10.07.12.00.40;	author jkbrook;	state Exp;
branches;
next	;

1.16.1.1.2.1
date	97.09.08.17.27.43;	author daveb;	state Exp;
branches;
next	;

1.16.1.1.3.1
date	97.09.09.14.24.49;	author daveb;	state Exp;
branches;
next	;

1.17.1.1
date	97.09.10.19.43.39;	author brucem;	state Exp;
branches;
next	;

1.17.2.1
date	97.09.11.21.11.05;	author daveb;	state Exp;
branches;
next	;

1.23.1.1
date	99.04.01.18.09.14;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
OS reorganisation: separated out of the pervasive library so
that only UNIX OSes need support it.
@


1.23
log
@[Bug #30286]
Support for the Unix structure
@
text
@(* Copyright (C) 1996 Harlequin Ltd.
 *
 * An interface to a misc. collection of features made available
 * on any operating system that claims to be UNIX.
 *
 * The preferred name of this signature is UNIX, but since there is
 * a desire to have a common naming scheme for signatures, structures and
 * functors and the functor Unix has already been used (see ./_unix.sml)
 * the compromise of UNIXOS was chosen.
 *
 * This is slowly being turned into a signature that matches basis POSIX
 * signature.
 * 
 * Revision Log
 * ------------
 *
 * $Log: unixos.sml,v $
 * Revision 1.22  1999/03/14  11:52:51  daveb
 * [Bug #190521]
 * OS.FileSys.readDir now returns an option type.
 *
 * Revision 1.21  1999/03/03  14:20:12  johnh
 * Change spec of fork_execv
 *
 * Revision 1.20  1999/02/03  10:45:05  mitchell
 * [Bug #190500]
 * Add back require statements for this file - edited the wrong file!!
 *
 * Revision 1.19  1999/02/02  16:02:00  mitchell
 * [Bug #190500]
 * Remove redundant require statements
 *
 * Revision 1.18  1997/11/09  17:50:59  jont
 * [Bug #30089]
 * Modify rusage to return stime and utime as basis times
 *
 * Revision 1.17  1997/05/27  13:33:29  jkbrook
 * [Bug #01749]
 * Use __sys_word for SysWord structure
 *
 * Revision 1.16  1997/01/15  12:18:12  io
 * [Bug #1892]
 * rename __word{8,16,32}{array,vector} to __word{8,16,32}_{array,vector}
 *
 * Revision 1.15  1996/11/08  14:29:13  matthew
 * [Bug #1661]
 * Changing io_desc to iodesc
 *
 * Revision 1.14  1996/10/21  15:23:50  jont
 * Remove references to basis.toplevel
 *
 * Revision 1.13  1996/08/21  10:05:25  stephenb
 * [Bug #1554]
 * Change FileSys.file_desc to a type declaration since the
 * internal details of the type are not needed by clients
 * anymore.
 *
 * Revision 1.12  1996/08/09  10:28:55  daveb
 * [Bug #1536]
 * Made read and write use Word8Vector.vectors instead of strings.
 *
 * Revision 1.11  1996/07/17  17:12:25  andreww
 * [Bug #1453]
 * provding size function on file descriptors for up-to-date
 * revised basis IO.
 *
 * Revision 1.10  1996/06/10  11:56:54  stephenb
 * Add POSIX.FileSys.{openf,creatf,creat,link,umask} and
 * POSIX>FileSys.O.*
 *
 * Revision 1.9  1996/06/07  15:03:55  andreww
 * exposing unix IO constants in signature.
 *
 * Revision 1.8  1996/05/28  11:11:01  stephenb
 * Implement POSIX.Error.{errorName,syserror}
 *
 * Revision 1.7  1996/05/16  14:12:20  stephenb
 * Introduce the Error structure, move SysErr ... etc. into it
 * and implement Error.errorMsg.
 *
 * Revision 1.6  1996/05/03  15:51:09  stephenb
 * Add file_desc type so that it can be used as the basis for the
 * various file descriptor types that are required by OS and POSIX.
 * Also started POSIXification of the structure i.e. various routines
 * that were at the top level are now embedded in sub-structures that
 * follow the signatures defined in the latest basis revision.
 *
 * Revision 1.5  1996/04/01  11:08:08  stephenb
 * Rename the Unix exception to be SysErr.  This simplifies the
 * implementation of the Unix version of the OS interface in the
 * latest basis.
 *
 * Revision 1.4  1996/01/29  16:56:36  stephenb
 * unix.c reorganisation: change vfork_XXX to fork_XXX since vfork
 * isn't important as far as the user is concerned, all they are
 * after is a cheap fork and exec.
 *
 *  Revision 1.3  1996/01/24  16:54:43  stephenb
 *  Add af+imox. af_inet, sock_stream, sock_dgram so that the
 *  editor no longer has to pass magic constants to the socket call.
 *
 *  Revision 1.2  1996/01/22  14:07:02  stephenb
 *  Fix indentation - previous version was checked in without re-indenting it.
 *
 *  Revision 1.1  1996/01/22  09:28:10  stephenb
 *  new unit
 *  OS reorganisation: separated out of the pervasive library so
 *  that only UNIX OSes need support it.
 *
 *
 *)

require "^.basis.__word32";
require "^.basis.__sys_word";
require "^.basis.__word8_vector";
require "^.basis.__position";
require "__time";

signature UNIXOS =
  sig

    structure Error : sig
      type syserror
      exception SysErr of (string * syserror option)
      val toWord : syserror -> Word32.word
      val fromWord : Word32.word -> syserror
      val errorMsg : syserror -> string
      val errorName : syserror -> string
      val syserror : string -> syserror option
    end

    exception WouldBlock

    datatype sockaddr = SOCKADDR_UNIX of string
    val environment     : unit -> string list
    val rusage :
      unit ->
      {idrss    : int,            (* integral resident set size *)
       inblock  : int,            (* block input operations *)
       isrss    : int,            (* currently 0 *)
       ixrss    : int,            (* currently 0 *)
       majflt   : int,            (* page faults requiring physical I/O *)
       maxrss   : int,            (* maximum resident set size *)
       minflt   : int,            (* page faults not requiring physical I/O *)
       msgrcv   : int,            (* messages received *)
       msgsnd   : int,            (* messages sent *)
       nivcsw   : int,            (* involuntary context switches *)
       nsignals : int,            (* signals received *)
       nswap    : int,            (* swaps *)
       nvcsw    : int,            (* voluntary context switches *)
       oublock  : int,            (* block output operations *)
       stime    : Time.time,      (* system time used *)
       utime    : Time.time}      (* user time used *)

    val bind            : int * sockaddr -> int
    val getsockname     : int -> sockaddr
    val getpeername     : int -> sockaddr
    val accept          : int -> int * sockaddr
    val listen          : int * int -> unit
    val execve          : string * string list * string list -> unit
    val execv           : string * string list -> unit
    val execvp          : string * string list -> unit
    val fork_execve     : string * string list * string list * int * int * int -> int
    val fork_execv      : string * string list * int * int * int -> int
    val fork_execvp     : string * string list -> int
    val kill            : int * int -> unit

    datatype iodesc = IODESC of int

    structure FileSys : sig
      type file_desc
      val fdToWord : file_desc -> Word32.word 
      val wordToFD : Word32.word -> file_desc 
      val fdToIOD : file_desc -> iodesc
      val iodToFD : iodesc -> file_desc

      type dirstream
      val opendir   : string -> dirstream
      val readdir   : dirstream -> string option
      val rewinddir : dirstream -> unit
      val closedir  : dirstream -> unit
      val chdir     : string -> unit
      val getcwd    : unit -> string
      val stdin     : file_desc
      val stdout    : file_desc
      val stderr    : file_desc

      structure S : sig
        type mode
        val irwxo : mode
      end

      structure O : sig
        eqtype flags
        val append : flags
        val excl : flags
        val noctty : flags
        val nonblock : flags
        val sync : flags
        val trunc : flags
      end


      datatype open_mode = O_RDONLY | O_WRONLY | O_RDWR

      val openf     : string * open_mode * O.flags -> file_desc
      val createf   : string * open_mode * O.flags * S.mode -> file_desc
      val creat     : string * S.mode -> file_desc
      val umask     : S.mode -> S.mode
      val link      : { old: string, new: string} -> unit
      val mkdir     : string * S.mode -> unit
      val unlink    : string -> unit
      val rmdir     : string -> unit
      val rename    : { new: string, old: string} -> unit
      val readlink  : string -> string

      eqtype dev

      val wordToDev : SysWord.word -> dev
      val devToWord : dev -> SysWord.word

      eqtype ino

      val wordToIno : SysWord.word -> ino
      val inoToWord : ino -> SysWord.word

      structure ST : sig
        type stat
        val isDir:  stat -> bool
        val isChr:  stat -> bool
        val isBlk:  stat -> bool
        val isReg:  stat -> bool
        val isFIFO: stat -> bool
        val isLink: stat -> bool
        val isSock: stat -> bool
        val mode:   stat -> S.mode
        val ino:    stat -> ino
        val dev:    stat -> dev
        val size:   stat -> Position.int
        val mtime:  stat -> Time.time
      end

      val stat      : string -> ST.stat
      val fstat     : file_desc -> ST.stat
      val lstat     : string -> ST.stat

      datatype access_mode = A_READ | A_WRITE | A_EXEC

      val access : (string * access_mode list) -> bool
      
      val utime : (string * {actime : Time.time, modtime : Time.time} option) -> unit

    end


    structure IO : sig
      val close : FileSys.file_desc -> unit
    end


    val can_input       : FileSys.file_desc -> int
    val set_block_mode  : FileSys.file_desc * bool -> unit
    val open_   : string * int * int -> FileSys.file_desc
    val read    : FileSys.file_desc * int -> Word8Vector.vector
    val write   : FileSys.file_desc * Word8Vector.vector * int * int -> int
    val seek    : FileSys.file_desc * int * int -> int
    val size    : FileSys.file_desc -> int
    val socket  : int * int * int -> FileSys.file_desc
    val connect : FileSys.file_desc * sockaddr -> unit

    datatype passwd =
      PASSWD of {dir    : string,
                 gecos  : string,
                 gid    : int,
                 name   : string,
                 passwd : string,
                 shell  : string,
                 uid    : int}
    val getpwent        : unit -> passwd
    val setpwent        : unit -> unit
    val endpwent        : unit -> unit
    val getpwuid        : int -> passwd
    val getpwnam        : string -> passwd
    val af_unix         : int
    val af_inet         : int
    val sock_stream     : int
    val sock_dgram      : int
    
    val o_rdonly        : int
    val o_wronly        : int
    val o_append        : int
    val o_creat         : int
    val o_trunc         : int
  end
@


1.23.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a17 4
 * Revision 1.23  1999/03/22  17:02:23  mitchell
 * [Bug #30286]
 * Support for the Unix structure
 *
@


1.22
log
@[Bug #190521]
OS.FileSys.readDir now returns an option type.
@
text
@d18 4
d163 1
a163 1
    val fork_execve     : string * string list * string list -> int
@


1.21
log
@Change spec of fork_execv
@
text
@d18 3
d175 1
a175 1
      val readdir   : dirstream -> string
@


1.20
log
@[Bug #190500]
Add back require statements for this file - edited the wrong file!!
@
text
@d18 4
d157 1
a157 1
    val fork_execv      : string * string list -> int
@


1.19
log
@[Bug #190500]
Remove redundant require statements
@
text
@d18 4
d102 5
@


1.18
log
@[Bug #30089]
Modify rusage to return stime and utime as basis times
@
text
@d18 4
a97 5
require "^.basis.__word32";
require "^.basis.__sys_word";
require "^.basis.__word8_vector";
require "^.basis.__position";
require "__time";
@


1.17
log
@[Bug #01749]
Use __sys_word for SysWord structure
@
text
@d18 4
d133 2
a134 2
       stime    : MLWorks.Time.Interval.T, (* system time used *)
       utime    : MLWorks.Time.Interval.T} (* user time used *)
@


1.17.2.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a17 4
 * Revision 1.17  1997/05/27  13:33:29  jkbrook
 * [Bug #01749]
 * Use __sys_word for SysWord structure
 *
@


1.17.1.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a17 4
 * Revision 1.17  1997/05/27  13:33:29  jkbrook
 * [Bug #01749]
 * Use __sys_word for SysWord structure
 *
@


1.16
log
@[Bug #1892]
rename __word{8,16,32}{array,vector} to __word{8,16,32}_{array,vector}
@
text
@d18 4
d91 1
@


1.16.1.1
log
@branched from 1.16
@
text
@a17 4
 * Revision 1.16  1997/01/15  12:18:12  io
 * [Bug #1892]
 * rename __word{8,16,32}{array,vector} to __word{8,16,32}_{array,vector}
 *
@


1.16.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a17 3
 * Revision 1.16.1.1  1997/05/12  10:52:45  hope
 * branched from 1.16
 *
@


1.16.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a17 3
 * Revision 1.16.1.1  1997/05/12  10:52:45  hope
 * branched from 1.16
 *
@


1.16.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a17 3
 * Revision 1.16.1.1  1997/05/12  10:52:45  hope
 * branched from 1.16
 *
@


1.16.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a17 3
 * Revision 1.16.1.1.1.1  1997/07/28  18:34:55  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.15
log
@[Bug #1661]
Changing io_desc to iodesc
@
text
@d18 4
d87 1
a87 1
require "^.basis.__word8vector";
@


1.15.4.1
log
@branched from 1.15
@
text
@a17 4
 * Revision 1.15  1996/11/08  14:29:13  matthew
 * [Bug #1661]
 * Changing io_desc to iodesc
 *
@


1.15.3.1
log
@branched from 1.15
@
text
@a17 4
 * Revision 1.15  1996/11/08  14:29:13  matthew
 * [Bug #1661]
 * Changing io_desc to iodesc
 *
@


1.15.3.1.1.1
log
@branched from 1.15.3.1
@
text
@a17 3
 * Revision 1.15.3.1  1996/12/17  18:19:11  hope
 * branched from 1.15
 *
@


1.15.2.1
log
@branched from 1.15
@
text
@a17 4
 * Revision 1.15  1996/11/08  14:29:13  matthew
 * [Bug #1661]
 * Changing io_desc to iodesc
 *
@


1.15.1.1
log
@branched from 1.15
@
text
@a17 4
 * Revision 1.15  1996/11/08  14:29:13  matthew
 * [Bug #1661]
 * Changing io_desc to iodesc
 *
@


1.15.1.1.1.1
log
@branched from 1.15.1.1
@
text
@a17 3
 * Revision 1.15.1.1  1996/11/14  13:23:09  hope
 * branched from 1.15
 *
@


1.14
log
@Remove references to basis.toplevel
@
text
@d18 3
d136 1
a136 1
    datatype io_desc = IO_DESC of int
d142 2
a143 2
      val fdToIOD : file_desc -> io_desc
      val iodToFD : io_desc -> file_desc
@


1.13
log
@[Bug #1554]
Change FileSys.file_desc to a type declaration since the
internal details of the type are not needed by clients
anymore.
@
text
@d18 6
a78 1
require "^.basis.toplevel";
@


1.13.3.1
log
@branched from 1.13
@
text
@a17 6
 * Revision 1.13  1996/08/21  10:05:25  stephenb
 * [Bug #1554]
 * Change FileSys.file_desc to a type declaration since the
 * internal details of the type are not needed by clients
 * anymore.
 *
@


1.13.2.1
log
@branched from 1.13
@
text
@a17 6
 * Revision 1.13  1996/08/21  10:05:25  stephenb
 * [Bug #1554]
 * Change FileSys.file_desc to a type declaration since the
 * internal details of the type are not needed by clients
 * anymore.
 *
@


1.13.1.1
log
@branched from 1.13
@
text
@a17 6
 * Revision 1.13  1996/08/21  10:05:25  stephenb
 * [Bug #1554]
 * Change FileSys.file_desc to a type declaration since the
 * internal details of the type are not needed by clients
 * anymore.
 *
@


1.12
log
@[Bug #1536]
Made read and write use Word8Vector.vectors instead of strings.
@
text
@d18 4
d128 2
d131 1
a131 1
      datatype file_desc = FILE_DESC of int
d134 3
@


1.11
log
@[Bug #1453]
provding size function on file descriptors for up-to-date
revised basis IO.
@
text
@d18 5
d71 1
d214 7
a220 7
    val open_           : string * int * int -> FileSys.file_desc
    val read            : FileSys.file_desc * int -> string
    val write           : FileSys.file_desc * string * int * int -> int
    val seek            : FileSys.file_desc * int * int -> int
    val size            : FileSys.file_desc -> int
    val socket          : int * int * int -> FileSys.file_desc
    val connect         : FileSys.file_desc * sockaddr -> unit
@


1.10
log
@Add POSIX.FileSys.{openf,creatf,creat,link,umask} and
POSIX>FileSys.O.*
@
text
@d18 4
d211 2
a212 1
    val seek            : FileSys.file_desc * int -> unit
@


1.9
log
@exposing unix IO constants in signature.
@
text
@d18 3
d134 18
@


1.8
log
@Implement POSIX.Error.{errorName,syserror}
@
text
@d18 3
d207 6
@


1.7
log
@Introduce the Error structure, move SysErr ... etc. into it
and implement Error.errorMsg.
@
text
@d18 4
d68 2
@


1.6
log
@Add file_desc type so that it can be used as the basis for the
various file descriptor types that are required by OS and POSIX.
Also started POSIXification of the structure i.e. various routines
that were at the top level are now embedded in sub-structures that
follow the signatures defined in the latest basis revision.
@
text
@d10 3
d18 7
d50 3
a52 1
require "^.basis.__word";
d57 9
a65 2
    type syserror
    exception SysErr of (string * syserror MLWorks.Option.option)
a69 1
    val realpath        : string -> string
a88 2
    val tmpName         : unit -> string

d104 2
a105 2
      val fdToWord : file_desc -> word (* XXX: should be SysWord *)
      val wordToFD : word -> file_desc (* XXX: should be SysWord *)
d111 1
a111 1
      val chDir     : string -> unit
d116 8
a123 1
      val mkdir     : string * int -> unit     (* XXX: wrong type *)
d125 12
a136 2
      val rename    : string * string -> unit  (* XXX: wrong type *)
      val unlink    : string -> unit
d147 4
a150 1
        val size:   stat -> int
d157 7
a198 1

@


1.5
log
@Rename the Unix exception to be SysErr.  This simplifies the
implementation of the Unix version of the OS interface in the
latest basis.
@
text
@d15 5
d40 3
d48 1
d50 2
a51 4
    val environment	: unit -> string list
    val setwd		: string -> unit
    val getwd		: unit -> string
    val realpath	: string -> string
d55 66
a120 27
       inblock	: int,            (* block input operations *)
       isrss	: int,            (* currently 0 *)
       ixrss	: int,            (* currently 0 *)
       majflt	: int,            (* page faults requiring physical I/O *)
       maxrss	: int,            (* maximum resident set size *)
       minflt	: int,            (* page faults not requiring physical I/O *)
       msgrcv	: int,            (* messages received *)
       msgsnd	: int,            (* messages sent *)
       nivcsw	: int,            (* involuntary context switches *)
       nsignals	: int,            (* signals received *)
       nswap	: int,            (* swaps *)
       nvcsw	: int,            (* voluntary context switches *)
       oublock	: int,            (* block output operations *)
       stime	: MLWorks.Time.Interval.T, (* system time used *)
       utime	: MLWorks.Time.Interval.T} (* user time used *)

    structure ST : sig
      type stat
      val isDir:  stat -> bool
      val isChr:  stat -> bool
      val isBlk:  stat -> bool
      val isReg:  stat -> bool
      val isFIFO: stat -> bool
      val isLink: stat -> bool
      val isSock: stat -> bool
      val size:   stat -> int
      val mtime:  stat -> MLWorks.Time.time
d123 4
a126 3
    val stat : string -> ST.stat
    val fstat : int -> ST.stat
    val lstat : string -> ST.stat
d129 8
a136 2
    val rename		: string * string -> unit
    val tmpName         : unit -> string
a137 29
    val open_		: string * int * int -> int
    val close		: int -> unit
    val unlink		: string -> unit
    val set_block_mode	: int * bool -> unit
    val can_input	: int -> int
    val write		: int * string * int * int -> int
    val read		: int * int -> string
    val seek		: int * int -> unit
    val socket		: int * int * int -> int
    val bind		: int * sockaddr -> int
    val getsockname	: int -> sockaddr
    val getpeername	: int -> sockaddr
    val connect		: int * sockaddr -> unit
    val accept		: int -> int * sockaddr
    val listen		: int * int -> unit
    val execve		: string * string list * string list -> unit
    val execv		: string * string list -> unit
    val execvp		: string * string list -> unit
    val fork_execve	: string * string list * string list -> int
    val fork_execv	: string * string list -> int
    val fork_execvp	: string * string list -> int
    val kill		: int * int -> unit
    type dir
    val opendir		: string -> dir
    val readdir		: dir -> string
    val rewinddir	: dir -> unit
    val closedir	: dir -> unit
    val mkdir		: string * int -> unit
    val rmdir		: string -> unit
d139 12
a150 12
      PASSWD of {dir	: string,
                 gecos	: string,
                 gid	: int,
                 name	: string,
                 passwd	: string,
                 shell	: string,
                 uid	: int}
    val getpwent	: unit -> passwd
    val setpwent	: unit -> unit
    val endpwent	: unit -> unit
    val getpwuid	: int -> passwd
    val getpwnam	: string -> passwd
@


1.4
log
@unix.c reorganisation: change vfork_XXX to fork_XXX since vfork
isn't important as far as the user is concerned, all they are
after is a cheap fork and exec.
@
text
@d15 5
d37 2
a38 1
    exception Unix of string
d63 22
a84 15
    val stat :
      int ->
      {dev	: int,
       ino	: int,
       mode	: int,
       nlink	: int,
       uid	: int,
       gid	: int,
       rdev	: int,
       size	: int,
       atime	: MLWorks.Time.time,
       mtime	: MLWorks.Time.time,
       ctime	: MLWorks.Time.time,
       blksize	: int,
       blocks	: int}
d110 1
@


1.3
log
@Add af+imox. af_inet, sock_stream, sock_dgram so that the
editor no longer has to pass magic constants to the socket call.
@
text
@d15 4
d90 3
a92 3
    val vfork_execve	: string * string list * string list -> int
    val vfork_execv	: string * string list -> int
    val vfork_execvp	: string * string list -> int
@


1.2
log
@Fix indentation - previous version was checked in without re-indenting it.
@
text
@d15 3
d73 1
a73 1
    val write		: int * string -> int
d109 4
@


1.1
log
@new unit
OS reorganisation: separated out of the pervasive library so
that only UNIX OSes need support it.
@
text
@d14 6
a19 1
 * $Log$
d34 73
a106 73
              {idrss    : int,            (* integral resident set size *)
               inblock	: int,            (* block input operations *)
               isrss	: int,            (* currently 0 *)
               ixrss	: int,            (* currently 0 *)
               majflt	: int,            (* page faults requiring physical I/O *)
               maxrss	: int,            (* maximum resident set size *)
               minflt	: int,            (* page faults not requiring physical I/O *)
               msgrcv	: int,            (* messages received *)
               msgsnd	: int,            (* messages sent *)
               nivcsw	: int,            (* involuntary context switches *)
               nsignals	: int,            (* signals received *)
               nswap	: int,            (* swaps *)
               nvcsw	: int,            (* voluntary context switches *)
               oublock	: int,            (* block output operations *)
               stime	: MLWorks.Time.Interval.T, (* system time used *)
               utime	: MLWorks.Time.Interval.T} (* user time used *)
	    val stat :
	      int ->
	      {dev	: int,
	       ino	: int,
	       mode	: int,
	       nlink	: int,
	       uid	: int,
	       gid	: int,
	       rdev	: int,
	       size	: int,
	       atime	: MLWorks.Time.time,
	       mtime	: MLWorks.Time.time,
	       ctime	: MLWorks.Time.time,
	       blksize	: int,
	       blocks	: int}
            val open_		: string * int * int -> int
            val close		: int -> unit
	    val unlink		: string -> unit
	    val set_block_mode	: int * bool -> unit
	    val can_input	: int -> int
            val write		: int * string -> int
            val read		: int * int -> string
	    val seek		: int * int -> unit
            val socket		: int * int * int -> int
            val bind		: int * sockaddr -> int
            val getsockname	: int -> sockaddr
            val getpeername	: int -> sockaddr
            val connect		: int * sockaddr -> unit
            val accept		: int -> int * sockaddr
            val listen		: int * int -> unit
            val execve		: string * string list * string list -> unit
            val execv		: string * string list -> unit
            val execvp		: string * string list -> unit
            val vfork_execve	: string * string list * string list -> int
            val vfork_execv	: string * string list -> int
            val vfork_execvp	: string * string list -> int
            val kill		: int * int -> unit
            type dir
            val opendir		: string -> dir
            val readdir		: dir -> string
            val closedir	: dir -> unit
	    val mkdir		: string * int -> unit
	    val rmdir		: string -> unit
            datatype passwd =
              PASSWD of {dir	: string,
                         gecos	: string,
                         gid	: int,
                         name	: string,
                         passwd	: string,
                         shell	: string,
                         uid	: int}
            val getpwent	: unit -> passwd
            val setpwent	: unit -> unit
            val endpwent	: unit -> unit
            val getpwuid	: int -> passwd
            val getpwnam	: string -> passwd
          end
@
