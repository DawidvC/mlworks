head	1.9;
access;
symbols
	MLW_daveb_inline_1_4_99:1.9.1
	MLWorks_21c0_1999_03_25:1.9
	MLWorks_20c1_1998_08_20:1.8
	MLWorks_20c0_1998_08_04:1.8
	MLWorks_20b2c2_1998_06_19:1.8
	MLWorks_20b2_Windows_1998_06_12:1.8
	MLWorks_20b1c1_1998_05_07:1.8
	MLWorks_20b0_1998_04_07:1.8
	MLWorks_20b0_1998_03_20:1.8
	MLWorks_20m2_1998_02_16:1.8
	MLWorks_20m1_1997_10_23:1.7
	MLWorks_11r1:1.7.5.1.1.1.1
	MLWorks_workspace_97:1.7.7
	MLWorks_dt_wizard:1.7.6
	MLWorks_11c0_1997_09_09:1.7.5.1.1.1
	MLWorks_10r3:1.7.5.1.3
	MLWorks_10r2_551:1.7.5.1.2
	MLWorks_11:1.7.5.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.7.5.1
	MLWorks_20m0_1997_06_20:1.7
	MLWorks_1_0_r2c2_1997_06_14:1.7.5.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.7.5.1
	MLWorks_1_0_r2c1_1997_05_12:1.7.5
	MLWorks_BugFix_1997_04_24:1.7
	MLWorks_1_0_r2_Win32_1997_04_11:1.7
	MLWorks_1_0_r2_Unix_1997_04_04:1.7
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.7.3.1.1
	MLWorks_gui_1996_12_18:1.7.4
	MLWorks_1_0_Win32_1996_12_17:1.7.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.7.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.7.1.1
	MLWorks_1_0_Irix_1996_11_28:1.7.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.7.2
	MLWorks_1_0_Unix_1996_11_14:1.7.1
	MLWorks_Open_Beta2_1996_10_11:1.6.2
	MLWorks_License_dev:1.6.1
	MLWorks_1_open_beta_1996_09_13:1.4.1
	MLWorks_Open_Beta_1996_08_22:1.4
	MLWorks_Beta_1996_07_02:1.4
	MLWorks_Beta_1996_06_07:1.4
	MLWorks_Beta_1996_06_06:1.4
	MLWorks_Beta_1996_06_05:1.4
	MLWorks_Beta_1996_06_03:1.3
	MLWorks_Beta_1996_05_31:1.3
	MLWorks_Beta_1996_05_30:1.3;
locks; strict;
comment	@ *  @;


1.9
date	98.10.02.14.22.22;	author jont;	state Exp;
branches
	1.9.1.1;
next	1.8;

1.8
date	97.11.08.18.24.41;	author jont;	state Exp;
branches;
next	1.7;

1.7
date	96.11.06.11.31.32;	author matthew;	state Exp;
branches
	1.7.1.1
	1.7.2.1
	1.7.3.1
	1.7.4.1
	1.7.5.1
	1.7.6.1
	1.7.7.1;
next	1.6;

1.6
date	96.10.02.08.32.25;	author stephenb;	state Exp;
branches
	1.6.1.1
	1.6.2.1;
next	1.5;

1.5
date	96.10.01.12.36.55;	author stephenb;	state Exp;
branches;
next	1.4;

1.4
date	96.06.04.16.08.15;	author io;	state Exp;
branches
	1.4.1.1;
next	1.3;

1.3
date	96.05.29.10.23.30;	author stephenb;	state Exp;
branches;
next	1.2;

1.2
date	96.05.23.14.21.25;	author stephenb;	state Exp;
branches;
next	1.1;

1.1
date	96.05.07.14.11.10;	author stephenb;	state Exp;
branches;
next	;

1.4.1.1
date	96.09.13.11.42.40;	author hope;	state Exp;
branches;
next	;

1.6.1.1
date	96.10.07.16.35.48;	author hope;	state Exp;
branches;
next	;

1.6.2.1
date	96.10.17.11.54.52;	author hope;	state Exp;
branches;
next	;

1.7.1.1
date	96.11.14.13.23.14;	author hope;	state Exp;
branches
	1.7.1.1.1.1;
next	;

1.7.1.1.1.1
date	96.11.28.15.33.45;	author hope;	state Exp;
branches;
next	;

1.7.2.1
date	96.11.22.18.40.15;	author hope;	state Exp;
branches;
next	;

1.7.3.1
date	96.12.17.18.19.16;	author hope;	state Exp;
branches
	1.7.3.1.1.1;
next	;

1.7.3.1.1.1
date	97.02.24.12.13.35;	author hope;	state Exp;
branches;
next	;

1.7.4.1
date	96.12.18.10.14.39;	author hope;	state Exp;
branches;
next	;

1.7.5.1
date	97.05.12.10.52.49;	author hope;	state Exp;
branches
	1.7.5.1.1.1
	1.7.5.1.2.1
	1.7.5.1.3.1;
next	;

1.7.5.1.1.1
date	97.07.28.18.35.02;	author daveb;	state Exp;
branches
	1.7.5.1.1.1.1.1;
next	;

1.7.5.1.1.1.1.1
date	97.10.07.12.00.44;	author jkbrook;	state Exp;
branches;
next	;

1.7.5.1.2.1
date	97.09.08.17.27.47;	author daveb;	state Exp;
branches;
next	;

1.7.5.1.3.1
date	97.09.09.14.24.54;	author daveb;	state Exp;
branches;
next	;

1.7.6.1
date	97.09.10.19.43.44;	author brucem;	state Exp;
branches;
next	;

1.7.7.1
date	97.09.11.21.11.09;	author daveb;	state Exp;
branches;
next	;

1.9.1.1
date	99.04.01.18.09.17;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
@


1.9
log
@[Bug #30487]
Modify functions using seconds and fractions of seconds
to use LargeInt.int
@
text
@(* Copyright 1996 The Harlequin Group Limited.  All rights reserved.
 *
 * Unix implementation of basis Time structure.
 *
 * Any alterations to this file should be done in sync. with alterations
 * to rts/src/Unix/basis_time.c
 *
 * Revision Log
 * ------------
 *
 * $Log: __time.sml,v $
 *  Revision 1.8  1997/11/08  18:24:41  jont
 *  [Bug #30089]
 *  Replace time with MLWorks.Internal.Types.time
 *
 *  Revision 1.7  1996/11/06  11:31:32  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
 *  Revision 1.6  1996/10/02  08:32:25  stephenb
 *  Fix Time.> -- should have done this at the same time as Time.<
 *
 *  Revision 1.5  1996/10/01  12:36:55  stephenb
 *  [Bug #1627]
 *  Fix broken Time.<
 *
 *  Revision 1.4  1996/06/04  16:08:15  io
 *  stringcvt -> string_cvt
 *
 *  Revision 1.3  1996/05/29  10:23:30  stephenb
 *  Implement fmt, toString, fromString and scan.
 *
 *  Revision 1.2  1996/05/23  14:21:25  stephenb
 *  Bring the signature up to date with the latest basis revision.
 *
 *  Revision 1.1  1996/05/07  14:11:10  stephenb
 *  new unit
 *
 *)

require "^.basis.__char";
require "^.basis.__int";
require "^.basis.__large_int";
require "^.basis.__real";
require "^.basis.__large_real";
require "^.basis.__string_cvt";
require "^.basis.time";

structure Time : TIME =
  struct
    val env = MLWorks.Internal.Runtime.environment

    datatype time = datatype MLWorks.Internal.Types.time

    exception Time
    val timeRef = env "Time.Time"
    val _ = timeRef := Time

    val zeroTime = TIME (0, 0, 0)

    val fromReal : LargeReal.real -> time = env "Time.fromReal"
    val toReal :   time -> LargeReal.real = env "Time.toReal"

    val toSeconds :      time -> LargeInt.int = env "Time.toSeconds"
    val toMilliseconds : time -> LargeInt.int = env "Time.toMilliseconds"
    val toMicroseconds : time -> LargeInt.int = env "Time.toMicroseconds"

    val fromSeconds :      LargeInt.int -> time = env "Time.fromSeconds"
    val fromMilliseconds : LargeInt.int -> time = env "Time.fromMilliseconds"
    val fromMicroseconds : LargeInt.int -> time = env "Time.fromMicroseconds"

    val op + : time * time -> time = env "Time.+"
    val op - : time * time -> time = env "Time.-"


    fun compare (TIME (aHi, aLo, aSec), TIME (bHi, bLo, bSec)) =
      if aHi < bHi then
        LESS
      else if aHi > bHi then
        GREATER
      else if aLo < bLo then
        LESS
      else if aLo > bLo then
        GREATER
      else if aSec < bSec then
        LESS
      else if aSec > bSec then
        GREATER
      else
        EQUAL


    (* The actual definition used should be semantically equivalent to,
     * but hopefully easier to maintain/follow than the following :-
     * 
     *   aHi < bHi
     * orelse
     *   (aHi = bHi andalso (aLo < bLo orelse (aLo = bLo andalso aSec < bSec)))
     *)

    fun lt (TIME (aHi, aLo, aSec), TIME (bHi, bLo, bSec)) =
      if aHi < bHi then
        true
      else if aHi = bHi then
        if aLo < bLo then
          true
        else if aLo = bLo then
          aSec < bSec
        else
          false
      else
        false


    fun leq  (TIME (aHi, aLo, aSec), TIME (bHi, bLo, bSec)) =
      if aHi < bHi then
        true
      else if aHi > bHi then
        false
      else if aLo < bLo then
        true
      else if aLo > bLo then
        false
      else
        aSec <= bSec


    fun gt (a, b) = lt (b, a)

    fun geq (a, b) = leq (b, a)

    val op<  = lt
    val op<= = leq
    val op>  = gt
    val op>= = geq

    val now : unit -> time = env "Time.now"


    fun fmt n = 
      let 
        val n' = Int.max (n, 0)
      in
        Real.fmt (StringCvt.FIX (SOME n')) o toReal
      end


    val toString = fmt 3


    local
      fun readInt getc src =
        let
          val (strInt, src') = StringCvt.splitl Char.isDigit getc src
        in
          case strInt of
            "" => NONE
          | _  => SOME (strInt, src')
        end

      fun fromString str src =
        case Real.fromString str of
          NONE => NONE
        | SOME r => SOME (fromReal r, src)

    in
      fun scan getc src = 
        let 
          val src' = StringCvt.skipWS getc src
        in
          case readInt getc src' of
            NONE => NONE
          | SOME (secs, src'') =>
            case getc src'' of
              NONE => fromString secs src''
            | SOME (ch, src''') =>
              if ch = #"." then
                case readInt getc src''' of
                  NONE => fromString secs src''
                | SOME (fractions, src'''') =>
                  fromString (secs ^ "." ^ fractions) src''''
              else
                fromString secs src''
        end
    end

    val fromString = StringCvt.scanString scan


  end
@


1.9.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a11 5
 *  Revision 1.9  1998/10/02  14:22:22  jont
 *  [Bug #30487]
 *  Modify functions using seconds and fractions of seconds
 *  to use LargeInt.int
 *
@


1.8
log
@[Bug #30089]
Replace time with MLWorks.Internal.Types.time
@
text
@d12 4
d43 1
d45 1
d61 2
a62 2
    val fromReal : real -> time = env "Time.fromReal"
    val toReal :   time -> real = env "Time.toReal"
d64 7
a70 7
    val toSeconds :      time -> int = env "Time.toSeconds"
    val toMilliseconds : time -> int = env "Time.toMilliseconds"
    val toMicroseconds : time -> int = env "Time.toMicroseconds"

    val fromSeconds :      int -> time = env "Time.fromSeconds"
    val fromMilliseconds : int -> time = env "Time.fromMilliseconds"
    val fromMicroseconds : int -> time = env "Time.fromMicroseconds"
@


1.7
log
@[Bug #1728]
__integer becomes __int
@
text
@d12 4
d47 1
a47 1
    datatype time = TIME of int * int * int
@


1.7.7.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a11 4
 *  Revision 1.7  1996/11/06  11:31:32  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
@


1.7.6.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a11 4
 *  Revision 1.7  1996/11/06  11:31:32  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
@


1.7.5.1
log
@branched from 1.7
@
text
@a11 4
 *  Revision 1.7  1996/11/06  11:31:32  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
@


1.7.5.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a11 3
 *  Revision 1.7.5.1  1997/05/12  10:52:49  hope
 *  branched from 1.7
 *
@


1.7.5.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a11 3
 *  Revision 1.7.5.1  1997/05/12  10:52:49  hope
 *  branched from 1.7
 *
@


1.7.5.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a11 3
 *  Revision 1.7.5.1  1997/05/12  10:52:49  hope
 *  branched from 1.7
 *
@


1.7.5.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a11 3
 *  Revision 1.7.5.1.1.1  1997/07/28  18:35:02  daveb
 *  branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.7.4.1
log
@branched from 1.7
@
text
@a11 4
 *  Revision 1.7  1996/11/06  11:31:32  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
@


1.7.3.1
log
@branched from 1.7
@
text
@a11 4
 *  Revision 1.7  1996/11/06  11:31:32  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
@


1.7.3.1.1.1
log
@branched from 1.7.3.1
@
text
@a11 3
 *  Revision 1.7.3.1  1996/12/17  18:19:16  hope
 *  branched from 1.7
 *
@


1.7.2.1
log
@branched from 1.7
@
text
@a11 4
 *  Revision 1.7  1996/11/06  11:31:32  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
@


1.7.1.1
log
@branched from 1.7
@
text
@a11 4
 *  Revision 1.7  1996/11/06  11:31:32  matthew
 *  [Bug #1728]
 *  __integer becomes __int
 *
@


1.7.1.1.1.1
log
@branched from 1.7.1.1
@
text
@a11 3
 *  Revision 1.7.1.1  1996/11/14  13:23:14  hope
 *  branched from 1.7
 *
@


1.6
log
@Fix Time.> -- should have done this at the same time as Time.<
@
text
@d12 3
d34 1
a34 1
require "^.basis.__integer";
@


1.6.2.1
log
@branched from 1.6
@
text
@a11 3
 *  Revision 1.6  1996/10/02  08:32:25  stephenb
 *  Fix Time.> -- should have done this at the same time as Time.<
 *
@


1.6.1.1
log
@branched from 1.6
@
text
@a11 3
 *  Revision 1.6  1996/10/02  08:32:25  stephenb
 *  Fix Time.> -- should have done this at the same time as Time.<
 *
@


1.5
log
@[Bug #1627]
Fix broken Time.<
@
text
@d12 4
a29 1
require "^.basis.toplevel";
d80 1
a80 1
    (* The actual definition uses should be semantically equivalent to,
d115 1
a115 15
    fun gt (TIME (aHi, aLo, aSec), TIME (bHi, bLo, bSec)) = 
      aHi > bHi andalso aLo > bLo andalso aSec > bSec


    fun geq (TIME (aHi, aLo, aSec), TIME (bHi, bLo, bSec)) =
      if aHi > bHi then
        true
      else if aHi < bHi then
        false
      else if aLo > bLo then
        true
      else if aLo < bLo then
        false
      else
        aSec >= bSec
d117 1
@


1.4
log
@stringcvt -> string_cvt
@
text
@d12 3
d77 8
d86 11
a96 1
      aHi < bHi andalso aLo < bLo andalso aSec < bSec
@


1.4.1.1
log
@branched from 1.4
@
text
@a11 3
 *  Revision 1.4  1996/06/04  16:08:15  io
 *  stringcvt -> string_cvt
 *
@


1.3
log
@Implement fmt, toString, fromString and scan.
@
text
@d12 3
d27 1
a27 1
require "^.basis.__stringcvt";
@


1.2
log
@Bring the signature up to date with the latest basis revision.
@
text
@d12 3
d21 4
a111 3
    exception Unimplemented of string

    fun fmt x y = raise Unimplemented "fmt"
d113 46
a158 1
    fun toString _ = raise Unimplemented "toString"
d160 1
a160 1
    fun fromString _ = raise Unimplemented "fromString"
a161 1
    fun scan _ = raise Unimplemented "scan"
@


1.1
log
@new unit
@
text
@d11 4
a14 1
 * $Log$
d104 10
@
