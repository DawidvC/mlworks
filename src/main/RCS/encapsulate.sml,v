head	1.54;
access;
symbols
	MLW_daveb_inline_1_4_99:1.54.1
	MLWorks_21c0_1999_03_25:1.54
	MLWorks_20c1_1998_08_20:1.52
	MLWorks_20c0_1998_08_04:1.52
	MLWorks_20b2c2_1998_06_19:1.52
	MLWorks_20b2_Windows_1998_06_12:1.52
	MLWorks_20b1c1_1998_05_07:1.52
	MLWorks_20b0_1998_04_07:1.51
	MLWorks_20b0_1998_03_20:1.51
	MLWorks_20m2_1998_02_16:1.51
	MLWorks_20m1_1997_10_23:1.48
	MLWorks_11r1:1.48.8.1.1.1.1
	MLWorks_workspace_97:1.48.10
	MLWorks_dt_wizard:1.48.9
	MLWorks_11c0_1997_09_09:1.48.8.1.1.1
	MLWorks_10r3:1.48.8.1.3
	MLWorks_10r2_551:1.48.8.1.2
	MLWorks_11:1.48.8.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.48.8.1
	MLWorks_20m0_1997_06_20:1.48
	MLWorks_1_0_r2c2_1997_06_14:1.48.8.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.48.8.1
	MLWorks_1_0_r2c1_1997_05_12:1.48.8
	MLWorks_BugFix_1997_04_24:1.48
	MLWorks_1_0_r2_Win32_1997_04_11:1.48
	MLWorks_1_0_r2_Unix_1997_04_04:1.48
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.48.6.1.1
	MLWorks_gui_1996_12_18:1.48.7
	MLWorks_1_0_Win32_1996_12_17:1.48.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.48.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.48.4.1
	MLWorks_1_0_Irix_1996_11_28:1.48.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.48.5
	MLWorks_1_0_Unix_1996_11_14:1.48.4
	MLWorks_Open_Beta2_1996_10_11:1.48.3
	MLWorks_License_dev:1.48.2
	MLWorks_1_open_beta_1996_09_13:1.48.1
	MLWorks_Open_Beta_1996_08_22:1.48
	MLWorks_Beta_1996_07_02:1.48
	MLWorks_Beta_1996_06_07:1.48
	MLWorks_Beta_1996_06_06:1.48
	MLWorks_Beta_1996_06_05:1.48
	MLWorks_Beta_1996_06_03:1.48
	MLWorks_Beta_1996_05_31:1.48
	MLWorks_Beta_1996_05_30:1.48
	ML_beta_release_12/08/94:1.40
	ML_beta_release_03/08/94:1.40
	ML_revised_beta_release_25/05/94:1.39
	ML_final_beta_release_02/03/94:1.38
	mlworks-28-01-1994:1.37
	Release:1.33
	mlworks-beta-01-09-1993:1.33
	MLWorks-1-0-4-29/01/1993:1.25
	MLWorks-1-0-3-21/12/1992:1.25
	MLWorks-1-0-2-15/12/1992:1.25
	MLWorks-1-0-1-04/12/1992:1.25
	checkpoint_17_08_92:1.19;
locks; strict;
comment	@ * @;


1.54
date	98.10.23.14.56.46;	author jont;	state Exp;
branches
	1.54.1.1;
next	1.53;

1.53
date	98.10.22.10.45.12;	author jont;	state Exp;
branches;
next	1.52;

1.52
date	98.04.22.11.35.38;	author jont;	state Exp;
branches;
next	1.51;

1.51
date	98.02.05.12.07.16;	author jont;	state Exp;
branches;
next	1.50;

1.50
date	97.11.25.10.19.14;	author jont;	state Exp;
branches;
next	1.49;

1.49
date	97.10.20.16.39.14;	author jont;	state Exp;
branches;
next	1.48;

1.48
date	96.03.01.14.25.04;	author daveb;	state Exp;
branches
	1.48.1.1
	1.48.2.1
	1.48.3.1
	1.48.4.1
	1.48.5.1
	1.48.6.1
	1.48.7.1
	1.48.8.1
	1.48.9.1
	1.48.10.1;
next	1.47;

1.47
date	96.02.23.17.27.03;	author jont;	state Exp;
branches;
next	1.46;

1.46
date	95.04.20.13.09.26;	author jont;	state Exp;
branches;
next	1.45;

1.45
date	95.03.23.12.49.22;	author matthew;	state Exp;
branches;
next	1.44;

1.44
date	95.03.01.14.05.43;	author matthew;	state Exp;
branches;
next	1.43;

1.43
date	95.01.13.11.18.28;	author matthew;	state Exp;
branches;
next	1.42;

1.42
date	94.09.27.16.43.38;	author nickb;	state Exp;
branches;
next	1.41;

1.41
date	94.09.13.10.09.10;	author matthew;	state Exp;
branches;
next	1.40;

1.40
date	94.06.22.15.22.24;	author jont;	state Exp;
branches;
next	1.39;

1.39
date	94.04.07.14.00.19;	author jont;	state Exp;
branches;
next	1.38;

1.38
date	94.02.22.10.26.37;	author nosa;	state Exp;
branches;
next	1.37;

1.37
date	94.01.07.17.01.01;	author matthew;	state Exp;
branches;
next	1.36;

1.36
date	93.12.23.12.28.57;	author matthew;	state Exp;
branches;
next	1.35;

1.35
date	93.12.15.13.48.23;	author matthew;	state Exp;
branches;
next	1.34;

1.34
date	93.11.15.14.13.19;	author nickh;	state Exp;
branches;
next	1.33;

1.33
date	93.08.03.14.31.31;	author jont;	state Exp;
branches
	1.33.1.1;
next	1.32;

1.32
date	93.07.30.15.25.22;	author nosa;	state Exp;
branches;
next	1.31;

1.31
date	93.05.28.10.51.21;	author jont;	state Exp;
branches;
next	1.30;

1.30
date	93.05.25.14.59.37;	author jont;	state Exp;
branches;
next	1.29;

1.29
date	93.03.11.11.11.47;	author matthew;	state Exp;
branches;
next	1.28;

1.28
date	93.03.04.14.32.59;	author matthew;	state Exp;
branches;
next	1.27;

1.27
date	93.02.09.10.30.43;	author matthew;	state Exp;
branches;
next	1.26;

1.26
date	93.02.01.16.50.15;	author matthew;	state Exp;
branches;
next	1.25;

1.25
date	92.10.29.11.24.01;	author richard;	state Exp;
branches;
next	1.24;

1.24
date	92.10.15.16.01.30;	author clive;	state Exp;
branches;
next	1.23;

1.23
date	92.09.10.10.35.04;	author clive;	state Exp;
branches;
next	1.22;

1.22
date	92.09.10.10.35.04;	author richard;	state Exp;
branches;
next	1.21;

1.21
date	92.08.26.16.41.47;	author jont;	state Exp;
branches;
next	1.20;

1.20
date	92.08.25.08.09.06;	author clive;	state Exp;
branches;
next	1.19;

1.19
date	92.08.14.15.49.07;	author davidt;	state Exp;
branches;
next	1.18;

1.18
date	92.08.12.12.34.53;	author jont;	state Exp;
branches;
next	1.17;

1.17
date	92.08.06.18.40.40;	author davidt;	state Exp;
branches;
next	1.16;

1.16
date	92.07.29.16.13.25;	author clive;	state Exp;
branches;
next	1.15;

1.15
date	92.07.27.16.31.50;	author clive;	state Exp;
branches;
next	1.14;

1.14
date	92.07.21.12.24.28;	author jont;	state Exp;
branches;
next	1.13;

1.13
date	92.07.07.08.37.46;	author clive;	state Exp;
branches;
next	1.12;

1.12
date	92.06.15.14.26.07;	author jont;	state Exp;
branches;
next	1.11;

1.11
date	92.06.11.09.34.18;	author clive;	state Exp;
branches;
next	1.10;

1.10
date	92.01.23.16.12.07;	author clive;	state Exp;
branches;
next	1.9;

1.9
date	92.01.23.16.12.07;	author jont;	state Exp;
branches;
next	1.8;

1.8
date	92.01.15.12.52.36;	author jont;	state Exp;
branches;
next	1.7;

1.7
date	92.01.09.10.59.04;	author jont;	state Exp;
branches;
next	1.6;

1.6
date	92.01.08.14.35.04;	author colin;	state Exp;
branches;
next	1.5;

1.5
date	91.12.19.15.24.24;	author jont;	state Exp;
branches;
next	1.4;

1.4
date	91.12.17.18.08.18;	author jont;	state Exp;
branches;
next	1.3;

1.3
date	91.12.16.18.58.52;	author jont;	state Exp;
branches;
next	1.2;

1.2
date	91.12.11.11.44.12;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	91.10.16.13.47.36;	author jont;	state Exp;
branches;
next	;

1.33.1.1
date	93.08.03.14.31.31;	author jont;	state Exp;
branches;
next	;

1.48.1.1
date	96.09.13.11.18.18;	author hope;	state Exp;
branches;
next	;

1.48.2.1
date	96.10.07.16.08.11;	author hope;	state Exp;
branches;
next	;

1.48.3.1
date	96.10.17.11.26.25;	author hope;	state Exp;
branches;
next	;

1.48.4.1
date	96.11.14.12.51.43;	author hope;	state Exp;
branches
	1.48.4.1.1.1;
next	;

1.48.4.1.1.1
date	96.11.28.15.02.45;	author hope;	state Exp;
branches;
next	;

1.48.5.1
date	96.11.22.18.10.56;	author hope;	state Exp;
branches;
next	;

1.48.6.1
date	96.12.17.17.49.30;	author hope;	state Exp;
branches
	1.48.6.1.1.1;
next	;

1.48.6.1.1.1
date	97.02.24.11.39.38;	author hope;	state Exp;
branches;
next	;

1.48.7.1
date	96.12.18.09.43.34;	author hope;	state Exp;
branches;
next	;

1.48.8.1
date	97.05.12.10.36.03;	author hope;	state Exp;
branches
	1.48.8.1.1.1
	1.48.8.1.2.1
	1.48.8.1.3.1;
next	;

1.48.8.1.1.1
date	97.07.28.18.21.44;	author daveb;	state Exp;
branches
	1.48.8.1.1.1.1.1;
next	;

1.48.8.1.1.1.1.1
date	97.10.07.11.47.24;	author jkbrook;	state Exp;
branches;
next	;

1.48.8.1.2.1
date	97.09.08.17.15.08;	author daveb;	state Exp;
branches;
next	;

1.48.8.1.3.1
date	97.09.09.14.11.01;	author daveb;	state Exp;
branches;
next	;

1.48.9.1
date	97.09.10.19.27.02;	author brucem;	state Exp;
branches;
next	;

1.48.10.1
date	97.09.11.20.57.03;	author daveb;	state Exp;
branches;
next	1.48.10.2;

1.48.10.2
date	97.10.29.14.04.13;	author daveb;	state Exp;
branches;
next	;

1.54.1.1
date	99.04.01.17.57.49;	author daveb;	state Exp;
branches;
next	;


desc
@Binary encapsulation of data for separate compilation
@


1.54
log
@[Bug #70198]
Add interface to get code_offset
@
text
@(* encapsulate.sml the signature *)
(*
$Log: encapsulate.sml,v $
 * Revision 1.53  1998/10/22  10:45:12  jont
 * [Bug #70194]
 * Add interface for input_code taking filename to code_module
 *
 * Revision 1.52  1998/04/22  11:35:38  jont
 * [Bug #70099]
 * Changing encapsulation order to do type_env
 * before lambda_env and parser_env
 *
 * Revision 1.51  1998/02/05  12:07:16  jont
 * [Bug #30331]
 * Add input_debug_info to interface
 *
 * Revision 1.50  1997/11/25  10:19:14  jont
 * [Bug #30328]
 * Add environment parameter to decode_type_basis
 * for finding pervasive type names
 *
 * Revision 1.49  1997/10/20  16:39:14  jont
 * [Bug #30089]
 * Replacing MLWorks.Time with Time from the basis
 *
 * Revision 1.48  1996/03/01  14:25:04  daveb
 * Changed return type of input_info.
 *
 * Revision 1.47  1996/02/23  17:27:03  jont
 * newmap becomes map, NEWMAP becomes MAP
 *
 * Revision 1.46  1995/04/20  13:09:26  jont
 * Change decode_type_basis to accept a btree
 *
Revision 1.45  1995/03/23  12:49:22  matthew
Combining stamp counts in one.

Revision 1.44  1995/03/01  14:05:43  matthew
Changes to Debugger_Types

Revision 1.43  1995/01/13  11:18:28  matthew
Change to debugger types

Revision 1.42  1994/09/27  16:43:38  nickb
Remove print_hash_table_stats

Revision 1.41  1994/09/13  10:09:10  matthew
Abstraction of debug information

Revision 1.40  1994/06/22  15:22:24  jont
Update debugger information production

Revision 1.39  1994/04/07  14:00:19  jont
Add original require file names to consistency info.

Revision 1.38  1994/02/22  10:26:37  nosa
Monomorphic debugger encapsulation.

Revision 1.37  1994/01/07  17:01:01  matthew
Changed type of submodule info for output_file and decode_type_basis to include range information.

Revision 1.36  1993/12/23  12:28:57  matthew
Added debugger_env sharing constraint.

Revision 1.35  1993/12/15  13:48:23  matthew
Renamed Encapsulate.Basistypes to Encapsulate.BasisTypes

Revision 1.34  1993/11/15  14:13:19  nickh
New pervasive time structure.

Revision 1.33  1993/08/03  14:31:31  jont
Modified the type of decode_type_basis to take the module name

Revision 1.32  1993/07/30  15:25:22  nosa
Debugger Environments for local and closure variable inspection
in the debugger

Revision 1.31  1993/05/28  10:51:21  jont
Cleaned up after assembly changes

Revision 1.30  1993/05/25  14:59:37  jont
Changes because Assemblies now has Basistypes instead of Datatypes

Revision 1.29  1993/03/11  11:11:47  matthew
Signature revisions

Revision 1.28  1993/03/04  14:32:59  matthew
Options & Info changes

Revision 1.27  1993/02/09  10:30:43  matthew
Typechecker structure changes

Revision 1.26  1993/02/01  16:50:15  matthew
Changed sharing.

Revision 1.25  1992/10/29  11:24:01  richard
Time is now represented by a pervasive structure.

Revision 1.24  1992/10/15  16:01:30  clive
Anel's changes for encapsulating assemblies

Revision 1.23  1992/09/10  10:35:04  clive
Changed hashtables to a single structure implementation

Revision 1.22  1992/09/10  10:35:04  richard
Created a type `information' which wraps up the debugger information
needed in so many parts of the compiler.

Revision 1.21  1992/08/26  16:41:47  jont
Removed some redundant structures and sharing

Revision 1.20  1992/08/25  08:09:06  clive
Added details about leafness to the debug information

Revision 1.19  1992/08/14  15:49:07  davidt
Made interface more abstract, providing a function which
reads the consistency informations without having to
read the whole object file.

Revision 1.18  1992/08/12  12:34:53  jont
Removed some redundant structure arguments and sharing
Converted where relevant to use NewMap.{forall,exists,iterate}

Revision 1.17  1992/08/06  18:40:40  davidt
Encapsulate.output_file now does everything, instead of
TopLevel calling a number of different Encapsulate
files.

Revision 1.16  1992/07/29  16:13:25  clive
Improved the datastructure for delayed outputting

Revision 1.15  1992/07/27  16:31:50  clive
Use of new hash tables, removed some concatenation and compression of integers in encapsulator

Revision 1.14  1992/07/21  12:24:28  jont
Modifications to allow less string concatenation and copying

Revision 1.13  1992/07/07  08:37:46  clive
Added call point information recording

Revision 1.12  1992/06/15  14:26:07  jont
Added decode_counts functions to speed up subrequires

Revision 1.11  1992/06/11  09:34:18  clive
Added the encapsulation of function debugging information

Revision 1.10  1992/01/23  16:12:07  clive
New pervasive library code - cut some things out of the initial type basis

Revision 1.9  1992/01/23  16:12:07  jont
Changed to encode tyfun_ids similarly to tyname_ids

Revision 1.8  1992/01/15  12:52:36  jont
Added clean_basis function to remove old encodings of pervasives

Revision 1.7  1992/01/09  10:59:04  jont
Added diagnostic parameter

Revision 1.6  1992/01/08  14:35:04  colin
Added code to maintain unique tyname and strname_ids across modules.
Changed type of type basis encoding/decoding functions.

Revision 1.5  1991/12/19  15:24:24  jont
Added encode_cons and decode_cons

Revision 1.4  91/12/17  18:08:18  jont
Added typechecker basis encapsulation functions

Revision 1.3  91/12/16  18:58:52  jont
Added parserenv parameter

Revision 1.2  91/12/11  11:44:12  jont
Added encoding and decoding of lambda environments

Revision 1.1  91/10/16  13:47:36  jont
Initial revision

Copyright (c) 1991 Harlequin Ltd.
*)

require "../parser/parserenv";
require "../typechecker/basistypes";
require "../lambda/environtypes";
require "../debugger/debugger_types";
require "../system/__time";

signature ENCAPSULATE =
sig
  structure ParserEnv : PARSERENV
  structure BasisTypes : BASISTYPES
  structure EnvironTypes : ENVIRONTYPES
  structure Debugger_Types : DEBUGGER_TYPES

  type Module

  sharing ParserEnv.Ident = BasisTypes.Datatypes.Ident

  sharing type EnvironTypes.LambdaTypes.Type = Debugger_Types.Type =
    BasisTypes.Datatypes.Type

  val do_timings : bool ref

  val clean_basis : BasisTypes.Basis -> unit

  val decode_type_basis :
    {type_env : string,
     file_name : string,
     sub_modules : (string, (string * int * int))ParserEnv.Map.map,
     decode_debug_information : bool,
     pervasive_env : BasisTypes.Datatypes.Env} ->
    BasisTypes.Basis * Debugger_Types.information

  val output_file : bool ->
    {filename : string,
     code : Module,
     stamps : int,
     parser_env : ParserEnv.pB,
     type_basis : BasisTypes.Basis,
     debug_info : Debugger_Types.information,
     require_list : (string * int * int) list,
     lambda_env : EnvironTypes.Top_Env,
     mod_name   : string,
     time_stamp : Time.time,
     consistency :
       {mod_name : string, time : Time.time} list}
    -> unit

  val input_code : string -> Module

  exception BadInput of string

  val input_info : string ->
    {stamps : int,
     mod_name : string,
     time_stamp: Time.time,
     consistency :
       {mod_name : string, time : Time.time} list}

  val input_all : string ->
    {parser_env : string,
     type_env : string,
     lambda_env : string,
     stamps : int,
     time_stamp : Time.time,
     mod_name : string,
     consistency :
       {mod_name : string, time : Time.time} list}

  val decode_all :
    {parser_env : string,
     lambda_env : string,
     type_env : string,
     file_name : string,
     sub_modules : (string, (string * int * int))ParserEnv.Map.map,
     decode_debug_information : bool,
     pervasive_env : BasisTypes.Datatypes.Env} ->
    ParserEnv.pB * EnvironTypes.Top_Env *
    BasisTypes.Basis * Debugger_Types.information

  val input_debug_info :
    {file_name : string,
     sub_modules : (string, (string * int * int))ParserEnv.Map.map} ->
    Debugger_Types.information

  val code_offset : string -> int

end
@


1.54.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a3 4
 * Revision 1.54  1998/10/23  14:56:46  jont
 * [Bug #70198]
 * Add interface to get code_offset
 *
@


1.53
log
@[Bug #70194]
Add interface for input_code taking filename to code_module
@
text
@d4 4
d264 2
@


1.52
log
@[Bug #70099]
Changing encapsulation order to do type_env
before lambda_env and parser_env
@
text
@d4 5
d223 2
@


1.51
log
@[Bug #30331]
Add input_debug_info to interface
@
text
@d4 4
d196 6
a201 3
  val decode_type_basis : string * string *
    (string, (string * (int * int)))ParserEnv.Map.map * bool *
    BasisTypes.Datatypes.Env -> 
d205 2
a206 1
    {filename : string, code : Module,
d211 1
a211 1
     require_list : (string * (int * int)) list,
d216 1
a216 1
       {mod_name : string, req_name : string, time : Time.time} list}
d226 1
a226 1
       {mod_name : string, req_name : string, time : Time.time} list}
d229 1
a229 1
    {parser_env : ParserEnv.pB,
d231 1
a231 1
     lambda_env : EnvironTypes.Top_Env,
d236 12
a247 1
       {mod_name : string, req_name : string, time : Time.time} list}
d250 2
a251 1
    string * (string, (string * (int * int)))ParserEnv.Map.map ->
@


1.50
log
@[Bug #30328]
Add environment parameter to decode_type_basis
for finding pervasive type names
@
text
@d4 5
d229 5
@


1.49
log
@[Bug #30089]
Replacing MLWorks.Time with Time from the basis
@
text
@d4 4
d188 2
a189 1
    (string, (string * (int * int)))ParserEnv.Map.map * bool -> 
@


1.48
log
@Changed return type of input_info.
@
text
@d4 3
d163 1
d196 1
a196 1
     time_stamp : MLWorks.Time.time,
d198 1
a198 1
       {mod_name : string, req_name : string, time : MLWorks.Time.time} list}
d206 1
a206 1
     time_stamp: MLWorks.Time.time,
d208 1
a208 1
       {mod_name : string, req_name : string, time : MLWorks.Time.time} list}
d215 1
a215 1
     time_stamp : MLWorks.Time.time,
d218 1
a218 1
       {mod_name : string, req_name : string, time : MLWorks.Time.time} list}
@


1.48.10.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a3 3
 * Revision 1.48  1996/03/01  14:25:04  daveb
 * Changed return type of input_info.
 *
@


1.48.10.2
log
@[Bug #30089]
Merged from the trunk:
Replacing MLWorks.Time with Time from the basis
@
text
@d3 1
a3 5
 * $Log: encapsulate.sml,v $
 *
 * Revision 1.48.10.1  1997/09/11  20:57:03  daveb
 * branched from trunk for label MLWorks_workspace_97
 *
a162 1
require "../system/__time";
d195 1
a195 1
     time_stamp : Time.time,
d197 1
a197 1
       {mod_name : string, req_name : string, time : Time.time} list}
d205 1
a205 1
     time_stamp: Time.time,
d207 1
a207 1
       {mod_name : string, req_name : string, time : Time.time} list}
d214 1
a214 1
     time_stamp : Time.time,
d217 1
a217 1
       {mod_name : string, req_name : string, time : Time.time} list}
@


1.48.9.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a3 3
 * Revision 1.48  1996/03/01  14:25:04  daveb
 * Changed return type of input_info.
 *
@


1.48.8.1
log
@branched from 1.48
@
text
@a3 3
 * Revision 1.48  1996/03/01  14:25:04  daveb
 * Changed return type of input_info.
 *
@


1.48.8.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a3 3
 * Revision 1.48.8.1  1997/05/12  10:36:03  hope
 * branched from 1.48
 *
@


1.48.8.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a3 3
 * Revision 1.48.8.1  1997/05/12  10:36:03  hope
 * branched from 1.48
 *
@


1.48.8.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a3 3
 * Revision 1.48.8.1  1997/05/12  10:36:03  hope
 * branched from 1.48
 *
@


1.48.8.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a3 3
 * Revision 1.48.8.1.1.1  1997/07/28  18:21:44  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.48.7.1
log
@branched from 1.48
@
text
@a3 3
 * Revision 1.48  1996/03/01  14:25:04  daveb
 * Changed return type of input_info.
 *
@


1.48.6.1
log
@branched from 1.48
@
text
@a3 3
 * Revision 1.48  1996/03/01  14:25:04  daveb
 * Changed return type of input_info.
 *
@


1.48.6.1.1.1
log
@branched from 1.48.6.1
@
text
@a3 3
 * Revision 1.48.6.1  1996/12/17  17:49:30  hope
 * branched from 1.48
 *
@


1.48.5.1
log
@branched from 1.48
@
text
@a3 3
 * Revision 1.48  1996/03/01  14:25:04  daveb
 * Changed return type of input_info.
 *
@


1.48.4.1
log
@branched from 1.48
@
text
@a3 3
 * Revision 1.48  1996/03/01  14:25:04  daveb
 * Changed return type of input_info.
 *
@


1.48.4.1.1.1
log
@branched from 1.48.4.1
@
text
@a3 3
 * Revision 1.48.4.1  1996/11/14  12:51:43  hope
 * branched from 1.48
 *
@


1.48.3.1
log
@branched from 1.48
@
text
@a3 3
 * Revision 1.48  1996/03/01  14:25:04  daveb
 * Changed return type of input_info.
 *
@


1.48.2.1
log
@branched from 1.48
@
text
@a3 3
 * Revision 1.48  1996/03/01  14:25:04  daveb
 * Changed return type of input_info.
 *
@


1.48.1.1
log
@branched from 1.48
@
text
@a3 3
 * Revision 1.48  1996/03/01  14:25:04  daveb
 * Changed return type of input_info.
 *
@


1.47
log
@newmap becomes map, NEWMAP becomes MAP
@
text
@d4 3
d191 5
a195 1
     consistency : {mod_name : string, req_name : string, time : MLWorks.Time.time} list} -> unit
d201 4
a204 1
     consistency : {mod_name : string, req_name : string, time : MLWorks.Time.time} list}
d207 3
a209 1
    {parser_env : ParserEnv.pB, type_env : string, lambda_env : EnvironTypes.Top_Env,
d211 4
a214 1
     consistency : {mod_name : string, req_name : string, time : MLWorks.Time.time} list}
@


1.46
log
@Change decode_type_basis to accept a btree
@
text
@d4 3
d177 1
a177 1
    (string, (string * (int * int)))ParserEnv.Map.T * bool -> 
@


1.45
log
@Combining stamp counts in one.
@
text
@d4 3
d173 3
a175 3
  val decode_type_basis : string * string * (string * (int * int)) list * bool -> 
    BasisTypes.Basis *
    Debugger_Types.information
@


1.44
log
@Changes to Debugger_Types
@
text
@d4 3
d170 1
a170 1
  val decode_type_basis : string * string * (string * (int * int) * (int * int) * (int * int)) list * bool -> 
d176 1
a176 1
     tynames : int, strnames : int, tyfuns : int,
d180 1
a180 1
     require_list : (string * (int * int) * (int * int) * (int * int)) list,
d187 1
a187 1
    {tynames : int, strnames : int, tyfuns : int,
d192 1
a192 1
     tynames : int, strnames : int, tyfuns : int,
@


1.43
log
@Change to debugger types
@
text
@d4 3
a143 1
require "../utils/diagnostic";
a150 1
  structure Diagnostic : DIAGNOSTIC
a158 1
  sharing BasisTypes.Datatypes.NewMap = Debugger_Types.NewMap
@


1.42
log
@Remove print_hash_table_stats
@
text
@d4 3
d169 1
a169 3
    (string, ((BasisTypes.Datatypes.Type * bool *
     (int * Debugger_Types.Backend_Annotation) list) 
              * Debugger_Types.RuntimeEnv.debugger_env * bool)) BasisTypes.Datatypes.NewMap.T
@


1.41
log
@Abstraction of debug information
@
text
@d4 3
a145 2
  val print_hash_table_stats : bool ref

@


1.40
log
@Update debugger information production
@
text
@d4 3
d167 1
a167 1
              * Debugger_Types.Debugger_Env.debugger_env * bool)) BasisTypes.Datatypes.NewMap.T
@


1.39
log
@Add original require file names to consistency info.
@
text
@d4 3
d164 1
a164 1
              * Debugger_Types.Debugger_Env.debugger_env)) BasisTypes.Datatypes.NewMap.T
@


1.38
log
@Monomorphic debugger encapsulation.
@
text
@d4 3
d171 1
a171 1
     consistency : (string * MLWorks.Time.time) list} -> unit
d177 1
a177 1
     consistency : (string * MLWorks.Time.time) list}
d182 1
a182 1
     consistency : (string * MLWorks.Time.time) list}
@


1.37
log
@Changed type of submodule info for output_file and decode_type_basis to include range information.
@
text
@d4 3
a130 1
require "../debugger/debugger_env";
a140 1
  structure Debugger_Env_type : DEBUGGER_ENVIRONMENT_TYPE
a146 2
  sharing type Debugger_Env_type.debugger_env = Debugger_Types.Debugger_Env.debugger_env

d154 1
a154 1
  val decode_type_basis : string * string * (string * (int * int) * (int * int) * (int * int)) list -> 
d158 1
a158 1
              * Debugger_Env_type.debugger_env)) BasisTypes.Datatypes.NewMap.T
d160 1
a160 1
  val output_file :
@


1.36
log
@Added debugger_env sharing constraint.
@
text
@d4 3
d155 1
a155 1
  val decode_type_basis : string * string * (string * int * int * int) list -> 
d167 1
a167 1
     require_list : (string * int * int * int) list,
@


1.35
log
@Renamed Encapsulate.Basistypes to Encapsulate.BasisTypes
@
text
@d4 3
d142 2
@


1.34
log
@New pervasive time structure.
@
text
@d4 3
d130 1
a130 1
  structure Basistypes : BASISTYPES
d137 2
a138 2
  sharing ParserEnv.Ident = Basistypes.Datatypes.Ident
  sharing Basistypes.Datatypes.NewMap = Debugger_Types.NewMap
d141 1
a141 1
    Basistypes.Datatypes.Type
d145 1
a145 1
  val clean_basis : Basistypes.Basis -> unit
d148 2
a149 2
    Basistypes.Basis *
    (string, ((Basistypes.Datatypes.Type * bool *
d151 1
a151 1
              * Debugger_Env_type.debugger_env)) Basistypes.Datatypes.NewMap.T
d157 1
a157 1
     type_basis : Basistypes.Basis,
@


1.33
log
@Modified the type of decode_type_basis to take the module name
@
text
@d4 3
d158 1
a158 1
     consistency : (string * MLWorks.Time.Real.T) list} -> unit
d164 1
a164 1
     consistency : (string * MLWorks.Time.Real.T) list}
d169 1
a169 1
     consistency : (string * MLWorks.Time.Real.T) list}
@


1.33.1.1
log
@Fork for bug fixing
@
text
@a3 3
Revision 1.33  1993/08/03  14:31:31  jont
Modified the type of decode_type_basis to take the module name

@


1.32
log
@Debugger Environments for local and closure variable inspection
in the debugger
@
text
@d4 4
d141 1
a141 2

  val decode_type_basis : string * (string * int * int * int) list -> 
@


1.31
log
@Cleaned up after assembly changes
@
text
@d4 3
d112 1
d123 1
d137 1
d140 3
a142 2
    (string, Basistypes.Datatypes.Type * bool *
     (int * Debugger_Types.Backend_Annotation) list) Basistypes.Datatypes.NewMap.T
d150 1
a150 1
     require_list : (string * int * int * int) list, 
@


1.30
log
@Changes because Assemblies now has Basistypes instead of Datatypes
@
text
@d4 3
d106 1
a106 1
require "../typechecker/assemblies";
d116 1
a116 1
  structure Assemblies : ASSEMBLIES
d122 2
a123 2
  sharing ParserEnv.Ident = Assemblies.Basistypes.Datatypes.Ident
  sharing Assemblies.Basistypes.Datatypes.NewMap = Debugger_Types.NewMap
d125 2
a126 1
  sharing type EnvironTypes.LambdaTypes.Type = Debugger_Types.Type = Assemblies.Basistypes.Datatypes.Type
d130 1
a130 1
  val clean_basis : Assemblies.Basistypes.Basis -> unit
d133 3
a135 4
    Assemblies.Basistypes.Basis *
    Assemblies.TypeAssembly * Assemblies.StrAssembly *
    (string, Assemblies.Basistypes.Datatypes.Type * bool *
     (int * Debugger_Types.Backend_Annotation) list) Assemblies.Basistypes.Datatypes.NewMap.T
d141 1
a141 3
     type_basis : Assemblies.Basistypes.Basis,
     type_assembly : Assemblies.TypeAssembly,
     str_assembly : Assemblies.StrAssembly,
@


1.29
log
@Signature revisions
@
text
@d4 3
a102 1
require "../typechecker/basistypes";
a112 1
  structure BasisTypes : BASISTYPES
d119 2
a120 1
  sharing Assemblies.Datatypes = BasisTypes.Datatypes
d122 1
a122 2
  sharing ParserEnv.Ident = BasisTypes.Datatypes.Ident
  sharing BasisTypes.Datatypes.NewMap = Debugger_Types.NewMap
a123 2
  sharing type EnvironTypes.LambdaTypes.Type = Debugger_Types.Type = BasisTypes.Datatypes.Type

d126 1
a126 1
  val clean_basis : BasisTypes.Basis -> unit
d129 1
a129 1
    BasisTypes.Basis *
d131 2
a132 2
    (string, BasisTypes.Datatypes.Type * bool *
     (int * Debugger_Types.Backend_Annotation) list) BasisTypes.Datatypes.NewMap.T
d138 1
a138 1
     type_basis : BasisTypes.Basis,
@


1.28
log
@Options & Info changes
@
text
@d4 3
a102 1
require "../machine/machtypes";
a113 1
  structure MachTypes : MACHTYPES
d116 6
a121 2
  sharing Debugger_Types.Datatypes = EnvironTypes.LambdaTypes.Datatypes =
    Assemblies.Datatypes = BasisTypes.Datatypes
d123 1
a123 1
  sharing ParserEnv.Ident = Debugger_Types.Datatypes.Ident
d133 1
a133 1
     (int * Debugger_Types.Backend_Annotation) list) Debugger_Types.Datatypes.NewMap.T
d136 1
a136 1
    {filename : string, code : MachTypes.module,
@


1.27
log
@Typechecker structure changes
@
text
@d4 3
a116 2

  sharing Debugger_Types.Info = BasisTypes.Info
@


1.26
log
@Changed sharing.
@
text
@d4 3
d94 1
a94 1
require "../typechecker/basis";
d106 1
a106 1
  structure Basis : BASIS
d113 3
a115 1
    Assemblies.Datatypes = Basis.Tyvarenv.Datatypes
d121 1
a121 1
  val clean_basis : Basis.Basis -> unit
d124 1
a124 1
    Basis.Basis *
d126 1
a126 1
    (string, Basis.Tyvarenv.Datatypes.Type * bool *
d133 1
a133 1
     type_basis : Basis.Basis,
@


1.25
log
@Time is now represented by a pervasive structure.
@
text
@d4 3
d108 5
@


1.24
log
@Anel's changes for encapsulating assemblies
@
text
@d4 3
d126 1
a126 1
     consistency : (string * {hi : int, lo : int}) list} -> unit
d132 1
a132 1
     consistency : (string * (int * int)) list}
d137 1
a137 1
     consistency : (string * (int * int)) list}
@


1.23
log
@Changed hashtables to a single structure implementation
@
text
@d4 3
d86 1
d98 1
d108 4
a111 2
    Basis.Basis * (string, Basis.Tyvarenv.Datatypes.Type * bool *
                   (int * Debugger_Types.Backend_Annotation) list) Debugger_Types.Datatypes.NewMap.T
d118 2
@


1.22
log
@Created a type `information' which wraps up the debugger information
needed in so many parts of the compiler.
@
text
@d4 4
@


1.21
log
@Removed some redundant structures and sharing
@
text
@d4 3
d107 1
a107 2
     debug_info : (string,(Basis.Tyvarenv.Datatypes.Type * bool * 
                           (int * Debugger_Types.Backend_Annotation) list)) Debugger_Types.Datatypes.NewMap.T,
@


1.20
log
@Added details about leafness to the debug information
@
text
@d4 3
d97 1
a97 1
                   (int * Debugger_Types.Backend_Annotation) list) Debugger_Types.Map.T
d105 1
a105 1
                           (int * Debugger_Types.Backend_Annotation) list)) Debugger_Types.Map.T,
@


1.19
log
@Made interface more abstract, providing a function which
reads the consistency informations without having to
read the whole object file.
@
text
@d4 5
d93 2
a94 1
    Basis.Basis * (string, Basis.Tyvarenv.Datatypes.Type * (int * Debugger_Types.Backend_Annotation) list) Debugger_Types.Map.T
d101 2
a102 1
     debug_info : (string,(Basis.Tyvarenv.Datatypes.Type * (int * Debugger_Types.Backend_Annotation) list)) Debugger_Types.Map.T,
@


1.18
log
@Removed some redundant structure arguments and sharing
Converted where relevant to use NewMap.{forall,exists,iterate}
@
text
@d4 4
a82 2
  exception bad_input

a84 4
  val decode_lambda_env : (string * int * int) -> EnvironTypes.Top_Env

  val decode_parser_env : (string * int * int) -> ParserEnv.pB

d87 1
a87 2
  val decode_type_basis :
    (string * int * int) * (string * int * int * int) list -> 
a89 11
  val decode_env :
    string ->
    {parser_env : (string * int * int), ty_env : (string * int * int),
     tynames : int, strnames : int, tyfuns : int,
     lambda_env : (string * int * int)}

  val decode_counts :
    string -> {tynames : int, strnames : int, tyfuns : int}

  val decode_cons : string -> (string * (int * int)) list
 
d94 3
a96 4
     ty_env :
       Basis.Basis * 
       (string,(Basis.Tyvarenv.Datatypes.Type * (int * Debugger_Types.Backend_Annotation) list)) Debugger_Types.Map.T * 
       (string * int * int * int) list, 
d100 1
a100 2
  datatype total_input =
    TOTAL_INPUT of {code : string, env : string list, debug : string, consistency : string}
d102 8
a109 1
  val input_file : string -> total_input
@


1.17
log
@Encapsulate.output_file now does everything, instead of
TopLevel calling a number of different Encapsulate
files.
@
text
@d4 5
d91 1
a91 1
    Basis.Basis * (string, Basis.Datatypes.Type * (int * Debugger_Types.Backend_Annotation) list) Debugger_Types.Map.T
d110 1
a110 1
       (string,(Basis.Datatypes.Type * (int * Debugger_Types.Backend_Annotation) list)) Debugger_Types.Map.T * 
@


1.16
log
@Improved the datastructure for delayed outputting
@
text
@d4 3
a64 1

a73 24
  datatype DelayedEvaluation =
    IMPLODE of int * DelayedEvaluation list
  | STRING of string

  datatype environment =
    PARSER_ENV of string |
    TYPE_ENV of string |
    CODE_ENV of string

  datatype section =
    CODE |
    ENV |
    DEBUG |
    CONSISTENCY

  datatype total_output =
    TOTAL_OUTPUT of
    {code : DelayedEvaluation, env : DelayedEvaluation list, 
     debug : DelayedEvaluation, consistency : DelayedEvaluation}

  datatype total_input =
    TOTAL_INPUT of
    {code : string, env : string list, debug : string, consistency : string}

a77 4
  val encode_code : MachTypes.module -> DelayedEvaluation

  val encode_lambda_env : EnvironTypes.Top_Env -> DelayedEvaluation

a79 2
  val encode_parser_env : ParserEnv.pB -> DelayedEvaluation

a83 5
  val encode_type_basis :
    Basis.Basis * 
    (string,(Basis.Datatypes.Type * (int * Debugger_Types.Backend_Annotation) list)) Debugger_Types.Map.T * 
    (string * int * int * int) list -> DelayedEvaluation

d86 1
a86 2
    Basis.Basis * 
    (string,Basis.Datatypes.Type * (int * Debugger_Types.Backend_Annotation) list) Debugger_Types.Map.T
a87 5
  val encode_env :
    {parser_env : DelayedEvaluation, ty_env : DelayedEvaluation, 
     tynames : int, strnames : int, tyfuns : int, lambda_env : DelayedEvaluation} ->
    DelayedEvaluation list

a96 2
  val encode_cons : (string * (int * int)) list -> DelayedEvaluation

d98 11
d110 2
a111 1
  val output_file : string * total_output -> unit
a113 1

@


1.15
log
@Use of new hash tables, removed some concatenation and compression of integers in encapsulator
@
text
@d4 3
d73 1
a73 2
    CONCAT of int * DelayedEvaluation * DelayedEvaluation
  | IMPLODE of int * DelayedEvaluation list
a74 1
  | IMPLODE_REVERSE of int * DelayedEvaluation list
@


1.14
log
@Modifications to allow less string concatenation and copying
@
text
@d4 3
d59 3
d69 6
d88 5
d99 1
a99 1
  val encode_code : MachTypes.module -> string
d101 1
a101 1
  val encode_lambda_env : EnvironTypes.Top_Env -> string
d105 1
a105 1
  val encode_parser_env : ParserEnv.pB -> string
d114 1
a114 1
    (string * int * int * int) list -> string
d122 3
a124 3
    {parser_env : string, ty_env : string, 
     tynames : int, strnames : int, tyfuns : int, lambda_env : string} ->
    string list
d135 1
a135 1
  val encode_cons : (string * (int * int)) list -> string
d141 1
a141 1
  val input_file : string -> total_output
@


1.13
log
@Added call point information recording
@
text
@d4 3
d76 1
a76 1
    {code : string, env : string, debug : string, consistency : string}
d80 2
d86 1
a86 1
  val decode_lambda_env : string -> EnvironTypes.Top_Env
d90 1
a90 1
  val decode_parser_env : string -> ParserEnv.pB
d100 1
a100 1
    string * (string * int * int * int) list -> 
d107 1
a107 1
    string
d110 4
a113 2
    string -> {parser_env : string, ty_env : string,
	       tynames : int, strnames : int, tyfuns : int, lambda_env : string}
@


1.12
log
@Added decode_counts functions to speed up subrequires
@
text
@d4 3
d49 1
d58 1
d90 3
a92 1
    Basis.Basis * (string * Basis.Datatypes.Type) list * (string * int * int * int) list -> string
d95 3
a97 1
    string * (string * int * int * int) list -> Basis.Basis * (string * Basis.Datatypes.Type) list
@


1.11
log
@Added the encapsulation of function debugging information
@
text
@d4 3
d98 3
@


1.10
log
@New pervasive library code - cut some things out of the initial type basis
@
text
@d4 3
d82 1
a82 1
    Basis.Basis * (string * int * int * int) list -> string
d85 1
a85 1
    string * (string * int * int * int) list -> Basis.Basis
@


1.9
log
@Changed to encode tyfun_ids similarly to tyname_ids
@
text
@d4 3
@


1.8
log
@Added clean_basis function to remove old encodings of pervasives
@
text
@d4 3
d75 2
a76 1
  val encode_type_basis : Basis.Basis * (string * int * int) list -> string
d78 2
a79 1
  val decode_type_basis : string * (string * int * int) list -> Basis.Basis
d83 2
a84 1
     tynames : int, strnames : int, lambda_env : string} -> string
d88 1
a88 1
	       tynames : int, strnames : int, lambda_env : string}
@


1.7
log
@Added diagnostic parameter
@
text
@d4 3
d69 2
@


1.6
log
@Added code to maintain unique tyname and strname_ids across modules.
Changed type of type basis encoding/decoding functions.
@
text
@d4 4
d26 1
d34 1
@


1.5
log
@Added encode_cons and decode_cons
@
text
@d3 4
a6 1
$Log:	encapsulate.sml,v $
d61 1
a61 1
  val encode_type_basis : Basis.Basis -> string
d63 1
a63 1
  val decode_type_basis : string -> Basis.Basis
d66 2
a67 1
    {parser_env : string, ty_env : string, lambda_env : string} -> string
d70 2
a71 1
    string -> {parser_env : string, ty_env : string, lambda_env : string}
@


1.4
log
@Added typechecker basis encapsulation functions
@
text
@d4 3
d67 4
@


1.3
log
@Added parserenv parameter
@
text
@d4 3
d17 1
d24 1
d54 4
@


1.2
log
@Added encoding and decoding of lambda environments
@
text
@d4 3
d13 1
d19 1
d45 4
@


1.1
log
@Initial revision
@
text
@d3 4
a6 1
$Log$
d10 1
d15 1
d33 2
d37 14
a50 2
  val output_file :
    string * total_output -> unit
@
