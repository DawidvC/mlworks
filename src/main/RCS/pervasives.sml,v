head	1.40;
access;
symbols
	MLW_daveb_inline_1_4_99:1.40.4
	MLWorks_21c0_1999_03_25:1.40
	MLWorks_20c1_1998_08_20:1.40
	MLWorks_20c0_1998_08_04:1.40
	MLWorks_20b2c2_1998_06_19:1.40
	MLWorks_20b2_Windows_1998_06_12:1.40
	MLWorks_20b1c1_1998_05_07:1.40
	MLWorks_20b0_1998_04_07:1.40
	MLWorks_20b0_1998_03_20:1.40
	MLWorks_20m2_1998_02_16:1.40
	MLWorks_20m1_1997_10_23:1.40
	MLWorks_11r1:1.40.1.1.1.1.1
	MLWorks_workspace_97:1.40.3
	MLWorks_dt_wizard:1.40.2
	MLWorks_11c0_1997_09_09:1.40.1.1.1.1
	MLWorks_10r3:1.40.1.1.3
	MLWorks_10r2_551:1.40.1.1.2
	MLWorks_11:1.40.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.40.1.1
	MLWorks_20m0_1997_06_20:1.40
	MLWorks_1_0_r2c2_1997_06_14:1.40.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.40.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.40.1
	MLWorks_BugFix_1997_04_24:1.40
	MLWorks_1_0_r2_Win32_1997_04_11:1.40
	MLWorks_1_0_r2_Unix_1997_04_04:1.40
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.39.6.1.1
	MLWorks_gui_1996_12_18:1.39.7
	MLWorks_1_0_Win32_1996_12_17:1.39.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.39.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.39.4.1
	MLWorks_1_0_Irix_1996_11_28:1.39.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.39.5
	MLWorks_1_0_Unix_1996_11_14:1.39.4
	MLWorks_Open_Beta2_1996_10_11:1.39.3
	MLWorks_License_dev:1.39.2
	MLWorks_1_open_beta_1996_09_13:1.39.1
	MLWorks_Open_Beta_1996_08_22:1.39
	MLWorks_Beta_1996_07_02:1.39
	MLWorks_Beta_1996_06_07:1.39
	MLWorks_Beta_1996_06_06:1.39
	MLWorks_Beta_1996_06_05:1.39
	MLWorks_Beta_1996_06_03:1.39
	MLWorks_Beta_1996_05_31:1.39
	MLWorks_Beta_1996_05_30:1.39
	ML_beta_release_12/08/94:1.29
	ML_beta_release_03/08/94:1.29
	ML_revised_beta_release_25/05/94:1.29
	ML_final_beta_release_02/03/94:1.29
	mlworks-28-01-1994:1.29
	Release:1.29
	mlworks-beta-01-09-1993:1.29
	MLWorks-1-0-4-29/01/1993:1.25
	MLWorks-1-0-3-21/12/1992:1.25
	MLWorks-1-0-2-15/12/1992:1.25
	MLWorks-1-0-1-04/12/1992:1.25
	checkpoint_17_08_92:1.21;
locks; strict;
comment	@ * @;


1.40
date	96.12.17.12.31.26;	author andreww;	state Exp;
branches
	1.40.1.1
	1.40.2.1
	1.40.3.1
	1.40.4.1;
next	1.39;

1.39
date	96.04.19.10.30.49;	author matthew;	state Exp;
branches
	1.39.1.1
	1.39.2.1
	1.39.3.1
	1.39.4.1
	1.39.5.1
	1.39.6.1
	1.39.7.1;
next	1.38;

1.38
date	95.09.12.15.09.53;	author daveb;	state Exp;
branches;
next	1.37;

1.37
date	95.07.28.14.46.04;	author jont;	state Exp;
branches;
next	1.36;

1.36
date	95.07.20.15.23.01;	author jont;	state Exp;
branches;
next	1.35;

1.35
date	95.07.14.09.34.46;	author jont;	state Exp;
branches;
next	1.34;

1.34
date	95.04.28.11.39.46;	author matthew;	state Exp;
branches;
next	1.33;

1.33
date	95.02.13.13.11.31;	author matthew;	state Exp;
branches;
next	1.32;

1.32
date	94.11.18.10.43.28;	author matthew;	state Exp;
branches;
next	1.31;

1.31
date	94.10.06.10.14.40;	author matthew;	state Exp;
branches;
next	1.30;

1.30
date	94.09.09.16.45.55;	author jont;	state Exp;
branches;
next	1.29;

1.29
date	93.07.20.12.32.25;	author jont;	state Exp;
branches
	1.29.1.1;
next	1.28;

1.28
date	93.07.07.15.09.21;	author daveb;	state Exp;
branches;
next	1.27;

1.27
date	93.03.23.10.35.40;	author jont;	state Exp;
branches;
next	1.26;

1.26
date	93.03.04.16.54.46;	author jont;	state Exp;
branches;
next	1.25;

1.25
date	92.09.24.14.10.38;	author jont;	state Exp;
branches;
next	1.24;

1.24
date	92.08.20.18.18.22;	author richard;	state Exp;
branches;
next	1.23;

1.23
date	92.08.19.12.17.01;	author richard;	state Exp;
branches;
next	1.22;

1.22
date	92.08.17.13.31.36;	author jont;	state Exp;
branches;
next	1.21;

1.21
date	92.07.07.16.19.22;	author davida;	state Exp;
branches;
next	1.20;

1.20
date	92.06.19.15.47.49;	author jont;	state Exp;
branches;
next	1.19;

1.19
date	92.06.18.16.43.37;	author jont;	state Exp;
branches;
next	1.18;

1.18
date	92.06.15.15.45.46;	author jont;	state Exp;
branches;
next	1.17;

1.17
date	92.06.12.19.22.42;	author jont;	state Exp;
branches;
next	1.16;

1.16
date	92.05.20.10.21.41;	author clive;	state Exp;
branches;
next	1.15;

1.15
date	92.05.13.10.01.56;	author clive;	state Exp;
branches;
next	1.14;

1.14
date	92.03.03.11.43.29;	author richard;	state Exp;
branches;
next	1.13;

1.13
date	92.03.02.15.21.24;	author richard;	state Exp;
branches;
next	1.12;

1.12
date	92.02.11.15.34.06;	author clive;	state Exp;
branches;
next	1.11;

1.11
date	92.01.23.09.29.17;	author clive;	state Exp;
branches;
next	1.10;

1.10
date	92.01.16.08.43.17;	author clive;	state Exp;
branches;
next	1.9;

1.9
date	92.01.10.11.48.49;	author richard;	state Exp;
branches;
next	1.8;

1.8
date	91.12.18.15.02.21;	author richard;	state Exp;
branches;
next	1.7;

1.7
date	91.11.28.17.08.51;	author richard;	state Exp;
branches;
next	1.6;

1.6
date	91.11.15.14.14.23;	author richard;	state Exp;
branches;
next	1.5;

1.5
date	91.11.14.16.13.49;	author jont;	state Exp;
branches;
next	1.4;

1.4
date	91.11.14.14.06.22;	author richard;	state Exp;
branches;
next	1.3;

1.3
date	91.10.14.16.15.00;	author jont;	state Exp;
branches;
next	1.2;

1.2
date	91.09.16.16.33.33;	author davida;	state Exp;
branches;
next	1.1;

1.1
date	91.08.23.10.52.03;	author jont;	state Exp;
branches;
next	;

1.29.1.1
date	93.07.20.12.32.25;	author jont;	state Exp;
branches;
next	;

1.39.1.1
date	96.09.13.11.18.32;	author hope;	state Exp;
branches;
next	;

1.39.2.1
date	96.10.07.16.08.24;	author hope;	state Exp;
branches;
next	;

1.39.3.1
date	96.10.17.11.26.40;	author hope;	state Exp;
branches;
next	;

1.39.4.1
date	96.11.14.12.52.02;	author hope;	state Exp;
branches
	1.39.4.1.1.1;
next	;

1.39.4.1.1.1
date	96.11.28.15.03.02;	author hope;	state Exp;
branches;
next	;

1.39.5.1
date	96.11.22.18.11.14;	author hope;	state Exp;
branches;
next	;

1.39.6.1
date	96.12.17.17.49.45;	author hope;	state Exp;
branches
	1.39.6.1.1.1;
next	;

1.39.6.1.1.1
date	97.02.24.11.39.56;	author hope;	state Exp;
branches;
next	;

1.39.7.1
date	96.12.18.09.43.50;	author hope;	state Exp;
branches;
next	;

1.40.1.1
date	97.05.12.10.36.19;	author hope;	state Exp;
branches
	1.40.1.1.1.1
	1.40.1.1.2.1
	1.40.1.1.3.1;
next	;

1.40.1.1.1.1
date	97.07.28.18.21.01;	author daveb;	state Exp;
branches
	1.40.1.1.1.1.1.1;
next	;

1.40.1.1.1.1.1.1
date	97.10.07.11.46.27;	author jkbrook;	state Exp;
branches;
next	;

1.40.1.1.2.1
date	97.09.08.17.14.27;	author daveb;	state Exp;
branches;
next	;

1.40.1.1.3.1
date	97.09.09.14.10.20;	author daveb;	state Exp;
branches;
next	;

1.40.2.1
date	97.09.10.19.26.16;	author brucem;	state Exp;
branches;
next	;

1.40.3.1
date	97.09.11.20.56.19;	author daveb;	state Exp;
branches;
next	;

1.40.4.1
date	99.04.01.17.57.58;	author daveb;	state Exp;
branches;
next	;


desc
@Datatype for pervasives
@


1.40
log
@[Bug #1818]
adding builtins for floatarrays.
@
text
@(* pervasives.sml the signature *)
(*
$Log: pervasives.sml,v $
 * Revision 1.39  1996/04/19  10:30:49  matthew
 * Removing some exceptions
 *
 * Revision 1.38  1995/09/12  15:09:53  daveb
 * Added pervasives for Word32, Int32, etc.
 *
Revision 1.37  1995/07/28  14:46:04  jont
Add INTMOD and INTDIV pervasives

Revision 1.36  1995/07/20  15:23:01  jont
Add primitive operations on words

Revision 1.35  1995/07/14  09:34:46  jont
Add ord and chr for char
Also add relationals on char

Revision 1.34  1995/04/28  11:39:46  matthew
Adding CAST and UMAP pervasives

Revision 1.33  1995/02/13  13:11:31  matthew
Adding breakpoint and step builtins

Revision 1.32  1994/11/18  10:43:28  matthew
Adding "unsafe" allocation and update functions

Revision 1.31  1994/10/06  10:14:40  matthew
Added eq function

Revision 1.30  1994/09/09  16:45:55  jont
Remove machine specific functions is_fun and implicit_references

Revision 1.29  1993/07/20  12:32:25  jont
Added unsafeintplus for generating large integers

Revision 1.28  1993/07/07  15:09:21  daveb
Removed EX*VAL values, since we no longer have exception environments.

Revision 1.27  1993/03/23  10:35:40  jont
Added vector primitives

Revision 1.26  1993/03/04  16:54:46  jont
Added builtin string relationals

Revision 1.25  1992/09/24  14:10:38  jont
Removed some redundant items from the signature

Revision 1.24  1992/08/20  18:18:22  richard
Added ByteArray primitives.

Revision 1.23  1992/08/19  12:17:01  richard
Added UNSAFE_UPDATE and UNSAFE_SUB.

Revision 1.22  1992/08/17  13:31:36  jont
Added inline ordof

Revision 1.21  1992/07/07  16:19:22  davida
Added pervasives (list of all constructors) to signature
(was already defined in functor).

Revision 1.20  1992/06/19  15:47:49  jont
Added ML_REQUIRE builtin for interpreter to get builtin library

Revision 1.19  1992/06/18  16:43:37  jont
Added new builtin ML_OFFSET for computing pointers into middles of
letrec code vectors

Revision 1.18  1992/06/15  15:45:46  jont
Added various loading functions for interpreter

Revision 1.17  1992/06/12  19:22:42  jont
Added ident function to alloow type casting required by interpreter

Revision 1.16  1992/05/20  10:21:41  clive
Added arithmetic right shift operator

Revision 1.15  1992/05/13  10:01:56  clive
Added the Bits structure

Revision 1.14  1992/03/03  11:43:29  richard
Updated documentation not corrected by previous modifiers.
Changed `sort' and `de_sort' to mnemonic names.

Revision 1.13  1992/03/02  15:21:24  richard
Added EQFUN.

Revision 1.12  1992/02/11  15:34:06  clive
New pervasive library code

Revision 1.11  1992/01/23  09:29:17  clive
Added the EXSUBSCRIPTVAL and EXSIZEVAL

Revision 1.10  1992/01/16  08:43:17  clive
Added arrays to the initial basis

Revision 1.9  1992/01/10  11:48:49  richard
Added a SUBSTRING pervasive as a temporary measure so that the same code
can be compiled under under both New Jersey and MLWorks.

Revision 1.8  1991/12/18  15:02:21  richard
Separated exception values from exception names.

Revision 1.7  91/11/28  17:08:51  richard
Added several functions concerned with the structure of the
pervasive library module and a function for ordering the pervasives.

Revision 1.6  91/11/15  14:14:23  richard
Added library_name to map pervasives on to their names in the library.

Revision 1.5  91/11/14  16:13:49  jont
Added is_fun to determine if pervasives are functions, and hence can
be eta_abstracted during compilation.

Revision 1.4  91/11/14  14:06:22  richard
Added CALL_C and SYSTEM.

Revision 1.3  91/10/14  16:15:00  jont
Added CALL_C

Revision 1.2  91/09/16  16:33:33  davida
Corrected spelling of UNIQUE (!)

Revision 1.1  91/08/23  10:52:03  jont
Initial revision

Copyright (c) 1991 Harlequin Ltd.
*)

signature PERVASIVES =
sig

  (* The pervasives.  Note that the exceptions have two pervasives, one for *)
  (* the exception `name' (unique) and the other for the exception value *)
  (* (packet constructor). *)

  datatype pervasive =
    REF |
    EXORD |
    EXCHR |
    EXDIV |
    EXSQRT |
    EXEXP |
    EXLN |
    EXIO |
    EXMATCH |
    EXBIND |
    EXINTERRUPT |
    EXRANGE |
    EXOVERFLOW |
    MAP |
    UMAP |
    REV |
    NOT |
    ABS |
    FLOOR |
    REAL |
    SQRT |
    SIN |
    COS |
    ARCTAN |
    EXP |
    LN |
    SIZE |
    CHR |
    ORD |
    CHARCHR |
    CHARORD |
    ORDOF |
    EXPLODE |
    IMPLODE |
    DEREF |
    FDIV |
    DIV |
    MOD |
    PLUS |
    STAR |
    MINUS |
    HAT |
    AT |
    NE |
    LESS |
    GREATER |
    LESSEQ |
    GREATEREQ |
    BECOMES |
    O |
    UMINUS |
    EQ |
    EQFUN |
    LOAD_STRING |
    REALPLUS |
    INTPLUS |
    UNSAFEINTPLUS |
    UNSAFEINTMINUS |
    REALSTAR |
    INTSTAR |
    REALMINUS |
    INTMINUS |
    REALUMINUS |
    INTUMINUS |
    INTDIV |
    INTMOD |
    INTLESS |
    REALLESS |
    INTGREATER |
    REALGREATER |
    INTLESSEQ |
    REALLESSEQ |
    INTGREATEREQ |
    REALGREATEREQ |
    INTEQ |
    INTNE |
    REALEQ |
    REALNE |
    STRINGEQ |
    STRINGNE |
    STRINGLT |
    STRINGLE |
    STRINGGT |
    STRINGGE |
    CHAREQ |
    CHARNE |
    CHARLT |
    CHARLE |
    CHARGT |
    CHARGE |
    INTABS |
    REALABS |
    CALL_C |
    ARRAY_FN |
    LENGTH |
    SUB |
    UPDATE |
    UNSAFE_SUB |
    UNSAFE_UPDATE |
    BYTEARRAY |
    BYTEARRAY_LENGTH |
    BYTEARRAY_SUB |
    BYTEARRAY_UPDATE |
    BYTEARRAY_UNSAFE_SUB |
    BYTEARRAY_UNSAFE_UPDATE |
    FLOATARRAY |
    FLOATARRAY_LENGTH |
    FLOATARRAY_SUB |
    FLOATARRAY_UPDATE |
    FLOATARRAY_UNSAFE_SUB |
    FLOATARRAY_UNSAFE_UPDATE |
    VECTOR |
    VECTOR_LENGTH |
    VECTOR_SUB |
    EXSIZE |
    EXSUBSCRIPT |
    ANDB |
    LSHIFT |
    NOTB |
    ORB |
    RSHIFT |
    ARSHIFT |
    XORB |
    (* Stuff for words *)
    WORDEQ |
    WORDNE |
    WORDLT |
    WORDLE |
    WORDGT |
    WORDGE |
    WORDPLUS |
    WORDMINUS |
    WORDSTAR |
    WORDDIV |
    WORDMOD |
    WORDORB |
    WORDXORB |
    WORDANDB |
    WORDNOTB |
    WORDLSHIFT |
    WORDRSHIFT |
    WORDARSHIFT |
    INT32EQ |
    INT32NE |
    INT32LESS |
    INT32LESSEQ |
    INT32GREATER |
    INT32GREATEREQ |
    INT32PLUS |
    INT32MINUS |
    INT32STAR |
    INT32DIV |
    INT32MOD |
    INT32UMINUS |
    INT32ABS |
    WORD32EQ |
    WORD32NE |
    WORD32LT |
    WORD32LE |
    WORD32GT |
    WORD32GE |
    WORD32PLUS |
    WORD32MINUS |
    WORD32STAR |
    WORD32DIV |
    WORD32MOD |
    WORD32ORB |
    WORD32XORB |
    WORD32ANDB |
    WORD32NOTB |
    WORD32LSHIFT |
    WORD32RSHIFT |
    WORD32ARSHIFT |
    (* Low level stuff *)
    CAST |
    ALLOC_STRING |
    ALLOC_VECTOR |
    ALLOC_PAIR |
    RECORD_UNSAFE_SUB |
    RECORD_UNSAFE_UPDATE |
    STRING_UNSAFE_SUB |
    STRING_UNSAFE_UPDATE |
    (* Associated with the interpreter only *)
    IDENT_FN |
    ML_OFFSET |
    ENTUPLE |
    ML_CALL |
    ML_REQUIRE |
    LOAD_VAR |
    LOAD_EXN |
    LOAD_STRUCT |
    LOAD_FUNCT |
    GET_IMPLICIT

  val pervasives : pervasive list   (* list of all constructors *)

  val print_pervasive : pervasive -> string

  (* Lists to determine what is actually present as a builtin  *)

  val constructor_name_list     :(pervasive * string) list
  val value_name_list           :(pervasive * string) list
  val exception_name_list       :(pervasive * string) list


  (*  === FIELD NUMBERS WITHIN THE BUILTIN LIBRARY ===
   *
   *  This is a function which maps pervasives on to their positions within
   *  the BuiltinLibrary_ structure, such that a SELECT operation on
   *  BuiltinLibrary_ using the field number gives the pervasive object.
   *  Not all of the pervasives have definitions in the pervasive library,
   *  in particular, the overloaded functions are not represented, but their
   *  non-overloaded counterparts are.
   *)

  val field_number  : pervasive -> int

  val nr_fields	    : int

  (*  === ENCODING, DECODING, AND ORDERING ===
   *
   *  `encode' and `decode' map pervasives uniquely to and from integers
   *  respectively.  `order' provides a fast ordering.
   *)

  val order	: pervasive * pervasive -> bool
  val eq	: pervasive * pervasive -> bool
  val encode	: pervasive -> int
  val decode	: int -> pervasive

end
@


1.40.4.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a3 4
 * Revision 1.40  1996/12/17  12:31:26  andreww
 * [Bug #1818]
 * adding builtins for floatarrays.
 *
@


1.40.3.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a3 4
 * Revision 1.40  1996/12/17  12:31:26  andreww
 * [Bug #1818]
 * adding builtins for floatarrays.
 *
@


1.40.2.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a3 4
 * Revision 1.40  1996/12/17  12:31:26  andreww
 * [Bug #1818]
 * adding builtins for floatarrays.
 *
@


1.40.1.1
log
@branched from 1.40
@
text
@a3 4
 * Revision 1.40  1996/12/17  12:31:26  andreww
 * [Bug #1818]
 * adding builtins for floatarrays.
 *
@


1.40.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a3 3
 * Revision 1.40.1.1  1997/05/12  10:36:19  hope
 * branched from 1.40
 *
@


1.40.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a3 3
 * Revision 1.40.1.1  1997/05/12  10:36:19  hope
 * branched from 1.40
 *
@


1.40.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a3 3
 * Revision 1.40.1.1  1997/05/12  10:36:19  hope
 * branched from 1.40
 *
@


1.40.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a3 3
 * Revision 1.40.1.1.1.1  1997/07/28  18:21:01  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.39
log
@Removing some exceptions
@
text
@d4 3
d244 6
@


1.39.7.1
log
@branched from 1.39
@
text
@a3 3
 * Revision 1.39  1996/04/19  10:30:49  matthew
 * Removing some exceptions
 *
@


1.39.6.1
log
@branched from 1.39
@
text
@a3 3
 * Revision 1.39  1996/04/19  10:30:49  matthew
 * Removing some exceptions
 *
@


1.39.6.1.1.1
log
@branched from 1.39.6.1
@
text
@a3 3
 * Revision 1.39.6.1  1996/12/17  17:49:45  hope
 * branched from 1.39
 *
@


1.39.5.1
log
@branched from 1.39
@
text
@a3 3
 * Revision 1.39  1996/04/19  10:30:49  matthew
 * Removing some exceptions
 *
@


1.39.4.1
log
@branched from 1.39
@
text
@a3 3
 * Revision 1.39  1996/04/19  10:30:49  matthew
 * Removing some exceptions
 *
@


1.39.4.1.1.1
log
@branched from 1.39.4.1
@
text
@a3 3
 * Revision 1.39.4.1  1996/11/14  12:52:02  hope
 * branched from 1.39
 *
@


1.39.3.1
log
@branched from 1.39
@
text
@a3 3
 * Revision 1.39  1996/04/19  10:30:49  matthew
 * Removing some exceptions
 *
@


1.39.2.1
log
@branched from 1.39
@
text
@a3 3
 * Revision 1.39  1996/04/19  10:30:49  matthew
 * Removing some exceptions
 *
@


1.39.1.1
log
@branched from 1.39
@
text
@a3 3
 * Revision 1.39  1996/04/19  10:30:49  matthew
 * Removing some exceptions
 *
@


1.38
log
@Added pervasives for Word32, Int32, etc.
@
text
@d4 3
a136 1
    EXABS |
a139 7
    EXMOD |
    EXQUOT |
    EXPROD |
    EXNEG |
    EXSUM |
    EXDIFF |
    EXFLOOR |
@


1.37
log
@Add INTMOD and INTDIV pervasives
@
text
@d4 3
a258 2
    INTTOWORD |
    SIGNEXTEND |
a269 1
    WORDTOINT |
d277 31
@


1.36
log
@Add primitive operations on words
@
text
@d4 3
d202 2
@


1.35
log
@Add ord and chr for char
Also add relationals on char
@
text
@d4 4
d147 1
d250 22
@


1.34
log
@Adding CAST and UMAP pervasives
@
text
@d4 3
d159 2
d212 6
@


1.33
log
@Adding breakpoint and step builtins
@
text
@d4 3
d141 1
d235 1
@


1.32
log
@Adding "unsafe" allocation and update functions
@
text
@d4 3
a108 2
require "../utils/diagnostic";

a111 2
  structure Diagnostic : DIAGNOSTIC

d247 2
a248 1
    LOAD_FUNCT
@


1.31
log
@Added eq function
@
text
@d4 3
d179 1
d231 8
@


1.30
log
@Remove machine specific functions is_fun and implicit_references
@
text
@d4 3
d270 1
@


1.29
log
@Added unsafeintplus for generating large integers
@
text
@d4 3
a236 2
  val is_fun : pervasive -> bool

a258 10


  (*  === EXTRACT IMPLICIT REFERENCES OF PERVASIVE ===
   *
   *  Maps a pervasive onto the list of pervasives it references implicitly
   *  (such as exceptions).
   *)

  val implicit_references : pervasive -> pervasive list

@


1.29.1.1
log
@Fork for bug fixing
@
text
@a3 3
Revision 1.29  1993/07/20  12:32:25  jont
Added unsafeintplus for generating large integers

@


1.28
log
@Removed EX*VAL values, since we no longer have exception environments.
@
text
@d4 3
d169 1
@


1.27
log
@Added vector primitives
@
text
@d4 3
a125 19
    EXABSVAL |
    EXORDVAL |
    EXCHRVAL |
    EXDIVVAL |
    EXMODVAL |
    EXQUOTVAL |
    EXPRODVAL |
    EXNEGVAL |
    EXSUMVAL |
    EXDIFFVAL |
    EXFLOORVAL |
    EXSQRTVAL |
    EXEXPVAL |
    EXLNVAL |
    EXIOVAL |
    EXMATCHVAL |
    EXBINDVAL |
    EXINTERRUPTVAL |
    EXRANGEVAL |
a209 2
    EXSIZEVAL |
    EXSUBSCRIPTVAL |
d236 4
a239 3
  val constructor_name_list	:(pervasive * string) list
  val value_name_list		:(pervasive * string) list
  val exception_name_list	:(pervasive * string) list
a254 3
(*
  val is_in_library		: pervasive -> bool
*)
@


1.26
log
@Added builtin string relationals
@
text
@d4 3
d221 3
@


1.25
log
@Removed some redundant items from the signature
@
text
@d4 3
d199 4
@


1.24
log
@Added ByteArray primitives.
@
text
@d4 3
a238 1

a243 2
  val library_contents		: pervasive list
  val to_be_checked		: string list * string list
a244 1

d259 1
d261 1
a261 1

@


1.23
log
@Added UNSAFE_UPDATE and UNSAFE_SUB.
@
text
@d4 3
d113 1
d132 1
d202 6
@


1.22
log
@Added inline ordof
@
text
@d4 3
d195 2
@


1.21
log
@Added pervasives (list of all constructors) to signature
(was already defined in functor).
@
text
@d4 4
d140 1
@


1.20
log
@Added ML_REQUIRE builtin for interpreter to get builtin library
@
text
@d4 3
d208 2
@


1.19
log
@Added new builtin ML_OFFSET for computing pointers into middles of
letrec code vectors
@
text
@d4 4
d200 1
@


1.18
log
@Added various loading functions for interpreter
@
text
@d4 3
d193 1
@


1.17
log
@Added ident function to alloow type casting required by interpreter
@
text
@d4 3
d188 8
a195 1
    IDENT_FN
@


1.16
log
@Added arithmetic right shift operator
@
text
@d4 3
d184 2
a185 1
    XORB
@


1.15
log
@Added the Bits structure
@
text
@d4 3
d180 1
@


1.14
log
@Updated documentation not corrected by previous modifiers.
Changed `sort' and `de_sort' to mnemonic names.
@
text
@d4 4
d171 7
a177 1
    EXSUBSCRIPTVAL 
d184 1
a184 1
  (* Who can say what these do?  I certainly don't know. *)
@


1.13
log
@Added EQFUN.
@
text
@d4 3
d174 10
a183 1
  (*  === FIELD NUMBERS WITHIN THE PERVASIVE LIBRARY ===
d186 2
a187 2
   *  the PervasiveLibrary structure, such that a SELECT operation on
   *  PervasiveLibrary using the field number gives the pervasive object.
a192 9
  val constructor_name_list :(pervasive * string) list
  val value_name_list :(pervasive * string) list
  val exception_name_list :(pervasive * string) list
  val library_contents :(pervasive) list

  val to_be_checked : string list * string list

  val is_in_library : pervasive -> bool

d197 1
d199 1
d209 1
a209 1
  (*  === AN ORDERING ON THE PERVASIVES ===
d211 2
a212 1
   *  This is an anonymous ordering for use in mappings etc.
d215 3
a217 5
  val sort : pervasive -> int
  val de_sort : int -> pervasive

  val order : pervasive * pervasive -> bool

@


1.12
log
@New pervasive library code
@
text
@d4 3
d130 1
@


1.11
log
@Added the EXSUBSCRIPTVAL and EXSIZEVAL
@
text
@d4 3
a126 10
    STD_IN |
    STD_OUT |
    OPEN_IN |
    OPEN_OUT |
    INPUT |
    LOOKAHEAD |
    CLOSE_IN |
    END_OF_STREAM |
    OUTPUT |
    CLOSE_OUT |
a152 3
    SYSTEM |
    SUBSTRING |
    ARRAY |
a153 1
    ARRAY_OF_LIST |
a155 1
    TABULATE |
d177 7
d204 3
@


1.10
log
@Added arrays to the initial basis
@
text
@d4 3
d170 3
a172 1
    EXSUBSCRIPT
@


1.9
log
@Added a SUBSTRING pervasive as a temporary measure so that the same code
can be compiled under under both New Jersey and MLWorks.
@
text
@d4 4
d158 10
a167 1
    SUBSTRING
@


1.8
log
@Separated exception values from exception names.
@
text
@d3 4
a6 1
$Log:	pervasives.sml,v $
d153 2
a154 1
    SYSTEM
@


1.7
log
@Added several functions concerned with the structure of the
pervasive library module and a function for ordering the pervasives.
@
text
@d4 4
d37 4
d61 18
@


1.6
log
@Added library_name to map pervasives on to their names in the library.
@
text
@d4 3
d26 7
a32 1
signature PERVASIVES = sig
a97 1
    MAKE_NEW_UNIQUE |
a129 2
  (* The library name of a pervasive is the identifier it maps to in the *)
  (* library module. *)
d131 34
a164 1
  val library_name : pervasive -> string
@


1.5
log
@Added is_fun to determine if pervasives are functions, and hence can
be eta_abstracted during compilation.
@
text
@d4 4
d117 1
d119 1
d121 5
@


1.4
log
@Added CALL_C and SYSTEM.
@
text
@d4 3
d113 2
a114 1
  val print_pervasive: pervasive -> string
@


1.3
log
@Added CALL_C
@
text
@d4 3
d108 2
a109 1
    CALL_C
@


1.2
log
@Corrected spelling of UNIQUE (!)
@
text
@d4 3
d104 2
a105 1
    REALABS
@


1.1
log
@Initial revision
@
text
@d3 4
a6 1
$Log$
d76 1
a76 1
    MAKE_NEW_UNQIUE |
@
