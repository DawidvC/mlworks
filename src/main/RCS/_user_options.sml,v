head	1.57;
access;
symbols
	MLW_daveb_inline_1_4_99:1.57.1
	MLWorks_21c0_1999_03_25:1.57
	MLWorks_20c1_1998_08_20:1.57
	MLWorks_20c0_1998_08_04:1.57
	MLWorks_20b2c2_1998_06_19:1.57
	MLWorks_20b2_Windows_1998_06_12:1.57
	MLWorks_20b1c1_1998_05_07:1.57
	MLWorks_20b0_1998_04_07:1.56
	MLWorks_20b0_1998_03_20:1.56
	MLWorks_20m2_1998_02_16:1.53
	MLWorks_20m1_1997_10_23:1.53
	MLWorks_11r1:1.51.1.1.1.2.1
	MLWorks_workspace_97:1.52.2
	MLWorks_dt_wizard:1.52.1
	MLWorks_11c0_1997_09_09:1.51.1.1.1.2
	MLWorks_10r3:1.51.1.1.3
	MLWorks_10r2_551:1.51.1.1.2
	MLWorks_11:1.51.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.51.1.1
	MLWorks_20m0_1997_06_20:1.52
	MLWorks_1_0_r2c2_1997_06_14:1.51.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.51.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.51.1
	MLWorks_BugFix_1997_04_24:1.51
	MLWorks_1_0_r2_Win32_1997_04_11:1.51
	MLWorks_1_0_r2_Unix_1997_04_04:1.51
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.48.3.1.1
	MLWorks_gui_1996_12_18:1.48.4
	MLWorks_1_0_Win32_1996_12_17:1.48.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.48.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.48.1.1
	MLWorks_1_0_Irix_1996_11_28:1.48.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.48.2
	MLWorks_1_0_Unix_1996_11_14:1.48.1
	MLWorks_Open_Beta2_1996_10_11:1.47.2
	MLWorks_License_dev:1.47.1
	MLWorks_1_open_beta_1996_09_13:1.46.1
	MLWorks_Open_Beta_1996_08_22:1.46
	MLWorks_Beta_1996_07_02:1.45
	MLWorks_Beta_1996_06_07:1.45
	MLWorks_Beta_1996_06_06:1.45
	MLWorks_Beta_1996_06_05:1.45
	MLWorks_Beta_1996_06_03:1.45
	MLWorks_Beta_1996_05_31:1.45
	MLWorks_Beta_1996_05_30:1.45
	ML_beta_release_12/08/94:1.27
	ML_beta_release_03/08/94:1.27
	ML_revised_beta_release_25/05/94:1.25
	ML_final_beta_release_02/03/94:1.24
	mlworks-28-01-1994:1.23
	Release:1.18
	mlworks-beta-01-09-1993:1.18;
locks; strict;
comment	@ * @;


1.57
date	98.04.24.15.35.32;	author johnh;	state Exp;
branches
	1.57.1.1;
next	1.56;

1.56
date	98.03.20.15.57.48;	author jont;	state Exp;
branches;
next	1.55;

1.55
date	98.03.03.09.54.51;	author mitchell;	state Exp;
branches;
next	1.54;

1.54
date	98.02.19.17.16.47;	author mitchell;	state Exp;
branches;
next	1.53;

1.53
date	97.10.01.16.31.47;	author jkbrook;	state Exp;
branches;
next	1.52;

1.52
date	97.05.27.11.13.16;	author daveb;	state Exp;
branches
	1.52.1.1
	1.52.2.1;
next	1.51;

1.51
date	97.03.25.11.25.38;	author matthew;	state Exp;
branches
	1.51.1.1;
next	1.50;

1.50
date	97.01.21.10.44.55;	author matthew;	state Exp;
branches;
next	1.49;

1.49
date	97.01.02.15.26.17;	author matthew;	state Exp;
branches;
next	1.48;

1.48
date	96.11.06.11.29.18;	author matthew;	state Exp;
branches
	1.48.1.1
	1.48.2.1
	1.48.3.1
	1.48.4.1;
next	1.47;

1.47
date	96.09.23.12.01.30;	author andreww;	state Exp;
branches
	1.47.1.1
	1.47.2.1;
next	1.46;

1.46
date	96.07.18.17.26.29;	author jont;	state Exp;
branches
	1.46.1.1;
next	1.45;

1.45
date	96.05.22.16.51.26;	author daveb;	state Exp;
branches;
next	1.44;

1.44
date	96.05.22.12.47.30;	author daveb;	state Exp;
branches;
next	1.43;

1.43
date	96.05.21.14.26.27;	author daveb;	state Exp;
branches;
next	1.42;

1.42
date	96.05.20.17.48.49;	author daveb;	state Exp;
branches;
next	1.41;

1.41
date	96.05.20.14.50.43;	author daveb;	state Exp;
branches;
next	1.40;

1.40
date	96.05.01.09.42.23;	author jont;	state Exp;
branches;
next	1.39;

1.39
date	96.04.29.15.00.35;	author matthew;	state Exp;
branches;
next	1.38;

1.38
date	96.03.19.10.20.07;	author matthew;	state Exp;
branches;
next	1.37;

1.37
date	96.02.29.14.13.20;	author matthew;	state Exp;
branches;
next	1.36;

1.36
date	95.11.17.13.45.45;	author daveb;	state Exp;
branches;
next	1.35;

1.35
date	95.10.25.18.05.41;	author jont;	state Exp;
branches;
next	1.34;

1.34
date	95.06.30.15.38.45;	author daveb;	state Exp;
branches;
next	1.33;

1.33
date	95.05.26.10.19.46;	author daveb;	state Exp;
branches;
next	1.32;

1.32
date	95.05.15.14.48.22;	author matthew;	state Exp;
branches;
next	1.31;

1.31
date	95.05.02.11.53.41;	author matthew;	state Exp;
branches;
next	1.30;

1.30
date	95.03.13.12.21.17;	author daveb;	state Exp;
branches;
next	1.29;

1.29
date	95.03.09.21.27.05;	author daveb;	state Exp;
branches;
next	1.28;

1.28
date	95.02.14.12.08.31;	author matthew;	state Exp;
branches;
next	1.27;

1.27
date	94.08.01.14.43.07;	author daveb;	state Exp;
branches;
next	1.26;

1.26
date	94.07.27.11.25.10;	author daveb;	state Exp;
branches;
next	1.25;

1.25
date	94.05.05.16.11.37;	author daveb;	state Exp;
branches;
next	1.24;

1.24
date	94.02.28.08.33.56;	author nosa;	state Exp;
branches;
next	1.23;

1.23
date	93.12.17.16.18.32;	author matthew;	state Exp;
branches;
next	1.22;

1.22
date	93.12.01.15.12.33;	author io;	state Exp;
branches;
next	1.21;

1.21
date	93.11.04.16.35.57;	author jont;	state Exp;
branches;
next	1.20;

1.20
date	93.10.13.14.54.52;	author daveb;	state Exp;
branches;
next	1.19;

1.19
date	93.09.03.10.38.26;	author nosa;	state Exp;
branches;
next	1.18;

1.18
date	93.08.23.14.14.54;	author richard;	state Exp;
branches
	1.18.1.1;
next	1.17;

1.17
date	93.08.10.16.11.17;	author matthew;	state Exp;
branches;
next	1.16;

1.16
date	93.08.09.15.53.00;	author matthew;	state Exp;
branches;
next	1.15;

1.15
date	93.07.13.14.37.15;	author nosa;	state Exp;
branches;
next	1.14;

1.14
date	93.06.11.09.02.23;	author matthew;	state Exp;
branches;
next	1.13;

1.13
date	93.06.10.13.17.33;	author matthew;	state Exp;
branches;
next	1.12;

1.12
date	93.05.28.14.13.07;	author matthew;	state Exp;
branches;
next	1.11;

1.11
date	93.05.19.09.51.40;	author daveb;	state Exp;
branches;
next	1.10;

1.10
date	93.05.14.12.23.14;	author jont;	state Exp;
branches;
next	1.9;

1.9
date	93.05.11.14.55.48;	author jont;	state Exp;
branches;
next	1.8;

1.8
date	93.04.27.13.49.40;	author richard;	state Exp;
branches;
next	1.7;

1.7
date	93.04.22.11.43.06;	author richard;	state Exp;
branches;
next	1.6;

1.6
date	93.04.07.15.44.15;	author jont;	state Exp;
branches;
next	1.5;

1.5
date	93.04.01.13.52.41;	author jont;	state Exp;
branches;
next	1.4;

1.4
date	93.03.23.16.43.17;	author daveb;	state Exp;
branches;
next	1.3;

1.3
date	93.03.10.14.37.07;	author matthew;	state Exp;
branches;
next	1.2;

1.2
date	93.03.05.12.01.23;	author matthew;	state Exp;
branches;
next	1.1;

1.1
date	93.03.01.16.11.55;	author daveb;	state Exp;
branches;
next	;

1.18.1.1
date	93.08.23.14.14.54;	author jont;	state Exp;
branches;
next	1.18.1.2;

1.18.1.2
date	93.10.12.13.54.59;	author daveb;	state Exp;
branches;
next	;

1.46.1.1
date	96.09.13.11.18.07;	author hope;	state Exp;
branches;
next	;

1.47.1.1
date	96.10.07.16.07.58;	author hope;	state Exp;
branches;
next	;

1.47.2.1
date	96.10.17.11.26.13;	author hope;	state Exp;
branches;
next	;

1.48.1.1
date	96.11.14.12.51.28;	author hope;	state Exp;
branches
	1.48.1.1.1.1;
next	;

1.48.1.1.1.1
date	96.11.28.15.02.32;	author hope;	state Exp;
branches;
next	;

1.48.2.1
date	96.11.22.18.10.42;	author hope;	state Exp;
branches;
next	;

1.48.3.1
date	96.12.17.17.49.17;	author hope;	state Exp;
branches
	1.48.3.1.1.1;
next	;

1.48.3.1.1.1
date	97.02.24.11.39.23;	author hope;	state Exp;
branches;
next	;

1.48.4.1
date	96.12.18.09.43.21;	author hope;	state Exp;
branches;
next	;

1.51.1.1
date	97.05.12.10.35.50;	author hope;	state Exp;
branches
	1.51.1.1.1.1
	1.51.1.1.2.1
	1.51.1.1.3.1;
next	;

1.51.1.1.1.1
date	97.07.28.18.21.32;	author daveb;	state Exp;
branches;
next	1.51.1.1.1.2;

1.51.1.1.1.2
date	97.08.08.17.15.16;	author daveb;	state Exp;
branches
	1.51.1.1.1.2.1.1;
next	;

1.51.1.1.1.2.1.1
date	97.10.07.11.47.09;	author jkbrook;	state Exp;
branches;
next	;

1.51.1.1.2.1
date	97.09.08.17.14.56;	author daveb;	state Exp;
branches;
next	;

1.51.1.1.3.1
date	97.09.09.14.10.49;	author daveb;	state Exp;
branches;
next	;

1.52.1.1
date	97.09.10.19.26.50;	author brucem;	state Exp;
branches;
next	;

1.52.2.1
date	97.09.11.20.56.50;	author daveb;	state Exp;
branches;
next	;

1.57.1.1
date	99.04.01.17.57.43;	author daveb;	state Exp;
branches;
next	;


desc
@ Defines the user-settable options.  Used to be in shell.
@


1.57
log
@[Bug #30229]
Group compiler options to allow more flexibility.
@
text
@(*  User-visible options.
 *
 *  Copyright (C) 1992,1993 Harlequin Ltd
 *
 *  $Log: _user_options.sml,v $
 * Revision 1.56  1998/03/20  15:57:48  jont
 * [Bug #30090]
 * Modify to use TextIO instead of MLWorks.IO
 *
 * Revision 1.55  1998/03/03  09:54:51  mitchell
 * [Bug #70074]
 * Add depth limit support for signature printing
 *
 * Revision 1.54  1998/02/19  17:16:47  mitchell
 * [Bug #30349]
 * Fix to avoid non-unit sequence warnings
 *
 * Revision 1.53  1997/10/01  16:31:47  jkbrook
 * [Bug #20088]
 * Merging from MLWorks_11:
 * SML'96 should be SML'97
 *
 * Revision 1.52  1997/05/27  11:13:16  daveb
 * [Bug #30136]
 * Removed early-mips-r4000 option.
 *
 * Revision 1.51  1997/03/25  11:25:38  matthew
 * Renaming R4000 option
 *
 * Revision 1.50  1997/01/21  10:44:55  matthew
 * Adding architecture dependent options
 *
 * Revision 1.49  1997/01/02  15:26:17  matthew
 * Adding local_functions option
 *
 * Revision 1.48  1996/11/06  11:29:18  matthew
 * [Bug #1728]
 * __integer becomes __int
 *
 * Revision 1.47  1996/09/23  12:01:30  andreww
 * [Bug #1605]
 * removing default_overloads flag.  Now subsumed by old_definition.
 *
 * Revision 1.46  1996/07/18  17:26:29  jont
 * Add option to turn on/off compilation messages from intermake
 *
 * Revision 1.45  1996/05/22  16:51:26  daveb
 * Made is_debugging check that var_info is set.
 *
 * Revision 1.44  1996/05/22  12:47:30  daveb
 * Combined Local Variable and Debugging modes.
 *
 * Revision 1.43  1996/05/21  14:26:27  daveb
 * Renaming modes.
 *
 * Revision 1.42  1996/05/20  17:48:49  daveb
 * Added a comment or two.
 *
 * Revision 1.41  1996/05/20  14:50:43  daveb
 * Added functions to set and clear particular user options, including modes.
 *
 * Revision 1.40  1996/05/01  09:42:23  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
 * Revision 1.39  1996/04/29  15:00:35  matthew
 * Removing MLWorks.Integer
 *
 * Revision 1.38  1996/03/19  10:20:07  matthew
 * Adding "old_definition" option
 *
 * Revision 1.37  1996/02/29  14:13:20  matthew
 * Adding facility to save to stream
 *
 * Revision 1.36  1995/11/17  13:45:45  daveb
 * Removed no_execute.
 *
 *  Revision 1.35  1995/10/25  18:05:41  jont
 *  Adding opt_handlers compiler option
 *
 *  Revision 1.34  1995/06/30  15:38:45  daveb
 *  Added float_precision option to ValuePrinter options.
 *
 *  Revision 1.33  1995/05/26  10:19:46  daveb
 *  Divided user options into per-tool options and per-context options.
 *
 *  Revision 1.32  1995/05/15  14:48:22  matthew
 *  cout -s main/user_options.sml
 *  Renameing nj_semicolons
 *
 *  Revision 1.31  1995/05/02  11:53:41  matthew
 *  Removing debug_polyvariables option
 *
 *  Revision 1.30  1995/03/13  12:21:17  daveb
 *  Added set_context and sense_context.
 *
 *  Revision 1.29  1995/03/09  21:27:05  daveb
 *  Added sensitivity options.
 *
 *  Revision 1.28  1995/02/14  12:08:31  matthew
 *  Change option debug to generate_debug_info
 *
 *  Revision 1.27  1994/08/01  14:43:07  daveb
 *  Moved preferences to separate structure.
 *
 *  Revision 1.25  1994/05/05  16:11:37  daveb
 *  Added default_overloads, vector_literals, and wildcard_warnings.
 *
 *  Revision 1.24  1994/02/28  08:33:56  nosa
 *  Step and Modules Debugger compiler options.
 *
 *  Revision 1.23  1993/12/17  16:18:32  matthew
 *  Added maximum_str_depth to options.
 *
 *  Revision 1.22  1993/12/01  15:12:33  io
 *  Added max_num_errors
 *
 *  Revision 1.21  1993/11/04  16:35:57  jont
 *  Added interrupt option
 *
 *  Revision 1.20  1993/10/13  14:54:52  daveb
 *  Merged in bug fix.
 *
 *  Revision 1.20  1993/10/13  12:24:30  daveb
 *  Merged in bug fix.
 *
 *  Revision 1.19  1993/09/03  10:38:26  nosa
 *  New compiler option debug_polyvariables for polymorphic debugger.

 *  Revision 1.18.1.2  1993/10/12  13:54:59  daveb
 *  Changed print options.
 *
 *  Revision 1.18.1.1  1993/08/23  14:14:54  jont
 *  Fork for bug fixing
 *
 *  Revision 1.18  1993/08/23  14:14:54  richard
 *  Added output_lambda option.
 *
 *  Revision 1.17  1993/08/10  16:11:17  matthew
 *  Added update function list component to user_options type
 *
 *  Revision 1.16  1993/08/09  15:53:00  matthew
 *  Added more environment preferences
 *
 *  Revision 1.15  1993/07/13  14:37:15  nosa
 *  new compiler option debug_variables for local and closure variable
 *  inspection in the debugger.
 *
 *  Revision 1.14  1993/06/11  09:02:23  matthew
 *  Fixed typo
 *
 *  Revision 1.13  1993/06/10  13:17:33  matthew
 *  Added open fixity and fixity spec options
 *
 *  Revision 1.12  1993/05/28  14:13:07  matthew
 *  environment_options = new_environment_options user_options
 *
 *  Added environment options
 *
 *  Revision 1.11  1993/05/19  09:51:40  daveb
 *  Rearranged some of the options.
 *
 *  Revision 1.10  1993/05/14  12:23:14  jont
 *  Added options to control parse treatment of New Jersey style weak type variables
 *
 *  Revision 1.9  1993/05/11  14:55:48  jont
 *  Added option to control make -n type facility
 *
 *  Revision 1.8  1993/04/27  13:49:40  richard
 *  Unified profiling and tracing options into `intercept'.
 *  Removed poly_makestring option.
 *
 *  Revision 1.7  1993/04/22  11:43:06  richard
 *  The editor interface is now implemented directly through
 *  Unix system calls, and is not part of the pervasive library
 *  or the runtime system.
 *
 *  Revision 1.6  1993/04/07  15:44:15  jont
 *  Added editor options
 *
 *  Revision 1.5  1993/04/01  13:52:41  jont
 *  Added compatibility options
 *  
 *  Revision 1.4  1993/03/23  16:43:17  daveb
 *  Added require_keyword and type_dynamic options.
 *  
 *  Revision 1.3  1993/03/10  14:37:07  matthew
 *  Added compat options
 *  Changed options to be record not tuple
 *  
 *  Revision 1.2  1993/03/05  12:01:23  matthew
 *  Options & Info changes
 *  
 *  Revision 1.1  1993/03/01  16:11:55  daveb
 *  Initial revision
 *)

require "../basis/__int";
require "../basis/__text_io";
require "../utils/lists";

require "options";
require "user_options";

functor UserOptions (
  structure Options: OPTIONS
  structure Lists: LISTS
): USER_OPTIONS =
struct
  structure Options = Options

  datatype user_context_options = USER_CONTEXT_OPTIONS of
    ({generate_interceptable_code:                    bool ref,
      generate_debug_info:                            bool ref,
      generate_variable_debug_info:                   bool ref,
      generate_moduler:                               bool ref,
      generate_interruptable_code:                    bool ref,
      optimize_handlers:			      bool ref,
      optimize_leaf_fns:                              bool ref,
      optimize_tail_calls:                            bool ref,
      optimize_self_tail_calls:                       bool ref,
      local_functions:                                bool ref,
      print_messages:                                 bool ref,
      mips_r4000:                                     bool ref,
      sparc_v7:                                       bool ref,
      require_keyword:                                bool ref,
      type_dynamic:                                   bool ref,
      abstractions:                                   bool ref,
      nj_op_in_datatype:                              bool ref,
      nj_signatures:                                  bool ref,
      fixity_specs:                                   bool ref,
      open_fixity:                                    bool ref,
      weak_type_vars:                                 bool ref,
      old_definition:		                      bool ref}
    * (unit -> unit) list ref)

  datatype user_tool_options = USER_TOOL_OPTIONS of
    ({show_fn_details:                               bool ref,
      show_exn_details:                              bool ref,
      maximum_seq_size:                              int ref,
      maximum_string_size:                           int ref,
      maximum_depth:                                 int ref,
      maximum_ref_depth:                             int ref,
      maximum_str_depth:                             int ref,
      maximum_sig_depth:                             int ref,
      float_precision:                               int ref,
      show_id_class:                                 bool ref,
      show_eq_info:                                  bool ref,
      show_absyn:                                    bool ref,
      show_match:                                    bool ref,
      show_environ:                                  bool ref,
      show_lambda:                                   bool ref,
      show_opt_lambda:                               bool ref,
      show_mir:                                      bool ref,
      show_opt_mir:                                  bool ref,
      show_mach:                                     bool ref,
      show_debug_info:                               bool ref,
      show_timings:                                  bool ref,
      show_print_timings:                            bool ref,
      set_selection:                                 bool ref,
      sense_selection:                               bool ref,
      set_context:                                   bool ref,
      sense_context:                                 bool ref}
    * (unit -> unit) list ref)

  fun make_user_tool_options
    (Options.OPTIONS
       {listing_options =
          Options.LISTINGOPTIONS
            {show_absyn, show_lambda, show_match, show_opt_lambda,
             show_environ, show_mir, show_opt_mir, show_mach},
        print_options =
          Options.PRINTOPTIONS
            {maximum_seq_size, maximum_string_size, maximum_ref_depth,
             maximum_str_depth, maximum_sig_depth, maximum_depth, float_precision,
	     print_fn_details, print_exn_details, show_id_class, show_eq_info},
        ...}) =
     USER_TOOL_OPTIONS
       ({maximum_seq_size         = ref maximum_seq_size,
         maximum_string_size      = ref maximum_string_size,
         maximum_ref_depth        = ref maximum_ref_depth,
         maximum_str_depth        = ref maximum_str_depth,
         maximum_sig_depth        = ref maximum_sig_depth,
         maximum_depth            = ref maximum_depth,
         float_precision          = ref float_precision,
         show_fn_details          = ref print_fn_details,
         show_exn_details         = ref print_exn_details,
         show_id_class            = ref show_id_class,
         show_eq_info             = ref show_eq_info,
         show_absyn               = ref show_absyn,
         show_match               = ref show_match,
         show_lambda              = ref show_lambda,
         show_environ             = ref show_environ,
         show_opt_lambda          = ref show_opt_lambda,
         show_mir                 = ref show_mir,
         show_opt_mir             = ref show_opt_mir,
         show_mach                = ref show_mach,
         show_debug_info          = ref false,
         show_timings             = ref false,
         show_print_timings       = ref false,
         set_context		  = ref true,
         sense_context	  	  = ref true,
         set_selection		  = ref true,
         sense_selection	  = ref true},
	ref nil)

  fun make_user_context_options
    (Options.OPTIONS
       {compiler_options = Options.COMPILEROPTIONS
          {generate_debug_info, debug_variables, generate_moduler,
	   intercept, interrupt, opt_handlers, opt_leaf_fns, opt_tail_calls,
	   opt_self_calls, local_functions, print_messages, 
           mips_r4000, sparc_v7},
        compat_options = Options.COMPATOPTIONS
          {nj_op_in_datatype,
           nj_signatures, weak_type_vars, fixity_specs, open_fixity,
           abstractions, old_definition},
        extension_options = Options.EXTENSIONOPTIONS
          {require_keyword, type_dynamic},
	...}) =
    USER_CONTEXT_OPTIONS
      ({generate_interceptable_code  = ref intercept,
        generate_debug_info          = ref generate_debug_info,
        generate_variable_debug_info = ref debug_variables,
        generate_moduler  	     = ref generate_moduler,
        generate_interruptable_code  = ref interrupt,
        optimize_handlers            = ref opt_handlers,
        optimize_leaf_fns            = ref opt_leaf_fns,
        optimize_tail_calls          = ref opt_tail_calls,
        optimize_self_tail_calls     = ref opt_self_calls,
        local_functions              = ref local_functions,
        print_messages               = ref print_messages,
        mips_r4000                   = ref mips_r4000,
        sparc_v7                     = ref sparc_v7,
        require_keyword   	     = ref require_keyword,
        type_dynamic		     = ref type_dynamic,
        abstractions		     = ref abstractions,
        old_definition		     = ref old_definition,
        nj_op_in_datatype	     = ref nj_op_in_datatype,
        nj_signatures	  	     = ref nj_signatures,
        fixity_specs                 = ref fixity_specs,
        open_fixity                  = ref open_fixity,
        weak_type_vars	   	     = ref weak_type_vars},
       ref nil)

    fun copy_user_tool_options
	  (USER_TOOL_OPTIONS
	     ({maximum_seq_size, maximum_string_size, maximum_ref_depth,
               maximum_str_depth, maximum_sig_depth, maximum_depth, float_precision,
	       show_fn_details, show_exn_details,
	       show_id_class, show_eq_info, show_absyn, show_match,
	       show_lambda, show_environ, show_opt_lambda, show_mir,
	       show_opt_mir, show_mach, show_debug_info, show_timings,
	       show_print_timings,
	       set_selection, sense_selection, set_context, sense_context},
	      _)) =
      USER_TOOL_OPTIONS
       ({maximum_seq_size         = ref (!maximum_seq_size),
         maximum_string_size      = ref (!maximum_string_size),
         maximum_ref_depth        = ref (!maximum_ref_depth),
         maximum_str_depth        = ref (!maximum_str_depth),
         maximum_sig_depth        = ref (!maximum_sig_depth),
         maximum_depth            = ref (!maximum_depth),
         float_precision          = ref (!float_precision),
         show_fn_details          = ref (!show_fn_details),
         show_exn_details         = ref (!show_exn_details),
         show_id_class            = ref (!show_id_class),
         show_eq_info             = ref (!show_eq_info),
         show_absyn               = ref (!show_absyn),
         show_match               = ref (!show_match),
         show_lambda              = ref (!show_lambda),
         show_environ             = ref (!show_environ),
         show_opt_lambda          = ref (!show_opt_lambda),
         show_mir                 = ref (!show_mir),
         show_opt_mir             = ref (!show_opt_mir),
         show_mach                = ref (!show_mach),
         show_debug_info          = ref (!show_debug_info),
         show_timings             = ref (!show_timings),
         show_print_timings       = ref (!show_print_timings),
         set_context		  = ref (!set_context),
         sense_context	  	  = ref (!sense_context),
         set_selection		  = ref (!set_selection),
         sense_selection	  = ref (!sense_selection)},
        ref nil)

    fun copy_user_context_options
          (USER_CONTEXT_OPTIONS
	    ({generate_interceptable_code, generate_interruptable_code,
	      generate_debug_info, generate_variable_debug_info,
	      generate_moduler,
	      optimize_handlers,
	      optimize_leaf_fns, optimize_tail_calls, optimize_self_tail_calls,
              local_functions,
	      print_messages,
              mips_r4000,sparc_v7,
	      abstractions, old_definition,
	      nj_op_in_datatype, nj_signatures,
              fixity_specs,
              open_fixity,
	      require_keyword,
              type_dynamic,
              weak_type_vars}, _)) =
      USER_CONTEXT_OPTIONS
       ({generate_interceptable_code  = ref (!generate_interceptable_code),
         generate_debug_info          = ref (!generate_debug_info),
         generate_variable_debug_info = ref (!generate_variable_debug_info),
         generate_moduler             = ref (!generate_moduler),
         generate_interruptable_code  = ref (!generate_interruptable_code),
	 optimize_handlers	      = ref (!optimize_handlers),
         optimize_leaf_fns            = ref (!optimize_leaf_fns),
         optimize_tail_calls          = ref (!optimize_tail_calls),
         optimize_self_tail_calls     = ref (!optimize_self_tail_calls),
         local_functions              = ref (!local_functions),
         print_messages               = ref (!print_messages),
         mips_r4000                   = ref (!mips_r4000),
         sparc_v7                     = ref (!sparc_v7),
	 require_keyword   	      = ref (!require_keyword),
	 type_dynamic		      = ref (!type_dynamic),
	 abstractions		      = ref (!abstractions),
	 old_definition		      = ref (!old_definition),
	 nj_op_in_datatype	      = ref (!nj_op_in_datatype),
	 nj_signatures	  	      = ref (!nj_signatures),
         fixity_specs                 = ref (!fixity_specs),
         open_fixity                  = ref (!open_fixity),
	 weak_type_vars	   	      = ref (!weak_type_vars)},
	ref nil)

    fun update_user_context_options user_context_options =
      let
        val USER_CONTEXT_OPTIONS (_, ref update_fns) = user_context_options
      in
        Lists.iterate (fn f => f ()) update_fns
      end

    fun update_user_tool_options user_tool_options =
      let
        val USER_TOOL_OPTIONS (_, ref update_fns) = user_tool_options
      in
        Lists.iterate (fn f => f ()) update_fns
      end

    fun get_user_context_option (f, user_context_options) =
      let
        val USER_CONTEXT_OPTIONS (user_options, _) = user_context_options
      in
        !(f user_options)
      end

    fun set_user_context_option (f, user_context_options) =
      let
        val USER_CONTEXT_OPTIONS (user_options, _) = user_context_options
      in
        (f user_options) := true
      end

    fun clear_user_context_option (f, user_context_options) =
      let
        val USER_CONTEXT_OPTIONS (user_options, _) = user_context_options
      in
        (f user_options) := false
      end

    (* The following functions set the options for each mode.  The
       update function must not be called here: in the GUI it is
       called automatically by the dialog code.  The functions in
       _shell_structure must call it explicitiy. *)
       
    fun select_compatibility user_options =
      (set_user_context_option (#nj_op_in_datatype, user_options);
       set_user_context_option (#nj_signatures, user_options);
       set_user_context_option (#weak_type_vars, user_options);
       set_user_context_option (#abstractions, user_options);
       set_user_context_option (#fixity_specs, user_options);
       set_user_context_option (#open_fixity, user_options);
       set_user_context_option (#old_definition, user_options))

    fun select_sml'97 user_options =
      (clear_user_context_option (#nj_op_in_datatype, user_options);
       clear_user_context_option (#nj_signatures, user_options);
       clear_user_context_option (#weak_type_vars, user_options);
       clear_user_context_option (#abstractions, user_options);
       clear_user_context_option (#fixity_specs, user_options);
       clear_user_context_option (#open_fixity, user_options);
       clear_user_context_option (#old_definition, user_options))

    fun select_sml'90 user_options =
      (clear_user_context_option (#nj_op_in_datatype, user_options);
       clear_user_context_option (#nj_signatures, user_options);
       clear_user_context_option (#weak_type_vars, user_options);
       clear_user_context_option (#abstractions, user_options);
       clear_user_context_option (#fixity_specs, user_options);
       clear_user_context_option (#open_fixity, user_options);
       set_user_context_option (#old_definition, user_options))


    val unset = clear_user_context_option
    val set = set_user_context_option

    fun select_quick_compile user_options = 
      (set (#optimize_leaf_fns, user_options);
       set (#optimize_tail_calls, user_options);
       set (#optimize_self_tail_calls, user_options);
       unset (#generate_interceptable_code, user_options);
       unset (#generate_debug_info, user_options);
       unset (#generate_variable_debug_info, user_options);
       unset (#local_functions, user_options))

    fun select_optimizing user_options =
      (*
      (set_user_context_option (#optimize_handlers, user_options);
      *)
      (set (#optimize_leaf_fns, user_options);
       set (#optimize_tail_calls, user_options);
       set (#optimize_self_tail_calls, user_options);
       unset (#generate_interceptable_code, user_options);
       unset (#generate_debug_info, user_options);
       unset (#generate_variable_debug_info, user_options);
       set (#local_functions, user_options))

    fun select_debugging user_options =
      (set (#generate_interceptable_code, user_options);
       set (#generate_debug_info, user_options);
       set (#generate_variable_debug_info, user_options);
       unset (#optimize_leaf_fns, user_options);
       unset (#optimize_tail_calls, user_options);
       unset (#optimize_self_tail_calls, user_options))

    fun is_sml'97 user_options =
      not (get_user_context_option (#nj_op_in_datatype, user_options)) andalso
      not (get_user_context_option (#nj_signatures, user_options)) andalso
      not (get_user_context_option (#weak_type_vars, user_options)) andalso
      not (get_user_context_option (#open_fixity, user_options)) andalso
      not (get_user_context_option (#fixity_specs, user_options)) andalso
      not (get_user_context_option (#abstractions, user_options)) andalso
      not (get_user_context_option (#old_definition, user_options))

    fun is_compatibility user_options =
      get_user_context_option (#nj_op_in_datatype, user_options) andalso
      get_user_context_option (#nj_signatures, user_options) andalso
      get_user_context_option (#weak_type_vars, user_options) andalso
      get_user_context_option (#open_fixity, user_options) andalso
      get_user_context_option (#fixity_specs, user_options) andalso
      get_user_context_option (#abstractions, user_options) andalso
      get_user_context_option (#old_definition, user_options)

    fun is_sml'90 user_options =
      not (get_user_context_option (#nj_op_in_datatype, user_options)) andalso
      not (get_user_context_option (#nj_signatures, user_options)) andalso
      not (get_user_context_option (#weak_type_vars, user_options)) andalso
      not (get_user_context_option (#open_fixity, user_options)) andalso
      not (get_user_context_option (#fixity_specs, user_options)) andalso
      not (get_user_context_option (#abstractions, user_options)) andalso
      get_user_context_option (#old_definition, user_options)

    val get_uc = get_user_context_option

    fun is_quick_compile user_options = 
      get_uc (#optimize_leaf_fns, user_options) andalso
      get_uc (#optimize_tail_calls, user_options) andalso
      get_uc (#optimize_self_tail_calls, user_options) andalso
      not (get_uc (#generate_debug_info, user_options)) andalso
      not (get_uc (#generate_interceptable_code, user_options)) andalso
      not (get_uc (#generate_variable_debug_info, user_options)) andalso
      not (get_uc (#local_functions, user_options))

    fun is_debugging user_options =
      get_uc (#generate_debug_info, user_options) andalso
      get_uc (#generate_interceptable_code, user_options) andalso
      get_uc (#generate_variable_debug_info, user_options) andalso
      not (get_uc (#optimize_leaf_fns, user_options)) andalso
      not (get_uc (#optimize_tail_calls, user_options)) andalso
      not (get_uc (#optimize_self_tail_calls, user_options))

    fun is_optimizing user_options =
      (*
      get_uc (#optimize_handlers, user_options) andalso
      *)
      get_uc (#optimize_leaf_fns, user_options) andalso
      get_uc (#optimize_tail_calls, user_options) andalso
      get_uc (#optimize_self_tail_calls, user_options) andalso
      not (get_uc (#generate_debug_info, user_options)) andalso
      not (get_uc (#generate_interceptable_code, user_options)) andalso
      not (get_uc (#generate_variable_debug_info, user_options)) andalso
      get_uc (#local_functions, user_options)


    fun new_print_options (USER_TOOL_OPTIONS (r, _)) =
      Options.PRINTOPTIONS
	{print_fn_details    = !(#show_fn_details r),
         print_exn_details   = !(#show_exn_details r),
         maximum_seq_size    = !(#maximum_seq_size r),
         maximum_string_size = !(#maximum_string_size r),
         maximum_ref_depth   = !(#maximum_ref_depth r),
         maximum_str_depth   = !(#maximum_str_depth r),
         maximum_sig_depth   = !(#maximum_sig_depth r),
         maximum_depth       = !(#maximum_depth r),
         float_precision     = !(#float_precision r),
         show_eq_info        = !(#show_eq_info r),
         show_id_class       = !(#show_id_class r) }
      
      
    fun new_compiler_options (USER_CONTEXT_OPTIONS (r, _)) =
      Options.COMPILEROPTIONS
	{generate_debug_info = !(#generate_debug_info r),
         debug_variables     = !(#generate_variable_debug_info r),
         generate_moduler    = !(#generate_moduler r),
         intercept           = !(#generate_interceptable_code r),
	 interrupt           = !(#generate_interruptable_code r),
	 opt_handlers	     = !(#optimize_handlers r),
         opt_leaf_fns        = !(#optimize_leaf_fns r),
         opt_tail_calls      = !(#optimize_tail_calls r),
         opt_self_calls      = !(#optimize_self_tail_calls r),
         local_functions     = !(#local_functions r),
	 print_messages      = !(#print_messages r),
         mips_r4000          = !(#mips_r4000 r),
         sparc_v7            = !(#sparc_v7 r)
         }

    fun new_listing_options (USER_TOOL_OPTIONS (r,_)) =
      Options.LISTINGOPTIONS
	{show_absyn      = !(#show_absyn r),
         show_lambda     = !(#show_lambda r),
         show_match      = !(#show_match r),
         show_opt_lambda = !(#show_opt_lambda r),
         show_environ    = !(#show_environ r),
         show_mir        = !(#show_mir r),
         show_opt_mir    = !(#show_opt_mir r),
         show_mach       = !(#show_mach r)}

    fun new_compat_options (USER_CONTEXT_OPTIONS (r, _)) =
      Options.COMPATOPTIONS
	{old_definition        = !(#old_definition r),
	 nj_op_in_datatype   = !(#nj_op_in_datatype r),
	 nj_signatures       = !(#nj_signatures r),
	 weak_type_vars      = !(#weak_type_vars r),
         fixity_specs        = !(#fixity_specs r),
         open_fixity         = !(#open_fixity r),
	 abstractions        = !(#abstractions r)}
      
    fun new_extension_options (USER_CONTEXT_OPTIONS (r, _)) =
      Options.EXTENSIONOPTIONS
	{type_dynamic       = !(#type_dynamic r),
	 require_keyword    = !(#require_keyword r)}

    fun new_options (user_tool_options, user_context_options) =
      Options.OPTIONS
        {listing_options   = new_listing_options user_tool_options,
         compiler_options  = new_compiler_options user_context_options,
         print_options     = new_print_options user_tool_options,
         extension_options = new_extension_options user_context_options,
         compat_options    = new_compat_options user_context_options
         }

    fun save_to_stream (USER_CONTEXT_OPTIONS (r,_), stream) =
      let
        fun out (name,value) = TextIO.output (stream, name ^ " " ^ value ^ "\n")
        fun write_bool true = "true"
          | write_bool false = "false"
        val write_int = Int.toString
      in
        out ("generate_interceptable_code",write_bool (!(#generate_interceptable_code r)));
        out ("generate_debug_info",write_bool (!(#generate_debug_info r)));
        out ("generate_variable_debug_info",write_bool (!(#generate_variable_debug_info r)));
        out ("generate_moduler",write_bool (!(#generate_moduler r)));
        out ("generate_interruptable_code",write_bool (!(#generate_interruptable_code r)));
        out ("optimize_handlers",write_bool (!(#optimize_handlers r)));
        out ("optimize_leaf_fns",write_bool (!(#optimize_leaf_fns r)));
        out ("optimize_tail_calls",write_bool (!(#optimize_tail_calls r)));
        out ("optimize_self_tail_calls",write_bool (!(#optimize_self_tail_calls r)));
        out ("local_functions",write_bool (!(#local_functions r)));
        out ("require_keyword",write_bool (!(#require_keyword r)));
        out ("type_dynamic",write_bool (!(#type_dynamic r)));
        out ("abstractions",write_bool (!(#abstractions r)));
        out ("old_definition",write_bool (!(#old_definition r)));
        out ("op_in_datatype",write_bool (!(#nj_op_in_datatype r)));
        out ("limited_open",write_bool (!(#nj_signatures r)));
        out ("fixity_specs",write_bool (!(#fixity_specs r)));
        out ("open_fixity",write_bool (!(#open_fixity r)));
        out ("weak_type_vars",write_bool (!(#weak_type_vars r)))
      end

    fun set_from_list (USER_CONTEXT_OPTIONS (r,_),items) =
      let
        fun get_bool "false" = false
          | get_bool _ = true
        fun do_one (component,value) =
          case component of
            "generate_interceptable_code" => (#generate_interceptable_code r) := get_bool value
          | "generate_debug_info" => (#generate_debug_info r) := get_bool value
          | "generate_variable_debug_info" => (#generate_variable_debug_info r) := get_bool value
          | "generate_moduler" => (#generate_moduler r) := get_bool value
          | "generate_interruptable_code" => (#generate_interruptable_code r) := get_bool value
          | "optimize_handlers" => (#optimize_handlers r) := get_bool value
          | "optimize_leaf_fns" => (#optimize_leaf_fns r) := get_bool value
          | "optimize_tail_calls" => (#optimize_tail_calls r) := get_bool value
          | "optimize_self_tail_calls" => (#optimize_self_tail_calls r) := get_bool value
          | "local_functions" => (#local_functions r) := get_bool value
          | "require_keyword" => (#require_keyword r) := get_bool value
          | "type_dynamic" => (#type_dynamic r) := get_bool value
          | "abstractions" => (#abstractions r) := get_bool value
          | "old_definition" => (#old_definition r) := get_bool value
          | "op_in_datatype" => (#nj_op_in_datatype r) := get_bool value
          | "limited_open" => (#nj_signatures r) := get_bool value
          | "fixity_specs" => (#fixity_specs r) := get_bool value
          | "open_fixity" => (#open_fixity r) := get_bool value
          | "weak_type_vars" => (#weak_type_vars r) := get_bool value
          | _ => ()
        fun iterate f [] = ()
          | iterate f (a::b) = (ignore(f a) ; iterate f b)
      in
        iterate do_one items
      end

end
@


1.57.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a5 4
 * Revision 1.57  1998/04/24  15:35:32  johnh
 * [Bug #30229]
 * Group compiler options to allow more flexibility.
 *
@


1.56
log
@[Bug #30090]
Modify to use TextIO instead of MLWorks.IO
@
text
@d6 4
d497 14
a510 1
    fun select_optimizing (user_options, true) =
d514 15
a528 19
      (set_user_context_option (#optimize_leaf_fns, user_options);
       set_user_context_option (#optimize_tail_calls, user_options);
       set_user_context_option (#optimize_self_tail_calls, user_options))
    |   select_optimizing (user_options, false) =
      (*
      (clear_user_context_option (#optimize_handlers, user_options);
      *)
      (clear_user_context_option (#optimize_leaf_fns, user_options);
       clear_user_context_option (#optimize_tail_calls, user_options);
       clear_user_context_option (#optimize_self_tail_calls, user_options))

    fun select_debugging (user_options, false) =
      (clear_user_context_option (#generate_interceptable_code, user_options);
       clear_user_context_option (#generate_debug_info, user_options);
       clear_user_context_option (#generate_variable_debug_info, user_options))
    |   select_debugging (user_options, true) =
      (set_user_context_option (#generate_interceptable_code, user_options);
       set_user_context_option (#generate_debug_info, user_options);
       set_user_context_option (#generate_variable_debug_info, user_options)) 
d557 11
d569 6
a574 4
      get_user_context_option (#generate_debug_info, user_options) andalso
      get_user_context_option
	(#generate_interceptable_code, user_options) andalso
      get_user_context_option (#generate_variable_debug_info, user_options)
d578 1
a578 1
      get_user_context_option (#optimize_handlers, user_options) andalso
d580 8
a587 3
      get_user_context_option (#optimize_leaf_fns, user_options) andalso
      get_user_context_option (#optimize_tail_calls, user_options) andalso
      get_user_context_option (#optimize_self_tail_calls, user_options)
@


1.55
log
@[Bug #70074]
Add depth limit support for signature printing
@
text
@d6 4
d197 1
d627 1
a627 1
        fun out (name,value) = MLWorks.IO.output (stream, name ^ " " ^ value ^ "\n")
@


1.54
log
@[Bug #30349]
Fix to avoid non-unit sequence warnings
@
text
@d6 4
d238 1
d268 1
a268 1
             maximum_str_depth, maximum_depth, float_precision,
d276 1
d342 1
a342 1
               maximum_str_depth, maximum_depth, float_precision,
d355 1
d561 1
@


1.53
log
@[Bug #20088]
Merging from MLWorks_11:
SML'96 should be SML'97
@
text
@d6 5
d667 1
a667 1
          | iterate f (a::b) = (f a ; iterate f b)
@


1.52
log
@[Bug #30136]
Removed early-mips-r4000 option.
@
text
@d6 4
d458 1
a458 1
    fun select_sml'96 user_options =
d500 1
a500 1
    fun is_sml'96 user_options =
@


1.52.2.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a5 4
 * Revision 1.52  1997/05/27  11:13:16  daveb
 * [Bug #30136]
 * Removed early-mips-r4000 option.
 *
@


1.52.1.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a5 4
 * Revision 1.52  1997/05/27  11:13:16  daveb
 * [Bug #30136]
 * Removed early-mips-r4000 option.
 *
@


1.51
log
@Renaming R4000 option
@
text
@d6 3
a203 1
      early_mips_r4000:                               bool ref,
d290 1
a290 1
	   opt_self_calls, local_functions, print_messages, early_mips_r4000,
a310 1
        early_mips_r4000             = ref early_mips_r4000,
d372 1
a372 1
              early_mips_r4000,mips_r4000,sparc_v7,
a391 1
         early_mips_r4000             = ref (!early_mips_r4000),
a563 1
         early_mips_r4000    = !(#early_mips_r4000 r),
@


1.51.1.1
log
@branched from 1.51
@
text
@a5 3
 * Revision 1.51  1997/03/25  11:25:38  matthew
 * Renaming R4000 option
 *
@


1.51.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a5 3
 * Revision 1.51.1.1  1997/05/12  10:35:50  hope
 * branched from 1.51
 *
@


1.51.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a5 3
 * Revision 1.51.1.1  1997/05/12  10:35:50  hope
 * branched from 1.51
 *
@


1.51.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a5 3
 * Revision 1.51.1.1  1997/05/12  10:35:50  hope
 * branched from 1.51
 *
@


1.51.1.1.1.2
log
@[Bug #20088]
Change sml'96 to sml'97.
@
text
@a5 3
 * Revision 1.51.1.1.1.1  1997/07/28  18:21:32  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
d460 1
a460 1
    fun select_sml'97 user_options =
d502 1
a502 1
    fun is_sml'97 user_options =
@


1.51.1.1.1.2.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a5 4
 * Revision 1.51.1.1.1.2  1997/08/08  17:15:16  daveb
 * [Bug #20088]
 * Change sml'96 to sml'97.
 *
@


1.50
log
@Adding architecture dependent options
@
text
@d6 3
d201 1
a202 1
      mips2:                                          bool ref,
d288 2
a289 2
	   opt_self_calls, local_functions, print_messages, mips_r4000,
           mips2, sparc_v7},
d309 1
a310 1
        mips2                        = ref mips2,
d371 1
a371 1
              mips_r4000,mips2,sparc_v7,
d391 1
a392 1
         mips2                        = ref (!mips2),
d564 1
a565 1
         mips2               = !(#mips2 r),
@


1.49
log
@Adding local_functions option
@
text
@d6 3
d198 3
d285 2
a286 1
	   opt_self_calls, local_functions, print_messages},
d306 3
d368 1
d388 3
d560 5
a564 1
	 print_messages      = !(#print_messages r)}
@


1.48
log
@[Bug #1728]
__integer becomes __int
@
text
@d6 4
d193 1
d279 1
a279 1
	   opt_self_calls, print_messages},
d297 1
d356 1
d375 1
d545 1
d599 1
d626 1
@


1.48.4.1
log
@branched from 1.48
@
text
@a5 4
 * Revision 1.48  1996/11/06  11:29:18  matthew
 * [Bug #1728]
 * __integer becomes __int
 *
@


1.48.3.1
log
@branched from 1.48
@
text
@a5 4
 * Revision 1.48  1996/11/06  11:29:18  matthew
 * [Bug #1728]
 * __integer becomes __int
 *
@


1.48.3.1.1.1
log
@branched from 1.48.3.1
@
text
@a5 3
 * Revision 1.48.3.1  1996/12/17  17:49:17  hope
 * branched from 1.48
 *
@


1.48.2.1
log
@branched from 1.48
@
text
@a5 4
 * Revision 1.48  1996/11/06  11:29:18  matthew
 * [Bug #1728]
 * __integer becomes __int
 *
@


1.48.1.1
log
@branched from 1.48
@
text
@a5 4
 * Revision 1.48  1996/11/06  11:29:18  matthew
 * [Bug #1728]
 * __integer becomes __int
 *
@


1.48.1.1.1.1
log
@branched from 1.48.1.1
@
text
@a5 3
 * Revision 1.48.1.1  1996/11/14  12:51:28  hope
 * branched from 1.48
 *
@


1.47
log
@[Bug #1605]
removing default_overloads flag.  Now subsumed by old_definition.
@
text
@d6 4
d166 1
a166 1
require "../basis/__integer";
@


1.47.2.1
log
@branched from 1.47
@
text
@a5 4
 * Revision 1.47  1996/09/23  12:01:30  andreww
 * [Bug #1605]
 * removing default_overloads flag.  Now subsumed by old_definition.
 *
@


1.47.1.1
log
@branched from 1.47
@
text
@a5 4
 * Revision 1.47  1996/09/23  12:01:30  andreww
 * [Bug #1605]
 * removing default_overloads flag.  Now subsumed by old_definition.
 *
@


1.46
log
@Add option to turn on/off compilation messages from intermake
@
text
@d6 3
a192 1
      default_overloads:                              bool ref,
d274 1
a274 1
           default_overloads, abstractions, old_definition},
a296 1
        default_overloads	     = ref default_overloads,
a352 1
	      default_overloads,
a372 1
	 default_overloads	      = ref (!default_overloads),
d554 1
a554 2
	 abstractions        = !(#abstractions r),
         default_overloads   = !(#default_overloads r)}
a593 1
        out ("default_overloads",write_bool (!(#default_overloads r)));
a619 1
          | "default_overloads" => (#default_overloads r) := get_bool value
@


1.46.1.1
log
@branched from 1.46
@
text
@a5 3
 * Revision 1.46  1996/07/18  17:26:29  jont
 * Add option to turn on/off compilation messages from intermake
 *
@


1.45
log
@Made is_debugging check that var_info is set.
@
text
@d6 3
d182 1
d268 1
a268 1
	   opt_self_calls},
d286 1
d345 1
d364 1
d533 2
a534 1
         opt_self_calls      = !(#optimize_self_tail_calls r)}
@


1.44
log
@Combined Local Variable and Debugging modes.
@
text
@d6 3
d490 3
a492 1
      get_user_context_option (#generate_interceptable_code, user_options)
@


1.43
log
@Renaming modes.
@
text
@d6 3
d455 2
a456 10
       set_user_context_option (#generate_debug_info, user_options))

    (* var_info depends on debugging, but this dependency must be enforced
       by the calling functions, becuase the GUI and _shell_structure
       do it differently.
     *)
    fun select_var_info (user_options, false) =
      (clear_user_context_option (#generate_variable_debug_info, user_options))
    |   select_var_info (user_options, true) =
      (set_user_context_option (#generate_variable_debug_info, user_options)) 
a487 4

    fun is_var_info user_options =
      is_debugging user_options andalso
      get_user_context_option (#generate_variable_debug_info, user_options)
@


1.42
log
@Added a comment or two.
@
text
@d6 3
d182 1
a182 3
      core_only:                                      bool ref,
      old_definition:		                      bool ref,
      functional:                                     bool ref}
d261 2
a262 2
           nj_signatures, weak_type_vars, fixity_specs, open_fixity, core_only,
           default_overloads, vector_literals, wildcard_warnings, functional, old_definition},
d264 1
a264 1
          {require_keyword, type_dynamic, abstractions},
d285 1
a285 3
        weak_type_vars	   	     = ref weak_type_vars,
        core_only		     = ref core_only,
        functional		     = ref functional},
d341 1
a341 3
              weak_type_vars,
              core_only,
              functional}, _)) =
d361 1
a361 3
	 weak_type_vars	   	      = ref (!weak_type_vars),
	 core_only		      = ref (!core_only),
	 functional		      = ref (!functional)},
d404 2
a405 4
    fun select_new_jersey user_options =
      (clear_user_context_option (#require_keyword, user_options);
       clear_user_context_option (#type_dynamic, user_options);
       set_user_context_option (#nj_op_in_datatype, user_options);
d413 2
a414 4
    fun select_harlequin user_options =
      (set_user_context_option (#require_keyword, user_options);
       set_user_context_option (#type_dynamic, user_options);
       clear_user_context_option (#nj_op_in_datatype, user_options);
d417 1
a417 1
       set_user_context_option (#abstractions, user_options);
d422 2
a423 4
    fun select_standard user_options =
      (clear_user_context_option (#require_keyword, user_options);
       clear_user_context_option (#type_dynamic, user_options);
       clear_user_context_option (#nj_op_in_datatype, user_options);
d429 1
a429 1
       clear_user_context_option (#old_definition, user_options))
d463 1
a463 3
    fun is_harlequin user_options =
      get_user_context_option (#require_keyword, user_options) andalso
      get_user_context_option (#type_dynamic, user_options) andalso
d469 1
a469 1
      get_user_context_option (#abstractions, user_options) andalso
d472 1
a472 3
    fun is_new_jersey user_options =
      not (get_user_context_option (#require_keyword, user_options)) andalso
      not (get_user_context_option (#type_dynamic, user_options)) andalso
d481 1
a481 3
    fun is_standard user_options =
      not (get_user_context_option (#require_keyword, user_options)) andalso
      not (get_user_context_option (#type_dynamic, user_options)) andalso
d488 1
a488 1
      not (get_user_context_option (#old_definition, user_options))
d551 2
a552 5
         default_overloads   = !(#default_overloads r),
         vector_literals     = false,
         wildcard_warnings   = false,
	 core_only 	     = !(#core_only r),
	 functional	     = !(#functional r)}
d557 1
a557 2
	 require_keyword    = !(#require_keyword r),
	 abstractions       = !(#abstractions r)}
d588 2
a589 2
        out ("nj_op_in_datatype",write_bool (!(#nj_op_in_datatype r)));
        out ("nj_signatures",write_bool (!(#nj_signatures r)));
d593 1
a593 3
        out ("weak_type_vars",write_bool (!(#weak_type_vars r)));
        out ("core_only",write_bool (!(#core_only r)));
        out ("functional",write_bool (!(#functional r)))
d615 2
a616 2
          | "nj_op_in_datatype" => (#nj_op_in_datatype r) := get_bool value
          | "nj_signatures" => (#nj_signatures r) := get_bool value
a620 2
          | "core_only" => (#core_only r) := get_bool value
          | "functional" => (#functional r) := get_bool value
@


1.41
log
@Added functions to set and clear particular user options, including modes.
@
text
@d6 3
d404 5
d465 4
@


1.40
log
@String functions explode, implode, chr and ord now only available from String
io functions and types
instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
now only available from MLWorks.IO
@
text
@d6 6
d145 1
d152 1
d365 145
@


1.39
log
@Removing MLWorks.Integer
@
text
@d6 3
d426 1
a426 1
        fun out (name,value) = output (stream, name ^ " " ^ value ^ "\n")
@


1.38
log
@Adding "old_definition" option
@
text
@d6 3
d135 2
d426 1
a426 1
        val write_int = MLWorks.Integer.makestring
@


1.37
log
@Adding facility to save to stream
@
text
@d6 3
a153 2
      string_inequalities:                            bool ref,
      infixr_assoc:                                   bool ref,
a154 1
      derived_redef:                                  bool ref,
a155 1
      topdec_semicolons:                              bool ref,
d161 1
d240 1
a240 1
          {string_inequalities, infixr_assoc, nj_op_in_datatype, derived_redef,
d242 1
a242 1
           default_overloads, vector_literals, wildcard_warnings, functional},
d244 1
a244 1
          {require_keyword, type_dynamic, abstractions, topdec_semicolons},
d259 1
a259 2
        string_inequalities	     = ref string_inequalities,
        infixr_assoc		     = ref infixr_assoc,
a260 1
        derived_redef		     = ref derived_redef,
a261 1
        topdec_semicolons	     = ref topdec_semicolons,
d316 10
a325 5
	      abstractions, string_inequalities, infixr_assoc,
	      nj_op_in_datatype, derived_redef, nj_signatures,
	      topdec_semicolons, fixity_specs, open_fixity,
	      require_keyword, type_dynamic,
	      default_overloads, weak_type_vars, core_only, functional}, _)) =
d339 1
a339 2
         string_inequalities	      = ref (!string_inequalities),
	 infixr_assoc		      = ref (!infixr_assoc),
a340 1
	 derived_redef		      = ref (!derived_redef),
a341 1
	 topdec_semicolons	      = ref (!topdec_semicolons),
d389 1
a389 2
	{string_inequalities = !(#string_inequalities r),
	 infixr_assoc        = !(#infixr_assoc r),
a390 1
	 derived_redef       = !(#derived_redef r),
d405 1
a405 2
	 abstractions       = !(#abstractions r),
         topdec_semicolons  = !(#topdec_semicolons r)}
d435 1
a435 2
        out ("string_inequalities",write_bool (!(#string_inequalities r)));
        out ("infixr_assoc",write_bool (!(#infixr_assoc r)));
a436 1
        out ("derived_redef",write_bool (!(#derived_redef r)));
a437 1
        out ("topdec_semicolons",write_bool (!(#topdec_semicolons r)));
d464 1
a464 2
          | "string_inequalities" => (#string_inequalities r) := get_bool value
          | "infixr_assoc" => (#infixr_assoc r) := get_bool value
a465 1
          | "derived_redef" => (#derived_redef r) := get_bool value
a466 1
          | "topdec_semicolons" => (#topdec_semicolons r) := get_bool value
@


1.36
log
@Removed no_execute.
@
text
@d6 3
a418 1
  end
d420 71
@


1.35
log
@Adding opt_handlers compiler option
@
text
@d6 3
a139 1
      no_execute:                                     bool ref,
d233 1
a233 1
          {generate_debug_info, debug_variables, generate_moduler, no_execute,
a247 1
        no_execute		     = ref no_execute,
d313 1
a313 1
	      generate_moduler, no_execute,
a325 1
	 no_execute		      = ref (!no_execute),
a367 1
	 no_execute          = !(#no_execute r),
@


1.34
log
@Added float_precision option to ValuePrinter options.
@
text
@d6 3
d139 1
d232 2
a233 1
          intercept, interrupt, opt_leaf_fns, opt_tail_calls, opt_self_calls},
d245 2
a246 2
        generate_moduler 	    = ref generate_moduler,
        no_execute		    = ref no_execute,
d248 1
d252 9
a260 9
        require_keyword   	    = ref require_keyword,
        type_dynamic		    = ref type_dynamic,
        abstractions		    = ref abstractions,
        string_inequalities	    = ref string_inequalities,
        infixr_assoc		    = ref infixr_assoc,
        nj_op_in_datatype	    = ref nj_op_in_datatype,
        derived_redef		    = ref derived_redef,
        nj_signatures	  	    = ref nj_signatures,
        topdec_semicolons	    = ref topdec_semicolons,
d263 4
a266 4
        default_overloads	    = ref default_overloads,
        weak_type_vars	   	    = ref weak_type_vars,
        core_only		    = ref core_only,
        functional		    = ref functional},
d313 1
d327 1
d370 1
@


1.33
log
@Divided user options into per-tool options and per-context options.
@
text
@d6 3
d164 1
d193 2
a194 2
             maximum_str_depth, maximum_depth, print_fn_details,
             print_exn_details, show_id_class, show_eq_info},
d202 1
d266 1
a266 1
               maximum_str_depth,maximum_depth,
d280 1
d349 1
@


1.32
log
@cout -s main/user_options.sml
Renameing nj_semicolons
@
text
@d6 4
a117 1
require "preferences";
a118 1
require "info";
d120 3
a122 5
functor UserOptions
  (structure Options: OPTIONS
   structure Preferences: PREFERENCES
   structure Info: INFO)
  : USER_OPTIONS =
d125 27
a151 1
  type preferences = Preferences.preferences
d153 2
a154 2
  datatype user_options = USER_OPTIONS of
   ({ show_fn_details:                               bool ref,
a160 9
      generate_interceptable_code:                   bool ref,
      generate_debug_info:                           bool ref,
      generate_variable_debug_info:                  bool ref,
      generate_moduler:                              bool ref,
      no_execute:		                     bool ref,
      generate_interruptable_code:                   bool ref,
      optimize_leaf_fns:                             bool ref,
      optimize_tail_calls:                           bool ref,
      optimize_self_tail_calls:                      bool ref,
d174 44
a217 31
      require_keyword:		                     bool ref,
      type_dynamic:		                     bool ref,
      abstractions:		                     bool ref,
      string_inequalities:	                     bool ref,
      infixr_assoc:		                     bool ref,
      nj_op_in_datatype:	                     bool ref,
      derived_redef:		                     bool ref,
      nj_signatures:		                     bool ref,
      topdec_semicolons:		             bool ref,
      fixity_specs:                                  bool ref,
      open_fixity:                                   bool ref,
      default_overloads:			     bool ref,
      weak_type_vars:		                     bool ref,
      core_only:		                     bool ref,
      functional:		                     bool ref,
      editor:			                     string ref,
      x_editor_command:		                     string ref,
      xterm_editor_command:	                     string ref,
      history_length:		                     int ref,
      max_num_errors:			             int ref,
      window_debugger:		                     bool ref,
      auto_output_window:                            bool ref,
      completion_menu:                               bool ref,
      full_menus:                                    bool ref,
      output_lambda:		                     bool ref,
      set_selection:		                     bool ref,
      sense_selection:		                     bool ref,
      set_context:		                     bool ref,
      sense_context:		                     bool ref
    } *
    (unit -> unit) list ref)
d219 1
a219 2
    (* These references can be set by the user.  *)
  fun make_user_options
d221 49
a269 137
     {listing_options = Options.LISTINGOPTIONS {show_absyn,
                                                show_lambda,
                                                show_match,
                                                show_opt_lambda,
                                                show_environ,
                                                show_mir,
                                                show_opt_mir,
                                                show_mach,
                                                output_lambda},
     compiler_options = Options.COMPILEROPTIONS {generate_debug_info,
                                                 debug_variables,
                                                 generate_moduler,
						 no_execute,
                                                 intercept,
						 interrupt,
                                                 opt_leaf_fns,
                                                 opt_tail_calls,
                                                 opt_self_calls},
     print_options = Options.PRINTOPTIONS {maximum_seq_size,
                                           maximum_string_size,
                                           maximum_ref_depth,
                                           maximum_str_depth,
                                           maximum_depth,
                                           print_fn_details,
                                           print_exn_details,
                                           show_id_class,
                                           show_eq_info},
     compat_options = Options.COMPATOPTIONS {string_inequalities,
					     infixr_assoc,
					     nj_op_in_datatype,
					     derived_redef,
					     nj_signatures,
					     weak_type_vars,
                                             fixity_specs,
                                             open_fixity,
                        		     default_overloads,
                        		     vector_literals,
                        		     wildcard_warnings,
					     core_only,
					     functional},
     extension_options = Options.EXTENSIONOPTIONS {require_keyword,
					     	   type_dynamic,
						   abstractions,
                                                   topdec_semicolons}},
    Preferences.PREFERENCES
    {editor_options = Preferences.EDITOR_OPTIONS{editor,
						 x_editor_command,
						 xterm_editor_command},
     environment_options = Preferences.ENVIRONMENT_OPTIONS {window_debugger,
                    					    auto_output_window,
                                                            history_length,
                                                            completion_menu,
						            full_menus}}) =
    USER_OPTIONS({
                  maximum_seq_size         = ref maximum_seq_size,
                  maximum_string_size      = ref maximum_string_size,
                  maximum_ref_depth        = ref maximum_ref_depth,
                  maximum_str_depth        = ref maximum_str_depth,
                  maximum_depth            = ref maximum_depth,
                  show_fn_details          = ref print_fn_details,
                  show_exn_details         = ref print_exn_details,
                  generate_interceptable_code = ref intercept,
                  generate_debug_info      = ref generate_debug_info,
                  generate_variable_debug_info      = ref debug_variables,
                  generate_moduler = ref generate_moduler,
		  no_execute		   = ref no_execute,
		  generate_interruptable_code = ref interrupt,
                  optimize_leaf_fns        = ref opt_leaf_fns,
                  optimize_tail_calls      = ref opt_tail_calls,
                  optimize_self_tail_calls = ref opt_self_calls,
                  show_id_class            = ref show_id_class,
                  show_eq_info             = ref show_eq_info,
                  show_absyn               = ref show_absyn,
                  show_match               = ref show_match,
                  show_lambda              = ref show_lambda,
                  show_environ             = ref show_environ,
                  show_opt_lambda          = ref show_opt_lambda,
                  show_mir                 = ref show_mir,
                  show_opt_mir             = ref show_opt_mir,
                  show_mach                = ref show_mach,
                  show_debug_info          = ref false,
                  show_timings             = ref false,
                  show_print_timings       = ref false,
		  require_keyword   	   = ref require_keyword,
		  type_dynamic		   = ref type_dynamic,
		  abstractions		   = ref abstractions,
                  string_inequalities	   = ref string_inequalities,
		  infixr_assoc		   = ref infixr_assoc,
		  nj_op_in_datatype	   = ref nj_op_in_datatype,
		  derived_redef		   = ref derived_redef,
		  nj_signatures	  	   = ref nj_signatures,
		  topdec_semicolons	   = ref topdec_semicolons,
                  fixity_specs             = ref fixity_specs,
                  open_fixity              = ref open_fixity,
		  default_overloads	   = ref default_overloads,
		  weak_type_vars	   = ref weak_type_vars,
		  core_only		   = ref core_only,
		  functional		   = ref functional,
		  editor		   = editor,
		  x_editor_command	   = x_editor_command,
		  xterm_editor_command	   = xterm_editor_command,
		  history_length	   = history_length,
		  max_num_errors	   = Info.max_num_errors,
		  window_debugger	   = window_debugger,
                  auto_output_window       = auto_output_window,
                  completion_menu          = completion_menu,
                  full_menus               = full_menus,
                  output_lambda		   = ref output_lambda,
                  set_context		   = ref true,
                  sense_context	  	   = ref true,
                  set_selection		   = ref true,
                  sense_selection	   = ref true
		  },
    ref nil)

    fun copy (USER_OPTIONS
	       ({maximum_seq_size, maximum_string_size, maximum_ref_depth,
                 maximum_str_depth,maximum_depth,
		 show_fn_details, show_exn_details, generate_debug_info, 
		 generate_interceptable_code,
		 generate_interruptable_code,  no_execute, optimize_leaf_fns,
		 optimize_tail_calls, optimize_self_tail_calls,
		 show_id_class, show_eq_info, show_absyn, show_match,
		 show_lambda, show_environ, show_opt_lambda, show_mir,
		 show_opt_mir, show_mach, show_debug_info, show_timings,
		 show_print_timings, require_keyword, type_dynamic,
		 abstractions, string_inequalities, infixr_assoc,
		 nj_op_in_datatype, derived_redef, nj_signatures, topdec_semicolons,
                 fixity_specs,open_fixity, default_overloads,
		 weak_type_vars, core_only, functional,
		 editor, x_editor_command, xterm_editor_command,
		 history_length, max_num_errors, window_debugger, generate_variable_debug_info, 
                 generate_moduler,full_menus,
                 auto_output_window,completion_menu,output_lambda,
		 set_selection, sense_selection, set_context, sense_context},
		 _)) =
      USER_OPTIONS
a276 9
         generate_interceptable_code = ref (!generate_interceptable_code),
         generate_debug_info      = ref (!generate_debug_info),
         generate_variable_debug_info      = ref (!generate_variable_debug_info),
         generate_moduler = ref(!generate_moduler),
	 no_execute		  = ref (!no_execute),
         generate_interruptable_code = ref (!generate_interruptable_code),
         optimize_leaf_fns        = ref (!optimize_leaf_fns),
         optimize_tail_calls      = ref (!optimize_tail_calls),
         optimize_self_tail_calls = ref (!optimize_self_tail_calls),
a289 25
	 require_keyword   	  = ref (!require_keyword),
	 type_dynamic		  = ref (!type_dynamic),
	 abstractions		  = ref (!abstractions),
         string_inequalities	  = ref (!string_inequalities),
	 infixr_assoc		  = ref (!infixr_assoc),
	 nj_op_in_datatype	  = ref (!nj_op_in_datatype),
	 derived_redef		  = ref (!derived_redef),
	 nj_signatures	  	  = ref (!nj_signatures),
	 topdec_semicolons	  = ref (!topdec_semicolons),
         fixity_specs             = ref (!fixity_specs),
         open_fixity              = ref (!open_fixity),
	 default_overloads	  = ref (!default_overloads),
	 weak_type_vars	   	  = ref (!weak_type_vars),
	 core_only		  = ref (!core_only),
	 functional		  = ref (!functional),
	 editor		   	  = editor,			(* global *)
	 x_editor_command   	  = x_editor_command,		(* global *)
	 xterm_editor_command  	  = xterm_editor_command,	(* global *)
	 history_length	   	  = history_length,             (* global *)
	 max_num_errors		  = max_num_errors,             (* global *)
	 window_debugger	  = window_debugger,    	(* global *) 
         auto_output_window       = auto_output_window,		(* global *)
         completion_menu          = completion_menu,		(* global *)
         full_menus          	  = full_menus,			(* global *)
         output_lambda		  = ref (!output_lambda),
d294 39
a332 1
       ref nil)
d334 1
a334 1
    fun new_print_options (USER_OPTIONS (user_options,_)) =
d336 9
a344 9
	{print_fn_details    = !(#show_fn_details user_options),
         print_exn_details   = !(#show_exn_details user_options),
         maximum_seq_size    = !(#maximum_seq_size user_options),
         maximum_string_size = !(#maximum_string_size user_options),
         maximum_ref_depth   = !(#maximum_ref_depth user_options),
         maximum_str_depth   = !(#maximum_str_depth user_options),
         maximum_depth       = !(#maximum_depth user_options),
         show_eq_info        = !(#show_eq_info user_options),
         show_id_class       = !(#show_id_class user_options) }
d347 1
a347 1
    fun new_compiler_options (USER_OPTIONS (user_options,_)) =
d349 9
a357 9
	{generate_debug_info        = !(#generate_debug_info user_options),
         debug_variables          = !(#generate_variable_debug_info user_options),
         generate_moduler = !(#generate_moduler user_options),
         intercept      = !(#generate_interceptable_code user_options),
	 no_execute     = !(#no_execute user_options),
	 interrupt      = !(#generate_interruptable_code user_options),
         opt_leaf_fns   = !(#optimize_leaf_fns user_options),
         opt_tail_calls = !(#optimize_tail_calls user_options),
         opt_self_calls = !(#optimize_self_tail_calls user_options)}
d359 1
a359 1
    fun new_listing_options (USER_OPTIONS (user_options,_)) =
d361 8
a368 9
	{show_absyn      = !(#show_absyn user_options),
         show_lambda     = !(#show_lambda user_options),
         show_match      = !(#show_match user_options),
         show_opt_lambda = !(#show_opt_lambda user_options),
         show_environ    = !(#show_environ user_options),
         show_mir        = !(#show_mir user_options),
         show_opt_mir    = !(#show_opt_mir user_options),
         show_mach       = !(#show_mach user_options),
         output_lambda	 = !(#output_lambda user_options)}
d370 1
a370 1
    fun new_compat_options (USER_OPTIONS (user_options,_)) =
d372 13
a384 13
	{string_inequalities = !(#string_inequalities user_options),
	 infixr_assoc   = !(#infixr_assoc user_options),
	 nj_op_in_datatype = !(#nj_op_in_datatype user_options),
	 derived_redef  = !(#derived_redef user_options),
	 nj_signatures  = !(#nj_signatures user_options),
	 weak_type_vars = !(#weak_type_vars user_options),
         fixity_specs   = !(#fixity_specs user_options),
         open_fixity    = !(#open_fixity user_options),
         default_overloads = !(#default_overloads user_options),
         vector_literals   = false,
         wildcard_warnings = false,
	 core_only 	= !(#core_only user_options),
	 functional	= !(#functional user_options)}
d386 1
a386 1
    fun new_extension_options (USER_OPTIONS (user_options,_)) =
d388 4
a391 4
	{type_dynamic    = !(#type_dynamic user_options),
	 require_keyword = !(#require_keyword user_options),
	 abstractions    = !(#abstractions user_options),
         topdec_semicolons  = !(#topdec_semicolons user_options)}
d393 1
a393 2
      
    fun new_options user_options =
d395 5
a399 25
        {listing_options   = new_listing_options user_options,
         compiler_options  = new_compiler_options user_options,
         print_options     = new_print_options user_options,
         extension_options = new_extension_options user_options,
         compat_options    = new_compat_options user_options
         }

    fun new_editor_options (USER_OPTIONS (user_options,_)) =
      Preferences.EDITOR_OPTIONS
        {editor = #editor user_options,
	 x_editor_command = #x_editor_command user_options,
	 xterm_editor_command = #xterm_editor_command user_options}

    fun new_environment_options (USER_OPTIONS (user_options,_)) =
      Preferences.ENVIRONMENT_OPTIONS
      {history_length = #history_length user_options,
       window_debugger = #window_debugger user_options,
       auto_output_window = #auto_output_window user_options,
       completion_menu = #completion_menu user_options,
       full_menus = #full_menus user_options}

    fun new_preferences user_options =
      Preferences.PREFERENCES
        {editor_options    = new_editor_options user_options,
         environment_options = new_environment_options user_options
@


1.31
log
@Removing debug_polyvariables option
@
text
@d6 3
d165 1
a165 1
      nj_semicolons:		                     bool ref,
a224 1
					     nj_semicolons,
d234 2
a235 1
						   abstractions}},
d283 1
a283 1
		  nj_semicolons	  	   = ref nj_semicolons,
d319 1
a319 1
		 nj_op_in_datatype, derived_redef, nj_signatures, nj_semicolons,
d366 1
a366 1
	 nj_semicolons	  	  = ref (!nj_semicolons),
a433 1
	 nj_semicolons  = !(#nj_semicolons user_options),
d446 3
a448 1
	 abstractions    = !(#abstractions user_options)}
@


1.30
log
@Added set_context and sense_context.
@
text
@d6 3
a134 3
      generate_polyvariable_debug_info:              bool ref,
      generate_stepper:                              bool ref,
      generate_stepper_specific:                     string ref,
a199 3
                                                 debug_polyvariables,
                                                 generate_stepper,
                                                 generate_stepper_specific,
a252 3
                  generate_polyvariable_debug_info  = ref debug_polyvariables,
                  generate_stepper = ref generate_stepper,
                  generate_stepper_specific = ref generate_stepper_specific,
d321 1
a321 2
                 generate_polyvariable_debug_info, generate_stepper,
                 generate_stepper_specific, generate_moduler,full_menus,
a335 3
         generate_polyvariable_debug_info      = ref (!generate_polyvariable_debug_info),
         generate_stepper = ref(!generate_stepper),
         generate_stepper_specific = ref(!generate_stepper_specific),
a402 3
         debug_polyvariables          = !(#generate_polyvariable_debug_info user_options),
         generate_stepper = !(#generate_stepper user_options),
         generate_stepper_specific = !(#generate_stepper_specific user_options),
@


1.29
log
@Added sensitivity options.
@
text
@d6 3
d180 3
a182 1
      sense_selection:		                     bool ref
d303 2
d330 2
a331 1
		 set_selection, sense_selection},_)) =
d390 2
@


1.28
log
@Change option debug to generate_debug_info
@
text
@d6 3
d175 3
a177 1
      output_lambda:		                     bool ref
d297 3
a299 1
                  output_lambda		   = ref output_lambda
d322 2
a323 1
                 auto_output_window,completion_menu,output_lambda},_)) =
d381 3
a383 1
         output_lambda		  = ref (!output_lambda)},
@


1.27
log
@Moved preferences to separate structure.
@
text
@d6 3
d188 1
a188 1
     compiler_options = Options.COMPILEROPTIONS {debug,
d244 1
a244 1
                  generate_debug_info      = ref debug,
d391 1
a391 1
	{debug          = !(#generate_debug_info user_options),
@


1.26
log
@Added full_menus option.
@
text
@d99 1
d103 5
a107 3
functor UserOptions (structure Options: OPTIONS
		     structure Info:    INFO
                       ): USER_OPTIONS =
d110 1
d161 2
d222 10
a231 7
						   abstractions},
     editor_options = Options.EDITOR_OPTIONS{editor},
     environment_options = Options.ENVIRONMENT_OPTIONS{window_debugger,
                                                       auto_output_window,
                                                       history_length,
                                                       completion_menu,
						       full_menus}}) =
d281 2
d307 2
a308 1
		 weak_type_vars, core_only, functional, editor,
d361 9
a369 7
	 editor		   	  = editor,		(* global *)
	 history_length	   	  = history_length,
	 max_num_errors		  = max_num_errors,
	 window_debugger	  = window_debugger,    (* global *) 
         auto_output_window       = auto_output_window,	(* global *)
         completion_menu          = completion_menu,	(* global *)
         full_menus          	  = full_menus,		(* global *)
d436 9
d446 4
a449 2
      Options.EDITOR_OPTIONS
        {editor = #editor user_options}
d452 1
a452 1
      Options.ENVIRONMENT_OPTIONS
d459 3
a461 8
    fun new_options user_options =
      Options.OPTIONS
        {listing_options   = new_listing_options user_options,
         compiler_options  = new_compiler_options user_options,
         print_options     = new_print_options user_options,
         extension_options = new_extension_options user_options,
         compat_options    = new_compat_options user_options,
         editor_options    = new_editor_options user_options,
@


1.25
log
@Added default_overloads, vector_literals, and wildcard_warnings.
@
text
@d6 3
d162 1
d221 2
a222 1
                                                       completion_menu}}) =
d277 1
d299 1
a299 1
                 generate_stepper_specific, generate_moduler,
d355 1
d431 2
a432 1
       completion_menu = #completion_menu user_options}
@


1.24
log
@Step and Modules Debugger compiler options.
@
text
@d6 3
d149 1
d205 3
d262 1
d289 1
a289 1
                 fixity_specs,open_fixity,
d339 1
d403 3
@


1.23
log
@Added maximum_str_depth to options.
@
text
@d6 3
d103 53
a155 50
   ({ show_fn_details:                      bool ref,
      show_exn_details:                     bool ref,
      maximum_seq_size:                     int ref,
      maximum_string_size:                  int ref,
      maximum_depth:                        int ref,
      maximum_ref_depth:                    int ref,
      maximum_str_depth:                    int ref,
      generate_interceptable_code:          bool ref,
      generate_debug_info:                  bool ref,
      generate_variable_debug_info:         bool ref,
      generate_polyvariable_debug_info:     bool ref,
      no_execute:		            bool ref,
      generate_interruptable_code:          bool ref,
      optimize_leaf_fns:                    bool ref,
      optimize_tail_calls:                  bool ref,
      optimize_self_tail_calls:             bool ref,
      show_id_class:                        bool ref,
      show_eq_info:                         bool ref,
      show_absyn:                           bool ref,
      show_match:                           bool ref,
      show_environ:                         bool ref,
      show_lambda:                          bool ref,
      show_opt_lambda:                      bool ref,
      show_mir:                             bool ref,
      show_opt_mir:                         bool ref,
      show_mach:                            bool ref,
      show_debug_info:                      bool ref,
      show_timings:                         bool ref,
      show_print_timings:                   bool ref,
      require_keyword:		            bool ref,
      type_dynamic:		            bool ref,
      abstractions:		            bool ref,
      string_inequalities:	            bool ref,
      infixr_assoc:		            bool ref,
      nj_op_in_datatype:	            bool ref,
      derived_redef:		            bool ref,
      nj_signatures:		            bool ref,
      nj_semicolons:		            bool ref,
      fixity_specs:                         bool ref,
      open_fixity:                          bool ref,
      weak_type_vars:		            bool ref,
      core_only:		            bool ref,
      functional:		            bool ref,
      editor:			            string ref,
      history_length:		            int ref,
      max_num_errors:			    int ref,
      window_debugger:		            bool ref,
      auto_output_window:                   bool ref,
      completion_menu:                      bool ref,
      output_lambda:		            bool ref
d174 3
d223 3
d284 2
a285 1
                 generate_polyvariable_debug_info,
d299 3
d361 3
@


1.22
log
@Added max_num_errors
@
text
@d6 3
d106 1
d177 1
d206 1
d258 1
a258 1
		 maximum_depth,
d278 1
d334 1
@


1.21
log
@Added interrupt option
@
text
@d6 3
d86 1
a86 1
require "../main/options";
d88 1
d91 1
d141 1
d242 1
d265 1
a265 1
		 history_length, window_debugger, generate_variable_debug_info, 
d313 1
@


1.20
log
@Merged in bug fix.
@
text
@d6 3
d103 1
d160 1
d203 1
d247 2
a248 1
		 generate_interceptable_code, no_execute, optimize_leaf_fns,
d273 1
d331 1
@


1.19
log
@New compiler option debug_polyvariables for polymorphic debugger.
@
text
@d6 12
d91 2
a92 1
      maximum_list_size:                    int ref,
d159 2
a160 1
     print_options = Options.PRINTOPTIONS {maximum_list_size,
d187 2
a188 1
                  maximum_list_size        = ref maximum_list_size,
d238 2
a239 1
	       ({maximum_list_size, maximum_ref_depth, maximum_depth,
d255 2
a256 1
       ({maximum_list_size        = ref (!maximum_list_size),
d306 8
a313 7
	{print_fn_details  = !(#show_fn_details user_options),
         print_exn_details = !(#show_exn_details user_options),
         maximum_list_size = !(#maximum_list_size user_options),
         maximum_ref_depth = !(#maximum_ref_depth user_options),
         maximum_depth     = !(#maximum_depth user_options),
         show_eq_info      = !(#show_eq_info user_options),
         show_id_class     = !(#show_id_class user_options) }
@


1.18
log
@Added output_lambda option.
@
text
@d6 3
d77 46
a122 45
    ({show_fn_details:	        bool ref,
      show_exn_details:	        bool ref,
      maximum_list_size:        int ref,
      maximum_depth:	        int ref,
      maximum_ref_depth:        int ref,
      generate_interceptable_code: bool ref,
      generate_debug_info:      bool ref,
      generate_variable_debug_info:      bool ref,
      no_execute:		bool ref,
      optimize_leaf_fns:        bool ref,
      optimize_tail_calls:      bool ref,
      optimize_self_tail_calls: bool ref,
      show_id_class:	        bool ref,
      show_eq_info:	        bool ref,
      show_absyn:	        bool ref,
      show_match:	        bool ref,
      show_environ:	        bool ref,
      show_lambda:	        bool ref,
      show_opt_lambda:	        bool ref,
      show_mir:	  	        bool ref,
      show_opt_mir:	        bool ref,
      show_mach:		bool ref,
      show_debug_info:	        bool ref,
      show_timings:	        bool ref,
      show_print_timings:       bool ref,
      require_keyword:		bool ref,
      type_dynamic:		bool ref,
      abstractions:             bool ref,
      string_inequalities:	bool ref,
      infixr_assoc:		bool ref,
      nj_op_in_datatype:	bool ref,
      derived_redef:		bool ref,
      nj_signatures:		bool ref,
      nj_semicolons:		bool ref,
      fixity_specs:             bool ref,
      open_fixity:              bool ref,
      weak_type_vars:		bool ref,
      core_only:                bool ref,
      functional:               bool ref,
      editor:			string ref,
      history_length:		int ref,
      window_debugger:		bool ref,
      auto_output_window:       bool ref,
      completion_menu:          bool ref,
      output_lambda:		bool ref
d140 1
d181 1
d235 2
a236 1
		 history_length, window_debugger, generate_variable_debug_info,
d247 1
d302 1
@


1.18.1.1
log
@Fork for bug fixing
@
text
@a5 3
 *  Revision 1.18  1993/08/23  14:14:54  richard
 *  Added output_lambda option.
 *
@


1.18.1.2
log
@Changed print options.
@
text
@a5 3
 *  Revision 1.18.1.1  1993/08/23  14:14:54  jont
 *  Fork for bug fixing
 *
d79 1
a79 2
      maximum_seq_size:         int ref,
      maximum_string_size:      int ref,
d144 1
a144 2
     print_options = Options.PRINTOPTIONS {maximum_seq_size,
                                           maximum_string_size,
d171 1
a171 2
                  maximum_seq_size         = ref maximum_seq_size,
                  maximum_string_size      = ref maximum_string_size,
d220 1
a220 2
	       ({maximum_seq_size, maximum_string_size, maximum_ref_depth,
		 maximum_depth,
d235 1
a235 2
       ({maximum_seq_size         = ref (!maximum_seq_size),
         maximum_string_size      = ref (!maximum_string_size),
d284 7
a290 8
	{print_fn_details    = !(#show_fn_details user_options),
         print_exn_details   = !(#show_exn_details user_options),
         maximum_seq_size    = !(#maximum_seq_size user_options),
         maximum_string_size = !(#maximum_string_size user_options),
         maximum_ref_depth   = !(#maximum_ref_depth user_options),
         maximum_depth       = !(#maximum_depth user_options),
         show_eq_info        = !(#show_eq_info user_options),
         show_id_class       = !(#show_id_class user_options) }
@


1.17
log
@Added update function list component to user_options type
@
text
@d6 3
d117 2
a118 1
      completion_menu:          bool ref
d132 2
a133 1
                                                show_mach},
d211 2
a212 1
                  completion_menu          = completion_menu
d230 1
a230 1
                 auto_output_window,completion_menu},_)) =
d275 2
a276 1
         completion_menu          = completion_menu},	(* global *)
d309 2
a310 1
         show_mach       = !(#show_mach user_options) }
@


1.16
log
@Added more environment preferences
@
text
@d6 3
d71 1
a71 1
    { show_fn_details:	        bool ref,
d115 2
a116 1
    }
d162 1
a162 1
    USER_OPTIONS {
d207 2
a208 1
		  }
d211 1
a211 1
		{maximum_list_size, maximum_ref_depth, maximum_depth,
d224 1
a224 1
                 auto_output_window,completion_menu}) =
d226 1
a226 1
	{maximum_list_size        = ref (!maximum_list_size),
d269 2
a270 1
         completion_menu          = completion_menu}	(* global *)
d272 1
a272 1
    fun new_print_options (USER_OPTIONS user_options) =
d283 1
a283 1
    fun new_compiler_options (USER_OPTIONS user_options) =
d293 1
a293 1
    fun new_listing_options (USER_OPTIONS user_options) =
d304 1
a304 1
    fun new_compat_options (USER_OPTIONS user_options) =
d318 1
a318 1
    fun new_extension_options (USER_OPTIONS user_options) =
d324 1
a324 1
    fun new_editor_options (USER_OPTIONS user_options) =
d328 1
a328 1
    fun new_environment_options (USER_OPTIONS user_options) =
d335 1
a335 1
    fun new_options (user_options) =
@


1.15
log
@new compiler option debug_variables for local and closure variable
inspection in the debugger.
@
text
@d6 4
d105 2
d110 2
a111 2
      core_only:                bool ref,
      functional:               bool ref
d154 4
a157 1
     environment_options = Options.ENVIRONMENT_OPTIONS{window_debugger}}) =
d199 4
a202 2
		  history_length	   = ref 25,
		  window_debugger	   = window_debugger
d218 2
a219 1
		 history_length, window_debugger, generate_variable_debug_info}) =
d261 4
a264 2
	 history_length	   	  = ref (!history_length),
	 window_debugger	  = window_debugger }	(* global *)
d324 4
a327 2
      {window_debugger = #window_debugger user_options}

@


1.14
log
@Fixed typo
@
text
@d6 3
d71 1
d120 1
d157 1
d207 1
a207 1
		 history_length, window_debugger}) =
d216 1
d266 1
@


1.13
log
@Added open fixity and fixity spec options
@
text
@d6 3
d237 1
a237 1
         open_fixity              = ref (|open_fixity),
@


1.12
log
@environment_options = new_environment_options user_options

Added environment options
@
text
@d6 5
d91 2
d132 2
d175 2
d196 1
d233 2
d281 3
a283 1
	 nj_semicolons     = !(#nj_semicolons user_options),
@


1.11
log
@Rearranged some of the options.
@
text
@d6 3
d130 2
a131 1
     editor_options = Options.EDITOR_OPTIONS{editor}}) =
d171 1
a171 1
		  window_debugger	   = ref true
d281 5
d293 3
a295 1
         editor_options    = new_editor_options user_options}
@


1.10
log
@Added options to control parse treatment of New Jersey style weak type variables
@
text
@d6 3
a53 1
      maximum_shape_depth:      int ref,
d58 3
a60 4
      show_debug_warnings:      bool ref,
      optimise_leaf_fns:        bool ref,
      optimise_tail_calls:      bool ref,
      optimise_self_tail_calls: bool ref,
d76 1
d79 1
a79 1
      op_in_datatype:		bool ref,
d81 2
a82 3
      nj_include:		bool ref,
      nj_local_open:		bool ref,
      semicolons:		bool ref,
d84 5
a88 1
      editor:			string ref
a104 1
                                                 debug_warnings,
a109 1
                                           maximum_shape_depth,
d117 1
a117 1
					     op_in_datatype,
d119 1
a119 2
					     nj_include,
					     nj_local_open,
d121 3
a123 1
					     semicolons},
d125 2
a126 1
					     	   type_dynamic},
a130 1
                  maximum_shape_depth      = ref maximum_shape_depth,
d137 3
a139 4
                  show_debug_warnings      = ref debug_warnings,
                  optimise_leaf_fns        = ref opt_leaf_fns,
                  optimise_tail_calls      = ref opt_tail_calls,
                  optimise_self_tail_calls = ref opt_self_calls,
d155 1
d158 1
a158 1
		  op_in_datatype	   = ref op_in_datatype,
d160 2
a161 3
		  nj_include	  	   = ref nj_include,
		  nj_local_open	  	   = ref nj_local_open,
		  semicolons	  	   = ref semicolons,
d163 5
a167 1
		  editor		   = ref editor
d170 54
d225 8
a232 10
      Options.PRINTOPTIONS {
                             print_fn_details = !(#show_fn_details user_options),
                             print_exn_details = !(#show_exn_details user_options),
                             maximum_list_size = !(#maximum_list_size user_options),
                             maximum_ref_depth = !(#maximum_ref_depth user_options),
                             maximum_shape_depth = !(#maximum_shape_depth user_options),
                             maximum_depth = !(#maximum_depth user_options),
                             show_eq_info = !(#show_eq_info user_options),
                             show_id_class = !(#show_id_class user_options)
                             }
d236 7
a242 9
      Options.COMPILEROPTIONS {
                               debug = !(#generate_debug_info user_options),
                               intercept = !(#generate_interceptable_code user_options),
			       no_execute = !(#no_execute user_options),
                               debug_warnings = !(#show_debug_warnings user_options),
                               opt_leaf_fns = !(#optimise_leaf_fns user_options),
                               opt_tail_calls = !(#optimise_tail_calls user_options),
                               opt_self_calls = !(#optimise_self_tail_calls user_options)
                               }
d245 9
a253 10
      Options.LISTINGOPTIONS {
                              show_absyn = !(#show_absyn user_options),
                              show_lambda = !(#show_lambda user_options),
                              show_match = !(#show_match user_options),
                              show_opt_lambda = !(#show_opt_lambda user_options),
                              show_environ = !(#show_environ user_options),
                              show_mir = !(#show_mir user_options),
                              show_opt_mir = !(#show_opt_mir user_options),
                              show_mach = !(#show_mach user_options)
                              }
d256 10
a265 9
      Options.COMPATOPTIONS{string_inequalities = !(#string_inequalities user_options),
			    infixr_assoc = !(#infixr_assoc user_options),
			    op_in_datatype = !(#op_in_datatype user_options),
			    derived_redef = !(#derived_redef user_options),
			    nj_include = !(#nj_include user_options),
			    nj_local_open = !(#nj_local_open user_options),
			    weak_type_vars = !(#weak_type_vars user_options),
			    semicolons = !(#semicolons user_options)
			    }
d269 3
a271 2
	{type_dynamic = !(#type_dynamic user_options),
	 require_keyword = !(#require_keyword user_options)}
d275 1
a275 1
        {editor = !(#editor user_options)}
d279 6
a284 6
      {listing_options = new_listing_options user_options,
       compiler_options = new_compiler_options user_options,
       print_options = new_print_options user_options,
       extension_options = new_extension_options user_options,
       compat_options = new_compat_options user_options,
       editor_options = new_editor_options user_options}
@


1.9
log
@Added option to control make -n type facility
@
text
@d6 3
d82 1
d118 1
d159 1
d206 1
d228 1
@


1.8
log
@Unified profiling and tracing options into `intercept'.
Removed poly_makestring option.
@
text
@d6 4
d52 1
d94 1
d127 1
d174 1
@


1.7
log
@The editor interface is now implemented directly through
Unix system calls, and is not part of the pervasive library
or the runtime system.
@
text
@d6 5
d46 1
a46 2
      generate_tracing_code:    bool ref,
      generate_profiling_code:  bool ref,
a67 1
      poly_makestring:		bool ref,
d89 1
a89 2
                                                 profile,
                                                 trace,
a102 1
					     poly_makestring,
d119 1
a119 2
                  generate_tracing_code    = ref trace,
                  generate_profiling_code  = ref profile,
a140 1
		  poly_makestring	   = ref poly_makestring,
d166 1
a166 2
                               profile = !(#generate_profiling_code user_options),
                               trace = !(#generate_tracing_code user_options),
a186 1
			    poly_makestring = !(#poly_makestring user_options),
@


1.6
log
@Added editor options
@
text
@d6 18
a23 16
Revision 1.5  1993/04/01  13:52:41  jont
Added compatibility options

Revision 1.4  1993/03/23  16:43:17  daveb
Added require_keyword and type_dynamic options.

Revision 1.3  1993/03/10  14:37:07  matthew
Added compat options
Changed options to be record not tuple

Revision 1.2  1993/03/05  12:01:23  matthew
Options & Info changes

Revision 1.1  1993/03/01  16:11:55  daveb
Initial revision

d71 1
a71 1
      editor:			MLWorks.Editor.Editor ref
@


1.5
log
@Added compatibility options
@
text
@d6 3
d68 2
a69 1
      semicolons:		bool ref
d107 2
a108 1
					     	   type_dynamic}}) =
d145 2
a146 1
		  semicolons	  	   = ref semicolons 
d201 4
d211 2
a212 1
       compat_options = new_compat_options user_options}
@


1.4
log
@Added require_keyword and type_dynamic options.
@
text
@d6 3
d57 9
a65 1
      type_dynamic:		bool ref
d94 8
a101 1
     compat_options = Options.COMPATOPTIONS {...},
d132 10
a141 2
		  type_dynamic		   = ref type_dynamic
                  }
d180 9
a188 1
      Options.COMPATOPTIONS {}
@


1.3
log
@Added compat options
Changed options to be record not tuple
@
text
@d6 4
d52 3
a54 1
      show_print_timings:       bool ref
d83 3
a85 1
     compat_options = Options.COMPATOPTIONS {dummy}}) =
d112 3
a114 1
                  show_print_timings       = ref false
d154 6
a159 1
      Options.COMPATOPTIONS {dummy = false}
d166 1
@


1.2
log
@Options & Info changes
@
text
@d6 3
d53 17
a69 16
    (Options.OPTIONS(Options.LISTINGOPTIONS {show_absyn,
                                             show_lambda,
                                             show_match,
                                             show_opt_lambda,
                                             show_environ,
                                             show_mir,
                                             show_opt_mir,
                                             show_mach},
                     Options.COMPILEROPTIONS {debug,
                                              profile,
                                              trace,
                                              debug_warnings,
                                              opt_leaf_fns,
                                              opt_tail_calls,
                                              opt_self_calls},
                     Options.PRINTOPTIONS {maximum_list_size,
d76 2
a77 1
                                           show_eq_info})) =
d143 2
d147 5
a151 3
      Options.OPTIONS(new_listing_options user_options,
                      new_compiler_options user_options,
                      new_print_options user_options)
@


1.1
log
@Initial revision
@
text
@d5 4
a8 1
 *  $Log$
d11 1
a11 2
require "../debugger/value_printer";
require "incremental";
d14 2
a15 4
functor UserOptions (
  structure Incremental: INCREMENTAL
  structure ValuePrinter: VALUE_PRINTER
): USER_OPTIONS =
d17 1
a17 6
  structure Incremental = Incremental
  structure InterMake = Incremental.InterMake
  structure MirTypes = InterMake.Compiler.MirTypes
  structure Info = InterMake.Compiler.BasisTypes.Info

  type printer_descriptor = ValuePrinter.printer_descriptor
d49 64
a112 60
    fun make_user_options (
          ValuePrinter.PRINTER_DESCRIPTOR print_desc,
          MirTypes.OPTIONS
            {info_opts = Info.OPTIONS {show_id_class, show_eq_info, ...},
             list_opts =
               MirTypes.BELO {show_absyn, show_lambda, show_match,
                       	               show_opt_lambda, show_environ, show_mir,
                                       show_opt_mir, show_mach},
             trace,
	     profile,
	     debug,
	     debug_warnings,
	     opt_leaf_fns,
             opt_tail_calls,
	     opt_self_calls,
             ...
        }) =
      USER_OPTIONS {
	maximum_list_size        = ref (#maximum_list_size print_desc),
        maximum_ref_depth        = ref (#maximum_ref_depth print_desc),
        maximum_shape_depth      = ref (#maximum_shape_depth print_desc),
        maximum_depth            = ref (#maximum_depth print_desc),
        show_fn_details          = ref (#print_fn_details print_desc),
        show_exn_details         = ref (#print_exn_details print_desc),
        generate_tracing_code    = ref trace,
        generate_profiling_code  = ref profile,
        generate_debug_info      = ref debug,
        show_debug_warnings      = ref debug_warnings,
        optimise_leaf_fns        = ref opt_leaf_fns,
        optimise_tail_calls      = ref opt_tail_calls,
        optimise_self_tail_calls = ref opt_self_calls,
        show_id_class            = ref show_id_class,
        show_eq_info             = ref show_eq_info,
        show_absyn               = ref show_absyn,
        show_match               = ref show_match,
        show_lambda              = ref show_lambda,
        show_environ             = ref show_environ,
        show_opt_lambda          = ref show_opt_lambda,
        show_mir                 = ref show_mir,
        show_opt_mir             = ref show_opt_mir,
        show_mach                = ref show_mach,
        show_debug_info          = ref false,
        show_timings             = ref false,
        show_print_timings       = ref false
      }


    fun new_pr_options (
          USER_OPTIONS user_options,
          ValuePrinter.PRINTER_DESCRIPTOR print_desc
        ) = 
      ValuePrinter.PRINTER_DESCRIPTOR {
        print_fn_details = !(#show_fn_details user_options),
        print_exn_details = !(#show_exn_details user_options),
        maximum_list_size = !(#maximum_list_size user_options),
        maximum_ref_depth = !(#maximum_ref_depth user_options),
        maximum_shape_depth = !(#maximum_shape_depth user_options),
        maximum_depth = !(#maximum_depth user_options),
        print_method_table = #print_method_table print_desc
      }
a113 12
    fun new_info_options (
          USER_OPTIONS user_options,
          Info.OPTIONS info_rec
        ) =
      Info.OPTIONS {
        error = #error info_rec,
        information = #information info_rec,
        listing = #listing info_rec,
        diagnostic = #diagnostic info_rec,
        show_eq_info = !(#show_eq_info user_options),
        show_id_class = !(#show_id_class user_options)
      }
d115 23
a137 21
    fun new_compiler_options (USER_OPTIONS user_options, info_options) =
      MirTypes.OPTIONS {
        info_opts = new_info_options (USER_OPTIONS user_options, info_options),
        list_opts = MirTypes.BELO {
	  show_absyn = !(#show_absyn user_options),
	  show_lambda = !(#show_lambda user_options),
	  show_match = !(#show_match user_options),
          show_opt_lambda = !(#show_opt_lambda user_options),
          show_environ = !(#show_environ user_options),
          show_mir = !(#show_mir user_options),
          show_opt_mir = !(#show_opt_mir user_options),
          show_mach = !(#show_mach user_options)
	},
        debug = !(#generate_debug_info user_options),
        profile = !(#generate_profiling_code user_options),
        trace = !(#generate_tracing_code user_options),
        debug_warnings = !(#show_debug_warnings user_options),
        opt_leaf_fns = !(#optimise_leaf_fns user_options),
        opt_tail_calls = !(#optimise_tail_calls user_options),
        opt_self_calls = !(#optimise_self_tail_calls user_options)
      }
d139 4
a142 25
    fun new_shell_options (
          user_options,
          info_options,
          Incremental.OPTIONS {
            debugger,
            make_options = InterMake.OPTIONS {name_monitor, ...},
            ...
          }) =
      let
        val info_options' =
	  new_info_options (user_options, info_options)
        val compiler_options' =
	  new_compiler_options (user_options, info_options')
        val shell_options' =
          Incremental.OPTIONS {
            compiler_options = compiler_options',
            make_options = InterMake.OPTIONS {
                             name_monitor = name_monitor,
                             compiler_options = compiler_options'
                           },
            debugger = debugger
          }
      in
	(info_options', shell_options')
      end
@
