head	1.14;
access;
symbols
	MLW_daveb_inline_1_4_99:1.14.4
	MLWorks_21c0_1999_03_25:1.14
	MLWorks_20c1_1998_08_20:1.14
	MLWorks_20c0_1998_08_04:1.14
	MLWorks_20b2c2_1998_06_19:1.14
	MLWorks_20b2_Windows_1998_06_12:1.14
	MLWorks_20b1c1_1998_05_07:1.14
	MLWorks_20b0_1998_04_07:1.14
	MLWorks_20b0_1998_03_20:1.14
	MLWorks_20m2_1998_02_16:1.14
	MLWorks_20m1_1997_10_23:1.14
	MLWorks_11r1:1.14.1.1.1.1.1
	MLWorks_workspace_97:1.14.3
	MLWorks_dt_wizard:1.14.2
	MLWorks_11c0_1997_09_09:1.14.1.1.1.1
	MLWorks_10r3:1.14.1.1.3
	MLWorks_10r2_551:1.14.1.1.2
	MLWorks_11:1.14.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.14.1.1
	MLWorks_20m0_1997_06_20:1.14
	MLWorks_1_0_r2c2_1997_06_14:1.14.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.14.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.14.1
	MLWorks_BugFix_1997_04_24:1.14
	MLWorks_1_0_r2_Win32_1997_04_11:1.14
	MLWorks_1_0_r2_Unix_1997_04_04:1.14
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.12.6.1.1
	MLWorks_gui_1996_12_18:1.12.7
	MLWorks_1_0_Win32_1996_12_17:1.12.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.12.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.12.4.1
	MLWorks_1_0_Irix_1996_11_28:1.12.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.12.5
	MLWorks_1_0_Unix_1996_11_14:1.12.4
	MLWorks_Open_Beta2_1996_10_11:1.12.3
	MLWorks_License_dev:1.12.2
	MLWorks_1_open_beta_1996_09_13:1.12.1
	MLWorks_Open_Beta_1996_08_22:1.12
	MLWorks_Beta_1996_07_02:1.12
	MLWorks_Beta_1996_06_07:1.12
	MLWorks_Beta_1996_06_06:1.12
	MLWorks_Beta_1996_06_05:1.12
	MLWorks_Beta_1996_06_03:1.12
	MLWorks_Beta_1996_05_31:1.12
	MLWorks_Beta_1996_05_30:1.12
	ML_beta_release_12/08/94:1.10
	ML_beta_release_03/08/94:1.10
	ML_revised_beta_release_25/05/94:1.10
	ML_final_beta_release_02/03/94:1.10
	mlworks-28-01-1994:1.10
	Release:1.10
	mlworks-beta-01-09-1993:1.10
	MLWorks-1-0-4-29/01/1993:1.9
	MLWorks-1-0-3-21/12/1992:1.9
	MLWorks-1-0-2-15/12/1992:1.9
	MLWorks-1-0-1-04/12/1992:1.9
	checkpoint_17_08_92:1.7;
locks; strict;
comment	@ * @;


1.14
date	97.01.24.14.32.28;	author matthew;	state Exp;
branches
	1.14.1.1
	1.14.2.1
	1.14.3.1
	1.14.4.1;
next	1.13;

1.13
date	96.12.04.16.54.51;	author matthew;	state Exp;
branches;
next	1.12;

1.12
date	96.02.23.17.21.56;	author jont;	state Exp;
branches
	1.12.1.1
	1.12.2.1
	1.12.3.1
	1.12.4.1
	1.12.5.1
	1.12.6.1
	1.12.7.1;
next	1.11;

1.11
date	95.02.13.13.10.39;	author matthew;	state Exp;
branches;
next	1.10;

1.10
date	93.03.10.17.06.08;	author matthew;	state Exp;
branches
	1.10.1.1;
next	1.9;

1.9
date	92.08.26.13.45.29;	author jont;	state Exp;
branches;
next	1.8;

1.8
date	92.08.19.18.18.13;	author davidt;	state Exp;
branches;
next	1.7;

1.7
date	92.05.06.11.45.45;	author jont;	state Exp;
branches;
next	1.6;

1.6
date	91.11.28.16.32.01;	author richard;	state Exp;
branches;
next	1.5;

1.5
date	91.11.12.16.40.54;	author jont;	state Exp;
branches;
next	1.4;

1.4
date	91.10.29.14.54.41;	author jont;	state Exp;
branches;
next	1.3;

1.3
date	91.09.24.13.09.43;	author davida;	state Exp;
branches;
next	1.2;

1.2
date	91.09.23.12.30.56;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	91.09.05.11.00.10;	author jont;	state Exp;
branches;
next	;

1.10.1.1
date	93.03.10.17.06.08;	author jont;	state Exp;
branches;
next	;

1.12.1.1
date	96.09.13.11.18.19;	author hope;	state Exp;
branches;
next	;

1.12.2.1
date	96.10.07.16.08.12;	author hope;	state Exp;
branches;
next	;

1.12.3.1
date	96.10.17.11.26.26;	author hope;	state Exp;
branches;
next	;

1.12.4.1
date	96.11.14.12.51.44;	author hope;	state Exp;
branches
	1.12.4.1.1.1;
next	;

1.12.4.1.1.1
date	96.11.28.15.02.46;	author hope;	state Exp;
branches;
next	;

1.12.5.1
date	96.11.22.18.10.57;	author hope;	state Exp;
branches;
next	;

1.12.6.1
date	96.12.17.17.49.31;	author hope;	state Exp;
branches
	1.12.6.1.1.1;
next	;

1.12.6.1.1.1
date	97.02.24.11.39.39;	author hope;	state Exp;
branches;
next	;

1.12.7.1
date	96.12.18.09.43.35;	author hope;	state Exp;
branches;
next	;

1.14.1.1
date	97.05.12.10.36.04;	author hope;	state Exp;
branches
	1.14.1.1.1.1
	1.14.1.1.2.1
	1.14.1.1.3.1;
next	;

1.14.1.1.1.1
date	97.07.28.18.21.45;	author daveb;	state Exp;
branches
	1.14.1.1.1.1.1.1;
next	;

1.14.1.1.1.1.1.1
date	97.10.07.11.47.25;	author jkbrook;	state Exp;
branches;
next	;

1.14.1.1.2.1
date	97.09.08.17.15.09;	author daveb;	state Exp;
branches;
next	;

1.14.1.1.3.1
date	97.09.09.14.11.02;	author daveb;	state Exp;
branches;
next	;

1.14.2.1
date	97.09.10.19.27.03;	author brucem;	state Exp;
branches;
next	;

1.14.3.1
date	97.09.11.20.57.03;	author daveb;	state Exp;
branches;
next	;

1.14.4.1
date	99.04.01.17.58.11;	author daveb;	state Exp;
branches;
next	;


desc
@Handle the translation of BUILTINs to selections from /library
@


1.14
log
@Adding Options
@
text
@(*  ==== PERVASIVE LIBRARY UTILITIES ====
 *               SIGNATURE
 *
 *  Copyright (C) 1991 Harlequin Ltd.
 *
 *  Description
 *  -----------
 *  This module performs various operations on lambda expressions concerned
 *  with references to the pervasive library.  The library is accessed in
 *  the same way as any other structure, by SELECT operations on the library
 *  structure.  However, not all pervasives are defined in the library
 *  (integer addition is not), and not all pervasives are referenced
 *  explicitly (exceptions generated by integer addition).  This module
 *  provides tools for sorting these out and providing mappings from
 *  pervasives to fields in the pervasive library.
 *
 *  Diagnostic output levels (see ../utils/diagnostic.sml)
 *  ------------------------
 *    0  none
 *    1  external references when building environment
 *    3  externalised lambda expressions
 *
 *  Revision Log
 *  ------------
 *  $Log: library.sml,v $
 * Revision 1.13  1996/12/04  16:54:51  matthew
 * Simplifying
 *
 * Revision 1.12  1996/02/23  17:21:56  jont
 * newmap becomes map, NEWMAP becomes MAP
 *
 * Revision 1.11  1995/02/13  13:10:39  matthew
 * Changes to DebuggerTypes.
 *
 *  Revision 1.10  1993/03/10  17:06:08  matthew
 *  Signature revisions
 *
 *  Revision 1.9  1992/08/26  13:45:29  jont
 *  Removed some redundant structures and sharing
 *
 *  Revision 1.8  1992/08/19  18:18:13  davidt
 *  Now uses NewMap instead of Map.
 *
 *  Revision 1.7  1992/05/06  11:45:45  jont
 *  Modified to use augmented lambda calculus
 *
 *  Revision 1.6  1991/11/28  16:32:01  richard
 *  Completely reimplemented this module, tidied it up, and documented it.
 *  The functions provided have changed quite a bit.
 *
 *  Revision 1.5  91/11/12  16:40:54  jont
 *  Removed is_inline from signature, now in MachSpec
 *  
 *  Revision 1.4  91/10/29  14:54:41  jont
 *  Changed interface to get_env_and_bindings to return inverse map of
 *  prims to lambdas to spot calls to prims in order to allocate args
 *  on stack
 *  
 *  Revision 1.3  91/09/24  13:09:43  davida
 *  Added is_inline to signature, for 
 *  optimiser.
 *  
 *  Revision 1.2  91/09/23  12:30:56  jont
 *  Added stuff to deal with implicit exceptions (eg from ADDV)
 *  
 *  Revision 1.1  91/09/05  11:00:10  jont
 *  Initial revision
 *)


require "../utils/map";
require "../lambda/auglambda";

signature LIBRARY = sig
  structure AugLambda   : AUGLAMBDA
  structure NewMap : MAP
  type CompilerOptions

  (*  === BUILD EXTERNAL ENVIRONMENT ===
   *
   *  Examines a lambda expression to see what external references it makes,
   *  then generates an new enclosing lambda expression of the form:
   *
   *    LET
   *      Library = BUILTIN _load_string "pervasive_library"
   *      L1      = SELECT (x, Library)
   *      L2      = SELECT (y, Library)
   *              :
   *    IN
   *      exp
   *
   *  such that L1, L2, etc. are the external objects which are the
   *  pervasives, and exp is the original lambda expression with external
   *  references replaced by references to the lambda variables.  Also
   *  returned is a NewMap.map from pervasives to their corresponding lambda
   *  variables, and a set of the lambda variables generated.
   *)

  val build_external_environment :
    CompilerOptions * AugLambda.LambdaTypes.LambdaExp ->
    (AugLambda.LambdaTypes.Primitive, AugLambda.LambdaTypes.LVar) NewMap.map *
    AugLambda.LambdaTypes.LambdaExp



  (*  === EXTRACT IMPLICIT EXTERNAL REFERENCES ===
   *
   *  Extracts the set of external pervasives referenced implicitly by a
   *  lambda expression.  These are the pervasives such as exceptions
   *  generated by in line pervasives, for example, exception Sum generated
   *  by integer addition.  Sum is external even though integer addition is
   *  not.
   *)

  val implicit_external_references :
    AugLambda.AugLambdaExp -> 
    AugLambda.LambdaTypes.Primitive AugLambda.LambdaTypes.Set.Set


end
@


1.14.4.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a25 3
 * Revision 1.14  1997/01/24  14:32:28  matthew
 * Adding Options
 *
@


1.14.3.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a25 3
 * Revision 1.14  1997/01/24  14:32:28  matthew
 * Adding Options
 *
@


1.14.2.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a25 3
 * Revision 1.14  1997/01/24  14:32:28  matthew
 * Adding Options
 *
@


1.14.1.1
log
@branched from 1.14
@
text
@a25 3
 * Revision 1.14  1997/01/24  14:32:28  matthew
 * Adding Options
 *
@


1.14.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a25 3
 * Revision 1.14.1.1  1997/05/12  10:36:04  hope
 * branched from 1.14
 *
@


1.14.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a25 3
 * Revision 1.14.1.1  1997/05/12  10:36:04  hope
 * branched from 1.14
 *
@


1.14.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a25 3
 * Revision 1.14.1.1  1997/05/12  10:36:04  hope
 * branched from 1.14
 *
@


1.14.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a25 3
 * Revision 1.14.1.1.1.1  1997/07/28  18:21:45  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.13
log
@Simplifying
@
text
@d26 3
d77 1
a77 1

d100 1
a100 1
    AugLambda.LambdaTypes.LambdaExp ->
d116 2
a117 1
    AugLambda.AugLambdaExp -> AugLambda.LambdaTypes.Primitive AugLambda.LambdaTypes.Set.Set
@


1.12
log
@newmap becomes map, NEWMAP becomes MAP
@
text
@d26 3
a98 1
    AugLambda.LambdaTypes.LVar AugLambda.LambdaTypes.Set.Set *
@


1.12.7.1
log
@branched from 1.12
@
text
@a25 3
 * Revision 1.12  1996/02/23  17:21:56  jont
 * newmap becomes map, NEWMAP becomes MAP
 *
@


1.12.6.1
log
@branched from 1.12
@
text
@a25 3
 * Revision 1.12  1996/02/23  17:21:56  jont
 * newmap becomes map, NEWMAP becomes MAP
 *
@


1.12.6.1.1.1
log
@branched from 1.12.6.1
@
text
@a25 3
 * Revision 1.12.6.1  1996/12/17  17:49:31  hope
 * branched from 1.12
 *
@


1.12.5.1
log
@branched from 1.12
@
text
@a25 3
 * Revision 1.12  1996/02/23  17:21:56  jont
 * newmap becomes map, NEWMAP becomes MAP
 *
@


1.12.4.1
log
@branched from 1.12
@
text
@a25 3
 * Revision 1.12  1996/02/23  17:21:56  jont
 * newmap becomes map, NEWMAP becomes MAP
 *
@


1.12.4.1.1.1
log
@branched from 1.12.4.1
@
text
@a25 3
 * Revision 1.12.4.1  1996/11/14  12:51:44  hope
 * branched from 1.12
 *
@


1.12.3.1
log
@branched from 1.12
@
text
@a25 3
 * Revision 1.12  1996/02/23  17:21:56  jont
 * newmap becomes map, NEWMAP becomes MAP
 *
@


1.12.2.1
log
@branched from 1.12
@
text
@a25 3
 * Revision 1.12  1996/02/23  17:21:56  jont
 * newmap becomes map, NEWMAP becomes MAP
 *
@


1.12.1.1
log
@branched from 1.12
@
text
@a25 3
 * Revision 1.12  1996/02/23  17:21:56  jont
 * newmap becomes map, NEWMAP becomes MAP
 *
@


1.11
log
@Changes to DebuggerTypes.
@
text
@d26 3
d65 1
a65 1
require "../utils/newmap";
d70 1
a70 1
  structure NewMap : NEWMAP
d89 1
a89 1
   *  returned is a NewMap.T from pervasives to their corresponding lambda
d95 1
a95 1
    (AugLambda.LambdaTypes.Primitive, AugLambda.LambdaTypes.LVar) NewMap.T *
@


1.10
log
@Signature revisions
@
text
@d26 3
d62 1
a62 1
require "../utils/diagnostic";
d67 1
a67 1
  structure Diagnostic	: DIAGNOSTIC
d92 1
a92 1
    (AugLambda.LambdaTypes.Primitive, AugLambda.LambdaTypes.LVar) AugLambda.Debugger_Types.NewMap.T *
@


1.10.1.1
log
@Fork for bug fixing
@
text
@a25 3
 *  Revision 1.10  1993/03/10  17:06:08  matthew
 *  Signature revisions
 *
@


1.9
log
@Removed some redundant structures and sharing
@
text
@d26 3
d89 1
a89 1
    (AugLambda.LambdaTypes.Primitive, AugLambda.LambdaTypes.LVar) AugLambda.LambdaTypes.Datatypes.NewMap.T *
@


1.8
log
@Now uses NewMap instead of Map.
@
text
@d26 3
a56 3
require "../utils/newmap";
require "../utils/set";
require "../lambda/lambdatypes";
a60 3
  structure LambdaTypes	: LAMBDATYPES
  structure NewMap      : NEWMAP
  structure Set		: SET
a61 1
  sharing LambdaTypes = AugLambda.LambdaTypes
d85 4
a88 4
    LambdaTypes.LambdaExp ->
    (LambdaTypes.Primitive, LambdaTypes.LVar) NewMap.T *
    LambdaTypes.LVar Set.Set *
    LambdaTypes.LambdaExp
d102 1
a102 1
    AugLambda.AugLambdaExp -> LambdaTypes.Primitive Set.Set
@


1.7
log
@Modified to use augmented lambda calculus
@
text
@d26 3
d54 1
a54 1
require "../utils/map";
d62 1
a62 1
  structure Map		: MAP
d84 1
a84 1
   *  returned is a Map.Map from pervasives to their corresponding lambda
d90 1
a90 1
    (LambdaTypes.Primitive, LambdaTypes.LVar) Map.Map *
@


1.6
log
@Completely reimplemented this module, tidied it up, and documented it.
The functions provided have changed quite a bit.
@
text
@d25 5
a29 1
 *  $Log:	library.sml,v $
d54 1
a55 1

d57 1
a57 1

d62 1
a64 1

a92 13
  (*  === EXTRACT ALL EXTERNAL REFERENCES ===
   *
   *  Extracts the set of external pervasives which are referenced
   *  explicitly or implicitly by a lambda expression.  The external
   *  pervasives are those which are not generated in line, that is, those
   *  which are present in the pervasive library.
   *)

  val external_references :
    LambdaTypes.LambdaExp -> LambdaTypes.Primitive Set.Set



d103 1
a103 1
    LambdaTypes.LambdaExp -> LambdaTypes.Primitive Set.Set
@


1.5
log
@Removed is_inline from signature, now in MachSpec
@
text
@d1 43
a43 7
(* library.sml the signature *)
(*
$Log:	library.sml,v $
Revision 1.4  91/10/29  14:54:41  jont
Changed interface to get_env_and_bindings to return inverse map of
prims to lambdas to spot calls to prims in order to allocate args
on stack
a44 3
Revision 1.3  91/09/24  13:09:43  davida
Added is_inline to signature, for 
optimiser.
d46 1
a46 9
Revision 1.2  91/09/23  12:30:56  jont
Added stuff to deal with implicit exceptions (eg from ADDV)

Revision 1.1  91/09/05  11:00:10  jont
Initial revision

Copyright (c) 1991 Harlequin Ltd.
*)

d51 1
d53 30
a82 6
  structure LambdaTypes : LAMBDATYPES
  structure Map : MAP
  structure Set : SET
  val load_string : LambdaTypes.Primitive
  val add_pervasive_refs :
    LambdaTypes.LambdaExp *
d84 1
a84 1
    (LambdaTypes.LVar * LambdaTypes.LambdaExp) list ->
d86 29
a114 10
  val get_env_and_bindings :
    LambdaTypes.LambdaExp ->
    (LambdaTypes.Primitive, LambdaTypes.LVar) Map.Map *
    (LambdaTypes.LVar, LambdaTypes.Primitive) Map.Map *
    (LambdaTypes.LVar * LambdaTypes.LambdaExp) list
  val builtin_external_set : LambdaTypes.LambdaExp ->
    LambdaTypes.Primitive Set.Set
  val builtin_implicit_set : LambdaTypes.LambdaExp ->
    LambdaTypes.Primitive Set.Set
  val prim_to_exn: LambdaTypes.Primitive -> LambdaTypes.Primitive
@


1.4
log
@Changed interface to get_env_and_bindings to return inverse map of
prims to lambdas to spot calls to prims in order to allocate args
on stack
@
text
@d4 5
a45 1
  val is_inline: LambdaTypes.Primitive -> bool
@


1.3
log
@Added is_inline to signature, for 
optimiser.
@
text
@d4 4
d34 1
@


1.2
log
@Added stuff to deal with implicit exceptions (eg from ADDV)
@
text
@d4 3
d36 1
@


1.1
log
@Initial revision
@
text
@d3 4
a6 1
$Log$
d30 3
@
