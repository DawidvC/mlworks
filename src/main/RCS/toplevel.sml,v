head	1.71;
access;
symbols
	MLW_daveb_inline_1_4_99:1.71.1
	MLWorks_21c0_1999_03_25:1.71
	MLWorks_20c1_1998_08_20:1.69
	MLWorks_20c0_1998_08_04:1.69
	MLWorks_20b2c2_1998_06_19:1.69
	MLWorks_20b2_Windows_1998_06_12:1.69
	MLWorks_20b1c1_1998_05_07:1.69
	MLWorks_20b0_1998_04_07:1.69
	MLWorks_20b0_1998_03_20:1.69
	MLWorks_20m2_1998_02_16:1.69
	MLWorks_20m1_1997_10_23:1.68
	MLWorks_11r1:1.68.8.1.1.1.1
	MLWorks_workspace_97:1.68.10
	MLWorks_dt_wizard:1.68.9
	MLWorks_11c0_1997_09_09:1.68.8.1.1.1
	MLWorks_10r3:1.68.8.1.3
	MLWorks_10r2_551:1.68.8.1.2
	MLWorks_11:1.68.8.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.68.8.1
	MLWorks_20m0_1997_06_20:1.68
	MLWorks_1_0_r2c2_1997_06_14:1.68.8.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.68.8.1
	MLWorks_1_0_r2c1_1997_05_12:1.68.8
	MLWorks_BugFix_1997_04_24:1.68
	MLWorks_1_0_r2_Win32_1997_04_11:1.68
	MLWorks_1_0_r2_Unix_1997_04_04:1.68
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.68.6.1.1
	MLWorks_gui_1996_12_18:1.68.7
	MLWorks_1_0_Win32_1996_12_17:1.68.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.68.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.68.4.1
	MLWorks_1_0_Irix_1996_11_28:1.68.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.68.5
	MLWorks_1_0_Unix_1996_11_14:1.68.4
	MLWorks_Open_Beta2_1996_10_11:1.68.3
	MLWorks_License_dev:1.68.2
	MLWorks_1_open_beta_1996_09_13:1.68.1
	MLWorks_Open_Beta_1996_08_22:1.68
	MLWorks_Beta_1996_07_02:1.68
	MLWorks_Beta_1996_06_07:1.68
	MLWorks_Beta_1996_06_06:1.68
	MLWorks_Beta_1996_06_05:1.68
	MLWorks_Beta_1996_06_03:1.68
	MLWorks_Beta_1996_05_31:1.68
	MLWorks_Beta_1996_05_30:1.68
	ML_beta_release_12/08/94:1.63
	ML_beta_release_03/08/94:1.63
	ML_revised_beta_release_25/05/94:1.63
	ML_final_beta_release_02/03/94:1.62
	mlworks-28-01-1994:1.61
	Release:1.60
	mlworks-beta-01-09-1993:1.60
	MLWorks-1-0-4-29/01/1993:1.51
	MLWorks-1-0-3-21/12/1992:1.50
	MLWorks-1-0-2-15/12/1992:1.50
	MLWorks-1-0-1-04/12/1992:1.48
	checkpoint_17_08_92:1.28
	Ten15_release_19-08-91:1.4
	ten15_release:1.2
	ten15:1.2;
locks; strict;
comment	@ * @;


1.71
date	99.02.09.09.50.01;	author mitchell;	state Exp;
branches
	1.71.1.1;
next	1.70;

1.70
date	99.02.05.11.56.12;	author mitchell;	state Exp;
branches;
next	1.69;

1.69
date	98.01.27.17.51.28;	author johnh;	state Exp;
branches;
next	1.68;

1.68
date	95.12.05.11.12.26;	author daveb;	state Exp;
branches
	1.68.1.1
	1.68.2.1
	1.68.3.1
	1.68.4.1
	1.68.5.1
	1.68.6.1
	1.68.7.1
	1.68.8.1
	1.68.9.1
	1.68.10.1;
next	1.67;

1.67
date	95.09.05.16.28.39;	author jont;	state Exp;
branches;
next	1.66;

1.66
date	95.05.26.14.35.35;	author matthew;	state Exp;
branches;
next	1.65;

1.65
date	95.04.05.14.09.58;	author matthew;	state Exp;
branches;
next	1.64;

1.64
date	94.09.27.09.59.05;	author matthew;	state Exp;
branches;
next	1.63;

1.63
date	94.03.21.15.09.01;	author daveb;	state Exp;
branches;
next	1.62;

1.62
date	94.02.01.15.23.49;	author daveb;	state Exp;
branches;
next	1.61;

1.61
date	93.09.27.14.46.54;	author jont;	state Exp;
branches;
next	1.60;

1.60
date	93.08.28.16.37.06;	author daveb;	state Exp;
branches
	1.60.1.1;
next	1.59;

1.59
date	93.08.23.14.15.29;	author richard;	state Exp;
branches;
next	1.58;

1.58
date	93.08.09.16.40.42;	author daveb;	state Exp;
branches;
next	1.57;

1.57
date	93.06.25.10.10.09;	author daveb;	state Exp;
branches;
next	1.56;

1.56
date	93.04.13.15.12.25;	author matthew;	state Exp;
branches;
next	1.55;

1.55
date	93.03.11.12.37.40;	author matthew;	state Exp;
branches;
next	1.54;

1.54
date	93.03.09.12.57.38;	author matthew;	state Exp;
branches;
next	1.53;

1.53
date	93.02.08.19.42.10;	author matthew;	state Exp;
branches;
next	1.52;

1.52
date	93.02.01.16.34.58;	author matthew;	state Exp;
branches;
next	1.51;

1.51
date	93.01.04.15.12.27;	author jont;	state Exp;
branches;
next	1.50;

1.50
date	92.12.08.20.28.12;	author jont;	state Exp;
branches;
next	1.49;

1.49
date	92.12.08.12.13.25;	author jont;	state Exp;
branches;
next	1.48;

1.48
date	92.12.02.15.56.43;	author daveb;	state Exp;
branches;
next	1.47;

1.47
date	92.12.02.14.04.12;	author jont;	state Exp;
branches;
next	1.46;

1.46
date	92.11.27.17.31.05;	author daveb;	state Exp;
branches;
next	1.45;

1.45
date	92.11.19.19.17.40;	author jont;	state Exp;
branches;
next	1.44;

1.44
date	92.11.17.18.06.00;	author matthew;	state Exp;
branches;
next	1.43;

1.43
date	92.11.03.17.00.35;	author richard;	state Exp;
branches;
next	1.42;

1.42
date	92.10.27.17.07.03;	author jont;	state Exp;
branches;
next	1.41;

1.41
date	92.10.12.12.01.05;	author clive;	state Exp;
branches;
next	1.40;

1.40
date	92.09.24.06.20.48;	author richard;	state Exp;
branches;
next	1.39;

1.39
date	92.09.23.16.43.38;	author jont;	state Exp;
branches;
next	1.38;

1.38
date	92.09.16.08.45.36;	author daveb;	state Exp;
branches;
next	1.37;

1.37
date	92.09.12.20.18.58;	author jont;	state Exp;
branches;
next	1.36;

1.36
date	92.09.10.09.17.42;	author richard;	state Exp;
branches;
next	1.35;

1.35
date	92.09.09.10.03.38;	author clive;	state Exp;
branches;
next	1.34;

1.34
date	92.09.02.12.23.02;	author richard;	state Exp;
branches;
next	1.33;

1.33
date	92.08.26.17.12.05;	author jont;	state Exp;
branches;
next	1.32;

1.32
date	92.08.26.08.27.51;	author clive;	state Exp;
branches;
next	1.31;

1.31
date	92.08.24.16.16.18;	author clive;	state Exp;
branches;
next	1.30;

1.30
date	92.08.19.19.07.58;	author davidt;	state Exp;
branches;
next	1.29;

1.29
date	92.08.17.14.42.18;	author clive;	state Exp;
branches;
next	1.28;

1.28
date	92.08.07.11.41.30;	author clive;	state Exp;
branches;
next	1.27;

1.27
date	92.07.22.16.08.49;	author jont;	state Exp;
branches;
next	1.26;

1.26
date	92.07.22.15.20.10;	author jont;	state Exp;
branches;
next	1.25;

1.25
date	92.07.14.16.17.26;	author richard;	state Exp;
branches;
next	1.24;

1.24
date	92.06.18.13.00.25;	author jont;	state Exp;
branches;
next	1.23;

1.23
date	92.06.18.09.23.26;	author davida;	state Exp;
branches;
next	1.22;

1.22
date	92.06.16.11.22.25;	author davida;	state Exp;
branches;
next	1.21;

1.21
date	92.06.15.15.26.16;	author jont;	state Exp;
branches;
next	1.20;

1.20
date	92.06.12.19.19.37;	author jont;	state Exp;
branches;
next	1.19;

1.19
date	92.06.11.10.54.56;	author clive;	state Exp;
branches;
next	1.18;

1.18
date	92.05.14.11.44.21;	author clive;	state Exp;
branches;
next	1.17;

1.17
date	92.05.06.12.08.15;	author jont;	state Exp;
branches;
next	1.16;

1.16
date	92.04.13.15.29.37;	author clive;	state Exp;
branches;
next	1.15;

1.15
date	92.03.17.18.43.02;	author jont;	state Exp;
branches;
next	1.14;

1.14
date	92.02.20.12.23.45;	author jont;	state Exp;
branches;
next	1.13;

1.13
date	92.02.11.14.26.12;	author clive;	state Exp;
branches;
next	1.12;

1.12
date	92.01.31.12.11.59;	author clive;	state Exp;
branches;
next	1.11;

1.11
date	92.01.28.17.57.06;	author jont;	state Exp;
branches;
next	1.10;

1.10
date	92.01.21.14.00.06;	author jont;	state Exp;
branches;
next	1.9;

1.9
date	92.01.10.16.40.26;	author jont;	state Exp;
branches;
next	1.8;

1.8
date	91.12.19.16.00.46;	author jont;	state Exp;
branches;
next	1.7;

1.7
date	91.10.02.15.01.30;	author jont;	state Exp;
branches;
next	1.6;

1.6
date	91.09.16.11.12.36;	author davida;	state Exp;
branches;
next	1.5;

1.5
date	91.09.04.17.11.55;	author jont;	state Exp;
branches;
next	1.4;

1.4
date	91.08.06.12.47.18;	author davida;	state Exp;
branches;
next	1.3;

1.3
date	91.08.06.12.23.50;	author davida;	state Exp;
branches;
next	1.2;

1.2
date	91.07.10.14.25.23;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	91.07.09.17.13.32;	author jont;	state Exp;
branches;
next	;

1.60.1.1
date	93.08.28.16.37.06;	author jont;	state Exp;
branches;
next	1.60.1.2;

1.60.1.2
date	93.09.27.11.17.28;	author jont;	state Exp;
branches;
next	;

1.68.1.1
date	96.09.13.11.18.36;	author hope;	state Exp;
branches;
next	;

1.68.2.1
date	96.10.07.16.08.29;	author hope;	state Exp;
branches;
next	;

1.68.3.1
date	96.10.17.11.26.44;	author hope;	state Exp;
branches;
next	;

1.68.4.1
date	96.11.14.12.52.06;	author hope;	state Exp;
branches
	1.68.4.1.1.1;
next	;

1.68.4.1.1.1
date	96.11.28.15.03.06;	author hope;	state Exp;
branches;
next	;

1.68.5.1
date	96.11.22.18.11.17;	author hope;	state Exp;
branches;
next	;

1.68.6.1
date	96.12.17.17.49.49;	author hope;	state Exp;
branches
	1.68.6.1.1.1;
next	;

1.68.6.1.1.1
date	97.02.24.11.40.00;	author hope;	state Exp;
branches;
next	;

1.68.7.1
date	96.12.18.09.43.54;	author hope;	state Exp;
branches;
next	;

1.68.8.1
date	97.05.12.10.36.23;	author hope;	state Exp;
branches
	1.68.8.1.1.1
	1.68.8.1.2.1
	1.68.8.1.3.1;
next	;

1.68.8.1.1.1
date	97.07.28.18.21.08;	author daveb;	state Exp;
branches
	1.68.8.1.1.1.1.1;
next	;

1.68.8.1.1.1.1.1
date	97.10.07.11.46.36;	author jkbrook;	state Exp;
branches;
next	;

1.68.8.1.2.1
date	97.09.08.17.14.34;	author daveb;	state Exp;
branches;
next	;

1.68.8.1.3.1
date	97.09.09.14.10.27;	author daveb;	state Exp;
branches;
next	;

1.68.9.1
date	97.09.10.19.26.24;	author brucem;	state Exp;
branches;
next	;

1.68.10.1
date	97.09.11.20.56.25;	author daveb;	state Exp;
branches;
next	1.68.10.2;

1.68.10.2
date	97.09.17.15.43.09;	author daveb;	state Exp;
branches;
next	;

1.71.1.1
date	99.04.01.17.58.00;	author daveb;	state Exp;
branches;
next	;


desc
@Top level of the compiler
@


1.71
log
@[Bug #190505]
Support for precompilation of subprojects
@
text
@(* toplevel.sml the signature *)
(*
 * $Log: toplevel.sml,v $
 * Revision 1.70  1999/02/05  11:56:12  mitchell
 * [Bug #190504]
 * Add ability to dump units in dependency order
 *
 * Revision 1.69  1998/01/27  17:51:28  johnh
 * [Bug #30071]
 * Merge in Project Workspace changes.
 *
 * Revision 1.68.10.2  1997/09/17  15:43:09  daveb
 * [Bug #30071]
 * Converted build system to project workspace.
 *
 * Revision 1.68.10.1  1997/09/11  20:56:25  daveb
 * branched from trunk for label MLWorks_workspace_97
 *
 * Revision 1.68  1995/12/05  11:12:26  daveb
 * Modified type of compile_file' to support Project Tool.
 *
Revision 1.67  1995/09/05  16:28:39  jont
Add sml_cache to interface for compile_file' to improve finding
of .mo files

Revision 1.66  1995/05/26  14:35:35  matthew
Removing show_absyn etc.  These are now redundant.

Revision 1.65  1995/04/05  14:09:58  matthew
Removed some redundant values

Revision 1.64  1994/09/27  09:59:05  matthew
Improved caching of module ids

Revision 1.63  1994/03/21  15:09:01  daveb
added compile_module.

Revision 1.62  1994/02/01  15:23:49  daveb
Changed FileNameCache to ModuleCache.

Revision 1.61  1993/09/27  14:46:54  jont
Merging in bug fixes

Revision 1.60.1.2  1993/09/27  11:17:28  jont
changed comile_file' to take and return a pervasive mo cache.

Revision 1.60.1.1  1993/08/28  16:37:06  jont
Fork for bug fixing

Revision 1.60  1993/08/28  16:37:06  daveb
Changed type of compile_file to take a list of strings, so that caches can
be preserved between each compilation (I haven't implemented this yet).
Changed type of compile_file' to take a filename cache and a module id
instead of a file.

Revision 1.59  1993/08/23  14:15:29  richard
Added output_lambda option.

Revision 1.58  1993/08/09  16:40:42  daveb
Added a compile_pervasive function.  Removed pervasive_library_dir.
Changed the type of compile to take a moduleid instead of a string.

Revision 1.57  1993/06/25  10:10:09  daveb
Removed show_match.

Revision 1.56  1993/04/13  15:12:25  matthew
Exposed lambda optimisation switches

Revision 1.55  1993/03/11  12:37:40  matthew
Signature revisions

Revision 1.54  1993/03/09  12:57:38  matthew
Options & Info changes

Revision 1.53  1993/02/08  19:42:10  matthew
Typechecker structure changes

Revision 1.52  1993/02/01  16:34:58  matthew
Changed sharing.

Revision 1.51  1993/01/04  15:12:27  jont
Added show_mach to allow toplevel printing of machine code

Revision 1.50  1992/12/08  20:28:12  jont
Removed a number of duplicated signatures and structures

Revision 1.49  1992/12/08  12:13:25  jont
Removed the references for doing profiling etc, no longer used

Revision 1.48  1992/12/02  15:56:43  daveb
Changes to propagate compiler options as parameters instead of references.

Revision 1.47  1992/12/02  14:04:12  jont
Modified to remove redundant info signatures

Revision 1.46  1992/11/27  17:31:05  daveb
Changes to make show_id_class and show_eq_info part of Info structure
instead of references.

Revision 1.45  1992/11/19  19:17:40  jont
Removed Info structure from parser, tidied upderived

Revision 1.44  1992/11/17  18:06:00  matthew
Changed Error structure to Info

Revision 1.43  1992/11/03  17:00:35  richard
Added a cache of consistency information to compile_file.

Revision 1.42  1992/10/27  17:07:03  jont
Removed Error from toplevel signature

Revision 1.41  1992/10/12  12:01:05  clive
Tynames now have a slot recording their definition point

Revision 1.40  1992/09/24  06:20:48  richard
Added sharing contraint on Error to signature.

Revision 1.39  1992/09/23  16:43:38  jont
Removed add_fn_names (obsolete)

Revision 1.38  1992/09/16  08:45:36  daveb
show_id_class controls printing of id classes (VAR, CON or EXCON).
show_eq_info controls printing of equality attribute of tycons.

Revision 1.37  1992/09/12  20:18:58  jont
Removed Lexer from toplevel signature

Revision 1.36  1992/09/10  09:17:42  richard
Created a type `information' which wraps up the debugger information
needed in so many parts of the compiler.
Added `augment'.

Revision 1.35  1992/09/09  10:03:38  clive
Added flag to switch off warning messages in generating recipes

Revision 1.34  1992/09/02  12:23:02  richard
Installed central error reporting mechanism.

Revision 1.33  1992/08/26  17:12:05  jont
Removed some redundant structures and sharing

Revision 1.32  1992/08/26  08:27:51  clive
Propogation of information about exceptions

Revision 1.31  1992/08/24  16:16:18  clive
Added details about leafness to the debug information

Revision 1.30  1992/08/19  19:07:58  davidt
Made changes to allow mo files to be copied.

Revision 1.29  1992/08/17  14:42:18  clive
Exception stop exported so it can be caught

Revision 1.28  1992/08/07  11:41:30  clive
Added the function set_debug_level

Revision 1.27  1992/07/22  16:08:49  jont
Added return of abstract syntax tree to compile_ts

Revision 1.26  1992/07/22  15:20:10  jont
Removed top_level from signature, not required

Revision 1.25  1992/07/14  16:17:26  richard
Removed obsolete memory profiling code.

Revision 1.24  1992/06/18  13:00:25  jont
Modified spec of compile_ts to return lambda expression

Revision 1.23  1992/06/18  09:23:26  davida
Added switch to allow compilation to stop at
lambda, and also display of size of lambda expr.

Revision 1.22  1992/06/16  11:22:25  davida
Added margin ref for lambda printing, so we make huge
listings shorter and fatter.

Revision 1.21  1992/06/15  15:26:16  jont
Modified signature to allow compile_ts to return some code

Revision 1.20  1992/06/12  19:19:37  jont
Added functions to do compiling and return results

Revision 1.19  1992/06/11  10:54:56  clive
Added flags for the recording of debug type information

Revision 1.18  1992/05/14  11:44:21  clive
Added memory profiling flag

Revision 1.17  1992/05/06  12:08:15  jont
Added do_check_bindings bool ref to control the checking of uniqueness
of bound lambda variable names. Default off

Revision 1.16  1992/04/13  15:29:37  clive
First version of the profiler

Revision 1.15  1992/03/17  18:43:02  jont
Added bool ref for add_fn_names to control addition of function names

Revision 1.14  1992/02/20  12:23:45  jont
Added show_match to control printing of match trees

Revision 1.13  1992/02/11  14:26:12  clive
New pervasive library

Revision 1.12  1992/01/31  12:11:59  clive
Added flags to control timing of the various sections

Revision 1.11  1992/01/28  17:57:06  jont
Added do_lambda_opt switch

Revision 1.10  1992/01/21  14:00:06  jont
Removed unnecessary items from signature

Revision 1.9  1992/01/10  16:40:26  jont
Added diagnostic to the signature

Revision 1.8  1991/12/19  16:00:46  jont
Removed compile_program from the spec

Revision 1.7  91/10/02  15:01:30  jont
Added show_mach for final code printing

Revision 1.6  91/09/16  11:12:36  davida
Added show_lambda, show_opt_lambda, show_environ
switches.

Revision 1.5  91/09/04  17:11:55  jont
Added show_opt_mir to control production and printing of optimised
intermediate code

Revision 1.4  91/08/06  12:47:18  davida
Added switch for mir printing too.

Revision 1.3  91/08/06  12:23:50  davida
Added switch for absyn printing so that we can
spot troublesome declarations in large files
with the present parser.

Revision 1.2  91/07/10  14:25:23  jont
Completed to handle initial environment and compile files and strings

Revision 1.1  91/07/09  17:13:32  jont
Initial revision


Copyright (c) 1991 Harlequin Ltd.
*)

require "../main/options";
require "../main/info";
require "../utils/diagnostic";
require "../lambda/environtypes";

signature TOPLEVEL =
sig
  structure EnvironTypes : ENVIRONTYPES
  structure Info : INFO
  structure Options : OPTIONS
  structure Diagnostic : DIAGNOSTIC

  type ParserBasis
  type TypeBasis
  type ModuleId

  datatype compiler_basis =
    CB of (ParserBasis * TypeBasis * EnvironTypes.Top_Env)

  val initial_compiler_basis : compiler_basis

  val augment : compiler_basis * compiler_basis -> compiler_basis

  val error_output_level : Info.severity ref

  type Project 

  val compile_file' :
    Info.options ->
    Options.options * Project * ModuleId list ->
    Project

  val check_dependencies: Info.options -> Options.options -> string list -> unit

  val list_objects: Info.options -> Options.options -> string list -> unit

  val dump_objects: Info.options -> Options.options -> string -> unit

  val compile_file: Info.options -> Options.options -> string list -> unit

  val recompile_file: Info.options -> Options.options -> string list -> unit

  val recompile_pervasive: Info.options -> Options.options -> unit

  val build: Info.options -> Options.options -> unit -> unit

  val show_build: Info.options -> Options.options -> unit -> unit

  val print_timings: bool ref

end
@


1.71.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a3 4
 * Revision 1.71  1999/02/09  09:50:01  mitchell
 * [Bug #190505]
 * Support for precompilation of subprojects
 *
@


1.70
log
@[Bug #190504]
Add ability to dump units in dependency order
@
text
@d4 4
a275 1
  (* The boolean determines whether the module is compiled as pervasive. *)
d278 1
a278 1
    Options.options * Project * ModuleId * bool ->
@


1.69
log
@[Bug #30071]
Merge in Project Workspace changes.
@
text
@d4 4
d281 2
@


1.68
log
@Modified type of compile_file' to support Project Tool.
@
text
@d3 11
a13 1
$Log: toplevel.sml,v $
d276 2
d283 4
@


1.68.10.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a3 3
 * Revision 1.68  1995/12/05  11:12:26  daveb
 * Modified type of compile_file' to support Project Tool.
 *
@


1.68.10.2
log
@[Bug #30071]
Converted build system to project workspace.
@
text
@d3 1
a3 4
 * $Log: toplevel.sml,v $
 * Revision 1.68.10.1  1997/09/11  20:56:25  daveb
 * branched from trunk for label MLWorks_workspace_97
 *
a268 2
  val list_objects: Info.options -> Options.options -> string list -> unit

a273 4

  val build: Info.options -> Options.options -> unit -> unit

  val show_build: Info.options -> Options.options -> unit -> unit
@


1.68.9.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a3 3
 * Revision 1.68  1995/12/05  11:12:26  daveb
 * Modified type of compile_file' to support Project Tool.
 *
@


1.68.8.1
log
@branched from 1.68
@
text
@a3 3
 * Revision 1.68  1995/12/05  11:12:26  daveb
 * Modified type of compile_file' to support Project Tool.
 *
@


1.68.8.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a3 3
 * Revision 1.68.8.1  1997/05/12  10:36:23  hope
 * branched from 1.68
 *
@


1.68.8.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a3 3
 * Revision 1.68.8.1  1997/05/12  10:36:23  hope
 * branched from 1.68
 *
@


1.68.8.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a3 3
 * Revision 1.68.8.1  1997/05/12  10:36:23  hope
 * branched from 1.68
 *
@


1.68.8.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a3 3
 * Revision 1.68.8.1.1.1  1997/07/28  18:21:08  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.68.7.1
log
@branched from 1.68
@
text
@a3 3
 * Revision 1.68  1995/12/05  11:12:26  daveb
 * Modified type of compile_file' to support Project Tool.
 *
@


1.68.6.1
log
@branched from 1.68
@
text
@a3 3
 * Revision 1.68  1995/12/05  11:12:26  daveb
 * Modified type of compile_file' to support Project Tool.
 *
@


1.68.6.1.1.1
log
@branched from 1.68.6.1
@
text
@a3 3
 * Revision 1.68.6.1  1996/12/17  17:49:49  hope
 * branched from 1.68
 *
@


1.68.5.1
log
@branched from 1.68
@
text
@a3 3
 * Revision 1.68  1995/12/05  11:12:26  daveb
 * Modified type of compile_file' to support Project Tool.
 *
@


1.68.4.1
log
@branched from 1.68
@
text
@a3 3
 * Revision 1.68  1995/12/05  11:12:26  daveb
 * Modified type of compile_file' to support Project Tool.
 *
@


1.68.4.1.1.1
log
@branched from 1.68.4.1
@
text
@a3 3
 * Revision 1.68.4.1  1996/11/14  12:52:06  hope
 * branched from 1.68
 *
@


1.68.3.1
log
@branched from 1.68
@
text
@a3 3
 * Revision 1.68  1995/12/05  11:12:26  daveb
 * Modified type of compile_file' to support Project Tool.
 *
@


1.68.2.1
log
@branched from 1.68
@
text
@a3 3
 * Revision 1.68  1995/12/05  11:12:26  daveb
 * Modified type of compile_file' to support Project Tool.
 *
@


1.68.1.1
log
@branched from 1.68
@
text
@a3 3
 * Revision 1.68  1995/12/05  11:12:26  daveb
 * Modified type of compile_file' to support Project Tool.
 *
@


1.67
log
@Add sml_cache to interface for compile_file' to improve finding
of .mo files
@
text
@d4 4
d245 1
a245 1
  type Module
d256 1
a256 1
  val compile_file : Info.options -> Options.options -> string list -> unit
d258 5
a262 1
  val compile_module : Info.options -> Options.options -> string list -> unit
d264 1
a264 1
  val compile_pervasive : Info.options -> Options.options -> unit
d266 1
a266 2
  type cache
  type ModuleCache
d268 1
a268 1
  val empty_cache : cache
d270 1
a270 8
  (* The boolean determines whether the module is compiled as pervasive.
     The first ModuleCache is for ordinary mo files,
     the second for pervasive mo files.
     The returned one is the update pervasive mo cache *)
  val compile_file' :
    Info.options ->
    Options.options * cache * ModuleCache * ModuleCache * ModuleCache * Module * bool ->
    cache * ModuleCache * ModuleCache
d272 1
a272 1
  val print_timings   : bool ref
@


1.66
log
@Removing show_absyn etc.  These are now redundant.
@
text
@d4 3
a8 1
./
d269 1
a269 1
    Options.options * cache * ModuleCache * ModuleCache * Module * bool ->
@


1.65
log
@Removed some redundant values
./
@
text
@d4 4
a269 11
  val show_absyn      : bool ref
  val show_lambda     : bool ref
  val show_opt_lambda : bool ref
  val show_environ    : bool ref
  val show_mir        : bool ref
  val show_opt_mir    : bool ref
  val show_mach       : bool ref
  val output_lambda   : bool ref

  val do_lambda_opt   : bool ref

a270 1
  val do_check_bindings : bool ref
@


1.64
log
@Improved caching of module ids
@
text
@d4 3
a265 4
  val test_string : string -> unit

  val lambda_optimisation_switches : (string * bool ref) list

a277 1
  val print_minor_timings   : bool ref
@


1.63
log
@added compile_module.
@
text
@d4 3
d261 1
a261 1
    cache * ModuleCache
@


1.62
log
@Changed FileNameCache to ModuleCache.
@
text
@d4 3
d240 5
a244 10
  val compile_file :
    Info.options ->
    Options.options ->
    string list ->
    unit

  val compile_pervasive :
    Info.options ->
    Options.options ->
    unit
@


1.61
log
@Merging in bug fixes
@
text
@d4 3
d249 1
a249 1
  type FileNameCache
d254 1
a254 1
     The first FileNameCache is for ordinary mo files,
d259 2
a260 2
    Options.options * cache * FileNameCache * FileNameCache * Module * bool ->
    cache * FileNameCache
@


1.60
log
@Changed type of compile_file to take a list of strings, so that caches can
be preserved between each compilation (I haven't implemented this yet).
Changed type of compile_file' to take a filename cache and a module id
instead of a file.
@
text
@d4 12
d251 3
a253 1
     The first FileNameCache is for sml files, the second for mo files. *)
d256 2
a257 2
    Options.options * cache * FileNameCache * Module * bool ->
    cache
@


1.60.1.1
log
@Fork for bug fixing
@
text
@a3 6
Revision 1.60  1993/08/28  16:37:06  daveb
Changed type of compile_file to take a list of strings, so that caches can
be preserved between each compilation (I haven't implemented this yet).
Changed type of compile_file' to take a filename cache and a module id
instead of a file.

@


1.60.1.2
log
@changed comile_file' to take and return a pervasive mo cache.
@
text
@a3 3
Revision 1.60.1.1  1993/08/28  16:37:06  jont
Fork for bug fixing

d245 1
a245 3
     The first FileNameCache is for ordinary mo files,
     the second for pervasive mo files.
     The returned one is the update pervasive mo cache *)
d248 2
a249 2
    Options.options * cache * FileNameCache * FileNameCache * Module * bool ->
    cache * FileNameCache
@


1.59
log
@Added output_lambda option.
@
text
@d4 3
d211 1
a211 1
  type ModuleId
d225 1
a225 1
    string ->
d234 1
d238 2
a239 1
  (* The boolean determines whether the module is compiled as pervasive. *)
d242 1
a242 1
    Options.options * cache * ModuleId * bool ->
@


1.58
log
@Added a compile_pervasive function.  Removed pervasive_library_dir.
Changed the type of compile to take a moduleid instead of a string.
@
text
@d4 4
d251 1
@


1.57
log
@Removed show_match.
@
text
@d4 3
d204 1
d221 5
d230 1
d233 1
a233 1
    Options.options * cache * string ->
a253 1
  val pervasive_library_dir : string ref
@


1.56
log
@Exposed lambda optimisation switches
@
text
@d4 3
a230 1
  val show_match      : bool ref
@


1.55
log
@Signature revisions
@
text
@d4 3
d224 2
@


1.54
log
@Options & Info changes
@
text
@d4 3
d181 2
a183 2
require "../typechecker/basistypes";
require "../parser/parser";
a184 1
require "../mir/mirtypes";
d188 3
a191 10
  structure Parser : PARSER
  structure BasisTypes : BASISTYPES
  structure EnvironTypes : ENVIRONTYPES
  structure MirTypes: MIRTYPES

  sharing MirTypes.Debugger_Types.Datatypes = EnvironTypes.LambdaTypes.Datatypes =
          BasisTypes.Datatypes

  sharing type Parser.Absyn.Type = BasisTypes.Datatypes.Type
  sharing type Parser.Absyn.Structure = BasisTypes.Datatypes.Structure
d193 2
d197 1
a197 1
    CB of (Parser.ParserBasis * BasisTypes.Basis * EnvironTypes.Top_Env)
d203 1
a203 1
  val error_output_level : Parser.Lexer.Info.severity ref
d206 2
a207 2
    Parser.Lexer.Info.options ->
    MirTypes.Debugger_Types.Options.options ->
d216 2
a217 2
    Parser.Lexer.Info.options ->
    MirTypes.Debugger_Types.Options.options * cache * string ->
@


1.53
log
@Typechecker structure changes
@
text
@d4 3
a191 1
  sharing Parser.Lexer.Info = MirTypes.Debugger_Types.Info
d193 5
a197 1
          Parser.Absyn.Datatypes = BasisTypes.Datatypes
a201 2
  val default_compiler_options: MirTypes.options

d209 4
a212 4
	MirTypes.Debugger_Types.Info.options ->
	  MirTypes.options ->
	  string ->
	  unit
d215 1
d217 5
a221 3
  val compile_file' : MirTypes.Debugger_Types.Info.options ->
			MirTypes.options * cache * string ->
			cache
@


1.52
log
@Changed sharing.
@
text
@d4 3
d176 1
a176 1
require "../typechecker/basis";
d185 1
a185 1
  structure Basis : BASIS
d191 1
a191 1
          Parser.Absyn.Datatypes = Basis.Tyvarenv.Datatypes
d194 1
a194 1
    CB of (Parser.ParserBasis * Basis.Basis * EnvironTypes.Top_Env)
@


1.51
log
@Added show_mach to allow toplevel printing of machine code
@
text
@d4 3
d187 2
@


1.50
log
@Removed a number of duplicated signatures and structures
@
text
@d4 3
d217 2
@


1.49
log
@Removed the references for doing profiling etc, no longer used
@
text
@d4 3
a169 1
require "../debugger/debugger_types";
a177 1
  structure Debugger_Types : DEBUGGER_TYPES
d180 2
d194 1
a194 1
	MirTypes.Info.options ->
d201 1
a201 1
  val compile_file' : MirTypes.Info.options ->
@


1.48
log
@Changes to propagate compiler options as parameters instead of references.
@
text
@d4 3
a203 6
  val set_debug_level : int -> unit
  val generate_profiling : bool ref
  val generate_debug_information : bool ref
  val print_generated_debug_information : bool ref
  val generate_debug_inhibit_warnings : bool ref

a211 1
  val force_non_leaf  : bool ref
@


1.47
log
@Modified to remove redundant info signatures
@
text
@d4 3
d165 1
d174 1
d179 2
d187 5
a191 1
  val compile_file : Parser.Lexer.Info.options -> string -> unit
d195 3
a197 1
  val compile_file' : Parser.Lexer.Info.options -> cache * string -> cache
a213 1
  val show_mach       : bool ref
@


1.46
log
@Changes to make show_id_class and show_eq_info part of Info structure
instead of references.
@
text
@d4 4
a157 1
require "../main/info";
@


1.45
log
@Removed Info structure from parser, tidied upderived
@
text
@d4 3
d154 1
d177 1
a177 5
  val compile_ts : 
    Parser.Lexer.TokenStream * compiler_basis * bool * Debugger_Types.information ->
    Parser.Absyn.TopDec * compiler_basis * EnvironTypes.LambdaTypes.LambdaExp * Debugger_Types.information

  val compile_file : string -> unit
d181 1
a181 1
  val compile_file' : cache * string -> cache
a200 1
  val show_id_class   : bool ref
a206 3

  val lambda_print_margin : int ref

@


1.44
log
@Changed Error structure to Info
@
text
@d4 3
a163 2
(*  sharing Parser.Info = Parser.Lexer.Info *)

d171 1
a171 1
  val error_output_level : Parser.Info.severity ref
@


1.43
log
@Added a cache of consistency information to compile_file.
@
text
@d4 3
d161 1
a161 1
  sharing Parser.Error = Parser.Lexer.Error
d170 1
a170 1
  val error_output_level : Parser.Error.severity ref
@


1.42
log
@Removed Error from toplevel signature
@
text
@d4 3
d174 4
@


1.41
log
@Tynames now have a slot recording their definition point
@
text
@d4 3
a145 1
require "error";
a148 1
  structure Error : ERROR
d155 1
a155 1
  sharing Error = Parser.Error = Parser.Lexer.Error
d164 1
a164 1
  val error_output_level : Error.severity ref
@


1.40
log
@Added sharing contraint on Error to signature.
@
text
@d4 3
a188 1
  val show_eq_info    : bool ref
@


1.39
log
@Removed add_fn_names (obsolete)
@
text
@d4 3
d150 2
@


1.38
log
@show_id_class controls printing of id classes (VAR, CON or EXCON).
show_eq_info controls printing of equality attribute of tycons.
@
text
@d4 4
a179 1
  val add_fn_names    : bool ref
@


1.37
log
@Removed Lexer from toplevel signature
@
text
@d4 3
d177 3
a179 1
  val force_non_leaf : bool ref
@


1.36
log
@Created a type `information' which wraps up the debugger information
needed in so many parts of the compiler.
Added `augment'.
@
text
@d4 5
a128 1
require "../lexer/lexer";
a135 1
  structure Lexer : LEXER
d151 1
a151 1
    Lexer.TokenStream * compiler_basis * bool * Debugger_Types.information ->
@


1.35
log
@Added flag to switch off warning messages in generating recipes
@
text
@d4 3
d143 2
d148 2
a149 12
    Lexer.TokenStream *
    compiler_basis *
    bool *
    (string,
     EnvironTypes.LambdaTypes.Datatypes.Type * bool *
     (int * Debugger_Types.Backend_Annotation) list) Debugger_Types.Datatypes.NewMap.T
    ->
    Parser.Absyn.TopDec *
    compiler_basis *
    EnvironTypes.LambdaTypes.LambdaExp *
    (string,EnvironTypes.LambdaTypes.Datatypes.Type * bool *
     (int * Debugger_Types.Backend_Annotation) list) Debugger_Types.Datatypes.NewMap.T
@


1.34
log
@Installed central error reporting mechanism.
@
text
@d4 3
d164 1
@


1.33
log
@Removed some redundant structures and sharing
@
text
@d4 3
d120 1
d124 1
a131 2
  exception STOP

d137 2
d140 10
a149 5
    Lexer.TokenStream * compiler_basis *
    bool * 
    (string,EnvironTypes.LambdaTypes.Datatypes.Type * bool *
     (int * Debugger_Types.Backend_Annotation) list) Debugger_Types.Datatypes.NewMap.T ->
    Parser.Absyn.TopDec * compiler_basis * EnvironTypes.LambdaTypes.LambdaExp *
d151 1
a151 1
     (int * Debugger_Types.Backend_Annotation) list) Debugger_Types.Datatypes.NewMap.T 
a181 1
  val only_upto_lambda : bool ref
@


1.32
log
@Propogation of information about exceptions
@
text
@d4 3
a114 1
require "../lambda/lambdatypes";
a124 1
  structure LambdaTypes : LAMBDATYPES
d137 5
a141 5
    (string,LambdaTypes.Datatypes.Type * bool *
     (int * Debugger_Types.Backend_Annotation) list) Debugger_Types.Map.T ->
    Parser.Absyn.TopDec * compiler_basis * LambdaTypes.LambdaExp *
    (string,LambdaTypes.Datatypes.Type * bool *
     (int * Debugger_Types.Backend_Annotation) list) Debugger_Types.Map.T 
@


1.31
log
@Added details about leafness to the debug information
@
text
@d4 3
d114 1
d124 1
d133 8
a140 2
  val compile_ts : Lexer.TokenStream * compiler_basis ->
    Parser.Absyn.TopDec * compiler_basis * LambdaTypes.LambdaExp
@


1.30
log
@Made changes to allow mo files to be copied.
@
text
@d4 3
d150 1
@


1.29
log
@Exception stop exported so it can be caught
@
text
@d4 3
d152 1
a152 1
  val pervasive_library_path : string ref
@


1.28
log
@Added the function set_debug_level
@
text
@d4 3
d114 2
@


1.27
log
@Added return of abstract syntax tree to compile_ts
@
text
@d4 3
d124 1
@


1.26
log
@Removed top_level from signature, not required
@
text
@d4 3
d115 1
a115 1
    compiler_basis * LambdaTypes.LambdaExp
@


1.25
log
@Removed obsolete memory profiling code.
@
text
@d4 3
a117 2
  val top_level : unit -> unit

a142 1

@


1.24
log
@Modified spec of compile_ts to return lambda expression
@
text
@d4 3
a117 1
  val generate_memory_profiling : bool ref
@


1.23
log
@Added switch to allow compilation to stop at
lambda, and also display of size of lambda expr.
@
text
@d4 4
d106 1
a106 1
    compiler_basis * LambdaTypes.binding list
@


1.22
log
@Changed to use (much) faster Lambda Print.
@
text
@d4 4
d133 2
d136 1
@


1.21
log
@Modified signature to allow compile_ts to return some code
@
text
@d4 3
d128 1
@


1.20
log
@Added functions to do compiling and return results
@
text
@d4 3
d77 1
d87 1
d94 2
a95 1
  val compile_ts : Lexer.TokenStream * compiler_basis -> compiler_basis
@


1.19
log
@Added flags for the recording of debug type information
@
text
@d4 3
d71 4
d79 12
@


1.18
log
@Added memory profiling flag
@
text
@d4 3
d80 2
@


1.17
log
@Added do_check_bindings bool ref to control the checking of uniqueness
of bound lambda variable names. Default off
@
text
@d4 4
d76 1
@


1.16
log
@First version of the profiler
@
text
@d4 3
d86 1
@


1.15
log
@Added bool ref for add_fn_names to control addition of function names
@
text
@d4 3
d67 2
@


1.14
log
@Added show_match to control printing of match trees
@
text
@d4 3
d74 1
@


1.13
log
@New pervasive library
@
text
@d4 3
d63 1
@


1.12
log
@Added flags to control timing of the various sections
@
text
@d4 3
d70 2
@


1.11
log
@Added do_lambda_opt switch
@
text
@d4 3
d64 4
@


1.10
log
@Removed unnecessary items from signature
@
text
@d4 3
a42 6
(*
require "../parser/parser";
require "../typechecker/basis";
require "../lambda/environtypes";
require "../lambda/lambdatypes";
*)
a45 6
(*
  structure Parser : PARSER
  structure Basis : BASIS
  structure EnvironTypes : ENVIRONTYPES
  structure LambdaTypes : LAMBDATYPES
*)
a46 19
(*
  datatype compiler_basis = CB of (Parser.ParserBasis * Basis.Basis * EnvironTypes.Top_Env)

  val empty_cb : compiler_basis

  val initial_cb : compiler_basis
  val augment_cb : compiler_basis * compiler_basis -> compiler_basis

  val produce_module : bool ref

  (* compile_program tokenises, parses, typechecks and code generates each
   topdec in turn till end of stream. The resultant Ten15 is a load which
   generates a tuple for all the declared values, structures etc. *)

  val compile_program : 
    Lexer.TokenStream * compiler_basis ->
      LambdaTypes.LambdaExp * compiler_basis

*)
d60 1
@


1.9
log
@Added diagnostic to the signature
@
text
@d4 3
d40 1
a42 1
require "../lexer/lexer";
d45 1
d49 1
a51 1
  structure Lexer : LEXER
d54 1
d56 1
a65 1
(*
@


1.8
log
@Removed compile_program from the spec
@
text
@d2 4
a5 5
require "../parser/parser";
require "../typechecker/basis";
require "../lexer/lexer";
require "../lambda/environtypes";
require "../lambda/lambdatypes";
a6 2
(*
$Log:	toplevel.sml,v $
d36 7
d50 1
a50 1

@


1.7
log
@Added show_mach for final code printing
@
text
@d10 3
d56 1
d65 1
@


1.6
log
@Added show_lambda, show_opt_lambda, show_environ
switches.
@
text
@d10 4
d73 1
@


1.5
log
@Added show_opt_mir to control production and printing of optimised
intermediate code
@
text
@d10 4
d63 6
a68 3
  val show_absyn : bool ref
  val show_mir   : bool ref
  val show_opt_mir   : bool ref
@


1.4
log
@Added switch for mir printing too.
@
text
@d10 3
d61 1
@


1.3
log
@Added switch for absyn printing so that we can
spot troublesome declarations in large files
with the present parser.
@
text
@d10 5
d57 1
@


1.2
log
@Completed to handle initial environment and compile files and strings
@
text
@d10 3
d50 2
@


1.1
log
@Initial revision
@
text
@d9 3
a11 1
$Log$
d13 1
d43 2
@
