head	1.121;
access;
symbols
	MLW_daveb_inline_1_4_99:1.119.1
	MLWorks_21c0_1999_03_25:1.119
	MLWorks_20c1_1998_08_20:1.116
	MLWorks_20c0_1998_08_04:1.116
	MLWorks_20b2c2_1998_06_19:1.115
	MLWorks_20b2_Windows_1998_06_12:1.114
	MLWorks_20b1c1_1998_05_07:1.113
	MLWorks_20b0_1998_04_07:1.110
	MLWorks_20b0_1998_03_20:1.110
	MLWorks_20m2_1998_02_16:1.108
	MLWorks_20m1_1997_10_23:1.106
	MLWorks_11r1:1.98.1.3.1.2.1
	MLWorks_workspace_97:1.105.2
	MLWorks_dt_wizard:1.105.1
	MLWorks_11c0_1997_09_09:1.98.1.3.1.2
	MLWorks_10r3:1.98.1.3.3
	MLWorks_10r2_551:1.98.1.3.2
	MLWorks_11:1.98.1.3.1
	MLWorks_1_0_r2c2_1997_07_28:1.98.1.3
	MLWorks_20m0_1997_06_20:1.105
	MLWorks_1_0_r2c2_1997_06_14:1.98.1.3
	MLWorks_1_0_r2c1_released_1997_05_23:1.98.1.3
	MLWorks_1_0_r2c1_1997_05_12:1.98.1
	MLWorks_BugFix_1997_04_24:1.99
	MLWorks_1_0_r2_Win32_1997_04_11:1.98
	MLWorks_1_0_r2_Unix_1997_04_04:1.98
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.89.3.1.1
	MLWorks_gui_1996_12_18:1.89.4
	MLWorks_1_0_Win32_1996_12_17:1.89.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.89.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.89.1.1
	MLWorks_1_0_Irix_1996_11_28:1.89.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.89.2
	MLWorks_1_0_Unix_1996_11_14:1.89.1
	MLWorks_Open_Beta2_1996_10_11:1.84.3
	MLWorks_License_dev:1.84.2
	MLWorks_1_open_beta_1996_09_13:1.84.1
	MLWorks_Open_Beta_1996_08_22:1.84
	MLWorks_Beta_1996_07_02:1.82
	MLWorks_Beta_1996_06_07:1.82
	MLWorks_Beta_1996_06_06:1.82
	MLWorks_Beta_1996_06_05:1.82
	MLWorks_Beta_1996_06_03:1.82
	MLWorks_Beta_1996_05_31:1.82
	MLWorks_Beta_1996_05_30:1.81
	ML_beta_release_12/08/94:1.55
	ML_beta_release_03/08/94:1.55
	ML_revised_beta_release_25/05/94:1.52
	ML_final_beta_release_02/03/94:1.50
	mlworks-28-01-1994:1.43
	Release:1.37
	mlworks-beta-01-09-1993:1.37
	MLWorks-1-0-4-29/01/1993:1.11
	MLWorks-1-0-3-21/12/1992:1.10
	MLWorks-1-0-2-15/12/1992:1.9
	MLWorks-1-0-1-04/12/1992:1.7;
locks; strict;
comment	@ * @;


1.121
date	99.05.27.10.34.21;	author johnh;	state Exp;
branches;
next	1.120;

1.120
date	99.05.13.09.44.07;	author daveb;	state Exp;
branches;
next	1.119;

1.119
date	99.03.04.11.57.10;	author mitchell;	state Exp;
branches
	1.119.1.1;
next	1.118;

1.118
date	99.02.09.09.50.00;	author mitchell;	state Exp;
branches;
next	1.117;

1.117
date	99.02.05.11.56.03;	author mitchell;	state Exp;
branches;
next	1.116;

1.116
date	98.07.14.09.36.24;	author jkbrook;	state Exp;
branches;
next	1.115;

1.115
date	98.06.15.16.02.35;	author mitchell;	state Exp;
branches;
next	1.114;

1.114
date	98.05.29.17.40.05;	author jkbrook;	state Exp;
branches;
next	1.113;

1.113
date	98.05.01.16.34.55;	author mitchell;	state Exp;
branches;
next	1.112;

1.112
date	98.04.24.16.23.54;	author jont;	state Exp;
branches;
next	1.111;

1.111
date	98.04.15.13.36.04;	author johnh;	state Exp;
branches;
next	1.110;

1.110
date	98.03.03.08.49.15;	author mitchell;	state Exp;
branches;
next	1.109;

1.109
date	98.02.19.17.19.20;	author mitchell;	state Exp;
branches;
next	1.108;

1.108
date	98.02.06.11.33.26;	author johnh;	state Exp;
branches;
next	1.107;

1.107
date	97.11.25.11.08.02;	author johnh;	state Exp;
branches;
next	1.106;

1.106
date	97.10.10.09.19.06;	author daveb;	state Exp;
branches;
next	1.105;

1.105
date	97.06.10.09.06.01;	author johnh;	state Exp;
branches
	1.105.1.1
	1.105.2.1;
next	1.104;

1.104
date	97.05.30.17.11.42;	author daveb;	state Exp;
branches;
next	1.103;

1.103
date	97.05.29.15.28.28;	author johnh;	state Exp;
branches;
next	1.102;

1.102
date	97.05.27.15.53.58;	author johnh;	state Exp;
branches;
next	1.101;

1.101
date	97.05.27.11.12.52;	author daveb;	state Exp;
branches;
next	1.100;

1.100
date	97.05.12.16.12.05;	author jont;	state Exp;
branches;
next	1.99;

1.99
date	97.04.23.10.43.10;	author daveb;	state Exp;
branches;
next	1.98;

1.98
date	97.04.01.16.05.05;	author daveb;	state Exp;
branches
	1.98.1.1;
next	1.97;

1.97
date	97.03.27.14.48.21;	author daveb;	state Exp;
branches;
next	1.96;

1.96
date	97.03.25.13.43.08;	author matthew;	state Exp;
branches;
next	1.95;

1.95
date	97.03.21.10.58.01;	author johnh;	state Exp;
branches;
next	1.94;

1.94
date	97.02.28.12.53.10;	author jont;	state Exp;
branches;
next	1.93;

1.93
date	97.01.24.14.36.06;	author matthew;	state Exp;
branches;
next	1.92;

1.92
date	97.01.02.15.12.10;	author matthew;	state Exp;
branches;
next	1.91;

1.91
date	97.01.02.11.07.56;	author jont;	state Exp;
branches;
next	1.90;

1.90
date	96.12.19.11.57.31;	author jont;	state Exp;
branches;
next	1.89;

1.89
date	96.11.07.12.46.27;	author daveb;	state Exp;
branches
	1.89.1.1
	1.89.2.1
	1.89.3.1
	1.89.4.1;
next	1.88;

1.88
date	96.11.06.11.28.43;	author matthew;	state Exp;
branches;
next	1.87;

1.87
date	96.11.04.16.32.33;	author jont;	state Exp;
branches;
next	1.86;

1.86
date	96.10.29.17.11.25;	author io;	state Exp;
branches;
next	1.85;

1.85
date	96.10.17.12.54.14;	author jont;	state Exp;
branches;
next	1.84;

1.84
date	96.08.16.15.41.56;	author daveb;	state Exp;
branches
	1.84.1.1
	1.84.2.1
	1.84.3.1;
next	1.83;

1.83
date	96.07.18.17.27.58;	author jont;	state Exp;
branches;
next	1.82;

1.82
date	96.05.30.13.40.46;	author daveb;	state Exp;
branches;
next	1.81;

1.81
date	96.05.16.12.47.19;	author stephenb;	state Exp;
branches;
next	1.80;

1.80
date	96.05.14.14.19.51;	author matthew;	state Exp;
branches;
next	1.79;

1.79
date	96.05.08.13.32.41;	author stephenb;	state Exp;
branches;
next	1.78;

1.78
date	96.05.03.12.41.40;	author nickb;	state Exp;
branches;
next	1.77;

1.77
date	96.05.01.09.47.14;	author jont;	state Exp;
branches;
next	1.76;

1.76
date	96.04.30.09.13.16;	author matthew;	state Exp;
branches;
next	1.75;

1.75
date	96.04.29.11.54.12;	author jont;	state Exp;
branches;
next	1.74;

1.74
date	96.04.26.14.43.05;	author jont;	state Exp;
branches;
next	1.73;

1.73
date	96.04.17.14.25.20;	author stephenb;	state Exp;
branches;
next	1.72;

1.72
date	96.03.19.10.51.51;	author matthew;	state Exp;
branches;
next	1.71;

1.71
date	96.03.15.15.54.50;	author daveb;	state Exp;
branches;
next	1.70;

1.70
date	96.03.15.12.04.52;	author matthew;	state Exp;
branches;
next	1.69;

1.69
date	95.12.05.12.36.08;	author daveb;	state Exp;
branches;
next	1.68;

1.68
date	95.11.20.17.33.42;	author daveb;	state Exp;
branches;
next	1.67;

1.67
date	95.11.02.11.37.18;	author jont;	state Exp;
branches;
next	1.66;

1.66
date	95.10.30.11.31.39;	author jont;	state Exp;
branches;
next	1.65;

1.65
date	95.06.30.16.02.21;	author daveb;	state Exp;
branches;
next	1.64;

1.64
date	95.06.01.12.30.25;	author daveb;	state Exp;
branches;
next	1.63;

1.63
date	95.05.22.16.23.32;	author jont;	state Exp;
branches;
next	1.62;

1.62
date	95.05.02.12.07.45;	author matthew;	state Exp;
branches;
next	1.61;

1.61
date	95.04.20.19.38.25;	author daveb;	state Exp;
branches;
next	1.60;

1.60
date	95.04.19.11.11.50;	author jont;	state Exp;
branches;
next	1.59;

1.59
date	95.04.12.13.28.17;	author jont;	state Exp;
branches;
next	1.58;

1.58
date	95.04.05.14.31.01;	author matthew;	state Exp;
branches;
next	1.57;

1.57
date	95.02.14.14.24.17;	author matthew;	state Exp;
branches;
next	1.56;

1.56
date	95.01.17.16.54.24;	author daveb;	state Exp;
branches;
next	1.55;

1.55
date	94.08.01.12.53.10;	author daveb;	state Exp;
branches;
next	1.54;

1.54
date	94.06.23.11.41.15;	author daveb;	state Exp;
branches;
next	1.53;

1.53
date	94.06.21.16.02.39;	author nickh;	state Exp;
branches;
next	1.52;

1.52
date	94.03.22.16.32.49;	author daveb;	state Exp;
branches;
next	1.51;

1.51
date	94.03.08.11.49.44;	author daveb;	state Exp;
branches;
next	1.50;

1.50
date	94.03.01.12.47.12;	author nosa;	state Exp;
branches;
next	1.49;

1.49
date	94.02.28.07.15.49;	author nosa;	state Exp;
branches;
next	1.48;

1.48
date	94.02.24.15.52.07;	author daveb;	state Exp;
branches;
next	1.47;

1.47
date	94.02.24.15.30.28;	author nickh;	state Exp;
branches;
next	1.46;

1.46
date	94.02.24.13.52.07;	author nickh;	state Exp;
branches;
next	1.45;

1.45
date	94.02.21.17.12.09;	author daveb;	state Exp;
branches;
next	1.44;

1.44
date	94.02.02.17.05.53;	author daveb;	state Exp;
branches;
next	1.43;

1.43
date	93.12.23.17.40.06;	author daveb;	state Exp;
branches;
next	1.42;

1.42
date	93.12.17.16.26.56;	author matthew;	state Exp;
branches;
next	1.41;

1.41
date	93.12.06.12.02.51;	author daveb;	state Exp;
branches;
next	1.40;

1.40
date	93.11.04.16.29.30;	author jont;	state Exp;
branches;
next	1.39;

1.39
date	93.11.01.13.44.54;	author jont;	state Exp;
branches;
next	1.38;

1.38
date	93.09.07.09.27.12;	author nosa;	state Exp;
branches;
next	1.37;

1.37
date	93.08.28.16.51.20;	author daveb;	state Exp;
branches
	1.37.1.1;
next	1.36;

1.36
date	93.08.27.16.15.50;	author daveb;	state Exp;
branches;
next	1.35;

1.35
date	93.08.25.10.19.03;	author daveb;	state Exp;
branches;
next	1.34;

1.34
date	93.08.23.15.30.25;	author richard;	state Exp;
branches;
next	1.33;

1.33
date	93.08.20.12.31.33;	author jont;	state Exp;
branches;
next	1.32;

1.32
date	93.08.19.17.47.06;	author daveb;	state Exp;
branches;
next	1.31;

1.31
date	93.08.19.17.05.56;	author daveb;	state Exp;
branches;
next	1.30;

1.30
date	93.08.19.16.37.30;	author daveb;	state Exp;
branches;
next	1.29;

1.29
date	93.08.17.18.49.48;	author daveb;	state Exp;
branches;
next	1.28;

1.28
date	93.08.17.17.50.27;	author daveb;	state Exp;
branches;
next	1.27;

1.27
date	93.08.12.11.10.16;	author jont;	state Exp;
branches;
next	1.26;

1.26
date	93.08.02.09.45.10;	author nosa;	state Exp;
branches;
next	1.25;

1.25
date	93.05.28.18.44.47;	author jont;	state Exp;
branches;
next	1.24;

1.24
date	93.05.25.16.43.59;	author matthew;	state Exp;
branches;
next	1.23;

1.23
date	93.05.20.09.41.27;	author jont;	state Exp;
branches;
next	1.22;

1.22
date	93.05.11.16.41.36;	author jont;	state Exp;
branches;
next	1.21;

1.21
date	93.04.28.10.05.36;	author richard;	state Exp;
branches;
next	1.20;

1.20
date	93.04.07.15.48.54;	author jont;	state Exp;
branches;
next	1.19;

1.19
date	93.04.06.17.26.32;	author jont;	state Exp;
branches;
next	1.18;

1.18
date	93.04.05.10.33.17;	author matthew;	state Exp;
branches;
next	1.17;

1.17
date	93.04.01.13.12.17;	author jont;	state Exp;
branches;
next	1.16;

1.16
date	93.03.26.16.33.42;	author daveb;	state Exp;
branches;
next	1.15;

1.15
date	93.03.11.13.07.29;	author matthew;	state Exp;
branches;
next	1.14;

1.14
date	93.03.04.17.56.02;	author matthew;	state Exp;
branches;
next	1.13;

1.13
date	93.02.24.14.39.08;	author jont;	state Exp;
branches;
next	1.12;

1.12
date	93.02.09.12.35.20;	author matthew;	state Exp;
branches;
next	1.11;

1.11
date	93.01.05.18.09.16;	author jont;	state Exp;
branches;
next	1.10;

1.10
date	92.12.17.11.37.10;	author jont;	state Exp;
branches;
next	1.9;

1.9
date	92.12.08.20.32.34;	author jont;	state Exp;
branches;
next	1.8;

1.8
date	92.12.08.12.07.35;	author jont;	state Exp;
branches;
next	1.7;

1.7
date	92.12.04.15.50.24;	author richard;	state Exp;
branches;
next	1.6;

1.6
date	92.12.03.16.10.39;	author jont;	state Exp;
branches;
next	1.5;

1.5
date	92.11.27.19.09.20;	author daveb;	state Exp;
branches;
next	1.4;

1.4
date	92.11.23.11.48.02;	author jont;	state Exp;
branches;
next	1.3;

1.3
date	92.11.18.16.10.15;	author matthew;	state Exp;
branches;
next	1.2;

1.2
date	92.09.08.15.29.11;	author richard;	state Exp;
branches;
next	1.1;

1.1
date	92.09.01.13.11.22;	author richard;	state Exp;
branches;
next	;

1.37.1.1
date	93.08.28.16.51.20;	author jont;	state Exp;
branches;
next	1.37.1.2;

1.37.1.2
date	93.10.13.11.34.43;	author daveb;	state Exp;
branches;
next	;

1.84.1.1
date	96.09.13.11.17.59;	author hope;	state Exp;
branches;
next	;

1.84.2.1
date	96.10.07.16.07.49;	author hope;	state Exp;
branches;
next	1.84.2.2;

1.84.2.2
date	96.10.08.12.21.13;	author jont;	state Exp;
branches;
next	;

1.84.3.1
date	96.10.17.11.26.05;	author hope;	state Exp;
branches;
next	;

1.89.1.1
date	96.11.14.12.51.17;	author hope;	state Exp;
branches
	1.89.1.1.1.1;
next	;

1.89.1.1.1.1
date	96.11.28.15.02.21;	author hope;	state Exp;
branches;
next	;

1.89.2.1
date	96.11.22.18.10.31;	author hope;	state Exp;
branches;
next	;

1.89.3.1
date	96.12.17.17.49.07;	author hope;	state Exp;
branches
	1.89.3.1.1.1;
next	;

1.89.3.1.1.1
date	97.02.24.11.39.12;	author hope;	state Exp;
branches;
next	;

1.89.4.1
date	96.12.18.09.43.11;	author hope;	state Exp;
branches;
next	;

1.98.1.1
date	97.05.12.10.35.40;	author hope;	state Exp;
branches;
next	1.98.1.2;

1.98.1.2
date	97.05.14.14.07.03;	author daveb;	state Exp;
branches;
next	1.98.1.3;

1.98.1.3
date	97.05.19.17.56.00;	author daveb;	state Exp;
branches
	1.98.1.3.1.1
	1.98.1.3.2.1
	1.98.1.3.3.1;
next	;

1.98.1.3.1.1
date	97.07.28.18.21.23;	author daveb;	state Exp;
branches;
next	1.98.1.3.1.2;

1.98.1.3.1.2
date	97.08.07.09.45.24;	author daveb;	state Exp;
branches
	1.98.1.3.1.2.1.1;
next	;

1.98.1.3.1.2.1.1
date	97.10.07.11.46.56;	author jkbrook;	state Exp;
branches;
next	;

1.98.1.3.2.1
date	97.09.08.17.14.47;	author daveb;	state Exp;
branches;
next	;

1.98.1.3.3.1
date	97.09.09.14.10.39;	author daveb;	state Exp;
branches;
next	;

1.105.1.1
date	97.09.10.19.26.40;	author brucem;	state Exp;
branches;
next	;

1.105.2.1
date	97.09.11.20.56.39;	author daveb;	state Exp;
branches;
next	1.105.2.2;

1.105.2.2
date	97.09.17.16.23.10;	author daveb;	state Exp;
branches;
next	1.105.2.3;

1.105.2.3
date	97.11.04.13.57.05;	author daveb;	state Exp;
branches;
next	1.105.2.4;

1.105.2.4
date	97.11.11.15.51.45;	author daveb;	state Exp;
branches;
next	1.105.2.5;

1.105.2.5
date	97.11.20.17.00.43;	author daveb;	state Exp;
branches;
next	;

1.119.1.1
date	99.04.01.17.57.42;	author daveb;	state Exp;
branches;
next	;


desc
@Batch compiler command line parser.
@


1.121
log
@[Bug #190553]
FIx require statements to fix bootstrap compiler.
@
text
@(*  ==== TOP LEVEL BATCH COMPILER ====
 *
 *  Copyright (C) 1992 Harlequin Ltd
 *
 *  Description
 *  -----------
 *
 *  Revision Log
 *  ------------
 *  $Log: _batch.sml,v $
 * Revision 1.120  1999/05/13  09:44:07  daveb
 * [Bug #190553]
 * Replaced use of basis/exit with utils/mlworks_exit.
 *
 * Revision 1.119  1999/03/04  11:57:10  mitchell
 * [Bug #190511]
 * Fix target ordering
 *
 * Revision 1.118  1999/02/09  09:50:00  mitchell
 * [Bug #190505]
 * Support for precompilation of subprojects
 *
 * Revision 1.117  1999/02/05  11:56:03  mitchell
 * [Bug #190504]
 * Add ability to dump units in dependency order
 *
 * Revision 1.116  1998/07/14  09:36:24  jkbrook
 * [Bug #30435]
 * Remove user-prompting code
 *
 * Revision 1.115  1998/06/15  16:02:35  mitchell
 * [Bug #30418]
 * Handle project reading errors gracefully
 *
 * Revision 1.114  1998/05/29  17:40:05  jkbrook
 * [Bug #30411]
 * Handle licensing for free copies of MLWorks
 *
 * Revision 1.113  1998/05/01  16:34:55  mitchell
 * [Bug #50071]
 * setCurrentConfiguration now takes an option
 *
 * Revision 1.112  1998/04/24  16:23:54  jont
 * [Bug #70109]
 * Put print_messages on
 *
 * Revision 1.111  1998/04/15  13:36:04  johnh
 * [Bug #30319]
 * Make usage info consistent with man page about batch options.
 *
 * Revision 1.110  1998/03/03  08:49:15  mitchell
 * [Bug #70074]
 * Add depth limit support for signature printing
 *
 * Revision 1.109  1998/02/19  17:19:20  mitchell
 * [Bug #30349]
 * Fix to avoid non-unit sequence warnings
 *
 * Revision 1.108  1998/02/06  11:33:26  johnh
 * [Bug #30071]
 * Merge in Project Workspace changes.
 *
 * Revision 1.107  1997/11/25  11:08:02  johnh
 * [Bug #30134]
 * Replacing use of MLWorks.Deliver.deliver with Internal.save - deliver fn changed to exec only.
 *
 * Revision 1.106  1997/10/10  09:19:06  daveb
 * [Bug #30280]
 * No longer compile for R3000 by default on MIPS.
 *
 * Revision 1.105.2.5  1997/11/20  17:00:43  daveb
 * [Bug #30326]
 *
 * Revision 1.105.2.4  1997/11/11  15:51:45  daveb
 * [Bug #30017]
 * Added updateContextOptionsFromProjFile, to update the compiler options
 * when -mode is passed from the command line.
 *
 * Revision 1.105.2.3  1997/11/04  13:57:05  daveb
 * [Bug #30071]
 * Added new command-line arguments.
 *
 * Revision 1.105.2.2  1997/09/17  16:23:10  daveb
 * [Bug #30071]
 * Converted build system to project workspace.
 *
 * Revision 1.105.2.1  1997/09/11  20:56:39  daveb
 * branched from trunk for label MLWorks_workspace_97
 *
 * Revision 1.105  1997/06/10  09:06:01  johnh
 * [Bug #30160]
 * Fixed arg_exists function to return right value.
 *
 * Revision 1.104  1997/05/30  17:11:42  daveb
 * [Bug #30090]
 * Removed calls to MLWorks.IO.*
 *
 * Revision 1.103  1997/05/29  15:28:28  johnh
 * [Bug #30160]
 * Removed redundant pattern in match.
 *
 * Revision 1.102  1997/05/27  15:53:58  johnh
 * [Bug #20033]
 * Added -no-banner option and modified -silent option to suppress the prompt.
 *
 * Revision 1.101  1997/05/27  11:12:52  daveb
 * [Bug #30136]
 * Removed early-mips-r4000 option.
 *
 * Revision 1.100  1997/05/12  16:12:05  jont
 * [Bug #20050]
 * main/io now exports MLWORKS_IO
 *
 * Revision 1.99  1997/04/23  10:43:10  daveb
 * [Bug #30040]
 * Turned on local function optimisation by default.
 *
 * Revision 1.98  1997/04/01  16:05:05  daveb
 * [Bug #1995]
 * Changed the defaults settings of the MIPS-specific compiler options back to
 * the most general values, so that we can build and distribute images on the
 * R3000.
 *
 * Revision 1.97  1997/03/27  14:48:21  daveb
 * [Bug #1990]
 * Version.version_string is now Version.versionString, and a function instead
 * of a constant.
 *
 * Revision 1.96  1997/03/25  13:43:08  matthew
 * Renaming mips_r4000 option
 *
 * Revision 1.95  1997/03/21  10:58:01  johnh
 * [Bug #1965]
 * Added a handle for Io.NotSet exception in getting pervasive dir.
 *
 * Revision 1.94  1997/02/28  12:53:10  jont
 * [Bug #1935]
 * Modify handlers for OS.SysErr so they only handle what they should
 * Comment out unreferenced stuff when handling OS.SysEr
 *
 * Revision 1.93  1997/01/24  14:36:06  matthew
 * Adding architecture dependent options
 *
 * Revision 1.92  1997/01/02  15:12:10  matthew
 * Adding local function option
 *
 * Revision 1.91  1997/01/02  11:07:56  jont
 * [Bug #0]
 * Change unix to UNIX in order to use trademarked form
 *
 * Revision 1.90  1996/12/19  11:57:31  jont
 * [Bug #1851]
 * Give the default settings in the help info.
 *
 * Revision 1.89  1996/11/07  12:46:27  daveb
 * Revised licensing scheme to allow registration-style licensing.
 *
 * Revision 1.88  1996/11/06  11:28:43  matthew
 * [Bug #1728]
 * __integer becomes __int
 *
 * Revision 1.87  1996/11/04  16:32:33  jont
 * [Bug #1725]
 * Remove unsafe string operations introduced when String structure removed
 *
 * Revision 1.86  1996/10/29  17:11:25  io
 * removing toplevel String.
 *
 * Revision 1.85  1996/10/17  12:54:14  jont
 * Add license server stuff
 *
 * Revision 1.84.2.2  1996/10/08  12:21:13  jont
 * Add call to initialise license
 *
 * Revision 1.84.2.1  1996/10/07  16:07:49  hope
 * branched from 1.84
 *
 * Revision 1.84  1996/08/16  15:41:56  daveb
 * Removed -object-path from the usage message.
 *
 * Revision 1.83  1996/07/18  17:27:58  jont
 * Add option to turn on/off compilation messages from intermake
 *
 * Revision 1.82  1996/05/30  13:40:46  daveb
 * The Io exception is no longer at top level.
 *
 * Revision 1.81  1996/05/16  12:47:19  stephenb
 * Update wrt MLWorks.OS.arguments -> MLWorks.arguments change
 *
 * Revision 1.80  1996/05/14  14:19:51  matthew
 * Handle SysErr exception
 *
 * Revision 1.79  1996/05/08  13:32:41  stephenb
 * Update wrt move of file "main" to basis.
 *
 * Revision 1.78  1996/05/03  12:41:40  nickb
 * Change name of MLWorks.deliver
 *
 * Revision 1.77  1996/05/01  09:47:14  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
 * Revision 1.76  1996/04/30  09:13:16  matthew
 * Use basis integer structure
 *
 * Revision 1.75  1996/04/29  11:54:12  jont
 * MLWorks.save moved into MLWorks.Internal
 *
 * Revision 1.74  1996/04/26  14:43:05  jont
 * Change use of MLWorks.save to MLWorks.deliver when creating batch images.
 * This saves about 100k smaller images.
 *
 * Revision 1.73  1996/04/17  14:25:20  stephenb
 * Replace any use of MLWorks.exit by Exit.exit.
 *
 * Revision 1.72  1996/03/19  10:51:51  matthew
 * Changing command line args
 *
 * Revision 1.71  1996/03/15  15:54:50  daveb
 * Fixed use of Info.default_options.
 *
 * Revision 1.70  1996/03/15  12:04:52  matthew
 * Use hyphen as options separator
 *
 * Revision 1.69  1995/12/05  12:36:08  daveb
 * I forgot to uncomment the opt_handlers option handling, which I had commented
 * out while working on the project tool.
 *
 *  Revision 1.68  1995/11/20  17:33:42  daveb
 *  Modified to use new project stuff.
 *
 *  Revision 1.67  1995/11/02  11:37:18  jont
 *  Make default for optimisation of handlers true
 *
 *  Revision 1.66  1995/10/30  11:31:39  jont
 *  Adding opt_handlers compiler option
 *
 *  Revision 1.65  1995/06/30  16:02:21  daveb
 *  Added -float_precision option.
 *
 *  Revision 1.64  1995/06/01  12:30:25  daveb
 *  Separated user_options into tool-specific and context-specific parts.
 *
 *  Revision 1.63  1995/05/22  16:23:32  jont
 *  Ensure exit code propagated to shell on exit
 *
 *  Revision 1.62  1995/05/02  12:07:45  matthew
 *  Removing debug_polyvariables option
 *
 *  Revision 1.61  1995/04/20  19:38:25  daveb
 *  The path setting functions now handle the BadHomeName exception
 *  themselves, and take a location argument.  The FileSys structure is
 *  no longer needed.
 *
 *  Revision 1.60  1995/04/19  11:11:50  jont
 *  Add ability to set object_path
 *
 *  Revision 1.59  1995/04/12  13:28:17  jont
 *  Change FILESYS to FILE_SYS
 *
 *  Revision 1.58  1995/04/05  14:31:01  matthew
 *  Remving print_minor_timings
 *
 *  Revision 1.57  1995/02/14  14:24:17  matthew
 *  Change to debug option name
 *  ,
 *
 *  Revision 1.56  1995/01/17  16:54:24  daveb
 *  Replaced FileName parameter.
 *
 *  Revision 1.55  1994/08/01  12:53:10  daveb
 *  Moved preferences to separate structure.
 *
 *  Revision 1.54  1994/06/23  11:41:15  daveb
 *  Added -debug_poly_variables (on|off) and -generate_moduler (on|off).
 *
 *  Revision 1.53  1994/06/21  16:02:39  nickh
 *  Remove garbage collection performed before image save.
 *  (This is now done automatically in the runtime).
 *
 *  Revision 1.52  1994/03/22  16:32:49  daveb
 *  Changes to recompile.
 *
 *  Revision 1.51  1994/03/08  11:49:44  daveb
 *  Adding error message if user forgets file arguments.
 *  Removed description of -save from help message.
 *
 *  Revision 1.50  1994/03/01  12:47:12  nosa
 *  stepper option was missing.
 *
 *  Revision 1.49  1994/02/28  07:15:49  nosa
 *  New compiler options generate_stepper and generate_moduler.
 *
 *  Revision 1.48  1994/02/24  15:52:07  daveb
 *  Change to type of Io.set_pervasive_dir.
 *
 *  Revision 1.47  1994/02/24  15:30:28  nickh
 *  Fix the storage manager stuff.
 *
 *  Revision 1.46  1994/02/24  13:52:07  nickh
 *  Change the GC interface for collecting the whole heap.
 *
 *  Revision 1.45  1994/02/21  17:12:09  daveb
 *  Added handler for Encapsulate.BadInput.
 *
 *  Revision 1.44  1994/02/02  17:05:53  daveb
 *  Removed munging of file names, since this is now done properly by FileName.
 *
 *  Revision 1.43  1993/12/23  17:40:06  daveb
 *  Changed default compiler function to suit new regime.
 *
 *  Revision 1.42  1993/12/17  16:26:56  matthew
 *  Added maximum_str_depth to options.
 *
 *  Revision 1.41  1993/12/06  12:02:51  daveb
 *  Changed -compile option to -compile_file, hidden from users.
 *  Changed -recompile option to -compile.
 *
 *  Revision 1.40  1993/11/04  16:29:30  jont
 *  Added interrupt option
 *
 *  Revision 1.39  1993/11/01  13:44:54  jont
 *  Fixed for new options
 *
 *  Revision 1.38  1993/09/07  09:27:12  nosa
 *  New compiler option debug_polyvariables for polymorphic debugger.
 *
 *  Revision 1.37  1993/08/28  16:51:20  daveb
 *  The compile and recompile functions now take lists of module names,
 *  so that caches can be preserved across compilations.
 *
 *  Revision 1.36  1993/08/27  16:15:50  daveb
 *  Corrected help message.
 *
 *  Revision 1.35  1993/08/25  10:19:03  daveb
 *  Allow ".sml" extension on module names, for simplicity.
 *
 *  Revision 1.34  1993/08/23  15:30:25  richard
 *  Added output_lambda option.
 *
 *  Revision 1.33  1993/08/20  12:31:33  jont
 *  Added print_timings and print_minor_timings command line options.
 *  These are defaulted (in toplevel) off.
 *
 *  Revision 1.32  1993/08/19  17:47:06  daveb
 *  Changed -show_dependencies to -check_dependencies.
 *
 *  Revision 1.31  1993/08/19  17:05:56  daveb
 *  Added call to Io.set_source_path_from_env.
 *  Fixed translation of foo/bar to foo.bar.
 *
 *  Revision 1.30  1993/08/19  16:37:30  daveb
 *  Added better error message.  Changed -intercept to -trace_profile.
 *  Replaced -no_execute [on|off] with -show_dependencies.
 *
 *  Revision 1.29  1993/08/17  18:49:48  daveb
 *  Changed -pervasive-dir argument to -pervasive_dir, because the other
 *  arguments and the environment variable use underscores instead of hyphens.
 *
 *  Revision 1.28  1993/08/17  17:50:27  daveb
 *  Added -source_path and -recompile_pervasive command line arguments.
 *  Other minor changes to reflect use of ModuleIds.
 *
 *  Revision 1.27  1993/08/12  11:10:16  jont
 *  Fixed up after user_options changes
 *
 *  Revision 1.26  1993/08/02  09:45:10  nosa
 *  New compiler option debug_variables for local and closure variable
 *  inspection in the debugger.
 *
 *  Revision 1.25  1993/05/28  18:44:47  jont
 *  Updated following options changes
 *
 *  Revision 1.24  1993/05/25  16:43:59  matthew
 *  Removed catchall handler and replaced with a handler for Info.Stop
 *
 *  Revision 1.23  1993/05/20  09:41:27  jont
 *  Fixed problems with option changes
 *
 *  Revision 1.22  1993/05/11  16:41:36  jont
 *  Added make -n type facility
 *
 *  Revision 1.21  1993/04/28  10:05:36  richard
 *  Unified profiling and tracing options into `intercept'.
 *  The batch compiler now returns a status code.
 *
 *  Revision 1.20  1993/04/07  15:48:54  jont
 *  Added command line options for overloading on strings and NJ open specs
 *
 *  Revision 1.19  1993/04/06  17:26:32  jont
 *  Moved user_options and version from interpreter to main
 *  Removed the code explosion from lack of updatable records. Now done
 *  in terms of user_options
 *
 *  Revision 1.18  1993/04/05  10:33:17  matthew
 *  Changed ordof to MLWorks.String.ordof
 *
 *  Revision 1.17  1993/04/01  13:12:17  jont
 *  Changed to use default_compat_options
 *
 *  Revision 1.16  1993/03/26  16:33:42  daveb
 *  Modified option handling to reflect changes in the Options type.
 *
 *  Revision 1.15  1993/03/11  13:07:29  matthew
 *  Options changes
 *
 *  Revision 1.14  1993/03/04  17:56:02  matthew
 *  Options & Info changes
 *
 *  Revision 1.13  1993/02/24  14:39:08  jont
 *  Made to use get_pervasive_dir from io
 *
 *  Revision 1.12  1993/02/09  12:35:20  matthew
 *  Changed image saving GC
 *
 *  Revision 1.11  1993/01/05  18:09:16  jont
 *  Modified to deal with extra options for code listing
 *
 *  Revision 1.10  1992/12/17  11:37:10  jont
 *  Added a handler for storage manager exceptions during image save
 *
 *  Revision 1.9  1992/12/08  20:32:34  jont
 *  Removed a number of duplicated signatures and structures
 *
 *  Revision 1.8  1992/12/08  12:07:35  jont
 *  Set up with sensible default compilation options. Used user supplied
 *  compilation options for profile, debug, trace
 *
 *  Revision 1.7  1992/12/04  15:50:24  richard
 *  Now prints the correct version string.  GC is forced before image save
 *  using a hack.
 *
 *  Revision 1.6  1992/12/03  16:10:39  jont
 *  Brought up to date with changes to toplevel and recompile
 *
 *  Revision 1.5  1992/11/27  19:09:20  daveb
 *  Changes to make show_id_class and show_eq_info part of Info structure
 *  instead of references.
 *
 *  Revision 1.4  1992/11/23  11:48:02  jont
 *  Added interrogation of shell variable PERVASIVE_DIR to get pervasive-dir
 *  in default case. Caught exception coming out of failed compilations
 *  to avoid backtraces. Caught Io specifically in order to report file
 *  operation failures
 *
 *  Revision 1.3  1992/11/18  16:10:15  matthew
 *  Changed Error structure to Info
 *
 *  Revision 1.2  1992/09/08  15:29:11  richard
 *  Added verbose option and related output.  Not very neat.
 *
 *  Revision 1.1  1992/09/01  13:11:22  richard
 *  Initial revision
 *
 *)

require "../basis/__int";
require "../basis/__string";
require "../basis/__text_io";
require "../basis/__io";
require "../system/__os";

require "../utils/mlworks_exit";
require "encapsulate";
require "version";
require "license";
require "user_options";
require "mlworks_io";
require "toplevel";
require "proj_file";
require "batch";

functor Batch (
  structure Io		 : MLWORKS_IO
  structure User_Options : USER_OPTIONS
  structure ProjFile	 : PROJ_FILE
  structure TopLevel	 : TOPLEVEL
  structure Encapsulate	 : ENCAPSULATE
  structure Version	 : VERSION
  structure License	 : LICENSE
  structure Exit         : MLWORKS_EXIT

  sharing TopLevel.Options = User_Options.Options

  sharing type TopLevel.Info.Location.T = Io.Location = ProjFile.location
  sharing type TopLevel.Info.options = ProjFile.error_info
) : BATCH =
  struct
    structure Exit = Exit
    structure Options = TopLevel.Options
    structure Info = TopLevel.Info

    val verbose = ref false

    datatype compiler =
      NO_COMPILER
    | BATCH of Info.options -> Options.options -> string list -> unit
    | PROJECT of Info.options -> Options.options -> unit -> unit

    fun out s = TextIO.output (TextIO.stdErr, s)

    fun info message =
      if !verbose then
        (app out message;
         out "\n")
      else ()

    fun arg_exists (test_arg, []) = false
      | arg_exists (test_arg, (arg::args)) = 
	let 
	  val sz = size arg
	in
	  if sz = 0 orelse String.sub(arg, 0) <> #"-" then false
	  else
	    if substring (arg, 1, sz-1) = test_arg then true 
	    else 
	      arg_exists (test_arg, args)
	end

    fun updateContextOptionsFromProjFile
          (User_Options.USER_CONTEXT_OPTIONS (context_opts, _)) =
    let
      val (_, modeDetails, currentMode) = ProjFile.getModes ()
    in
      case currentMode of
        NONE => ()
      | SOME name =>
          case ProjFile.getModeDetails (name, modeDetails) of
            (* XXX - handler needed for NoConfigDetailsFound -
               or put this functionality in ProjFile *)
            r =>
	      (#generate_interruptable_code context_opts :=
		 !(#generate_interruptable_code r);
               #generate_interceptable_code context_opts :=
		 !(#generate_interceptable_code r);
               #generate_debug_info context_opts :=
		 !(#generate_debug_info r);
               #generate_variable_debug_info context_opts :=
		 !(#generate_variable_debug_info r);
               #optimize_leaf_fns context_opts :=
		 !(#optimize_leaf_fns r);
               #optimize_tail_calls context_opts :=
		 !(#optimize_tail_calls r);
               #optimize_self_tail_calls context_opts :=
		 !(#optimize_self_tail_calls r);
               #mips_r4000 context_opts :=
		 !(#mips_r4000 r);
               #sparc_v7 context_opts :=
		 !(#sparc_v7 r))
    end

    exception Error of string list
    exception Option of string

    fun usage () = 
      out
      "Usage:   mlbatch [options...]\n\
       \Options:\n\
       \  -verbose\n\
       \          Enable verbose mode.  When in verbose mode the system will\n\
       \          give messages indicating the various options interpreted\n\
       \          during argument processing, otherwise it will not.\n\
       \  -silent\n\
       \          Disable verbose mode.\n\
       \  -project file\n\
       \          Specifies the project file to use.  This must precede all the\n\
       \          following options on the command line.\n\
       \  -mode name\n\
       \          Specifies which mode to use.  Reports an error if the mode does\n\
       \          exist in the specified project file.  This option overrides the\n\
       \          setting of a mode as current in the project file.  If no mode is\n\
       \          specified on the command line, the mode specified as current in\n\
       \          the project file is used.\n\
       \  -target name\n\
       \          Specifies a target to recompile.\n\
       \          Multiple targets may be specified by repeated use of this option.\n\
       \          If any options are specified on the command line, the setting of\n\
       \          targets as current in the project file are ignored.  If no\n\
       \          targets are specified on the command line, those specified as\n\
       \          current in the project file are recompiled.\n\
       \  -configuration name\n\
       \          If the project includes configurations, this specifies which one\n\
       \          to use.  This option overrides the setting of a configuration as\n\
       \          current in the project file.\n\
       \          If a project includes configurations, and none is specified on the\n\
       \          command line, the configuration specified as current in the\n\
       \          project file is used.\n\
       \  -object-path dir\n\
       \          Specifies the directory in which to find/put the object files.\n\
       \          The project must have been specified earlier on the command line.\n\
       \          This overrides the specification in the project file.  If the\n\
       \          directory includes the string '%S', this is expanded to the\n\
       \          directory containing the source file.\n\
       \  -build\n\
       \          Builds the specified project using the current targets in the\n\
       \          current configuration (if any) with the current mode.\n\
       \  -show-build\n\
       \          Show the files that would be recompiled by the -build option.\n\
       \  -list-objects\n\
       \          Show all the files that are used in the building of the current\n\
       \          targets.\n\
       \  -dump-objects filename\n\
       \          Write a file containing all the object files needed to build the\n\
       \          current targets in dependency order.\n\
       \  -source-path path\n\ 
       \          Sets the path that mlbatch searches for source files.  'path' is\n\
       \          a colon-separated list of directories.  For example,\n\
       \          ~/ml/src:/usr/sml/src.  The default path contains the current\n\
       \          directory and the directory in which MLWorks was installed.\n\
       \  -compile files\n\
       \          For each named file, this option recursively compiles any files\n\
       \          on which that file depends that are out of date with respect to\n\
       \          their source.  No default.\n\
       \  -check-dependencies files\n\
       \          Process the source files in check-dependencies mode.  Inclusion of\n\
       \          the .sml suffix in source file names is optional.  Produces a list\n\
       \          of the source files that would be compiled if you submitted the\n\
       \          same list of files to the -compile option.\n\
       \  -old-definition [on|off]\n\
       \          When set to on, use the semantics of the old version of SML,\n\
       \          dating back to 1990.  Default set to off.\n\
       \  -debug [on|off]\n\
       \          Controls whether MLWorks generates debugging information.\n\
       \          Default off.\n\
       \  -debug-variables [on|off]\n\
       \          Controls whether MLWorks generates variable debugging information.\n\
       \          Default off.\n\
       \  -trace-profile [on|off]\n\
       \          Controls whether MLWorks generates code that can be traced\n\
       \          or profiled with the call counter.\n\
       \          Default off.\n\
       \  -interrupt [on|off]\n\
       \          Controls whether interruptable code is enabled.  Default off.\n\
       \  -mips-r4000-and-later [on|off]\n\
       \          Compile code for MIPS R4000 and later versions.\n\
       \          Default on.\n\
       \  -sparc-v7 [on|off]\n\
       \          Compile code for Version 7 of the SPARC architecture.\n\
       \          Default off.\n"

    val compiler = ref NO_COMPILER

    (* project is a flag used to indicate whether a project has been
       specified on the command line.  If none is specified, options to
       set the configuration, mode or targets report an error. *)
    val project = ref false

    (* targets is a list of targets specified on the command line (if any).
       After processing the arguments, these are set in the project.
       If none are specified on the command line, the setting in the
       project file is used.  *)
    val targets = ref []: string list ref

    (* dump_objects_filename, if not NONE, is set to the name of a file
       that is to receive the list of object files, in dependency order,
       constituting the current project. *)
    val dump_objects_filename = ref NONE : string option ref

    fun obey_options
	(tool_options as User_Options.USER_TOOL_OPTIONS(tool_opts, _),
	 context_options as User_Options.USER_CONTEXT_OPTIONS (context_opts, _),
	 args) =
    let
      fun aux [] = (tool_options, context_options, [], !compiler, rev(!targets))
      |   aux (arg::args) =
        let
          val sz = size arg
        in
          if sz = 0 orelse String.sub(arg, 0) <> #"-" then
            (tool_options, context_options, (arg::args), !compiler, !targets)
          else
            (case (substring (arg, 1, sz-1), args) of
               ("verbose", rest) =>
                 (verbose := true;
                  info ["Verbose mode."];
                  aux rest)
	     | ("print-timings", rest) =>
                 (TopLevel.print_timings := true;
                  info ["Printing major timings."];
                  aux rest)
             | ("silent", rest) =>
                 (info ["Silent mode."];
                  verbose := false;
                  aux rest)
             | ("pervasive-dir", dir::rest) =>
                 ((Io.set_pervasive_dir (dir, Info.Location.FILE "Command Line")
		   handle OS.SysErr _ =>
		     raise Error 
			     ["Invalid pervasive directory specification: ",
			      dir]);
		  info ["Pervasive library directory set to `",
			Io.get_pervasive_dir (), "'."]
		  handle Io.NotSet _ =>
		    raise Error ["Pervasive directory not set."];
		  aux rest)
             | ("object-path", dir::rest) =>
                 ((Io.set_object_path (dir, Info.Location.FILE "Command Line")
		   handle OS.SysErr _ =>
		     raise Error
			     ["Invalid object path specification: ",
			      dir]);
		  info ["Object path set to `", Io.get_object_path(), "'."]
		  handle Io.NotSet _ =>
		    raise Error ["Object path not set."];
		  aux rest)
	     | ("source-path", path::rest) =>
		 ((Io.set_source_path_from_string
		     (path, Info.Location.FILE "Command Line")
		   handle OS.SysErr _ =>
		     raise Error
			     ["Invalid source path specification: ", path]);
		  info ["Source path set to `", path, "'."];
		  aux rest)
             | ("float-precision", arg::rest) =>
		 (case Int.fromString arg of
                    SOME n =>
                      (info ["Precision of floating point printing set to ",
                             arg, "."];
                       (case tool_opts of
                          {float_precision, ...} =>
                            float_precision := n);
                          aux rest)
                  | _ => 
                      raise Option "float_precision")
             | ("opt-handlers", "on"::rest) =>
                 (info ["Optimised handlers enabled."];
		  (case context_opts of
		     {optimize_handlers, ...} =>
		       optimize_handlers := true);
		  aux rest)
             | ("opt-handlers", "off"::rest) =>
                 (info ["Optimised handlers disabled."];
		  (case context_opts of
		     {optimize_handlers, ...} =>
		       optimize_handlers := false);
		  aux rest)
             | ("local-functions", "on"::rest) =>
                 (info ["Local Functions enabled."];
		  (case context_opts of
		     {local_functions, ...} =>
		       local_functions := true);
		  aux rest)
             | ("local-functions", "off"::rest) =>
                 (info ["Local Functions disabled."];
		  (case context_opts of
		     {local_functions, ...} =>
		       local_functions := false);
		  aux rest)
             | ("debug", "on"::rest) =>
                 (info ["Debugging information enabled."];
		  (case context_opts of
		     {generate_debug_info, ...} =>
		       generate_debug_info := true);
		  aux rest)
             | ("debug", "off"::rest) =>
                 (info ["Debugging information disabled."];
		  (case context_opts of
		     {generate_debug_info, ...} =>
		       generate_debug_info := false);
		  aux rest)
             | ("debug-variables", "on"::rest) =>
                 (info ["Variable Debugging information enabled."];
		  (case context_opts of
		     {generate_variable_debug_info, ...} =>
		       generate_variable_debug_info := true);
		  aux rest)
             | ("debug-variables", "off"::rest) =>
                 (info ["Variable Debugging information disabled."];
		  (case context_opts of
		     {generate_variable_debug_info, ...} =>
		       generate_variable_debug_info := false);
		  aux rest)
             | ("generate-moduler", "on"::rest) =>
                 (info ["Module Debugging information enabled."];
		  (case context_opts of
		     {generate_moduler, ...} =>
		       generate_moduler := true);
		  aux rest)
             | ("generate_moduler", "off"::rest) =>
                 (info ["Module Debugging information disabled."];
		  (case context_opts of
		     {generate_moduler, ...} =>
		       generate_moduler := false);
		  aux rest)
             | ("interrupt", "on"::rest) =>
                 (info ["Interruptable code enabled."];
		  (case context_opts of
		     {generate_interruptable_code, ...} =>
		       generate_interruptable_code := true);
		  aux rest)
             | ("interrupt", "off"::rest) =>
                 (info ["Interruptable code disabled."];
		  (case context_opts of
		     {generate_interruptable_code, ...} =>
		       generate_interruptable_code := false);
		  aux rest)
             | ("trace-profile", "on"::rest) =>
                 (info ["Interception enabled."];
		  (case context_opts of
		     {generate_interceptable_code, ...} =>
		       generate_interceptable_code := true);
		  aux rest)
             | ("trace-profile", "off"::rest) =>
                 (info ["Interception disabled."];
		  (case context_opts of
		     {generate_interceptable_code, ...} =>
		       generate_interceptable_code := false);
		  aux rest)
             | ("mips-r4000-and-later", "on"::rest) =>
                 (info ["Compiling for MIPS R4000 and later"];
		  (#mips_r4000 context_opts) := true;
                  aux rest)
             | ("mips-r4000-and-later", "off"::rest) =>
                 (info ["Not compiling for MIPS R4000 and later"];
		  (#mips_r4000 context_opts) := false;
                  aux rest)
             | ("sparc-v7", "on"::rest) =>
                 (info ["Compiling for SPARC Version 7"];
		  (#sparc_v7 context_opts) := true;
                  aux rest)
             | ("sparc-v7", "off"::rest) =>
                 (info ["Not compiling for SPARC Version 7"];
		  (#sparc_v7 context_opts) := false;
                  aux rest)
	     | ("absyn", "on" :: rest) =>
                 (info ["abstract syntax tree printing enabled."];
		  (case tool_opts of
		     {show_absyn, ...} =>
		       show_absyn := true);
		  aux rest)
	     | ("absyn", "off" :: rest) =>
                 (info ["abstract syntax tree printing disabled."];
		  (case tool_opts of
		     {show_absyn, ...} =>
		       show_absyn := false);
		  aux rest)
	     | ("lambda", "on" :: rest) =>
                 (info ["lambda calculus printing enabled."];
		  (case tool_opts of
		     {show_lambda, ...} =>
		       show_lambda := true);
		  aux rest)
	     | ("lambda", "off" :: rest) =>
                 (info ["lambda calculus printing disabled."];
		  (case tool_opts of
		     {show_lambda, ...} =>
		       show_lambda := false);
		  aux rest)
	     | ("opt-lambda", "on" :: rest) =>
                 (info ["optimised lambda calculus printing enabled."];
		  (case tool_opts of
		     {show_opt_lambda, ...} =>
		       show_opt_lambda := true);
		  aux rest)
	     | ("opt-lambda", "off" :: rest) =>
                 (info ["optimised lambda calculus  printing disabled."];
		  (case tool_opts of
		     {show_opt_lambda, ...} =>
		       show_opt_lambda := false);
		  aux rest)
	     | ("environ", "on" :: rest) =>
                 (info ["lambda calculus environment printing enabled."];
		  (case tool_opts of
		     {show_environ, ...} =>
		       show_environ := true);
		  aux rest)
	     | ("environ", "off" :: rest) =>
                 (info ["lambda calculus environment printing disabled."];
		  (case tool_opts of
		     {show_environ, ...} =>
		       show_environ := false);
		  aux rest)
	     | ("mir", "on" :: rest) =>
                 (info ["machine independent representation printing enabled."];
		  (case tool_opts of
		     {show_mir, ...} =>
		       show_mir := true);
		  aux rest)
	     | ("mir", "off" :: rest) =>
                 (info ["machine independent representation printing disabled."];
		  (case tool_opts of
		     {show_mir, ...} =>
		       show_mir := false);
		  aux rest)
	     | ("opt-mir", "on" :: rest) =>
                 (info ["optimised machine independent representation printing enabled."];
		  (case tool_opts of
		     {show_opt_mir, ...} =>
		       show_opt_mir := true);
		  aux rest)
	     | ("opt-mir", "off" :: rest) =>
                 (info ["optimised machine independent representation printing disabled."];
		  (case tool_opts of
		     {show_opt_mir, ...} =>
		       show_opt_mir := false);
		  aux rest)
	     | ("machine", "on" :: rest) =>
                 (info ["machine code printing enabled."];
		  (case tool_opts of
		     {show_mach, ...} =>
		       show_mach := true);
		  aux rest)
	     | ("machine", "off" :: rest) =>
                 (info ["machine code printing disabled."];
		  (case tool_opts of
		     {show_mach, ...} =>
		       show_mach := false);
		  aux rest)
	     | ("old-definition", "on" :: rest) =>
		 (info ["Use semantics of old version of SML"];
		  (case context_opts of
		     {old_definition, ...} =>
		       old_definition := true);
		  aux rest)
	     | ("old-definition", "off" :: rest) =>
		 (info ["Use semantics of new version of SML"];
		  (case context_opts of
		     {old_definition, ...} =>
		       old_definition := false);
		  aux rest)
	     | ("nj-sig", "on" :: rest) =>
		 (info ["New Jersey signatures enabled."];
		  (case context_opts of
		     {nj_signatures, ...} =>
		       nj_signatures := true);
		  aux rest)
	     | ("nj-sig", "off" :: rest) =>
		 (info ["New Jersey signatures disabled."];
		  (case context_opts of
		     {nj_signatures, ...} =>
		       nj_signatures := false);
		  aux rest)
	     | ("project", file :: rest) =>
		 (info ["Reading Project file `", file, "'."];
		  ProjFile.open_proj file
                    handle ProjFile.InvalidProjectFile reason =>
  		      raise Error
		        ["Unable to read project file: ", reason, "."];
		  project := true;
		  aux rest)
	     | ("build", rest) =>
           	 (compiler := PROJECT TopLevel.build;
                  info ["Building project."];
                  aux rest)
	     | ("show-build", rest) =>
           	 (compiler := PROJECT TopLevel.show_build;
                  info ["Showing files to build project."];
                  aux rest)
	     | ("configuration", config :: rest) =>
		 (if !project then
           	    ProjFile.setCurrentConfiguration
		      (Info.make_default_options (),
		       Info.Location.FILE "<batch compiler:options>")
		      (SOME config)
		  else
		    raise Error
		      ["Configuration ", config,
		       " not set: no project specified."];
                  info ["Setting configuration to ", config, "."];
                  aux rest)
	     | ("mode", mode :: rest) =>
		 (if !project then
           	    (ProjFile.setCurrentMode
		       (Info.make_default_options (),
		        Info.Location.FILE "<batch compiler:options>")
		       mode;
		     updateContextOptionsFromProjFile (context_options))  
		  else
		    raise Error
		      ["Mode ", mode, " not set: no project specified."];
                  info ["Setting mode to ", mode, "."];
                  aux rest)
	     | ("target", target :: rest) =>
		 (if !project then
		    targets := target :: !targets
		  else
		    raise Error
		      ["Target ", target, " not set: no project specified."];
                  info ["Adding ", target, " to list of targets."];
                  aux rest)
             | ("compile-file", rest) =>
                 (compiler := BATCH TopLevel.compile_file;
                  info ["Compile single files mode."];
                  aux rest)
             | ("check-dependencies", rest) =>
           	 (compiler := BATCH TopLevel.check_dependencies;
                  info ["Checking dependencies."];
                  aux rest)
             | ("list-objects", rest) =>
           	 (compiler := BATCH TopLevel.list_objects;
                  info ["Listing object files."];
                  aux rest)
             | ("dump-objects", filename::rest) =>
                 (dump_objects_filename := SOME filename;
                  aux rest)
             | ("compile", rest) =>
           	 (compiler := BATCH TopLevel.recompile_file;
		  info ["Compile mode."];
                  aux rest)
             | ("compile-pervasive", rest) =>
                 (info ["Compiling pervasive library"];
                  TopLevel.recompile_pervasive
		    (Info.make_default_options ())
		    (User_Options.new_options (tool_options, context_options));
                  aux rest)
	   (* Nothing needs to be done for -no-banner as it was processed separately, 
	    * and earlier, but needs to be included as it is a valid option. *)
	     | ("no-banner", rest) =>
		  aux rest
             | ("save", filename::rest) =>
                 (info ["Saving image to `", filename, "'."];
		  ignore(MLWorks.Internal.save
		    (filename, fn () =>
				let
				  val x = obey(MLWorks.arguments())
				in
				  Exit.exit x
				end));
		  aux rest)
             | (other, rest) =>
                 raise Option other)
        end
    in
      aux args
    end

    and obey (args : string list) : Exit.status =
      (
       let
          val license_status = License.license License.ttyComplain
          val default_to_free : unit -> unit =
              MLWorks.Internal.Runtime.environment "license set edition"
       in
          case license_status of 
              SOME false => default_to_free ()
            | _  => () 
       end;

       (* we only know the edition to print after checking the license info *)
       if not (arg_exists("no-banner", args)) then
	 info [Version.versionString ()]
       else
	 ();
       Io.set_pervasive_dir_from_env (Info.Location.FILE "<Initialisation>");
       let
	 val default_batch_options =
	   Options.OPTIONS
	    {listing_options = Options.LISTINGOPTIONS {show_absyn = false,
						       show_lambda = false,
						       show_match = false,
						       show_opt_lambda = false,
						       show_environ = false,
						       show_mir = false,
						       show_opt_mir = false,
						       show_mach = false
						       },
	    compiler_options = Options.COMPILEROPTIONS {generate_debug_info = false,
                                                        debug_variables = false,
                                                        generate_moduler = false,
                                                        intercept = false,
							interrupt = false,
							opt_handlers = false,
							opt_leaf_fns = true,
							opt_tail_calls = true,
							opt_self_calls = true,
							local_functions = true,
							print_messages = true,
                                                        mips_r4000 = true,
                                                        sparc_v7 = false},
	    print_options = Options.PRINTOPTIONS {maximum_seq_size = 10,
						  maximum_string_size = 255,
						  maximum_ref_depth = 3,
						  maximum_str_depth = 2,
						  maximum_sig_depth = 1,
						  maximum_depth = 7,
						  float_precision = 10,
						  print_fn_details = false,
						  print_exn_details = true,
						  show_eq_info = false,
						  show_id_class = false},
	    compat_options = Options.default_compat_options,
	    extension_options = Options.default_extension_options}

	 val tool_options =
	   User_Options.make_user_tool_options
	     default_batch_options

	 val context_options =
	   User_Options.make_user_context_options
	     default_batch_options

	 (*
	 (* Turn on optimisation of handlers by default *)
	 val _ = case context_options of
	   User_Options.USER_CONTEXT_OPTIONS({optimize_handlers, ...}, _) =>
	     optimize_handlers := true
	 *)

	 val (tool_options, context_options, files, compiler, targets) =
	   obey_options (tool_options, context_options, args)

	 val _ =
           if targets <> [] then
	     (out "Setting targets: ";
              case targets of
                [target] => out (target ^ "\n")
              | targets => 
                  (out "\n"; app (fn s => (out ("  " ^ s ^ "\n"))) targets);
	      ProjFile.setCurrentTargets
	        (Info.make_default_options (),
	         Info.Location.FILE "<batch compiler:options>")
	        targets)
           else
	     ()

	 val new_options =
	   User_Options.new_options (tool_options, context_options)
       in
        case files
	 of [] =>
	   (case compiler 
	    of PROJECT f =>
	      f (Info.make_default_options ()) new_options ()
	    |  BATCH _ =>
	      info ["No files to compile"]
	    |  _ => ())
	 | _ => 
	   (case compiler 
	    of BATCH f =>
	      f (Info.make_default_options ()) new_options files
	    |  _ =>
	      info ["Excess arguments ignored"]);

        case !dump_objects_filename
         of NONE => ()
          | SOME filename =>
              if !project 
              then
                ( info ["Dumping dependency list to `", filename, "'."];
           	  TopLevel.dump_objects (Info.make_default_options ()) 
                                        new_options filename )
              else
		raise Error ["No project specified."];

         Exit.success
       end)
     handle Option s=>
       (out ("Unknown, or bad usage of, option '" ^ s ^ "'\n");
	usage ();
	Exit.badUsage)
          | MLWorks.Internal.Save message =>
	      (out (message ^ "\n");
	       Exit.save)
	  | Encapsulate.BadInput s =>
	      (out (s ^ "\n");
	       Exit.badInput)
	  | exn as IO.Io _ =>
	      (out ("Uncaught exception " ^ exnMessage exn ^ "\n");
               Exit.uncaughtIOException)
          | OS.SysErr (s,err) =>
              let
(*
                val s' =
                  case err of
                    SOME e => OS.errorMsg e
                  | _ => ""
*)
              in
                out ("System error: " ^ s ^ (* ":" ^ s' ^ *) "\n");
                Exit.failure
              end
          | Error s =>
              (app out s;
	       out "\n";
               Exit.failure)
          | Info.Stop _ => Exit.stop
  end
@


1.120
log
@[Bug #190553]
Replaced use of basis/exit with utils/mlworks_exit.
@
text
@d11 4
d465 1
a465 1
require "mlworks_exit";
@


1.119
log
@[Bug #190511]
Fix target ordering
@
text
@d11 4
d461 1
a461 1
require "../basis/exit";
d479 1
a479 1
  structure Exit         : EXIT
@


1.119.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a10 4
 * Revision 1.119  1999/03/04  11:57:10  mitchell
 * [Bug #190511]
 * Fix target ordering
 *
@


1.118
log
@[Bug #190505]
Support for precompilation of subprojects
@
text
@d11 4
d658 1
a658 1
      fun aux [] = (tool_options, context_options, [], !compiler, !targets)
@


1.117
log
@[Bug #190504]
Add ability to dump units in dependency order
@
text
@d11 4
d1095 4
a1098 1
	      app (fn s => (out s; out "\n")) targets;
@


1.116
log
@[Bug #30435]
Remove user-prompting code
@
text
@d11 4
d588 3
d627 19
a645 1
  fun obey_options
a649 13
      val compiler = ref NO_COMPILER

      (* project is a flag used to indicate whether a project has been
	 specified on the command line.  If none is specified, options to
	 set the configuration, mode or targets report an error. *)
      val project = ref false

      (* targets is a list of targets specified on the command line (if any).
	 After processing the arguments, these are set in the project.
	 If none are specified on the command line, the setting in the
	 project file is used.  *)
      val targets = ref []: string list ref

d979 3
d1102 1
a1102 1
	 case files
d1116 12
@


1.115
log
@[Bug #30418]
Handle project reading errors gracefully
@
text
@d11 4
d1000 10
a1009 3
       ignore(License.license
	 {promptUser = License.ttyPromptUser,
	  complain = License.ttyComplain});
@


1.114
log
@[Bug #30411]
Handle licensing for free copies of MLWorks
@
text
@d11 4
d905 4
a908 1
		  ProjFile.open_proj file;
@


1.113
log
@[Bug #50071]
setCurrentConfiguration now takes an option
@
text
@d11 4
d988 6
a993 1
      (if not (arg_exists("no-banner", args)) then
a996 3
       ignore(License.license
	 {promptUser = License.ttyPromptUser,
	  complain = License.ttyComplain});
@


1.112
log
@[Bug #70109]
Put print_messages on
@
text
@d11 4
d913 1
a913 1
		      config
@


1.111
log
@[Bug #30319]
Make usage info consistent with man page about batch options.
@
text
@d11 4
d1010 1
a1010 1
							print_messages = false,
@


1.110
log
@[Bug #70074]
Add depth limit support for signature printing
@
text
@d11 4
d521 60
a580 9
       \  -pervasive-dir dir\n\
       \          Use the pervasive library in dir.\n\
       \          Defaults to value of MLWORKS_PERVASIVE from UNIX environment\n\
       \          or Pervasive Path from Win32 registry as appropriate.\n\
       \  -source-path path\n\
       \          path is a sequence of directories, separated by colons.  MLWorks\n\
       \          looks for modules relative to each directory in the path.\n\
       \          Defaults to value of MLWORKS_SRC_PATH from UNIX environment\n\
       \          or Source Path from Win32 registry as appropriate.\n\
d584 3
d591 2
a592 8
       \  -compile\n\
       \          For each named module, this option recursively compiles any\n\
       \          modules on which that module depends that are out of date\n\
       \          with respect to their source.\n\
       \          No default.\n\
       \  -check-dependencies\n\
       \          Shows which modules would be compiled by -compile.\n\
       \          No default.\n\
d594 1
a594 1
       \          Compile code for MIPS R4000 and later versions\n\
d597 1
a597 1
       \          Compile code for Version 7 of the SPARC architecture\n\
@


1.109
log
@[Bug #30349]
Fix to avoid non-unit sequence warnings
@
text
@d11 4
d961 1
@


1.108
log
@[Bug #30071]
Merge in Project Workspace changes.
@
text
@d11 4
d904 1
a904 1
		  MLWorks.Internal.save
d910 1
a910 1
				end);
d924 1
a924 1
       License.license
d926 1
a926 1
	  complain = License.ttyComplain};
d987 1
a987 1
	      map (fn s => (out s; out "\n")) targets;
d1040 1
a1040 1
              (map out s;
@


1.107
log
@[Bug #30134]
Replacing use of MLWorks.Deliver.deliver with Internal.save - deliver fn changed to exec only.
@
text
@d11 4
d19 19
d412 1
a412 1
require "../utils/getenv";
d418 1
a418 1
require "io";
d420 1
d426 1
d435 2
a436 1
  sharing type TopLevel.Info.Location.T = Io.Location
a443 1
    val compiler = ref TopLevel.recompile_file;
d445 4
a448 3
    val file_args_needed = ref true;
    (* used to determine whether to issue an error message if the command line
       doesn't specify some files to compile. *)
d470 33
a502 1
    exception Error of string 
d545 14
a558 1
      fun aux [] = (tool_options, context_options, [])
d564 1
a564 1
            (tool_options, context_options, (arg::args))
d581 4
a584 1
		   handle OS.SysErr _ => raise Error ("Invalid pervasive directory specification: " ^ dir));
d587 2
a588 1
		  handle Io.NotSet _ => raise Error ("Pervasive directory not set.");
d592 4
a595 1
		   handle OS.SysErr _ => raise Error ("Invalid object path specification: " ^ dir));
d597 2
a598 1
		  handle Io.NotSet _ => raise Error ("Object path not set.");
d601 5
a605 2
		 ((Io.set_source_path_from_string (path, Info.Location.FILE "Command Line")
		   handle OS.SysErr _ => raise Error ("Invalid source path specification: " ^ path));
d827 45
d873 1
a873 2
                 (compiler := TopLevel.compile_file;
		  file_args_needed := true;
d877 1
a877 2
           	 (compiler := TopLevel.check_dependencies;
		  file_args_needed := true;
d880 4
d885 1
a885 2
           	 (compiler := TopLevel.recompile_file;
		  file_args_needed := true;
a889 1
		  file_args_needed := false;
a899 1
		  file_args_needed := false;
d916 4
a919 1
      (if not (arg_exists("no-banner", args)) then info [Version.versionString ()] else ();
a923 2
       Io.set_source_path_from_env ((Info.Location.FILE "<Initialisation>"), 
				     arg_exists("silent", args));
d977 1
a977 1
	 val (tool_options, context_options, files) =
d980 11
d996 12
a1007 6
	   if !file_args_needed then
	     info ["No files to compile"]
	   else
	     ()
	 | _ =>
	   (!compiler) (Info.make_default_options ()) new_options files;
d1036 2
a1037 1
              (out (s ^ "\n");
@


1.106
log
@[Bug #30280]
No longer compile for R3000 by default on MIPS.
@
text
@d11 4
d774 7
a780 8
		  MLWorks.Deliver.deliver
		  (filename, fn () => 
		   let
		     val x = obey(MLWorks.arguments())
		   in
		     Exit.exit x
		   end,
		   false (* image, not executable *));
@


1.105
log
@[Bug #30160]
Fixed arg_exists function to return right value.
@
text
@d11 4
d473 1
a473 1
       \          Default off.\n\
d817 1
a817 1
                                                        mips_r4000 = false,
@


1.105.2.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a10 4
 * Revision 1.105  1997/06/10  09:06:01  johnh
 * [Bug #30160]
 * Fixed arg_exists function to return right value.
 *
@


1.105.2.2
log
@[Bug #30071]
Converted build system to project workspace.
@
text
@a10 3
 * Revision 1.105.2.1  1997/09/11  20:56:39  daveb
 * branched from trunk for label MLWorks_workspace_97
 *
d385 1
a385 1

a392 1
require "proj_file";
a397 1
  structure ProjFile	 : PROJ_FILE
d414 1
d416 3
a418 4
    datatype compiler =
      NO_COMPILER
    | BATCH of Info.options -> Options.options -> string list -> unit
    | PROJECT of Info.options -> Options.options -> unit -> unit
d481 1
a481 2
	 args,
	 compiler) =
d483 1
a483 3
      val compiler = ref compiler

      fun aux [] = (tool_options, context_options, [], !compiler)
d489 1
a489 1
            (tool_options, context_options, (arg::args), !compiler)
a740 12
	     | ("project", file :: rest) =>
		 (info ["Reading Project file `", file, "'."];
		  ProjFile.open_proj file;
		  aux rest)
	     | ("build", rest) =>
           	 (compiler := PROJECT TopLevel.build;
                  info ["Building project."];
                  aux rest)
	     | ("show-build", rest) =>
           	 (compiler := PROJECT TopLevel.show_build;
                  info ["Showing files to build project."];
                  aux rest)
d742 2
a743 1
                 (compiler := BATCH TopLevel.compile_file;
d747 2
a748 1
           	 (compiler := BATCH TopLevel.check_dependencies;
a750 4
             | ("list-objects", rest) =>
           	 (compiler := BATCH TopLevel.list_objects;
                  info ["Listing object files."];
                  aux rest)
d752 2
a753 1
           	 (compiler := BATCH TopLevel.recompile_file;
d758 1
d769 1
d847 2
a848 2
	 val (tool_options, context_options, files, compiler) =
	   obey_options (tool_options, context_options, args, NO_COMPILER)
d855 6
a860 12
	   (case compiler 
	    of PROJECT f =>
	      f (Info.make_default_options ()) new_options ()
	    |  BATCH _ =>
	      info ["No files to compile"]
	    |  _ => ())
	 | _ => 
	   (case compiler 
	    of BATCH f =>
	      f (Info.make_default_options ()) new_options files
	    |  _ =>
	      info ["Excess arguments ignored"]);
@


1.105.2.3
log
@[Bug #30071]
Added new command-line arguments.
@
text
@a10 4
 * Revision 1.105.2.2  1997/09/17  16:23:10  daveb
 * [Bug #30071]
 * Converted build system to project workspace.
 *
d411 1
a411 2
  sharing type TopLevel.Info.Location.T = Io.Location = ProjFile.location
  sharing type TopLevel.Info.options = ProjFile.error_info
d445 1
a445 1
    exception Error of string list
d486 2
a487 1
	 args) =
d489 1
a489 12
      val compiler = ref NO_COMPILER

      (* project is a flag used to indicate whether a project has been
	 specified on the command line.  If none is specified, options to
	 set the configuration, mode or targets report an error. *)
      val project = ref false

      (* targets is a list of targets specified on the command line (if any).
	 After processing the arguments, these are set in the project.
	 If none are specified on the command line, the setting in the
	 project file is used.  *)
      val targets = ref []: string list ref
d491 1
a491 1
      fun aux [] = (tool_options, context_options, [], !compiler, !targets)
d497 1
a497 1
            (tool_options, context_options, (arg::args), !compiler, !targets)
d514 1
a514 4
		   handle OS.SysErr _ =>
		     raise Error 
			     ["Invalid pervasive directory specification: ",
			      dir]);
d517 1
a517 2
		  handle Io.NotSet _ =>
		    raise Error ["Pervasive directory not set."];
d521 1
a521 4
		   handle OS.SysErr _ =>
		     raise Error
			     ["Invalid object path specification: ",
			      dir]);
d523 1
a523 2
		  handle Io.NotSet _ =>
		    raise Error ["Object path not set."];
d526 2
a527 5
		 ((Io.set_source_path_from_string
		     (path, Info.Location.FILE "Command Line")
		   handle OS.SysErr _ =>
		     raise Error
			     ["Invalid source path specification: ", path]);
a751 1
		  project := true;
a760 31
	     | ("configuration", config :: rest) =>
		 (if !project then
           	    ProjFile.setCurrentConfiguration
		      (Info.make_default_options (),
		       Info.Location.FILE "<batch compiler:options>")
		      config
		  else
		    raise Error
		      ["Configuration ", config,
		       " not set: no project specified."];
                  info ["Setting configuration to ", config, "."];
                  aux rest)
	     | ("mode", mode :: rest) =>
		 (if !project then
           	    ProjFile.setCurrentMode
		      (Info.make_default_options (),
		       Info.Location.FILE "<batch compiler:options>")
		      mode
		  else
		    raise Error
		      ["Mode ", mode, " not set: no project specified."];
                  info ["Setting mode to ", mode, "."];
                  aux rest)
	     | ("target", target :: rest) =>
		 (if !project then
		    targets := target :: !targets
		  else
		    raise Error
		      ["Target ", target, " not set: no project specified."];
                  info ["Adding ", target, " to list of targets."];
                  aux rest)
d866 2
a867 13
	 val (tool_options, context_options, files, compiler, targets) =
	   obey_options (tool_options, context_options, args)

	 val _ =
           if targets <> [] then
	     (out "Setting targets";
	      map (fn s => (out s; out "\n")) targets;
	      ProjFile.setCurrentTargets
	        (Info.make_default_options (),
	         Info.Location.FILE "<batch compiler:options>")
	        targets)
           else
	     ()
d914 1
a914 2
              (map out s;
	       out "\n";
@


1.105.2.4
log
@[Bug #30017]
Added updateContextOptionsFromProjFile, to update the compiler options
when -mode is passed from the command line.
@
text
@a10 4
 * Revision 1.105.2.3  1997/11/04  13:57:05  daveb
 * [Bug #30071]
 * Added new command-line arguments.
 *
a449 32
    fun updateContextOptionsFromProjFile
          (User_Options.USER_CONTEXT_OPTIONS (context_opts, _)) =
    let
      val (_, modeDetails, currentMode) = ProjFile.getModes ()
    in
      case currentMode of
        NONE => ()
      | SOME name =>
          case ProjFile.getModeDetails (name, modeDetails) of
            (* XXX - handler needed for NoConfigDetailsFound -
               or put this functionality in ProjFile *)
            r =>
	      (#generate_interruptable_code context_opts :=
		 !(#generate_interruptable_code r);
               #generate_interceptable_code context_opts :=
		 !(#generate_interceptable_code r);
               #generate_debug_info context_opts :=
		 !(#generate_debug_info r);
               #generate_variable_debug_info context_opts :=
		 !(#generate_variable_debug_info r);
               #optimize_leaf_fns context_opts :=
		 !(#optimize_leaf_fns r);
               #optimize_tail_calls context_opts :=
		 !(#optimize_tail_calls r);
               #optimize_self_tail_calls context_opts :=
		 !(#optimize_self_tail_calls r);
               #mips_r4000 context_opts :=
		 !(#mips_r4000 r);
               #sparc_v7 context_opts :=
		 !(#sparc_v7 r))
    end

d802 4
a805 5
           	    (ProjFile.setCurrentMode
		       (Info.make_default_options (),
		        Info.Location.FILE "<batch compiler:options>")
		       mode;
		     updateContextOptionsFromProjFile (context_options))  
d864 1
a864 4
      (if not (arg_exists("no-banner", args)) then
	 info [Version.versionString ()]
       else
	 ();
d869 2
@


1.105.2.5
log
@[Bug #30326]
@
text
@a10 5
 * Revision 1.105.2.4  1997/11/11  15:51:45  daveb
 * [Bug #30017]
 * Added updateContextOptionsFromProjFile, to update the compiler options
 * when -mode is passed from the command line.
 *
d402 1
a402 1
require "mlworks_io";
@


1.105.1.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a10 4
 * Revision 1.105  1997/06/10  09:06:01  johnh
 * [Bug #30160]
 * Fixed arg_exists function to return right value.
 *
@


1.104
log
@[Bug #30090]
Removed calls to MLWorks.IO.*
@
text
@d11 4
d429 1
a429 1
	  if sz = 0 orelse String.sub(arg, 0) <> #"-" then true
@


1.103
log
@[Bug #30160]
Removed redundant pattern in match.
@
text
@d11 4
d374 2
d412 1
a412 1
    fun out s = MLWorks.IO.output (MLWorks.IO.std_err,s)
d865 2
a866 2
	  | MLWorks.IO.Io string =>
	      (out ("Uncaught exception Io of " ^ string ^ "\n");
@


1.102
log
@[Bug #20033]
Added -no-banner option and modified -silent option to suppress the prompt.
@
text
@d11 4
d421 3
a423 3
	    (case (substring (arg, 1, sz-1), args) of
		(test_arg, rest) => true
	      | (_, rest) => arg_exists (test_arg, rest))
@


1.101
log
@[Bug #30136]
Removed early-mips-r4000 option.
@
text
@d11 4
d410 12
d473 1
a473 1
            (case (substring (* could raise Substring *) (arg, 1, sz-1), args) of
d482 2
a483 2
             | ("quiet", rest)                  =>
                 (info ["Quiet mode."];
d745 4
d769 1
a769 1
      (info [Version.versionString ()];
d774 2
a775 1
       Io.set_source_path_from_env (Info.Location.FILE "<Initialisation>");
@


1.100
log
@[Bug #20050]
main/io now exports MLWORKS_IO
@
text
@d11 4
a436 3
       \  -early-mips-r4000 [on|off]\n\
       \          Compile code to work around bug in MIPS R4000 (2.2 and earlier)\n\
       \          Default on.\n\
a582 8
             | ("early-mips-r4000", "on"::rest) =>
                 (info ["Ensuring branches double word aligned for R4000 2.2 or earlier"];
		  (#early_mips_r4000 context_opts) := true;
                  aux rest)
             | ("early-mips-r4000", "off"::rest) =>
                 (info ["Not ensuring branches double word aligned for R4000 2.2 or earlier"];
		  (#early_mips_r4000 context_opts) := false;
                  aux rest)
a777 1
                                                        early_mips_r4000 = true,
@


1.99
log
@[Bug #30040]
Turned on local function optimisation by default.
@
text
@d11 4
d370 1
a370 1
  structure Io		 : IO
@


1.98
log
@[Bug #1995]
Changed the defaults settings of the MIPS-specific compiler options back to
the most general values, so that we can build and distribute images on the
R3000.
@
text
@d11 6
d779 1
a779 1
							local_functions = false,
@


1.98.1.1
log
@branched from 1.98
@
text
@a10 6
 * Revision 1.98  1997/04/01  16:05:05  daveb
 * [Bug #1995]
 * Changed the defaults settings of the MIPS-specific compiler options back to
 * the most general values, so that we can build and distribute images on the
 * R3000.
 *
@


1.98.1.2
log
@[Bug #30040]
Turned on local function optimisation by default.
@
text
@a10 3
 * Revision 1.98.1.1  1997/05/12  10:35:40  hope
 * branched from 1.98
 *
d779 1
a779 1
							local_functions = true,
@


1.98.1.3
log
@[Bug #30136]
Hid early_mips_r4000 option from users.
@
text
@a10 4
 * Revision 1.98.1.2  1997/05/14  14:07:03  daveb
 * [Bug #30040]
 * Turned on local function optimisation by default.
 *
d581 8
d784 1
a784 1
                                                        early_mips_r4000 = false,
@


1.98.1.3.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a10 4
 * Revision 1.98.1.3  1997/05/19  17:56:00  daveb
 * [Bug #30136]
 * Hid early_mips_r4000 option from users.
 *
@


1.98.1.3.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a10 4
 * Revision 1.98.1.3  1997/05/19  17:56:00  daveb
 * [Bug #30136]
 * Hid early_mips_r4000 option from users.
 *
@


1.98.1.3.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a10 4
 * Revision 1.98.1.3  1997/05/19  17:56:00  daveb
 * [Bug #30136]
 * Hid early_mips_r4000 option from users.
 *
@


1.98.1.3.1.2
log
@[Bug #30191]
Removed delivery from Student Edition.
@
text
@a10 3
 * Revision 1.98.1.3.1.1  1997/07/28  18:21:23  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
a411 3
    val c_deliver: string * (unit -> unit) * bool -> unit =
      MLWorks.Internal.Runtime.environment "function deliver"

d738 1
a738 1
		  c_deliver
@


1.98.1.3.1.2.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a10 4
 * Revision 1.98.1.3.1.2  1997/08/07  09:45:24  daveb
 * [Bug #30191]
 * Removed delivery from Student Edition.
 *
@


1.97
log
@[Bug #1990]
Version.version_string is now Version.versionString, and a function instead
of a constant.
@
text
@d11 5
d425 1
a425 1
       \          Default off.\n\
d428 1
a428 1
       \          Default on.\n\
d775 2
a776 2
                                                        early_mips_r4000 = false,
                                                        mips_r4000 = true,
@


1.96
log
@Renaming mips_r4000 option
@
text
@d11 3
d741 1
a741 1
      (info [Version.version_string];
@


1.95
log
@[Bug #1965]
Added a handle for Io.NotSet exception in getting pervasive dir.
@
text
@d11 4
d414 10
a423 1
       \          No default.\n"
d564 1
a564 1
             | ("mips-r4000", "on"::rest) =>
d566 8
d576 2
a577 2
             | ("mips-r4000", "off"::rest) =>
                 (info ["Not ensuring branches double word aligned for R4000 2.2 or earlier"];
a579 8
             | ("mips2", "on"::rest) =>
                 (info ["Compiling for MIPS 2"];
		  (#mips2 context_opts) := true;
                  aux rest)
             | ("mips2", "off"::rest) =>
                 (info ["Not compiling for MIPS 2"];
		  (#mips2 context_opts) := false;
                  aux rest)
d767 1
d769 1
a769 2
                                                        mips2 = false,
                                                        sparc_v7 = true},
@


1.94
log
@[Bug #1935]
Modify handlers for OS.SysErr so they only handle what they should
Comment out unreferenced stuff when handling OS.SysEr
@
text
@d11 5
d442 2
a443 1
			Io.get_pervasive_dir (), "'."];
d448 2
a449 1
		  info ["Object path set to `", Io.get_object_path(), "'."];
@


1.93
log
@Adding architecture dependent options
@
text
@d11 3
d434 5
a438 5
                 ((Io.set_pervasive_dir (dir, Info.Location.FILE "Command Line");
                   info ["Pervasive library directory set to `",
                         Io.get_pervasive_dir (), "'."];
                   aux rest)
                 handle OS.SysErr _ => raise Error ("Invalid pervasive directory specification: " ^ dir))
d440 4
a443 4
                 ((Io.set_object_path (dir, Info.Location.FILE "Command Line");
                   info ["Object path set to `", Io.get_object_path(), "'."];
                   aux rest)
                  handle OS.SysErr _ => raise Error ("Invalid object path specification: " ^ dir))
d445 4
a448 4
		 ((Io.set_source_path_from_string (path, Info.Location.FILE "Command Line");
                   info ["Source path set to `", path, "'."];
                   aux rest)
                  handle OS.SysErr _ => raise Error ("Invalid source path specification: " ^ path))
d809 1
d814 1
@


1.92
log
@Adding local function option
@
text
@d11 3
d541 24
d743 4
a746 1
							print_messages = false},
@


1.91
log
@[Bug #0]
Change unix to UNIX in order to use trademarked form
@
text
@d11 4
d466 12
d715 1
@


1.90
log
@[Bug #1851]
Give the default settings in the help info.
@
text
@d11 4
d374 1
a374 1
       \          Defaults to value of MLWORKS_PERVASIVE from unix environment\n\
d379 1
a379 1
       \          Defaults to value of MLWORKS_SRC_PATH from unix environment\n\
@


1.89
log
@Revised licensing scheme to allow registration-style licensing.
@
text
@d11 3
d370 2
d375 2
d379 1
d383 1
d388 1
d390 2
a391 1
       \          Shows which modules would be compiled by -compile.\n"
@


1.89.4.1
log
@branched from 1.89
@
text
@a10 3
 * Revision 1.89  1996/11/07  12:46:27  daveb
 * Revised licensing scheme to allow registration-style licensing.
 *
@


1.89.3.1
log
@branched from 1.89
@
text
@a10 3
 * Revision 1.89  1996/11/07  12:46:27  daveb
 * Revised licensing scheme to allow registration-style licensing.
 *
@


1.89.3.1.1.1
log
@branched from 1.89.3.1
@
text
@a10 3
 * Revision 1.89.3.1  1996/12/17  17:49:07  hope
 * branched from 1.89
 *
@


1.89.2.1
log
@branched from 1.89
@
text
@a10 3
 * Revision 1.89  1996/11/07  12:46:27  daveb
 * Revised licensing scheme to allow registration-style licensing.
 *
@


1.89.1.1
log
@branched from 1.89
@
text
@a10 3
 * Revision 1.89  1996/11/07  12:46:27  daveb
 * Revised licensing scheme to allow registration-style licensing.
 *
@


1.89.1.1.1.1
log
@branched from 1.89.1.1
@
text
@a10 3
 * Revision 1.89.1.1  1996/11/14  12:51:17  hope
 * branched from 1.89
 *
@


1.88
log
@[Bug #1728]
__integer becomes __int
@
text
@d11 4
d319 1
d331 1
d658 3
a660 1
       MLWorks.Internal.Runtime.environment "start license" ();
@


1.87
log
@[Bug #1725]
Remove unsafe string operations introduced when String structure removed
@
text
@d11 4
d308 1
a308 1
require "../basis/__integer";
@


1.86
log
@removing toplevel String.
@
text
@d11 3
d305 1
d382 1
a382 1
          if sz = 0 orelse MLWorks.Internal.Value.unsafe_string_sub (arg, 0) <> ord #"-" then
@


1.85
log
@Add license server stuff
@
text
@d11 3
d240 1
a240 1
 *  Changed ordof to String.ordof
a302 2

require "../utils/lists";
a316 1
  structure Lists	 : LISTS
d340 1
a340 1
        (Lists.iterate out message;
d376 1
a376 1
          val length = size arg
d378 1
a378 1
          if length = 0 orelse String.ordof (arg, 0) <> String.ord "-" then
d381 1
a381 1
            (case (String.substring (arg, 1, length-1), args) of
d412 1
a412 1
                    MLWorks.Option.SOME n =>
d730 1
a730 1
                    MLWorks.Option.SOME e => OS.errorMsg e
@


1.84
log
@Removed -object-path from the usage message.
@
text
@d11 9
d644 1
@


1.84.3.1
log
@branched from 1.84
@
text
@a10 3
 * Revision 1.84  1996/08/16  15:41:56  daveb
 * Removed -object-path from the usage message.
 *
@


1.84.2.1
log
@branched from 1.84
@
text
@a10 3
 * Revision 1.84  1996/08/16  15:41:56  daveb
 * Removed -object-path from the usage message.
 *
@


1.84.2.2
log
@Add call to initialise license
@
text
@a10 3
 * Revision 1.84.2.1  1996/10/07  16:07:49  hope
 * branched from 1.84
 *
a637 1
       MLWorks.Internal.Runtime.environment "start license" ();
@


1.84.1.1
log
@branched from 1.84
@
text
@a10 3
 * Revision 1.84  1996/08/16  15:41:56  daveb
 * Removed -object-path from the usage message.
 *
@


1.83
log
@Add option to turn on/off compilation messages from intermake
@
text
@d11 3
a346 5
       \  -object-path path\n\
       \          path is a single path name with parameters %S and %C which are\n\
       \          substituted by respectively the source path used to find\n\
       \          the module in question and the prefix of its module name\n\
       \          expanded to a pathname component.\n\
@


1.82
log
@The Io exception is no longer at top level.
@
text
@d11 3
d659 2
a660 1
							opt_self_calls = true},
@


1.81
log
@Update wrt MLWorks.OS.arguments -> MLWorks.arguments change
@
text
@d11 3
d711 1
a711 1
	  | Io string =>
@


1.80
log
@Handle SysErr exception
@
text
@d11 3
d616 1
a616 1
		     val x = obey(MLWorks.OS.arguments())
@


1.79
log
@Update wrt move of file "main" to basis.
@
text
@d11 3
d278 1
d315 2
d319 3
a321 4
        (Lists.iterate (fn s => MLWorks.IO.output (MLWorks.IO.std_err, s)) message;
         MLWorks.IO.output (MLWorks.IO.std_err, "\n"))
      else
        ()
d323 1
d327 24
a350 24
      MLWorks.IO.output (MLWorks.IO.std_err,
  "Usage:   mlbatch [options...]\n\
  \Options:\n\
  \  -pervasive-dir dir\n\
  \          Use the pervasive library in dir.\n\
  \  -source-path path\n\
  \          path is a sequence of directories, separated by colons.  MLWorks\n\
  \          looks for modules relative to each directory in the path.\n\
  \  -object-path path\n\
  \          path is a single path name with parameters %S and %C which are\n\
  \          substituted by respectively the source path used to find\n\
  \          the module in question and the prefix of its module name\n\
  \          expanded to a pathname component.\n\
  \  -debug [on|off]\n\
  \          Controls whether MLWorks generates debugging information.\n\
  \  -trace-profile [on|off]\n\
  \          Controls whether MLWorks generates code that can be traced\n\
  \          or profiled with the call counter.\n\
  \  -compile\n\
  \          For each named module, this option recursively compiles any\n\
  \          modules on which that module depends that are out of date\n\
  \          with respect to their source.\n\
  \  -check-dependencies\n\
  \          Shows which modules would be compiled by -compile.\n")
d379 5
a383 4
                 (Io.set_pervasive_dir (dir, Info.Location.FILE "Command Line");
                  info ["Pervasive library directory set to `",
			Io.get_pervasive_dir (), "'."];
		  aux rest)
d385 4
a388 3
                 (Io.set_object_path (dir, Info.Location.FILE "Command Line");
                  info ["Object path set to `", Io.get_object_path(), "'."];
                  aux rest)
d390 4
a393 4
		 (Io.set_source_path_from_string
		    (path, Info.Location.FILE "Command Line");
		  info ["Source path set to `", path, "'."];
		  aux rest)
d696 1
a696 1
       (MLWorks.IO.output(MLWorks.IO.std_err, "Unknown, or bad usage of, option '" ^ s ^ "'\n");
d700 1
a700 1
	      (MLWorks.IO.output(MLWorks.IO.std_err, message ^ "\n");
d703 1
a703 1
	      (MLWorks.IO.output(MLWorks.IO.std_err, s ^ "\n");
d706 1
a706 2
	      (MLWorks.IO.output(MLWorks.IO.std_err, "Uncaught exception Io of " ^
                      string ^ "\n");
d708 13
@


1.78
log
@Change name of MLWorks.deliver
@
text
@d11 3
d278 1
a278 1
require "exit";
@


1.77
log
@String functions explode, implode, chr and ord now only available from String
io functions and types
instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
now only available from MLWorks.IO
@
text
@d11 6
d599 8
a606 6
		  MLWorks.deliver (filename, fn () => 
				   let
				     val x = obey(MLWorks.OS.arguments())
				   in
				     Exit.exit x
				   end, false);
@


1.76
log
@Use basis integer structure
@
text
@d11 3
d304 2
a305 2
        (Lists.iterate (fn s => output (MLWorks.IO.std_err, s)) message;
         output (MLWorks.IO.std_err, "\n"))
d312 1
a312 1
      output (MLWorks.IO.std_err,
d347 1
a347 1
          if length = 0 orelse String.ordof (arg, 0) <> ord "-" then
d677 1
a677 1
       (output(MLWorks.IO.std_err, "Unknown, or bad usage of, option '" ^ s ^ "'\n");
d681 1
a681 1
	      (output(MLWorks.IO.std_err, message ^ "\n");
d684 1
a684 1
	      (output(MLWorks.IO.std_err, s ^ "\n");
d687 1
a687 1
	      (output(MLWorks.IO.std_err, "Uncaught exception Io of " ^
@


1.75
log
@MLWorks.save moved into MLWorks.Internal
@
text
@d11 3
d262 2
a264 1
require "../utils/integer";
a279 1
  structure Integer	 : INTEGER
d375 10
a384 12
		 (let
		    val n = Integer.parseinteger arg
		  in
                    info ["Precision of floating point printing set to ",
			  arg, "."];
		    (case tool_opts of
		       {float_precision, ...} =>
		          float_precision := n);
		    aux rest
		  end
		  handle Integer.Invalid =>
		    raise Option "float_precision")
@


1.74
log
@Change use of MLWorks.save to MLWorks.deliver when creating batch images.
This saves about 100k smaller images.
@
text
@d11 4
d594 1
a594 1
				   end);
d676 1
a676 1
          | MLWorks.Save message =>
@


1.73
log
@Replace any use of MLWorks.exit by Exit.exit.
@
text
@d11 3
d585 6
a590 6
		  MLWorks.save (filename, fn () => 
				let
				  val x = obey(MLWorks.OS.arguments())
				in
				  Exit.exit x
				end);
@


1.72
log
@Changing command line args
@
text
@d11 3
d255 1
d271 1
d278 1
d586 1
a586 1
				  MLWorks.exit x
d596 1
a596 1
    and obey args =
d663 1
a663 1
         0
d668 1
a668 1
	3)
d671 1
a671 1
	       5)
d674 1
a674 1
	       6)
d678 2
a679 2
               2)
          | Info.Stop _ => 4
@


1.71
log
@Fixed use of Info.default_options.
@
text
@d11 3
d527 2
a528 2
	     | ("overload", "on" :: rest) =>
		 (info ["overloaded relationals on strings enabled."];
d530 2
a531 2
		     {string_inequalities, ...} =>
		       string_inequalities := true);
d533 2
a534 2
	     | ("overload", "off" :: rest) =>
		 (info ["overloaded relationals on strings disabled."];
d536 2
a537 2
		     {string_inequalities, ...} =>
		       string_inequalities := false);
@


1.70
log
@Use hyphen as options separator
@
text
@d11 3
d567 1
a567 1
		    Info.default_options
d653 1
a653 1
	   (!compiler) Info.default_options new_options files;
@


1.69
log
@I forgot to uncomment the opt_handlers option handling, which I had commented
out while working on the project tool.
@
text
@d11 4
d290 1
a290 1
  \  -pervasive_dir dir\n\
d292 1
a292 1
  \  -source_path path\n\
d295 1
a295 1
  \  -object_path path\n\
d302 1
a302 1
  \  -trace_profile [on|off]\n\
d309 1
a309 1
  \  -check_dependencies\n\
d330 1
a330 1
	     | ("print_timings", rest) =>
d338 1
a338 1
             | ("pervasive_dir", dir::rest) =>
d343 1
a343 1
             | ("object_path", dir::rest) =>
d347 1
a347 1
	     | ("source_path", path::rest) =>
d352 1
a352 1
             | ("float_precision", arg::rest) =>
d365 1
a365 1
             | ("opt_handlers", "on"::rest) =>
d371 1
a371 1
             | ("opt_handlers", "off"::rest) =>
d389 1
a389 1
             | ("debug_variables", "on"::rest) =>
d395 1
a395 1
             | ("debug_variables", "off"::rest) =>
d401 1
a401 1
             | ("generate_moduler", "on"::rest) =>
d425 1
a425 1
             | ("trace_profile", "on"::rest) =>
d431 1
a431 1
             | ("trace_profile", "off"::rest) =>
d461 1
a461 1
	     | ("opt_lambda", "on" :: rest) =>
d467 1
a467 1
	     | ("opt_lambda", "off" :: rest) =>
d497 1
a497 1
	     | ("opt_mir", "on" :: rest) =>
d503 1
a503 1
	     | ("opt_mir", "off" :: rest) =>
d545 1
a545 1
             | ("compile_file", rest) =>
d550 1
a550 1
             | ("check_dependencies", rest) =>
d560 1
a560 1
             | ("compile_pervasive", rest) =>
@


1.68
log
@Modified to use new project stuff.
@
text
@d11 3
a360 1
	     (*
a372 1
	     *)
@


1.67
log
@Make default for optimisation of handlers true
@
text
@d11 3
a235 1
require "../make/recompile";
a250 1
  structure Recompile	 : RECOMPILE
d255 1
a255 2
  sharing Recompile.Info = TopLevel.Info
  sharing Recompile.Options = TopLevel.Options = User_Options.Options
d257 1
a257 1
  sharing type Recompile.Info.Location.T = Io.Location
d264 1
a264 1
    val compiler = ref Recompile.recompile_files;
d358 1
d371 1
d546 1
a546 2
           	 (case context_opts of {no_execute, ...} => no_execute := true;
		  compiler := Recompile.recompile_files;
d551 1
a551 2
           	 (case context_opts of {no_execute, ...} => no_execute := false;
		  compiler := Recompile.recompile_files;
d556 1
a556 1
                 (info ["compiling pervasive library"];
d558 1
a558 1
		  Recompile.recompile_pervasive
a598 1
							no_execute = false,
d625 1
d630 1
@


1.66
log
@Adding opt_handlers compiler option
@
text
@d11 3
a567 3
(*
				  val _ = output(std_out, "Exiting with code " ^ MLWorks.Integer.makestring x ^ "\n")
*)
d625 5
@


1.65
log
@Added -float_precision option.
@
text
@d11 3
d355 12
d601 1
@


1.64
log
@Separated user_options into tool-specific and context-specific parts.
@
text
@d11 3
d229 1
d245 1
d339 13
d594 1
@


1.63
log
@Ensure exit code propagated to shell on exit
@
text
@d11 3
a229 1
require "preferences";
a236 1
  structure Preferences  : PREFERENCES
a245 1
  sharing type Preferences.preferences = User_Options.preferences
d294 7
a300 3
    fun obey_options(arg as (_, [])) = arg
      | obey_options(orig_arg as (options as User_Options.USER_OPTIONS(opts, _),
				  rest as (arg::args))) =
d304 3
a306 2
          if length > 0 andalso String.ordof (arg, 0) = ord "-" then
            obey_options
d311 1
a311 1
                  (options, rest))
d315 1
a315 1
                  (options, rest))
d319 1
a319 1
                  (options, rest))
d324 1
a324 1
		  (options, rest))
d328 1
a328 1
                  (options, rest))
d333 1
a333 1
		  (options, rest))
d336 1
a336 1
		  (case opts of
d339 1
a339 1
		     (options, rest))
d342 1
a342 1
		  (case opts of
d345 1
a345 1
		     (options, rest))
d348 1
a348 1
		  (case opts of
d351 1
a351 1
		     (options, rest))
d354 1
a354 1
		  (case opts of
d357 1
a357 1
		     (options, rest))
d360 1
a360 1
		  (case opts of
d363 1
a363 1
		     (options, rest))
d366 1
a366 1
		  (case opts of
d369 1
a369 1
		     (options, rest))
d372 1
a372 1
		  (case opts of
d375 1
a375 1
		     (options, rest))
d378 1
a378 1
		  (case opts of
d381 1
a381 1
		     (options, rest))
d384 1
a384 1
		  (case opts of
d387 1
a387 1
		     (options, rest))
d390 1
a390 1
		  (case opts of
d393 1
a393 1
		     (options, rest))
d396 1
a396 1
		  (case opts of
d399 1
a399 1
		     (options, rest))
d402 1
a402 1
		  (case opts of
d405 1
a405 1
		     (options, rest))
d408 1
a408 1
		  (case opts of
d411 1
a411 1
		     (options, rest))
d414 1
a414 1
		  (case opts of
d417 1
a417 1
		     (options, rest))
d420 1
a420 1
		  (case opts of
d423 1
a423 9
		     (options, rest))
             | ("output_lambda", "on" :: rest) =>
                 (info ["optimised lambda output enabled."];
                  (#output_lambda opts) := true;
                  (options, rest))
             | ("output_lambda", "off" :: rest) =>
                 (info ["optimised lambda output disabled."];
                  (#output_lambda opts) := false;
                  (options, rest))
d426 1
a426 1
		  (case opts of
d429 1
a429 1
		     (options, rest))
d432 1
a432 1
		  (case opts of
d435 1
a435 1
		     (options, rest))
d438 1
a438 1
		  (case opts of
d441 1
a441 1
		     (options, rest))
d444 1
a444 1
		  (case opts of
d447 1
a447 1
		     (options, rest))
d450 1
a450 1
		  (case opts of
d453 1
a453 1
		     (options, rest))
d456 1
a456 1
		  (case opts of
d459 1
a459 1
		     (options, rest))
d462 1
a462 1
		  (case opts of
d465 1
a465 1
		     (options, rest))
d468 1
a468 1
		  (case opts of
d471 1
a471 1
		     (options, rest))
d474 1
a474 1
		  (case opts of
d477 1
a477 1
		     (options, rest))
d480 1
a480 1
		  (case opts of
d483 1
a483 1
		     (options, rest))
d486 1
a486 1
		  (case opts of
d489 1
a489 1
		     (options, rest))
d492 1
a492 1
		  (case opts of
d495 1
a495 1
		     (options, rest))
d498 1
a498 1
		  (case opts of
d501 1
a501 1
		     (options, rest))
d506 1
a506 1
                  (options, rest))
d508 1
a508 1
           	 (case opts of {no_execute, ...} => no_execute := true;
d512 1
a512 1
                  (options, rest))
d514 1
a514 1
           	 (case opts of {no_execute, ...} => no_execute := false;
d518 1
a518 1
                  (options, rest))
d524 2
a525 2
		    (User_Options.new_options options);
                  (options, rest))
d538 1
a538 1
		  (options, rest))
a540 2
          else
            orig_arg
d542 3
d551 2
a552 3
	 val options =
	   User_Options.make_user_options
	   (Options.OPTIONS
d560 1
a560 2
						       show_mach = false,
                                                       output_lambda = false
d581 9
a589 2
	    extension_options = Options.default_extension_options},
	   Preferences.default_preferences)
d591 2
a592 1
	 val (options, files) = obey_options(options, args)
d594 2
a595 1
	 val new_options = User_Options.new_options options
@


1.62
log
@Removing debug_polyvariables option
@
text
@d11 3
d532 10
a541 2
		  MLWorks.save (filename, fn () => obey (MLWorks.OS.arguments ()));
                  (options, rest))
@


1.61
log
@The path setting functions now handle the BadHomeName exception
themselves, and take a location argument.  The FileSys structure is
no longer needed.
@
text
@d11 5
a349 12
             | ("debug_poly_variables", "on"::rest) =>
                 (info ["PolyVariable Debugging information enabled."];
		  (case opts of
		     {generate_polyvariable_debug_info, ...} =>
		       generate_polyvariable_debug_info := true);
		     (options, rest))
             | ("debug_poly_variables", "off"::rest) =>
                 (info ["PolyVariable Debugging information disabled."];
		  (case opts of
		     {generate_polyvariable_debug_info, ...} =>
		       generate_polyvariable_debug_info := false);
		     (options, rest))
d351 1
a351 1
                 (info ["Stepper Debugging information enabled."];
d357 1
a357 1
                 (info ["Stepper Debugging information disabled."];
a361 12
             | ("generate_stepper", "on"::rest) =>
                 (info ["Stepper Debugging information enabled."];
		  (case opts of
		     {generate_stepper, ...} =>
		       generate_stepper := true);
		     (options, rest))
             | ("generate_stepper", "off"::rest) =>
                 (info ["Stepper Debugging information disabled."];
		  (case opts of
		     {generate_stepper, ...} =>
		       generate_stepper := false);
		     (options, rest))
a556 3
                                                        debug_polyvariables = false,
                                                        generate_stepper = false,
                                                        generate_stepper_specific = "",
@


1.60
log
@Add ability to set object_path
@
text
@d11 3
d215 1
a215 1
require "../utils/filesys";
a231 1
  structure FileSys	 : FILE_SYS
d238 1
d308 4
a311 3
                 (Io.set_pervasive_dir (FileSys.expand_path dir);
                  info ["Pervasive library directory set to `", dir, "'."];
                  (options, rest))
d313 2
a314 2
                 (Io.set_object_path (FileSys.expand_path dir);
                  info ["Object path set to `", dir, "'.(expanding to '", Io.get_object_path(), "')"];
d317 2
a318 1
		 (Io.set_source_path_from_string path;
d558 2
a559 2
       Io.set_pervasive_dir_from_env ();
       Io.set_source_path_from_env ();
d627 1
a627 9
          | Info.Stop _ =>
	      (output(MLWorks.IO.std_err, "Compilation error" ^ "\n");
               4)
	  | FileSys.BadHomeName s =>
	      (output(MLWorks.IO.std_err,
                      "Problem expanding pervasive directory - " ^
                      "can't find home directory for " ^ s);
	       7)

@


1.59
log
@Change FILESYS to FILE_SYS
@
text
@d11 3
d266 5
d307 4
@


1.58
log
@Remving print_minor_timings
@
text
@d11 3
d226 1
a226 1
  structure FileSys	 : FILESYS
@


1.57
log
@Change to debug option name
,
@
text
@d11 4
a287 4
                  (options, rest))
	     | ("print_minor_timings", rest) =>
                 (TopLevel.print_minor_timings := true;
                  info ["Printing minor timings."];
@


1.56
log
@Replaced FileName parameter.
@
text
@d11 3
d554 1
a554 1
	    compiler_options = Options.COMPILEROPTIONS {debug = false,
@


1.55
log
@Moved preferences to separate structure.
@
text
@d11 3
d199 1
a199 1
require "../utils/filename";
d216 1
a216 1
  structure FileName	 : FILENAME
a221 1
  sharing type FileName.Directory = Io.Directory
d291 1
a291 1
                 (Io.set_pervasive_dir (FileName.parse_directory dir);
d607 1
a607 1
	  | FileName.BadHomeName s =>
@


1.54
log
@Added -debug_poly_variables (on|off) and -generate_moduler (on|off).
@
text
@d11 3
d200 1
d206 1
a206 1
  structure Io		: IO
d208 7
a214 6
  structure TopLevel	: TOPLEVEL
  structure Encapsulate	: ENCAPSULATE
  structure Recompile	: RECOMPILE
  structure Lists	: LISTS
  structure FileName	: FILENAME
  structure Version	: VERSION
d220 1
d571 2
a572 3
	    extension_options = Options.default_extension_options,
	    environment_options = Options.default_environment_options,
	    editor_options = Options.default_editor_options})
@


1.53
log
@Remove garbage collection performed before image save.
(This is now done automatically in the runtime).
@
text
@d11 4
d313 24
@


1.52
log
@Changes to recompile.
@
text
@d11 3
a252 7
    fun collect () =
      (MLWorks.Internal.Runtime.StorageManager.interface (70,());
       ())
      handle
      MLWorks.Internal.Runtime.StorageManager.StorageManager _
      => ()

a488 1
		  collect();
@


1.51
log
@Adding error message if user forgets file arguments.
Removed description of -save from help message.
@
text
@d11 4
d214 1
a214 1
    val compiler = ref Recompile.recompile;
d473 1
a473 1
		  compiler := Recompile.recompile;
d479 1
a479 1
		  compiler := Recompile.recompile;
@


1.50
log
@stepper option was missing.
@
text
@d11 3
d212 4
d244 1
a244 3
  \          Shows which modules would be compiled by -compile.\n\
  \  -save file\n\
  \          Saves the current image in file.\n")
d464 1
d470 1
d476 1
d481 4
a484 3
		    Recompile.recompile_pervasive
		      Info.default_options
		      (User_Options.new_options options);
d488 1
d546 8
a553 1
	 (!compiler) Info.default_options new_options files;
@


1.49
log
@New compiler options generate_stepper and generate_moduler.
@
text
@d11 3
d510 1
@


1.48
log
@Change to type of Io.set_pervasive_dir.
@
text
@d11 3
d290 24
d506 3
a509 1
                                                        intercept = false,
@


1.47
log
@Fix the storage manager stuff.
@
text
@d11 3
d173 1
d188 1
d194 1
d268 1
a268 1
                 (Io.set_pervasive_dir dir;
d523 6
@


1.46
log
@Change the GC interface for collecting the whole heap.
@
text
@d11 3
d229 6
d443 1
a443 4
		  (MLWorks.Internal.Runtime.StorageManager.interface (70,())
		   handle
		   MLWorks.Internal.Runtime.StorageManager.StorageManager _
		   => ());
@


1.45
log
@Added handler for Encapsulate.BadInput.
@
text
@d11 3
d434 5
a438 11
                  let
                    fun collect 200 = ()
                      | collect n =
                        (MLWorks.Internal.Runtime.StorageManager.interface (20, n);
                         collect(n+1))
                  in
                    (collect 0) handle
		    MLWorks.Internal.Runtime.StorageManager.StorageManager _ =>
		      ()
                  end;
                  MLWorks.save (filename, fn () => obey (MLWorks.OS.arguments ()));
@


1.44
log
@Removed munging of file names, since this is now done properly by FileName.
@
text
@d11 3
d164 1
d175 1
d504 3
@


1.43
log
@Changed default compiler function to suit new regime.
@
text
@d11 3
a486 14
	 fun munge name =
	   let val len = size name
	       val name' =
		 if len >= 4 andalso
		    String.substring (name, len - 4, 4) = ".sml" then
		   String.substring (name, 0, len - 4)
		 else
		   name
	   in
	     implode (map (fn "/" => "." | x => x) (explode name'))
	   end

	 val modules = map munge files

d489 1
a489 1
	 (!compiler) Info.default_options new_options modules;
@


1.42
log
@Added maximum_str_depth to options.
@
text
@d11 3
d181 1
a181 1
    val compiler = ref TopLevel.compile_file;
@


1.41
log
@Changed -compile option to -compile_file, hidden from users.
Changed -recompile option to -compile.
@
text
@d11 4
d468 1
@


1.40
log
@Added interrupt option
@
text
@d11 3
a199 2
  \          Compiles the named modules.\n\
  \  -recompile\n\
d204 1
a204 1
  \          Shows which modules would be recompiled by -recompile.\n\
d394 1
a394 1
             | ("compile", rest) =>
d396 1
a396 1
                  info ["Compile mode."];
d403 1
a403 1
             | ("recompile", rest) =>
d406 1
a406 1
		  info ["Recompile mode."];
d408 1
a408 1
             | ("recompile_pervasive", rest) =>
@


1.39
log
@Fixed for new options
@
text
@d11 3
d253 12
d454 1
d456 1
a456 1
							no_execute = false,
@


1.38
log
@New compiler option debug_polyvariables for polymorphic debugger.
@
text
@d11 3
d177 1
a177 1
    exception Option
d413 1
a413 1
                 raise Option)
d444 2
a445 1
	    print_options = Options.PRINTOPTIONS {maximum_list_size = 10,
d478 4
a481 3
     handle Option =>
	      (usage ();
	       3)
@


1.37
log
@The compile and recompile functions now take lists of module names,
so that caches can be preserved across compilations.
@
text
@d11 4
d435 1
@


1.37.1.1
log
@Fork for bug fixing
@
text
@a10 4
 *  Revision 1.37  1993/08/28  16:51:20  daveb
 *  The compile and recompile functions now take lists of module names,
 *  so that caches can be preserved across compilations.
 *
@


1.37.1.2
log
@Changes to print options.
@
text
@a10 3
 *  Revision 1.37.1.1  1993/08/28  16:51:20  jont
 *  Fork for bug fixing
 *
d440 1
a440 2
	    print_options = Options.PRINTOPTIONS {maximum_seq_size = 10,
						  maximum_string_size = 255,
@


1.36
log
@Corrected help message.
@
text
@d11 3
a159 1
    val compiler = ref (TopLevel.compile_file Info.default_options)
d161 1
d197 1
d371 4
d376 3
a378 5
		 ((case opts of
		     {no_execute, ...} =>
		       no_execute := true);
                  compiler := Recompile.recompile Info.default_options;
                  info ["Recompile mode."];
d381 3
a383 5
		 ((case opts of
		     {no_execute, ...} =>
		       no_execute := false);
                  compiler := Recompile.recompile Info.default_options;
                  info ["Recompile mode."];
d386 1
a386 4
                 ((case opts of
                     {no_execute, ...} =>
                       no_execute := false);
                  info ["compiling pervasive library"];
a390 9
             | ("compile", rest) =>
                 ((case opts of
                     {no_execute, ...} =>
                       no_execute := false);
                  compiler :=
		    TopLevel.compile_file
		      Info.default_options;
                  info ["Compile mode."];
                  (options, rest))
d447 1
d449 16
d466 1
a466 15
         Lists.iterate
         (fn name =>
	    let val len = size name
		val name' =
		  if len >= 4 andalso
		     String.substring (name, len - 4, 4) = ".sml" then
		    String.substring (name, 0, len - 4)
		  else
		    name
		val name'' =
		  implode (map (fn "/" => "." | x => x) (explode name'))
	    in
              (!compiler) (User_Options.new_options options) name''
	    end)
         files;
d468 1
a468 1
       end
d481 1
a481 1
               4))
@


1.35
log
@Allow ".sml" extension on module names, for simplicity.
@
text
@d11 3
d183 1
a183 1
  \  -compile module1 ... modulen\n\
d185 1
a185 1
  \  -recompile module1 ... modulen\n\
d189 2
a190 3
  \  -check_dependencies module1 ... modulen\n\
  \          Shows which modules would be recompiled by\n\
  \          -recompile module1 ... modulen.\n\
@


1.34
log
@Added output_lambda option.
@
text
@d11 3
d457 9
a465 2
	    let val name' =
		  implode (map (fn "/" => "." | x => x) (explode name))
d467 1
a467 2
              (* info ["Compiling `", name', "'."]; *)
              (!compiler) (User_Options.new_options options) name'
d484 1
a484 7
               4)
(*
	  | exn =>
	      (output(MLWorks.IO.std_err, "Uncaught exception " ^
                      MLWorks.Internal.Value.exn_name_string
                      (MLWorks.Internal.Value.exn_name exn) ^ "\n");
               1) *))
@


1.33
log
@Added print_timings and print_minor_timings command line options.
These are defaulted (in toplevel) off.
@
text
@d11 4
d276 8
d429 2
a430 1
						       show_mach = false
@


1.32
log
@Changed -show_dependencies to -check_dependencies.
@
text
@d11 3
d197 8
@


1.31
log
@Added call to Io.set_source_path_from_env.
Fixed translation of foo/bar to foo.bar.
@
text
@d11 4
d176 1
a176 1
  \  -show_dependencies module1 ... modulen\n\
d339 1
a339 1
             | ("show_dependencies", rest) =>
@


1.30
log
@Added better error message.  Changed -intercept to -trace_profile.
Replaced -no_execute [on|off] with -show_dependencies.
@
text
@d11 4
d390 1
d429 2
a430 2
              (* info ["Compiling `", name, "'."]; *)
              (!compiler) (User_Options.new_options options) name
@


1.29
log
@Changed -pervasive-dir argument to -pervasive_dir, because the other
arguments and the environment variable use underscores instead of hyphens.
@
text
@d11 4
d146 27
a172 1
    exception Option of string
d211 1
a211 1
             | ("intercept", "on"::rest) =>
d217 1
a217 1
             | ("intercept", "off"::rest) =>
a222 12
             | ("no_execute", "on"::rest) =>
                 (info ["execution of compilation disabled."];
		  (case opts of
		     {no_execute, ...} =>
		       no_execute := true);
		     (options, rest))
             | ("no_execute", "off"::rest) =>
                 (info ["execution of compilation enabled."];
		  (case opts of
		     {no_execute, ...} =>
		       no_execute := false);
		     (options, rest))
d331 7
d339 4
a342 1
                 (compiler := Recompile.recompile Info.default_options;
d346 4
a349 1
                 (info ["compiling pervasive library"];
d355 4
a358 1
                 (compiler :=
d375 1
a375 2
                  MLWorks.save (filename, fn () => obey (MLWorks.OS.arguments ()))
                    handle MLWorks.Save message => raise Option message;
d378 1
a378 2
                 raise Option ("Unknown option '" ^ other ^
			       "' or wrong arguments to `" ^ other ^ "'"))
d424 1
a424 1
              info ["Compiling `", name, "'."];
d430 6
a435 3
     handle Option string =>
              (output (MLWorks.IO.std_err, string ^ "\n");
               3)
@


1.28
log
@Added -source_path and -recompile_pervasive command line arguments.
Other minor changes to reflect use of ModuleIds.
@
text
@d11 4
d161 1
a161 1
             | ("pervasive-dir", dir::rest) =>
@


1.27
log
@Fixed up after user_options changes
@
text
@d11 3
a126 1
    structure Option = Io.Option
d158 1
a158 1
                 (TopLevel.pervasive_library_dir := dir;
d161 4
d313 6
d349 1
a349 4
       (case Io.get_pervasive_dir(MLWorks.OS.Unix.environment()) of
	  Option.PRESENT s =>
	    TopLevel.pervasive_library_dir := s
	| _ => ());
d385 6
a390 2
          (info ["Compiling `", name, "'."];
           (!compiler) (User_Options.new_options options) name))
@


1.26
log
@New compiler option debug_variables for local and closure variable
inspection in the debugger.
@
text
@d11 4
d139 1
a139 1
      | obey_options(orig_arg as (options as User_Options.USER_OPTIONS opts,
@


1.25
log
@Updated following options changes
@
text
@d11 3
d351 1
@


1.24
log
@Removed catchall handler and replaced with a handler for Info.Stop
@
text
@d11 3
d362 1
@


1.23
log
@Fixed problems with option changes
@
text
@d11 3
d376 4
d384 1
a384 1
               1))
@


1.22
log
@Added make -n type facility
@
text
@d11 3
d278 2
a279 2
	     | ("nj-open", "on" :: rest) =>
		 (info ["overloaded relationals on strings enabled."];
d281 2
a282 2
		     {nj_local_open, ...} =>
		       nj_local_open := true);
d284 2
a285 2
	     | ("nj-open", "off" :: rest) =>
		 (info ["overloaded relationals on strings disabled."];
d287 2
a288 2
		     {nj_local_open, ...} =>
		       nj_local_open := false);
a341 1
							debug_warnings = false,
a348 1
						  maximum_shape_depth = 10,
@


1.21
log
@Unified profiling and tracing options into `intercept'.
The batch compiler now returns a status code.
@
text
@d11 4
d167 12
d341 1
@


1.20
log
@Added command line options for overloading on strings and NJ open specs
@
text
@d11 3
d151 2
a152 14
             | ("profile", "on"::rest) =>
                 (info ["Profiling enabled."];
		  (case opts of
		     {generate_profiling_code, ...} =>
		       generate_profiling_code := true);
		     (options, rest))
             | ("profile", "off"::rest) =>
                 (info ["Profiling disabled."];
		  (case opts of
		     {generate_profiling_code, ...} =>
		       generate_profiling_code := false);
		     (options, rest))
             | ("trace", "on"::rest) =>
                 (info ["Tracing enabled."];
d154 2
a155 2
		     {generate_tracing_code, ...} =>
		       generate_tracing_code := true);
d157 2
a158 2
             | ("trace", "off"::rest) =>
                 (info ["Tracing disabled."];
d160 2
a161 2
		     {generate_tracing_code, ...} =>
		       generate_tracing_code := false);
d324 1
a324 2
							profile = false,
							trace = false,
d345 2
a346 1
         files
d349 2
a350 1
       output (MLWorks.IO.std_err, string ^ "\n")
d352 3
a354 2
	      output(MLWorks.IO.std_err, "Uncaught exception Io of " ^
		     string ^ "\n")
d356 4
a359 3
	      output(MLWorks.IO.std_err, "Uncaught exception " ^
		     MLWorks.Internal.Value.exn_name_string
		     (MLWorks.Internal.Value.exn_name exn) ^ "\n"))
@


1.19
log
@Moved user_options and version from interpreter to main
Removed the code explosion from lack of updatable records. Now done
in terms of user_options
@
text
@d11 5
d256 24
d347 2
a348 1
	    extension_options = Options.default_extension_options})
@


1.18
log
@Changed ordof to String.ordof
@
text
@d11 3
d75 2
a76 1
require "../interpreter/version";
d83 1
d90 1
a90 1
  sharing Recompile.Options = TopLevel.Options
d111 2
a112 1
      | obey_options(orig_arg as (options, rest as (arg::args))) =
d133 4
a136 29
		  (let
		     val
		       Options.OPTIONS
                       {listing_options,
                        compiler_options = Options.COMPILEROPTIONS {debug,
                                                                    debug_warnings,
                                                                    profile,
                                                                    trace,
                                                                    opt_leaf_fns,
                                                                    opt_tail_calls,
                                                                    opt_self_calls},
                        print_options,
                        compat_options,
			extension_options} = options
		   in
		     Options.OPTIONS
                     {listing_options = listing_options,
                      compiler_options = Options.COMPILEROPTIONS {debug = true,
                                                                  debug_warnings = debug_warnings,
                                                                  profile = profile,
                                                                  trace = trace,
                                                                  opt_leaf_fns = opt_leaf_fns,
                                                                  opt_tail_calls = opt_tail_calls,
                                                                  opt_self_calls = opt_self_calls},
                      print_options = print_options,
                      compat_options = compat_options, 
                      extension_options = extension_options} 
		   end,
		 rest))
d139 4
a142 29
		  (let
		     val
		       Options.OPTIONS
                       {listing_options,
                        compiler_options = Options.COMPILEROPTIONS {debug,
                                                                    debug_warnings,
                                                                    profile,
                                                                    trace,
                                                                    opt_leaf_fns,
                                                                    opt_tail_calls,
                                                                    opt_self_calls},
                        print_options,
                        compat_options,
			extension_options} = options
		   in
		     Options.OPTIONS
                     {listing_options = listing_options,
                      compiler_options = Options.COMPILEROPTIONS {debug = false,
                                                                  debug_warnings = debug_warnings,
                                                                  profile = profile,
                                                                  trace = trace,
                                                                  opt_leaf_fns = opt_leaf_fns,
                                                                  opt_tail_calls = opt_tail_calls,
                                                                  opt_self_calls = opt_self_calls},
                      print_options = print_options,
                      compat_options = compat_options, 
                      extension_options = extension_options} 
		   end,
		 rest))
d145 4
a148 29
		  (let
		     val
		       Options.OPTIONS
                       {listing_options,
                        compiler_options = Options.COMPILEROPTIONS {debug,
                                                                    debug_warnings,
                                                                    profile,
                                                                    trace,
                                                                    opt_leaf_fns,
                                                                    opt_tail_calls,
                                                                    opt_self_calls},
                        print_options,
                        compat_options,
			extension_options} = options
		   in
		     Options.OPTIONS
                     {listing_options = listing_options,
                      compiler_options = Options.COMPILEROPTIONS {debug = debug,
                                                                  debug_warnings = debug_warnings,
                                                                  profile = true,
                                                                  trace = trace,
                                                                  opt_leaf_fns = opt_leaf_fns,
                                                                  opt_tail_calls = opt_tail_calls,
                                                                  opt_self_calls = opt_self_calls},
                      print_options = print_options,
                      compat_options = compat_options,
                      extension_options = extension_options} 
		   end,
		 rest))
d151 4
a154 29
		  (let
		     val
		       Options.OPTIONS
                       {listing_options,
                        compiler_options = Options.COMPILEROPTIONS {debug,
                                                                    debug_warnings,
                                                                    profile,
                                                                    trace,
                                                                    opt_leaf_fns,
                                                                    opt_tail_calls,
                                                                    opt_self_calls},
                        print_options,
                        compat_options,
			extension_options} = options
		   in
		     Options.OPTIONS
                     {listing_options = listing_options,
                      compiler_options = Options.COMPILEROPTIONS {debug = debug,
                                                                  debug_warnings = debug_warnings,
                                                                  profile = false,
                                                                  trace = trace,
                                                                  opt_leaf_fns = opt_leaf_fns,
                                                                  opt_tail_calls = opt_tail_calls,
                                                                  opt_self_calls = opt_self_calls},
                      print_options = print_options,
                      compat_options = compat_options,
                      extension_options = extension_options} 
		   end,
		 rest))
d157 4
a160 29
		  (let
		     val
		       Options.OPTIONS
                       {listing_options,
                        compiler_options = Options.COMPILEROPTIONS {debug,
                                                                    debug_warnings,
                                                                    profile,
                                                                    trace,
                                                                    opt_leaf_fns,
                                                                    opt_tail_calls,
                                                                    opt_self_calls},
                        print_options,
                        compat_options,
			extension_options} = options
		   in
		     Options.OPTIONS
                     {listing_options = listing_options,
                      compiler_options = Options.COMPILEROPTIONS {debug = debug,
                                                                  debug_warnings = debug_warnings,
                                                                  profile = profile,
                                                                  trace = true,
                                                                  opt_leaf_fns = opt_leaf_fns,
                                                                  opt_tail_calls = opt_tail_calls,
                                                                  opt_self_calls = opt_self_calls},
                      print_options = print_options,
                      compat_options = compat_options,
                      extension_options = extension_options} 
		   end,
		 rest))
d163 4
a166 29
		  (let
		     val
		       Options.OPTIONS
                       {listing_options,
                        compiler_options = Options.COMPILEROPTIONS {debug,
                                                                    debug_warnings,
                                                                    profile,
                                                                    trace,
                                                                    opt_leaf_fns,
                                                                    opt_tail_calls,
                                                                    opt_self_calls},
                        print_options,
                        compat_options,
			extension_options} = options
		   in
		     Options.OPTIONS
                     {listing_options = listing_options,
                      compiler_options = Options.COMPILEROPTIONS {debug = debug,
                                                                  debug_warnings = debug_warnings,
                                                                  profile = profile,
                                                                  trace = false,
                                                                  opt_leaf_fns = opt_leaf_fns,
                                                                  opt_tail_calls = opt_tail_calls,
                                                                  opt_self_calls = opt_self_calls},
                      print_options = print_options,
                      compat_options = compat_options,
                      extension_options = extension_options} 
		   end,
		 rest))
d169 4
a172 31
		  (let
		     val
		       Options.OPTIONS
		       {listing_options = Options.LISTINGOPTIONS {show_absyn,
                                                                  show_lambda,
                                                                  show_match,
                                                                  show_opt_lambda,
                                                                  show_environ,
                                                                  show_mir,
                                                                  show_opt_mir,
                                                                  show_mach},
                       compiler_options,
                       print_options,
                       compat_options,
		       extension_options} = options
		   in
		     Options.OPTIONS
		     {listing_options = Options.LISTINGOPTIONS{show_absyn = true,
                                                               show_lambda = show_lambda,
                                                               show_match = show_match,
                                                               show_opt_lambda = show_opt_lambda,
                                                               show_environ = show_environ,
                                                               show_mir = show_mir,
                                                               show_opt_mir = show_opt_mir,
                                                               show_mach = show_mach},
                     compiler_options = compiler_options,
                     print_options = print_options,
                     compat_options = compat_options,
                     extension_options = extension_options} 
		   end,
		 rest))
d175 4
a178 31
		  (let
		     val
		       Options.OPTIONS
		       {listing_options = Options.LISTINGOPTIONS {show_absyn,
                                                                  show_lambda,
                                                                  show_match,
                                                                  show_opt_lambda,
                                                                  show_environ,
                                                                  show_mir,
                                                                  show_opt_mir,
                                                                  show_mach},
                       compiler_options,
                       print_options,
                       compat_options,
		       extension_options} = options
		   in
		     Options.OPTIONS
		     {listing_options = Options.LISTINGOPTIONS{show_absyn = false,
                                                               show_lambda = show_lambda,
                                                               show_match = show_match,
                                                               show_opt_lambda = show_opt_lambda,
                                                               show_environ = show_environ,
                                                               show_mir = show_mir,
                                                               show_opt_mir = show_opt_mir,
                                                               show_mach = show_mach},
                     compiler_options = compiler_options,
                     print_options = print_options,
                     compat_options = compat_options,
                     extension_options = extension_options} 
		   end,
		 rest))
d181 4
a184 31
		  (let
		     val
		       Options.OPTIONS
		       {listing_options = Options.LISTINGOPTIONS {show_absyn,
                                                                  show_lambda,
                                                                  show_match,
                                                                  show_opt_lambda,
                                                                  show_environ,
                                                                  show_mir,
                                                                  show_opt_mir,
                                                                  show_mach},
                       compiler_options,
                       print_options,
                       compat_options,
		       extension_options} = options
		   in
		     Options.OPTIONS
		     {listing_options = Options.LISTINGOPTIONS{show_absyn = show_absyn,
                                                               show_lambda = true,
                                                               show_match = show_match,
                                                               show_opt_lambda = show_opt_lambda,
                                                               show_environ = show_environ,
                                                               show_mir = show_mir,
                                                               show_opt_mir = show_opt_mir,
                                                               show_mach = show_mach},
                     compiler_options = compiler_options,
                     print_options = print_options,
                     compat_options = compat_options,
                     extension_options = extension_options} 
		   end,
		 rest))
d187 4
a190 31
		  (let
		     val
		       Options.OPTIONS
		       {listing_options = Options.LISTINGOPTIONS {show_absyn,
                                                                  show_lambda,
                                                                  show_match,
                                                                  show_opt_lambda,
                                                                  show_environ,
                                                                  show_mir,
                                                                  show_opt_mir,
                                                                  show_mach},
                       compiler_options,
                       print_options,
                       compat_options,
		       extension_options} = options
		   in
		     Options.OPTIONS
		     {listing_options = Options.LISTINGOPTIONS{show_absyn = show_absyn,
                                                               show_lambda = false,
                                                               show_match = show_match,
                                                               show_opt_lambda = show_opt_lambda,
                                                               show_environ = show_environ,
                                                               show_mir = show_mir,
                                                               show_opt_mir = show_opt_mir,
                                                               show_mach = show_mach},
                     compiler_options = compiler_options,
                     print_options = print_options,
                     compat_options = compat_options,
                     extension_options = extension_options} 
		   end,
		 rest))
d193 4
a196 31
		  (let
		     val
		       Options.OPTIONS
		       {listing_options = Options.LISTINGOPTIONS {show_absyn,
                                                                  show_lambda,
                                                                  show_match,
                                                                  show_opt_lambda,
                                                                  show_environ,
                                                                  show_mir,
                                                                  show_opt_mir,
                                                                  show_mach},
                       compiler_options,
                       print_options,
                       compat_options,
		       extension_options} = options
		   in
		     Options.OPTIONS
		     {listing_options = Options.LISTINGOPTIONS{show_absyn = show_absyn,
                                                               show_lambda = show_lambda,
                                                               show_match = show_match,
                                                               show_opt_lambda = true,
                                                               show_environ = show_environ,
                                                               show_mir = show_mir,
                                                               show_opt_mir = show_opt_mir,
                                                               show_mach = show_mach},
                     compiler_options = compiler_options,
                     print_options = print_options,
                     compat_options = compat_options,
                     extension_options = extension_options} 
		   end,
		 rest))
d199 4
a202 31
		  (let
		     val
		       Options.OPTIONS
		       {listing_options = Options.LISTINGOPTIONS {show_absyn,
                                                                  show_lambda,
                                                                  show_match,
                                                                  show_opt_lambda,
                                                                  show_environ,
                                                                  show_mir,
                                                                  show_opt_mir,
                                                                  show_mach},
                       compiler_options,
                       print_options,
                       compat_options,
		       extension_options} = options
		   in
		     Options.OPTIONS
		     {listing_options = Options.LISTINGOPTIONS{show_absyn = show_absyn,
                                                               show_lambda = show_lambda,
                                                               show_match = show_match,
                                                               show_opt_lambda = false,
                                                               show_environ = show_environ,
                                                               show_mir = show_mir,
                                                               show_opt_mir = show_opt_mir,
                                                               show_mach = show_mach},
                     compiler_options = compiler_options,
                     print_options = print_options,
                     compat_options = compat_options,
                     extension_options = extension_options} 
		   end,
		 rest))
d205 4
a208 31
		  (let
		     val
		       Options.OPTIONS
		       {listing_options = Options.LISTINGOPTIONS {show_absyn,
                                                                  show_lambda,
                                                                  show_match,
                                                                  show_opt_lambda,
                                                                  show_environ,
                                                                  show_mir,
                                                                  show_opt_mir,
                                                                  show_mach},
                       compiler_options,
                       print_options,
                       compat_options,
		       extension_options} = options
		   in
		     Options.OPTIONS
		     {listing_options = Options.LISTINGOPTIONS{show_absyn = show_absyn,
                                                               show_lambda = show_lambda,
                                                               show_match = show_match,
                                                               show_opt_lambda = show_opt_lambda,
                                                               show_environ = true,
                                                               show_mir = show_mir,
                                                               show_opt_mir = show_opt_mir,
                                                               show_mach = show_mach},
                     compiler_options = compiler_options,
                     print_options = print_options,
                     compat_options = compat_options,
                     extension_options = extension_options} 
		   end,
		 rest))
d211 4
a214 31
		  (let
		     val
		       Options.OPTIONS
		       {listing_options = Options.LISTINGOPTIONS {show_absyn,
                                                                  show_lambda,
                                                                  show_match,
                                                                  show_opt_lambda,
                                                                  show_environ,
                                                                  show_mir,
                                                                  show_opt_mir,
                                                                  show_mach},
                       compiler_options,
                       print_options,
                       compat_options,
		       extension_options} = options
		   in
		     Options.OPTIONS
		     {listing_options = Options.LISTINGOPTIONS{show_absyn = show_absyn,
                                                               show_lambda = show_lambda,
                                                               show_match = show_match,
                                                               show_opt_lambda = show_opt_lambda,
                                                               show_environ = false,
                                                               show_mir = show_mir,
                                                               show_opt_mir = show_opt_mir,
                                                               show_mach = show_mach},
                     compiler_options = compiler_options,
                     print_options = print_options,
                     compat_options = compat_options,
                     extension_options = extension_options} 
		   end,
		 rest))
d217 4
a220 31
		  (let
		     val
		       Options.OPTIONS
		       {listing_options = Options.LISTINGOPTIONS {show_absyn,
                                                                  show_lambda,
                                                                  show_match,
                                                                  show_opt_lambda,
                                                                  show_environ,
                                                                  show_mir,
                                                                  show_opt_mir,
                                                                  show_mach},
                       compiler_options,
                       print_options,
                       compat_options,
		       extension_options} = options
		   in
		     Options.OPTIONS
		     {listing_options = Options.LISTINGOPTIONS{show_absyn = show_absyn,
                                                               show_lambda = show_lambda,
                                                               show_match = show_match,
                                                               show_opt_lambda = show_opt_lambda,
                                                               show_environ = show_environ,
                                                               show_mir = true,
                                                               show_opt_mir = show_opt_mir,
                                                               show_mach = show_mach},
                     compiler_options = compiler_options,
                     print_options = print_options,
                     compat_options = compat_options,
                     extension_options = extension_options} 
		   end,
		 rest))
d223 4
a226 31
		  (let
		     val
		       Options.OPTIONS
		       {listing_options = Options.LISTINGOPTIONS {show_absyn,
                                                                  show_lambda,
                                                                  show_match,
                                                                  show_opt_lambda,
                                                                  show_environ,
                                                                  show_mir,
                                                                  show_opt_mir,
                                                                  show_mach},
                       compiler_options,
                       print_options,
                       compat_options,
		       extension_options} = options
		   in
		     Options.OPTIONS
		     {listing_options = Options.LISTINGOPTIONS{show_absyn = show_absyn,
                                                               show_lambda = show_lambda,
                                                               show_match = show_match,
                                                               show_opt_lambda = show_opt_lambda,
                                                               show_environ = show_environ,
                                                               show_mir = false,
                                                               show_opt_mir = show_opt_mir,
                                                               show_mach = show_mach},
                     compiler_options = compiler_options,
                     print_options = print_options,
                     compat_options = compat_options,
                     extension_options = extension_options} 
		   end,
		 rest))
d229 4
a232 31
		  (let
		     val
		       Options.OPTIONS
		       {listing_options = Options.LISTINGOPTIONS {show_absyn,
                                                                  show_lambda,
                                                                  show_match,
                                                                  show_opt_lambda,
                                                                  show_environ,
                                                                  show_mir,
                                                                  show_opt_mir,
                                                                  show_mach},
                       compiler_options,
                       print_options,
                       compat_options,
		       extension_options} = options
		   in
		     Options.OPTIONS
		     {listing_options = Options.LISTINGOPTIONS{show_absyn = show_absyn,
                                                               show_lambda = show_lambda,
                                                               show_match = show_match,
                                                               show_opt_lambda = show_opt_lambda,
                                                               show_environ = show_environ,
                                                               show_mir = show_mir,
                                                               show_opt_mir = true,
                                                               show_mach = show_mach},
                     compiler_options = compiler_options,
                     print_options = print_options,
                     compat_options = compat_options,
                     extension_options = extension_options} 
		   end,
		 rest))
d235 4
a238 31
		  (let
		     val
		       Options.OPTIONS
		       {listing_options = Options.LISTINGOPTIONS {show_absyn,
                                                                  show_lambda,
                                                                  show_match,
                                                                  show_opt_lambda,
                                                                  show_environ,
                                                                  show_mir,
                                                                  show_opt_mir,
                                                                  show_mach},
                       compiler_options,
                       print_options,
                       compat_options,
		       extension_options} = options
		   in
		     Options.OPTIONS
		     {listing_options = Options.LISTINGOPTIONS{show_absyn = show_absyn,
                                                               show_lambda = show_lambda,
                                                               show_match = show_match,
                                                               show_opt_lambda = show_opt_lambda,
                                                               show_environ = show_environ,
                                                               show_mir = show_mir,
                                                               show_opt_mir = false,
                                                               show_mach = show_mach},
                     compiler_options = compiler_options,
                     print_options = print_options,
                     compat_options = compat_options,
                     extension_options = extension_options} 
		   end,
		 rest))
d241 4
a244 31
		  (let
		     val
		       Options.OPTIONS
		       {listing_options = Options.LISTINGOPTIONS {show_absyn,
                                                                  show_lambda,
                                                                  show_match,
                                                                  show_opt_lambda,
                                                                  show_environ,
                                                                  show_mir,
                                                                  show_opt_mir,
                                                                  show_mach},
                       compiler_options,
                       print_options,
                       compat_options,
		       extension_options} = options
		   in
		     Options.OPTIONS
		     {listing_options = Options.LISTINGOPTIONS{show_absyn = show_absyn,
                                                               show_lambda = show_lambda,
                                                               show_match = show_match,
                                                               show_opt_lambda = show_opt_lambda,
                                                               show_environ = show_environ,
                                                               show_mir = show_mir,
                                                               show_opt_mir = show_opt_mir,
                                                               show_mach = true},
                     compiler_options = compiler_options,
                     print_options = print_options,
                     compat_options = compat_options,
                     extension_options = extension_options} 
		   end,
		 rest))
d247 4
a250 31
		  (let
		     val
		       Options.OPTIONS
		       {listing_options = Options.LISTINGOPTIONS {show_absyn,
                                                                  show_lambda,
                                                                  show_match,
                                                                  show_opt_lambda,
                                                                  show_environ,
                                                                  show_mir,
                                                                  show_opt_mir,
                                                                  show_mach},
                       compiler_options,
                       print_options,
                       compat_options,
		       extension_options} = options
		   in
		     Options.OPTIONS
		     {listing_options = Options.LISTINGOPTIONS{show_absyn = show_absyn,
                                                               show_lambda = show_lambda,
                                                               show_match = show_match,
                                                               show_opt_lambda = show_opt_lambda,
                                                               show_environ = show_environ,
                                                               show_mir = show_mir,
                                                               show_opt_mir = show_opt_mir,
                                                               show_mach = false},
                     compiler_options = compiler_options,
                     print_options = print_options,
                     compat_options = compat_options,
                     extension_options = extension_options} 
		   end,
		 rest))
d291 29
a319 28
	   Options.OPTIONS
           {listing_options = Options.LISTINGOPTIONS {show_absyn = false,
                                                      show_lambda = false,
                                                      show_match = false,
                                                      show_opt_lambda = false,
                                                      show_environ = false,
                                                      show_mir = false,
                                                      show_opt_mir = false,
                                                      show_mach = false
                                                      },
           compiler_options = Options.COMPILEROPTIONS {debug = false,
                                                       debug_warnings = false,
                                                       profile = false,
                                                       trace = false,
                                                       opt_leaf_fns = true,
                                                       opt_tail_calls = true,
                                                       opt_self_calls = true},
           print_options = Options.PRINTOPTIONS {maximum_list_size = 10,
                                                 maximum_ref_depth = 3,
                                                 maximum_shape_depth = 10,
                                                 maximum_depth = 7,
                                                 print_fn_details = false,
                                                 print_exn_details = true,
                                                 show_eq_info = false,
                                                 show_id_class = false},
           compat_options = Options.default_compat_options,
	   extension_options = Options.default_extension_options}
         val (options, files) = obey_options(options, args)
d324 1
a324 1
           (!compiler) options name))
@


1.17
log
@Changed to use default_compat_options
@
text
@d11 3
d110 1
a110 1
          if length > 0 andalso ordof (arg, 0) = ord "-" then
@


1.16
log
@Modified option handling to reflect changes in the Options type.
@
text
@d11 3
d835 1
a835 1
           compat_options = Options.COMPATOPTIONS {},
@


1.15
log
@Options changes
@
text
@d11 3
d133 2
a134 1
                        compat_options} = options
d146 2
a147 1
                      compat_options = compat_options} 
d164 2
a165 1
                        compat_options} = options
d177 2
a178 1
                      compat_options = compat_options} 
d195 2
a196 1
                        compat_options} = options
d208 2
a209 1
                      compat_options = compat_options} 
d226 2
a227 1
                        compat_options} = options
d239 2
a240 1
                      compat_options = compat_options} 
d257 2
a258 1
                        compat_options} = options
d270 2
a271 1
                      compat_options = compat_options} 
d288 2
a289 1
                        compat_options} = options
d301 2
a302 1
                      compat_options = compat_options} 
d320 2
a321 1
                       compat_options} = options
d334 2
a335 1
                     compat_options = compat_options}
d353 2
a354 1
                       compat_options} = options
d367 2
a368 1
                     compat_options = compat_options}
d386 2
a387 1
                       compat_options} = options
d400 2
a401 1
                     compat_options = compat_options}
d419 2
a420 1
                       compat_options} = options
d433 2
a434 1
                     compat_options = compat_options}
d452 2
a453 1
                       compat_options} = options
d466 2
a467 1
                     compat_options = compat_options}
d485 2
a486 1
                       compat_options} = options
d499 2
a500 1
                     compat_options = compat_options}
d518 2
a519 1
                       compat_options} = options
d532 2
a533 1
                     compat_options = compat_options}
d551 2
a552 1
                       compat_options} = options
d565 2
a566 1
                     compat_options = compat_options}
d584 2
a585 1
                       compat_options} = options
d598 2
a599 1
                     compat_options = compat_options}
d617 2
a618 1
                       compat_options} = options
d631 2
a632 1
                     compat_options = compat_options}
d650 2
a651 1
                       compat_options} = options
d664 2
a665 1
                     compat_options = compat_options}
d683 2
a684 1
                       compat_options} = options
d697 2
a698 1
                     compat_options = compat_options}
d716 2
a717 1
                       compat_options} = options
d730 2
a731 1
                     compat_options = compat_options}
d749 2
a750 1
                       compat_options} = options
d763 2
a764 1
                     compat_options = compat_options}
d832 2
a833 1
           compat_options = Options.COMPATOPTIONS {dummy = false}}
@


1.14
log
@Options & Info changes
@
text
@d11 3
d75 2
a76 2
  sharing Recompile.Info = TopLevel.Parser.Lexer.Info
  sharing Recompile.Options = TopLevel.MirTypes.Debugger_Types.Options
d80 2
a81 2
    structure Options = TopLevel.MirTypes.Debugger_Types.Options
    structure Info = TopLevel.Parser.Lexer.Info
d121 22
a142 20
                       (listing_options,
                        Options.COMPILEROPTIONS {debug,
                                                 debug_warnings,
                                                 profile,
                                                 trace,
                                                 opt_leaf_fns,
                                                 opt_tail_calls,
                                                 opt_self_calls},
                        print_options) = options
		   in
		     Options.OPTIONS
                     (listing_options,
                      Options.COMPILEROPTIONS {debug = true,
                                               debug_warnings = debug_warnings,
                                               profile = profile,
                                               trace = trace,
                                               opt_leaf_fns = opt_leaf_fns,
                                               opt_tail_calls = opt_tail_calls,
                                               opt_self_calls = opt_self_calls},
                      print_options)
d150 22
a171 20
                       (listing_options,
                        Options.COMPILEROPTIONS {debug,
                                                 debug_warnings,
                                                 profile,
                                                 trace,
                                                 opt_leaf_fns,
                                                 opt_tail_calls,
                                                 opt_self_calls},
                        print_options) = options
		   in
		     Options.OPTIONS
                     (listing_options,
                      Options.COMPILEROPTIONS {debug = false,
                                               debug_warnings = debug_warnings,
                                               profile = profile,
                                               trace = trace,
                                               opt_leaf_fns = opt_leaf_fns,
                                               opt_tail_calls = opt_tail_calls,
                                               opt_self_calls = opt_self_calls},
                      print_options)
d179 22
a200 20
                       (listing_options,
                        Options.COMPILEROPTIONS {debug,
                                                 debug_warnings,
                                                 profile,
                                                 trace,
                                                 opt_leaf_fns,
                                                 opt_tail_calls,
                                                 opt_self_calls},
                        print_options) = options
		   in
		     Options.OPTIONS
                     (listing_options,
                      Options.COMPILEROPTIONS {debug = debug,
                                               debug_warnings = debug_warnings,
                                               profile = true,
                                               trace = trace,
                                               opt_leaf_fns = opt_leaf_fns,
                                               opt_tail_calls = opt_tail_calls,
                                               opt_self_calls = opt_self_calls},
                      print_options)
d208 22
a229 20
                       (listing_options,
                        Options.COMPILEROPTIONS {debug,
                                                 debug_warnings,
                                                 profile,
                                                 trace,
                                                 opt_leaf_fns,
                                                 opt_tail_calls,
                                                 opt_self_calls},
                        print_options) = options
		   in
		     Options.OPTIONS
                     (listing_options,
                      Options.COMPILEROPTIONS {debug = debug,
                                               debug_warnings = debug_warnings,
                                               profile = false,
                                               trace = trace,
                                               opt_leaf_fns = opt_leaf_fns,
                                               opt_tail_calls = opt_tail_calls,
                                               opt_self_calls = opt_self_calls},
                      print_options)
d237 22
a258 20
                       (listing_options,
                        Options.COMPILEROPTIONS {debug,
                                                 debug_warnings,
                                                 profile,
                                                 trace,
                                                 opt_leaf_fns,
                                                 opt_tail_calls,
                                                 opt_self_calls},
                        print_options) = options
		   in
		     Options.OPTIONS
                     (listing_options,
                      Options.COMPILEROPTIONS {debug = debug,
                                               debug_warnings = debug_warnings,
                                               profile = profile,
                                               trace = true,
                                               opt_leaf_fns = opt_leaf_fns,
                                               opt_tail_calls = opt_tail_calls,
                                               opt_self_calls = opt_self_calls},
                      print_options)
d266 22
a287 20
                       (listing_options,
                        Options.COMPILEROPTIONS {debug,
                                                 debug_warnings,
                                                 profile,
                                                 trace,
                                                 opt_leaf_fns,
                                                 opt_tail_calls,
                                                 opt_self_calls},
                        print_options) = options
		   in
		     Options.OPTIONS
                     (listing_options,
                      Options.COMPILEROPTIONS {debug = debug,
                                               debug_warnings = debug_warnings,
                                               profile = profile,
                                               trace = false,
                                               opt_leaf_fns = opt_leaf_fns,
                                               opt_tail_calls = opt_tail_calls,
                                               opt_self_calls = opt_self_calls},
                      print_options)
d295 24
a318 23
		       (Options.LISTINGOPTIONS {show_absyn,
                                                show_lambda,
                                                show_match,
                                                show_opt_lambda,
                                                show_environ,
                                                show_mir,
                                                show_opt_mir,
                                                show_mach},
                       compiler_options,
                       print_options) = options
		   in
		     Options.OPTIONS
		     (Options.LISTINGOPTIONS{show_absyn = true,
                                             show_lambda = show_lambda,
                                             show_match = show_match,
                                             show_opt_lambda = show_opt_lambda,
                                             show_environ = show_environ,
                                             show_mir = show_mir,
                                             show_opt_mir = show_opt_mir,
                                             show_mach = show_mach
                                             },
                     compiler_options,
                     print_options)
d326 24
a349 23
		       (Options.LISTINGOPTIONS {show_absyn,
                                                show_lambda,
                                                show_match,
                                                show_opt_lambda,
                                                show_environ,
                                                show_mir,
                                                show_opt_mir,
                                                show_mach},
                       compiler_options,
                       print_options) = options
		   in
		     Options.OPTIONS
		     (Options.LISTINGOPTIONS{show_absyn = false,
                                             show_lambda = show_lambda,
                                             show_match = show_match,
                                             show_opt_lambda = show_opt_lambda,
                                             show_environ = show_environ,
                                             show_mir = show_mir,
                                             show_opt_mir = show_opt_mir,
                                             show_mach = show_mach
                                             },
                     compiler_options,
                     print_options)
d357 24
a380 23
		       (Options.LISTINGOPTIONS {show_absyn,
                                                show_lambda,
                                                show_match,
                                                show_opt_lambda,
                                                show_environ,
                                                show_mir,
                                                show_opt_mir,
                                                show_mach},
                       compiler_options,
                       print_options) = options
		   in
		     Options.OPTIONS
		     (Options.LISTINGOPTIONS{show_absyn = show_absyn,
                                             show_lambda = true,
                                             show_match = show_match,
                                             show_opt_lambda = show_opt_lambda,
                                             show_environ = show_environ,
                                             show_mir = show_mir,
                                             show_opt_mir = show_opt_mir,
                                             show_mach = show_mach
                                             },
                     compiler_options,
                     print_options)
d388 24
a411 23
		       (Options.LISTINGOPTIONS {show_absyn,
                                                show_lambda,
                                                show_match,
                                                show_opt_lambda,
                                                show_environ,
                                                show_mir,
                                                show_opt_mir,
                                                show_mach},
                       compiler_options,
                       print_options) = options
		   in
		     Options.OPTIONS
		     (Options.LISTINGOPTIONS{show_absyn = show_absyn,
                                             show_lambda = false,
                                             show_match = show_match,
                                             show_opt_lambda = show_opt_lambda,
                                             show_environ = show_environ,
                                             show_mir = show_mir,
                                             show_opt_mir = show_opt_mir,
                                             show_mach = show_mach
                                             },
                     compiler_options,
                     print_options)
d419 24
a442 23
		       (Options.LISTINGOPTIONS {show_absyn,
                                                show_lambda,
                                                show_match,
                                                show_opt_lambda,
                                                show_environ,
                                                show_mir,
                                                show_opt_mir,
                                                show_mach},
                       compiler_options,
                       print_options) = options
		   in
		     Options.OPTIONS
		     (Options.LISTINGOPTIONS{show_absyn = show_absyn,
                                             show_lambda = show_lambda,
                                             show_match = show_match,
                                             show_opt_lambda = true,
                                             show_environ = show_environ,
                                             show_mir = show_mir,
                                             show_opt_mir = show_opt_mir,
                                             show_mach = show_mach
                                             },
                     compiler_options,
                     print_options)
d450 24
a473 23
		       (Options.LISTINGOPTIONS {show_absyn,
                                                show_lambda,
                                                show_match,
                                                show_opt_lambda,
                                                show_environ,
                                                show_mir,
                                                show_opt_mir,
                                                show_mach},
                       compiler_options,
                       print_options) = options
		   in
		     Options.OPTIONS
		     (Options.LISTINGOPTIONS{show_absyn = show_absyn,
                                             show_lambda = show_lambda,
                                             show_match = show_match,
                                             show_opt_lambda = false,
                                             show_environ = show_environ,
                                             show_mir = show_mir,
                                             show_opt_mir = show_opt_mir,
                                             show_mach = show_mach
                                             },
                     compiler_options,
                     print_options)
d481 24
a504 23
		       (Options.LISTINGOPTIONS {show_absyn,
                                                show_lambda,
                                                show_match,
                                                show_opt_lambda,
                                                show_environ,
                                                show_mir,
                                                show_opt_mir,
                                                show_mach},
                       compiler_options,
                       print_options) = options
		   in
		     Options.OPTIONS
		     (Options.LISTINGOPTIONS{show_absyn = show_absyn,
                                             show_lambda = show_lambda,
                                             show_match = show_match,
                                             show_opt_lambda = show_opt_lambda,
                                             show_environ = true,
                                             show_mir = show_mir,
                                             show_opt_mir = show_opt_mir,
                                             show_mach = show_mach
                                             },
                     compiler_options,
                     print_options)
d512 24
a535 23
		       (Options.LISTINGOPTIONS {show_absyn,
                                                show_lambda,
                                                show_match,
                                                show_opt_lambda,
                                                show_environ,
                                                show_mir,
                                                show_opt_mir,
                                                show_mach},
                       compiler_options,
                       print_options) = options
		   in
		     Options.OPTIONS
		     (Options.LISTINGOPTIONS{show_absyn = show_absyn,
                                             show_lambda = show_lambda,
                                             show_match = show_match,
                                             show_opt_lambda = show_opt_lambda,
                                             show_environ = false,
                                             show_mir = show_mir,
                                             show_opt_mir = show_opt_mir,
                                             show_mach = show_mach
                                             },
                     compiler_options,
                     print_options)
d543 24
a566 23
		       (Options.LISTINGOPTIONS {show_absyn,
                                                show_lambda,
                                                show_match,
                                                show_opt_lambda,
                                                show_environ,
                                                show_mir,
                                                show_opt_mir,
                                                show_mach},
                       compiler_options,
                       print_options) = options
		   in
		     Options.OPTIONS
		     (Options.LISTINGOPTIONS{show_absyn = show_absyn,
                                             show_lambda = show_lambda,
                                             show_match = show_match,
                                             show_opt_lambda = show_opt_lambda,
                                             show_environ = show_environ,
                                             show_mir = true,
                                             show_opt_mir = show_opt_mir,
                                             show_mach = show_mach
                                             },
                     compiler_options,
                     print_options)
d574 24
a597 23
		       (Options.LISTINGOPTIONS {show_absyn,
                                                show_lambda,
                                                show_match,
                                                show_opt_lambda,
                                                show_environ,
                                                show_mir,
                                                show_opt_mir,
                                                show_mach},
                       compiler_options,
                       print_options) = options
		   in
		     Options.OPTIONS
		     (Options.LISTINGOPTIONS{show_absyn = show_absyn,
                                             show_lambda = show_lambda,
                                             show_match = show_match,
                                             show_opt_lambda = show_opt_lambda,
                                             show_environ = show_environ,
                                             show_mir = false,
                                             show_opt_mir = show_opt_mir,
                                             show_mach = show_mach
                                             },
                     compiler_options,
                     print_options)
d605 24
a628 23
		       (Options.LISTINGOPTIONS {show_absyn,
                                                show_lambda,
                                                show_match,
                                                show_opt_lambda,
                                                show_environ,
                                                show_mir,
                                                show_opt_mir,
                                                show_mach},
                       compiler_options,
                       print_options) = options
		   in
		     Options.OPTIONS
		     (Options.LISTINGOPTIONS{show_absyn = show_absyn,
                                             show_lambda = show_lambda,
                                             show_match = show_match,
                                             show_opt_lambda = show_opt_lambda,
                                             show_environ = show_environ,
                                             show_mir = show_mir,
                                             show_opt_mir = true,
                                             show_mach = show_mach
                                             },
                     compiler_options,
                     print_options)
d636 24
a659 23
		       (Options.LISTINGOPTIONS {show_absyn,
                                                show_lambda,
                                                show_match,
                                                show_opt_lambda,
                                                show_environ,
                                                show_mir,
                                                show_opt_mir,
                                                show_mach},
                       compiler_options,
                       print_options) = options
		   in
		     Options.OPTIONS
		     (Options.LISTINGOPTIONS{show_absyn = show_absyn,
                                             show_lambda = show_lambda,
                                             show_match = show_match,
                                             show_opt_lambda = show_opt_lambda,
                                             show_environ = show_environ,
                                             show_mir = show_mir,
                                             show_opt_mir = false,
                                             show_mach = show_mach
                                             },
                     compiler_options,
                     print_options)
d667 24
a690 23
		       (Options.LISTINGOPTIONS {show_absyn,
                                                show_lambda,
                                                show_match,
                                                show_opt_lambda,
                                                show_environ,
                                                show_mir,
                                                show_opt_mir,
                                                show_mach},
                       compiler_options,
                       print_options) = options
		   in
		     Options.OPTIONS
		     (Options.LISTINGOPTIONS{show_absyn = show_absyn,
                                             show_lambda = show_lambda,
                                             show_match = show_match,
                                             show_opt_lambda = show_opt_lambda,
                                             show_environ = show_environ,
                                             show_mir = show_mir,
                                             show_opt_mir = show_opt_mir,
                                             show_mach = true
                                             },
                     compiler_options,
                     print_options)
d698 24
a721 23
		       (Options.LISTINGOPTIONS {show_absyn,
                                                show_lambda,
                                                show_match,
                                                show_opt_lambda,
                                                show_environ,
                                                show_mir,
                                                show_opt_mir,
                                                show_mach},
                       compiler_options,
                       print_options) = options
		   in
		     Options.OPTIONS
		     (Options.LISTINGOPTIONS{show_absyn = show_absyn,
                                             show_lambda = show_lambda,
                                             show_match = show_match,
                                             show_opt_lambda = show_opt_lambda,
                                             show_environ = show_environ,
                                             show_mir = show_mir,
                                             show_opt_mir = show_opt_mir,
                                             show_mach = false
                                             },
                     compiler_options,
                     print_options)
d765 25
a789 24
           (Options.LISTINGOPTIONS {show_absyn = false,
                                    show_lambda = false,
                                    show_match = false,
                                    show_opt_lambda = false,
                                    show_environ = false,
                                    show_mir = false,
                                    show_opt_mir = false,
                                    show_mach = false
                                    },
           Options.COMPILEROPTIONS {debug = false,
                                    debug_warnings = false,
                                    profile = false,
                                    trace = false,
                                    opt_leaf_fns = true,
                                    opt_tail_calls = true,
                                    opt_self_calls = true},
           Options.PRINTOPTIONS {maximum_list_size = 10,
                                 maximum_ref_depth = 3,
                                 maximum_shape_depth = 10,
                                 maximum_depth = 7,
                                 print_fn_details = false,
                                 print_exn_details = true,
                                 show_eq_info = false,
                                 show_id_class = false})
@


1.13
log
@Made to use get_pervasive_dir from io
@
text
@d11 3
d71 4
a74 1
  sharing TopLevel.MirTypes = Recompile.MirTypes
d77 2
a78 1
    structure Info = TopLevel.MirTypes.Debugger_Types.Info
d80 2
a81 2
    val compiler =
      ref (TopLevel.compile_file Info.default_options)
d117 21
a137 21
		       TopLevel.MirTypes.OPTIONS
		       {info_opts,
			list_opts,
			debug,
			debug_warnings,
			profile,
			trace,
			opt_leaf_fns,
			opt_tail_calls,
			opt_self_calls} = options
		   in
		     TopLevel.MirTypes.OPTIONS
		     {info_opts = info_opts,
		      list_opts = list_opts,
		      debug = true,
		      debug_warnings = debug_warnings,
		      profile = profile,
		      trace = trace,
		      opt_leaf_fns = opt_leaf_fns,
		      opt_tail_calls = opt_tail_calls,
		      opt_self_calls = opt_self_calls}
d144 21
a164 21
		       TopLevel.MirTypes.OPTIONS
		       {info_opts,
			list_opts,
			debug,
			debug_warnings,
			profile,
			trace,
			opt_leaf_fns,
			opt_tail_calls,
			opt_self_calls} = options
		   in
		     TopLevel.MirTypes.OPTIONS
		     {info_opts = info_opts,
		      list_opts = list_opts,
		      debug = false,
		      debug_warnings = debug_warnings,
		      profile = profile,
		      trace = trace,
		      opt_leaf_fns = opt_leaf_fns,
		      opt_tail_calls = opt_tail_calls,
		      opt_self_calls = opt_self_calls}
d171 21
a191 21
		       TopLevel.MirTypes.OPTIONS
		       {info_opts,
			list_opts,
			debug,
			debug_warnings,
			profile,
			trace,
			opt_leaf_fns,
			opt_tail_calls,
			opt_self_calls} = options
		   in
		     TopLevel.MirTypes.OPTIONS
		     {info_opts = info_opts,
		      list_opts = list_opts,
		      debug = debug,
		      debug_warnings = debug_warnings,
		      profile = true,
		      trace = trace,
		      opt_leaf_fns = opt_leaf_fns,
		      opt_tail_calls = opt_tail_calls,
		      opt_self_calls = opt_self_calls}
d198 21
a218 21
		       TopLevel.MirTypes.OPTIONS
		       {info_opts,
			list_opts,
			debug,
			debug_warnings,
			profile,
			trace,
			opt_leaf_fns,
			opt_tail_calls,
			opt_self_calls} = options
		   in
		     TopLevel.MirTypes.OPTIONS
		     {info_opts = info_opts,
		      list_opts = list_opts,
		      debug = debug,
		      debug_warnings = debug_warnings,
		      profile = false,
		      trace = trace,
		      opt_leaf_fns = opt_leaf_fns,
		      opt_tail_calls = opt_tail_calls,
		      opt_self_calls = opt_self_calls}
d225 21
a245 21
		       TopLevel.MirTypes.OPTIONS
		       {info_opts,
			list_opts,
			debug,
			debug_warnings,
			profile,
			trace,
			opt_leaf_fns,
			opt_tail_calls,
			opt_self_calls} = options
		   in
		     TopLevel.MirTypes.OPTIONS
		     {info_opts = info_opts,
		      list_opts = list_opts,
		      debug = debug,
		      debug_warnings = debug_warnings,
		      profile = profile,
		      trace = true,
		      opt_leaf_fns = opt_leaf_fns,
		      opt_tail_calls = opt_tail_calls,
		      opt_self_calls = opt_self_calls}
d252 21
a272 21
		       TopLevel.MirTypes.OPTIONS
		       {info_opts,
			list_opts,
			debug,
			debug_warnings,
			profile,
			trace,
			opt_leaf_fns,
			opt_tail_calls,
			opt_self_calls} = options
		   in
		     TopLevel.MirTypes.OPTIONS
		     {info_opts = info_opts,
		      list_opts = list_opts,
		      debug = debug,
		      debug_warnings = debug_warnings,
		      profile = profile,
		      trace = false,
		      opt_leaf_fns = opt_leaf_fns,
		      opt_tail_calls = opt_tail_calls,
		      opt_self_calls = opt_self_calls}
d279 24
a302 41
		       TopLevel.MirTypes.OPTIONS
		       {info_opts,
			list_opts = TopLevel.MirTypes.BELO
			{
			 show_absyn,
			 show_lambda,
			 show_match,
			 show_opt_lambda,
			 show_environ,
			 show_mir,
			 show_opt_mir,
			 show_mach
			 },
			debug,
			debug_warnings,
			profile,
			trace,
			opt_leaf_fns,
			opt_tail_calls,
			opt_self_calls} = options
		   in
		     TopLevel.MirTypes.OPTIONS
		     {info_opts = info_opts,
		      list_opts = TopLevel.MirTypes.BELO
		      {
		       show_absyn = true,
		       show_lambda = show_lambda,
		       show_match = show_match,
		       show_opt_lambda = show_opt_lambda,
		       show_environ = show_environ,
		       show_mir = show_mir,
		       show_opt_mir = show_opt_mir,
		       show_mach = show_mach
		       },
		      debug = debug,
		      debug_warnings = debug_warnings,
		      profile = profile,
		      trace = false,
		      opt_leaf_fns = opt_leaf_fns,
		      opt_tail_calls = opt_tail_calls,
		      opt_self_calls = opt_self_calls}
d309 24
a332 41
		       TopLevel.MirTypes.OPTIONS
		       {info_opts,
			list_opts = TopLevel.MirTypes.BELO
			{
			 show_absyn,
			 show_lambda,
			 show_match,
			 show_opt_lambda,
			 show_environ,
			 show_mir,
			 show_opt_mir,
			 show_mach
			 },
			debug,
			debug_warnings,
			profile,
			trace,
			opt_leaf_fns,
			opt_tail_calls,
			opt_self_calls} = options
		   in
		     TopLevel.MirTypes.OPTIONS
		     {info_opts = info_opts,
		      list_opts = TopLevel.MirTypes.BELO
		      {
		       show_absyn = false,
		       show_lambda = show_lambda,
		       show_match = show_match,
		       show_opt_lambda = show_opt_lambda,
		       show_environ = show_environ,
		       show_mir = show_mir,
		       show_opt_mir = show_opt_mir,
		       show_mach = show_mach
		       },
		      debug = debug,
		      debug_warnings = debug_warnings,
		      profile = profile,
		      trace = false,
		      opt_leaf_fns = opt_leaf_fns,
		      opt_tail_calls = opt_tail_calls,
		      opt_self_calls = opt_self_calls}
d339 24
a362 41
		       TopLevel.MirTypes.OPTIONS
		       {info_opts,
			list_opts = TopLevel.MirTypes.BELO
			{
			 show_absyn,
			 show_lambda,
			 show_match,
			 show_opt_lambda,
			 show_environ,
			 show_mir,
			 show_opt_mir,
			 show_mach
			 },
			debug,
			debug_warnings,
			profile,
			trace,
			opt_leaf_fns,
			opt_tail_calls,
			opt_self_calls} = options
		   in
		     TopLevel.MirTypes.OPTIONS
		     {info_opts = info_opts,
		      list_opts = TopLevel.MirTypes.BELO
		      {
		       show_absyn = show_absyn,
		       show_lambda = true,
		       show_match = show_match,
		       show_opt_lambda = show_opt_lambda,
		       show_environ = show_environ,
		       show_mir = show_mir,
		       show_opt_mir = show_opt_mir,
		       show_mach = show_mach
		       },
		      debug = debug,
		      debug_warnings = debug_warnings,
		      profile = profile,
		      trace = false,
		      opt_leaf_fns = opt_leaf_fns,
		      opt_tail_calls = opt_tail_calls,
		      opt_self_calls = opt_self_calls}
d369 24
a392 41
		       TopLevel.MirTypes.OPTIONS
		       {info_opts,
			list_opts = TopLevel.MirTypes.BELO
			{
			 show_absyn,
			 show_lambda,
			 show_match,
			 show_opt_lambda,
			 show_environ,
			 show_mir,
			 show_opt_mir,
			 show_mach
			 },
			debug,
			debug_warnings,
			profile,
			trace,
			opt_leaf_fns,
			opt_tail_calls,
			opt_self_calls} = options
		   in
		     TopLevel.MirTypes.OPTIONS
		     {info_opts = info_opts,
		      list_opts = TopLevel.MirTypes.BELO
		      {
		       show_absyn = show_absyn,
		       show_lambda = false,
		       show_match = show_match,
		       show_opt_lambda = show_opt_lambda,
		       show_environ = show_environ,
		       show_mir = show_mir,
		       show_opt_mir = show_opt_mir,
		       show_mach = show_mach
		       },
		      debug = debug,
		      debug_warnings = debug_warnings,
		      profile = profile,
		      trace = false,
		      opt_leaf_fns = opt_leaf_fns,
		      opt_tail_calls = opt_tail_calls,
		      opt_self_calls = opt_self_calls}
d399 24
a422 41
		       TopLevel.MirTypes.OPTIONS
		       {info_opts,
			list_opts = TopLevel.MirTypes.BELO
			{
			 show_absyn,
			 show_lambda,
			 show_match,
			 show_opt_lambda,
			 show_environ,
			 show_mir,
			 show_opt_mir,
			 show_mach
			 },
			debug,
			debug_warnings,
			profile,
			trace,
			opt_leaf_fns,
			opt_tail_calls,
			opt_self_calls} = options
		   in
		     TopLevel.MirTypes.OPTIONS
		     {info_opts = info_opts,
		      list_opts = TopLevel.MirTypes.BELO
		      {
		       show_absyn = show_absyn,
		       show_lambda = show_lambda,
		       show_match = show_match,
		       show_opt_lambda = true,
		       show_environ = show_environ,
		       show_mir = show_mir,
		       show_opt_mir = show_opt_mir,
		       show_mach = show_mach
		       },
		      debug = debug,
		      debug_warnings = debug_warnings,
		      profile = profile,
		      trace = false,
		      opt_leaf_fns = opt_leaf_fns,
		      opt_tail_calls = opt_tail_calls,
		      opt_self_calls = opt_self_calls}
d429 24
a452 41
		       TopLevel.MirTypes.OPTIONS
		       {info_opts,
			list_opts = TopLevel.MirTypes.BELO
			{
			 show_absyn,
			 show_lambda,
			 show_match,
			 show_opt_lambda,
			 show_environ,
			 show_mir,
			 show_opt_mir,
			 show_mach
			 },
			debug,
			debug_warnings,
			profile,
			trace,
			opt_leaf_fns,
			opt_tail_calls,
			opt_self_calls} = options
		   in
		     TopLevel.MirTypes.OPTIONS
		     {info_opts = info_opts,
		      list_opts = TopLevel.MirTypes.BELO
		      {
		       show_absyn = show_absyn,
		       show_lambda = show_lambda,
		       show_match = show_match,
		       show_opt_lambda = false,
		       show_environ = show_environ,
		       show_mir = show_mir,
		       show_opt_mir = show_opt_mir,
		       show_mach = show_mach
		       },
		      debug = debug,
		      debug_warnings = debug_warnings,
		      profile = profile,
		      trace = false,
		      opt_leaf_fns = opt_leaf_fns,
		      opt_tail_calls = opt_tail_calls,
		      opt_self_calls = opt_self_calls}
d459 24
a482 41
		       TopLevel.MirTypes.OPTIONS
		       {info_opts,
			list_opts = TopLevel.MirTypes.BELO
			{
			 show_absyn,
			 show_lambda,
			 show_match,
			 show_opt_lambda,
			 show_environ,
			 show_mir,
			 show_opt_mir,
			 show_mach
			 },
			debug,
			debug_warnings,
			profile,
			trace,
			opt_leaf_fns,
			opt_tail_calls,
			opt_self_calls} = options
		   in
		     TopLevel.MirTypes.OPTIONS
		     {info_opts = info_opts,
		      list_opts = TopLevel.MirTypes.BELO
		      {
		       show_absyn = show_absyn,
		       show_lambda = show_lambda,
		       show_match = show_match,
		       show_opt_lambda = show_opt_lambda,
		       show_environ = true,
		       show_mir = show_mir,
		       show_opt_mir = show_opt_mir,
		       show_mach = show_mach
		       },
		      debug = debug,
		      debug_warnings = debug_warnings,
		      profile = profile,
		      trace = false,
		      opt_leaf_fns = opt_leaf_fns,
		      opt_tail_calls = opt_tail_calls,
		      opt_self_calls = opt_self_calls}
d489 24
a512 41
		       TopLevel.MirTypes.OPTIONS
		       {info_opts,
			list_opts = TopLevel.MirTypes.BELO
			{
			 show_absyn,
			 show_lambda,
			 show_match,
			 show_opt_lambda,
			 show_environ,
			 show_mir,
			 show_opt_mir,
			 show_mach
			 },
			debug,
			debug_warnings,
			profile,
			trace,
			opt_leaf_fns,
			opt_tail_calls,
			opt_self_calls} = options
		   in
		     TopLevel.MirTypes.OPTIONS
		     {info_opts = info_opts,
		      list_opts = TopLevel.MirTypes.BELO
		      {
		       show_absyn = show_absyn,
		       show_lambda = show_lambda,
		       show_match = show_match,
		       show_opt_lambda = show_opt_lambda,
		       show_environ = false,
		       show_mir = show_mir,
		       show_opt_mir = show_opt_mir,
		       show_mach = show_mach
		       },
		      debug = debug,
		      debug_warnings = debug_warnings,
		      profile = profile,
		      trace = false,
		      opt_leaf_fns = opt_leaf_fns,
		      opt_tail_calls = opt_tail_calls,
		      opt_self_calls = opt_self_calls}
d519 24
a542 41
		       TopLevel.MirTypes.OPTIONS
		       {info_opts,
			list_opts = TopLevel.MirTypes.BELO
			{
			 show_absyn,
			 show_lambda,
			 show_match,
			 show_opt_lambda,
			 show_environ,
			 show_mir,
			 show_opt_mir,
			 show_mach
			 },
			debug,
			debug_warnings,
			profile,
			trace,
			opt_leaf_fns,
			opt_tail_calls,
			opt_self_calls} = options
		   in
		     TopLevel.MirTypes.OPTIONS
		     {info_opts = info_opts,
		      list_opts = TopLevel.MirTypes.BELO
		      {
		       show_absyn = show_absyn,
		       show_lambda = show_lambda,
		       show_match = show_match,
		       show_opt_lambda = show_opt_lambda,
		       show_environ = show_environ,
		       show_mir = true,
		       show_opt_mir = show_opt_mir,
		       show_mach = show_mach
		       },
		      debug = debug,
		      debug_warnings = debug_warnings,
		      profile = profile,
		      trace = false,
		      opt_leaf_fns = opt_leaf_fns,
		      opt_tail_calls = opt_tail_calls,
		      opt_self_calls = opt_self_calls}
d549 24
a572 41
		       TopLevel.MirTypes.OPTIONS
		       {info_opts,
			list_opts = TopLevel.MirTypes.BELO
			{
			 show_absyn,
			 show_lambda,
			 show_match,
			 show_opt_lambda,
			 show_environ,
			 show_mir,
			 show_opt_mir,
			 show_mach
			 },
			debug,
			debug_warnings,
			profile,
			trace,
			opt_leaf_fns,
			opt_tail_calls,
			opt_self_calls} = options
		   in
		     TopLevel.MirTypes.OPTIONS
		     {info_opts = info_opts,
		      list_opts = TopLevel.MirTypes.BELO
		      {
		       show_absyn = show_absyn,
		       show_lambda = show_lambda,
		       show_match = show_match,
		       show_opt_lambda = show_opt_lambda,
		       show_environ = false,
		       show_mir = show_mir,
		       show_opt_mir = show_opt_mir,
		       show_mach = show_mach
		       },
		      debug = debug,
		      debug_warnings = debug_warnings,
		      profile = profile,
		      trace = false,
		      opt_leaf_fns = opt_leaf_fns,
		      opt_tail_calls = opt_tail_calls,
		      opt_self_calls = opt_self_calls}
d579 24
a602 41
		       TopLevel.MirTypes.OPTIONS
		       {info_opts,
			list_opts = TopLevel.MirTypes.BELO
			{
			 show_absyn,
			 show_lambda,
			 show_match,
			 show_opt_lambda,
			 show_environ,
			 show_mir,
			 show_opt_mir,
			 show_mach
			 },
			debug,
			debug_warnings,
			profile,
			trace,
			opt_leaf_fns,
			opt_tail_calls,
			opt_self_calls} = options
		   in
		     TopLevel.MirTypes.OPTIONS
		     {info_opts = info_opts,
		      list_opts = TopLevel.MirTypes.BELO
		      {
		       show_absyn = show_absyn,
		       show_lambda = show_lambda,
		       show_match = show_match,
		       show_opt_lambda = show_opt_lambda,
		       show_environ = show_environ,
		       show_mir = show_mir,
		       show_opt_mir = true,
		       show_mach = show_mach
		       },
		      debug = debug,
		      debug_warnings = debug_warnings,
		      profile = profile,
		      trace = false,
		      opt_leaf_fns = opt_leaf_fns,
		      opt_tail_calls = opt_tail_calls,
		      opt_self_calls = opt_self_calls}
d609 24
a632 41
		       TopLevel.MirTypes.OPTIONS
		       {info_opts,
			list_opts = TopLevel.MirTypes.BELO
			{
			 show_absyn,
			 show_lambda,
			 show_match,
			 show_opt_lambda,
			 show_environ,
			 show_mir,
			 show_opt_mir,
			 show_mach
			 },
			debug,
			debug_warnings,
			profile,
			trace,
			opt_leaf_fns,
			opt_tail_calls,
			opt_self_calls} = options
		   in
		     TopLevel.MirTypes.OPTIONS
		     {info_opts = info_opts,
		      list_opts = TopLevel.MirTypes.BELO
		      {
		       show_absyn = show_absyn,
		       show_lambda = show_lambda,
		       show_match = show_match,
		       show_opt_lambda = show_opt_lambda,
		       show_environ = show_environ,
		       show_mir = show_mir,
		       show_opt_mir = false,
		       show_mach = show_mach
		       },
		      debug = debug,
		      debug_warnings = debug_warnings,
		      profile = profile,
		      trace = false,
		      opt_leaf_fns = opt_leaf_fns,
		      opt_tail_calls = opt_tail_calls,
		      opt_self_calls = opt_self_calls}
d639 24
a662 41
		       TopLevel.MirTypes.OPTIONS
		       {info_opts,
			list_opts = TopLevel.MirTypes.BELO
			{
			 show_absyn,
			 show_lambda,
			 show_match,
			 show_opt_lambda,
			 show_environ,
			 show_mir,
			 show_opt_mir,
			 show_mach
			 },
			debug,
			debug_warnings,
			profile,
			trace,
			opt_leaf_fns,
			opt_tail_calls,
			opt_self_calls} = options
		   in
		     TopLevel.MirTypes.OPTIONS
		     {info_opts = info_opts,
		      list_opts = TopLevel.MirTypes.BELO
		      {
		       show_absyn = show_absyn,
		       show_lambda = show_lambda,
		       show_match = show_match,
		       show_opt_lambda = show_opt_lambda,
		       show_environ = show_environ,
		       show_mir = show_mir,
		       show_opt_mir = show_opt_mir,
		       show_mach = true
		       },
		      debug = debug,
		      debug_warnings = debug_warnings,
		      profile = profile,
		      trace = false,
		      opt_leaf_fns = opt_leaf_fns,
		      opt_tail_calls = opt_tail_calls,
		      opt_self_calls = opt_self_calls}
d669 24
a692 41
		       TopLevel.MirTypes.OPTIONS
		       {info_opts,
			list_opts = TopLevel.MirTypes.BELO
			{
			 show_absyn,
			 show_lambda,
			 show_match,
			 show_opt_lambda,
			 show_environ,
			 show_mir,
			 show_opt_mir,
			 show_mach
			 },
			debug,
			debug_warnings,
			profile,
			trace,
			opt_leaf_fns,
			opt_tail_calls,
			opt_self_calls} = options
		   in
		     TopLevel.MirTypes.OPTIONS
		     {info_opts = info_opts,
		      list_opts = TopLevel.MirTypes.BELO
		      {
		       show_absyn = show_absyn,
		       show_lambda = show_lambda,
		       show_match = show_match,
		       show_opt_lambda = show_opt_lambda,
		       show_environ = show_environ,
		       show_mir = show_mir,
		       show_opt_mir = show_opt_mir,
		       show_mach = false
		       },
		      debug = debug,
		      debug_warnings = debug_warnings,
		      profile = profile,
		      trace = false,
		      opt_leaf_fns = opt_leaf_fns,
		      opt_tail_calls = opt_tail_calls,
		      opt_self_calls = opt_self_calls}
d696 1
a696 2
                 (compiler :=
		    Recompile.recompile Info.default_options;
d735 25
a759 20
	   TopLevel.MirTypes.OPTIONS
	   {info_opts = Info.default_options,
	    list_opts = TopLevel.MirTypes.BELO
	    {
	     show_absyn = false,
	     show_lambda = false,
	     show_match = false,
	     show_opt_lambda = false,
	     show_environ = false,
	     show_mir = false,
	     show_opt_mir = false,
	     show_mach = false
	     },
	    debug = false,
	    debug_warnings = false,
	    profile = false,
	    trace = false,
	    opt_leaf_fns = true,
	    opt_tail_calls = true,
	    opt_self_calls = true}
@


1.12
log
@Changed image saving GC
@
text
@d11 3
a56 1
require "../utils/option";
d58 1
d62 7
a68 6
functor Batch (structure TopLevel	: TOPLEVEL
               structure Recompile	: RECOMPILE
	       structure Option         : OPTION
               structure Lists		: LISTS
               structure Version	: VERSION
	       sharing TopLevel.MirTypes = Recompile.MirTypes
d72 1
a76 15
    val pervasive_dir_arg = "PERVASIVE_DIR="
    val pervasive_dir_arg_len = size pervasive_dir_arg

    fun get_pervasive_dir [] = Option.ABSENT
      | get_pervasive_dir(arg :: rest) =
	if size arg < pervasive_dir_arg_len then
	  get_pervasive_dir rest
	else
	  if String.substring(arg, 0, pervasive_dir_arg_len) =
	    pervasive_dir_arg then
	    Option.PRESENT(String.substring(arg, pervasive_dir_arg_len,
					    size arg - pervasive_dir_arg_len))
	  else
	    get_pervasive_dir rest

d961 1
a961 1
       (case get_pervasive_dir(MLWorks.OS.Unix.environment()) of
@


1.11
log
@Modified to deal with extra options for code listing
@
text
@d11 3
d950 1
a950 1
                    fun collect 0 = ()
d953 1
a953 1
                         collect(n-1))
d955 1
a955 1
                    (collect 200) handle
@


1.10
log
@Added a handler for storage manager exceptions during image save
@
text
@d11 3
d119 1
d130 1
d146 1
d157 1
d173 1
d184 1
d200 1
d211 1
d227 1
d238 1
d254 1
d265 1
d275 658
d976 11
@


1.9
log
@Removed a number of duplicated signatures and structures
@
text
@d11 3
d279 3
a281 1
                    collect 200
@


1.8
log
@Set up with sensible default compilation options. Used user supplied
compilation options for profile, debug, trace
@
text
@d11 4
a55 1
	       sharing TopLevel.MirTypes.Info = TopLevel.Parser.Lexer.Info
d58 1
a58 1
    structure Info = TopLevel.MirTypes.Info
d175 1
a175 1
		      profile = profile,
d200 1
a200 1
		      profile = true,
d297 1
a297 1
	   {info_opts = TopLevel.MirTypes.Info.default_options,
@


1.7
log
@Now prints the correct version string.  GC is forced before image save
using a hack.
@
text
@d11 4
d84 2
a85 2
    fun obey_options [] = []
      | obey_options (arg::args) =
d95 1
a95 1
                  rest)
d99 1
a99 1
                  rest)
d103 1
a103 1
                  rest)
d105 24
a128 3
                 (TopLevel.generate_debug_information := true;
                  info ["Debugging information enabled."];
                  rest)
d130 24
a153 3
                 (TopLevel.generate_debug_information := false; 
                  info ["Debugging information disabled."];
                  rest)
d155 24
a178 3
                 (TopLevel.generate_profiling := true;
                  info ["Profiling enabled."];
                  rest)
d180 74
a253 3
                 (TopLevel.generate_profiling := false;
                  info ["Profiling disabled."];
                  rest)
d258 1
a258 1
                  rest)
d264 1
a264 1
                  rest)
d277 1
a277 1
                  rest)
d282 1
a282 1
            arg::args
d292 11
a302 1
         val files = obey_options args
d307 1
a307 1
           (!compiler) TopLevel.default_compiler_options name))
@


1.6
log
@Brought up to date with changes to toplevel and recompile
@
text
@d11 3
d38 1
d46 1
d129 8
d148 1
a148 1
      (info ["MLWorks batch compiler version 1.0"];
@


1.5
log
@Changes to make show_id_class and show_eq_info part of Info structure
instead of references.
@
text
@d11 4
a34 1
require "../main/info";
d41 4
a44 1
               structure Lists		: LISTS) : BATCH =
d46 1
a46 1

d48 1
a48 1
      ref (TopLevel.compile_file TopLevel.Parser.Lexer.Info.default_options)
d113 1
a113 1
		    Recompile.recompile Recompile.Info.default_options;
d119 1
a119 1
		      TopLevel.Parser.Lexer.Info.default_options;
d146 1
a146 1
           !compiler name))
@


1.4
log
@Added interrogation of shell variable PERVASIVE_DIR to get pervasive-dir
in default case. Caught exception coming out of failed compilations
to avoid backtraces. Caught Io specifically in order to report file
operation failures
@
text
@d11 6
d31 1
d41 2
a42 1
    val compiler = ref TopLevel.compile_file
d106 2
a107 1
                 (compiler := Recompile.recompile;
d111 3
a113 1
                 (compiler := TopLevel.compile_file;
@


1.3
log
@Changed Error structure to Info
@
text
@d11 3
d24 1
a24 1
require "info";
a28 1
               structure Info		: INFO
d30 1
d37 15
d111 2
a112 1
                 raise Option ("Unknown option or wrong arguments to `" ^ other ^ "'"))
d119 4
d132 9
a140 2
       handle Option string =>
         output (MLWorks.IO.std_err, string ^ "\n"))
@


1.2
log
@Added verbose option and related output.  Not very neat.
@
text
@d11 3
d21 1
a21 1
require "error";
d26 1
a26 1
               structure Error		: ERROR
a31 1
    val error_level = ref Error.ADVICE
d79 1
a79 1
             | ("make", rest) =>
d81 1
a81 1
                  info ["Make mode."];
a90 11
                  rest)
             | ("error-level", level::rest) =>
                 (error_level :=
                  (case level of
                     "advice"		=> Error.ADVICE
                   | "warnings"		=> Error.WARNING
                   | "non-standard"	=> Error.NONSTANDARD
                   | "recoverable"	=> Error.RECOVERABLE
                   | "fatal"		=> Error.FATAL
                   | other		=> raise Option ("Unknown error level `" ^ other ^ "'"));
                  info ["Error level set to `", level, "'."];
@


1.1
log
@Initial revision
@
text
@d10 4
a13 1
 *  $Log$
d30 1
d32 7
d49 36
a84 7
               ("pervasive-dir", dir::rest)	=> (TopLevel.pervasive_library_dir := dir; rest)
             | ("debug", "on"::rest)		=> (TopLevel.generate_debug_information := true; rest)
             | ("debug", "off"::rest)		=> (TopLevel.generate_debug_information := false; rest)
             | ("profile", "on"::rest)		=> (TopLevel.generate_profiling := true; rest)
             | ("profile", "off"::rest)		=> (TopLevel.generate_profiling := false; rest)
             | ("make", rest)			=> (compiler := Recompile.recompile; rest)
             | ("compile", rest)		=> (compiler := TopLevel.compile_file; rest)
d86 2
a87 1
                 (MLWorks.save (filename, fn () => obey (MLWorks.OS.arguments ()))
d99 1
d101 2
a102 1
             | (other, rest) => raise Option ("Unknown option or wrong arguments to `" ^ other ^ "'"))
d108 12
a119 7
      let
        val files = obey_options args
      in
        Lists.iterate (!compiler) files
      end
      handle Option string =>
        output (MLWorks.IO.std_err, string ^ "\n")
@
