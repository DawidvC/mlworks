head	1.3;
access;
symbols
	MLW_daveb_inline_1_4_99:1.3.12
	MLWorks_21c0_1999_03_25:1.3
	MLWorks_20c1_1998_08_20:1.3
	MLWorks_20c0_1998_08_04:1.3
	MLWorks_20b2c2_1998_06_19:1.3
	MLWorks_20b2_Windows_1998_06_12:1.3
	MLWorks_20b1c1_1998_05_07:1.3
	MLWorks_20b0_1998_04_07:1.3
	MLWorks_20b0_1998_03_20:1.3
	MLWorks_20m2_1998_02_16:1.3
	MLWorks_20m1_1997_10_23:1.3
	MLWorks_11r1:1.3.9.1.1.1.1
	MLWorks_workspace_97:1.3.11
	MLWorks_dt_wizard:1.3.10
	MLWorks_11c0_1997_09_09:1.3.9.1.1.1
	MLWorks_10r3:1.3.9.1.3
	MLWorks_10r2_551:1.3.9.1.2
	MLWorks_11:1.3.9.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.3.9.1
	MLWorks_20m0_1997_06_20:1.3
	MLWorks_1_0_r2c2_1997_06_14:1.3.9.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.3.9.1
	MLWorks_1_0_r2c1_1997_05_12:1.3.9
	MLWorks_BugFix_1997_04_24:1.3
	MLWorks_1_0_r2_Win32_1997_04_11:1.3
	MLWorks_1_0_r2_Unix_1997_04_04:1.3
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.3.7.1.1
	MLWorks_gui_1996_12_18:1.3.8
	MLWorks_1_0_Win32_1996_12_17:1.3.7
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.3.5.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.3.5.1
	MLWorks_1_0_Irix_1996_11_28:1.3.5.1.1
	MLWorks_1_0_Win32_1996_11_22:1.3.6
	MLWorks_1_0_Unix_1996_11_14:1.3.5
	MLWorks_Open_Beta2_1996_10_11:1.3.4
	MLWorks_License_dev:1.3.3
	MLWorks_1_open_beta_1996_09_13:1.3.2
	MLWorks_Open_Beta_1996_08_22:1.3
	MLWorks_Beta_1996_07_02:1.3
	MLWorks_Beta_1996_06_07:1.3
	MLWorks_Beta_1996_06_06:1.3
	MLWorks_Beta_1996_06_05:1.3
	MLWorks_Beta_1996_06_03:1.3
	MLWorks_Beta_1996_05_31:1.3
	MLWorks_Beta_1996_05_30:1.3
	ML_beta_release_12/08/94:1.3
	ML_beta_release_03/08/94:1.3
	ML_revised_beta_release_25/05/94:1.3
	ML_final_beta_release_02/03/94:1.3
	mlworks-28-01-1994:1.3
	Release:1.3
	mlworks-beta-01-09-1993:1.3
	MLWorks-1-0-4-29/01/1993:1.3
	MLWorks-1-0-3-21/12/1992:1.3
	MLWorks-1-0-2-15/12/1992:1.3
	MLWorks-1-0-1-04/12/1992:1.3
	checkpoint_17_08_92:1.3
	Ten15_release_19-11-91:1.1
	Ten15_release_21-08-91:1.1
	Ten15_release_19-08-91:1.1
	ten15_release:1.1;
locks; strict;
comment	@ * @;


1.3
date	91.11.27.13.23.06;	author jont;	state Exp;
branches
	1.3.1.1
	1.3.2.1
	1.3.3.1
	1.3.4.1
	1.3.5.1
	1.3.6.1
	1.3.7.1
	1.3.8.1
	1.3.9.1
	1.3.10.1
	1.3.11.1
	1.3.12.1;
next	1.2;

1.2
date	91.11.21.16.33.57;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	91.06.07.11.06.22;	author colin;	state Exp;
branches;
next	;

1.3.1.1
date	91.11.27.13.23.06;	author jont;	state Exp;
branches;
next	;

1.3.2.1
date	96.09.13.11.19.12;	author hope;	state Exp;
branches;
next	;

1.3.3.1
date	96.10.07.16.09.05;	author hope;	state Exp;
branches;
next	;

1.3.4.1
date	96.10.17.11.27.21;	author hope;	state Exp;
branches;
next	;

1.3.5.1
date	96.11.14.12.52.51;	author hope;	state Exp;
branches
	1.3.5.1.1.1;
next	;

1.3.5.1.1.1
date	96.11.28.15.03.52;	author hope;	state Exp;
branches;
next	;

1.3.6.1
date	96.11.22.18.11.56;	author hope;	state Exp;
branches;
next	;

1.3.7.1
date	96.12.17.17.50.25;	author hope;	state Exp;
branches
	1.3.7.1.1.1;
next	;

1.3.7.1.1.1
date	97.02.24.11.40.44;	author hope;	state Exp;
branches;
next	;

1.3.8.1
date	96.12.18.09.44.33;	author hope;	state Exp;
branches;
next	;

1.3.9.1
date	97.05.12.10.37.04;	author hope;	state Exp;
branches
	1.3.9.1.1.1
	1.3.9.1.2.1
	1.3.9.1.3.1;
next	;

1.3.9.1.1.1
date	97.07.28.18.22.20;	author daveb;	state Exp;
branches
	1.3.9.1.1.1.1.1;
next	;

1.3.9.1.1.1.1.1
date	97.10.07.11.48.01;	author jkbrook;	state Exp;
branches;
next	;

1.3.9.1.2.1
date	97.09.08.17.15.44;	author daveb;	state Exp;
branches;
next	;

1.3.9.1.3.1
date	97.09.09.14.11.37;	author daveb;	state Exp;
branches;
next	;

1.3.10.1
date	97.09.10.19.27.42;	author brucem;	state Exp;
branches;
next	;

1.3.11.1
date	97.09.11.20.57.39;	author daveb;	state Exp;
branches;
next	;

1.3.12.1
date	99.04.01.17.58.24;	author daveb;	state Exp;
branches;
next	;


desc
@Match Utilities
@


1.3
log
@Removed all code bar union_lists. All other was either unused or in Lists
@
text
@(* _match_utils.sml the functor *)
(*
$Log:	_match_utils.sml,v $
Revision 1.2  91/11/21  16:33:57  jont
Added copyright message

Revision 1.1  91/06/07  11:06:22  colin
Initial revision

Copyright (c) 1991 Harlequin Ltd.
*)
require "match_utils";

(**
    Utility functions that might get needed from time to time, used in
    the Match compiler only at the moment.
    
    Last updated : Tue Jan 22 17:43:57 1991
**)

functor Match_utils () : MATCH_UTILS =
    struct

(** remove all elements for which a predicate is true **)
(*
      fun remove_if predicate =
	  let
	    fun remove rest [] = rev rest
	      | remove rest (head::tail) =
		if predicate head then
		  remove rest tail
		else
		  remove (head::rest) tail
	  in
	    remove []
	  end

(** return true if all elements of a list pass a predicate **)
      fun every predicate =
	  let
	    fun every' [] = true
	      | every' (head::tail) =
		  predicate head  andalso  every' tail
	  in
	    every'
	  end

(** return true if any of the elements of a list pass a predicate **)
      fun any predicate =
	  let
	    fun any' [] = false
	      | any' (head::tail) =
		  predicate head  orelse   any' tail
	  in
	    any'
	  end
	   

(** remove all occurances of an element from a list **)
      fun remove element =
	    remove_if (fn x => x = element)

(** is a value a member of a list **)
      fun memberp value =
	    any (fn x => x = value)
*)

(** Union two lists together **)
       fun member (_,[]) = false
	 | member (a,h::t) = (a=h) orelse member(a,t)
	  
      fun union_lists [] rest = rest
	| union_lists rest [] = rest
	| union_lists (head::tail) rest =
	  if member(head, rest) then
	    union_lists tail rest
	  else
	    union_lists tail (head::rest)
	  
(*
(** remove duplicates from a list, returns elements in same order **)
      fun remove_duplicates [] = []
	| remove_duplicates (head::tail) =
	    rev (union_lists tail [head])

(** QuickSort routine.  Tail recursive and no appends !
    Type of Qsort is (('a * 'a) -> bool) -> 'a list -> 'a list  **)
      fun Qsort (op >) the_list =
	  let
	    fun qs [] rest = rest
	      | qs (head::tail) rest =  (* first element can be pivot *)
		let                     (* now split about chosen pivot *)
		  fun split [] high low = qs high (head::(qs low rest))
		    | split (first::more) high low =
		      if first > head then
			split more (first::high) low
		      else
			split more high (first::low)
		in
		  split tail [] []
		end
	  in
	    qs the_list []
	  end

(** Generate the powerset of a list of elements.  Order isn't very
    good, (done for speed.) **)
      fun power thelist =
	  let
	    fun power' [] rest = rest
	      | power' (front::back) rest =
		let
		  fun add_element [] rest = rest
		    | add_element (head::tail) rest =
			add_element tail (head::((front::head)::rest))
		in
		  power' back (add_element rest [])
		end  
	  in
	    power' thelist [[]]
	  end

(** Generate the powerset of a list, and return all elements which are
    at least as long as the size given. **)
      fun power_size number thelist =
	  let
	    fun power2 [] rest _ = rest
	      | power2 (front::back) rest n =
		let
		  (* Add an element to all lists large enough *)
		  fun add_element [] rest = rest
		    | add_element (head::tail) rest =
		      let
			val len = length head
		      in
			if (n > len) then
			  add_element tail rest
			else
			  if (n = len) then
			    add_element tail ((front::head)::rest)
			  else
			    add_element tail (head::((front::head)::rest))
		      end
		in
		  power2 back (add_element rest []) (n + 1)
		end
      
	    val thelength = length thelist
	  in
	    if (number > thelength) then
	      []               (* none possible *)
	    else
	      if (number = thelength) then
		[ thelist ]  (* one possible *)
	      else           (* many possible *)
		power2 thelist [[]] (number - thelength)
	  end

*)
    end
@


1.3.12.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@d3 1
a3 4
$Log: _match_utils.sml,v $
 * Revision 1.3  1991/11/27  13:23:06  jont
 * Removed all code bar union_lists. All other was either unused or in Lists
 *
@


1.3.11.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@d3 1
a3 4
$Log: _match_utils.sml,v $
 * Revision 1.3  1991/11/27  13:23:06  jont
 * Removed all code bar union_lists. All other was either unused or in Lists
 *
@


1.3.10.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@d3 1
a3 4
$Log: _match_utils.sml,v $
 * Revision 1.3  1991/11/27  13:23:06  jont
 * Removed all code bar union_lists. All other was either unused or in Lists
 *
@


1.3.9.1
log
@branched from 1.3
@
text
@d3 1
a3 4
$Log: _match_utils.sml,v $
 * Revision 1.3  1991/11/27  13:23:06  jont
 * Removed all code bar union_lists. All other was either unused or in Lists
 *
@


1.3.9.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a3 3
 * Revision 1.3.9.1  1997/05/12  10:37:04  hope
 * branched from 1.3
 *
@


1.3.9.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a3 3
 * Revision 1.3.9.1  1997/05/12  10:37:04  hope
 * branched from 1.3
 *
@


1.3.9.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a3 3
 * Revision 1.3.9.1  1997/05/12  10:37:04  hope
 * branched from 1.3
 *
@


1.3.9.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a3 3
 * Revision 1.3.9.1.1.1  1997/07/28  18:22:20  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.3.8.1
log
@branched from 1.3
@
text
@d3 1
a3 4
$Log: _match_utils.sml,v $
 * Revision 1.3  1991/11/27  13:23:06  jont
 * Removed all code bar union_lists. All other was either unused or in Lists
 *
@


1.3.7.1
log
@branched from 1.3
@
text
@d3 1
a3 4
$Log: _match_utils.sml,v $
 * Revision 1.3  1991/11/27  13:23:06  jont
 * Removed all code bar union_lists. All other was either unused or in Lists
 *
@


1.3.7.1.1.1
log
@branched from 1.3.7.1
@
text
@a3 3
 * Revision 1.3.7.1  1996/12/17  17:50:25  hope
 * branched from 1.3
 *
@


1.3.6.1
log
@branched from 1.3
@
text
@d3 1
a3 4
$Log: _match_utils.sml,v $
 * Revision 1.3  1991/11/27  13:23:06  jont
 * Removed all code bar union_lists. All other was either unused or in Lists
 *
@


1.3.5.1
log
@branched from 1.3
@
text
@d3 1
a3 4
$Log: _match_utils.sml,v $
 * Revision 1.3  1991/11/27  13:23:06  jont
 * Removed all code bar union_lists. All other was either unused or in Lists
 *
@


1.3.5.1.1.1
log
@branched from 1.3.5.1
@
text
@a3 3
 * Revision 1.3.5.1  1996/11/14  12:52:51  hope
 * branched from 1.3
 *
@


1.3.4.1
log
@branched from 1.3
@
text
@d3 1
a3 4
$Log: _match_utils.sml,v $
 * Revision 1.3  1991/11/27  13:23:06  jont
 * Removed all code bar union_lists. All other was either unused or in Lists
 *
@


1.3.3.1
log
@branched from 1.3
@
text
@d3 1
a3 4
$Log: _match_utils.sml,v $
 * Revision 1.3  1991/11/27  13:23:06  jont
 * Removed all code bar union_lists. All other was either unused or in Lists
 *
@


1.3.2.1
log
@branched from 1.3
@
text
@d3 1
a3 4
$Log: _match_utils.sml,v $
 * Revision 1.3  1991/11/27  13:23:06  jont
 * Removed all code bar union_lists. All other was either unused or in Lists
 *
@


1.3.1.1
log
@Fork for bug fixing
@
text
@d3 1
a3 4
$Log: _match_utils.sml,v $
Revision 1.3  1991/11/27  13:23:06  jont
Removed all code bar union_lists. All other was either unused or in Lists

@


1.2
log
@Added copyright message
@
text
@d4 3
d25 1
d66 2
a67 1
      
d69 3
d75 1
a75 1
	  if (memberp head rest) then
d80 1
d85 1
a85 1
    
d159 1
@


1.1
log
@Initial revision
@
text
@d1 1
d3 5
a7 1
$Log$
@
