head	1.22;
access;
symbols
	MLW_daveb_inline_1_4_99:1.22.1
	MLWorks_21c0_1999_03_25:1.22
	MLWorks_20c1_1998_08_20:1.21
	MLWorks_20c0_1998_08_04:1.21
	MLWorks_20b2c2_1998_06_19:1.20
	MLWorks_20b2_Windows_1998_06_12:1.20
	MLWorks_20b1c1_1998_05_07:1.20
	MLWorks_20b0_1998_04_07:1.20
	MLWorks_20b0_1998_03_20:1.20
	MLWorks_20m2_1998_02_16:1.20
	MLWorks_20m1_1997_10_23:1.19
	MLWorks_11r1:1.12.8.1.1.1.1
	MLWorks_workspace_97:1.16.2
	MLWorks_dt_wizard:1.16.1
	MLWorks_11c0_1997_09_09:1.12.8.1.1.1
	MLWorks_10r3:1.12.8.1.3
	MLWorks_10r2_551:1.12.8.1.2
	MLWorks_11:1.12.8.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.12.8.1
	MLWorks_20m0_1997_06_20:1.16
	MLWorks_1_0_r2c2_1997_06_14:1.12.8.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.12.8.1
	MLWorks_1_0_r2c1_1997_05_12:1.12.8
	MLWorks_BugFix_1997_04_24:1.12
	MLWorks_1_0_r2_Win32_1997_04_11:1.12
	MLWorks_1_0_r2_Unix_1997_04_04:1.12
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.12.6.1.1
	MLWorks_gui_1996_12_18:1.12.7
	MLWorks_1_0_Win32_1996_12_17:1.12.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.12.3.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.12.3.1
	JFHgui:1.12.5
	MLWorks_1_0_Irix_1996_11_28:1.12.3.1.1
	MLWorks_1_0_Win32_1996_11_22:1.12.4
	MLWorks_1_0_Unix_1996_11_14:1.12.3
	MLWorks_Open_Beta2_1996_10_11:1.12.2
	MLWorks_License_dev:1.12.1
	MLWorks_1_open_beta_1996_09_13:1.11.1
	MLWorks_Open_Beta_1996_08_22:1.11
	MLWorks_Beta_1996_07_02:1.11
	MLWorks_Beta_1996_06_07:1.11
	MLWorks_Beta_1996_06_06:1.11
	MLWorks_Beta_1996_06_05:1.11
	MLWorks_Beta_1996_06_03:1.11
	MLWorks_Beta_1996_05_31:1.11
	MLWorks_Beta_1996_05_30:1.11;
locks; strict;
comment	@ * @;


1.22
date	99.02.02.15.59.45;	author mitchell;	state Exp;
branches
	1.22.1.1;
next	1.21;

1.21
date	98.07.09.12.50.04;	author johnh;	state Exp;
branches;
next	1.20;

1.20
date	98.01.27.14.10.46;	author johnh;	state Exp;
branches;
next	1.19;

1.19
date	97.10.09.15.52.07;	author johnh;	state Exp;
branches;
next	1.18;

1.18
date	97.10.03.12.25.58;	author johnh;	state Exp;
branches;
next	1.17;

1.17
date	97.09.30.11.21.10;	author johnh;	state Exp;
branches;
next	1.16;

1.16
date	97.06.13.09.59.30;	author johnh;	state Exp;
branches
	1.16.1.1
	1.16.2.1;
next	1.15;

1.15
date	97.06.09.10.26.44;	author johnh;	state Exp;
branches;
next	1.14;

1.14
date	97.05.16.15.34.51;	author johnh;	state Exp;
branches;
next	1.13;

1.13
date	97.05.02.17.25.23;	author jont;	state Exp;
branches;
next	1.12;

1.12
date	96.09.19.11.22.56;	author johnh;	state Exp;
branches
	1.12.1.1
	1.12.2.1
	1.12.3.1
	1.12.4.1
	1.12.5.1
	1.12.6.1
	1.12.7.1
	1.12.8.1;
next	1.11;

1.11
date	96.05.14.13.57.00;	author daveb;	state Exp;
branches
	1.11.1.1;
next	1.10;

1.10
date	96.05.10.14.34.49;	author daveb;	state Exp;
branches;
next	1.9;

1.9
date	96.02.23.18.01.19;	author jont;	state Exp;
branches;
next	1.8;

1.8
date	96.02.08.10.48.32;	author daveb;	state Exp;
branches;
next	1.7;

1.7
date	96.01.23.15.23.18;	author daveb;	state Exp;
branches;
next	1.6;

1.6
date	95.12.07.14.04.00;	author matthew;	state Exp;
branches;
next	1.5;

1.5
date	95.11.16.13.59.59;	author matthew;	state Exp;
branches;
next	1.4;

1.4
date	95.11.15.16.51.58;	author matthew;	state Exp;
branches;
next	1.3;

1.3
date	95.08.24.16.07.37;	author matthew;	state Exp;
branches;
next	1.2;

1.2
date	95.07.27.10.58.37;	author matthew;	state Exp;
branches;
next	1.1;

1.1
date	95.07.26.14.36.59;	author matthew;	state Exp;
branches;
next	;

1.11.1.1
date	96.09.13.11.13.16;	author hope;	state Exp;
branches;
next	;

1.12.1.1
date	96.10.07.16.03.56;	author hope;	state Exp;
branches;
next	;

1.12.2.1
date	96.10.17.11.22.10;	author hope;	state Exp;
branches;
next	;

1.12.3.1
date	96.11.14.12.46.11;	author hope;	state Exp;
branches
	1.12.3.1.1.1;
next	;

1.12.3.1.1.1
date	96.11.28.14.57.55;	author hope;	state Exp;
branches;
next	;

1.12.4.1
date	96.11.22.18.06.33;	author hope;	state Exp;
branches;
next	;

1.12.5.1
date	96.12.17.09.54.37;	author hope;	state Exp;
branches;
next	;

1.12.6.1
date	96.12.17.17.45.15;	author hope;	state Exp;
branches
	1.12.6.1.1.1;
next	;

1.12.6.1.1.1
date	97.02.24.11.34.43;	author hope;	state Exp;
branches;
next	;

1.12.7.1
date	96.12.18.09.39.14;	author hope;	state Exp;
branches;
next	;

1.12.8.1
date	97.05.12.10.31.33;	author hope;	state Exp;
branches
	1.12.8.1.1.1
	1.12.8.1.2.1
	1.12.8.1.3.1;
next	;

1.12.8.1.1.1
date	97.07.28.18.17.28;	author daveb;	state Exp;
branches
	1.12.8.1.1.1.1.1;
next	;

1.12.8.1.1.1.1.1
date	97.10.07.11.42.19;	author jkbrook;	state Exp;
branches;
next	;

1.12.8.1.2.1
date	97.09.08.17.10.59;	author daveb;	state Exp;
branches;
next	;

1.12.8.1.3.1
date	97.09.09.14.06.34;	author daveb;	state Exp;
branches;
next	;

1.16.1.1
date	97.09.10.19.21.06;	author brucem;	state Exp;
branches;
next	;

1.16.2.1
date	97.09.11.20.52.18;	author daveb;	state Exp;
branches;
next	1.16.2.2;

1.16.2.2
date	97.09.12.14.46.47;	author johnh;	state Exp;
branches;
next	1.16.2.3;

1.16.2.3
date	97.11.11.13.35.46;	author johnh;	state Exp;
branches;
next	1.16.2.4;

1.16.2.4
date	97.11.12.16.10.40;	author johnh;	state Exp;
branches;
next	1.16.2.5;

1.16.2.5
date	97.11.24.12.16.48;	author johnh;	state Exp;
branches;
next	1.16.2.6;

1.16.2.6
date	97.12.02.11.43.30;	author johnh;	state Exp;
branches;
next	1.16.2.7;

1.16.2.7
date	97.12.03.11.13.00;	author johnh;	state Exp;
branches;
next	1.16.2.8;

1.16.2.8
date	97.12.10.13.43.48;	author johnh;	state Exp;
branches;
next	;

1.22.1.1
date	99.04.01.17.55.36;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
New unit
@


1.22
log
@[Bug #190500]
Remove redundant require statements
@
text
@(* Types for passing to motif tools.
 *  
 *  Copyright (C) 1993 Harlequin Ltd.
 *  
 *  $Log: _tooldata.sml,v $
 * Revision 1.21  1998/07/09  12:50:04  johnh
 * [Bug #30400]
 * remove main_windows arg from exit_dialog.
 *
 * Revision 1.20  1998/01/27  14:10:46  johnh
 * [Bug #30071]
 * Merge in Project Workspace changes.
 *
 * Revision 1.19  1997/10/09  15:52:07  johnh
 * [Bug #30193]
 * Add option to print backtrace to system messages window.
 *
 * Revision 1.18  1997/10/03  12:25:58  johnh
 * [Bug #30137]
 * Add system message window to Usage menu.
 *
 * Revision 1.17  1997/09/30  11:21:10  johnh
 * [Bug #30244]
 * Adding dependency graph commands to Usage menu.
 *
 * Revision 1.16.2.8  1997/12/10  13:43:48  johnh
 * [Bug #30071]
 * Add save_proj_as to file menu.
 *
 * Revision 1.16.2.7  1997/12/03  11:13:00  johnh
 * [Bug #30071]
 * Improve layout of file menu.
 *
 * Revision 1.16.2.6  1997/12/02  11:43:30  johnh
 * [Bug #30071]
 * Remove old commands from the File menu.
 *
 * Revision 1.16.2.5  1997/11/24  12:16:48  johnh
 * [Bug #30071]
 * Tidy File menu and remove paths menu.
 *
 * Revision 1.16.2.4  1997/11/12  16:10:40  johnh
 * [Bug #30071]
 * Move items from Usage->GeneralPreferences to Listener->Properties.
 *
 * Revision 1.16.2.3  1997/11/11  13:35:46  johnh
 * [Bug #30244]
 * Merging dependency graph changes.
 *
 * Revision 1.16.2.2  1997/09/12  14:46:47  johnh
 * [Bug #30071]
 * Implement new Project Workspace.
 *
 * Revision 1.16  1997/06/13  09:59:30  johnh
 * [Bug #30175]
 * Combine tools and windows menus.
 *
 * Revision 1.15  1997/06/09  10:26:44  johnh
 * [Bug #30068]
 * Moving breakpoints_menu from GuiUtils to BreakTrace.
 *
 * Revision 1.14  1997/05/16  15:34:51  johnh
 * Implementing single menu bar on Windows.
 * Re-organising menus for Motif.
 *
 * Revision 1.13  1997/05/02  17:25:23  jont
 * [Bug #30088]
 * Get rid of MLWorks.Option
 *
 * Revision 1.12  1996/09/19  11:22:56  johnh
 * Bug #148
 * Passed list of main windows to exit_dialog function so that they can be killed.
 *
 * Revision 1.11  1996/05/14  13:57:00  daveb
 * Replaced works_menu and application_works_menu with tools_menu.
 *
 * Revision 1.10  1996/05/10  14:34:49  daveb
 * Added edit_possible field to ToolData.edit_menu.
 *
 * Revision 1.9  1996/02/23  18:01:19  jont
 * newmap becomes map, NEWMAP becomes MAP
 *
 * Revision 1.8  1996/02/08  10:48:32  daveb
 * UserContext no longer includes a user_tool_options type.
 *
 * Revision 1.7  1996/01/23  15:23:18  daveb
 * Added tail field to edit_menu argument.
 *
 * Revision 1.6  1995/12/07  14:04:00  matthew
 * Changed interface to clipboard
 *
 * Revision 1.5  1995/11/16  13:59:59  matthew
 * Adjustments to resource names
 *
 * Revision 1.4  1995/11/15  16:51:58  matthew
 * Adding window menu
 *
 * Revision 1.3  1995/08/24  16:07:37  matthew
 * Moving exit_dialog to Menus
 *
 * Revision 1.2  1995/07/27  10:58:37  matthew
 * Moved capi etc. to gui
 *
 * Revision 1.1  1995/07/26  14:36:59  matthew
 * new unit
 * New unit
 *
 *  Revision 1.15  1995/07/03  16:20:18  matthew
 *  Capification
 *
 *  Revision 1.14  1995/05/29  13:56:38  daveb
 *  Separated user_options into tool-specific and context-specific parts.
 *
 *  Revision 1.13  1995/04/28  17:02:32  daveb
 *  Moved all the user_context stuff from ShellTypes into a separate file.
 *
 *  Revision 1.12  1995/03/17  11:25:00  daveb
 *  Added a Writable parameter to add_context_fn.
 *  
 *  Revision 1.11  1995/03/15  16:00:52  daveb
 *  Added current_context type, and associated functions.
 *  
 *  Revision 1.10  1994/08/01  09:56:43  daveb
 *  Moved preferences into separate structure.
 *  
 *  Revision 1.9  1994/07/14  16:01:00  daveb
 *  Changed second parameter of exit_mlworks to ApplicationData, and
 *  extended that type with a flag set to true if the GUI is launched from
 *  a TTY listener.
 *  
 *  Revision 1.8  1994/07/14  09:53:02  daveb
 *  Modified works menu to show Exit or Close, not both.
 *  
 *  Revision 1.7  1994/06/20  11:23:04  daveb
 *  Changed context refs to user_contexts.
 *  
 *  Revision 1.6  1993/11/03  18:14:29  daveb
 *  Merged in bug fix.
 *  
 *  Revision 1.5  1993/10/22  17:01:35  daveb
 *  Merged in bug fix.
 *  
 *  Revision 1.4  1993/10/12  16:25:37  matthew
 *  Merging bug fixes
 *  
 *  Revision 1.3.1.4  1993/11/03  17:52:11  daveb
 *  Copied user_options when creating new tool.
 *  
 *  Revision 1.3.1.3  1993/10/21  14:07:38  daveb
 *  Changed ToolData.works_menu to take a (unit -> bool) function that
 *  controls whether the Close menu option is enabled.
 *  
 *  Revision 1.3.1.2  1993/10/12  15:25:37  matthew
 *  Changed the Exit MLWorks function to use the quit on exit flag, rather than
 *  directly calling MLWorks.exit.
 *  
 *  Revision 1.3.1.1  1993/05/05  11:49:13  jont
 *  Fork for bug fixing
 *  
 *  Revision 1.3  1993/05/05  11:49:13  daveb
 *  Moved exit_mlworks from _podium to _tooldata.  Added tools argument to
 *  works_menu(), removed exitApplication from TOOLDATA.
 *  
 *  Revision 1.2  1993/04/30  13:12:03  daveb
 *  Added function to create Works menu.
 *  
 *  Revision 1.1  1993/04/16  17:18:35  matthew
 *  Initial revision
 *  
 *  
 *)

require "../interpreter/shell_types";
require "../interpreter/user_context";
require "../utils/map";
require "../utils/lists";
require "../main/user_options";
require "capi";
require "menus";
require "gui_utils";

require "tooldata";

functor ToolData (
  structure ShellTypes : SHELL_TYPES
  structure UserContext : USER_CONTEXT
  structure UserOptions : USER_OPTIONS
  structure GuiUtils : GUI_UTILS
  structure Map : MAP
  structure Capi : CAPI
  structure Menus : MENUS
  structure Lists : LISTS

  sharing UserContext.Options = ShellTypes.Options
  
  sharing type Menus.Widget = Capi.Widget = GuiUtils.Widget
  sharing type UserContext.user_context = ShellTypes.user_context =
	       GuiUtils.user_context
  sharing type UserContext.Context = ShellTypes.Context
  sharing type ShellTypes.user_options = UserOptions.user_tool_options
  sharing type GuiUtils.ButtonSpec = Menus.ButtonSpec
) : TOOL_DATA =
  struct
    structure ShellTypes = ShellTypes
    structure UserContext = UserContext

    type Widget = Capi.Widget
    type ButtonSpec = Menus.ButtonSpec
    datatype Writable = WRITABLE | ALL
    type MotifContext = GuiUtils.MotifContext

    datatype current_context =
      CURRENT of
      {motif_context : MotifContext ref,
       context_register:
         ((int,
           (MotifContext -> unit)
	   * (unit -> UserOptions.user_tool_options)
	   * Writable) Map.map
          * int) ref}
  
    datatype ApplicationData =
      APPLICATIONDATA of {applicationShell : Widget, has_controlling_tty: bool}

    datatype ToolData =
      TOOLDATA of
	{args: ShellTypes.ListenerArgs,
         appdata : ApplicationData,
         current_context : current_context,
	 motif_context : MotifContext,
         tools : (string * (ToolData -> unit) * Writable) list}

    fun add_context_fn
          (CURRENT {context_register as ref (map, count), ...}, context_fn) =
      (context_register := (Map.define (map, count, context_fn), count + 1);
       count)
  
    fun remove_context_fn
          (CURRENT {context_register as ref (map, count), ...}, key) =
      context_register := (Map.undefine (map, key), count)
  
    fun set_current
          (CURRENT {motif_context, context_register = ref (map, _), ...},
           register_key,
           UserOptions.USER_TOOL_OPTIONS ({set_context, ...}, _),
           new_context) =
      if !set_context then
        let
          fun do_context (key, (f, mk_user_options, writable)) =
            if key <> register_key then
	      if writable = WRITABLE
		 andalso UserContext.is_const_context
			   (GuiUtils.get_user_context (!motif_context)) then
		()
              else
                let
                  val UserOptions.USER_TOOL_OPTIONS ({sense_context, ...}, _) =
                    mk_user_options ()
                in
                  if !sense_context then
                    f new_context
                  else
                    ()
                end
            else
              ()
        in
          motif_context := new_context;
          Map.iterate do_context map
        end
      else
        ();
  
    fun get_current (CURRENT {motif_context,  ...}) =
      !motif_context

    fun make_current motif_context =
      CURRENT
      {motif_context = ref motif_context,
       context_register = ref (Map.empty' op<, 0)}
  
    fun exit_mlworks (parent, APPLICATIONDATA {applicationShell, has_controlling_tty}) =
      Menus.exit_dialog (parent,applicationShell,has_controlling_tty)

    fun copy_args
          (ShellTypes.LISTENER_ARGS
 	     {user_context, user_options, user_preferences, prompter, mk_xinterface_fn}) =
      ShellTypes.LISTENER_ARGS
	{user_context = user_context,
	 user_options = UserOptions.copy_user_tool_options user_options,
	 user_preferences = user_preferences,
	 prompter = prompter,
	 mk_xinterface_fn = mk_xinterface_fn}

    fun copy_tooldata
	  (TOOLDATA {args, appdata, current_context, motif_context, tools}) =
      TOOLDATA {args = copy_args args, appdata = appdata,
		current_context = current_context,
		motif_context = motif_context, tools = tools}

    fun k x y = x

    (* The result of the mk_tooldata argument is data to be passed to each
       tool on creation.  It includes a list of tools to use in the menu
       itself.  The mk_tooldata argument is not applied until an
       entry is selected, so that it gets the latest shell state from a
       listener. *)
    fun tools_menu (mk_tooldata, get_user_context) =
      let 
	val tooldata = mk_tooldata ()

	val TOOLDATA {tools, appdata, ...} = tooldata
	val APPLICATIONDATA {applicationShell, ...} = appdata

	fun is_valid writable =
	  let
	    val user_context = get_user_context ()
	  in
	    not (UserContext.is_const_context user_context
		 andalso writable = WRITABLE)
	  end

        val tools_buttons =
          map
            (fn (name,toolfun,writable) =>
               Menus.PUSH (name,
			   fn _ => toolfun (copy_tooldata (mk_tooldata ())),
			   fn _ => is_valid writable))
            tools

	fun get_menu_item (w, s) = 
	   Menus.PUSH (s, fn _ => Capi.to_front w, k true)

      in

    (* The menuspec for the tools menu is different between Motif and Windows.
     * The reason for this is due to interaction between dynamic menus and storing
     * the menu references on Win32.  On Win32, the references need to be stored on
     * creation, so that they exist when invoked, but on Motif the dynamic menu items
     * are not created until they are invoked.  Solution:  on Motif, for the partially
     * dynamic tools menu to work, the whole menu is made dynamic, and on Windows, the
     * main tools need to be created first, then add the dynamic menu items below them.
     *)
	Menus.get_tools_menuspec (tools_buttons, 
				  fn _ => (map get_menu_item (Capi.get_main_windows())))
      end

    fun defPush name = (name, fn () => (), fn () => false)
    fun getPush items name default = 
      if (Lists.member (name, map (fn (s,_,_) => s) items)) then
        Lists.findp (fn (s,_,_) => (s = name)) items
      else 
	default

    fun defToggle name = (name, fn () => false, fn _ => (), fn () => false)
    fun getToggle items name default = 
      if (Lists.member (name, map (fn (s,_,_,_) => s) items)) then
        Lists.findp (fn (s,_,_,_) => (s = name)) items
      else
	default

    (* Menu item actions are changed by passing in a ButtonSpec structure including
     * the actions and sensitivity functions.  This function is used to extract
     * those actions and sensitivity functions *)

    local
      fun extractMenu (Menus.PUSH (s, act, sens)) [] = [(s, act, sens)]
        | extractMenu (Menus.PUSH (s, act, sens)) (m1 :: rest) = 
                (s, act, sens) :: extractMenu m1 rest
        | extractMenu (Menus.CASCADE (s, new_list, sens)) [] = 
		extractMenu Menus.SEPARATOR new_list
        | extractMenu (Menus.CASCADE (s, new_list, sens)) (m1 :: rest) = 
                extractMenu m1 (new_list @@ rest)
        | extractMenu _ (m1 :: rest) = extractMenu m1 rest
        | extractMenu _ [] = []
    in
      fun extract (Menus.CASCADE (_, item1::rest, _)) = extractMenu item1 rest
        | extract (Menus.CASCADE (_,[],_)) = []
        | extract _ = []
    end

    val fileItems = ref []
    fun file_menu itemList = 
      let
        fun push name = Menus.PUSH
	  (getPush itemList name (getPush (!fileItems) name (defPush name)))
      in
        Menus.CASCADE ("file", 
          [push "new_proj", push "open_proj", push "save_proj", push "save_proj_as",
	   Menus.SEPARATOR,
	   push "close",
	   Menus.SEPARATOR,
	   push "setWD", push "load_proj_files", push "saveImage", 
	   Menus.SEPARATOR,
	   push "use", push "save", push "saveAs", 
	   Menus.SEPARATOR,
	   push "exit"],
	  fn _ => true)
      end

    fun set_global_file_items itemList = 
      (fileItems := itemList;
       file_menu itemList)

    val usagePushes = ref []
    val usageToggles = ref []

    fun usage_menu (pushes, toggles) = 
      let 
        fun push s = Menus.PUSH 
	  (getPush pushes s (getPush (!usagePushes) s (defPush s)))
        fun toggle s = Menus.TOGGLE 
	  (getToggle toggles s (getToggle (!usageToggles) s (defToggle s)))
      in
        Menus.CASCADE ("usage_menu", 
         [push "inspect", 
	  push "show_defn", 
	  push "duplicate",
          toggle "autoSelection",
	  Menus.SEPARATOR,
	  push "sysMessages",
          Menus.SEPARATOR,
          push "savePreferences",
          Menus.CASCADE ("general", [push "editor",
				     push "environment"], 
                          fn () => true),
          Menus.CASCADE ("tool_settings", [push "valueprinter",
                                           push "internals",
                                           push "layout",
                                           push "graph",
                                           push "insp_item",
                                           push "filterFrames",
                                           push "showFrameInfo",
                                           push "filter"],
                         fn () => false),
          Menus.SEPARATOR,
          push "search",
          push "sort",       
	  push "addBreakTrace",
          push "repeat", 
	  push "removeDuplicates",
          push "peel",
	  push "make_root",
	  push "original_root",
	  push "backtrace"], fn () => true)
      end

    fun set_global_usage_items (pushes, toggles) = 
       (usagePushes := pushes;
	usageToggles := toggles;
	usage_menu (pushes, toggles))

    fun debug_menu itemList = 
      let
        fun push s = Menus.PUSH (getPush itemList s (defPush s))
      in
        Menus.CASCADE ("debug_menu", 
         [push "abort", push "continue", push "step", push "next",
          Menus.SEPARATOR,
          push "trace", push "untrace"],
         fn () => true)
      end

    fun edit_menu
	  (widget,
	   {cut,paste,copy,delete,selection_made,edit_possible,edit_source,delete_all}) =
      let
        val (cut,can_cut) =
          case cut of
            SOME c => (c,true)
          | _ => (k (),false)

        val (paste,can_paste) =
          case paste of
            SOME p => (p,true)
          | _ => (k (),false)

        val (copy, can_copy) =
          case copy of
            SOME c => (c,true)
          | _ => (k (),false)

        val (delete,can_delete) =
          case delete of
            SOME d => (d,true)
          | _ => (k (), false)

	val es = extract (Menus.CASCADE ("dummy", edit_source, fn _ => false))
	val items = es @@ 
	  (case delete_all of SOME da => [da] | NONE => [])

        fun push item = Menus.PUSH (getPush items item (defPush item))
      in
        Menus.CASCADE
        ("edit",
         [Menus.PUSH ("cut", cut,
             fn _ => can_cut andalso edit_possible () andalso selection_made()),
          Menus.PUSH ("copy", copy,
             fn _ => can_copy andalso selection_made ()),
          Menus.PUSH ("paste", paste,
             fn _ => can_paste andalso edit_possible () andalso
		     not (Capi.clipboard_empty widget)),
          Menus.PUSH ("delete", delete,
             fn _ => can_delete andalso edit_possible () andalso
		     selection_made ()),
          push "deleteAll",
          Menus.SEPARATOR,
          push "editSource"],
         k true)
      end

  end

@


1.22.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a5 4
 * Revision 1.22  1999/02/02  15:59:45  mitchell
 * [Bug #190500]
 * Remove redundant require statements
 *
@


1.21
log
@[Bug #30400]
remove main_windows arg from exit_dialog.
@
text
@d6 4
a172 1
require "../basis/__int";
@


1.20
log
@[Bug #30071]
Merge in Project Workspace changes.
@
text
@d6 4
d279 2
a280 2
    fun exit_mlworks (parent, APPLICATIONDATA {applicationShell, has_controlling_tty}, main_windows) =
      Menus.exit_dialog (parent,applicationShell,has_controlling_tty, main_windows)
@


1.19
log
@[Bug #30193]
Add option to print backtrace to system messages window.
@
text
@d6 4
d18 28
d382 10
a391 6
          [push "save", push "saveAs", push "saveImage", push "close",
           Menus.SEPARATOR,
           push "read_depend_file", push "compile_file", push "compile_and_load_file",
           push "load_source_file", push "load_file", push "use",
           Menus.SEPARATOR,
           push "exit"], fn _ => true)
d417 2
a418 3
          Menus.CASCADE ("general", [push "mode",       push "editor",
                                     push "compiler",   push "language",
                                     push "environment"], 
@


1.18
log
@[Bug #30137]
Add system message window to Usage menu.
@
text
@d6 4
d402 2
a403 1
	  push "original_root"], fn () => true)
d407 2
a408 2
       (usagePushes := pushes @@ (!usagePushes);
	usageToggles := toggles @@ (!usageToggles);
@


1.17
log
@[Bug #30244]
Adding dependency graph commands to Usage menu.
@
text
@d6 4
d373 2
d402 2
a403 2
       (usagePushes := pushes;
	usageToggles := toggles;
@


1.16
log
@[Bug #30175]
Combine tools and windows menus.
@
text
@d6 4
d390 3
a392 1
          push "peel"], fn () => true)
@


1.16.2.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a5 4
 * Revision 1.16  1997/06/13  09:59:30  johnh
 * [Bug #30175]
 * Combine tools and windows menus.
 *
@


1.16.2.2
log
@[Bug #30071]
Implement new Project Workspace.
@
text
@d342 1
a342 7
          [push "new_proj", push "open_proj", push "save_proj",
	   Menus.SEPARATOR,
	   push "load_proj_files", push "use", 
	   Menus.SEPARATOR,
	   push "save", push "saveAs", push "saveImage", push "close", push "exit",

	(* These are only temporary until the move to the Project Workspace is complete *)
a343 1
	   Menus.SEPARATOR,
d345 1
a345 4
           push "load_source_file", push "load_file", 
	   Menus.SEPARATOR],
(*
	   push "use",
d347 1
a347 3
           push "exit"], 
*)
	   fn _ => true)
@


1.16.2.3
log
@[Bug #30244]
Merging dependency graph changes.
@
text
@a5 8
 * Revision 1.16.2.2  1997/09/12  14:46:47  johnh
 * [Bug #30071]
 * Implement new Project Workspace.
 *
 * Revision 1.17  1997/09/30  11:21:10  johnh
 * [Bug #30244]
 * Adding dependency graph commands to Usage menu.
 *
d402 1
a402 3
          push "peel",
	  push "make_root",
	  push "original_root"], fn () => true)
@


1.16.2.4
log
@[Bug #30071]
Move items from Usage->GeneralPreferences to Listener->Properties.
@
text
@a5 4
 * Revision 1.16.2.3  1997/11/11  13:35:46  johnh
 * [Bug #30244]
 * Merging dependency graph changes.
 *
d391 3
a393 2
          Menus.CASCADE ("general", [push "editor",
				     push "environment"], 
@


1.16.2.5
log
@[Bug #30071]
Tidy File menu and remove paths menu.
@
text
@a5 4
 * Revision 1.16.2.4  1997/11/12  16:10:40  johnh
 * [Bug #30071]
 * Move items from Usage->GeneralPreferences to Listener->Properties.
 *
d358 1
a358 3
	   push "setWD", push "save", push "saveAs", push "saveImage", 
	   Menus.SEPARATOR,
	   push "close", push "exit",
d366 5
a370 1

@


1.16.2.6
log
@[Bug #30071]
Remove old commands from the File menu.
@
text
@a5 4
 * Revision 1.16.2.5  1997/11/24  12:16:48  johnh
 * [Bug #30071]
 * Tidy File menu and remove paths menu.
 *
d364 10
a373 2
	   push "close", push "exit"],
	  fn _ => true)
@


1.16.2.7
log
@[Bug #30071]
Improve layout of file menu.
@
text
@a5 4
 * Revision 1.16.2.6  1997/12/02  11:43:30  johnh
 * [Bug #30071]
 * Remove old commands from the File menu.
 *
d364 1
a364 3
	   push "close",
	   Menus.SEPARATOR,
	   push "setWD", push "load_proj_files", push "saveImage", 
d366 1
a366 1
	   push "use", push "save", push "saveAs", 
d368 1
a368 1
	   push "exit"],
@


1.16.2.8
log
@[Bug #30071]
Add save_proj_as to file menu.
@
text
@a5 4
 * Revision 1.16.2.7  1997/12/03  11:13:00  johnh
 * [Bug #30071]
 * Improve layout of file menu.
 *
d366 1
a366 1
          [push "new_proj", push "open_proj", push "save_proj", push "save_proj_as",
@


1.16.1.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a5 4
 * Revision 1.16  1997/06/13  09:59:30  johnh
 * [Bug #30175]
 * Combine tools and windows menus.
 *
@


1.15
log
@[Bug #30068]
Moving breakpoints_menu from GuiUtils to BreakTrace.
@
text
@d6 4
d121 1
d279 4
a283 2
	Menus.CASCADE ("tools", tools_buttons, fn _ => true)
      end
d285 10
a294 9
    fun windows_menu () =
      let
        fun winspecs _ =
          map (fn (w,s) => (Menus.PUSH (s,fn _ => Capi.to_front w,k true)))
          (Capi.get_main_windows ())
      in
        Menus.DYNAMIC ("windows",
                       winspecs,
                       k true)
@


1.14
log
@Implementing single menu bar on Windows.
Re-organising menus for Motif.
@
text
@d6 4
d275 1
a275 3
	Menus.CASCADE ("tools", tools_buttons @@ [Menus.SEPARATOR] @@
				GuiUtils.breakpoints_menu applicationShell, 
			fn _ => true)
d353 4
a356 5
         [push "inspect", push "show_defn", 
          push "repeat",  push "removeDuplicates",
          Menus.SEPARATOR,
          push "search",
          push "sort",       
d373 5
a377 2
	  push "duplicate",
          toggle "autoSelection",
@


1.13
log
@[Bug #30088]
Get rid of MLWorks.Option
@
text
@d6 4
d116 1
d132 1
d136 1
a136 1
  sharing type Menus.Widget = Capi.Widget
d141 1
d252 2
a253 1
	val TOOLDATA {tools, ...} = tooldata
d271 3
a273 1
	Menus.CASCADE ("tools", tools_buttons, fn _ => true)
d287 106
d395 1
a395 1
	   {cut,paste,copy,delete,selection_made,edit_possible,tail}) =
d416 6
d425 1
a425 3
         [Menus.PUSH
	    ("cut",
             cut,
d427 1
a427 3
          Menus.PUSH
	    ("copy",
             copy,
d429 1
a429 3
          Menus.PUSH
	    ("paste",
             paste,
d432 1
a432 3
          Menus.PUSH
	    ("delete",
             delete,
d434 4
a437 4
		     selection_made ())]
	  @@ (case tail
	     of [] => []
	     |  l => Menus.SEPARATOR :: l),
d440 1
d442 1
@


1.12
log
@Bug #148.
Passed list a of main Winwindows to exit_dialog function so that they can be killed.
@
text
@d6 4
a139 2
    structure Option = MLWorks.Option

d283 1
a283 1
            Option.SOME c => (c,true)
d288 1
a288 1
            Option.SOME p => (p,true)
d293 1
a293 1
            Option.SOME c => (c,true)
d298 1
a298 1
            Option.SOME d => (d,true)
@


1.12.8.1
log
@branched from 1.12
@
text
@a5 4
 * Revision 1.12  1996/09/19  11:22:56  johnh
 * Bug #148.
 * Passed list a of main Winwindows to exit_dialog function so that they can be killed.
 *
@


1.12.8.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a5 3
 * Revision 1.12.8.1  1997/05/12  10:31:33  hope
 * branched from 1.12
 *
@


1.12.8.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a5 3
 * Revision 1.12.8.1  1997/05/12  10:31:33  hope
 * branched from 1.12
 *
@


1.12.8.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a5 3
 * Revision 1.12.8.1  1997/05/12  10:31:33  hope
 * branched from 1.12
 *
@


1.12.8.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a5 3
 * Revision 1.12.8.1.1.1  1997/07/28  18:17:28  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.12.7.1
log
@branched from 1.12
@
text
@a5 4
 * Revision 1.12  1996/09/19  11:22:56  johnh
 * Bug #148.
 * Passed list a of main Winwindows to exit_dialog function so that they can be killed.
 *
@


1.12.6.1
log
@branched from 1.12
@
text
@a5 4
 * Revision 1.12  1996/09/19  11:22:56  johnh
 * Bug #148.
 * Passed list a of main Winwindows to exit_dialog function so that they can be killed.
 *
@


1.12.6.1.1.1
log
@branched from 1.12.6.1
@
text
@a5 3
 * Revision 1.12.6.1  1996/12/17  17:45:15  hope
 * branched from 1.12
 *
@


1.12.5.1
log
@branched from 1.12
@
text
@a5 4
 * Revision 1.12  1996/09/19  11:22:56  johnh
 * Bug #148.
 * Passed list a of main Winwindows to exit_dialog function so that they can be killed.
 *
@


1.12.4.1
log
@branched from 1.12
@
text
@a5 4
 * Revision 1.12  1996/09/19  11:22:56  johnh
 * Bug #148.
 * Passed list a of main Winwindows to exit_dialog function so that they can be killed.
 *
@


1.12.3.1
log
@branched from 1.12
@
text
@a5 4
 * Revision 1.12  1996/09/19  11:22:56  johnh
 * Bug #148.
 * Passed list a of main Winwindows to exit_dialog function so that they can be killed.
 *
@


1.12.3.1.1.1
log
@branched from 1.12.3.1
@
text
@a5 3
 * Revision 1.12.3.1  1996/11/14  12:46:11  hope
 * branched from 1.12
 *
@


1.12.2.1
log
@branched from 1.12
@
text
@a5 4
 * Revision 1.12  1996/09/19  11:22:56  johnh
 * Bug #148.
 * Passed list a of main Winwindows to exit_dialog function so that they can be killed.
 *
@


1.12.1.1
log
@branched from 1.12
@
text
@a5 4
 * Revision 1.12  1996/09/19  11:22:56  johnh
 * Bug #148.
 * Passed list a of main Winwindows to exit_dialog function so that they can be killed.
 *
@


1.11
log
@Replaced works_menu and application_works_menu with tools_menu.
@
text
@d6 3
d213 2
a214 2
    fun exit_mlworks (parent, APPLICATIONDATA {applicationShell, has_controlling_tty}) =
      Menus.exit_dialog (parent,applicationShell,has_controlling_tty)
@


1.11.1.1
log
@branched from 1.11
@
text
@a5 3
 * Revision 1.11  1996/05/14  13:57:00  daveb
 * Replaced works_menu and application_works_menu with tools_menu.
 *
@


1.10
log
@Added edit_possible field to ToolData.edit_menu.
@
text
@d6 3
d236 1
a236 1
    fun works_menu_internal (mk_tooldata, close_fn, close_enable, get_user_context,is_application) =
d258 1
a258 8
	Menus.CASCADE
	  ("works",
           tools_buttons @@
           [Menus.SEPARATOR,
            Menus.PUSH (if is_application then "exit" else "close",
			fn _ => close_fn (),
			fn _ => close_enable ())],
	   k true)
a259 5
    fun works_menu (mk_tooldata, close_fn, close_enable, get_user_context) =
      works_menu_internal (mk_tooldata, close_fn, close_enable, get_user_context,false)

    fun application_works_menu (mk_tooldata, close_fn, close_enable, get_user_context) =
      works_menu_internal (mk_tooldata, close_fn, close_enable, get_user_context,true)
@


1.9
log
@newmap becomes map, NEWMAP becomes MAP
@
text
@d6 3
d281 3
a283 1
    fun edit_menu (widget,{cut,paste,copy,delete,selection_made,tail}) =
d289 1
d294 1
d299 1
d307 18
a324 12
         [Menus.PUSH ("cut",
                      cut,
                      fn _ => can_cut andalso selection_made()),
          Menus.PUSH ("copy",
                      copy,
                      fn _ => can_copy andalso selection_made ()),
          Menus.PUSH ("paste",
                      paste,
                      fn _ => can_paste andalso not (Capi.clipboard_empty widget)),
          Menus.PUSH ("delete",
                      delete,
                      fn _ => can_delete andalso selection_made ())]
@


1.8
log
@UserContext no longer includes a user_tool_options type.
@
text
@d6 3
d98 1
a98 1
require "../utils/newmap";
d111 1
a111 1
  structure Map : NEWMAP
d141 1
a141 1
	   * Writable) Map.T
@


1.7
log
@Added tail field to edit_menu argument.
@
text
@d6 3
d118 1
a118 3
  sharing type UserOptions.user_tool_options = ShellTypes.user_options =
	       UserContext.user_tool_options
  sharing type Map.T = UserContext.map
@


1.6
log
@Changed interface to clipboard
@
text
@d6 3
d274 1
a274 1
    fun edit_menu (widget,{cut,paste,copy,delete,selection_made}) =
d306 4
a309 1
                      fn _ => can_delete andalso selection_made ())],
@


1.5
log
@Adjustments to resource names
@
text
@d6 3
d271 1
a271 1
    fun edit_menu {paste,copy,delete} =
d273 4
d284 1
a284 1
          | _ => (k "",false)
a288 1
        fun selection_made _ = copy () <> ""
d293 2
a294 2
                      fn _ => (Capi.clipboard_set (copy());delete()),
                      fn _ => can_copy andalso can_delete andalso selection_made()),
d296 1
a296 1
                      fn _ => Capi.clipboard_set (copy()),
d299 2
a300 2
                      fn _ => paste (Capi.clipboard_get ()),
                      fn _ => can_paste andalso not (Capi.clipboard_empty())),
d302 1
a302 1
                      fn _ => delete(),
@


1.4
log
@Adding window menu
@
text
@d6 3
d220 1
a220 1
    fun works_menu (mk_tooldata, close_fn, close_enable, get_user_context) =
d246 1
a246 1
            Menus.PUSH ("close",
d251 6
d285 2
a286 2
        ("editButton",
         [Menus.PUSH ("cutButton",
d289 1
a289 1
          Menus.PUSH ("copyButton",
d292 1
a292 1
          Menus.PUSH ("pasteButton",
d295 1
a295 1
          Menus.PUSH ("deleteButton",
@


1.3
log
@Moving exit_dialog to Menus
@
text
@d6 3
d114 2
d210 2
d246 44
a289 1
	   fn _ => true)
@


1.2
log
@Moved capi etc. to gui
@
text
@d6 3
d98 2
a99 1

d187 1
a187 1
      Capi.exit_dialog (parent,applicationShell,has_controlling_tty)
@


1.1
log
@new unit
New unit
@
text
@d6 4
a76 2
require "../library/capi";
require "../library/menus";
d79 2
@
