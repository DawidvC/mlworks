head	1.46;
access;
symbols
	MLWorks_11r1:1.39.1.1.1.3.1
	MLWorks_11c0_1997_09_09:1.39.1.1.1.3
	MLWorks_10r3:1.39.1.1.3
	MLWorks_10r2_551:1.39.1.1.2
	MLWorks_11:1.39.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.39.1.1
	MLWorks_1_0_r2c2_1997_06_14:1.39.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.39.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.39.1
	MLWorks_BugFix_1997_04_24:1.39
	MLWorks_1_0_r2_Win32_1997_04_11:1.39
	MLWorks_1_0_r2_Unix_1997_04_04:1.39
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.36.3.1.1
	MLWorks_gui_1996_12_18:1.36.4
	MLWorks_1_0_Win32_1996_12_17:1.36.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.34.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.34.1.1
	JFHgui:1.36.2
	MLWorks_1_0_Irix_1996_11_28:1.34.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.36.1
	MLWorks_1_0_Unix_1996_11_14:1.34.1
	MLWorks_Open_Beta2_1996_10_11:1.30.2
	MLWorks_License_dev:1.30.1
	MLWorks_1_open_beta_1996_09_13:1.27.1
	MLWorks_Open_Beta_1996_08_22:1.27
	MLWorks_Beta_1996_07_02:1.25
	MLWorks_Beta_1996_06_07:1.25
	MLWorks_Beta_1996_06_06:1.25
	MLWorks_Beta_1996_06_05:1.25
	MLWorks_Beta_1996_06_03:1.25
	MLWorks_Beta_1996_05_31:1.25
	MLWorks_Beta_1996_05_30:1.24;
locks; strict;
comment	@ * @;


1.46
date	97.06.12.13.48.07;	author johnh;	state Exp;
branches;
next	1.45;

1.45
date	97.06.09.15.09.20;	author johnh;	state Exp;
branches;
next	1.44;

1.44
date	97.06.09.10.26.58;	author johnh;	state Exp;
branches;
next	1.43;

1.43
date	97.05.27.14.08.52;	author johnh;	state Exp;
branches;
next	1.42;

1.42
date	97.05.22.15.15.14;	author johnh;	state Exp;
branches;
next	1.41;

1.41
date	97.05.21.09.02.06;	author johnh;	state Exp;
branches;
next	1.40;

1.40
date	97.05.16.15.34.42;	author johnh;	state Exp;
branches;
next	1.39;

1.39
date	97.03.27.14.48.15;	author daveb;	state Exp;
branches
	1.39.1.1;
next	1.38;

1.38
date	97.03.25.11.55.21;	author andreww;	state Exp;
branches;
next	1.37;

1.37
date	97.03.17.11.39.40;	author andreww;	state Exp;
branches;
next	1.36;

1.36
date	96.11.20.18.46.09;	author daveb;	state Exp;
branches
	1.36.1.1
	1.36.2.1
	1.36.3.1
	1.36.4.1;
next	1.35;

1.35
date	96.11.18.11.37.37;	author daveb;	state Exp;
branches;
next	1.34;

1.34
date	96.11.12.11.45.33;	author daveb;	state Exp;
branches
	1.34.1.1;
next	1.33;

1.33
date	96.11.01.14.42.56;	author johnh;	state Exp;
branches;
next	1.32;

1.32
date	96.10.30.21.41.54;	author io;	state Exp;
branches;
next	1.31;

1.31
date	96.10.17.12.55.49;	author jont;	state Exp;
branches;
next	1.30;

1.30
date	96.09.23.14.01.18;	author matthew;	state Exp;
branches
	1.30.1.1
	1.30.2.1;
next	1.29;

1.29
date	96.09.19.13.00.49;	author johnh;	state Exp;
branches;
next	1.28;

1.28
date	96.09.19.11.20.57;	author johnh;	state Exp;
branches;
next	1.27;

1.27
date	96.07.15.12.47.22;	author andreww;	state Exp;
branches
	1.27.1.1;
next	1.26;

1.26
date	96.07.02.15.14.15;	author andreww;	state Exp;
branches;
next	1.25;

1.25
date	96.05.30.13.19.41;	author daveb;	state Exp;
branches;
next	1.24;

1.24
date	96.05.29.14.39.21;	author daveb;	state Exp;
branches;
next	1.23;

1.23
date	96.05.20.15.49.30;	author daveb;	state Exp;
branches;
next	1.22;

1.22
date	96.05.17.10.16.53;	author matthew;	state Exp;
branches;
next	1.21;

1.21
date	96.05.16.13.16.51;	author stephenb;	state Exp;
branches;
next	1.20;

1.20
date	96.05.14.13.57.34;	author daveb;	state Exp;
branches;
next	1.19;

1.19
date	96.05.03.14.24.17;	author nickb;	state Exp;
branches;
next	1.18;

1.18
date	96.05.01.11.25.52;	author jont;	state Exp;
branches;
next	1.17;

1.17
date	96.03.12.14.02.01;	author matthew;	state Exp;
branches;
next	1.16;

1.16
date	96.02.29.14.25.28;	author matthew;	state Exp;
branches;
next	1.15;

1.15
date	96.01.23.15.59.51;	author daveb;	state Exp;
branches;
next	1.14;

1.14
date	96.01.22.11.41.37;	author daveb;	state Exp;
branches;
next	1.13;

1.13
date	96.01.17.15.26.36;	author matthew;	state Exp;
branches;
next	1.12;

1.12
date	95.12.12.15.37.55;	author daveb;	state Exp;
branches;
next	1.11;

1.11
date	95.12.04.15.31.07;	author daveb;	state Exp;
branches;
next	1.10;

1.10
date	95.11.16.14.07.37;	author matthew;	state Exp;
branches;
next	1.9;

1.9
date	95.11.15.14.01.38;	author matthew;	state Exp;
branches;
next	1.8;

1.8
date	95.10.04.11.24.41;	author daveb;	state Exp;
branches;
next	1.7;

1.7
date	95.09.11.13.20.57;	author matthew;	state Exp;
branches;
next	1.6;

1.6
date	95.09.05.12.59.25;	author matthew;	state Exp;
branches;
next	1.5;

1.5
date	95.08.31.12.02.29;	author matthew;	state Exp;
branches;
next	1.4;

1.4
date	95.08.14.10.33.50;	author matthew;	state Exp;
branches;
next	1.3;

1.3
date	95.08.11.10.24.35;	author matthew;	state Exp;
branches;
next	1.2;

1.2
date	95.07.27.10.58.25;	author matthew;	state Exp;
branches;
next	1.1;

1.1
date	95.07.26.14.46.29;	author matthew;	state Exp;
branches;
next	;

1.27.1.1
date	96.09.13.11.13.03;	author hope;	state Exp;
branches;
next	;

1.30.1.1
date	96.10.07.16.03.42;	author hope;	state Exp;
branches;
next	1.30.1.2;

1.30.1.2
date	96.10.08.12.21.28;	author jont;	state Exp;
branches;
next	;

1.30.2.1
date	96.10.17.11.21.58;	author hope;	state Exp;
branches;
next	;

1.34.1.1
date	96.11.14.12.45.53;	author hope;	state Exp;
branches
	1.34.1.1.1.1;
next	;

1.34.1.1.1.1
date	96.11.28.14.57.42;	author hope;	state Exp;
branches;
next	;

1.36.1.1
date	96.11.22.18.06.20;	author hope;	state Exp;
branches;
next	;

1.36.2.1
date	96.12.17.09.54.22;	author hope;	state Exp;
branches;
next	;

1.36.3.1
date	96.12.17.17.45.02;	author hope;	state Exp;
branches
	1.36.3.1.1.1;
next	;

1.36.3.1.1.1
date	97.02.24.11.34.30;	author hope;	state Exp;
branches;
next	;

1.36.4.1
date	96.12.18.09.39.01;	author hope;	state Exp;
branches;
next	1.36.4.2;

1.36.4.2
date	96.12.18.14.27.47;	author johnh;	state Exp;
branches;
next	;

1.39.1.1
date	97.05.12.10.31.20;	author hope;	state Exp;
branches
	1.39.1.1.1.1
	1.39.1.1.2.1
	1.39.1.1.3.1;
next	;

1.39.1.1.1.1
date	97.07.28.18.17.12;	author daveb;	state Exp;
branches;
next	1.39.1.1.1.2;

1.39.1.1.1.2
date	97.08.05.09.29.54;	author johnh;	state Exp;
branches;
next	1.39.1.1.1.3;

1.39.1.1.1.3
date	97.08.06.18.38.40;	author daveb;	state Exp;
branches
	1.39.1.1.1.3.1.1;
next	;

1.39.1.1.1.3.1.1
date	97.10.07.11.42.04;	author jkbrook;	state Exp;
branches;
next	;

1.39.1.1.2.1
date	97.09.08.17.10.46;	author daveb;	state Exp;
branches;
next	;

1.39.1.1.3.1
date	97.09.09.14.06.20;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
New unit
@


1.46
log
@[Bug #30175]
Combine tools and windows menus.
@
text
@(* podium.sml the functor.
 *  
 *  $Log: _podium.sml,v $
 * Revision 1.45  1997/06/09  15:09:20  johnh
 * [Bug #02030]
 * Removed Edit Error from the Listener menu.
 *
 * Revision 1.44  1997/06/09  10:26:58  johnh
 * [Bug #30068]
 * Making Break/Trace manager top level tool.
 *
 * Revision 1.43  1997/05/27  14:08:52  johnh
 * [Bug #20033]
 * Banner only displayed now if SaveImage.show_banner is true.
 *
 * Revision 1.42  1997/05/22  15:15:14  johnh
 * [Bug #20023]
 * Set Capi.evaluating to false when loading image.
 *
 * Revision 1.41  1997/05/21  09:02:06  johnh
 * Implementing toolbar on Windows.
 *
 * Revision 1.40  1997/05/16  15:34:42  johnh
 * Implementing single menu bar on Windows.
 *
 * Revision 1.39  1997/03/27  14:48:15  daveb
 * [Bug #1990]
 * Version.version_string is now Version.versionString, and a function instead
 * of a constant.
 *
 * Revision 1.38  1997/03/25  11:55:21  andreww
 * [Bug #1989]
 * Removing exn_name_string (giving functionality to exn_name).
 *
 * Revision 1.37  1997/03/17  11:39:40  andreww
 * [Bug #1677]
 * adding new access field to currentIO record.
 *
 * Revision 1.36  1996/11/20  18:46:09  daveb
 * [Bug #1796]
 * Corrected a bug introduced by the previous change: mainWindow must be
 * revealed before calling initialize_application_shell.
 *
 * Revision 1.35  1996/11/18  11:37:37  daveb
 * Added splash screen.
 *
 * Revision 1.34  1996/11/12  11:45:33  daveb
 * Revised licensing scheme to allow registration-style licensing.
 *
 * Revision 1.33  1996/11/01  14:42:56  johnh
 * Enabling close from control box on top left of window.
 *
 * Revision 1.32  1996/10/30  21:41:54  io
 * [Bug #1614]
 * remove toplevel String
 *
 * Revision 1.31  1996/10/17  12:55:49  jont
 * Add license server stuff
 *
 * Revision 1.30.1.2  1996/10/08  12:21:28  jont
 * Add call to initialise license
 *
 * Revision 1.30.1.1  1996/10/07  16:03:42  hope
 * branched from 1.30
 *
 * Revision 1.30  1996/09/23  14:01:18  matthew
 * Adding register_interrupt_window to capi
 *
 * Revision 1.29  1996/09/19  13:00:49  johnh
 * [Bug #1583]
 * passing has_controlling_tty to exit_mlworks instead of passed ing false.
 *
 * Revision 1.27  1996/07/15  12:47:22  andreww
 * propagating changes made to the GUI standard IO redirection mechanism
 * (see __pervasive_library.sml for the StandardIO structure)
 *
 * Revision 1.26  1996/07/02  15:14:15  andreww
 * Setting up the Gui StandardIO flag, so that system/__primio.sml
 * can detect the GUI even without a listener.
 *
 * Revision 1.25  1996/05/30  13:19:41  daveb
 * The Interrupt exception is no longer at top level.
 *
 * Revision 1.24  1996/05/29  14:39:21  daveb
 * DebuggerWindow.make_debugger_window now returns a clean-up function to call
 * at the end of each evaluation.
 *
 * Revision 1.23  1996/05/20  15:49:30  daveb
 * Added Save Image menu entry.
 *
 * Revision 1.22  1996/05/17  10:16:53  matthew
 * Improvng handling of uncaught exceptions at top level
 *
 * Revision 1.21  1996/05/16  13:16:51  stephenb
 * Update wrt MLWorks.Debugger -> MLWorks.Internal.Debugger change.
 *
 * Revision 1.20  1996/05/14  13:57:34  daveb
 * Reorganised menus to include File menu.
 *
 * Revision 1.19  1996/05/03  14:24:17  nickb
 * Add delivery wrapper around start_x_interface
 *
 * Revision 1.18  1996/05/01  11:25:52  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
 * Revision 1.17  1996/03/12  14:02:01  matthew
 * Adding Paths menu
 *
 * Revision 1.16  1996/02/29  14:25:28  matthew
 * Adding extra params to setup_menu
 *
 * Revision 1.15  1996/01/23  15:59:51  daveb
 * Added context menu, and changed names of break and trace buttons.
 *
 * Revision 1.14  1996/01/22  11:41:37  daveb
 * Removed evaluator from tools menu.  Moved Windows menu to correct position.
 *
 * Revision 1.13  1996/01/17  15:26:36  matthew
 * Removing inspector from top level
 *
 * Revision 1.12  1995/12/12  15:37:55  daveb
 * Removed File Tool.
 *
 * Revision 1.11  1995/12/04  15:31:07  daveb
 * Added project tool.
 *
 * Revision 1.10  1995/11/16  14:07:37  matthew
 * Changing interface to tool_data
 *
 * Revision 1.9  1995/11/15  14:01:38  matthew
 * Adding windows menu
 *
 * Revision 1.8  1995/10/04  11:24:41  daveb
 * Type of setup_menu has changed.
 *
 * Revision 1.7  1995/09/11  13:20:57  matthew
 * Changing top level window initialization
 *
 * Revision 1.6  1995/09/05  12:59:25  matthew
 * Using make_nonml_scrolled_text
 *
 * Revision 1.5  1995/08/31  12:02:29  matthew
 * Renaming layout constructors
 *
 * Revision 1.4  1995/08/14  10:33:50  matthew
 * Changes to make_main_subwindows
 *
 * Revision 1.3  1995/08/11  10:24:35  matthew
 * Adding make_buttons function to capi
 *
 * Revision 1.2  1995/07/27  10:58:25  matthew
 * Moved capi etc. to gui
 *
 * Revision 1.1  1995/07/26  14:46:29  matthew
 * new unit
 * New unit
 *
 *  Revision 1.59  1995/07/18  13:37:21  matthew
 *  Changin listener interface.
 *
 *  Revision 1.58  1995/07/07  15:31:08  daveb
 *  Minor changes to layout.
 *
 *  Revision 1.57  1995/07/04  14:18:07  matthew
 *  Capifying
 *
 *  Revision 1.56  1995/06/15  13:03:20  daveb
 *  Hid details of WINDOWING type in ml_debugger.
 *
 *  Revision 1.55  1995/06/08  13:50:57  daveb
 *  InspectorTool no longer contains a Widget type.
 *
 *  Revision 1.54  1995/06/08  09:56:01  daveb
 *  Types of the InspectorTool functions have changed.
 *
 *  Revision 1.53  1995/06/01  12:53:37  daveb
 *  Separated user_options into tool-specific and context-specific parts.
 *
 *  Revision 1.52  1995/05/23  08:45:38  daveb
 *  Made contexts only visible if full_menus set.
 *
 *  Revision 1.51  1995/05/19  15:52:28  daveb
 *  Added "Browse Initial" entry to tools menu.
 *
 *  Revision 1.50  1995/05/15  15:58:01  matthew
 *  Improving X_system_error message
 *
 *  Revision 1.49  1995/05/04  09:44:06  matthew
 *  Using createMenuBar for creating menuBar
 *
 *  Revision 1.48  1995/04/28  15:03:29  daveb
 *  Moved all the user_context stuff from ShellTypes into a separate file.
 *
 *  Revision 1.47  1995/04/24  15:52:14  matthew
 *  Make subwindow parents not be menuBar
 *  
 *  Revision 1.46  1995/04/24  10:40:14  daveb
 *  Added handler for Xm.SubLoopTerminated to mainLoop.
 *  
 *  Revision 1.45  1995/04/18  15:33:28  daveb
 *  Changes to context_menu.
 *  
 *  Revision 1.44  1995/04/13  17:56:39  daveb
 *  Xm.mainLoop is back to taking unit.
 *  
 *  Revision 1.43  1995/04/13  10:27:55  daveb
 *  Added a context menu.
 *  
 *  Revision 1.42  1995/04/07  10:52:57  daveb
 *  Added AppContext type to Xm library.
 *  
 *  Revision 1.41  1995/03/30  14:03:42  daveb
 *  Added ContextWindow to list of tools.
 *  
 *  Revision 1.40  1995/03/27  13:46:15  io
 *  catch X exn when DISPLAY left unset
 *  
 *  Revision 1.39  1995/03/17  11:50:36  daveb
 *  Added Writable component to tool list.
 *  
 *  Revision 1.38  1995/03/16  16:27:08  daveb
 *  Made all created tools share the same current_context value.
 *  
 *  Revision 1.37  1995/03/15  16:50:27  daveb
 *  listener_args now has a new type.
 *  
 *  Revision 1.36  1995/03/10  15:54:18  daveb
 *  GuiUtils.options_menu now takes an extra argument.
 *  
 *  Revision 1.35  1995/01/13  16:56:07  daveb
 *  Removed obsolete sharing constraint.
 *  
 *  Revision 1.34  1994/07/14  14:50:29  daveb
 *  start_x_interface now takes a boolean parameter that indicates whether
 *  it was called from a TTY.  If not, it MLWorks must have called it on
 *  start up, so it prints the version message.  This flag is passed into
 *  the appdata field of the ToolData type.
 *  
 *  Revision 1.33  1994/07/12  16:22:48  daveb
 *  ToolData.works_menu takes different arguments.
 *  InspectorTool.ToolData.ShellTypes.Option replaced with InspectorTool.Option
 *  
 *  Revision 1.32  1994/06/30  08:56:42  nickh
 *  Provide for messages to appear in the podium window.
 *  (and remove some dead code).
 *  
 *  Revision 1.31  1994/06/20  13:03:25  daveb
 *  Added the evaluator.
 *  Replaced context refs with user_contexts.
 *  
 *  Revision 1.30  1994/04/07  12:07:37  daveb
 *  Added case for DebuggerTrapped.
 *  
 *  Revision 1.29  1994/03/21  17:23:35  matthew
 *  Added catchall around event loop
 *  
 *  Revision 1.28  1994/02/02  11:59:57  daveb
 *  Changed substructure of InterMake.
 *  
 *  Revision 1.27  1993/12/09  14:38:08  matthew
 *  Added call to register application shell for inter client comms.
 *  
 *  Revision 1.26  1993/11/18  18:01:09  daveb
 *  The argument to Ml_Debugger.with_debugger_type now takesa frame argument
 *  instead of unit.
 *  
 *  Revision 1.25  1993/11/09  15:55:37  daveb
 *  Merged in bug fix.
 *  
 *  Revision 1.24  1993/10/22  17:00:49  daveb
 *  Merged in bug fix.
 *  
 *  Revision 1.23  1993/09/07  14:04:22  daveb
 *  Merged in bug fix.
 *  
 *  26,28d16
 *  Revision 1.22  1993/09/07  11:18:09  daveb
 *  Merged in bug fix.
 *  
 *  Revision 1.21.1.5  1993/11/09  15:44:17  daveb
 *  Made mainLoop properly tail recursive.
 *  
 *  Revision 1.21.1.4  1993/10/21  14:04:43  daveb
 *  Changed ToolData.works_menu to take a (unit -> bool) function that
 *  controls whether the Close menu option is enabled.
 *  
 *  Revision 1.21.1.3  1993/09/07  13:54:22  daveb
 *  Changed argument to debugger_type to ensure that it always uses a window
 *  debugger, even if the user prefers a TTY debugger (that preference only
 *  affects the listener).
 *  
 *  Revision 1.21.1.2  1993/09/06  15:21:31  daveb
 *  Wrapped debugger around mainLoop.
 *  
 *  Revision 1.21  1993/08/11  13:12:46  matthew
 *  Changes for automatic option menu updating
 *  
 *  Revision 1.20  1993/08/06  15:23:55  nosa
 *  Pass debugger_window to Inspector.
 *  
 *  Revision 1.19  1993/06/02  14:12:04  daveb
 *  Changed title to "MLWorks", since "MLWorks Console" wasn't popular.
 *  
 *  Revision 1.18  1993/05/13  14:02:29  daveb
 *  All tools now set their own titles and pass them to their options menus.
 *  
 *  Revision 1.17  1993/05/05  19:20:25  daveb
 *  Added InspectorTool to the list of tools.
 *  
 *  Revision 1.16  1993/05/05  11:50:02  daveb
 *  Moved exit_mlworks from _podium to _tooldata.  Added tools argument to
 *   works_menu(), removed exitApplication from TOOLDATA.
 *  
 *  Revision 1.15  1993/04/30  14:43:52  daveb
 *  Reorganised menus.
 *  
 *  Revision 1.14  1993/04/28  14:19:57  richard
 *  The podium now has a text messages widget and a horizontal menu bar
 *  rather than being like the old LispWorks podium.
 *  
 *  Revision 1.13  1993/04/21  14:53:16  daveb
 *  Removed context browser item from tools menu.
 *  
 *  Revision 1.12  1993/04/16  14:52:27  matthew
 *  Changed interface to tools
 *  Added file browser
 *  
 *  Revision 1.11  1993/04/05  14:58:14  daveb
 *  Names of Callbacks have changed.
 *  
 *  Revision 1.10  1993/04/02  15:18:02  matthew
 *  Removed Incremental structure
 *  
 *  Revision 1.9  1993/03/30  14:46:38  matthew
 *  Menus.MENUSPEC is no more
 *  
 *  Revision 1.8  1993/03/30  12:29:02  matthew
 *  Removed "destroying..": message
 *  
 *  Revision 1.7  1993/03/26  14:19:00  matthew
 *  Changed menus for consistency with listener
 *  
 *  Revision 1.6  1993/03/23  14:10:22  matthew
 *  Used generic menu facility
 *  
 *  Revision 1.5  1993/03/17  15:22:08  matthew
 *  Tried doing CloseDisplay instead of destroy applicationShell
 *  Currently commented out.
 *  
 *  Revision 1.4  1993/03/15  17:50:19  matthew
 *  Simplified ShellTypes type
 *  
 *  Revision 1.3  1993/03/15  14:43:45  daveb
 *  Prevented the podium from being resized.
 *  Changed quit dialog to offer option of returning to TTY listener or
 *  quitting completely.
 *  
 *  Revision 1.2  1993/03/08  15:24:39  matthew
 *  Changes for ShellData type
 *  
 *  Revision 1.1  1993/03/02  17:54:38  daveb
 *  Initial revision
 *  
 *  
 *  Copyright (c) 1993 Harlequin Ltd.
 *  
 *)

require "../main/user_options";
require "../main/preferences";
require "../main/version";
require "../main/license";
require "../debugger/ml_debugger";
require "capi";
require "menus";
require "debugger_window";
require "tooldata";
require "listener";
require "gui_utils";
require "break_trace";
require "browser_tool";
require "context";
require "comp_manager";
require "../interpreter/save_image";
require "podium";

functor Podium (
  structure Capi: CAPI
  structure UserOptions : USER_OPTIONS
  structure Preferences : PREFERENCES
  structure License : LICENSE
  structure Version : VERSION
  structure Debugger_Window : DEBUGGERWINDOW
  structure ToolData : TOOL_DATA
  structure Menus : MENUS
  structure Listener: LISTENER
  structure BrowserTool : BROWSERTOOL
  structure CompilationManager : COMPILATION_MANAGER
  structure ContextHistory : CONTEXT_HISTORY
  structure GuiUtils : GUI_UTILS
  structure Ml_Debugger : ML_DEBUGGER
  structure SaveImage : SAVE_IMAGE
  structure BreakTrace : BREAK_TRACE

  sharing Ml_Debugger.ValuePrinter.Options = ToolData.ShellTypes.Options
  sharing type Ml_Debugger.preferences = ToolData.ShellTypes.preferences
  sharing type Listener.ToolData = ToolData.ToolData = 
               CompilationManager.ToolData =
	       BrowserTool.ToolData = 
	       ContextHistory.ToolData =
	       Debugger_Window.ToolData =
	       BreakTrace.ToolData
  sharing type Menus.Widget = ToolData.Widget =
	       GuiUtils.Widget = Debugger_Window.Widget = Capi.Widget
  sharing type GuiUtils.ButtonSpec = ToolData.ButtonSpec = Menus.ButtonSpec
  sharing type GuiUtils.user_tool_options = ToolData.ShellTypes.user_options =
    	       UserOptions.user_tool_options
  sharing type GuiUtils.user_context_options =
	       ToolData.UserContext.user_context_options
  sharing type Preferences.user_preferences = GuiUtils.user_preferences =
	       ToolData.ShellTypes.user_preferences
  sharing type GuiUtils.user_context = ToolData.ShellTypes.user_context
  sharing type GuiUtils.MotifContext = ToolData.MotifContext
  sharing type Ml_Debugger.debugger_window = Debugger_Window.debugger_window
  sharing type ToolData.ShellTypes.ShellData = SaveImage.ShellData

): PODIUM =
struct
  structure ShellTypes = ToolData.ShellTypes
  structure UserContext = ToolData.UserContext

  type ListenerArgs = ShellTypes.ListenerArgs

  val tool_list =
    [("listener", Listener.create false, ToolData.WRITABLE),
     ("compManager", CompilationManager.create, ToolData.WRITABLE),
     ("contextBrowser", BrowserTool.create, ToolData.ALL),
     ("initialBrowser", BrowserTool.create_initial, ToolData.ALL),
     ("contextWindow", ContextHistory.create, ToolData.ALL),
     ("breakTrace", BreakTrace.create, ToolData.ALL)]

  fun start_x_interface args has_controlling_tty =
    let
      fun print_message message = 
	MLWorks.IO.output (MLWorks.IO.messages, message)

      (* The following few lines set the StandardIO internal flag to 
         indicate the presence of the GUI, so that system/__primio.sml 
         can detect the GUI even when it is being loaded by the compilation
         manager in the presence of no listeners.  At the moment, the
         current window is set to junk; the listeners will  set the flag to
         point to the correct window. *)

      val _ = MLWorks.Internal.StandardIO.redirectIO
        {output={descriptor=NONE,
                 put=fn _ => 0,
                 get_pos = NONE,
                 set_pos = NONE,
                 can_output=NONE,
                 close = fn()=>()},
         error={descriptor=NONE,
                 put=fn _ => 0,
                 get_pos = NONE,
                 set_pos = NONE,
                 can_output=NONE,
                 close=fn()=>()},
         input={descriptor=NONE,
                get=fn _ => "",
                get_pos=NONE,
                set_pos=NONE,
                can_input=NONE,
                close=fn()=>()},
         access=fn f=> f ()}
        (* see <URI:spring:/ML_Notebook/Design/GUI/Mutexes> for a
         * description of the access field.*)
                 

      val applicationShell = Capi.initialize_application ("mlworks","MLWorks",
		has_controlling_tty)

      val ShellTypes.LISTENER_ARGS
	    {user_options, user_preferences, user_context, ...} = args

      val (full_menus, update_fns) =
	case user_preferences
	of Preferences.USER_PREFERENCES ({full_menus, ...}, update_fns) =>
	  (!full_menus, update_fns)

      val (mainWindow,menuBar,contextLabel) =
        Capi.make_main_subwindows (applicationShell,full_menus)

      val interrupt_button = Capi.make_interrupt_button mainWindow

      val (scroll,message) = Capi.make_message_text ("message",mainWindow,[])

      fun set_context_label motif_context =
	case contextLabel
	of SOME w =>
          let
            val context_name =
              GuiUtils.get_context_name motif_context

            val string = "Context: " ^ context_name
          in
            Capi.set_label_string (w,string)
          end
	|  NONE => ()

      fun start_messages () = Capi.set_message_widget message
      fun stop_messages () = Capi.no_message_widget ()

      fun get_user_options () = user_options

      val _ = GuiUtils.makeInitialContext
	        (applicationShell, user_preferences)

      val current_context =
	ToolData.make_current
	  (GuiUtils.make_context
	     (user_context, applicationShell, user_preferences))

      fun get_context () = ToolData.get_current current_context

      fun copy_args (ShellTypes.LISTENER_ARGS {user_context,
                                               user_options,
					       user_preferences,
                                               prompter,
                                               mk_xinterface_fn}) =
        ShellTypes.LISTENER_ARGS
	  {user_context =
           GuiUtils.get_user_context (get_context ()),
	   user_preferences = user_preferences,
           user_options = UserOptions.copy_user_tool_options user_options,
           prompter = prompter,
           mk_xinterface_fn = mk_xinterface_fn}

      val appdata =
	ToolData.APPLICATIONDATA
	  {applicationShell = applicationShell,
	   has_controlling_tty = has_controlling_tty}

      fun mk_tooldata () =
	ToolData.TOOLDATA
	  {args = copy_args args, appdata = appdata,
	   motif_context = get_context (),
	   current_context = current_context, tools = tool_list}
	  
      val context_key =
        ToolData.add_context_fn
          (current_context, (set_context_label, get_user_options, ToolData.ALL))

      fun get_current_user_context () =
        GuiUtils.get_user_context (get_context ())

      fun get_user_context_options () = 
        UserContext.get_user_options (get_current_user_context ())

      local
	fun handler_fn msg = Capi.send_message (applicationShell, msg)
      in
        fun save_image _ =
	  case Capi.save_as_dialog (applicationShell, ".img")
	  of NONE => ()
	  |  SOME filename => 
	    SaveImage.saveImage
	      (false, handler_fn)
	      (filename, false)
      end

      val {update_history, prev_history, next_history, history_start,
	   history_end, history_menu} =
	GuiUtils.make_history (user_preferences, fn s => ())

      val file_menu = ToolData.set_global_file_items
	([("save",
            fn _ =>
              GuiUtils.save_history
                (false, get_current_user_context (), applicationShell),
            fn _ =>
	      not (UserContext.null_history (get_current_user_context ()))
                   andalso UserContext.saved_name_set
			     (get_current_user_context ())),
         ("saveAs",
            fn _ =>
              GuiUtils.save_history
                (true, get_current_user_context (), applicationShell),
            fn _ =>
              not (UserContext.null_history (get_current_user_context ()))),
	 ("saveImage", save_image, fn _ => true),
	 ("exit",
	    fn _ => ToolData.exit_mlworks (applicationShell, appdata, 
		map (fn (w,_) => w) (Capi.get_main_windows ())),
	    fn _ => not (!Capi.evaluating))])

      fun pushButtons [] = []
	| pushButtons (one::rest) = 
	    (Menus.PUSH (one, fn () => (), fn () => false)) :: pushButtons rest

      val listener_menu = 
	(pushButtons ["evaluate", "stepEval", "time", "profile"]) @@
	[Menus.SEPARATOR] @@ 
	(pushButtons ["clear_def", "abandon", "previous_def", "next_def"])
	
      val usage_menu = ToolData.set_global_usage_items (GuiUtils.setup_menu
		(mainWindow, get_context, user_preferences,get_user_context_options), [])
      val debug_menu = ToolData.debug_menu []

      val edit_menu = 
         ToolData.edit_menu
           (applicationShell,
            {cut = NONE,
             paste = NONE,
             copy = SOME
	       (fn _ => Capi.clipboard_set
			  (message, Capi.Text.get_selection message)),
             delete = NONE,
	     selection_made = fn _ => Capi.Text.get_selection message <> "",
             edit_possible = fn _ => false,
             edit_source = pushButtons ["editSource"],
	     delete_all = SOME ("deleteAll", fn () => (), fn () => false) })

      val project_menu = Menus.CASCADE ("project_menu", 
	(pushButtons ["check_load_source", "check_load", "check_compile", "show_graph"]) @@
	[Menus.SEPARATOR,
	 Menus.CASCADE ("touch", 
	    pushButtons ["touch_source", "touch_loaded", "touch_all_loaded"], 
	    fn () => false),
	 Menus.SEPARATOR] @@
	(pushButtons ["load_source", "load", "compile", "compile_and_load"]) @@
	[Menus.SEPARATOR] @@
	(pushButtons ["deleteSelection", "removeAllUnits", "clear_console"]), fn () => false)

      val menuspec =
	[file_menu,
	 edit_menu,
         ToolData.tools_menu (mk_tooldata, get_current_user_context),
	 usage_menu] @@

	 (if Menus.isMotif then [] else
	 [Menus.CASCADE ("listener_menu", listener_menu, fn _ => false),
	  project_menu]) @@

	 [debug_menu,
         GuiUtils.paths_menu mainWindow] @@
	 (if Menus.isMotif then [] else 
	 [Menus.DYNAMIC ("history", fn () => [], fn _ => false)])

      val (run_debugger, clean_debugger) =
        Debugger_Window.make_debugger_window
	  (applicationShell, "MLWorks Debugger", mk_tooldata ())

      val debugger_type =
	Ml_Debugger.WINDOWING
	  (run_debugger,
	   (* I don't know what is the best function to use for the next
	      parameter here. *)
	   print_message, false)

      val _ = start_messages ()

      fun delivery_hook deliverer args =
        let
          fun inDeliveredImage f = 
            let val oldIO = MLWorks.Internal.StandardIO.currentIO()
            in (MLWorks.Internal.StandardIO.resetIO();
                f();
                MLWorks.Internal.StandardIO.redirectIO oldIO)
            end
         in
           (fn () => inDeliveredImage
            (fn () => MLWorks.IO.with_standard_output
             MLWorks.IO.terminal_out
             (fn () =>
              MLWorks.IO.with_standard_error
              MLWorks.IO.terminal_out
              (fn () =>
               MLWorks.IO.with_standard_input
               MLWorks.IO.terminal_in
               (fn () => deliverer args))))) ()
        end
           
      fun debugger_function exn = 
        let
          val shell_data as ShellTypes.SHELL_DATA{prompter,
                                                  mk_xinterface_fn, 
                                                 ...} = !ShellTypes.shell_data_ref
          val context = ShellTypes.get_current_context shell_data
        in
          Ml_Debugger.ml_debugger 
          (Ml_Debugger.get_debugger_type (),
           ShellTypes.get_current_options shell_data,
           ShellTypes.get_current_preferences shell_data)
          (Ml_Debugger.get_start_frame(),
           Ml_Debugger.EXCEPTION exn,
           Ml_Debugger.POSSIBLE ("Return to top level",
                                 Ml_Debugger.NORMAL_RETURN),
           Ml_Debugger.NOT_POSSIBLE)
        end
  
      val license_ok =
	has_controlling_tty orelse
	(if SaveImage.showBanner() then 
	   print_message (Version.versionString() ^ "\n")
	 else ();
	 License.license
	   {promptUser = Capi.license_prompt applicationShell,
	    complain = Capi.license_complain applicationShell})

      fun mainLoop frame =
	let
	  val loop =
	    (Capi.main_loop (); false)
	    (* normal return, don't loop *)
	    handle 
            MLWorks.Interrupt => true	(* interrupt, continue X interface *)
          | ShellTypes.DebuggerTrapped => true (* continue X interface *)
	  | Capi.SubLoopTerminated => false  (* break *)
          | exn => 
              ((* Don't want this message now I think *)
               (* MLWorks.IO.output(MLWorks.IO.terminal_out,
                      "SYSTEM ERROR: Unexpected exception " ^ 
                      (MLWorks.Internal.Value.exn_name exn) ^
                      "\nreached top level -- restarting loop\n"); *)
              debugger_function exn;
	      clean_debugger ();
              true)
	in
	  if loop then mainLoop frame else stop_messages()
	(* tail recursive call *)
	end

(* for Windows: make_menus needs to be done before make_toolbar so that the
 * reference lists for the menu items are set up. 
 *)
      val _ = Menus.make_menus(menuBar, menuspec, true (* ie. IS the podium *) );

(* The 109 here refers to the bitmap resource id that is used to store the 
 * images for the tool buttons.
 *)
      val toolbar = Menus.make_toolbar(mainWindow, 109, Menus.podium_buttons)
    in 
      if license_ok then
        (Capi.Layout.lay_out
         (mainWindow,
          [Capi.Layout.MENUBAR menuBar] @@
          (case contextLabel of
             NONE => [Capi.Layout.SPACE]
           | SOME w => [Capi.Layout.FIXED w]) @@
          [Capi.Layout.FIXED toolbar,
	   Capi.Layout.FIXED interrupt_button,
	   Capi.Layout.SPACE,
           Capi.Layout.FLEX scroll,
           Capi.Layout.SPACE]);
         Capi.show_splash_screen applicationShell;

	 (* "Capi.reveal mainWindow" must be called before
	    "Capi.initialize_application_shell application_shell".
	    On Motif the former is Xm.manage, and the latter is Xm.realise;
	    if mainWindow is not managed before the podium is realised, the
	    sizes are not set. *)
	 (* Capi.reveal should be done by make_main_subwindows. *)
	 Capi.reveal toolbar;
	 Capi.reveal mainWindow;
         Capi.initialize_application_shell applicationShell;
         set_context_label (get_context ());
	 (* Set to false here so that any saved images saved with Shell.saveImage 
	  * have the exit menu item enabled when the image is loaded *)
	 Capi.evaluating := false;
         MLWorks.Deliver.with_delivery_hook delivery_hook
           (Ml_Debugger.with_debugger_type debugger_type) mainLoop;
	 ())
      else
	()
    end
    handle Capi.WindowSystemError s =>
       MLWorks.IO.output
       (MLWorks.IO.terminal_out, "Graphics interface problem: "^s^"\n")
end;@


1.45
log
@[Bug #02030]
Removed Edit Error from the Listener menu.
@
text
@d4 4
d649 1
a649 2
	 [Menus.DYNAMIC ("history", fn () => [], fn _ => false)]) @@
	 [ToolData.windows_menu ()]
@


1.44
log
@[Bug #30068]
Making Break/Trace manager top level tool.
@
text
@d4 4
d601 1
a601 3
	(pushButtons ["clear_def", "abandon", "previous_def", "next_def"]) @@
	[Menus.SEPARATOR] @@ 
	(pushButtons ["edit_error"])
@


1.43
log
@[Bug #20033]
Banner only displayed now if SaveImage.show_banner is true.
@
text
@d4 4
d375 1
d398 1
d406 3
a408 2
	       Debugger_Window.ToolData
  sharing type Menus.Widget = ToolData.Widget = 
d434 2
a435 1
     ("contextWindow", ContextHistory.create, ToolData.ALL)]
d774 3
a776 3
      MLWorks.IO.output
	(MLWorks.IO.terminal_out, "Graphics interface problem: "^s^"\n")
end;
@


1.42
log
@[Bug #20023]
Set Capi.evaluating to false when loading image.
@
text
@d4 4
d431 2
d647 1
a647 2
	   fn s => MLWorks.IO.output (MLWorks.IO.messages, s),
	   false)
d692 3
a694 2
	(MLWorks.IO.output
	   (MLWorks.IO.messages, Version.versionString () ^ "\n");
@


1.41
log
@Implementing toolbar on Windows.
@
text
@d4 3
d727 1
a727 2
        (
         Capi.Layout.lay_out
d750 3
@


1.40
log
@Implementing single menu bar on Windows.
@
text
@d4 3
d470 1
a470 1
      val interrupt_button = Capi.make_managed_widget ("interruptButton", Capi.Button, mainWindow,[])
d712 10
d724 1
a724 1
        (Menus.make_menus(menuBar, menuspec, true (* ie. IS the podium *) );
d731 2
a732 1
          [Capi.Layout.FIXED interrupt_button,
d744 1
a747 1
         Capi.register_interrupt_widget interrupt_button;
@


1.39
log
@[Bug #1990]
Version.version_string is now Version.versionString, and a function instead
of a constant.
@
text
@d4 5
a468 2
      val label = Capi.make_managed_widget ("label", Capi.Label, mainWindow,[])

d545 6
a550 3
      val file_menu =
	[Menus.PUSH
           ("save",
d558 1
a558 2
         Menus.PUSH
           ("saveAs",
d564 2
a565 5
	 Menus.SEPARATOR,
	 Menus.PUSH ("saveImage", save_image, fn _ => true),
	 Menus.SEPARATOR,
         Menus.PUSH
	   ("exit",
d568 1
a568 1
	    fn _ => not (!Capi.evaluating))]
d570 16
a585 2
      val menuspec =
	[Menus.CASCADE ("file", file_menu, fn _ => true),
d596 17
a612 5
             tail = []}),
 	 GuiUtils.setup_menu
	   (mainWindow, get_context, user_preferences,get_user_context_options),
         GuiUtils.paths_menu mainWindow,
	 GuiUtils.breakpoints_menu mainWindow,
d614 11
a624 1
         ToolData.windows_menu ()]
d711 1
a711 1
        (Menus.make_submenus(menuBar,menuspec);
d719 1
a719 1
           Capi.Layout.FIXED label,
@


1.39.1.1
log
@branched from 1.39
@
text
@a3 5
 * Revision 1.39  1997/03/27  14:48:15  daveb
 * [Bug #1990]
 * Version.version_string is now Version.versionString, and a function instead
 * of a constant.
 *
@


1.39.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a3 3
 * Revision 1.39.1.1  1997/05/12  10:31:20  hope
 * branched from 1.39
 *
@


1.39.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a3 3
 * Revision 1.39.1.1  1997/05/12  10:31:20  hope
 * branched from 1.39
 *
@


1.39.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a3 3
 * Revision 1.39.1.1  1997/05/12  10:31:20  hope
 * branched from 1.39
 *
@


1.39.1.1.1.2
log
@[Bug #20074]
Improving license dialog (part of merge).
@
text
@a3 3
 * Revision 1.39.1.1.1.1  1997/07/28  18:17:12  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
d708 1
a708 2
	(* Check that this also works on Unix *)
	Capi.destroy applicationShell
@


1.39.1.1.1.3
log
@[Bug #30191]
Removed delivery from Student Edition.
@
text
@a3 4
 * Revision 1.39.1.1.1.2  1997/08/05  09:29:54  johnh
 * [Bug #20074]
 * Improving license dialog (part of merge).
 *
d613 21
d707 2
a708 1
         (Ml_Debugger.with_debugger_type debugger_type) mainLoop;
@


1.39.1.1.1.3.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a3 4
 * Revision 1.39.1.1.1.3  1997/08/06  18:38:40  daveb
 * [Bug #30191]
 * Removed delivery from Student Edition.
 *
@


1.38
log
@[Bug #1989]
Removing exn_name_string (giving functionality to exn_name).
@
text
@d4 4
d644 1
a644 1
	   (MLWorks.IO.messages, Version.version_string ^ "\n");
@


1.37
log
@[Bug #1677]
adding new access field to currentIO record.
@
text
@d4 4
d658 1
a658 1
                      MLWorks.Internal.Value.exn_name_string (MLWorks.Internal.Value.exn_name exn) ^
@


1.36
log
@[Bug #1796]
Corrected a bug introduced by the previous change: mainWindow must be
revealed before calling initialize_application_shell.
@
text
@d4 5
d434 4
a437 1
                close=fn()=>()}}
@


1.36.4.1
log
@branched from 1.36
@
text
@a3 5
 * Revision 1.36  1996/11/20  18:46:09  daveb
 * [Bug #1796]
 * Corrected a bug introduced by the previous change: mainWindow must be
 * revealed before calling initialize_application_shell.
 *
@


1.36.4.2
log
@Added make_podium_toolbar call.
@
text
@a3 3
 * Revision 1.36.4.1  1996/12/18  09:39:01  hope
 * branched from 1.36
 *
a576 47
      local
	val tooldata = mk_tooldata ()
	val ToolData.TOOLDATA {tools, ...} = tooldata
	fun is_valid writable =
	  let
	    val user_context = get_current_user_context ()
	  in
	    not (UserContext.is_const_context user_context
		 andalso writable = ToolData.WRITABLE)
	  end
        fun copy_tooldata
	  (ToolData.TOOLDATA {args, appdata, current_context, motif_context, tools}) =
       		ToolData.TOOLDATA {args = copy_args args, appdata = appdata,
		current_context = current_context,
		motif_context = motif_context, tools = tools}

	(* Only Push Buttons are implemented so far *)
	fun extract_functs_aux [] = []
	  | extract_functs_aux ((Menus.PUSH (s, fun1, fun2))::rest) = 
		(fun1, fun2) :: (extract_functs_aux rest)
	  | extract_functs_aux (a::b) = extract_functs_aux b
	fun extract_functs (Menus.CASCADE (s, push_list, f)) = 
		(extract_functs_aux push_list)
	  | extract_functs _ = []
      in
        val tool_action_list =
          map
            (fn (name,toolfun,writable) => 
		(fn _ => toolfun (copy_tooldata (mk_tooldata ())),
		 fn _ => is_valid writable))
            tools
	val edit_actions = extract_functs (ToolData.edit_menu
           (applicationShell,
            {cut = NONE,
             paste = NONE,
             copy = SOME
	       (fn _ => Capi.clipboard_set
			  (message, Capi.Text.get_selection message)),
             delete = NONE,
	     selection_made = fn _ => Capi.Text.get_selection message <> "",
             edit_possible = fn _ => false,
             tail = []}))
	val breaktrace_actions = extract_functs (GuiUtils.breakpoints_menu mainWindow)
	val action_list = edit_actions @@ tool_action_list @@ breaktrace_actions
        val toolbar = Capi.make_podium_toolbar(mainWindow, action_list)
      end

d669 1
a669 2
          [Capi.Layout.FIXED toolbar,
	   Capi.Layout.FIXED interrupt_button,
@


1.36.3.1
log
@branched from 1.36
@
text
@a3 5
 * Revision 1.36  1996/11/20  18:46:09  daveb
 * [Bug #1796]
 * Corrected a bug introduced by the previous change: mainWindow must be
 * revealed before calling initialize_application_shell.
 *
@


1.36.3.1.1.1
log
@branched from 1.36.3.1
@
text
@a3 3
 * Revision 1.36.3.1  1996/12/17  17:45:02  hope
 * branched from 1.36
 *
@


1.36.2.1
log
@branched from 1.36
@
text
@a3 5
 * Revision 1.36  1996/11/20  18:46:09  daveb
 * [Bug #1796]
 * Corrected a bug introduced by the previous change: mainWindow must be
 * revealed before calling initialize_application_shell.
 *
@


1.36.1.1
log
@branched from 1.36
@
text
@a3 5
 * Revision 1.36  1996/11/20  18:46:09  daveb
 * [Bug #1796]
 * Corrected a bug introduced by the previous change: mainWindow must be
 * revealed before calling initialize_application_shell.
 *
@


1.35
log
@Added splash screen.
@
text
@d4 3
a667 4
	 
	 (*This should be done by make_main_subwindows *)
         Capi.initialize_application_shell applicationShell;
	 Capi.hide mainWindow;
d669 7
d677 1
a677 1
         (* Xm.Widget.register applicationShell; *)
@


1.34
log
@Revised licensing scheme to allow registration-style licensing.
@
text
@d4 3
a666 1
         Capi.reveal mainWindow;
d668 3
@


1.34.1.1
log
@branched from 1.34
@
text
@a3 3
 * Revision 1.34  1996/11/12  11:45:33  daveb
 * Revised licensing scheme to allow registration-style licensing.
 *
@


1.34.1.1.1.1
log
@branched from 1.34.1.1
@
text
@a3 3
 * Revision 1.34.1.1  1996/11/14  12:45:53  hope
 * branched from 1.34
 *
@


1.33
log
@Enabling close from control box on top left of window.
@
text
@d4 3
d329 1
d347 1
a579 7
      val _ =
	if not has_controlling_tty then
	  (MLWorks.IO.output (MLWorks.IO.messages, Version.version_string ^ "\n");
	   MLWorks.Internal.Runtime.environment "start license" ())
	else
	  ()

d619 8
d650 28
a677 19
      (Menus.make_submenus(menuBar,menuspec);
       Capi.Layout.lay_out
       (mainWindow,
        [Capi.Layout.MENUBAR menuBar] @@
        (case contextLabel of
           NONE => [Capi.Layout.SPACE]
         | SOME w => [Capi.Layout.FIXED w]) @@
        [Capi.Layout.FIXED interrupt_button,
         Capi.Layout.FIXED label,
         Capi.Layout.FLEX scroll,
         Capi.Layout.SPACE]);
       Capi.reveal mainWindow; (*This should be done by make_main_subwindows *)
       Capi.initialize_application_shell applicationShell;
       (* Xm.Widget.register applicationShell; *)
       set_context_label (get_context ());
       Capi.register_interrupt_widget interrupt_button;
       MLWorks.Deliver.with_delivery_hook delivery_hook
        (Ml_Debugger.with_debugger_type debugger_type) mainLoop)
    end handle Capi.WindowSystemError s => MLWorks.IO.output(MLWorks.IO.terminal_out, "Graphics interface problem: "^s^"\n")
@


1.32
log
@[Bug #1614]
remove toplevel String
@
text
@d4 4
d539 1
a539 1
	    fn _ => true)]
@


1.31
log
@Add license server stuff
@
text
@d4 3
a375 2

  open MLWorks.Option
@


1.30
log
@Adding register_interrupt_window to capi
@
text
@d4 9
d572 2
a573 1
	  MLWorks.IO.output (MLWorks.IO.messages, Version.version_string ^ "\n")
@


1.30.2.1
log
@branched from 1.30
@
text
@a3 3
 * Revision 1.30  1996/09/23  14:01:18  matthew
 * Adding register_interrupt_window to capi
 *
@


1.30.1.1
log
@branched from 1.30
@
text
@a3 3
 * Revision 1.30  1996/09/23  14:01:18  matthew
 * Adding register_interrupt_window to capi
 *
@


1.30.1.2
log
@Add call to initialise license
@
text
@a3 3
 * Revision 1.30.1.1  1996/10/07  16:03:42  hope
 * branched from 1.30
 *
d566 1
a566 2
	  (MLWorks.IO.output (MLWorks.IO.messages, Version.version_string ^ "\n");
	   MLWorks.Internal.Runtime.environment "start license" ())
@


1.29
log
@[Bug #1583]
passing has_controlling_tty to exit_mlworks instead of passed ing false.
@
text
@d4 4
d421 2
d591 2
a592 2
                                                  mk_xinterface_fn,
                                                  ...} = !ShellTypes.shell_data_ref
d636 2
a637 1
        [Capi.Layout.FIXED label,
d644 1
@


1.28
log
@Bug #148.
Passed list a of main Winwindows to exit_dialog function so that they can be killed.
@
text
@d403 2
a404 1
      val applicationShell = Capi.initialize_application ("mlworks","MLWorks")
@


1.27
log
@propagating changes made to the GUI standard IO redirection mechanism
(see __pervasive_library.sml for the StandardIO structure)
@
text
@d4 4
d516 2
a517 1
	    fn _ => ToolData.exit_mlworks (applicationShell, appdata),
@


1.27.1.1
log
@branched from 1.27
@
text
@a3 4
 * Revision 1.27  1996/07/15  12:47:22  andreww
 * propagating changes made to the GUI standard IO redirection mechanism
 * (see __pervasive_library.sml for the StandardIO structure)
 *
@


1.26
log
@Setting up the Gui StandardIO flag, so that system/__primio.sml
can detect the GUI even without a listener.
@
text
@d4 4
d371 1
a371 1
      (* The following few lines set the GuiStandardIO internal flag to 
d378 20
a397 6
      val _ = MLWorks.Internal.GuiStandardIO.setCurrentWindow
        {output_fun = fn s:string => (),
         input_fun = fn () => "",
         eof_flag = ref false,
         buffer_pos = ref 0,
         buffer_data = ref ""}
d556 20
a575 11
        (fn () => MLWorks.Internal.GuiStandardIO.inDeliveredImage
	(fn () => MLWorks.IO.with_standard_output
          MLWorks.IO.terminal_out
          (fn () =>
           MLWorks.IO.with_standard_error
           MLWorks.IO.terminal_out
           (fn () =>
            MLWorks.IO.with_standard_input
            MLWorks.IO.terminal_in
            (fn () => deliverer args))))) ()
         
d617 16
a632 16
      Menus.make_submenus(menuBar,menuspec);
      Capi.Layout.lay_out
      (mainWindow,
       [Capi.Layout.MENUBAR menuBar] @@
       (case contextLabel of
          NONE => [Capi.Layout.SPACE]
        | SOME w => [Capi.Layout.FIXED w]) @@
       [Capi.Layout.FIXED label,
        Capi.Layout.FLEX scroll,
        Capi.Layout.SPACE]);
      Capi.reveal mainWindow; (* This should be done by make_main_subwindows *)
      Capi.initialize_application_shell applicationShell;
      (* Xm.Widget.register applicationShell; *)
      set_context_label (get_context ());
      MLWorks.Deliver.with_delivery_hook delivery_hook
        (Ml_Debugger.with_debugger_type debugger_type) mainLoop
@


1.25
log
@The Interrupt exception is no longer at top level.
@
text
@d4 3
d366 15
d538 11
a548 10
	MLWorks.IO.with_standard_output
	MLWorks.IO.terminal_out
	(fn () =>
	 MLWorks.IO.with_standard_error
	 MLWorks.IO.terminal_out
	 (fn () =>
	  MLWorks.IO.with_standard_input
	  MLWorks.IO.terminal_in
	  (fn () => deliverer args)))

@


1.24
log
@DebuggerWindow.make_debugger_window now returns a clean-up function to call
at the end of each evaluation.
@
text
@d4 4
d554 1
a554 1
            Interrupt => true	(* interrupt, continue X interface *)
@


1.23
log
@Added Save Image menu entry.
@
text
@d4 3
d495 4
d501 1
a501 2
	  (Debugger_Window.make_debugger_window
	     (applicationShell, "MLWorks Debugger", mk_tooldata ()),
d560 1
@


1.22
log
@Improvng handling of uncaught exceptions at top level
@
text
@d4 3
d298 1
d315 1
d336 1
d435 12
d464 2
@


1.21
log
@Update wrt MLWorks.Debugger -> MLWorks.Internal.Debugger change.
@
text
@d4 3
d312 2
d500 18
d528 2
a529 1
              (MLWorks.IO.output(MLWorks.IO.terminal_out,
d532 2
a533 2
                      "\nreached top level -- restarting loop\n");
              MLWorks.Internal.Debugger.break "SYSTEM ERROR";
@


1.20
log
@Reorganised menus to include File menu.
@
text
@d4 3
d509 1
a509 1
              MLWorks.Debugger.break "SYSTEM ERROR";
@


1.19
log
@Add delivery wrapper around start_x_interface
@
text
@d4 3
d329 2
d361 1
a361 1
	of MLWorks.Option.SOME w =>
d370 1
a370 1
	|  MLWorks.Option.NONE => ()
d415 3
d419 24
a442 1
        UserContext.get_user_options (GuiUtils.get_user_context (get_context ()))
d445 14
a458 6
	[ToolData.application_works_menu
	   (mk_tooldata,
	    fn () => ToolData.exit_mlworks (applicationShell, appdata),
	    fn () => true,
	    fn () => GuiUtils.get_user_context (get_context ())),
 	 GuiUtils.setup_menu (mainWindow, get_context, user_preferences,get_user_context_options),
a459 9
	 GuiUtils.context_menu
	   (* This won't do the desired thing under full_menus, but we
	      want the Save functionality for the released version. *)
	   {set_state = fn _ => (),
	    get_context = get_context,
	    writable = GuiUtils.WRITABLE,
	    applicationShell = applicationShell,
	    shell = applicationShell,
	    user_preferences = user_preferences},
d461 1
d518 2
a519 2
          MLWorks.Option.NONE => [Capi.Layout.SPACE]
        | MLWorks.Option.SOME w => [Capi.Layout.FIXED w]) @@
@


1.18
log
@String functions explode, implode, chr and ord now only available from String
io functions and types
instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
now only available from MLWorks.IO
@
text
@d4 6
d450 11
d496 2
a497 1
      Ml_Debugger.with_debugger_type debugger_type mainLoop
@


1.17
log
@Adding Paths menu
@
text
@d4 3
d433 1
a433 1
	   fn s => output (MLWorks.IO.messages, s),
d440 1
a440 1
	  output (MLWorks.IO.messages, Version.version_string ^ "\n")
d454 1
a454 1
              (output(MLWorks.IO.terminal_out,
d480 1
a480 1
    end handle Capi.WindowSystemError s => output(MLWorks.IO.terminal_out, "Graphics interface problem: "^s^"\n")
@


1.16
log
@Adding extra params to setup_menu
@
text
@d4 3
d411 1
@


1.15
log
@Added context menu, and changed names of break and trace buttons.
@
text
@d4 3
d377 1
a377 1
	     GuiUtils.get_user_context (get_context ()),
d398 3
d407 1
a407 1
 	 GuiUtils.setup_menu (mainWindow, get_context, user_preferences),
@


1.14
log
@Removed evaluator from tools menu.  Moved Windows menu to correct position.
@
text
@d4 3
a394 5
      fun select_context user_context =
        (set_context_label user_context;
         ToolData.set_current
           (current_context, context_key, user_options, user_context))

d402 9
@


1.13
log
@Removing inspector from top level
@
text
@d4 3
a265 1
require "evaluator";
a280 1
  structure Evaluator : EVALUATOR
d288 1
a288 1
	       Evaluator.ToolData = ContextHistory.ToolData =
a311 1
     ("evaluator", Evaluator.create, ToolData.WRITABLE),
a402 1
         ToolData.windows_menu (),
d404 2
a405 1
	 GuiUtils.breakpoints_menu mainWindow]
@


1.12
log
@Removed File Tool.
@
text
@d4 3
a260 1
require "inspector_tool";
a276 1
  structure InspectorTool : INSPECTORTOOL
d285 1
a285 1
	       InspectorTool.ToolData = CompilationManager.ToolData =
a297 1
  sharing type InspectorTool.Type = Ml_Debugger.ValuePrinter.Type
d315 1
a315 2
     ("contextWindow", ContextHistory.create, ToolData.ALL),
     ("inspector", InspectorTool.create, ToolData.ALL)]
@


1.11
log
@Added project tool.
@
text
@d4 3
a259 1
require "fileselect";
a275 1
  structure FileSelect : FILE_SELECT
d285 1
a285 1
	       BrowserTool.ToolData = FileSelect.ToolData =
d288 1
a288 1
  sharing type Menus.Widget = ToolData.Widget =
a311 1
     ("fileBrowser", FileSelect.create, ToolData.WRITABLE),
@


1.10
log
@Changing interface to tool_data
@
text
@d4 3
d261 1
d276 1
d283 1
a283 1
	       InspectorTool.ToolData =
d312 1
@


1.9
log
@Adding windows menu
@
text
@d4 3
d393 1
a393 1
	[ToolData.works_menu
@


1.8
log
@Type of setup_menu has changed.
@
text
@d4 3
d395 1
@


1.7
log
@Changing top level window initialization
@
text
@d4 3
d351 2
d360 1
a360 1
	     GuiUtils.get_user_context (ToolData.get_current current_context),
d374 1
a374 1
	   motif_context = ToolData.get_current current_context,
d391 3
a393 9
	    fn () => GuiUtils.get_user_context
		       (ToolData.get_current current_context)),
 	 GuiUtils.setup_menu (mainWindow, user_preferences),
         GuiUtils.context_menu
	   {set_state = select_context,
	    get_context = fn _ => ToolData.get_current current_context,
	    writable = GuiUtils.ALL,
	    applicationShell = applicationShell,
	    user_preferences = user_preferences}]
d446 1
a446 1
      set_context_label (ToolData.get_current current_context);
@


1.6
log
@Using make_nonml_scrolled_text
@
text
@d4 3
d445 1
a445 1
      Capi.initialize applicationShell;
@


1.5
log
@Renaming layout constructors
@
text
@d4 3
d317 1
a317 1
      val (scroll,message) = Capi.make_scrolled_text ("message",mainWindow,[])
d417 1
a417 1
          | ShellTypes.DebuggerTrapped => true	(* continue X interface *)
@


1.4
log
@Changes to make_main_subwindows
@
text
@d4 3
d393 1
a393 1
	     (applicationShell, "debugger", mk_tooldata ()),
a427 1
      Capi.manage mainWindow;
d434 3
a436 3
        | MLWorks.Option.SOME w => [Capi.Layout.OTHER w]) @@
       [Capi.Layout.OTHER label,
        Capi.Layout.TEXT scroll,
d438 2
a439 4
      Capi.manage menuBar;
      Capi.manage label;
      Capi.manage message;
      Capi.realize applicationShell;
d443 1
a443 1
    end handle Capi.WindowSystemError s => output(std_out, "Can't start graphics interface: "^s^"\n")
@


1.3
log
@Adding make_buttons function to capi
@
text
@d4 3
d425 1
@


1.2
log
@Moved capi etc. to gui
@
text
@d4 3
d422 1
d424 2
a425 1
      ([Capi.Layout.MENUBAR menuBar] @@
d430 1
a430 1
        Capi.Layout.OTHER scroll,
a431 1
      Menus.make_submenus(menuBar,menuspec);
@


1.1
log
@new unit
New unit
@
text
@d4 4
a221 2
require "../library/capi";
require "../library/menus";
d223 2
@
