head	1.22;
access;
symbols
	MLW_daveb_inline_1_4_99:1.22.4
	MLWorks_21c0_1999_03_25:1.22
	MLWorks_20c1_1998_08_20:1.22
	MLWorks_20c0_1998_08_04:1.22
	MLWorks_20b2c2_1998_06_19:1.22
	MLWorks_20b2_Windows_1998_06_12:1.22
	MLWorks_20b1c1_1998_05_07:1.22
	MLWorks_20b0_1998_04_07:1.22
	MLWorks_20b0_1998_03_20:1.22
	MLWorks_20m2_1998_02_16:1.22
	MLWorks_20m1_1997_10_23:1.22
	MLWorks_11r1:1.22.1.1.1.1.1
	MLWorks_workspace_97:1.22.3
	MLWorks_dt_wizard:1.22.2
	MLWorks_11c0_1997_09_09:1.22.1.1.1.1
	MLWorks_10r3:1.22.1.1.3
	MLWorks_10r2_551:1.22.1.1.2
	MLWorks_11:1.22.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.22.1.1
	MLWorks_20m0_1997_06_20:1.22
	MLWorks_1_0_r2c2_1997_06_14:1.22.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.22.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.22.1
	MLWorks_BugFix_1997_04_24:1.22
	MLWorks_1_0_r2_Win32_1997_04_11:1.22
	MLWorks_1_0_r2_Unix_1997_04_04:1.22
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.21.6.1.1
	MLWorks_gui_1996_12_18:1.21.7
	MLWorks_1_0_Win32_1996_12_17:1.21.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.21.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.21.4.1
	MLWorks_1_0_Irix_1996_11_28:1.21.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.21.5
	MLWorks_1_0_Unix_1996_11_14:1.21.4
	MLWorks_Open_Beta2_1996_10_11:1.21.3
	MLWorks_License_dev:1.21.2
	MLWorks_1_open_beta_1996_09_13:1.21.1
	MLWorks_Open_Beta_1996_08_22:1.21
	MLWorks_Beta_1996_07_02:1.21
	MLWorks_Beta_1996_06_07:1.21
	MLWorks_Beta_1996_06_06:1.21
	MLWorks_Beta_1996_06_05:1.21
	MLWorks_Beta_1996_06_03:1.21
	MLWorks_Beta_1996_05_31:1.21
	MLWorks_Beta_1996_05_30:1.21
	ML_beta_release_12/08/94:1.13
	ML_beta_release_03/08/94:1.13
	ML_revised_beta_release_25/05/94:1.13
	ML_final_beta_release_02/03/94:1.13
	mlworks-28-01-1994:1.13
	Release:1.12
	mlworks-beta-01-09-1993:1.12
	MLWorks-1-0-4-29/01/1993:1.9
	MLWorks-1-0-3-21/12/1992:1.9
	MLWorks-1-0-2-15/12/1992:1.9
	MLWorks-1-0-1-04/12/1992:1.9
	checkpoint_17_08_92:1.5;
locks; strict;
comment	@ * @;


1.22
date	97.01.03.13.55.23;	author matthew;	state Exp;
branches
	1.22.1.1
	1.22.2.1
	1.22.3.1
	1.22.4.1;
next	1.21;

1.21
date	96.02.23.17.23.15;	author jont;	state Exp;
branches
	1.21.1.1
	1.21.2.1
	1.21.3.1
	1.21.4.1
	1.21.5.1
	1.21.6.1
	1.21.7.1;
next	1.20;

1.20
date	96.02.23.17.23.15;	author jont;	state Exp;
branches;
next	1.19;

1.19
date	96.01.31.15.57.51;	author jont;	state Exp;
branches;
next	1.18;

1.18
date	95.12.20.13.02.40;	author jont;	state Exp;
branches;
next	1.17;

1.17
date	95.08.24.15.57.12;	author daveb;	state Exp;
branches;
next	1.16;

1.16
date	95.07.25.13.00.20;	author jont;	state Exp;
branches;
next	1.15;

1.15
date	95.02.13.13.32.49;	author matthew;	state Exp;
branches;
next	1.14;

1.14
date	94.07.28.12.49.34;	author matthew;	state Exp;
branches;
next	1.13;

1.13
date	94.01.19.10.42.35;	author matthew;	state Exp;
branches;
next	1.12;

1.12
date	93.08.18.16.35.31;	author jont;	state Exp;
branches
	1.12.1.1;
next	1.11;

1.11
date	93.07.30.12.24.25;	author nosa;	state Exp;
branches;
next	1.10;

1.10
date	93.07.14.13.07.07;	author jont;	state Exp;
branches;
next	1.9;

1.9
date	92.12.01.11.50.22;	author daveb;	state Exp;
branches;
next	1.8;

1.8
date	92.10.08.10.11.20;	author daveb;	state Exp;
branches;
next	1.7;

1.7
date	92.09.01.11.29.20;	author clive;	state Exp;
branches;
next	1.6;

1.6
date	92.08.26.14.43.48;	author jont;	state Exp;
branches;
next	1.5;

1.5
date	92.08.07.11.31.27;	author clive;	state Exp;
branches;
next	1.4;

1.4
date	92.08.04.14.55.23;	author davidt;	state Exp;
branches;
next	1.3;

1.3
date	92.06.29.09.19.52;	author clive;	state Exp;
branches;
next	1.2;

1.2
date	92.05.13.09.30.59;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	92.04.07.19.35.10;	author jont;	state Exp;
branches;
next	;

1.12.1.1
date	93.08.18.16.35.31;	author jont;	state Exp;
branches;
next	;

1.21.1.1
date	96.09.13.11.14.30;	author hope;	state Exp;
branches;
next	;

1.21.2.1
date	96.10.07.16.04.56;	author hope;	state Exp;
branches;
next	;

1.21.3.1
date	96.10.17.11.23.10;	author hope;	state Exp;
branches;
next	;

1.21.4.1
date	96.11.14.12.47.29;	author hope;	state Exp;
branches
	1.21.4.1.1.1;
next	;

1.21.4.1.1.1
date	96.11.28.14.59.01;	author hope;	state Exp;
branches;
next	;

1.21.5.1
date	96.11.22.18.07.32;	author hope;	state Exp;
branches;
next	;

1.21.6.1
date	96.12.17.17.46.16;	author hope;	state Exp;
branches
	1.21.6.1.1.1;
next	;

1.21.6.1.1.1
date	97.02.24.11.35.52;	author hope;	state Exp;
branches;
next	;

1.21.7.1
date	96.12.18.09.40.14;	author hope;	state Exp;
branches;
next	;

1.22.1.1
date	97.05.12.10.32.35;	author hope;	state Exp;
branches
	1.22.1.1.1.1
	1.22.1.1.2.1
	1.22.1.1.3.1;
next	;

1.22.1.1.1.1
date	97.07.28.18.18.19;	author daveb;	state Exp;
branches
	1.22.1.1.1.1.1.1;
next	;

1.22.1.1.1.1.1.1
date	97.10.07.11.43.19;	author jkbrook;	state Exp;
branches;
next	;

1.22.1.1.2.1
date	97.09.08.17.11.53;	author daveb;	state Exp;
branches;
next	;

1.22.1.1.3.1
date	97.09.09.14.07.29;	author daveb;	state Exp;
branches;
next	;

1.22.2.1
date	97.09.10.19.22.20;	author brucem;	state Exp;
branches;
next	;

1.22.3.1
date	97.09.11.20.53.36;	author daveb;	state Exp;
branches;
next	;

1.22.4.1
date	99.04.01.17.56.10;	author daveb;	state Exp;
branches;
next	;


desc
@Utilities for _mir_cg
@


1.22
log
@Allowing more than one tail entry points
@
text
@(* mir_utils.sml the signature *)
(*
$Log: mir_utils.sml,v $
 * Revision 1.21  1996/02/23  17:23:15  jont
 * newmap becomes map, NEWMAP becomes MAP
 *
 * Revision 1.19  1996/01/31  15:57:51  jont
 * Add functions for saving raw 32 bit values as boxed values
 *
Revision 1.18  1995/12/20  13:02:40  jont
Add extra field to procedure_parameters to contain old (pre register allocation)
spill sizes. This is for the i386, where spill assignment is done in the backend

Revision 1.17  1995/08/24  15:57:12  daveb
Added new types for different sizes of int, words, and reals.

Revision 1.16  1995/07/25  13:00:20  jont
Add word conversion functions

Revision 1.15  1995/02/13  13:32:49  matthew
Removed NewMap from Debugger_Types

Revision 1.14  1994/07/28  12:49:34  matthew
Simplified do_app
Added do_multi_app

Revision 1.13  1994/01/19  10:42:35  matthew
Added ConvertInt exception to MirUtils

Revision 1.13  1994/01/19  10:42:35  matthew
Added ConvertInt exception

Revision 1.12  1993/08/18  16:35:31  jont
Moved some more functions here from _mir_cg.sml

Revision 1.11  1993/07/30  12:24:25  nosa
Changed type of new_do_app for local and closure variable
inspection in the debugger;
structure Option.

Revision 1.10  1993/07/14  13:07:07  jont
Added convert_long_int

Revision 1.9  1992/12/01  11:50:22  daveb
Changes to propagate compiler options as parameters instead of references.

Revision 1.8  1992/10/08  10:11:20  daveb
Formatted so that I could understand what the hell was going on!

Revision 1.7  1992/09/01  11:29:20  clive
Added switches for self call optimisation

Revision 1.6  1992/08/26  14:43:48  jont
Removed some redundant structures and sharing

Revision 1.5  1992/08/07  11:31:27  clive
Added a flag to turn off tail-call optimisation

Revision 1.4  1992/08/04  14:55:23  davidt
Added extra sharing constraints.

Revision 1.3  1992/06/29  09:19:52  clive
Added type annotation information at application points

Revision 1.2  1992/05/13  09:30:59  jont
Changed to use augmented lambda calculus, and sexpressions to avoid
duplicated append operations.

Revision 1.1  1992/04/07  19:35:10  jont
Initial revision

Copyright (c) 1991 Harlequin Ltd.
*)

require "../utils/sexpr";
require "../utils/map";
require "../utils/diagnostic";
require "../lambda/auglambda";
require "mir_env";

signature MIR_UTILS = sig
  structure Sexpr : SEXPR
  structure Map : MAP
  structure Diagnostic : DIAGNOSTIC
  structure Mir_Env : MIR_ENV
  structure AugLambda : AUGLAMBDA

  sharing Mir_Env.LambdaTypes = AugLambda.LambdaTypes

  datatype reg_result =
    INT of Mir_Env.MirTypes.gp_operand |
    REAL of Mir_Env.MirTypes.fp_operand

  datatype cg_result =
    ONE of reg_result |
    LIST of reg_result list

  val cg_lvar : Mir_Env.LambdaTypes.LVar *
 		Mir_Env.Lambda_Env *
	        Mir_Env.Closure_Env *
		int ->
                (reg_result * Mir_Env.MirTypes.opcode list) * int * bool

  val cg_lvar_fn : Mir_Env.LambdaTypes.LVar *
		   Mir_Env.Lambda_Env *
		   Mir_Env.Closure_Env *
		   int ->
                   reg_result * Mir_Env.MirTypes.opcode list

  val combine : ((Mir_Env.MirTypes.opcode list Sexpr.Sexpr *
		  Mir_Env.MirTypes.block list *
		  Mir_Env.MirTypes.tag option *
		  Mir_Env.MirTypes.opcode list Sexpr.Sexpr
		 ) *
		 Mir_Env.MirTypes.value list *
		 Mir_Env.MirTypes.procedure list list
		) *
		((Mir_Env.MirTypes.opcode list Sexpr.Sexpr *
		  Mir_Env.MirTypes.block list *
		  Mir_Env.MirTypes.tag option *
		  Mir_Env.MirTypes.opcode list Sexpr.Sexpr
		 ) *
		 Mir_Env.MirTypes.value list *
		 Mir_Env.MirTypes.procedure list list
		) ->
		  (Mir_Env.MirTypes.opcode list Sexpr.Sexpr *
		   Mir_Env.MirTypes.block list *
		   Mir_Env.MirTypes.tag option *
		   Mir_Env.MirTypes.opcode list Sexpr.Sexpr
		  ) *
		  Mir_Env.MirTypes.value list *
		  Mir_Env.MirTypes.procedure list list

  val contract_sexpr : Mir_Env.MirTypes.opcode list Sexpr.Sexpr ->
  			 Mir_Env.MirTypes.opcode list

  exception ConvertInt	
  (* Raised if the literal is too large for the compiling machine. *)

  exception Unrepresentable
  (* Raised if the literal is too large for the target machine. *)

  (* The int option argument to the following functions gives the size of the target type,
     where specified by a type constraint in the source. *)
  val convert_int : string * int option -> int

  val convert_long_int :
        AugLambda.LambdaTypes.Ident.SCon * int option -> AugLambda.AugLambdaExp

  val convert_word : string * int option -> int

  val convert_long_word :
        AugLambda.LambdaTypes.Ident.SCon * int option -> AugLambda.AugLambdaExp

  val destruct_2_tuple : Mir_Env.MirTypes.gp_operand ->
			   Mir_Env.MirTypes.gp_operand *
			   Mir_Env.MirTypes.gp_operand *
			   Mir_Env.MirTypes.opcode list

  val get_any_register : reg_result -> Mir_Env.MirTypes.any_register

  val get_real : reg_result ->
    Mir_Env.MirTypes.fp_operand * Mir_Env.MirTypes.opcode list

  val get_word32 :
    reg_result ->
      Mir_Env.MirTypes.gp_operand
    * Mir_Env.MirTypes.opcode list		(* extraction code *)
    * Mir_Env.MirTypes.opcode list		(* code to clean reg *)

  val gp_from_reg : Mir_Env.MirTypes.reg_operand ->
			Mir_Env.MirTypes.gp_operand

  val list_of : int * 'a -> 'a list

  val list_of_tags : int -> Mir_Env.MirTypes.tag list

  val make_closure : 'a list *
                     Mir_Env.LambdaTypes.LVar list *
                     int *
                     int *
                     Mir_Env.Lambda_Env *
                     Mir_Env.Closure_Env *
                     int ->
                     Mir_Env.MirTypes.reg_operand *
                     Mir_Env.MirTypes.opcode list Sexpr.Sexpr *
                     Mir_Env.Closure_Env list

  val do_app : Mir_Env.MirTypes.Debugger_Types.Backend_Annotation *
		 cg_result *
		 ((Mir_Env.MirTypes.opcode list Sexpr.Sexpr *
		   Mir_Env.MirTypes.block list *
		   Mir_Env.MirTypes.tag option *
		   Mir_Env.MirTypes.opcode list Sexpr.Sexpr
		  ) *
		  Mir_Env.MirTypes.value list *
		  Mir_Env.MirTypes.procedure list list
		 ) *
		 cg_result *
		 ((Mir_Env.MirTypes.opcode list Sexpr.Sexpr *
		   Mir_Env.MirTypes.block list *
		   Mir_Env.MirTypes.tag option *
		   Mir_Env.MirTypes.opcode list Sexpr.Sexpr
		  ) *
		  Mir_Env.MirTypes.value list *
		  Mir_Env.MirTypes.procedure list list
		 ) ->
		   cg_result *
		   ((Mir_Env.MirTypes.opcode list Sexpr.Sexpr *
		     Mir_Env.MirTypes.block list *
		     Mir_Env.MirTypes.tag option *
		     Mir_Env.MirTypes.opcode list Sexpr.Sexpr
		    ) *
		    Mir_Env.MirTypes.value list *
		    Mir_Env.MirTypes.procedure list list
		   )

  datatype CallType = 
    LOCAL of Mir_Env.MirTypes.tag * Mir_Env.MirTypes.GC.T list * Mir_Env.MirTypes.FP.T list
  | SAMESET of int (* position in closure *)
  | EXTERNAL

  val do_multi_app : Mir_Env.MirTypes.Debugger_Types.Backend_Annotation *
		     cg_result *
		     ((Mir_Env.MirTypes.opcode list Sexpr.Sexpr *
		       Mir_Env.MirTypes.block list *
		       Mir_Env.MirTypes.tag option *
		       Mir_Env.MirTypes.opcode list Sexpr.Sexpr
		      ) *
		      Mir_Env.MirTypes.value list *
		      Mir_Env.MirTypes.procedure list list
		     ) *
		     cg_result *
		     ((Mir_Env.MirTypes.opcode list Sexpr.Sexpr *
		       Mir_Env.MirTypes.block list *
		       Mir_Env.MirTypes.tag option *
		       Mir_Env.MirTypes.opcode list Sexpr.Sexpr
		      ) *
		      Mir_Env.MirTypes.value list *
		      Mir_Env.MirTypes.procedure list list
		     ) *
		     cg_result *
		     ((Mir_Env.MirTypes.opcode list Sexpr.Sexpr *
		       Mir_Env.MirTypes.block list *
		       Mir_Env.MirTypes.tag option *
		       Mir_Env.MirTypes.opcode list Sexpr.Sexpr
		      ) *
		      Mir_Env.MirTypes.value list *
		      Mir_Env.MirTypes.procedure list list
		     ) *
                     CallType *
		     int *
		     Mir_Env.MirTypes.tag list *
		     bool ->
		       cg_result *
		       ((Mir_Env.MirTypes.opcode list Sexpr.Sexpr *
		         Mir_Env.MirTypes.block list *
			 Mir_Env.MirTypes.tag option *
			 Mir_Env.MirTypes.opcode list Sexpr.Sexpr
			) *
			Mir_Env.MirTypes.value list *
			Mir_Env.MirTypes.procedure list list
		       ) *
		       ((Mir_Env.MirTypes.opcode list Sexpr.Sexpr *
		         Mir_Env.MirTypes.block list *
			 Mir_Env.MirTypes.tag option *
			 Mir_Env.MirTypes.opcode list Sexpr.Sexpr
			) *
			Mir_Env.MirTypes.value list *
			Mir_Env.MirTypes.procedure list list
		       ) *
		       ((Mir_Env.MirTypes.opcode list Sexpr.Sexpr *
		         Mir_Env.MirTypes.block list *
			 Mir_Env.MirTypes.tag option *
			 Mir_Env.MirTypes.opcode list Sexpr.Sexpr
			) *
			Mir_Env.MirTypes.value list *
			Mir_Env.MirTypes.procedure list list
		       )

    val reg_from_gp : Mir_Env.MirTypes.gp_operand ->
			Mir_Env.MirTypes.reg_operand

    val send_to_given_reg : cg_result * Mir_Env.MirTypes.GC.T ->
			      Mir_Env.MirTypes.opcode list

    val send_to_new_reg : cg_result ->
			    Mir_Env.MirTypes.gp_operand *
			    Mir_Env.MirTypes.opcode list

    val send_to_reg : cg_result ->
			Mir_Env.MirTypes.gp_operand *
			Mir_Env.MirTypes.opcode list

    val save_real_to_reg : Mir_Env.MirTypes.fp_operand *
			   Mir_Env.MirTypes.reg_operand ->
			     Mir_Env.MirTypes.opcode list

    val save_word32 : Mir_Env.MirTypes.GC.T ->
      Mir_Env.MirTypes.GC.T * Mir_Env.MirTypes.opcode list

    val save_word32_in_reg : Mir_Env.MirTypes.GC.T * Mir_Env.MirTypes.GC.T ->
      Mir_Env.MirTypes.opcode list

    val tuple_up : reg_result list ->
		     Mir_Env.MirTypes.GC.T * Mir_Env.MirTypes.opcode list

    val tuple_up_in_reg : reg_result list * Mir_Env.MirTypes.GC.T ->
			    Mir_Env.MirTypes.GC.T *
			    Mir_Env.MirTypes.opcode list

    val get_string : {lexp:AugLambda.AugLambdaExp, size:int} -> 
      string Mir_Env.LambdaTypes.Set.Set

    val lift_externals :
      ((string, Mir_Env.LambdaTypes.LVar) Map.map *
       (string, Mir_Env.LambdaTypes.LVar) Map.map *
       (string, Mir_Env.LambdaTypes.LVar) Map.map *
       (string, Mir_Env.LambdaTypes.LVar) Map.map *
       (string, Mir_Env.LambdaTypes.LVar) Map.map) *
      {lexp:AugLambda.AugLambdaExp, size:int} ->
      ((string, Mir_Env.LambdaTypes.LVar) Map.map *
       (string, Mir_Env.LambdaTypes.LVar) Map.map *
       (string, Mir_Env.LambdaTypes.LVar) Map.map *
       (string, Mir_Env.LambdaTypes.LVar) Map.map *
       (string, Mir_Env.LambdaTypes.LVar) Map.map) *
      {lexp:AugLambda.AugLambdaExp, size:int}

    val transform_needed :
      bool * {lexp:AugLambda.AugLambdaExp, size:int} -> bool

    val needs_prim_stringeq : AugLambda.AugLambdaExp -> bool

end
@


1.22.4.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a3 3
 * Revision 1.22  1997/01/03  13:55:23  matthew
 * Allowing more than one tail entry points
 *
@


1.22.3.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a3 3
 * Revision 1.22  1997/01/03  13:55:23  matthew
 * Allowing more than one tail entry points
 *
@


1.22.2.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a3 3
 * Revision 1.22  1997/01/03  13:55:23  matthew
 * Allowing more than one tail entry points
 *
@


1.22.1.1
log
@branched from 1.22
@
text
@a3 3
 * Revision 1.22  1997/01/03  13:55:23  matthew
 * Allowing more than one tail entry points
 *
@


1.22.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a3 3
 * Revision 1.22.1.1  1997/05/12  10:32:35  hope
 * branched from 1.22
 *
@


1.22.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a3 3
 * Revision 1.22.1.1  1997/05/12  10:32:35  hope
 * branched from 1.22
 *
@


1.22.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a3 3
 * Revision 1.22.1.1  1997/05/12  10:32:35  hope
 * branched from 1.22
 *
@


1.22.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a3 3
 * Revision 1.22.1.1.1.1  1997/07/28  18:18:19  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.21
log
@newmap becomes map, NEWMAP becomes MAP
@
text
@d4 3
a77 1
require "../main/pervasives";
d83 1
a83 1
  structure NewMap : MAP
a84 1
  structure Pervasives : PERVASIVES
a89 4
  type bignum

  val biggest_num: bignum

a97 4
  val append_small_exit : Mir_Env.MirTypes.block *
			  Mir_Env.MirTypes.block list ->
	  		    Mir_Env.MirTypes.block list

d102 1
a102 1
	          (reg_result * Mir_Env.MirTypes.opcode list) * int * bool
d108 1
a108 1
	  	     reg_result * Mir_Env.MirTypes.opcode list
d112 1
a112 1
		  Mir_Env.MirTypes.tag MLWorks.Option.option *
d120 1
a120 1
		  Mir_Env.MirTypes.tag MLWorks.Option.option *
d128 1
a128 1
		   Mir_Env.MirTypes.tag MLWorks.Option.option *
d145 1
a145 1
  val convert_int : string * int MLWorks.Option.option -> int
d148 1
a148 1
        AugLambda.LambdaTypes.Ident.SCon * int MLWorks.Option.option -> AugLambda.AugLambdaExp
d150 1
a150 1
  val convert_word : string * int MLWorks.Option.option -> int
d153 1
a153 1
        AugLambda.LambdaTypes.Ident.SCon * int MLWorks.Option.option -> AugLambda.AugLambdaExp
d160 29
d193 1
a193 1
		   Mir_Env.MirTypes.tag MLWorks.Option.option *
d202 1
a202 1
		   Mir_Env.MirTypes.tag MLWorks.Option.option *
d211 1
a211 1
		     Mir_Env.MirTypes.tag MLWorks.Option.option *
d218 4
a221 22
    val exit_block : Mir_Env.MirTypes.block list ->
		       Mir_Env.MirTypes.block MLWorks.Option.option

    val gc_list_positions : int * ('a -> int) * 'a list * int list -> int list

    val get_any_register : reg_result -> Mir_Env.MirTypes.any_register

    val get_real : reg_result ->
		     Mir_Env.MirTypes.fp_operand * Mir_Env.MirTypes.opcode list

    val get_word32 :
      reg_result
      -> Mir_Env.MirTypes.gp_operand
	 * Mir_Env.MirTypes.opcode list		(* extraction code *)
	 * Mir_Env.MirTypes.opcode list		(* code to clean reg *)

    val gp_from_reg : Mir_Env.MirTypes.reg_operand ->
			Mir_Env.MirTypes.gp_operand

    val ident_fn : 'a -> 'a

    val list_of : int * 'a -> 'a list
d223 1
a223 14
    val list_of_tags : int -> Mir_Env.MirTypes.tag list

    val make_closure : 'a list *
		       Mir_Env.LambdaTypes.LVar list *
		       int *
		       int *
		       Mir_Env.Lambda_Env *
		       Mir_Env.Closure_Env *
		       int ->
			 Mir_Env.MirTypes.reg_operand *
			 Mir_Env.MirTypes.opcode list Sexpr.Sexpr *
			 Mir_Env.Closure_Env list

    val new_do_app : Mir_Env.MirTypes.Debugger_Types.Backend_Annotation *
d227 1
a227 1
		       Mir_Env.MirTypes.tag MLWorks.Option.option *
d236 1
a236 1
		       Mir_Env.MirTypes.tag MLWorks.Option.option *
a241 37
		     Mir_Env.MirTypes.tag *
		     (int * Mir_Env.MirTypes.any_register) list *
		     bool *
		     bool *
		     int *
		     int *
		     Mir_Env.MirTypes.tag list *
		     bool *
		     bool *
		     bool ->
		       cg_result *
		       ((Mir_Env.MirTypes.opcode list Sexpr.Sexpr *
		         Mir_Env.MirTypes.block list *
			 Mir_Env.MirTypes.tag MLWorks.Option.option *
			 Mir_Env.MirTypes.opcode list Sexpr.Sexpr
			) *
			Mir_Env.MirTypes.value list *
			Mir_Env.MirTypes.procedure list list
		       ) *
		       ((Mir_Env.MirTypes.opcode list Sexpr.Sexpr *
		         Mir_Env.MirTypes.block list *
			 Mir_Env.MirTypes.tag MLWorks.Option.option *
			 Mir_Env.MirTypes.opcode list Sexpr.Sexpr
			) *
			Mir_Env.MirTypes.value list *
			Mir_Env.MirTypes.procedure list list
		       ) *
		       ((Mir_Env.MirTypes.opcode list Sexpr.Sexpr *
		         Mir_Env.MirTypes.block list *
			 Mir_Env.MirTypes.tag MLWorks.Option.option *
			 Mir_Env.MirTypes.opcode list Sexpr.Sexpr
			) *
			Mir_Env.MirTypes.value list *
			Mir_Env.MirTypes.procedure list list
		       )

    val do_multi_app : Mir_Env.MirTypes.Debugger_Types.Backend_Annotation *
d245 1
a245 1
		       Mir_Env.MirTypes.tag MLWorks.Option.option *
d251 1
a251 13
		     cg_result *
		     ((Mir_Env.MirTypes.opcode list Sexpr.Sexpr *
		       Mir_Env.MirTypes.block list *
		       Mir_Env.MirTypes.tag MLWorks.Option.option *
		       Mir_Env.MirTypes.opcode list Sexpr.Sexpr
		      ) *
		      Mir_Env.MirTypes.value list *
		      Mir_Env.MirTypes.procedure list list
		     ) *
		     Mir_Env.MirTypes.tag *
		     (int * Mir_Env.MirTypes.any_register) list *
		     bool *
		     int *
a253 2
		     bool *
		     bool *
d258 1
a258 1
			 Mir_Env.MirTypes.tag MLWorks.Option.option *
d266 1
a266 1
			 Mir_Env.MirTypes.tag MLWorks.Option.option *
d274 1
a274 1
			 Mir_Env.MirTypes.tag MLWorks.Option.option *
a283 4
    val save_real_to_reg : Mir_Env.MirTypes.fp_operand *
			   Mir_Env.MirTypes.reg_operand ->
			     Mir_Env.MirTypes.opcode list

d295 3
a297 1
    val small_exit_block : Mir_Env.MirTypes.block -> bool
d299 5
a303 3
    val stack_tuple_up_in_reg : reg_result list * Mir_Env.MirTypes.GC.T ->
				  Mir_Env.MirTypes.GC.T *
				  Mir_Env.MirTypes.opcode list
a311 6
    val save_word32 : Mir_Env.MirTypes.GC.T ->
      Mir_Env.MirTypes.GC.T * Mir_Env.MirTypes.opcode list

    val save_word32_in_reg : Mir_Env.MirTypes.GC.T * Mir_Env.MirTypes.GC.T ->
      Mir_Env.MirTypes.opcode list

d316 5
a320 5
      ((string, Mir_Env.LambdaTypes.LVar) NewMap.map *
       (string, Mir_Env.LambdaTypes.LVar) NewMap.map *
       (string, Mir_Env.LambdaTypes.LVar) NewMap.map *
       (string, Mir_Env.LambdaTypes.LVar) NewMap.map *
       (string, Mir_Env.LambdaTypes.LVar) NewMap.map) *
d322 5
a326 5
      ((string, Mir_Env.LambdaTypes.LVar) NewMap.map *
       (string, Mir_Env.LambdaTypes.LVar) NewMap.map *
       (string, Mir_Env.LambdaTypes.LVar) NewMap.map *
       (string, Mir_Env.LambdaTypes.LVar) NewMap.map *
       (string, Mir_Env.LambdaTypes.LVar) NewMap.map) *
a332 2

    val lneeds_prim_stringeq : {lexp:AugLambda.AugLambdaExp, size:int} list -> bool
@


1.21.7.1
log
@branched from 1.21
@
text
@a3 3
 * Revision 1.21  1996/02/23  17:23:15  jont
 * newmap becomes map, NEWMAP becomes MAP
 *
@


1.21.6.1
log
@branched from 1.21
@
text
@a3 3
 * Revision 1.21  1996/02/23  17:23:15  jont
 * newmap becomes map, NEWMAP becomes MAP
 *
@


1.21.6.1.1.1
log
@branched from 1.21.6.1
@
text
@a3 3
 * Revision 1.21.6.1  1996/12/17  17:46:16  hope
 * branched from 1.21
 *
@


1.21.5.1
log
@branched from 1.21
@
text
@a3 3
 * Revision 1.21  1996/02/23  17:23:15  jont
 * newmap becomes map, NEWMAP becomes MAP
 *
@


1.21.4.1
log
@branched from 1.21
@
text
@a3 3
 * Revision 1.21  1996/02/23  17:23:15  jont
 * newmap becomes map, NEWMAP becomes MAP
 *
@


1.21.4.1.1.1
log
@branched from 1.21.4.1
@
text
@a3 3
 * Revision 1.21.4.1  1996/11/14  12:47:29  hope
 * branched from 1.21
 *
@


1.21.3.1
log
@branched from 1.21
@
text
@a3 3
 * Revision 1.21  1996/02/23  17:23:15  jont
 * newmap becomes map, NEWMAP becomes MAP
 *
@


1.21.2.1
log
@branched from 1.21
@
text
@a3 3
 * Revision 1.21  1996/02/23  17:23:15  jont
 * newmap becomes map, NEWMAP becomes MAP
 *
@


1.21.1.1
log
@branched from 1.21
@
text
@a3 3
 * Revision 1.21  1996/02/23  17:23:15  jont
 * newmap becomes map, NEWMAP becomes MAP
 *
@


1.20
log
@newmap becomes map, NEWMAP becomes MAP
@
text
@@


1.19
log
@Add functions for saving raw 32 bit values as boxed values
@
text
@d4 3
d73 1
a73 1
require "../utils/newmap";
d81 1
a81 1
  structure NewMap : NEWMAP
d382 5
a386 5
      ((string, Mir_Env.LambdaTypes.LVar) NewMap.T *
       (string, Mir_Env.LambdaTypes.LVar) NewMap.T *
       (string, Mir_Env.LambdaTypes.LVar) NewMap.T *
       (string, Mir_Env.LambdaTypes.LVar) NewMap.T *
       (string, Mir_Env.LambdaTypes.LVar) NewMap.T) *
d388 5
a392 5
      ((string, Mir_Env.LambdaTypes.LVar) NewMap.T *
       (string, Mir_Env.LambdaTypes.LVar) NewMap.T *
       (string, Mir_Env.LambdaTypes.LVar) NewMap.T *
       (string, Mir_Env.LambdaTypes.LVar) NewMap.T *
       (string, Mir_Env.LambdaTypes.LVar) NewMap.T) *
@


1.18
log
@Add extra field to procedure_parameters to contain old (pre register allocation)
spill sizes. This is for the i386, where spill assignment is done in the backend
@
text
@d4 4
d368 6
@


1.17
log
@Added new types for different sizes of int, words, and reals.
@
text
@d4 3
d112 1
a112 1
		  Mir_Env.MirTypes.tag Mir_Env.MirTypes.Option.opt *
d120 1
a120 1
		  Mir_Env.MirTypes.tag Mir_Env.MirTypes.Option.opt *
d128 1
a128 1
		   Mir_Env.MirTypes.tag Mir_Env.MirTypes.Option.opt *
d164 1
a164 1
		   Mir_Env.MirTypes.tag Mir_Env.MirTypes.Option.opt *
d173 1
a173 1
		   Mir_Env.MirTypes.tag Mir_Env.MirTypes.Option.opt *
d182 1
a182 1
		     Mir_Env.MirTypes.tag Mir_Env.MirTypes.Option.opt *
d190 1
a190 1
		       Mir_Env.MirTypes.block Mir_Env.MirTypes.Option.opt
d229 1
a229 1
		       Mir_Env.MirTypes.tag Mir_Env.MirTypes.Option.opt *
d238 1
a238 1
		       Mir_Env.MirTypes.tag Mir_Env.MirTypes.Option.opt *
d257 1
a257 1
			 Mir_Env.MirTypes.tag Mir_Env.MirTypes.Option.opt *
d265 1
a265 1
			 Mir_Env.MirTypes.tag Mir_Env.MirTypes.Option.opt *
d273 1
a273 1
			 Mir_Env.MirTypes.tag Mir_Env.MirTypes.Option.opt *
d284 1
a284 1
		       Mir_Env.MirTypes.tag Mir_Env.MirTypes.Option.opt *
d293 1
a293 1
		       Mir_Env.MirTypes.tag Mir_Env.MirTypes.Option.opt *
d311 1
a311 1
			 Mir_Env.MirTypes.tag Mir_Env.MirTypes.Option.opt *
d319 1
a319 1
			 Mir_Env.MirTypes.tag Mir_Env.MirTypes.Option.opt *
d327 1
a327 1
			 Mir_Env.MirTypes.tag Mir_Env.MirTypes.Option.opt *
@


1.16
log
@Add word conversion functions
@
text
@d4 3
d79 4
d134 2
a135 2
  exception ConvertInt
  val convert_int : string -> int
d137 2
a138 1
  val convert_long_int : AugLambda.LambdaTypes.Ident.SCon -> AugLambda.AugLambdaExp
d140 3
a142 1
  val convert_word : string -> int
d144 7
a150 1
  val convert_long_word : AugLambda.LambdaTypes.Ident.SCon -> AugLambda.AugLambdaExp
d195 6
@


1.15
log
@Removed NewMap from Debugger_Types
@
text
@d4 3
d131 4
@


1.14
log
@Simplified do_app
Added do_multi_app
@
text
@d4 4
d57 1
d65 1
d337 5
a341 5
      ((string, Mir_Env.LambdaTypes.LVar)AugLambda.Debugger_Types.NewMap.T *
       (string, Mir_Env.LambdaTypes.LVar)AugLambda.Debugger_Types.NewMap.T *
       (string, Mir_Env.LambdaTypes.LVar)AugLambda.Debugger_Types.NewMap.T *
       (string, Mir_Env.LambdaTypes.LVar)AugLambda.Debugger_Types.NewMap.T *
       (string, Mir_Env.LambdaTypes.LVar)AugLambda.Debugger_Types.NewMap.T) *
d343 5
a347 5
      ((string, Mir_Env.LambdaTypes.LVar)AugLambda.Debugger_Types.NewMap.T *
       (string, Mir_Env.LambdaTypes.LVar)AugLambda.Debugger_Types.NewMap.T *
       (string, Mir_Env.LambdaTypes.LVar)AugLambda.Debugger_Types.NewMap.T *
       (string, Mir_Env.LambdaTypes.LVar)AugLambda.Debugger_Types.NewMap.T *
       (string, Mir_Env.LambdaTypes.LVar)AugLambda.Debugger_Types.NewMap.T) *
@


1.13
log
@Added ConvertInt exception to MirUtils
@
text
@d5 3
d128 1
a128 1
    val do_app : Mir_Env.MirTypes.Debugger_Types.Backend_Annotation *
d146 1
a146 5
		 ) *
		 Mir_Env.MirTypes.tag *
		 int *
		 int *
		 Mir_Env.MirTypes.tag list ->
d206 2
d210 52
a263 1
		     Mir_Env.MirTypes.tag *
@


1.12
log
@Moved some more functions here from _mir_cg.sml
@
text
@d4 6
d115 1
@


1.12.1.1
log
@Fork for bug fixing
@
text
@a3 3
Revision 1.12  1993/08/18  16:35:31  jont
Moved some more functions here from _mir_cg.sml

@


1.11
log
@Changed type of new_do_app for local and closure variable
inspection in the debugger;
structure Option.
@
text
@d4 5
d268 24
a291 2
  val get_string : Mir_Env.LambdaTypes.LambdaExp -> 
    string Mir_Env.LambdaTypes.Set.Set
@


1.10
log
@Added convert_long_int
@
text
@d4 3
d79 1
a79 1
		  Mir_Env.MirTypes.tag Mir_Env.MirTypes.Opt *
d87 1
a87 1
		  Mir_Env.MirTypes.tag Mir_Env.MirTypes.Opt *
d95 1
a95 1
		   Mir_Env.MirTypes.tag Mir_Env.MirTypes.Opt *
d113 149
a261 133
  val do_app : Mir_Env.MirTypes.Debugger_Types.Backend_Annotation *
    cg_result *
    ((Mir_Env.MirTypes.opcode list Sexpr.Sexpr *
      Mir_Env.MirTypes.block list *
      Mir_Env.MirTypes.tag Mir_Env.MirTypes.Opt *
      Mir_Env.MirTypes.opcode list Sexpr.Sexpr
      ) *
     Mir_Env.MirTypes.value list *
     Mir_Env.MirTypes.procedure list list
     ) *
    cg_result *
    ((Mir_Env.MirTypes.opcode list Sexpr.Sexpr *
      Mir_Env.MirTypes.block list *
      Mir_Env.MirTypes.tag Mir_Env.MirTypes.Opt *
      Mir_Env.MirTypes.opcode list Sexpr.Sexpr
      ) *
     Mir_Env.MirTypes.value list *
     Mir_Env.MirTypes.procedure list list
     ) *
    Mir_Env.MirTypes.tag *
    int *
    int *
    Mir_Env.MirTypes.tag list ->
    cg_result *
    ((Mir_Env.MirTypes.opcode list Sexpr.Sexpr *
      Mir_Env.MirTypes.block list *
      Mir_Env.MirTypes.tag Mir_Env.MirTypes.Opt *
      Mir_Env.MirTypes.opcode list Sexpr.Sexpr
      ) *
     Mir_Env.MirTypes.value list *
     Mir_Env.MirTypes.procedure list list
     )

  val exit_block : Mir_Env.MirTypes.block list ->
    Mir_Env.MirTypes.block Mir_Env.MirTypes.Opt

  val gc_list_positions : int * ('a -> int) * 'a list * int list -> int list

  val get_any_register : reg_result -> Mir_Env.MirTypes.any_register

  val get_real : reg_result ->
    Mir_Env.MirTypes.fp_operand * Mir_Env.MirTypes.opcode list

  val gp_from_reg : Mir_Env.MirTypes.reg_operand ->
    Mir_Env.MirTypes.gp_operand

  val ident_fn : 'a -> 'a

  val list_of : int * 'a -> 'a list

  val list_of_tags : int -> Mir_Env.MirTypes.tag list

  val make_closure : 'a list *
    Mir_Env.LambdaTypes.LVar list *
    int *
    int *
    Mir_Env.Lambda_Env *
    Mir_Env.Closure_Env *
    int ->
    Mir_Env.MirTypes.reg_operand *
    Mir_Env.MirTypes.opcode list Sexpr.Sexpr *
    Mir_Env.Closure_Env list

  val new_do_app : Mir_Env.MirTypes.Debugger_Types.Backend_Annotation *
    cg_result *
    ((Mir_Env.MirTypes.opcode list Sexpr.Sexpr *
      Mir_Env.MirTypes.block list *
      Mir_Env.MirTypes.tag Mir_Env.MirTypes.Opt *
      Mir_Env.MirTypes.opcode list Sexpr.Sexpr
      ) *
     Mir_Env.MirTypes.value list *
     Mir_Env.MirTypes.procedure list list
     ) *
    cg_result *
    ((Mir_Env.MirTypes.opcode list Sexpr.Sexpr *
      Mir_Env.MirTypes.block list *
      Mir_Env.MirTypes.tag Mir_Env.MirTypes.Opt *
      Mir_Env.MirTypes.opcode list Sexpr.Sexpr
      ) *
     Mir_Env.MirTypes.value list *
     Mir_Env.MirTypes.procedure list list
     ) *
    bool *
    bool *
    (int * Mir_Env.MirTypes.any_register) list *
    bool *
    Mir_Env.MirTypes.tag *
    int *
    int *
    Mir_Env.MirTypes.tag list *
    bool *
    bool *
    bool ->
    cg_result *
    ((Mir_Env.MirTypes.opcode list Sexpr.Sexpr *
      Mir_Env.MirTypes.block list *
      Mir_Env.MirTypes.tag Mir_Env.MirTypes.Opt *
      Mir_Env.MirTypes.opcode list Sexpr.Sexpr
      ) *
     Mir_Env.MirTypes.value list *
     Mir_Env.MirTypes.procedure list list
     )

  val reg_from_gp : Mir_Env.MirTypes.gp_operand ->
    Mir_Env.MirTypes.reg_operand

  val save_real_to_reg : Mir_Env.MirTypes.fp_operand *
    Mir_Env.MirTypes.reg_operand ->
    Mir_Env.MirTypes.opcode list

  val send_to_given_reg : cg_result * Mir_Env.MirTypes.GC.T ->
    Mir_Env.MirTypes.opcode list

  val send_to_new_reg : cg_result ->
    Mir_Env.MirTypes.gp_operand *
    Mir_Env.MirTypes.opcode list

  val send_to_reg : cg_result ->
    Mir_Env.MirTypes.gp_operand *
    Mir_Env.MirTypes.opcode list

  val small_exit_block : Mir_Env.MirTypes.block -> bool

  val stack_tuple_up_in_reg : reg_result list * Mir_Env.MirTypes.GC.T ->
    Mir_Env.MirTypes.GC.T *
    Mir_Env.MirTypes.opcode list

  val tuple_up : reg_result list ->
    Mir_Env.MirTypes.GC.T * Mir_Env.MirTypes.opcode list

  val tuple_up_in_reg : reg_result list * Mir_Env.MirTypes.GC.T ->
    Mir_Env.MirTypes.GC.T *
    Mir_Env.MirTypes.opcode list
@


1.9
log
@Changes to propagate compiler options as parameters instead of references.
@
text
@d4 3
d38 1
d46 1
d48 2
d103 2
d110 32
a141 32
    val do_app : Mir_Env.MirTypes.Debugger_Types.Backend_Annotation *
		 cg_result *
		 ((Mir_Env.MirTypes.opcode list Sexpr.Sexpr *
		   Mir_Env.MirTypes.block list *
		   Mir_Env.MirTypes.tag Mir_Env.MirTypes.Opt *
		   Mir_Env.MirTypes.opcode list Sexpr.Sexpr
		  ) *
		  Mir_Env.MirTypes.value list *
		  Mir_Env.MirTypes.procedure list list
		 ) *
		 cg_result *
		 ((Mir_Env.MirTypes.opcode list Sexpr.Sexpr *
		   Mir_Env.MirTypes.block list *
		   Mir_Env.MirTypes.tag Mir_Env.MirTypes.Opt *
		   Mir_Env.MirTypes.opcode list Sexpr.Sexpr
		  ) *
		  Mir_Env.MirTypes.value list *
		  Mir_Env.MirTypes.procedure list list
		 ) *
		 Mir_Env.MirTypes.tag *
		 int *
		 int *
		 Mir_Env.MirTypes.tag list ->
		   cg_result *
		   ((Mir_Env.MirTypes.opcode list Sexpr.Sexpr *
		     Mir_Env.MirTypes.block list *
		     Mir_Env.MirTypes.tag Mir_Env.MirTypes.Opt *
		     Mir_Env.MirTypes.opcode list Sexpr.Sexpr
		    ) *
		    Mir_Env.MirTypes.value list *
		    Mir_Env.MirTypes.procedure list list
		   )
d143 2
a144 2
    val exit_block : Mir_Env.MirTypes.block list ->
		       Mir_Env.MirTypes.block Mir_Env.MirTypes.Opt
d146 1
a146 1
    val gc_list_positions : int * ('a -> int) * 'a list * int list -> int list
d148 1
a148 1
    val get_any_register : reg_result -> Mir_Env.MirTypes.any_register
d150 2
a151 2
    val get_real : reg_result ->
		     Mir_Env.MirTypes.fp_operand * Mir_Env.MirTypes.opcode list
d153 2
a154 2
    val gp_from_reg : Mir_Env.MirTypes.reg_operand ->
			Mir_Env.MirTypes.gp_operand
d156 1
a156 1
    val ident_fn : 'a -> 'a
d158 1
a158 1
    val list_of : int * 'a -> 'a list
d160 1
a160 1
    val list_of_tags : int -> Mir_Env.MirTypes.tag list
d162 10
a171 10
    val make_closure : 'a list *
		       Mir_Env.LambdaTypes.LVar list *
		       int *
		       int *
		       Mir_Env.Lambda_Env *
		       Mir_Env.Closure_Env *
		       int ->
			 Mir_Env.MirTypes.reg_operand *
			 Mir_Env.MirTypes.opcode list Sexpr.Sexpr *
			 Mir_Env.Closure_Env list
d173 39
a211 39
    val new_do_app : Mir_Env.MirTypes.Debugger_Types.Backend_Annotation *
		     cg_result *
		     ((Mir_Env.MirTypes.opcode list Sexpr.Sexpr *
		       Mir_Env.MirTypes.block list *
		       Mir_Env.MirTypes.tag Mir_Env.MirTypes.Opt *
		       Mir_Env.MirTypes.opcode list Sexpr.Sexpr
		      ) *
		      Mir_Env.MirTypes.value list *
		      Mir_Env.MirTypes.procedure list list
		     ) *
		     cg_result *
		     ((Mir_Env.MirTypes.opcode list Sexpr.Sexpr *
		       Mir_Env.MirTypes.block list *
		       Mir_Env.MirTypes.tag Mir_Env.MirTypes.Opt *
		       Mir_Env.MirTypes.opcode list Sexpr.Sexpr
		      ) *
		      Mir_Env.MirTypes.value list *
		      Mir_Env.MirTypes.procedure list list
		     ) *
		     bool *
		     bool *
		     (int * Mir_Env.MirTypes.any_register) list *
		     bool *
		     Mir_Env.MirTypes.tag *
		     int *
		     int *
		     Mir_Env.MirTypes.tag list *
		     bool *
		     bool *
		     bool ->
		       cg_result *
		       ((Mir_Env.MirTypes.opcode list Sexpr.Sexpr *
		         Mir_Env.MirTypes.block list *
			 Mir_Env.MirTypes.tag Mir_Env.MirTypes.Opt *
			 Mir_Env.MirTypes.opcode list Sexpr.Sexpr
			) *
			Mir_Env.MirTypes.value list *
			Mir_Env.MirTypes.procedure list list
		       )
d213 2
a214 2
    val reg_from_gp : Mir_Env.MirTypes.gp_operand ->
			Mir_Env.MirTypes.reg_operand
d216 3
a218 3
    val save_real_to_reg : Mir_Env.MirTypes.fp_operand *
			   Mir_Env.MirTypes.reg_operand ->
			     Mir_Env.MirTypes.opcode list
d220 2
a221 2
    val send_to_given_reg : cg_result * Mir_Env.MirTypes.GC.T ->
			      Mir_Env.MirTypes.opcode list
d223 3
a225 3
    val send_to_new_reg : cg_result ->
			    Mir_Env.MirTypes.gp_operand *
			    Mir_Env.MirTypes.opcode list
d227 3
a229 3
    val send_to_reg : cg_result ->
			Mir_Env.MirTypes.gp_operand *
			Mir_Env.MirTypes.opcode list
d231 1
a231 1
    val small_exit_block : Mir_Env.MirTypes.block -> bool
d233 3
a235 3
    val stack_tuple_up_in_reg : reg_result list * Mir_Env.MirTypes.GC.T ->
				  Mir_Env.MirTypes.GC.T *
				  Mir_Env.MirTypes.opcode list
d237 2
a238 2
    val tuple_up : reg_result list ->
		     Mir_Env.MirTypes.GC.T * Mir_Env.MirTypes.opcode list
d240 3
a242 3
    val tuple_up_in_reg : reg_result list * Mir_Env.MirTypes.GC.T ->
			    Mir_Env.MirTypes.GC.T *
			    Mir_Env.MirTypes.opcode list
d244 2
a245 2
    val get_string : Mir_Env.LambdaTypes.LambdaExp -> 
		       string Mir_Env.LambdaTypes.Set.Set
@


1.8
log
@Formatted so that I could understand what the hell was going on!
@
text
@d4 3
a42 3
  val do_tail_optimisation : bool ref
  val do_self_call_optimisation : bool ref

a119 1
		 bool *
d123 1
a123 3
		 Mir_Env.MirTypes.tag list *
		 bool *
		 bool ->
d191 2
@


1.7
log
@Added switches for self call optimisation
@
text
@d4 3
d51 89
a139 9
    val append_small_exit : Mir_Env.MirTypes.block * Mir_Env.MirTypes.block list -> Mir_Env.MirTypes.block list
    val cg_lvar : Mir_Env.LambdaTypes.LVar * Mir_Env.Lambda_Env * Mir_Env.Closure_Env * int -> (reg_result * Mir_Env.MirTypes.opcode list) * int * bool
    val cg_lvar_fn : Mir_Env.LambdaTypes.LVar * Mir_Env.Lambda_Env * Mir_Env.Closure_Env * int -> reg_result * Mir_Env.MirTypes.opcode list
    val combine : ((Mir_Env.MirTypes.opcode list Sexpr.Sexpr * Mir_Env.MirTypes.block list * Mir_Env.MirTypes.tag Mir_Env.MirTypes.Opt * Mir_Env.MirTypes.opcode list Sexpr.Sexpr) * Mir_Env.MirTypes.value list * Mir_Env.MirTypes.procedure list list) * ((Mir_Env.MirTypes.opcode list Sexpr.Sexpr * Mir_Env.MirTypes.block list * Mir_Env.MirTypes.tag Mir_Env.MirTypes.Opt * Mir_Env.MirTypes.opcode list Sexpr.Sexpr) * Mir_Env.MirTypes.value list * Mir_Env.MirTypes.procedure list list) -> (Mir_Env.MirTypes.opcode list Sexpr.Sexpr * Mir_Env.MirTypes.block list * Mir_Env.MirTypes.tag Mir_Env.MirTypes.Opt * Mir_Env.MirTypes.opcode list Sexpr.Sexpr) * Mir_Env.MirTypes.value list * Mir_Env.MirTypes.procedure list list
    val contract_sexpr : Mir_Env.MirTypes.opcode list Sexpr.Sexpr -> Mir_Env.MirTypes.opcode list
    val convert_int : string -> int
    val destruct_2_tuple : Mir_Env.MirTypes.gp_operand -> Mir_Env.MirTypes.gp_operand * Mir_Env.MirTypes.gp_operand * Mir_Env.MirTypes.opcode list
    val do_app : Mir_Env.MirTypes.Debugger_Types.Backend_Annotation * cg_result * ((Mir_Env.MirTypes.opcode list Sexpr.Sexpr * Mir_Env.MirTypes.block list * Mir_Env.MirTypes.tag Mir_Env.MirTypes.Opt * Mir_Env.MirTypes.opcode list Sexpr.Sexpr) * Mir_Env.MirTypes.value list * Mir_Env.MirTypes.procedure list list) * cg_result * ((Mir_Env.MirTypes.opcode list Sexpr.Sexpr * Mir_Env.MirTypes.block list * Mir_Env.MirTypes.tag Mir_Env.MirTypes.Opt * Mir_Env.MirTypes.opcode list Sexpr.Sexpr) * Mir_Env.MirTypes.value list * Mir_Env.MirTypes.procedure list list) * bool * Mir_Env.MirTypes.tag * int * int * Mir_Env.MirTypes.tag list * bool * bool -> cg_result * ((Mir_Env.MirTypes.opcode list Sexpr.Sexpr * Mir_Env.MirTypes.block list * Mir_Env.MirTypes.tag Mir_Env.MirTypes.Opt * Mir_Env.MirTypes.opcode list Sexpr.Sexpr) * Mir_Env.MirTypes.value list * Mir_Env.MirTypes.procedure list list)
    val exit_block : Mir_Env.MirTypes.block list -> Mir_Env.MirTypes.block Mir_Env.MirTypes.Opt
d141 1
d143 7
a149 2
    val get_real : reg_result -> Mir_Env.MirTypes.fp_operand * Mir_Env.MirTypes.opcode list
    val gp_from_reg : Mir_Env.MirTypes.reg_operand -> Mir_Env.MirTypes.gp_operand
d151 1
d153 1
d155 68
a222 7
    val make_closure : 'a list * Mir_Env.LambdaTypes.LVar list * int * int * Mir_Env.Lambda_Env * Mir_Env.Closure_Env * int -> Mir_Env.MirTypes.reg_operand * Mir_Env.MirTypes.opcode list Sexpr.Sexpr * Mir_Env.Closure_Env list
    val new_do_app : Mir_Env.MirTypes.Debugger_Types.Backend_Annotation * cg_result * ((Mir_Env.MirTypes.opcode list Sexpr.Sexpr * Mir_Env.MirTypes.block list * Mir_Env.MirTypes.tag Mir_Env.MirTypes.Opt * Mir_Env.MirTypes.opcode list Sexpr.Sexpr) * Mir_Env.MirTypes.value list * Mir_Env.MirTypes.procedure list list) * cg_result * ((Mir_Env.MirTypes.opcode list Sexpr.Sexpr * Mir_Env.MirTypes.block list * Mir_Env.MirTypes.tag Mir_Env.MirTypes.Opt * Mir_Env.MirTypes.opcode list Sexpr.Sexpr) * Mir_Env.MirTypes.value list * Mir_Env.MirTypes.procedure list list) * bool * bool * (int * Mir_Env.MirTypes.any_register) list * bool * Mir_Env.MirTypes.tag * int * int * Mir_Env.MirTypes.tag list * bool -> cg_result * ((Mir_Env.MirTypes.opcode list Sexpr.Sexpr * Mir_Env.MirTypes.block list * Mir_Env.MirTypes.tag Mir_Env.MirTypes.Opt * Mir_Env.MirTypes.opcode list Sexpr.Sexpr) * Mir_Env.MirTypes.value list * Mir_Env.MirTypes.procedure list list)
    val reg_from_gp : Mir_Env.MirTypes.gp_operand -> Mir_Env.MirTypes.reg_operand
    val save_real_to_reg : Mir_Env.MirTypes.fp_operand * Mir_Env.MirTypes.reg_operand -> Mir_Env.MirTypes.opcode list
    val send_to_given_reg : cg_result * Mir_Env.MirTypes.GC.T -> Mir_Env.MirTypes.opcode list
    val send_to_new_reg : cg_result -> Mir_Env.MirTypes.gp_operand * Mir_Env.MirTypes.opcode list
    val send_to_reg : cg_result -> Mir_Env.MirTypes.gp_operand * Mir_Env.MirTypes.opcode list
d224 14
a237 4
    val stack_tuple_up_in_reg : reg_result list * Mir_Env.MirTypes.GC.T -> Mir_Env.MirTypes.GC.T * Mir_Env.MirTypes.opcode list
    val tuple_up : reg_result list -> Mir_Env.MirTypes.GC.T * Mir_Env.MirTypes.opcode list
    val tuple_up_in_reg : reg_result list * Mir_Env.MirTypes.GC.T -> Mir_Env.MirTypes.GC.T * Mir_Env.MirTypes.opcode list
    val get_string : Mir_Env.LambdaTypes.LambdaExp -> string Mir_Env.LambdaTypes.Set.Set
@


1.6
log
@Removed some redundant structures and sharing
@
text
@d4 3
d38 1
@


1.5
log
@Added a flag to turn off tail-call optimisation
@
text
@d4 3
a24 1
require "../lambda/lambdatypes";
a25 1
require "../debugger/debugger_types";
a26 1
require "mirtypes";
a30 1
  structure LambdaTypes : LAMBDATYPES
a32 1
  structure MirTypes : MIRTYPES
a33 4
  sharing MirTypes = Mir_Env.MirTypes
  sharing MirTypes.Ident = LambdaTypes.Ident
  sharing Mir_Env.LambdaTypes = LambdaTypes

d37 2
a38 2
    INT of MirTypes.gp_operand |
    REAL of MirTypes.fp_operand
d44 5
a48 5
    val append_small_exit : MirTypes.block * MirTypes.block list -> MirTypes.block list
    val cg_lvar : LambdaTypes.LVar * Mir_Env.Lambda_Env * Mir_Env.Closure_Env * int -> (reg_result * MirTypes.opcode list) * int * bool
    val cg_lvar_fn : LambdaTypes.LVar * Mir_Env.Lambda_Env * Mir_Env.Closure_Env * int -> reg_result * MirTypes.opcode list
    val combine : ((MirTypes.opcode list Sexpr.Sexpr * MirTypes.block list * MirTypes.tag MirTypes.Opt * MirTypes.opcode list Sexpr.Sexpr) * MirTypes.value list * MirTypes.procedure list list) * ((MirTypes.opcode list Sexpr.Sexpr * MirTypes.block list * MirTypes.tag MirTypes.Opt * MirTypes.opcode list Sexpr.Sexpr) * MirTypes.value list * MirTypes.procedure list list) -> (MirTypes.opcode list Sexpr.Sexpr * MirTypes.block list * MirTypes.tag MirTypes.Opt * MirTypes.opcode list Sexpr.Sexpr) * MirTypes.value list * MirTypes.procedure list list
    val contract_sexpr : MirTypes.opcode list Sexpr.Sexpr -> MirTypes.opcode list
d50 3
a52 3
    val destruct_2_tuple : MirTypes.gp_operand -> MirTypes.gp_operand * MirTypes.gp_operand * MirTypes.opcode list
    val do_app : MirTypes.Debugger_Types.Backend_Annotation * cg_result * ((MirTypes.opcode list Sexpr.Sexpr * MirTypes.block list * MirTypes.tag MirTypes.Opt * MirTypes.opcode list Sexpr.Sexpr) * MirTypes.value list * MirTypes.procedure list list) * cg_result * ((MirTypes.opcode list Sexpr.Sexpr * MirTypes.block list * MirTypes.tag MirTypes.Opt * MirTypes.opcode list Sexpr.Sexpr) * MirTypes.value list * MirTypes.procedure list list) * bool * MirTypes.tag * int * int * MirTypes.tag list * bool * bool -> cg_result * ((MirTypes.opcode list Sexpr.Sexpr * MirTypes.block list * MirTypes.tag MirTypes.Opt * MirTypes.opcode list Sexpr.Sexpr) * MirTypes.value list * MirTypes.procedure list list)
    val exit_block : MirTypes.block list -> MirTypes.block MirTypes.Opt
d54 3
a56 3
    val get_any_register : reg_result -> MirTypes.any_register
    val get_real : reg_result -> MirTypes.fp_operand * MirTypes.opcode list
    val gp_from_reg : MirTypes.reg_operand -> MirTypes.gp_operand
d59 13
a71 13
    val list_of_tags : int -> MirTypes.tag list
    val make_closure : 'a list * LambdaTypes.LVar list * int * int * Mir_Env.Lambda_Env * Mir_Env.Closure_Env * int -> MirTypes.reg_operand * MirTypes.opcode list Sexpr.Sexpr * Mir_Env.Closure_Env list
    val new_do_app : MirTypes.Debugger_Types.Backend_Annotation * cg_result * ((MirTypes.opcode list Sexpr.Sexpr * MirTypes.block list * MirTypes.tag MirTypes.Opt * MirTypes.opcode list Sexpr.Sexpr) * MirTypes.value list * MirTypes.procedure list list) * cg_result * ((MirTypes.opcode list Sexpr.Sexpr * MirTypes.block list * MirTypes.tag MirTypes.Opt * MirTypes.opcode list Sexpr.Sexpr) * MirTypes.value list * MirTypes.procedure list list) * bool * bool * (int * MirTypes.any_register) list * bool * MirTypes.tag * int * int * MirTypes.tag list * bool -> cg_result * ((MirTypes.opcode list Sexpr.Sexpr * MirTypes.block list * MirTypes.tag MirTypes.Opt * MirTypes.opcode list Sexpr.Sexpr) * MirTypes.value list * MirTypes.procedure list list)
    val reg_from_gp : MirTypes.gp_operand -> MirTypes.reg_operand
    val save_real_to_reg : MirTypes.fp_operand * MirTypes.reg_operand -> MirTypes.opcode list
    val send_to_given_reg : cg_result * MirTypes.GC.T -> MirTypes.opcode list
    val send_to_new_reg : cg_result -> MirTypes.gp_operand * MirTypes.opcode list
    val send_to_reg : cg_result -> MirTypes.gp_operand * MirTypes.opcode list
    val small_exit_block : MirTypes.block -> bool
    val stack_tuple_up_in_reg : reg_result list * MirTypes.GC.T -> MirTypes.GC.T * MirTypes.opcode list
    val tuple_up : reg_result list -> MirTypes.GC.T * MirTypes.opcode list
    val tuple_up_in_reg : reg_result list * MirTypes.GC.T -> MirTypes.GC.T * MirTypes.opcode list
    val get_string : LambdaTypes.LambdaExp -> string LambdaTypes.Set.Set
@


1.4
log
@Added extra sharing constraints.
@
text
@d4 3
d39 2
@


1.3
log
@Added type annotation information at application points
@
text
@d4 3
d33 1
d35 1
@


1.2
log
@Changed to use augmented lambda calculus, and sexpressions to avoid
duplicated append operations.
@
text
@d4 4
d18 1
d47 1
a47 1
    val do_app : cg_result * ((MirTypes.opcode list Sexpr.Sexpr * MirTypes.block list * MirTypes.tag MirTypes.Opt * MirTypes.opcode list Sexpr.Sexpr) * MirTypes.value list * MirTypes.procedure list list) * cg_result * ((MirTypes.opcode list Sexpr.Sexpr * MirTypes.block list * MirTypes.tag MirTypes.Opt * MirTypes.opcode list Sexpr.Sexpr) * MirTypes.value list * MirTypes.procedure list list) * bool * MirTypes.tag * int * int * MirTypes.tag list * bool * bool -> cg_result * ((MirTypes.opcode list Sexpr.Sexpr * MirTypes.block list * MirTypes.tag MirTypes.Opt * MirTypes.opcode list Sexpr.Sexpr) * MirTypes.value list * MirTypes.procedure list list)
d57 1
a57 1
    val new_do_app : cg_result * ((MirTypes.opcode list Sexpr.Sexpr * MirTypes.block list * MirTypes.tag MirTypes.Opt * MirTypes.opcode list Sexpr.Sexpr) * MirTypes.value list * MirTypes.procedure list list) * cg_result * ((MirTypes.opcode list Sexpr.Sexpr * MirTypes.block list * MirTypes.tag MirTypes.Opt * MirTypes.opcode list Sexpr.Sexpr) * MirTypes.value list * MirTypes.procedure list list) * bool * bool * (int * MirTypes.any_register) list * bool * MirTypes.tag * int * int * MirTypes.tag list * bool -> cg_result * ((MirTypes.opcode list Sexpr.Sexpr * MirTypes.block list * MirTypes.tag MirTypes.Opt * MirTypes.opcode list Sexpr.Sexpr) * MirTypes.value list * MirTypes.procedure list list)
@


1.1
log
@Initial revision
@
text
@d3 4
a6 1
$Log$
d10 1
d18 1
d38 2
a39 1
    val combine : ((MirTypes.opcode list * MirTypes.block list * MirTypes.tag MirTypes.Opt * MirTypes.opcode list) * MirTypes.value list * MirTypes.procedure list list) * ((MirTypes.opcode list * MirTypes.block list * MirTypes.tag MirTypes.Opt * MirTypes.opcode list) * MirTypes.value list * MirTypes.procedure list list) -> (MirTypes.opcode list * MirTypes.block list * MirTypes.tag MirTypes.Opt * MirTypes.opcode list) * MirTypes.value list * MirTypes.procedure list list
a40 2
    val count_gc_objects : LambdaTypes.LambdaExp -> int
    val count_gc_tags : LambdaTypes.Tag -> int
d42 1
a42 1
    val do_app : cg_result * ((MirTypes.opcode list * MirTypes.block list * MirTypes.tag MirTypes.Opt * MirTypes.opcode list) * MirTypes.value list * MirTypes.procedure list list) * cg_result * ((MirTypes.opcode list * MirTypes.block list * MirTypes.tag MirTypes.Opt * MirTypes.opcode list) * MirTypes.value list * MirTypes.procedure list list) * bool * MirTypes.tag * int * int * MirTypes.tag list * bool * bool -> cg_result * ((MirTypes.opcode list * MirTypes.block list * MirTypes.tag MirTypes.Opt * MirTypes.opcode list) * MirTypes.value list * MirTypes.procedure list list)
d51 2
a52 5
    val lneeds_prim : Pervasives.pervasive * LambdaTypes.LambdaExp list -> bool
    val make_closure : 'a list * LambdaTypes.LVar LambdaTypes.Set.Set * int * int * Mir_Env.Lambda_Env * Mir_Env.Closure_Env * int -> MirTypes.reg_operand * MirTypes.opcode list * Mir_Env.Closure_Env list
    val makes_calls : LambdaTypes.LambdaExp -> bool
    val needs_prim : Pervasives.pervasive * LambdaTypes.LambdaExp -> bool
    val new_do_app : cg_result * ((MirTypes.opcode list * MirTypes.block list * MirTypes.tag MirTypes.Opt * MirTypes.opcode list) * MirTypes.value list * MirTypes.procedure list list) * cg_result * ((MirTypes.opcode list * MirTypes.block list * MirTypes.tag MirTypes.Opt * MirTypes.opcode list) * MirTypes.value list * MirTypes.procedure list list) * bool * bool * (int * MirTypes.any_register) list * bool * MirTypes.tag * int * int * MirTypes.tag list * bool -> cg_result * ((MirTypes.opcode list * MirTypes.block list * MirTypes.tag MirTypes.Opt * MirTypes.opcode list) * MirTypes.value list * MirTypes.procedure list list)
@
