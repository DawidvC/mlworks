head	1.10;
access;
symbols
	MLW_daveb_inline_1_4_99:1.10.4
	MLWorks_21c0_1999_03_25:1.10
	MLWorks_20c1_1998_08_20:1.10
	MLWorks_20c0_1998_08_04:1.10
	MLWorks_20b2c2_1998_06_19:1.10
	MLWorks_20b2_Windows_1998_06_12:1.10
	MLWorks_20b1c1_1998_05_07:1.10
	MLWorks_20b0_1998_04_07:1.10
	MLWorks_20b0_1998_03_20:1.10
	MLWorks_20m2_1998_02_16:1.10
	MLWorks_20m1_1997_10_23:1.10
	MLWorks_11r1:1.10.1.1.1.1.1
	MLWorks_workspace_97:1.10.3
	MLWorks_dt_wizard:1.10.2
	MLWorks_11c0_1997_09_09:1.10.1.1.1.1
	MLWorks_10r3:1.10.1.1.3
	MLWorks_10r2_551:1.10.1.1.2
	MLWorks_11:1.10.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.10.1.1
	MLWorks_20m0_1997_06_20:1.10
	MLWorks_1_0_r2c2_1997_06_14:1.10.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.10.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.10.1
	MLWorks_BugFix_1997_04_24:1.10
	MLWorks_1_0_r2_Win32_1997_04_11:1.10
	MLWorks_1_0_r2_Unix_1997_04_04:1.10
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.9.6.1.1
	MLWorks_gui_1996_12_18:1.9.7
	MLWorks_1_0_Win32_1996_12_17:1.9.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.9.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.9.4.1
	MLWorks_1_0_Irix_1996_11_28:1.9.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.9.5
	MLWorks_1_0_Unix_1996_11_14:1.9.4
	MLWorks_Open_Beta2_1996_10_11:1.9.3
	MLWorks_License_dev:1.9.2
	MLWorks_1_open_beta_1996_09_13:1.9.1
	MLWorks_Open_Beta_1996_08_22:1.9
	MLWorks_Beta_1996_07_02:1.9
	MLWorks_Beta_1996_06_07:1.9
	MLWorks_Beta_1996_06_06:1.9
	MLWorks_Beta_1996_06_05:1.9
	MLWorks_Beta_1996_06_03:1.9
	MLWorks_Beta_1996_05_31:1.9
	MLWorks_Beta_1996_05_30:1.9
	ML_beta_release_12/08/94:1.7
	ML_beta_release_03/08/94:1.7
	ML_revised_beta_release_25/05/94:1.7
	ML_final_beta_release_02/03/94:1.7
	mlworks-28-01-1994:1.7
	Release:1.7
	mlworks-beta-01-09-1993:1.7
	MLWorks-1-0-4-29/01/1993:1.6
	MLWorks-1-0-3-21/12/1992:1.6
	MLWorks-1-0-2-15/12/1992:1.6
	MLWorks-1-0-1-04/12/1992:1.6
	checkpoint_17_08_92:1.6;
locks; strict;
comment	@ * @;


1.10
date	97.01.27.16.44.21;	author jont;	state Exp;
branches
	1.10.1.1
	1.10.2.1
	1.10.3.1
	1.10.4.1;
next	1.9;

1.9
date	95.05.30.11.34.02;	author matthew;	state Exp;
branches
	1.9.1.1
	1.9.2.1
	1.9.3.1
	1.9.4.1
	1.9.5.1
	1.9.6.1
	1.9.7.1;
next	1.8;

1.8
date	94.08.24.16.06.42;	author matthew;	state Exp;
branches;
next	1.7;

1.7
date	93.07.30.09.50.26;	author richard;	state Exp;
branches
	1.7.1.1;
next	1.6;

1.6
date	92.08.05.11.30.10;	author jont;	state Exp;
branches;
next	1.5;

1.5
date	92.06.19.09.55.05;	author jont;	state Exp;
branches;
next	1.4;

1.4
date	92.06.17.10.08.46;	author richard;	state Exp;
branches;
next	1.3;

1.3
date	92.06.11.10.28.37;	author richard;	state Exp;
branches;
next	1.2;

1.2
date	92.06.09.14.33.31;	author richard;	state Exp;
branches;
next	1.1;

1.1
date	92.06.04.15.03.15;	author richard;	state Exp;
branches;
next	;

1.7.1.1
date	93.07.30.09.50.26;	author jont;	state Exp;
branches;
next	;

1.9.1.1
date	96.09.13.11.14.22;	author hope;	state Exp;
branches;
next	;

1.9.2.1
date	96.10.07.16.04.49;	author hope;	state Exp;
branches;
next	;

1.9.3.1
date	96.10.17.11.23.04;	author hope;	state Exp;
branches;
next	;

1.9.4.1
date	96.11.14.12.47.20;	author hope;	state Exp;
branches
	1.9.4.1.1.1;
next	;

1.9.4.1.1.1
date	96.11.28.14.58.55;	author hope;	state Exp;
branches;
next	;

1.9.5.1
date	96.11.22.18.07.25;	author hope;	state Exp;
branches;
next	;

1.9.6.1
date	96.12.17.17.46.09;	author hope;	state Exp;
branches
	1.9.6.1.1.1;
next	;

1.9.6.1.1.1
date	97.02.24.11.35.45;	author hope;	state Exp;
branches;
next	;

1.9.7.1
date	96.12.18.09.40.08;	author hope;	state Exp;
branches;
next	;

1.10.1.1
date	97.05.12.10.32.28;	author hope;	state Exp;
branches
	1.10.1.1.1.1
	1.10.1.1.2.1
	1.10.1.1.3.1;
next	;

1.10.1.1.1.1
date	97.07.28.18.18.13;	author daveb;	state Exp;
branches
	1.10.1.1.1.1.1.1;
next	;

1.10.1.1.1.1.1.1
date	97.10.07.11.43.12;	author jkbrook;	state Exp;
branches;
next	;

1.10.1.1.2.1
date	97.09.08.17.11.46;	author daveb;	state Exp;
branches;
next	;

1.10.1.1.3.1
date	97.09.09.14.07.23;	author daveb;	state Exp;
branches;
next	;

1.10.2.1
date	97.09.10.19.22.11;	author brucem;	state Exp;
branches;
next	;

1.10.3.1
date	97.09.11.20.53.28;	author daveb;	state Exp;
branches;
next	;

1.10.4.1
date	99.04.01.17.56.06;	author daveb;	state Exp;
branches;
next	;


desc
@Register colourer signature
@


1.10
log
@[Bug #0]
Pass name of function to colourer so we don't try too hard on setups and functors
@
text
@(*  ==== REGISTER GRAPH COLOURER ====
 *             SIGNATURE
 *
 *  Copyright (C) 1992 Harlequin Ltd.
 *
 *  Description
 *  -----------
 *  This signature describes a structure which builds a graph of clashes
 *  between registers and a function for colouring it with some other
 *  registers.
 *
 *  Diagnostics
 *  -----------
 *  0  Register preferences are printed when functor is applied
 *  1  Graph creation
 *  2  Register mergers on graph creation, register assignments
 *  3  Register merger map
 *  4  Clashes added to graph
 *
 *  Revision Log
 *  ------------
 *  $Log: registercolourer.sml,v $
 * Revision 1.9  1995/05/30  11:34:02  matthew
 * Adding debug flag to colour
 *
 *  Revision 1.8  1994/08/24  16:06:42  matthew
 *  Added preferences argument
 *
 *  Revision 1.7  1993/07/30  09:50:26  richard
 *  Added graph printing function.
 *
 *  Revision 1.6  1992/08/05  11:30:10  jont
 *  Removed require array
 *
 *  Revision 1.5  1992/06/19  09:55:05  jont
 *  Added missing require diagnostic
 *
 *  Revision 1.4  1992/06/17  10:08:46  richard
 *  Hints are no longer passed to the graphs.
 *
 *  Revision 1.3  1992/06/11  10:28:37  richard
 *  Added `referenced' parameter to clasher.
 *
 *  Revision 1.2  1992/06/09  14:33:31  richard
 *  Removed `used' return from colouring function.
 *
 *  Revision 1.1  1992/06/04  15:03:15  richard
 *  Initial revision
 *)


require "../utils/diagnostic";
require "virtualregister";


signature REGISTERCOLOURER =
  sig

    structure Register   : VIRTUALREGISTER
    structure Diagnostic : DIAGNOSTIC


    (*  === REGISTER CLASH GRAPH ===
     *
     *  An empty graph is created from several bits of information about the
     *  registers which are to occupy it.  The registers must have been
     *  packed, i.e., must map onto the integers 0 to N-1, and the integer N
     *  supplied to the `empty' function.
     *
     *  The clash function augments the graph with live register
     *  information.  The set of registers defined, referenced, and live at
     *  each instruction is passed.  The defined set should be sparser than
     *  the referenced set, in general.  This is critical to timing.
     *)

    type Graph

    val empty : int * bool -> Graph
    val clash : Graph * Register.Pack.T * Register.Pack.T * Register.Pack.T -> unit


    (*  === COLOUR A CLASH GRAPH ===
     *
     *  This function colours the registers in a clash graph with a set of
     *  registers taken from MirRegisters (see functor for details).  If
     *  there are not enough registers to go round registers are coloured
     *  with spill numbers.  The colouring function yields a function
     *  mapping registers to their colouring and the number of spills (one
     *  greater than the largest spill).
     *
     *  A Graph may only be coloured once, as it is destructively modified
     *  by the colouring process.
     *)

    datatype assignment = REGISTER of Register.T | SPILL of int

    val colour :
      Graph * (Register.T * Register.T) list * bool * string ->
      {assign : Register.T -> assignment,
       nr_spills : int}


  end
@


1.10.4.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a22 4
 * Revision 1.10  1997/01/27  16:44:21  jont
 * [Bug #0]
 * Pass name of function to colourer so we don't try too hard on setups and functors
 *
@


1.10.3.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a22 4
 * Revision 1.10  1997/01/27  16:44:21  jont
 * [Bug #0]
 * Pass name of function to colourer so we don't try too hard on setups and functors
 *
@


1.10.2.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a22 4
 * Revision 1.10  1997/01/27  16:44:21  jont
 * [Bug #0]
 * Pass name of function to colourer so we don't try too hard on setups and functors
 *
@


1.10.1.1
log
@branched from 1.10
@
text
@a22 4
 * Revision 1.10  1997/01/27  16:44:21  jont
 * [Bug #0]
 * Pass name of function to colourer so we don't try too hard on setups and functors
 *
@


1.10.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a22 3
 * Revision 1.10.1.1  1997/05/12  10:32:28  hope
 * branched from 1.10
 *
@


1.10.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a22 3
 * Revision 1.10.1.1  1997/05/12  10:32:28  hope
 * branched from 1.10
 *
@


1.10.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a22 3
 * Revision 1.10.1.1  1997/05/12  10:32:28  hope
 * branched from 1.10
 *
@


1.10.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a22 3
 * Revision 1.10.1.1.1.1  1997/07/28  18:18:13  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.9
log
@Adding debug flag to colour
@
text
@d23 3
d98 1
a98 1
      Graph * (Register.T * Register.T) list * bool ->
a103 1

@


1.9.7.1
log
@branched from 1.9
@
text
@a22 3
 * Revision 1.9  1995/05/30  11:34:02  matthew
 * Adding debug flag to colour
 *
@


1.9.6.1
log
@branched from 1.9
@
text
@a22 3
 * Revision 1.9  1995/05/30  11:34:02  matthew
 * Adding debug flag to colour
 *
@


1.9.6.1.1.1
log
@branched from 1.9.6.1
@
text
@a22 3
 * Revision 1.9.6.1  1996/12/17  17:46:09  hope
 * branched from 1.9
 *
@


1.9.5.1
log
@branched from 1.9
@
text
@a22 3
 * Revision 1.9  1995/05/30  11:34:02  matthew
 * Adding debug flag to colour
 *
@


1.9.4.1
log
@branched from 1.9
@
text
@a22 3
 * Revision 1.9  1995/05/30  11:34:02  matthew
 * Adding debug flag to colour
 *
@


1.9.4.1.1.1
log
@branched from 1.9.4.1
@
text
@a22 3
 * Revision 1.9.4.1  1996/11/14  12:47:20  hope
 * branched from 1.9
 *
@


1.9.3.1
log
@branched from 1.9
@
text
@a22 3
 * Revision 1.9  1995/05/30  11:34:02  matthew
 * Adding debug flag to colour
 *
@


1.9.2.1
log
@branched from 1.9
@
text
@a22 3
 * Revision 1.9  1995/05/30  11:34:02  matthew
 * Adding debug flag to colour
 *
@


1.9.1.1
log
@branched from 1.9
@
text
@a22 3
 * Revision 1.9  1995/05/30  11:34:02  matthew
 * Adding debug flag to colour
 *
@


1.8
log
@Added preferences argument
@
text
@d23 3
d75 1
a75 1
    val empty : int -> Graph
d95 1
a95 1
      Graph * (Register.T * Register.T) list ->
a98 7

    (*  === PRINT A GRAPH ===
     *
     *  Folds a function over a printed representation of the clash graph.
     *)

    val print : ('a * string -> 'a) -> 'a -> Graph -> 'a
@


1.7
log
@Added graph printing function.
@
text
@d23 3
d92 1
a92 1
      Graph ->
@


1.7.1.1
log
@Fork for bug fixing
@
text
@a22 3
 *  Revision 1.7  1993/07/30  09:50:26  richard
 *  Added graph printing function.
 *
@


1.6
log
@Removed require array
@
text
@d23 3
d92 8
@


1.5
log
@Added missing require diagnostic
@
text
@d23 3
a40 1
require "../utils/array";
@


1.4
log
@Hints are no longer passed to the graphs.
@
text
@d23 3
d37 1
@


1.3
log
@Added `referenced' parameter to clasher.
@
text
@d23 3
d50 1
a50 2
     *  supplied to the `empty' function.  A list of pairs of registers
     *  which are guaranteed not to clash may also be supplied.
d60 1
a60 1
    val empty : int * (Register.T * Register.T) list -> Graph
@


1.2
log
@Removed `used' return from colouring function.
@
text
@d23 3
d50 4
a53 3
     *  The clash function adds edges to the graph between the registers in
     *  one set and the registers in another.  The first set specified
     *  should be the sparser, in general.  This is critical to timing.
d59 1
a59 1
    val clash : Graph * Register.Pack.T * Register.Pack.T -> unit
@


1.1
log
@Initial revision
@
text
@d12 8
d22 3
a24 1
 *  $Log$
d64 2
a65 3
     *  mapping registers to their colouring, the number of spills (one
     *  greater than the largest spill), and the set of colours (registers)
     *  assigned.
d76 1
a76 2
       nr_spills : int,
       used   : Register.Pack.T}
@
