head	1.8;
access;
symbols
	MLW_daveb_inline_1_4_99:1.8.12
	MLWorks_21c0_1999_03_25:1.8
	MLWorks_20c1_1998_08_20:1.8
	MLWorks_20c0_1998_08_04:1.8
	MLWorks_20b2c2_1998_06_19:1.8
	MLWorks_20b2_Windows_1998_06_12:1.8
	MLWorks_20b1c1_1998_05_07:1.8
	MLWorks_20b0_1998_04_07:1.8
	MLWorks_20b0_1998_03_20:1.8
	MLWorks_20m2_1998_02_16:1.8
	MLWorks_20m1_1997_10_23:1.8
	MLWorks_11r1:1.8.9.1.1.1.1
	MLWorks_workspace_97:1.8.11
	MLWorks_dt_wizard:1.8.10
	MLWorks_11c0_1997_09_09:1.8.9.1.1.1
	MLWorks_10r3:1.8.9.1.3
	MLWorks_10r2_551:1.8.9.1.2
	MLWorks_11:1.8.9.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.8.9.1
	MLWorks_20m0_1997_06_20:1.8
	MLWorks_1_0_r2c2_1997_06_14:1.8.9.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.8.9.1
	MLWorks_1_0_r2c1_1997_05_12:1.8.9
	MLWorks_BugFix_1997_04_24:1.8
	MLWorks_1_0_r2_Win32_1997_04_11:1.8
	MLWorks_1_0_r2_Unix_1997_04_04:1.8
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.8.7.1.1
	MLWorks_gui_1996_12_18:1.8.8
	MLWorks_1_0_Win32_1996_12_17:1.8.7
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.8.5.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.8.5.1
	MLWorks_1_0_Irix_1996_11_28:1.8.5.1.1
	MLWorks_1_0_Win32_1996_11_22:1.8.6
	MLWorks_1_0_Unix_1996_11_14:1.8.5
	MLWorks_Open_Beta2_1996_10_11:1.8.4
	MLWorks_License_dev:1.8.3
	MLWorks_1_open_beta_1996_09_13:1.8.2
	MLWorks_Open_Beta_1996_08_22:1.8
	MLWorks_Beta_1996_07_02:1.8
	MLWorks_Beta_1996_06_07:1.8
	MLWorks_Beta_1996_06_06:1.8
	MLWorks_Beta_1996_06_05:1.8
	MLWorks_Beta_1996_06_03:1.8
	MLWorks_Beta_1996_05_31:1.8
	MLWorks_Beta_1996_05_30:1.8
	ML_beta_release_12/08/94:1.8
	ML_beta_release_03/08/94:1.8
	ML_revised_beta_release_25/05/94:1.8
	ML_final_beta_release_02/03/94:1.8
	mlworks-28-01-1994:1.8
	Release:1.8
	mlworks-beta-01-09-1993:1.8
	MLWorks-1-0-4-29/01/1993:1.8
	MLWorks-1-0-3-21/12/1992:1.8
	MLWorks-1-0-2-15/12/1992:1.8
	MLWorks-1-0-1-04/12/1992:1.7
	checkpoint_17_08_92:1.6;
locks; strict;
comment	@ * @;


1.8
date	92.12.08.19.52.44;	author jont;	state Exp;
branches
	1.8.1.1
	1.8.2.1
	1.8.3.1
	1.8.4.1
	1.8.5.1
	1.8.6.1
	1.8.7.1
	1.8.8.1
	1.8.9.1
	1.8.10.1
	1.8.11.1
	1.8.12.1;
next	1.7;

1.7
date	92.12.02.13.34.22;	author jont;	state Exp;
branches;
next	1.6;

1.6
date	92.06.04.15.11.30;	author richard;	state Exp;
branches;
next	1.5;

1.5
date	92.05.27.13.27.38;	author richard;	state Exp;
branches;
next	1.4;

1.4
date	92.02.27.17.13.03;	author richard;	state Exp;
branches;
next	1.3;

1.3
date	91.11.19.10.16.06;	author richard;	state Exp;
branches;
next	1.2;

1.2
date	91.10.17.11.51.35;	author richard;	state Exp;
branches;
next	1.1;

1.1
date	91.09.18.18.15.47;	author richard;	state Exp;
branches;
next	;

1.8.1.1
date	92.12.08.19.52.44;	author jont;	state Exp;
branches;
next	;

1.8.2.1
date	96.09.13.11.14.16;	author hope;	state Exp;
branches;
next	;

1.8.3.1
date	96.10.07.16.04.44;	author hope;	state Exp;
branches;
next	;

1.8.4.1
date	96.10.17.11.22.58;	author hope;	state Exp;
branches;
next	;

1.8.5.1
date	96.11.14.12.47.14;	author hope;	state Exp;
branches
	1.8.5.1.1.1;
next	;

1.8.5.1.1.1
date	96.11.28.14.58.49;	author hope;	state Exp;
branches;
next	;

1.8.6.1
date	96.11.22.18.07.19;	author hope;	state Exp;
branches;
next	;

1.8.7.1
date	96.12.17.17.46.03;	author hope;	state Exp;
branches
	1.8.7.1.1.1;
next	;

1.8.7.1.1.1
date	97.02.24.11.35.39;	author hope;	state Exp;
branches;
next	;

1.8.8.1
date	96.12.18.09.40.02;	author hope;	state Exp;
branches;
next	;

1.8.9.1
date	97.05.12.10.32.22;	author hope;	state Exp;
branches
	1.8.9.1.1.1
	1.8.9.1.2.1
	1.8.9.1.3.1;
next	;

1.8.9.1.1.1
date	97.07.28.18.18.07;	author daveb;	state Exp;
branches
	1.8.9.1.1.1.1.1;
next	;

1.8.9.1.1.1.1.1
date	97.10.07.11.43.05;	author jkbrook;	state Exp;
branches;
next	;

1.8.9.1.2.1
date	97.09.08.17.11.41;	author daveb;	state Exp;
branches;
next	;

1.8.9.1.3.1
date	97.09.09.14.07.17;	author daveb;	state Exp;
branches;
next	;

1.8.10.1
date	97.09.10.19.22.05;	author brucem;	state Exp;
branches;
next	;

1.8.11.1
date	97.09.11.20.53.21;	author daveb;	state Exp;
branches;
next	;

1.8.12.1
date	99.04.01.17.56.02;	author daveb;	state Exp;
branches;
next	;


desc
@The MirVariable module performs reverse dataflow analysis (live
variable analysis and optimisation) of a MirOptTypes.procedure.
This is the signature.
@


1.8
log
@Removed a number of duplicated signatures and structures
@
text
@(*  ==== LIVE VARIBALE ANALYSIS ====
 *            SIGNATURE
 *
 *  Copyright (C) 1992 Harlequin Ltd.
 *
 *  Description
 *  -----------
 *  Variable analysis determines the relationships between registers in
 *  order that they can be assigned to real machine registers.  It is also
 *  able to detect some instructions which have no useful effect, and
 *  discard them.
 *
 *  Diagnostics
 *  -----------
 *   0  no output
 *   1  procedure tags as they are processed
 *   2  flow and live variable maps
 *   3  blocks tags as they are analysed, instructions eliminated
 *   4  all live variable information as it is calculated
 *
 *  Revision Log
 *  ------------
 *  $Log: mirvariable.sml,v $
 *  Revision 1.7  1992/12/02  13:34:22  jont
 *  Removed superfluous MirTypes
 *
 *  Revision 1.6  1992/06/04  15:11:30  richard
 *  The variable analyser now updates a register graph rather than
 *  producing a list of clashes.
 *
 *  Revision 1.5  1992/05/27  13:27:38  richard
 *  Changes register Sets to Packs.
 *
 *  Revision 1.4  1992/02/27  17:13:03  richard
 *  This new signature goes with revision 1.4 of the functor.  The analysis
 *  now uses MirProcedure annotated procedures and returns a list of live
 *  register clashes for use by the register allocator as well as the
 *  optimised procedure.  Much faster.
 *
 *)


require "../utils/diagnostic";
require "registerallocator";


signature MIRVARIABLE =
  sig
    structure RegisterAllocator : REGISTERALLOCATOR
    structure Diagnostic	: DIAGNOSTIC


    (*  == Switches ==
     *
     *  eliminate	Instructions which define unused variables and have
     *                  no side effects are removed from the procedure iff
     *                  this flag is true.
     *)

    val eliminate : bool ref


    (*  === PERFORM LIVE VARIABLE ANALYSIS ON A PROCEDURE ===
     *
     *  Returns an optimised procedure and updates the graph with the
     *  register clash information.  After this stage the graph is ready for
     *  colouring by the register allocator.
     *)

    val analyse :
      RegisterAllocator.MirProcedure.procedure * RegisterAllocator.Graph ->
      RegisterAllocator.MirProcedure.procedure

  end
@


1.8.12.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a23 3
 * Revision 1.8  1992/12/08  19:52:44  jont
 * Removed a number of duplicated signatures and structures
 *
@


1.8.11.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a23 3
 * Revision 1.8  1992/12/08  19:52:44  jont
 * Removed a number of duplicated signatures and structures
 *
@


1.8.10.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a23 3
 * Revision 1.8  1992/12/08  19:52:44  jont
 * Removed a number of duplicated signatures and structures
 *
@


1.8.9.1
log
@branched from 1.8
@
text
@a23 3
 * Revision 1.8  1992/12/08  19:52:44  jont
 * Removed a number of duplicated signatures and structures
 *
@


1.8.9.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a23 3
 * Revision 1.8.9.1  1997/05/12  10:32:22  hope
 * branched from 1.8
 *
@


1.8.9.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a23 3
 * Revision 1.8.9.1  1997/05/12  10:32:22  hope
 * branched from 1.8
 *
@


1.8.9.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a23 3
 * Revision 1.8.9.1  1997/05/12  10:32:22  hope
 * branched from 1.8
 *
@


1.8.9.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a23 3
 * Revision 1.8.9.1.1.1  1997/07/28  18:18:07  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.8.8.1
log
@branched from 1.8
@
text
@a23 3
 * Revision 1.8  1992/12/08  19:52:44  jont
 * Removed a number of duplicated signatures and structures
 *
@


1.8.7.1
log
@branched from 1.8
@
text
@a23 3
 * Revision 1.8  1992/12/08  19:52:44  jont
 * Removed a number of duplicated signatures and structures
 *
@


1.8.7.1.1.1
log
@branched from 1.8.7.1
@
text
@a23 3
 * Revision 1.8.7.1  1996/12/17  17:46:03  hope
 * branched from 1.8
 *
@


1.8.6.1
log
@branched from 1.8
@
text
@a23 3
 * Revision 1.8  1992/12/08  19:52:44  jont
 * Removed a number of duplicated signatures and structures
 *
@


1.8.5.1
log
@branched from 1.8
@
text
@a23 3
 * Revision 1.8  1992/12/08  19:52:44  jont
 * Removed a number of duplicated signatures and structures
 *
@


1.8.5.1.1.1
log
@branched from 1.8.5.1
@
text
@a23 3
 * Revision 1.8.5.1  1996/11/14  12:47:14  hope
 * branched from 1.8
 *
@


1.8.4.1
log
@branched from 1.8
@
text
@a23 3
 * Revision 1.8  1992/12/08  19:52:44  jont
 * Removed a number of duplicated signatures and structures
 *
@


1.8.3.1
log
@branched from 1.8
@
text
@a23 3
 * Revision 1.8  1992/12/08  19:52:44  jont
 * Removed a number of duplicated signatures and structures
 *
@


1.8.2.1
log
@branched from 1.8
@
text
@a23 3
 * Revision 1.8  1992/12/08  19:52:44  jont
 * Removed a number of duplicated signatures and structures
 *
@


1.8.1.1
log
@Fork for bug fixing
@
text
@a23 3
 *  Revision 1.8  1992/12/08  19:52:44  jont
 *  Removed a number of duplicated signatures and structures
 *
@


1.7
log
@Removed superfluous MirTypes
@
text
@d24 3
a44 1
require "mirprocedure";
a48 1
    structure MirProcedure	: MIRPROCEDURE
a49 1
    sharing MirProcedure.MirTypes = RegisterAllocator.MirTypes
d70 3
a72 1
    val analyse : MirProcedure.procedure * RegisterAllocator.Graph -> MirProcedure.procedure
@


1.6
log
@The variable analyser now updates a register graph rather than
producing a list of clashes.
@
text
@d24 4
a40 1
require "mirtypes";
a45 1

a46 2

    structure MirTypes		: MIRTYPES
d49 1
a49 1
    sharing MirTypes = MirProcedure.MirTypes = RegisterAllocator.MirTypes
@


1.5
log
@Changes register Sets to Packs.
@
text
@d8 4
d24 3
d38 1
d48 2
a49 1
    sharing MirTypes = MirProcedure.MirTypes
d65 3
a67 7
     *  Returns an optimised procedure and lists of clashes between
     *  registers in the form:
     *    {gc = [({f1,f2,...}, {t1,t2,...}), ...], non_gc = ..., fp = ...}
     *  where {f1,f2,...} are MirTypes.GC.Ts which clashe with the
     *  MirTypes.GC.Ts in the set {r1,r2,...}.  A register `clashes'
     *  with another when it is live simultaneously and may not therefore be
     *  assigned to the same machine register.
d70 1
a70 6
    val analyse :
      MirProcedure.procedure ->
      MirProcedure.procedure *
      {gc     : (MirTypes.GC.Pack.T    * MirTypes.GC.Pack.T)    list,
       non_gc : (MirTypes.NonGC.Pack.T * MirTypes.NonGC.Pack.T) list,
       fp     : (MirTypes.FP.Pack.T    * MirTypes.FP.Pack.T)    list}
@


1.4
log
@This new signature goes with revision 1.4 of the functor.  The analysis
now uses MirProcedure annotated procedures and returns a list of live
register clashes for use by the register allocator as well as the
optimised procedure.  Much faster.
@
text
@d19 7
a25 1
 *  $Log$
d68 3
a70 3
      {gc     : (MirTypes.GC.Set.T    * MirTypes.GC.Set.T)    list,
       non_gc : (MirTypes.NonGC.Set.T * MirTypes.NonGC.Set.T) list,
       fp     : (MirTypes.FP.Set.T    * MirTypes.FP.Set.T)    list}
@


1.3
log
@Changed debugging output to use the Diagnostic module, which
prevents the debugging output strings being constructed even
if they aren't printed.
@
text
@d1 20
a20 1
(* mirvariable.sml the signature *)
a21 4
(*
$Log:	mirvariable.sml,v $
Revision 1.2  91/10/17  11:51:35  richard
Added Switches structure.
a22 6
Revision 1.1  91/09/18  18:15:47  richard
Initial revision

Copyright (c) 1991 Harlequin Ltd.
*)

d24 2
a25 2
require "switches";
require "miropttypes";
d32 4
a35 2
    structure MirOptTypes	: MIROPTTYPES
    structure Switches		: SWITCHES
d37 6
a42 6
    (* Diagnostic levels:
     *   0  no output
     *   1  procedure tags as they are processed
     *   2  block tags as they are processed
     *   3  changes to code as they are made
     *   4  all live variable information as it is calculated
d45 1
a45 1
    structure Diagnostic	: DIAGNOSTIC
d50 7
d59 6
a64 1
    val analyse : MirOptTypes.procedure -> MirOptTypes.procedure
@


1.2
log
@Added Switches structure.
@
text
@d5 3
d14 1
a19 1
sig
d21 1
a21 2
  structure MirOptTypes	: MIROPTTYPES
  structure Switches	: SWITCHES
d23 2
d26 7
a32 3
  (*  === PERFORM LIVE VARIABLE ANALYSIS ON A PROCEDURE ===
   *
   *)
d34 1
a34 1
  val analyse : MirOptTypes.procedure -> MirOptTypes.procedure
d36 8
a43 1
end
@


1.1
log
@Initial revision
@
text
@d4 4
a7 1
$Log:$
d11 1
d19 1
@
