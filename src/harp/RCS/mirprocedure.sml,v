head	1.21;
access;
symbols
	MLW_daveb_inline_1_4_99:1.21.11
	MLWorks_21c0_1999_03_25:1.21
	MLWorks_20c1_1998_08_20:1.21
	MLWorks_20c0_1998_08_04:1.21
	MLWorks_20b2c2_1998_06_19:1.21
	MLWorks_20b2_Windows_1998_06_12:1.21
	MLWorks_20b1c1_1998_05_07:1.21
	MLWorks_20b0_1998_04_07:1.21
	MLWorks_20b0_1998_03_20:1.21
	MLWorks_20m2_1998_02_16:1.21
	MLWorks_20m1_1997_10_23:1.21
	MLWorks_11r1:1.21.8.1.1.1.1
	MLWorks_workspace_97:1.21.10
	MLWorks_dt_wizard:1.21.9
	MLWorks_11c0_1997_09_09:1.21.8.1.1.1
	MLWorks_10r3:1.21.8.1.3
	MLWorks_10r2_551:1.21.8.1.2
	MLWorks_11:1.21.8.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.21.8.1
	MLWorks_20m0_1997_06_20:1.21
	MLWorks_1_0_r2c2_1997_06_14:1.21.8.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.21.8.1
	MLWorks_1_0_r2c1_1997_05_12:1.21.8
	MLWorks_BugFix_1997_04_24:1.21
	MLWorks_1_0_r2_Win32_1997_04_11:1.21
	MLWorks_1_0_r2_Unix_1997_04_04:1.21
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.21.6.1.1
	MLWorks_gui_1996_12_18:1.21.7
	MLWorks_1_0_Win32_1996_12_17:1.21.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.21.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.21.4.1
	MLWorks_1_0_Irix_1996_11_28:1.21.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.21.5
	MLWorks_1_0_Unix_1996_11_14:1.21.4
	MLWorks_Open_Beta2_1996_10_11:1.21.3
	MLWorks_License_dev:1.21.2
	MLWorks_1_open_beta_1996_09_13:1.21.1
	MLWorks_Open_Beta_1996_08_22:1.21
	MLWorks_Beta_1996_07_02:1.21
	MLWorks_Beta_1996_06_07:1.21
	MLWorks_Beta_1996_06_06:1.21
	MLWorks_Beta_1996_06_05:1.21
	MLWorks_Beta_1996_06_03:1.21
	MLWorks_Beta_1996_05_31:1.21
	MLWorks_Beta_1996_05_30:1.21
	ML_beta_release_12/08/94:1.18
	ML_beta_release_03/08/94:1.18
	ML_revised_beta_release_25/05/94:1.18
	ML_final_beta_release_02/03/94:1.18
	mlworks-28-01-1994:1.18
	Release:1.18
	mlworks-beta-01-09-1993:1.18
	MLWorks-1-0-4-29/01/1993:1.16
	MLWorks-1-0-3-21/12/1992:1.16
	MLWorks-1-0-2-15/12/1992:1.16
	MLWorks-1-0-1-04/12/1992:1.16
	checkpoint_17_08_92:1.14;
locks; strict;
comment	@ * @;


1.21
date	95.12.20.13.23.03;	author jont;	state Exp;
branches
	1.21.1.1
	1.21.2.1
	1.21.3.1
	1.21.4.1
	1.21.5.1
	1.21.6.1
	1.21.7.1
	1.21.8.1
	1.21.9.1
	1.21.10.1
	1.21.11.1;
next	1.20;

1.20
date	95.05.31.11.08.55;	author matthew;	state Exp;
branches;
next	1.19;

1.19
date	94.08.25.13.34.14;	author matthew;	state Exp;
branches;
next	1.18;

1.18
date	93.08.17.11.20.14;	author richard;	state Exp;
branches
	1.18.1.1;
next	1.17;

1.17
date	93.06.01.14.59.20;	author nosa;	state Exp;
branches;
next	1.16;

1.16
date	92.11.03.14.29.56;	author jont;	state Exp;
branches;
next	1.15;

1.15
date	92.08.26.15.34.20;	author jont;	state Exp;
branches;
next	1.14;

1.14
date	92.06.17.10.26.24;	author richard;	state Exp;
branches;
next	1.13;

1.13
date	92.06.09.14.17.57;	author richard;	state Exp;
branches;
next	1.12;

1.12
date	92.06.04.09.03.25;	author richard;	state Exp;
branches;
next	1.11;

1.11
date	92.06.01.10.18.59;	author richard;	state Exp;
branches;
next	1.10;

1.10
date	92.05.12.10.44.52;	author richard;	state Exp;
branches;
next	1.9;

1.9
date	92.05.05.09.50.10;	author richard;	state Exp;
branches;
next	1.8;

1.8
date	92.04.27.12.43.46;	author richard;	state Exp;
branches;
next	1.7;

1.7
date	92.04.21.10.57.46;	author jont;	state Exp;
branches;
next	1.6;

1.6
date	92.04.14.09.27.33;	author clive;	state Exp;
branches;
next	1.5;

1.5
date	92.04.09.14.55.27;	author richard;	state Exp;
branches;
next	1.4;

1.4
date	92.03.05.15.52.10;	author richard;	state Exp;
branches;
next	1.3;

1.3
date	92.03.04.14.27.24;	author richard;	state Exp;
branches;
next	1.2;

1.2
date	92.02.27.17.15.14;	author richard;	state Exp;
branches;
next	1.1;

1.1
date	92.02.20.16.42.48;	author richard;	state Exp;
branches;
next	;

1.18.1.1
date	93.08.17.11.20.14;	author jont;	state Exp;
branches;
next	;

1.21.1.1
date	96.09.13.11.14.23;	author hope;	state Exp;
branches;
next	;

1.21.2.1
date	96.10.07.16.04.50;	author hope;	state Exp;
branches;
next	;

1.21.3.1
date	96.10.17.11.23.04;	author hope;	state Exp;
branches;
next	;

1.21.4.1
date	96.11.14.12.47.22;	author hope;	state Exp;
branches
	1.21.4.1.1.1;
next	;

1.21.4.1.1.1
date	96.11.28.14.58.56;	author hope;	state Exp;
branches;
next	;

1.21.5.1
date	96.11.22.18.07.26;	author hope;	state Exp;
branches;
next	;

1.21.6.1
date	96.12.17.17.46.10;	author hope;	state Exp;
branches
	1.21.6.1.1.1;
next	;

1.21.6.1.1.1
date	97.02.24.11.35.46;	author hope;	state Exp;
branches;
next	;

1.21.7.1
date	96.12.18.09.40.09;	author hope;	state Exp;
branches;
next	;

1.21.8.1
date	97.05.12.10.32.29;	author hope;	state Exp;
branches
	1.21.8.1.1.1
	1.21.8.1.2.1
	1.21.8.1.3.1;
next	;

1.21.8.1.1.1
date	97.07.28.18.18.14;	author daveb;	state Exp;
branches
	1.21.8.1.1.1.1.1;
next	;

1.21.8.1.1.1.1.1
date	97.10.07.11.43.13;	author jkbrook;	state Exp;
branches;
next	;

1.21.8.1.2.1
date	97.09.08.17.11.47;	author daveb;	state Exp;
branches;
next	;

1.21.8.1.3.1
date	97.09.09.14.07.24;	author daveb;	state Exp;
branches;
next	;

1.21.9.1
date	97.09.10.19.22.12;	author brucem;	state Exp;
branches;
next	;

1.21.10.1
date	97.09.11.20.53.30;	author daveb;	state Exp;
branches;
next	;

1.21.11.1
date	99.04.01.17.56.06;	author daveb;	state Exp;
branches;
next	;


desc
@Annotated MIR procedure type
signature
@


1.21
log
@Add extra field to procedure_parameters to contain old (pre register allocation)
spill sizes. This is for the i386, where spill assignment is done in the backend
@
text
@(*  ==== MIR ANNOTATED PROCEDURE TYPE ====
 *               SIGNATURE
 *
 *  Copyright (C) 1992 Harlequin Ltd.
 *
 *  Description
 *  -----------
 *  This module provides a datatype similar in structure to
 *  MirTypes.procedure but parameterised with additional types attached to
 *  each procedure, block, and instruction.  Tools are provided for
 *  contructing and printing annotated procedures.
 *
 *  Revision Log
 *  ------------
 *  $Log: mirprocedure.sml,v $
 *  Revision 1.20  1995/05/31  11:08:55  matthew
 *  Removing show_timings
 *
 *  Revision 1.19  1994/08/25  13:34:14  matthew
 *  Simplified annotations
 *
 *  Revision 1.18  1993/08/17  11:20:14  richard
 *  Changed the annotation of raise instructions to model the fact that
 *  the raise might reach _any_ of the nexted continuation blocks.
 *
 *  Revision 1.17  1993/06/01  14:59:20  nosa
 *  Changed Option.T to Option.opt.
 *
 *  Revision 1.16  1992/11/03  14:29:56  jont
 *  Efficiency changes to use mononewmap for registers and tags
 *
 *  Revision 1.15  1992/08/26  15:34:20  jont
 *  Removed some redundant structures and sharing
 *
 *  Revision 1.14  1992/06/17  10:26:24  richard
 *  Added show_timings.
 *
 *  Revision 1.13  1992/06/09  14:17:57  richard
 *  Added registers annotation to procedures.
 *
 *  Revision 1.12  1992/06/04  09:03:25  richard
 *  Added copy'.
 *
 *  Revision 1.11  1992/06/01  10:18:59  richard
 *  Added mutable union, intersection, etc.
 *  Added sets of registers defined and referenced on a per-block
 *  basis.  Added nr_registers annotation to procedures.
 *
 *  Revision 1.10  1992/05/12  10:44:52  richard
 *  Moved set operations on triples of register sets here.
 *
 *  Revision 1.9  1992/05/05  09:50:10  richard
 *  Removed block-wise defined and referenced annotations as they were
 *  taking far too long to calculate.  This also removes the `first'
 *  annotation from instructions, but it wasn't used anyway.
 *
 *  Revision 1.8  1992/04/27  12:43:46  richard
 *  Added register annotations to blocks and `first definition' annotation to
 *  instructions.
 *
 *  Revision 1.7  1992/04/21  10:57:46  jont
 *  Added require "diagnostic"
 *
 *  Revision 1.6  1992/04/14  09:27:33  clive
 *  First version of the profiler
 *
 *  Revision 1.5  1992/04/09  14:55:27  richard
 *  Added uses_stack annotation.
 *
 *  Revision 1.4  1992/03/05  15:52:10  richard
 *  Added side_effects annotation.
 *
 *  Revision 1.3  1992/03/04  14:27:24  richard
 *  Added unannotate.
 *
 *  Revision 1.2  1992/02/27  17:15:14  richard
 *  Changed the way virtual registers are handled.  See MirTypes.
 *
 *  Revision 1.1  1992/02/20  16:42:48  richard
 *  Initial revision
 *
 *)

require "../utils/text";
require "../utils/diagnostic";
require "mirtypes";


signature MIRPROCEDURE =

  sig

    structure MirTypes		: MIRTYPES
    structure Diagnostic	: DIAGNOSTIC
    structure Text		: TEXT

    (*  == Operations on packed register sets ==
     *
     *  The register set annotations take the form of records with one entry
     *  for each of the register types.  These functions perform set
     *  operations on these records.
     *)

    val empty : {gc     : MirTypes.GC.Pack.T,
                 non_gc : MirTypes.NonGC.Pack.T,
                 fp     : MirTypes.FP.Pack.T}

    val empty_set : {gc     : MirTypes.GC.Set.T,
                     non_gc : MirTypes.NonGC.Set.T,
                     fp     : MirTypes.FP.Set.T}

    val equal : {gc     : MirTypes.GC.Pack.T,
                 non_gc : MirTypes.NonGC.Pack.T,
                 fp     : MirTypes.FP.Pack.T} *
                {gc     : MirTypes.GC.Pack.T,
                 non_gc : MirTypes.NonGC.Pack.T,
                 fp     : MirTypes.FP.Pack.T} -> bool

    val is_empty : {gc     : MirTypes.GC.Pack.T,
                    non_gc : MirTypes.NonGC.Pack.T,
                    fp     : MirTypes.FP.Pack.T} -> bool

    val union : {gc     : MirTypes.GC.Pack.T,
                 non_gc : MirTypes.NonGC.Pack.T,
                 fp     : MirTypes.FP.Pack.T} *
                {gc     : MirTypes.GC.Pack.T,
                 non_gc : MirTypes.NonGC.Pack.T,
                 fp     : MirTypes.FP.Pack.T} ->
                {gc     : MirTypes.GC.Pack.T,
                 non_gc : MirTypes.NonGC.Pack.T,
                 fp     : MirTypes.FP.Pack.T}

    val union' : {gc     : MirTypes.GC.Pack.T,
                  non_gc : MirTypes.NonGC.Pack.T,
                  fp     : MirTypes.FP.Pack.T} *
                 {gc     : MirTypes.GC.Pack.T,
                  non_gc : MirTypes.NonGC.Pack.T,
                  fp     : MirTypes.FP.Pack.T} ->
                 {gc     : MirTypes.GC.Pack.T,
                  non_gc : MirTypes.NonGC.Pack.T,
                  fp     : MirTypes.FP.Pack.T}

    val pack_set_union' :
                 {gc     : MirTypes.GC.Pack.T,
                  non_gc : MirTypes.NonGC.Pack.T,
                  fp     : MirTypes.FP.Pack.T} *
                 {gc     : MirTypes.GC.Set.T,
                  non_gc : MirTypes.NonGC.Set.T,
                  fp     : MirTypes.FP.Set.T} ->
                 {gc     : MirTypes.GC.Pack.T,
                  non_gc : MirTypes.NonGC.Pack.T,
                  fp     : MirTypes.FP.Pack.T}

    val pack_set_difference' :
                 {gc     : MirTypes.GC.Pack.T,
                  non_gc : MirTypes.NonGC.Pack.T,
                  fp     : MirTypes.FP.Pack.T} *
                 {gc     : MirTypes.GC.Set.T,
                  non_gc : MirTypes.NonGC.Set.T,
                  fp     : MirTypes.FP.Set.T} ->
                 {gc     : MirTypes.GC.Pack.T,
                  non_gc : MirTypes.NonGC.Pack.T,
                  fp     : MirTypes.FP.Pack.T}

    (* check if a set and a packed set are disjoint *)
    val set_pack_disjoint :
                 {gc     : MirTypes.GC.Set.T,
                  non_gc : MirTypes.NonGC.Set.T,


                  fp     : MirTypes.FP.Set.T} *
                 {gc     : MirTypes.GC.Pack.T,
                  non_gc : MirTypes.NonGC.Pack.T,
                  fp     : MirTypes.FP.Pack.T} ->
                 bool

    val intersection : {gc     : MirTypes.GC.Pack.T,
                        non_gc : MirTypes.NonGC.Pack.T,
                        fp     : MirTypes.FP.Pack.T} *
                       {gc     : MirTypes.GC.Pack.T,
                        non_gc : MirTypes.NonGC.Pack.T,
                        fp     : MirTypes.FP.Pack.T} ->
                       {gc     : MirTypes.GC.Pack.T,
                        non_gc : MirTypes.NonGC.Pack.T,
                        fp     : MirTypes.FP.Pack.T}

    val intersection' : {gc     : MirTypes.GC.Pack.T,
                         non_gc : MirTypes.NonGC.Pack.T,
                         fp     : MirTypes.FP.Pack.T} *
                        {gc     : MirTypes.GC.Pack.T,
                         non_gc : MirTypes.NonGC.Pack.T,
                         fp     : MirTypes.FP.Pack.T} ->
                        {gc     : MirTypes.GC.Pack.T,
                         non_gc : MirTypes.NonGC.Pack.T,
                         fp     : MirTypes.FP.Pack.T}

    val difference : {gc     : MirTypes.GC.Pack.T,
                      non_gc : MirTypes.NonGC.Pack.T,
                      fp     : MirTypes.FP.Pack.T} *
                     {gc     : MirTypes.GC.Pack.T,
                      non_gc : MirTypes.NonGC.Pack.T,
                      fp     : MirTypes.FP.Pack.T} ->
                     {gc     : MirTypes.GC.Pack.T,
                      non_gc : MirTypes.NonGC.Pack.T,
                      fp     : MirTypes.FP.Pack.T}

    val difference' : {gc     : MirTypes.GC.Pack.T,
                       non_gc : MirTypes.NonGC.Pack.T,
                       fp     : MirTypes.FP.Pack.T} *
                      {gc     : MirTypes.GC.Pack.T,
                       non_gc : MirTypes.NonGC.Pack.T,
                       fp     : MirTypes.FP.Pack.T} ->
                      {gc     : MirTypes.GC.Pack.T,
                       non_gc : MirTypes.NonGC.Pack.T,
                       fp     : MirTypes.FP.Pack.T}

    val pack : {gc     : MirTypes.GC.Set.T,
                non_gc : MirTypes.NonGC.Set.T,
                fp     : MirTypes.FP.Set.T} ->
               {gc     : MirTypes.GC.Pack.T,
                non_gc : MirTypes.NonGC.Pack.T,
                fp     : MirTypes.FP.Pack.T}

    val unpack : {gc     : MirTypes.GC.Pack.T,
                  non_gc : MirTypes.NonGC.Pack.T,
                  fp     : MirTypes.FP.Pack.T} ->
                 {gc     : MirTypes.GC.Set.T,
                  non_gc : MirTypes.NonGC.Set.T,
                  fp     : MirTypes.FP.Set.T}

    val copy' : {gc     : MirTypes.GC.Pack.T,
                 non_gc : MirTypes.NonGC.Pack.T,
                 fp     : MirTypes.FP.Pack.T} ->
                {gc     : MirTypes.GC.Pack.T,
                 non_gc : MirTypes.NonGC.Pack.T,
                 fp     : MirTypes.FP.Pack.T}



    (*  == Substitute registers in a procedure ==
     *
     *  Given functions which substitute GC, non GC and FP registers this
     *  function substitutes registers in MIR opcodes.  Lift this function
     *  where possible.
     *)

    val substitute :
      {gc     : MirTypes.GC.T    -> MirTypes.GC.T,
       non_gc : MirTypes.NonGC.T -> MirTypes.NonGC.T,
       fp     : MirTypes.FP.T    -> MirTypes.FP.T} ->
      MirTypes.opcode -> MirTypes.opcode

    (*  == Annotated Instruction ==
     *
     *  referenced	The set of registers required as input to the opcode.
     *  defined		The set of registers which have values stored in
     *			them by this opcode.
     *  branches	The set of other blocks that may be reached by
     *			executing this opcode via normal branching
     *			operations.
     *  except		A stack of exception continuation blocks that might
     *  		be reached via an exception handler if this
     *  		instruction is executed.
     *)

    datatype instruction =
      I of {defined	: {gc     : MirTypes.GC.Pack.T,
                           non_gc : MirTypes.NonGC.Pack.T,
                           fp     : MirTypes.FP.Pack.T},
            referenced	: {gc     : MirTypes.GC.Pack.T,
                           non_gc : MirTypes.NonGC.Pack.T,
                           fp     : MirTypes.FP.Pack.T},
            branches	: MirTypes.tag MirTypes.Set.Set,
            excepts	: MirTypes.tag list,
            opcode      : MirTypes.opcode}

    (*  == Annotated Block ==
     *
     *  reached		The set of tags of the blocks that can be reached by
     *			executing this block, including via exceptions.
     *  excepts		The stack (list) of exception blocks active on entry
     *			to the block.  The first tag is that of the current
     *			exception block.
     *  length		The number of instructions in the block (excluding 
     *                  comments).
     *)

    datatype block =
      B of {reached	: MirTypes.tag MirTypes.Set.Set,
            excepts	: MirTypes.tag list,
            length	: int} *
           instruction list

    (*  == Annotated Procedure ==
     *
     *  uses_stack	True if the procedure contains stack operations.
     *  nr_registers    The number of registers of each type used in the
     *                  procedure.  (Actually one greater than the higest
     *                  number returned by the pack function for the
     *                  register.)
     *  registers	The sets of registers actually used in the
     *                  procedure.
     *  parameters	The MirTypes.procedure_parameters (see MirTypes).
     *)

    datatype procedure =
      P of {uses_stack	 : bool,
            nr_registers : {gc : int, non_gc : int, fp : int},
            parameters   : MirTypes.procedure_parameters} *
      string * MirTypes.tag * (block) MirTypes.Map.T



    (*  === ANNOTATE AN MIR PROCEDURE ===
     *
     *  Maps a plain MIR procedure onto an annotated one, and may perform
     *  some optimisations in the process.  The annotated procedure may be
     *  changed using the constructors above, but care must be taken to
     *  preserve the validity of the annotations.  Adding or removing
     *  control flow instructions will probably muck them up.
     *)

    val annotate	: MirTypes.procedure -> procedure


    (*  === UNANNOTATE AN MIR PROCEDURE ===
     *
     *  Performs the opposite function to annotate, removing annotations.
     *  (It doesn't remove optimisations, however!)
     *)

    val unannotate	: procedure -> MirTypes.procedure



    (*  === CONVERT ANNOTATED PROCEDURE TO TEXT ===
     *
     *  The Text.T produced is suitable for output using the Diagnostic
     *  module.
     *)

    val to_text		: procedure -> Text.T

  end

@


1.21.11.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a15 4
 * Revision 1.21  1995/12/20  13:23:03  jont
 * Add extra field to procedure_parameters to contain old (pre register allocation)
 * spill sizes. This is for the i386, where spill assignment is done in the backend
 *
@


1.21.10.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a15 4
 * Revision 1.21  1995/12/20  13:23:03  jont
 * Add extra field to procedure_parameters to contain old (pre register allocation)
 * spill sizes. This is for the i386, where spill assignment is done in the backend
 *
@


1.21.9.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a15 4
 * Revision 1.21  1995/12/20  13:23:03  jont
 * Add extra field to procedure_parameters to contain old (pre register allocation)
 * spill sizes. This is for the i386, where spill assignment is done in the backend
 *
@


1.21.8.1
log
@branched from 1.21
@
text
@a15 4
 * Revision 1.21  1995/12/20  13:23:03  jont
 * Add extra field to procedure_parameters to contain old (pre register allocation)
 * spill sizes. This is for the i386, where spill assignment is done in the backend
 *
@


1.21.8.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a15 3
 * Revision 1.21.8.1  1997/05/12  10:32:29  hope
 * branched from 1.21
 *
@


1.21.8.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a15 3
 * Revision 1.21.8.1  1997/05/12  10:32:29  hope
 * branched from 1.21
 *
@


1.21.8.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a15 3
 * Revision 1.21.8.1  1997/05/12  10:32:29  hope
 * branched from 1.21
 *
@


1.21.8.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a15 3
 * Revision 1.21.8.1.1.1  1997/07/28  18:18:14  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.21.7.1
log
@branched from 1.21
@
text
@a15 4
 * Revision 1.21  1995/12/20  13:23:03  jont
 * Add extra field to procedure_parameters to contain old (pre register allocation)
 * spill sizes. This is for the i386, where spill assignment is done in the backend
 *
@


1.21.6.1
log
@branched from 1.21
@
text
@a15 4
 * Revision 1.21  1995/12/20  13:23:03  jont
 * Add extra field to procedure_parameters to contain old (pre register allocation)
 * spill sizes. This is for the i386, where spill assignment is done in the backend
 *
@


1.21.6.1.1.1
log
@branched from 1.21.6.1
@
text
@a15 3
 * Revision 1.21.6.1  1996/12/17  17:46:10  hope
 * branched from 1.21
 *
@


1.21.5.1
log
@branched from 1.21
@
text
@a15 4
 * Revision 1.21  1995/12/20  13:23:03  jont
 * Add extra field to procedure_parameters to contain old (pre register allocation)
 * spill sizes. This is for the i386, where spill assignment is done in the backend
 *
@


1.21.4.1
log
@branched from 1.21
@
text
@a15 4
 * Revision 1.21  1995/12/20  13:23:03  jont
 * Add extra field to procedure_parameters to contain old (pre register allocation)
 * spill sizes. This is for the i386, where spill assignment is done in the backend
 *
@


1.21.4.1.1.1
log
@branched from 1.21.4.1
@
text
@a15 3
 * Revision 1.21.4.1  1996/11/14  12:47:22  hope
 * branched from 1.21
 *
@


1.21.3.1
log
@branched from 1.21
@
text
@a15 4
 * Revision 1.21  1995/12/20  13:23:03  jont
 * Add extra field to procedure_parameters to contain old (pre register allocation)
 * spill sizes. This is for the i386, where spill assignment is done in the backend
 *
@


1.21.2.1
log
@branched from 1.21
@
text
@a15 4
 * Revision 1.21  1995/12/20  13:23:03  jont
 * Add extra field to procedure_parameters to contain old (pre register allocation)
 * spill sizes. This is for the i386, where spill assignment is done in the backend
 *
@


1.21.1.1
log
@branched from 1.21
@
text
@a15 4
 * Revision 1.21  1995/12/20  13:23:03  jont
 * Add extra field to procedure_parameters to contain old (pre register allocation)
 * spill sizes. This is for the i386, where spill assignment is done in the backend
 *
@


1.20
log
@Removing show_timings
@
text
@d16 3
a83 1
require "../utils/option";
a93 1
    structure Option		: OPTION
@


1.19
log
@Simplified annotations
@
text
@d16 3
a95 3
    val show_timings : bool ref


a251 3
 


a262 2
     *  side_effects	True iff the instruction has an effect other than
     *                  defining registers.
d273 2
a274 3
            except	: MirTypes.tag list,
            side_effects: bool} *
           MirTypes.opcode
@


1.18
log
@Changed the annotation of raise instructions to model the fact that
the raise might reach _any_ of the nexted continuation blocks.
@
text
@d16 4
d107 4
d142 34
a265 2
     *  exits		True iff the instruction definitely exits the
     *                  procedure.
a278 1
            exits	: bool,
a285 2
     *  from		The set of tags of the blocks that reach this block;
     *                  the dual of `reached' above.
a288 1
     *  exits		True if the block may exit the procedure.
a290 2
     *  defined		The set of registers defined in the block.
     *  referenced      The set of registers referenced in the block.
d296 1
a296 8
            exits	: bool,
            length	: int,
            defined	: {gc     : MirTypes.GC.Pack.T,
                           non_gc : MirTypes.NonGC.Pack.T,
                           fp     : MirTypes.FP.Pack.T},
            referenced	: {gc     : MirTypes.GC.Pack.T,
                           non_gc : MirTypes.NonGC.Pack.T,
                           fp     : MirTypes.FP.Pack.T}} *
a300 2
     *  exits		The set of tags of the blocks which may exit the
     *			procedure.
d312 1
a312 2
      P of {exits	 : MirTypes.tag MirTypes.Set.Set,
            uses_stack	 : bool,
a313 3
            registers	 : {gc     : MirTypes.GC.Pack.T,
                            non_gc : MirTypes.NonGC.Pack.T,
                            fp     : MirTypes.FP.Pack.T},
@


1.18.1.1
log
@Fork for bug fixing
@
text
@a15 4
 *  Revision 1.18  1993/08/17  11:20:14  richard
 *  Changed the annotation of raise instructions to model the fact that
 *  the raise might reach _any_ of the nexted continuation blocks.
 *
@


1.17
log
@Changed Option.T to Option.opt.
@
text
@d16 3
d221 3
a223 2
     *  except		An optional block that might be reached via the
     *			exception handler if this instruction is executed.
d238 1
a238 1
            except	: MirTypes.tag Option.opt,
@


1.16
log
@Efficiency changes to use mononewmap for registers and tags
@
text
@d16 3
d234 1
a234 1
            except	: MirTypes.tag Option.T,
@


1.15
log
@Removed some redundant structures and sharing
@
text
@d16 3
d287 1
a287 1
      string * MirTypes.tag * (MirTypes.tag, block) MirTypes.Debugger_Types.Datatypes.NewMap.T
@


1.14
log
@Added show_timings.
@
text
@d16 3
a64 3

require "../utils/newmap";
require "../utils/set";
a75 2
    structure Map		: NEWMAP
    structure Set		: SET
d227 1
a227 1
            branches	: MirTypes.tag Set.Set,
d250 1
a250 1
      B of {reached	: MirTypes.tag Set.Set,
d277 1
a277 1
      P of {exits	 : MirTypes.tag Set.Set,
d284 1
a284 1
      string * MirTypes.tag * (MirTypes.tag, block) Map.T
@


1.13
log
@Added registers annotation to procedures.
@
text
@d16 3
d81 2
@


1.12
log
@Added copy'.
@
text
@d16 3
d185 16
d265 5
a269 4
     *                  procedure. 
     *  pack            Functions to efficiently map registers onto integers
     *                  in the range 0 to N-1 where N is the number of
     *                  registers of the type.
d277 3
@


1.11
log
@Added mutable union, intersection, etc.
Added sets of registers defined and referenced on a per-block
basis.  Added nr_registers annotation to procedures.
@
text
@d16 5
d172 7
@


1.10
log
@Moved set operations on triples of register sets here.
@
text
@d16 3
d72 1
a72 1
    (*  == Operations on register sets ==
d79 89
a167 44
    val empty : {gc     : MirTypes.GC.Set.T,
                 non_gc : MirTypes.NonGC.Set.T,
                 fp     : MirTypes.FP.Set.T}

    val equal : {gc     : MirTypes.GC.Set.T,
                 non_gc : MirTypes.NonGC.Set.T,
                 fp     : MirTypes.FP.Set.T} *
                {gc     : MirTypes.GC.Set.T,
                 non_gc : MirTypes.NonGC.Set.T,
                 fp     : MirTypes.FP.Set.T} -> bool

    val is_empty : {gc     : MirTypes.GC.Set.T,
                    non_gc : MirTypes.NonGC.Set.T,
                    fp     : MirTypes.FP.Set.T} -> bool

    val union : {gc     : MirTypes.GC.Set.T,
                 non_gc : MirTypes.NonGC.Set.T,
                 fp     : MirTypes.FP.Set.T} *
                {gc     : MirTypes.GC.Set.T,
                 non_gc : MirTypes.NonGC.Set.T,
                 fp     : MirTypes.FP.Set.T} ->
                {gc     : MirTypes.GC.Set.T,
                 non_gc : MirTypes.NonGC.Set.T,
                 fp     : MirTypes.FP.Set.T}

    val intersection : {gc     : MirTypes.GC.Set.T,
                        non_gc : MirTypes.NonGC.Set.T,
                        fp     : MirTypes.FP.Set.T} *
                       {gc     : MirTypes.GC.Set.T,
                        non_gc : MirTypes.NonGC.Set.T,
                        fp     : MirTypes.FP.Set.T} ->
                       {gc     : MirTypes.GC.Set.T,
                        non_gc : MirTypes.NonGC.Set.T,
                        fp     : MirTypes.FP.Set.T}

    val difference : {gc     : MirTypes.GC.Set.T,
                      non_gc : MirTypes.NonGC.Set.T,
                      fp     : MirTypes.FP.Set.T} *
                     {gc     : MirTypes.GC.Set.T,
                      non_gc : MirTypes.NonGC.Set.T,
                      fp     : MirTypes.FP.Set.T} ->
                     {gc     : MirTypes.GC.Set.T,
                      non_gc : MirTypes.NonGC.Set.T,
                      fp     : MirTypes.FP.Set.T}
d187 6
a192 6
      I of {defined	: {gc     : MirTypes.GC.Set.T,
                           non_gc : MirTypes.NonGC.Set.T,
                           fp     : MirTypes.FP.Set.T},
            referenced	: {gc     : MirTypes.GC.Set.T,
                           non_gc : MirTypes.NonGC.Set.T,
                           fp     : MirTypes.FP.Set.T},
d211 2
d219 7
a225 1
            length	: int} *
d233 5
d242 4
a245 3
      P of {exits	: MirTypes.tag Set.Set,
            uses_stack	: bool,
            parameters  : MirTypes.procedure_parameters} *
@


1.9
log
@Removed block-wise defined and referenced annotations as they were
taking far too long to calculate.  This also removes the `first'
annotation from instructions, but it wasn't used anyway.
@
text
@d16 5
d69 53
d155 2
@


1.8
log
@Added register annotations to blocks and `first definition' annotation to
instructions.
@
text
@d16 4
a68 2
     *  first           A subset of `defined': those registers defined for
     *                  the first time within a block.
a86 3
            first	: {gc     : MirTypes.GC.Set.T,
                           non_gc : MirTypes.NonGC.Set.T,
                           fp     : MirTypes.FP.Set.T},
a102 2
     *  defined		The set of registers defined in the block.
     *  referenced	The set of registers referenced in the block.
d109 1
a109 7
            length	: int,
	    defined	: {gc     : MirTypes.GC.Set.T,
                           non_gc : MirTypes.NonGC.Set.T,
                           fp     : MirTypes.FP.Set.T},
            referenced	: {gc     : MirTypes.GC.Set.T,
                           non_gc : MirTypes.NonGC.Set.T,
                           fp     : MirTypes.FP.Set.T}} *
@


1.7
log
@Added require "diagnostic"
@
text
@d16 3
d65 2
d85 3
d102 4
d111 8
a118 1
            exits	: bool} *
@


1.6
log
@First version of the profiler
@
text
@d16 3
d41 1
@


1.5
log
@Added uses_stack annotation.
@
text
@d16 3
d110 1
a110 1
           MirTypes.tag * (MirTypes.tag, block) Map.T
@


1.4
log
@Added side_effects annotation.
@
text
@d16 3
d99 1
d105 1
@


1.3
log
@Added unannotate.
@
text
@d16 3
d57 4
a60 1
     *  exits		True if the instruction definitely exits the procedure.
d72 2
a73 1
            exits	: bool} *
@


1.2
log
@Changed the way virtual registers are handled.  See MirTypes.
@
text
@d16 3
d109 9
@


1.1
log
@Initial revision
@
text
@d15 4
a18 1
 *  $Log$
d55 6
a60 2
      I of {defined	: MirTypes.any_register Set.Set,
            referenced	: MirTypes.any_register Set.Set,
d86 1
d90 2
a91 1
      P of {exits	: MirTypes.tag Set.Set} *
@
