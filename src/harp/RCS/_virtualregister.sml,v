head	1.9;
access;
symbols
	MLW_daveb_inline_1_4_99:1.9.4
	MLWorks_21c0_1999_03_25:1.9
	MLWorks_20c1_1998_08_20:1.9
	MLWorks_20c0_1998_08_04:1.9
	MLWorks_20b2c2_1998_06_19:1.9
	MLWorks_20b2_Windows_1998_06_12:1.9
	MLWorks_20b1c1_1998_05_07:1.9
	MLWorks_20b0_1998_04_07:1.9
	MLWorks_20b0_1998_03_20:1.9
	MLWorks_20m2_1998_02_16:1.9
	MLWorks_20m1_1997_10_23:1.9
	MLWorks_11r1:1.9.1.1.1.1.1
	MLWorks_workspace_97:1.9.3
	MLWorks_dt_wizard:1.9.2
	MLWorks_11c0_1997_09_09:1.9.1.1.1.1
	MLWorks_10r3:1.9.1.1.3
	MLWorks_10r2_551:1.9.1.1.2
	MLWorks_11:1.9.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.9.1.1
	MLWorks_20m0_1997_06_20:1.9
	MLWorks_1_0_r2c2_1997_06_14:1.9.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.9.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.9.1
	MLWorks_BugFix_1997_04_24:1.9
	MLWorks_1_0_r2_Win32_1997_04_11:1.9
	MLWorks_1_0_r2_Unix_1997_04_04:1.9
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.8.6.1.1
	MLWorks_gui_1996_12_18:1.8.7
	MLWorks_1_0_Win32_1996_12_17:1.8.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.8.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.8.4.1
	MLWorks_1_0_Irix_1996_11_28:1.8.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.8.5
	MLWorks_1_0_Unix_1996_11_14:1.8.4
	MLWorks_Open_Beta2_1996_10_11:1.8.3
	MLWorks_License_dev:1.8.2
	MLWorks_1_open_beta_1996_09_13:1.8.1
	MLWorks_Open_Beta_1996_08_22:1.8
	MLWorks_Beta_1996_07_02:1.8
	MLWorks_Beta_1996_06_07:1.8
	MLWorks_Beta_1996_06_06:1.8
	MLWorks_Beta_1996_06_05:1.8
	MLWorks_Beta_1996_06_03:1.8
	MLWorks_Beta_1996_05_31:1.8
	MLWorks_Beta_1996_05_30:1.8
	ML_beta_release_12/08/94:1.7
	ML_beta_release_03/08/94:1.7
	ML_revised_beta_release_25/05/94:1.7
	ML_final_beta_release_02/03/94:1.7
	mlworks-28-01-1994:1.7
	Release:1.7
	mlworks-beta-01-09-1993:1.7
	MLWorks-1-0-4-29/01/1993:1.6
	MLWorks-1-0-3-21/12/1992:1.6
	MLWorks-1-0-2-15/12/1992:1.6
	MLWorks-1-0-1-04/12/1992:1.6
	checkpoint_17_08_92:1.5;
locks; strict;
comment	@ * @;


1.9
date	96.11.28.13.45.26;	author matthew;	state Exp;
branches
	1.9.1.1
	1.9.2.1
	1.9.3.1
	1.9.4.1;
next	1.8;

1.8
date	94.08.15.09.40.00;	author matthew;	state Exp;
branches
	1.8.1.1
	1.8.2.1
	1.8.3.1
	1.8.4.1
	1.8.5.1
	1.8.6.1
	1.8.7.1;
next	1.7;

1.7
date	93.05.18.14.41.57;	author jont;	state Exp;
branches
	1.7.1.1;
next	1.6;

1.6
date	92.10.29.17.26.55;	author jont;	state Exp;
branches;
next	1.5;

1.5
date	92.06.10.17.05.01;	author richard;	state Exp;
branches;
next	1.4;

1.4
date	92.06.01.09.42.08;	author richard;	state Exp;
branches;
next	1.3;

1.3
date	92.05.18.14.13.57;	author richard;	state Exp;
branches;
next	1.2;

1.2
date	92.03.31.14.04.54;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	92.03.02.14.27.29;	author richard;	state Exp;
branches;
next	;

1.7.1.1
date	93.05.18.14.41.57;	author jont;	state Exp;
branches;
next	;

1.8.1.1
date	96.09.13.11.14.12;	author hope;	state Exp;
branches;
next	;

1.8.2.1
date	96.10.07.16.04.41;	author hope;	state Exp;
branches;
next	;

1.8.3.1
date	96.10.17.11.22.55;	author hope;	state Exp;
branches;
next	;

1.8.4.1
date	96.11.14.12.47.10;	author hope;	state Exp;
branches
	1.8.4.1.1.1;
next	;

1.8.4.1.1.1
date	96.11.28.14.58.45;	author hope;	state Exp;
branches;
next	;

1.8.5.1
date	96.11.22.18.07.15;	author hope;	state Exp;
branches;
next	;

1.8.6.1
date	96.12.17.17.45.59;	author hope;	state Exp;
branches
	1.8.6.1.1.1;
next	;

1.8.6.1.1.1
date	97.02.24.11.35.34;	author hope;	state Exp;
branches;
next	;

1.8.7.1
date	96.12.18.09.39.59;	author hope;	state Exp;
branches;
next	;

1.9.1.1
date	97.05.12.10.32.19;	author hope;	state Exp;
branches
	1.9.1.1.1.1
	1.9.1.1.2.1
	1.9.1.1.3.1;
next	;

1.9.1.1.1.1
date	97.07.28.18.18.04;	author daveb;	state Exp;
branches
	1.9.1.1.1.1.1.1;
next	;

1.9.1.1.1.1.1.1
date	97.10.07.11.43.01;	author jkbrook;	state Exp;
branches;
next	;

1.9.1.1.2.1
date	97.09.08.17.11.37;	author daveb;	state Exp;
branches;
next	;

1.9.1.1.3.1
date	97.09.09.14.07.14;	author daveb;	state Exp;
branches;
next	;

1.9.2.1
date	97.09.10.19.21.59;	author brucem;	state Exp;
branches;
next	;

1.9.3.1
date	97.09.11.20.53.15;	author daveb;	state Exp;
branches;
next	;

1.9.4.1
date	99.04.01.17.55.59;	author daveb;	state Exp;
branches;
next	;


desc
@Virtual Register Abstract Type
Functor
@


1.9
log
@[Bug #1812]
Adding reset function
@
text
@(*  ==== VIRTUAL REGISTER ABSTRACT TYPE ====
 *                 FUNCTOR
 *
 *  Copyright (C) 1992 Harlequin Ltd.
 *
 *  Implementation
 *  --------------
 *  Virtual registers are implemented as integers and an IntSet structure is
 *  used to provide the efficient set implementation.
 *
 *  Revision Log
 *  ------------
 *  $Log: _virtualregister.sml,v $
 * Revision 1.8  1994/08/15  09:40:00  matthew
 * Removed hash function
 *
 *  Revision 1.7  1993/05/18  14:41:57  jont
 *  Removed Integer parameter
 *
 *  Revision 1.6  1992/10/29  17:26:55  jont
 *  Added Map structure for mononewmaps to allow efficient implementation
 *  of lookup tables for integer based values
 *
 *  Revision 1.5  1992/06/10  17:05:01  richard
 *  Added missing require.
 *
 *  Revision 1.4  1992/06/01  09:42:08  richard
 *  Added register Packs, making `range' obsolete.
 *
 *  Revision 1.3  1992/05/18  14:13:57  richard
 *  Added `range' function.
 *  Added `int_to_text' and `int_to_string' parameters to functor.
 *
 *  Revision 1.2  1992/03/31  14:04:54  jont
 *  Added require text
 *
 *  Revision 1.1  1992/03/02  14:27:29  richard
 *  Initial revision
 *
 *)


require "../utils/text";
require "../utils/intset";
require "../utils/mutableintset";
require "../utils/intnewmap";
require "virtualregister";


functor VirtualRegister (
  structure IntSet	: INTSET
  structure SmallIntSet : MUTABLEINTSET
  structure Map         : INTNEWMAP
  structure Text	: TEXT

  val int_to_text	: int -> Text.T
  val int_to_string	: int -> string

  sharing Text = IntSet.Text = SmallIntSet.Text

) : VIRTUALREGISTER =

  struct

    structure Text = Text
    structure Set = IntSet
    structure Map = Map
    structure Pack = SmallIntSet

    type T = int

    val source = ref 0

    fun new () = (source := !source-1; !source)
    fun reset () = source := 0

    val order = op< : int * int -> bool
    fun pack r = r
    fun unpack r = r

    fun pack_set set    = Set.reduce Pack.add' (Pack.empty, set)
    fun unpack_set pack = Pack.reduce Set.add (Set.empty, pack)

    val to_string = int_to_string
    val to_text = int_to_text

  end
@


1.9.4.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a13 4
 * Revision 1.9  1996/11/28  13:45:26  matthew
 * [Bug #1812]
 * Adding reset function
 *
@


1.9.3.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a13 4
 * Revision 1.9  1996/11/28  13:45:26  matthew
 * [Bug #1812]
 * Adding reset function
 *
@


1.9.2.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a13 4
 * Revision 1.9  1996/11/28  13:45:26  matthew
 * [Bug #1812]
 * Adding reset function
 *
@


1.9.1.1
log
@branched from 1.9
@
text
@a13 4
 * Revision 1.9  1996/11/28  13:45:26  matthew
 * [Bug #1812]
 * Adding reset function
 *
@


1.9.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a13 3
 * Revision 1.9.1.1  1997/05/12  10:32:19  hope
 * branched from 1.9
 *
@


1.9.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a13 3
 * Revision 1.9.1.1  1997/05/12  10:32:19  hope
 * branched from 1.9
 *
@


1.9.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a13 3
 * Revision 1.9.1.1  1997/05/12  10:32:19  hope
 * branched from 1.9
 *
@


1.9.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a13 3
 * Revision 1.9.1.1.1.1  1997/07/28  18:18:04  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.8
log
@Removed hash function
@
text
@d14 3
a57 1
  val source		: int ref
d72 1
a72 1
    val _ = source := 0
d75 2
@


1.8.7.1
log
@branched from 1.8
@
text
@a13 3
 * Revision 1.8  1994/08/15  09:40:00  matthew
 * Removed hash function
 *
@


1.8.6.1
log
@branched from 1.8
@
text
@a13 3
 * Revision 1.8  1994/08/15  09:40:00  matthew
 * Removed hash function
 *
@


1.8.6.1.1.1
log
@branched from 1.8.6.1
@
text
@a13 3
 * Revision 1.8.6.1  1996/12/17  17:45:59  hope
 * branched from 1.8
 *
@


1.8.5.1
log
@branched from 1.8
@
text
@a13 3
 * Revision 1.8  1994/08/15  09:40:00  matthew
 * Removed hash function
 *
@


1.8.4.1
log
@branched from 1.8
@
text
@a13 3
 * Revision 1.8  1994/08/15  09:40:00  matthew
 * Removed hash function
 *
@


1.8.4.1.1.1
log
@branched from 1.8.4.1
@
text
@a13 3
 * Revision 1.8.4.1  1996/11/14  12:47:10  hope
 * branched from 1.8
 *
@


1.8.3.1
log
@branched from 1.8
@
text
@a13 3
 * Revision 1.8  1994/08/15  09:40:00  matthew
 * Removed hash function
 *
@


1.8.2.1
log
@branched from 1.8
@
text
@a13 3
 * Revision 1.8  1994/08/15  09:40:00  matthew
 * Removed hash function
 *
@


1.8.1.1
log
@branched from 1.8
@
text
@a13 3
 * Revision 1.8  1994/08/15  09:40:00  matthew
 * Removed hash function
 *
@


1.7
log
@Removed Integer parameter
@
text
@d14 3
d74 2
a75 3
    fun hash r = r
    val pack = hash
    val unpack = hash
@


1.7.1.1
log
@Fork for bug fixing
@
text
@a13 3
 *  Revision 1.7  1993/05/18  14:41:57  jont
 *  Removed Integer parameter
 *
@


1.6
log
@Added Map structure for mononewmaps to allow efficient implementation
of lookup tables for integer based values
@
text
@d14 4
a37 1
require "../utils/integer";
a47 1
  structure Integer	: INTEGER
@


1.5
log
@Added missing require.
@
text
@d14 3
d37 1
a41 1

d44 1
d60 1
@


1.4
log
@Added register Packs, making `range' obsolete.
@
text
@d14 3
d33 1
@


1.3
log
@Added `range' function.
Added `int_to_text' and `int_to_string' parameters to functor.
@
text
@d14 4
a26 1
require "../utils/counter";
a34 1
  structure Counter	: COUNTER
d36 1
d42 1
d44 1
a44 1
  sharing Text = IntSet.Text
d52 1
d56 3
a58 2
    val _ = Counter.reset_counter 0
    val new = Counter.counter
d61 6
a69 14
    exception Range of int
    fun range 0 = (fn r => raise Range r, [])
      | range n =
        if n < 0 then raise Range n else
          let
            fun build (done, 0) = rev done
              | build (done, n) = build (Counter.counter () :: done, n-1)
            val base = Counter.counter ()
            val top = base + n
            val list = build ([], n-1)
          in
            (fn r => if r < base orelse r >= top then raise Range r else r - base,
             base::list)
          end
@


1.2
log
@Added require text
@
text
@d14 3
d37 3
d47 1
a47 5
    structure Set =
      struct
        open IntSet
        type element = int
      end
d55 2
a56 2
    val to_string = Integer.makestring
    val to_text = Text.from_string o to_string
d58 14
@


1.1
log
@Initial revision
@
text
@d13 4
a16 1
 *  $Log$
d21 1
@
