head	1.11;
access;
symbols
	MLW_daveb_inline_1_4_99:1.11.12
	MLWorks_21c0_1999_03_25:1.11
	MLWorks_20c1_1998_08_20:1.11
	MLWorks_20c0_1998_08_04:1.11
	MLWorks_20b2c2_1998_06_19:1.11
	MLWorks_20b2_Windows_1998_06_12:1.11
	MLWorks_20b1c1_1998_05_07:1.11
	MLWorks_20b0_1998_04_07:1.11
	MLWorks_20b0_1998_03_20:1.11
	MLWorks_20m2_1998_02_16:1.11
	MLWorks_20m1_1997_10_23:1.11
	MLWorks_11r1:1.11.9.1.1.1.1
	MLWorks_workspace_97:1.11.11
	MLWorks_dt_wizard:1.11.10
	MLWorks_11c0_1997_09_09:1.11.9.1.1.1
	MLWorks_10r3:1.11.9.1.3
	MLWorks_10r2_551:1.11.9.1.2
	MLWorks_11:1.11.9.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.11.9.1
	MLWorks_20m0_1997_06_20:1.11
	MLWorks_1_0_r2c2_1997_06_14:1.11.9.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.11.9.1
	MLWorks_1_0_r2c1_1997_05_12:1.11.9
	MLWorks_BugFix_1997_04_24:1.11
	MLWorks_1_0_r2_Win32_1997_04_11:1.11
	MLWorks_1_0_r2_Unix_1997_04_04:1.11
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.11.7.1.1
	MLWorks_gui_1996_12_18:1.11.8
	MLWorks_1_0_Win32_1996_12_17:1.11.7
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.11.5.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.11.5.1
	MLWorks_1_0_Irix_1996_11_28:1.11.5.1.1
	MLWorks_1_0_Win32_1996_11_22:1.11.6
	MLWorks_1_0_Unix_1996_11_14:1.11.5
	MLWorks_Open_Beta2_1996_10_11:1.11.4
	MLWorks_License_dev:1.11.3
	MLWorks_1_open_beta_1996_09_13:1.11.2
	MLWorks_Open_Beta_1996_08_22:1.11
	MLWlexer_basis_io_1996:1.11.1
	MLWorks_Beta_1996_07_02:1.11
	MLWorks_Beta_1996_06_07:1.11
	MLWorks_Beta_1996_06_06:1.11
	MLWorks_Beta_1996_06_05:1.11
	MLWorks_Beta_1996_06_03:1.11
	MLWorks_Beta_1996_05_31:1.11
	MLWorks_Beta_1996_05_30:1.11
	ML_beta_release_12/08/94:1.10
	ML_beta_release_03/08/94:1.10
	ML_revised_beta_release_25/05/94:1.10
	ML_final_beta_release_02/03/94:1.10
	mlworks-28-01-1994:1.10
	Release:1.10
	mlworks-beta-01-09-1993:1.10
	MLWorks-1-0-4-29/01/1993:1.8
	MLWorks-1-0-3-21/12/1992:1.8
	MLWorks-1-0-2-15/12/1992:1.8
	MLWorks-1-0-1-04/12/1992:1.7
	checkpoint_17_08_92:1.4;
locks; strict;
comment	@ * @;


1.11
date	95.03.17.14.38.46;	author matthew;	state Exp;
branches
	1.11.1.1
	1.11.2.1
	1.11.3.1
	1.11.4.1
	1.11.5.1
	1.11.6.1
	1.11.7.1
	1.11.8.1
	1.11.9.1
	1.11.10.1
	1.11.11.1
	1.11.12.1;
next	1.10;

1.10
date	93.03.29.12.47.58;	author daveb;	state Exp;
branches
	1.10.1.1;
next	1.9;

1.9
date	93.03.18.17.27.54;	author daveb;	state Exp;
branches;
next	1.8;

1.8
date	92.12.08.15.13.18;	author matthew;	state Exp;
branches;
next	1.7;

1.7
date	92.11.05.15.27.03;	author matthew;	state Exp;
branches;
next	1.6;

1.6
date	92.09.04.08.41.20;	author richard;	state Exp;
branches;
next	1.5;

1.5
date	92.08.31.16.58.33;	author richard;	state Exp;
branches;
next	1.4;

1.4
date	92.08.15.14.30.30;	author davidt;	state Exp;
branches;
next	1.3;

1.3
date	92.08.05.14.42.04;	author jont;	state Exp;
branches;
next	1.2;

1.2
date	92.02.03.12.47.15;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	91.09.06.16.49.34;	author nickh;	state Exp;
branches;
next	;

1.10.1.1
date	93.03.29.12.47.58;	author jont;	state Exp;
branches;
next	;

1.11.1.1
date	96.08.19.11.49.26;	author hope;	state Exp;
branches;
next	1.11.1.2;

1.11.1.2
date	96.08.20.11.33.39;	author davids;	state Exp;
branches;
next	;

1.11.2.1
date	96.09.13.11.17.50;	author hope;	state Exp;
branches;
next	;

1.11.3.1
date	96.10.07.16.07.39;	author hope;	state Exp;
branches;
next	;

1.11.4.1
date	96.10.17.11.25.53;	author hope;	state Exp;
branches;
next	;

1.11.5.1
date	96.11.14.12.51.03;	author hope;	state Exp;
branches
	1.11.5.1.1.1;
next	;

1.11.5.1.1.1
date	96.11.28.15.02.08;	author hope;	state Exp;
branches;
next	;

1.11.6.1
date	96.11.22.18.10.20;	author hope;	state Exp;
branches;
next	;

1.11.7.1
date	96.12.17.17.48.57;	author hope;	state Exp;
branches
	1.11.7.1.1.1;
next	;

1.11.7.1.1.1
date	97.02.24.11.39.01;	author hope;	state Exp;
branches;
next	;

1.11.8.1
date	96.12.18.09.42.59;	author hope;	state Exp;
branches;
next	;

1.11.9.1
date	97.05.12.10.35.27;	author hope;	state Exp;
branches
	1.11.9.1.1.1
	1.11.9.1.2.1
	1.11.9.1.3.1;
next	;

1.11.9.1.1.1
date	97.07.28.18.20.50;	author daveb;	state Exp;
branches
	1.11.9.1.1.1.1.1;
next	;

1.11.9.1.1.1.1.1
date	97.10.07.11.46.10;	author jkbrook;	state Exp;
branches;
next	;

1.11.9.1.2.1
date	97.09.08.17.14.17;	author daveb;	state Exp;
branches;
next	;

1.11.9.1.3.1
date	97.09.09.14.10.03;	author daveb;	state Exp;
branches;
next	;

1.11.10.1
date	97.09.10.19.25.58;	author brucem;	state Exp;
branches;
next	;

1.11.11.1
date	97.09.11.20.56.07;	author daveb;	state Exp;
branches;
next	;

1.11.12.1
date	99.04.01.17.57.30;	author daveb;	state Exp;
branches;
next	;


desc
@Rules for the lexer.
@


1.11
log
@Using ints as char representation
@
text
@(*
$Log: lexrules.sml,v $
Revision 1.10  1993/03/29  12:47:58  daveb
Replaced lexers for strings and comments with simple functions.
Removed check_end_state, since EOFs are now annotated by LexerState.
Added InBuffer to arguments of functions in rules.

Revision 1.9  1993/03/18  17:27:54  daveb
Action functions now take an options parameter.

Revision 1.8  1992/12/08  15:13:18  matthew
Hack to handle unclosed comments and strings

Revision 1.7  1992/11/05  15:27:03  matthew
Changed Error structure to Info

Revision 1.6  1992/09/04  08:41:20  richard
Installed central error reporting mechanism.

Revision 1.5  1992/08/31  16:58:33  richard
Replaced LexBasics error handler with Error.

Revision 1.4  1992/08/15  14:30:30  davidt
Removed the self reference and changed the type of rules to
accept functions with argument type int list instead of string.

Revision 1.3  1992/08/05  14:42:04  jont
Removed some structures and sharing

Revision 1.2  1992/02/03  12:47:15  jont
Changed type of result to be an eqtype

Revision 1.1  1991/09/06  16:49:34  nickh
Initial revision

Copyright (c) 1991 Harlequin Ltd.
*)

require "../main/info";
require "inbuffer";
require "regexp";

signature LEXRULES = 
  sig
    structure RegExp : REGEXP
    structure Info : INFO
    structure InBuffer : INBUFFER

    type options
    eqtype Result

    val eof : Result
    val read_comment: InBuffer.InBuffer * int -> Result
    val continue_string:
      Info.Location.T * InBuffer.InBuffer * Info.options * int list -> Result
    val rules :
      (RegExp.RegExp *
       ((Info.Location.T * InBuffer.InBuffer *
	 int list * (Info.options * options)) -> Result)
      ) list
  end
@


1.11.12.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a2 3
 * Revision 1.11  1995/03/17  14:38:46  matthew
 * Using ints as char representation
 *
@


1.11.11.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a2 3
 * Revision 1.11  1995/03/17  14:38:46  matthew
 * Using ints as char representation
 *
@


1.11.10.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a2 3
 * Revision 1.11  1995/03/17  14:38:46  matthew
 * Using ints as char representation
 *
@


1.11.9.1
log
@branched from 1.11
@
text
@a2 3
 * Revision 1.11  1995/03/17  14:38:46  matthew
 * Using ints as char representation
 *
@


1.11.9.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a2 3
 * Revision 1.11.9.1  1997/05/12  10:35:27  hope
 * branched from 1.11
 *
@


1.11.9.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a2 3
 * Revision 1.11.9.1  1997/05/12  10:35:27  hope
 * branched from 1.11
 *
@


1.11.9.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a2 3
 * Revision 1.11.9.1  1997/05/12  10:35:27  hope
 * branched from 1.11
 *
@


1.11.9.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a2 3
 * Revision 1.11.9.1.1.1  1997/07/28  18:20:50  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.11.8.1
log
@branched from 1.11
@
text
@a2 3
 * Revision 1.11  1995/03/17  14:38:46  matthew
 * Using ints as char representation
 *
@


1.11.7.1
log
@branched from 1.11
@
text
@a2 3
 * Revision 1.11  1995/03/17  14:38:46  matthew
 * Using ints as char representation
 *
@


1.11.7.1.1.1
log
@branched from 1.11.7.1
@
text
@a2 3
 * Revision 1.11.7.1  1996/12/17  17:48:57  hope
 * branched from 1.11
 *
@


1.11.6.1
log
@branched from 1.11
@
text
@a2 3
 * Revision 1.11  1995/03/17  14:38:46  matthew
 * Using ints as char representation
 *
@


1.11.5.1
log
@branched from 1.11
@
text
@a2 3
 * Revision 1.11  1995/03/17  14:38:46  matthew
 * Using ints as char representation
 *
@


1.11.5.1.1.1
log
@branched from 1.11.5.1
@
text
@a2 3
 * Revision 1.11.5.1  1996/11/14  12:51:03  hope
 * branched from 1.11
 *
@


1.11.4.1
log
@branched from 1.11
@
text
@a2 3
 * Revision 1.11  1995/03/17  14:38:46  matthew
 * Using ints as char representation
 *
@


1.11.3.1
log
@branched from 1.11
@
text
@a2 3
 * Revision 1.11  1995/03/17  14:38:46  matthew
 * Using ints as char representation
 *
@


1.11.2.1
log
@branched from 1.11
@
text
@a2 3
 * Revision 1.11  1995/03/17  14:38:46  matthew
 * Using ints as char representation
 *
@


1.11.1.1
log
@branched from 1.11
@
text
@a2 3
 * Revision 1.11  1995/03/17  14:38:46  matthew
 * Using ints as char representation
 *
@


1.11.1.2
log
@Use position instead of inbuffer.
@
text
@a2 3
 * Revision 1.11.1.1  1996/08/19  11:49:26  hope
 * branched from 1.11
 *
d43 1
a43 1
require "position";
d50 1
a50 1
    structure Position : POSITION
d56 1
a56 1
    val read_comment: Position.stream_pos * int -> Result
d58 1
a58 1
      Info.Location.T * Position.stream_pos * Info.options * int list -> Result
d61 1
a61 1
       ((Info.Location.T * Position.stream_pos *
@


1.10
log
@Replaced lexers for strings and comments with simple functions.
Removed check_end_state, since EOFs are now annotated by LexerState.
Added InBuffer to arguments of functions in rules.
@
text
@d3 5
d55 1
a55 1
      Info.Location.T * InBuffer.InBuffer * Info.options * string list -> Result
@


1.10.1.1
log
@Fork for bug fixing
@
text
@a2 5
Revision 1.10  1993/03/29  12:47:58  daveb
Replaced lexers for strings and comments with simple functions.
Removed check_end_state, since EOFs are now annotated by LexerState.
Added InBuffer to arguments of functions in rules.

@


1.9
log
@Action functions now take an options parameter.
@
text
@d3 3
d35 1
d42 1
d45 1
d47 9
a55 7
    val check_end_state : Info.options * Info.Location.T -> unit
    eqtype result
    val eof : result
    val rules : (RegExp.RegExp *
		  ((Info.Location.T * int list * (Info.options * options)) ->
		    result)
		) list list
@


1.8
log
@Hack to handle unclosed comments and strings
@
text
@d3 3
d39 2
d44 4
a47 1
    val rules : (RegExp.RegExp * ((Info.Location.T * int list * Info.options) -> result)) list list
@


1.7
log
@Changed Error structure to Info
@
text
@d3 3
d35 2
a36 1
  
@


1.6
log
@Installed central error reporting mechanism.
@
text
@d3 3
d25 1
a25 1
require "../main/error";
d31 1
a31 1
    structure Error : ERROR
d35 1
a35 1
    val rules : (RegExp.RegExp * ((Error.Location.T * int list) -> result)) list list
@


1.5
log
@Replaced LexBasics error handler with Error.
@
text
@d3 3
d32 1
a32 1
    val rules : (RegExp.RegExp * ((Error.location * int list) -> result)) list list
@


1.4
log
@Removed the self reference and changed the type of rules to
accept functions with argument type int list instead of string.
@
text
@d3 4
d18 2
a20 1
require "lexbasics";
a23 1

d25 1
a25 1
    structure LexBasics : LEXBASICS
d29 1
a29 1
    val rules : (RegExp.RegExp * (int list -> result)) list list
@


1.3
log
@Removed some structures and sharing
@
text
@d3 3
d25 1
a25 2
    val self : (int -> result) ref
    val rules : (RegExp.RegExp * (string -> result)) list list
@


1.2
log
@Changed type of result to be an eqtype
@
text
@d3 3
a12 1
require "../basics/token";
a18 1
    structure Token : TOKEN
@


1.1
log
@Initial revision
@
text
@d2 4
a5 1
$Log$
d19 1
a19 1
    type result
@
