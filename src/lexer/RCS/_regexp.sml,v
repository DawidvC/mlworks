head	1.5;
access;
symbols
	MLW_daveb_inline_1_4_99:1.5.8
	MLWorks_21c0_1999_03_25:1.5
	MLWorks_20c1_1998_08_20:1.5
	MLWorks_20c0_1998_08_04:1.5
	MLWorks_20b2c2_1998_06_19:1.5
	MLWorks_20b2_Windows_1998_06_12:1.5
	MLWorks_20b1c1_1998_05_07:1.5
	MLWorks_20b0_1998_04_07:1.5
	MLWorks_20b0_1998_03_20:1.5
	MLWorks_20m2_1998_02_16:1.5
	MLWorks_20m1_1997_10_23:1.5
	MLWorks_11r1:1.5.5.1.1.1.1
	MLWorks_workspace_97:1.5.7
	MLWorks_dt_wizard:1.5.6
	MLWorks_11c0_1997_09_09:1.5.5.1.1.1
	MLWorks_10r3:1.5.5.1.3
	MLWorks_10r2_551:1.5.5.1.2
	MLWorks_11:1.5.5.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.5.5.1
	MLWorks_20m0_1997_06_20:1.5
	MLWorks_1_0_r2c2_1997_06_14:1.5.5.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.5.5.1
	MLWorks_1_0_r2c1_1997_05_12:1.5.5
	MLWorks_BugFix_1997_04_24:1.5
	MLWorks_1_0_r2_Win32_1997_04_11:1.5
	MLWorks_1_0_r2_Unix_1997_04_04:1.5
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.5.3.1.1
	MLWorks_gui_1996_12_18:1.5.4
	MLWorks_1_0_Win32_1996_12_17:1.5.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.5.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.5.1.1
	MLWorks_1_0_Irix_1996_11_28:1.5.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.5.2
	MLWorks_1_0_Unix_1996_11_14:1.5.1
	MLWorks_Open_Beta2_1996_10_11:1.4.4
	MLWorks_License_dev:1.4.3
	MLWorks_1_open_beta_1996_09_13:1.4.2
	MLWorks_Open_Beta_1996_08_22:1.4
	MLWlexer_basis_io_1996:1.4.1
	MLWorks_Beta_1996_07_02:1.4
	MLWorks_Beta_1996_06_07:1.4
	MLWorks_Beta_1996_06_06:1.4
	MLWorks_Beta_1996_06_05:1.4
	MLWorks_Beta_1996_06_03:1.4
	MLWorks_Beta_1996_05_31:1.4
	MLWorks_Beta_1996_05_30:1.4
	ML_beta_release_12/08/94:1.2
	ML_beta_release_03/08/94:1.2
	ML_revised_beta_release_25/05/94:1.2
	ML_final_beta_release_02/03/94:1.2
	mlworks-28-01-1994:1.2
	Release:1.2
	mlworks-beta-01-09-1993:1.2
	MLWorks-1-0-4-29/01/1993:1.2
	MLWorks-1-0-3-21/12/1992:1.2
	MLWorks-1-0-2-15/12/1992:1.2
	MLWorks-1-0-1-04/12/1992:1.2
	checkpoint_17_08_92:1.2;
locks; strict;
comment	@ * @;


1.5
date	96.10.30.16.33.59;	author io;	state Exp;
branches
	1.5.1.1
	1.5.2.1
	1.5.3.1
	1.5.4.1
	1.5.5.1
	1.5.6.1
	1.5.7.1
	1.5.8.1;
next	1.4;

1.4
date	96.04.30.14.47.42;	author jont;	state Exp;
branches
	1.4.1.1
	1.4.2.1
	1.4.3.1
	1.4.4.1;
next	1.3;

1.3
date	95.07.17.10.09.24;	author jont;	state Exp;
branches;
next	1.2;

1.2
date	92.08.15.16.20.21;	author davidt;	state Exp;
branches
	1.2.1.1;
next	1.1;

1.1
date	91.09.06.16.45.36;	author nickh;	state Exp;
branches;
next	;

1.2.1.1
date	92.08.15.16.20.21;	author jont;	state Exp;
branches;
next	;

1.4.1.1
date	96.08.19.11.49.19;	author hope;	state Exp;
branches;
next	;

1.4.2.1
date	96.09.13.11.17.44;	author hope;	state Exp;
branches;
next	;

1.4.3.1
date	96.10.07.16.07.33;	author hope;	state Exp;
branches;
next	;

1.4.4.1
date	96.10.17.11.25.47;	author hope;	state Exp;
branches;
next	;

1.5.1.1
date	96.11.14.12.50.54;	author hope;	state Exp;
branches
	1.5.1.1.1.1;
next	;

1.5.1.1.1.1
date	96.11.28.15.02.02;	author hope;	state Exp;
branches;
next	;

1.5.2.1
date	96.11.22.18.10.14;	author hope;	state Exp;
branches;
next	;

1.5.3.1
date	96.12.17.17.48.51;	author hope;	state Exp;
branches
	1.5.3.1.1.1;
next	;

1.5.3.1.1.1
date	97.02.24.11.38.55;	author hope;	state Exp;
branches;
next	;

1.5.4.1
date	96.12.18.09.42.53;	author hope;	state Exp;
branches;
next	;

1.5.5.1
date	97.05.12.10.35.22;	author hope;	state Exp;
branches
	1.5.5.1.1.1
	1.5.5.1.2.1
	1.5.5.1.3.1;
next	;

1.5.5.1.1.1
date	97.07.28.18.20.43;	author daveb;	state Exp;
branches
	1.5.5.1.1.1.1.1;
next	;

1.5.5.1.1.1.1.1
date	97.10.07.11.46.02;	author jkbrook;	state Exp;
branches;
next	;

1.5.5.1.2.1
date	97.09.08.17.14.12;	author daveb;	state Exp;
branches;
next	;

1.5.5.1.3.1
date	97.09.09.14.09.58;	author daveb;	state Exp;
branches;
next	;

1.5.6.1
date	97.09.10.19.25.53;	author brucem;	state Exp;
branches;
next	;

1.5.7.1
date	97.09.11.20.56.02;	author daveb;	state Exp;
branches;
next	;

1.5.8.1
date	99.04.01.17.57.27;	author daveb;	state Exp;
branches;
next	;


desc
@Regular expressions.
@


1.5
log
@[Bug #1614]
basifying String
@
text
@(*
$Log: _regexp.sml,v $
 * Revision 1.4  1996/04/30  14:47:42  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
 * Revision 1.3  1995/07/17  10:09:24  jont
 * Add hex digit class
 *
Revision 1.2  1992/08/15  16:20:21  davidt
Removed a coupld of redundant functions and added the
negClass function.

Revision 1.1  1991/09/06  16:45:36  nickh
Initial revision

Copyright (c) 1991 Harlequin Ltd.
*)

require "../utils/lists";
require "regexp";


functor RegExp (structure Lists : LISTS) : REGEXP =
  struct
    datatype RegExp = 
      DOT of RegExp * RegExp
    | STAR of RegExp
    | BAR of RegExp * RegExp
    | NODE of string
    | CLASS of string
    | EPSILON

    fun plusRE r = DOT(r,STAR(r))

    fun sequenceRE [] = EPSILON
      | sequenceRE (r::[]) = r
      | sequenceRE (r::rs) = DOT(r,sequenceRE(rs))

    local
      fun upto(m, n) = if m > n then [] else chr m :: upto(m+1, n)
      fun class(m, n) = CLASS(implode (upto(m, n)))
    in
      val printable = class(32, 126)
      val letter = CLASS "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnbopqrstuvwxyz"
      val digit = CLASS "0123456789"
      val hexDigit = CLASS "0123456789abcdefABCDEF"
      val any = class(0, 255)
      fun negClass s = CLASS(implode (Lists.difference (upto(0, 255), explode s)))
    end
  end
@


1.5.8.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a2 4
 * Revision 1.5  1996/10/30  16:33:59  io
 * [Bug #1614]
 * basifying String
 *
@


1.5.7.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a2 4
 * Revision 1.5  1996/10/30  16:33:59  io
 * [Bug #1614]
 * basifying String
 *
@


1.5.6.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a2 4
 * Revision 1.5  1996/10/30  16:33:59  io
 * [Bug #1614]
 * basifying String
 *
@


1.5.5.1
log
@branched from 1.5
@
text
@a2 4
 * Revision 1.5  1996/10/30  16:33:59  io
 * [Bug #1614]
 * basifying String
 *
@


1.5.5.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a2 3
 * Revision 1.5.5.1  1997/05/12  10:35:22  hope
 * branched from 1.5
 *
@


1.5.5.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a2 3
 * Revision 1.5.5.1  1997/05/12  10:35:22  hope
 * branched from 1.5
 *
@


1.5.5.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a2 3
 * Revision 1.5.5.1  1997/05/12  10:35:22  hope
 * branched from 1.5
 *
@


1.5.5.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a2 3
 * Revision 1.5.5.1.1.1  1997/07/28  18:20:43  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.5.4.1
log
@branched from 1.5
@
text
@a2 4
 * Revision 1.5  1996/10/30  16:33:59  io
 * [Bug #1614]
 * basifying String
 *
@


1.5.3.1
log
@branched from 1.5
@
text
@a2 4
 * Revision 1.5  1996/10/30  16:33:59  io
 * [Bug #1614]
 * basifying String
 *
@


1.5.3.1.1.1
log
@branched from 1.5.3.1
@
text
@a2 3
 * Revision 1.5.3.1  1996/12/17  17:48:51  hope
 * branched from 1.5
 *
@


1.5.2.1
log
@branched from 1.5
@
text
@a2 4
 * Revision 1.5  1996/10/30  16:33:59  io
 * [Bug #1614]
 * basifying String
 *
@


1.5.1.1
log
@branched from 1.5
@
text
@a2 4
 * Revision 1.5  1996/10/30  16:33:59  io
 * [Bug #1614]
 * basifying String
 *
@


1.5.1.1.1.1
log
@branched from 1.5.1.1
@
text
@a2 3
 * Revision 1.5.1.1  1996/11/14  12:50:54  hope
 * branched from 1.5
 *
@


1.4
log
@String functions explode, implode, chr and ord now only available from String
io functions and types
instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
now only available from MLWorks.IO
@
text
@d3 6
d25 1
d43 2
a44 2
      fun upto(m, n) = if m > n then [] else String.chr m :: upto(m+1, n)
      fun class(m, n) = CLASS(String.implode (upto(m, n)))
d51 1
a51 1
      fun negClass s = CLASS(String.implode(Lists.difference (upto(0, 255), String.explode s)))
@


1.4.4.1
log
@branched from 1.4
@
text
@a2 6
 * Revision 1.4  1996/04/30  14:47:42  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
@


1.4.3.1
log
@branched from 1.4
@
text
@a2 6
 * Revision 1.4  1996/04/30  14:47:42  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
@


1.4.2.1
log
@branched from 1.4
@
text
@a2 6
 * Revision 1.4  1996/04/30  14:47:42  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
@


1.4.1.1
log
@branched from 1.4
@
text
@a2 6
 * Revision 1.4  1996/04/30  14:47:42  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
@


1.3
log
@Add hex digit class
@
text
@d3 3
d36 2
a37 2
      fun upto(m, n) = if m > n then [] else chr m :: upto(m+1, n)
      fun class(m, n) = CLASS(implode (upto(m, n)))
d44 1
a44 1
      fun negClass s = CLASS(implode(Lists.difference (upto(0, 255), explode s)))
@


1.2
log
@Removed a coupld of redundant functions and added the
negClass function.
@
text
@d3 4
d39 1
@


1.2.1.1
log
@Fork for bug fixing
@
text
@a2 4
Revision 1.2  1992/08/15  16:20:21  davidt
Removed a coupld of redundant functions and added the
negClass function.

@


1.1
log
@Initial revision
@
text
@d2 4
a5 1
$Log$
d8 2
d12 1
a12 1
functor RegExp () : REGEXP =
a13 1

d29 2
a30 1
      fun upto m n = if m > n then [] else m:: upto (m+1) n
d32 1
a32 3
      fun mkclass il = CLASS (implode (map chr il))
      fun classfromto m n = mkclass (upto m n)
      val printable = classfromto 32 126
d35 2
a36 1
      val any = classfromto 0 255
@
