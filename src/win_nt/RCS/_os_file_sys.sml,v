head	1.14;
access;
symbols
	MLW_daveb_inline_1_4_99:1.14.1
	MLWorks_21c0_1999_03_25:1.14
	MLWorks_20c1_1998_08_20:1.12
	MLWorks_20c0_1998_08_04:1.11
	MLWorks_20b2c2_1998_06_19:1.11
	MLWorks_20b2_Windows_1998_06_12:1.10
	MLWorks_20b1c1_1998_05_07:1.10
	MLWorks_20b0_1998_04_07:1.10
	MLWorks_20b0_1998_03_20:1.10
	MLWorks_20m2_1998_02_16:1.10
	MLWorks_20m1_1997_10_23:1.10
	MLWorks_11r1:1.9.1.2.1.1.1
	MLWorks_workspace_97:1.10.2
	MLWorks_dt_wizard:1.10.1
	MLWorks_11c0_1997_09_09:1.9.1.2.1.1
	MLWorks_10r3:1.9.1.2.3
	MLWorks_10r2_551:1.9.1.2.2
	MLWorks_11:1.9.1.2.1
	MLWorks_1_0_r2c2_1997_07_28:1.9.1.2
	MLWorks_20m0_1997_06_20:1.10
	MLWorks_1_0_r2c2_1997_06_14:1.9.1.2
	MLWorks_1_0_r2c1_released_1997_05_23:1.9.1.2
	MLWorks_1_0_r2c1_1997_05_12:1.9.1
	MLWorks_BugFix_1997_04_24:1.9
	MLWorks_1_0_r2_Win32_1997_04_11:1.9
	MLWorks_1_0_r2_Unix_1997_04_04:1.9
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.7.3.1.1
	MLWorks_gui_1996_12_18:1.7.4
	MLWorks_1_0_Win32_1996_12_17:1.7.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.7.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.7.1.1
	MLWorks_1_0_Irix_1996_11_28:1.7.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.7.2
	MLWorks_1_0_Unix_1996_11_14:1.7.1
	MLWorks_Open_Beta2_1996_10_11:1.5.3
	MLWorks_License_dev:1.5.2
	MLWorks_1_open_beta_1996_09_13:1.5.1
	MLWorks_Open_Beta_1996_08_22:1.5
	MLWorks_Beta_1996_07_02:1.5
	MLWorks_Beta_1996_06_07:1.2
	MLWorks_Beta_1996_06_06:1.2
	MLWorks_Beta_1996_06_05:1.2
	MLWorks_Beta_1996_06_03:1.1
	MLWorks_Beta_1996_05_31:1.1
	MLWorks_Beta_1996_05_30:1.1;
locks; strict;
comment	@ *  @;


1.14
date	99.03.14.12.12.56;	author daveb;	state Exp;
branches
	1.14.1.1;
next	1.13;

1.13
date	99.02.02.16.02.11;	author mitchell;	state Exp;
branches;
next	1.12;

1.12
date	98.08.13.10.22.54;	author jont;	state Exp;
branches;
next	1.11;

1.11
date	98.06.17.12.47.28;	author johnh;	state Exp;
branches;
next	1.10;

1.10
date	97.05.21.10.22.10;	author stephenb;	state Exp;
branches
	1.10.1.1
	1.10.2.1;
next	1.9;

1.9
date	97.04.02.09.20.31;	author johnh;	state Exp;
branches
	1.9.1.1;
next	1.8;

1.8
date	97.03.31.13.15.19;	author johnh;	state Exp;
branches;
next	1.7;

1.7
date	96.10.30.20.32.19;	author io;	state Exp;
branches
	1.7.1.1
	1.7.2.1
	1.7.3.1
	1.7.4.1;
next	1.6;

1.6
date	96.10.21.15.24.45;	author jont;	state Exp;
branches;
next	1.5;

1.5
date	96.06.13.11.34.12;	author stephenb;	state Exp;
branches
	1.5.1.1
	1.5.2.1
	1.5.3.1;
next	1.4;

1.4
date	96.06.13.10.52.40;	author stephenb;	state Exp;
branches;
next	1.3;

1.3
date	96.06.06.08.40.28;	author stephenb;	state Exp;
branches;
next	1.2;

1.2
date	96.06.04.12.44.19;	author stephenb;	state Exp;
branches;
next	1.1;

1.1
date	96.05.17.09.31.26;	author stephenb;	state Exp;
branches;
next	;

1.5.1.1
date	96.09.13.11.43.51;	author hope;	state Exp;
branches;
next	;

1.5.2.1
date	96.10.07.16.37.04;	author hope;	state Exp;
branches;
next	;

1.5.3.1
date	96.10.17.11.56.03;	author hope;	state Exp;
branches;
next	;

1.7.1.1
date	96.11.14.13.24.24;	author hope;	state Exp;
branches
	1.7.1.1.1.1;
next	;

1.7.1.1.1.1
date	96.11.28.15.35.16;	author hope;	state Exp;
branches;
next	;

1.7.2.1
date	96.11.22.18.41.30;	author hope;	state Exp;
branches;
next	;

1.7.3.1
date	96.12.17.18.20.27;	author hope;	state Exp;
branches
	1.7.3.1.1.1;
next	;

1.7.3.1.1.1
date	97.02.24.12.15.03;	author hope;	state Exp;
branches;
next	;

1.7.4.1
date	96.12.18.10.16.01;	author hope;	state Exp;
branches;
next	;

1.9.1.1
date	97.05.12.10.54.06;	author hope;	state Exp;
branches;
next	1.9.1.2;

1.9.1.2
date	97.05.21.13.17.44;	author daveb;	state Exp;
branches
	1.9.1.2.1.1
	1.9.1.2.2.1
	1.9.1.2.3.1;
next	;

1.9.1.2.1.1
date	97.07.28.18.37.00;	author daveb;	state Exp;
branches
	1.9.1.2.1.1.1.1;
next	;

1.9.1.2.1.1.1.1
date	97.10.07.12.02.05;	author jkbrook;	state Exp;
branches;
next	;

1.9.1.2.2.1
date	97.09.08.17.29.08;	author daveb;	state Exp;
branches;
next	;

1.9.1.2.3.1
date	97.09.09.14.27.05;	author daveb;	state Exp;
branches;
next	;

1.10.1.1
date	97.09.10.19.45.24;	author brucem;	state Exp;
branches;
next	;

1.10.2.1
date	97.09.11.21.12.30;	author daveb;	state Exp;
branches;
next	;

1.14.1.1
date	99.04.01.18.10.33;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
Renamed from _win_ntfilesys in line with latest file name conventions.
@


1.14
log
@[Bug #190521]
OS.FileSys.readDir now returns an option type.
@
text
@(* Copyright Harlequin Ltd. 1994.
 *
 * $Log: _os_file_sys.sml,v $
 *  Revision 1.13  1999/02/02  16:02:11  mitchell
 *  [Bug #190500]
 *  Remove redundant require statements
 *
 *  Revision 1.12  1998/08/13  10:22:54  jont
 *  [Bug #30468]
 *  Change types of mkAbsolute and mkRelative to uses records with names fields
 *
 *  Revision 1.11  1998/06/17  12:47:28  johnh
 *  [Bug #50083]
 *  Change opendir to add '/*' in runtime function.
 *
 *  Revision 1.10  1997/05/21  10:22:10  stephenb
 *  [Bug #30142]
 *  Change the dir_handle from an int to a Word32.word ref.
 *
 *  Revision 1.9  1997/04/02  09:20:31  johnh
 *  [Bug #2006]
 *  Made readDir return a non-canonical path so that it can be tested
 *  against the empty string when the end of a directory has been reached.
 *
 *  Revision 1.8  1997/03/31  13:15:19  johnh
 *  [Bug #1967]
 *  Added calls to Path.mkCanonical.
 *
 *  Revision 1.7  1996/10/30  20:32:19  io
 *  [Bug #1614]
 *  remove toplevel String.
 *
 *  Revision 1.6  1996/10/21  15:24:45  jont
 *  Remove references to basis.toplevel
 *
 *  Revision 1.5  1996/06/13  11:34:12  stephenb
 *  Implement isDir and setTime.
 *
 *  Revision 1.3  1996/06/06  08:40:28  stephenb
 *  OS.FileSys.{open,read,rewind,close}Dir are now pulled through directly
 *  from the runtime rather than via Win32.  This is because they have
 *  been reimplemented in the runtime and there is now no point in pulling
 *  them through Win32 first.
 *
 *  Revision 1.2  1996/06/04  12:44:19  stephenb
 *  Add more functions to support the latest revised basis definition.
 *
 *  Revision 1.1  1996/05/17  09:31:26  stephenb
 *  new unit
 *  Renamed from _win_ntfilesys in line with latest file name conventions.
 *
 * Revision 1.12  1996/05/16  15:52:47  stephenb
 * Add a bunch of stubs so that it at least looks like it implements
 * the OS_FILE_SYS interface.
 *
 * Revision 1.11  1996/05/08  12:31:03  stephenb
 * Rename filesys to be os_filesys in line with latest file naming conventions.
 *
 * Revision 1.10  1996/05/01  09:22:58  stephenb
 * Add some more missing functions.
 * Specifically: fileSize and modTime
 *
 * Revision 1.9  1996/04/18  15:26:07  jont
 * initbasis moves to basis
 *
 * Revision 1.8  1996/03/28  13:58:49  stephenb
 * FILE_SYS -> OS_FILE_SYS
 *
 * Revision 1.7  1996/03/12  15:42:48  matthew
 * Adding chDir and setDir
 *
 * Revision 1.6  1996/01/18  16:23:58  stephenb
 * OS reorganisation: Since the pervasive library no longer
 * contains OS specific stuff, parameterise the functor with
 * the Win32 structure.
 *
 * Revision 1.5  1996/01/15  14:44:55  matthew
 * Adding directory functions
 *
 * Revision 1.4  1995/12/04  16:28:34  matthew
 * Adding directory functions
 *
 * Revision 1.3  1995/04/20  19:43:48  daveb
 * filesys moved from utils to initbasis..
 * Changed names to match intial basis.
 * Moved BadHomeName to getenv.
 *
 * Revision 1.2  1995/04/12  13:30:46  jont
 * Change FILESYS to FILE_SYS
 *
 * Revision 1.1  1995/01/25  17:15:41  daveb
 * new unit
 * The OS.FileSys structure from the basis.
 *
 *)

require "^.basis.os_path";
require "^.basis.os_file_sys";
require "^.basis.__word";
require "^.basis.__word32";
require "^.basis.__string";
require "^.basis.__word";
require "__time";
require "win32";


functor OSFileSys 
  (structure Win32: WIN32
   structure Path : OS_PATH): OS_FILE_SYS =
struct
  val env = MLWorks.Internal.Runtime.environment


  (* If you make any changes to the dirstream types make sure that
   * you also make appropriate changes to rts/src/OS/Win32/win32.c
   *)


  (* This is a Win32 HANDLE. *)
  type dir_handle = Word32.word


  (* There are a number of ways the dirstream could be represented in ML
   * which take into account the two important issues about the type :-
   *
   * a) there is no equivalent of rewinddir in the Win32 interface
   *    and so to achieve it you need to close the handle and reopen it.
   * b) it is inherently imperative i.e. the directory handle and 
   *    filename need to change behind the scenes.
   * 
   * To deal with a) the directory name is stored in the dirstream so that
   * it is available in case a rewind is called.
   *
   * To deal with b) the file name and dir handle are refs.
   *)
  datatype dirstream = DIRSTREAM of string * dir_handle ref * string ref

  val openDir : string -> dirstream = env "OS.FileSys.openDir"

  val readDir : dirstream -> string option = env "OS.FileSys.readDir"

  val rewindDir : dirstream -> unit = env "OS.FileSys.rewindDir"

  val closeDir : dirstream -> unit = env "OS.FileSys.closeDir"

  val chDir : string -> unit = env "OS.FileSys.chDir"

  local
    val getDir' : unit -> string = env "OS.FileSys.getDir"
  in
    fun getDir () = Path.mkCanonical (getDir' ())
  end

  val mkDir : string -> unit = env "OS.FileSys.mkDir"

  val rmDir : string -> unit = env "OS.FileSys.rmDir"

  val isDir : string -> bool = env "OS.FileSys.isDir"

  fun isLink _ = false  (* Win32 doesn't support links *)

  fun readLink _ = raise Win32.SysErr ("Win32 does not support links", NONE)

  local
    val fullPath' : string -> string = env "OS.FileSys.fullPath"
  in
    fun fullPath s = Path.mkCanonical (fullPath' s)
  end

  (* This is just the same implementation as given in the Mar 1996 basis
   * document except for the fact that Path is not caught as per the 
   * change described in the 19th April 1996 email to the basis group.
   *)
  fun realPath p = 
    if Path.isAbsolute p
    then fullPath p
    else Path.mkRelative {path=fullPath p, relativeTo=fullPath (getDir ())}


  val modTime : string -> Time.time = env "OS.FileSys.modTime"

  val fileSize : string -> int = env "OS.FileSys.fileSize"

  val setTime_ : string * Time.time -> unit = env "OS.FileSys.setTime_"

  fun setTime (fileName, NONE) = setTime_ (fileName, Time.now ())
    | setTime (fileName, SOME time) = setTime_ (fileName, time)

  val remove : string -> unit = env "OS.FileSys.remove"

  val rename : { old: string, new: string} -> unit = env "OS.FileSys.rename"


  datatype access_mode = A_READ | A_WRITE | A_EXEC

  val access : (string * access_mode list) -> bool = env "OS.FileSys.access"


  val tmpName : unit -> string = env "OS.FileSys.tmpName"



  (* XXX: Can't find any equivalent of an inode for Win32, so for the
   * moment the pathname is used (eek!).
   *)

  datatype file_id = FILE_ID of string


  fun fileId s = FILE_ID s


  (* A simple hashing function taken from ../main/_encapsulate.sml
   * Unless we are stuck with the file_id being a string, don't bother
   * to optimise this
   *)
  fun hash' (s, i, v) =
    if i = 0
    then v + ord (String.sub (s, i))
    else hash' (s, i-1, v + ord (String.sub (s, i)))


  fun hash (FILE_ID s) = Word.fromInt (hash' (s, size s - 1, size s))


  fun compare (FILE_ID a, FILE_ID b) = String.compare (a, b)

end
@


1.14.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a3 4
 *  Revision 1.14  1999/03/14  12:12:56  daveb
 *  [Bug #190521]
 *  OS.FileSys.readDir now returns an option type.
 *
@


1.13
log
@[Bug #190500]
Remove redundant require statements
@
text
@d4 4
d140 1
a140 1
  val readDir : dirstream -> string = env "OS.FileSys.readDir"
@


1.12
log
@[Bug #30468]
Change types of mkAbsolute and mkRelative to uses records with names fields
@
text
@d4 4
a96 2
require "^.basis.__position";
require "^.basis.__char";
@


1.11
log
@[Bug #50083]
Change opendir to add '/*' in runtime function.
@
text
@d4 4
d171 1
a171 1
    else Path.mkRelative (fullPath p, fullPath (getDir ()))
@


1.10
log
@[Bug #30142]
Change the dir_handle from an int to a Word32.word ref.
@
text
@d4 4
d128 1
a128 8
  val openDir_ : string -> dirstream = env "OS.FileSys.openDir"

  fun openDir dir = 
    let
      val dir' = if dir = "" then "*" else dir ^ "/*"
    in
      openDir_ dir'
    end
@


1.10.2.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a3 4
 *  Revision 1.10  1997/05/21  10:22:10  stephenb
 *  [Bug #30142]
 *  Change the dir_handle from an int to a Word32.word ref.
 *
@


1.10.1.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a3 4
 *  Revision 1.10  1997/05/21  10:22:10  stephenb
 *  [Bug #30142]
 *  Change the dir_handle from an int to a Word32.word ref.
 *
@


1.9
log
@[Bug #2006]
Made readDir return a non-canonical path so that it can be tested
against the empty string when the end of a directory has been reached.
@
text
@d4 5
d105 2
a106 4
  (* This is a Win32 HANDLE.  It is really a raw pointer which
   * due to the bottom bits being 0 looks like an integer to MLWorks.
   *)
  type dir_handle = int
d120 1
a120 4
   * To deal with b) the file name is made a ref.  Technically the directory
   * handle should also be a ref since its value changes, but since it
   * is treated as an int by the GC system, it doesn't appear to cause
   * any problem to update it in place rather than wrapping it in a ref.
d122 1
a122 1
  datatype dirstream = DIRSTREAM of string * dir_handle * string ref
@


1.9.1.1
log
@branched from 1.9
@
text
@a3 5
 *  Revision 1.9  1997/04/02  09:20:31  johnh
 *  [Bug #2006]
 *  Made readDir return a non-canonical path so that it can be tested
 *  against the empty string when the end of a directory has been reached.
 *
@


1.9.1.2
log
@[Bug #30142]
Changed the type of a dir_handle in DIRSTREAM from an int to a Word32.word ref,
because these values aren't always aligned on Windows 95.
@
text
@a3 7
 *  Revision 1.9.1.1  1997/05/12  10:54:06  hope
 *  branched from 1.9
 *
 *  Revision 1.10  1997/05/21  10:22:10  stephenb
 *  [Bug #30142]
 *  Change the dir_handle from an int to a Word32.word ref.
 *
d105 4
a108 2
  (* This is a Win32 HANDLE. *)
  type dir_handle = Word32.word
d122 4
a125 1
   * To deal with b) the file name and dir handle are refs.
d127 1
a127 1
  datatype dirstream = DIRSTREAM of string * dir_handle ref * string ref
@


1.9.1.2.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a3 5
 *  Revision 1.9.1.2  1997/05/21  13:17:44  daveb
 *  [Bug #30142]
 *  Changed the type of a dir_handle in DIRSTREAM from an int to a Word32.word ref,
 *  because these values aren't always aligned on Windows 95.
 *
@


1.9.1.2.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a3 5
 *  Revision 1.9.1.2  1997/05/21  13:17:44  daveb
 *  [Bug #30142]
 *  Changed the type of a dir_handle in DIRSTREAM from an int to a Word32.word ref,
 *  because these values aren't always aligned on Windows 95.
 *
@


1.9.1.2.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a3 5
 *  Revision 1.9.1.2  1997/05/21  13:17:44  daveb
 *  [Bug #30142]
 *  Changed the type of a dir_handle in DIRSTREAM from an int to a Word32.word ref,
 *  because these values aren't always aligned on Windows 95.
 *
@


1.9.1.2.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a3 3
 *  Revision 1.9.1.2.1.1  1997/07/28  18:37:00  daveb
 *  branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.8
log
@[Bug #1967]
Added calls to Path.mkCanonical.
@
text
@d4 4
d133 1
a133 5
  local
    val readDir' : dirstream -> string = env "OS.FileSys.readDir"
  in
    fun readDir d = Path.mkCanonical (readDir' d)
  end
@


1.7
log
@[Bug #1614]
remove toplevel String.
@
text
@d4 4
d129 5
a133 2

  val readDir : dirstream -> string = env "OS.FileSys.readDir"
d141 5
a145 1
  val getDir : unit -> string = env "OS.FileSys.getDir"
d157 5
a161 2
  val fullPath : string -> string = env "OS.FileSys.fullPath"

@


1.7.4.1
log
@branched from 1.7
@
text
@a3 4
 *  Revision 1.7  1996/10/30  20:32:19  io
 *  [Bug #1614]
 *  remove toplevel String.
 *
@


1.7.3.1
log
@branched from 1.7
@
text
@a3 4
 *  Revision 1.7  1996/10/30  20:32:19  io
 *  [Bug #1614]
 *  remove toplevel String.
 *
@


1.7.3.1.1.1
log
@branched from 1.7.3.1
@
text
@a3 3
 *  Revision 1.7.3.1  1996/12/17  18:20:27  hope
 *  branched from 1.7
 *
@


1.7.2.1
log
@branched from 1.7
@
text
@a3 4
 *  Revision 1.7  1996/10/30  20:32:19  io
 *  [Bug #1614]
 *  remove toplevel String.
 *
@


1.7.1.1
log
@branched from 1.7
@
text
@a3 4
 *  Revision 1.7  1996/10/30  20:32:19  io
 *  [Bug #1614]
 *  remove toplevel String.
 *
@


1.7.1.1.1.1
log
@branched from 1.7.1.1
@
text
@a3 3
 *  Revision 1.7.1.1  1996/11/14  13:24:24  hope
 *  branched from 1.7
 *
@


1.6
log
@Remove references to basis.toplevel
@
text
@d4 3
d198 2
a199 2
    then v + Char.ord (String.sub (s, i))
    else hash' (s, i-1, v + Char.ord (String.sub (s, i)))
@


1.5
log
@Implement isDir and setTime.
@
text
@d4 3
a64 1
require "^.basis.toplevel";
@


1.5.3.1
log
@branched from 1.5
@
text
@a3 3
 *  Revision 1.5  1996/06/13  11:34:12  stephenb
 *  Implement isDir and setTime.
 *
@


1.5.2.1
log
@branched from 1.5
@
text
@a3 3
 *  Revision 1.5  1996/06/13  11:34:12  stephenb
 *  Implement isDir and setTime.
 *
@


1.5.1.1
log
@branched from 1.5
@
text
@a3 3
 *  Revision 1.5  1996/06/13  11:34:12  stephenb
 *  Implement isDir and setTime.
 *
@


1.4
log
@Change the dirstream type so that various fields are refs since they
get mutated by the runtime.
@
text
@a79 1
  exception Unimplemented of string
d135 1
a135 1
  fun isDir s = (openDir s; true) handle _ => false
d158 4
a161 1
  fun setTime _ = raise Unimplemented "setTime"
@


1.3
log
@OS.FileSys.{open,read,rewind,close}Dir are now pulled through directly
from the runtime rather than via Win32.  This is because they have
been reimplemented in the runtime and there is now no point in pulling
them through Win32 first.
@
text
@d4 6
d82 29
a110 1
  datatype dirstream = DIRSTREAM of string * int * string
d165 1
d170 1
d193 1
@


1.2
log
@Add more functions to support the latest revised basis definition.
@
text
@d4 3
d76 3
a78 1
  datatype dirstream = DIRSTREAM of (Win32.DirHandle * string list ref)
a79 1
  (* Need to sort out exactly what exceptions etc. can be raised here *)
d82 1
a82 2
      val dirname = if dir = "" then "*" else dir ^ "/*"
      val (file,dirhandle) = Win32.find_first_file dirname
d84 1
a84 1
      DIRSTREAM (dirhandle,ref [file])
a86 5
  fun readDir (DIRSTREAM (dirhandle,ref [])) = 
    (Win32.find_next_file dirhandle handle _ => "")
    | readDir (DIRSTREAM (dirhandle,r as ref (a::b))) =
      (r := b;
       a)
d88 3
a90 1
  fun rewindDir d = raise Unimplemented "rewindDir"
d92 1
a92 2
  fun closeDir (DIRSTREAM (dirhandle,_)) = 
    Win32.find_close dirhandle
@


1.1
log
@new unit
Renamed from _win_ntfilesys in line with latest file name conventions.
@
text
@d3 5
a7 1
 * $Log: _win_ntfilesys.sml,v $
d54 1
d59 3
d66 3
a68 1
functor OSFileSys (structure Win32: WIN32): OS_FILE_SYS =
d95 1
a95 1
  val chDir = Win32.set_current_directory;
d97 1
a97 1
  val getDir = Win32.get_current_directory;
d99 1
a99 1
  fun mkDir d = raise Unimplemented "mkDir"
d101 1
a101 1
  fun rmDir d = raise Unimplemented "rmDir"
d109 11
a119 1
  val fullPath = Win32.get_path_name   (* XXX: is this correct? *)
a120 2
  fun realPath "" = Win32.get_current_directory ()
    | realPath p = Win32.get_path_name p
d128 1
a128 1
  fun remove _ = raise Unimplemented "remove"
d130 1
a130 1
  fun rename _ = raise Unimplemented "rename"
d134 14
a147 1
  fun access _ = raise Unimplemented "access"
a148 1
  fun tmpName _ = raise Unimplemented "tmpName"
d150 8
a157 1
  datatype file_id = FILE_ID of int (* XXX: just a dummy definition for now *)
d159 1
a159 1
  fun fileId _ = raise Unimplemented "fileId"
a160 1
  fun hash _ = raise Unimplemented "hash"
d162 1
a162 1
  fun compare _ = raise Unimplemented "compare"
@
