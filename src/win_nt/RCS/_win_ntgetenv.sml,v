head	1.17;
access;
symbols
	MLW_daveb_inline_1_4_99:1.17.1
	MLWorks_21c0_1999_03_25:1.17
	MLWorks_20c1_1998_08_20:1.17
	MLWorks_20c0_1998_08_04:1.17
	MLWorks_20b2c2_1998_06_19:1.16
	MLWorks_20b2_Windows_1998_06_12:1.16
	MLWorks_20b1c1_1998_05_07:1.16
	MLWorks_20b0_1998_04_07:1.16
	MLWorks_20b0_1998_03_20:1.16
	MLWorks_20m2_1998_02_16:1.15
	MLWorks_20m1_1997_10_23:1.14
	MLWorks_11r1:1.14.1.1.1.1.1
	MLWorks_workspace_97:1.14.3
	MLWorks_dt_wizard:1.14.2
	MLWorks_11c0_1997_09_09:1.14.1.1.1.1
	MLWorks_10r3:1.14.1.1.3
	MLWorks_10r2_551:1.14.1.1.2
	MLWorks_11:1.14.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.14.1.1
	MLWorks_20m0_1997_06_20:1.14
	MLWorks_1_0_r2c2_1997_06_14:1.14.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.14.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.14.1
	MLWorks_BugFix_1997_04_24:1.14
	MLWorks_1_0_r2_Win32_1997_04_11:1.14
	MLWorks_1_0_r2_Unix_1997_04_04:1.14
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.11.2.1.1
	MLWorks_gui_1996_12_18:1.11.3
	MLWorks_1_0_Win32_1996_12_17:1.11.2
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.10.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.10.1.1
	MLWorks_1_0_Irix_1996_11_28:1.10.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.11.1
	MLWorks_1_0_Unix_1996_11_14:1.10.1
	MLWorks_Open_Beta2_1996_10_11:1.8.3
	MLWorks_License_dev:1.8.2
	MLWorks_1_open_beta_1996_09_13:1.8.1
	MLWorks_Open_Beta_1996_08_22:1.8
	MLWorks_Beta_1996_07_02:1.8
	MLWorks_Beta_1996_06_07:1.7
	MLWorks_Beta_1996_06_06:1.7
	MLWorks_Beta_1996_06_05:1.7
	MLWorks_Beta_1996_06_03:1.7
	MLWorks_Beta_1996_05_31:1.7
	MLWorks_Beta_1996_05_30:1.7;
locks; strict;
comment	@ * @;


1.17
date	98.07.03.12.32.17;	author mitchell;	state Exp;
branches
	1.17.1.1;
next	1.16;

1.16
date	98.02.10.15.52.48;	author jont;	state Exp;
branches;
next	1.15;

1.15
date	97.11.06.10.27.14;	author johnh;	state Exp;
branches;
next	1.14;

1.14
date	97.03.31.14.13.49;	author johnh;	state Exp;
branches
	1.14.1.1
	1.14.2.1
	1.14.3.1;
next	1.13;

1.13
date	97.03.31.13.22.56;	author johnh;	state Exp;
branches;
next	1.12;

1.12
date	97.03.31.11.02.21;	author daveb;	state Exp;
branches;
next	1.11;

1.11
date	96.11.14.15.11.52;	author jont;	state Exp;
branches
	1.11.1.1
	1.11.2.1
	1.11.3.1;
next	1.10;

1.10
date	96.10.30.20.40.02;	author io;	state Exp;
branches
	1.10.1.1;
next	1.9;

1.9
date	96.10.25.10.25.54;	author johnh;	state Exp;
branches;
next	1.8;

1.8
date	96.06.24.11.42.13;	author daveb;	state Exp;
branches
	1.8.1.1
	1.8.2.1
	1.8.3.1;
next	1.7;

1.7
date	96.05.01.11.56.12;	author jont;	state Exp;
branches;
next	1.6;

1.6
date	96.01.18.16.27.24;	author stephenb;	state Exp;
branches;
next	1.5;

1.5
date	95.04.21.16.27.19;	author daveb;	state Exp;
branches;
next	1.4;

1.4
date	95.04.19.11.02.56;	author jont;	state Exp;
branches;
next	1.3;

1.3
date	95.01.19.14.08.27;	author daveb;	state Exp;
branches;
next	1.2;

1.2
date	95.01.18.14.12.45;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	94.12.12.16.34.15;	author jont;	state Exp;
branches;
next	;

1.8.1.1
date	96.09.13.11.43.47;	author hope;	state Exp;
branches;
next	;

1.8.2.1
date	96.10.07.16.36.59;	author hope;	state Exp;
branches;
next	;

1.8.3.1
date	96.10.17.11.55.58;	author hope;	state Exp;
branches;
next	;

1.10.1.1
date	96.11.14.13.24.19;	author hope;	state Exp;
branches
	1.10.1.1.1.1;
next	;

1.10.1.1.1.1
date	96.11.28.15.35.10;	author hope;	state Exp;
branches;
next	;

1.11.1.1
date	96.11.22.18.41.25;	author hope;	state Exp;
branches;
next	;

1.11.2.1
date	96.12.17.18.20.22;	author hope;	state Exp;
branches
	1.11.2.1.1.1;
next	;

1.11.2.1.1.1
date	97.02.24.12.14.55;	author hope;	state Exp;
branches;
next	;

1.11.3.1
date	96.12.18.10.15.56;	author hope;	state Exp;
branches;
next	;

1.14.1.1
date	97.05.12.10.54.01;	author hope;	state Exp;
branches
	1.14.1.1.1.1
	1.14.1.1.2.1
	1.14.1.1.3.1;
next	;

1.14.1.1.1.1
date	97.07.28.18.36.56;	author daveb;	state Exp;
branches
	1.14.1.1.1.1.1.1;
next	;

1.14.1.1.1.1.1.1
date	97.10.07.12.02.01;	author jkbrook;	state Exp;
branches;
next	;

1.14.1.1.2.1
date	97.09.08.17.29.04;	author daveb;	state Exp;
branches;
next	;

1.14.1.1.3.1
date	97.09.09.14.27.00;	author daveb;	state Exp;
branches;
next	;

1.14.2.1
date	97.09.10.19.45.17;	author brucem;	state Exp;
branches;
next	;

1.14.3.1
date	97.09.11.21.12.26;	author daveb;	state Exp;
branches;
next	;

1.17.1.1
date	99.04.01.18.10.29;	author daveb;	state Exp;
branches;
next	;


desc
@new file
@


1.17
log
@[Bug #30434]
Use Windows structure for registry access rather than Win32
@
text
@(*  GETENV FUNCTION - WINDOWS NT VERSIOn
 *
 *  Copyright (C) 1994 Harlequin Ltd.
 *
 *  $Log: _win_ntgetenv.sml,v $
 * Revision 1.16  1998/02/10  15:52:48  jont
 * [Bug #70065]
 * Remove uses of MLWorks.IO.messages and use the Messages structure
 *
 * Revision 1.15  1997/11/06  10:27:14  johnh
 * [Bug #30125]
 * Add dummy fn get_doc_dir.
 *
 * Revision 1.14  1997/03/31  14:13:49  johnh
 * [Bug #1829]
 * Removed some redundant code.
 *
 * Revision 1.13  1997/03/31  13:22:56  johnh
 * [Bug #1967]
 * Added a call to OSPath.mkCanonical.
 *
 * Revision 1.12  1997/03/31  11:02:21  daveb
 * [Bug #1990]
 * Added get_version_setting.  To prevent this printing a warning when the key
 * is not set in the registry, modified getMLWorksValue to take a fail action.
 * For existing functions, the fail action is getDefaultValue.
 *
 * Revision 1.11  1996/11/14  15:11:52  jont
 * [Bug #1763]
 * Remove get_user_name from GETENV
 *
 * Revision 1.10  1996/10/30  20:40:02  io
 * [Bug #1614]
 * remove toplevel String.
 *
 * Revision 1.9  1996/10/25  10:25:54  johnh
 * [Bug #1426]
 * Implemented Windows registry and removed redundant Win32 environment.
 *
 * Revision 1.8  1996/06/24  11:42:13  daveb
 * Replaced Getenv.get_home_dir with Getenv.get_startup_filename and
 * Getenv.get_preferences_filename.
 *
 * Revision 1.7  1996/05/01  11:56:12  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
 * Revision 1.6  1996/01/18  16:27:24  stephenb
 * OS reorganisation: Since the pervasive library no longer
 * contains OS specific stuff, parameterise the functor with
 * the Win32 structure.
 *
 * Revision 1.5  1995/04/21  16:27:19  daveb
 * Added expand_home_dir.
 *
 * Revision 1.4  1995/04/19  11:02:56  jont
 * Add get_object_path
 *
 * Revision 1.3  1995/01/19  14:08:27  daveb
 * Moved functionality for parsing environment paths here from io.sml.
 * Replaced Option structure with references to MLWorks.Option.
 *
 * Revision 1.2  1995/01/18  14:12:45  jont
 * Add separator value to interface
 *
 * Revision 1.1  1994/12/12  16:34:15  jont
 * new file
 *
 * Revision 1.1  1994/12/09  13:36:18  jont
 * new file
 *
 *)

require "^.utils.__messages";
require "../utils/getenv";
require "^.basis.os_path";
require "windows";

functor Win_ntGetenv (structure OSPath: OS_PATH
		      structure Windows: WINDOWS): GETENV =
struct

  (* The main OS-specific element in this funciton is the character used to
      separate elements in the path. *)
  fun env_path_to_list s =
    let
      fun str_to_list (0, seperator_index, result) =
        substring (s, 0, seperator_index) :: result
      |   str_to_list (n, seperator_index, result) =
        if MLWorks.String.ordof (s, n) = ord #";" then
          str_to_list
            (n - 1, n,
             substring (s, n + 1, seperator_index - n - 1) :: result)
        else
          str_to_list (n - 1, seperator_index, result)
    in
          str_to_list (size s - 1, size s, [])
    end

  exception BadHomeName of string 

  fun expand_home_dir string = string 

  fun get_option_value option_name =
    let
      val option_length = size option_name

      fun get_value [] = NONE
      |   get_value(arg :: rest) =
        if size arg < option_length then
          get_value rest

	(* this looks like String.isPrefix to me *)
        else if substring(arg, 0, option_length) = option_name then
          if size arg - option_length = 0 then
            NONE
          else
            SOME
	      (substring(arg, option_length, size arg - option_length))
        else
          get_value rest
    in
      get_value
    end

  local
    fun close_key (SOME key) = Windows.Reg.closeKey key
      | close_key NONE = ()
    fun openKey (reg_key, reg_string) = 
	Windows.Reg.openKeyEx(reg_key, reg_string, 
                              Windows.Key.execute)
    fun warning s = Messages.output s;

    fun print_warn value_string = 
	(warning ("Software/Harlequin/MLWorks/" ^ value_string ^ 
		  " value not set in registry.\n");
	 NONE)

    fun openMLWorksKey start_key = 
      let
	val software_key = 
	  if (isSome start_key) then
	     openKey ((valOf start_key), "Software")
	  else NONE
	val harlequin_key = 
	  if (isSome software_key) then
	     openKey ((valOf software_key), "Harlequin")
	  else NONE
	val mlworks_key = 
	  if (isSome harlequin_key) then 
	     openKey ((valOf harlequin_key), "MLWorks")
	  else NONE
      in
	(software_key, mlworks_key)
      end

    fun getMLWorksValue value_string failAction = 
      let 
	val (software_key, mlworks_key) = 
          openMLWorksKey (SOME Windows.Reg.currentUser)
	val the_value = if (isSome mlworks_key) then
		Windows.Reg.queryValueEx((valOf mlworks_key), 
                                         value_string)
	   else ""
      in
	(close_key software_key;
	 if the_value = "" then 
	    (failAction value_string)
	 else 
	    SOME the_value)
      end

    fun mkCanonical (SOME s) = SOME (OSPath.mkCanonical s)
      | mkCanonical NONE = NONE

  in
    fun get_startup_dir () =
      mkCanonical (getMLWorksValue "Startup Directory" print_warn)

    fun get_source_path () =
      mkCanonical (getMLWorksValue "Source Path" print_warn)

    fun get_object_path () =
      mkCanonical (getMLWorksValue "Object Path" print_warn)

    fun get_pervasive_dir () =
      mkCanonical (getMLWorksValue "Pervasive Path" print_warn)

    fun get_version_setting () = 
      getMLWorksValue "Version Setting" (fn _ => NONE)

    fun get_doc_dir () = NONE
  end

  fun get_startup_filename () = 
    case get_startup_dir () of 
	NONE => NONE
      | SOME dir => SOME (dir ^ "/.mlworks")

  fun get_preferences_filename () =
    case get_startup_dir () of
        NONE => NONE
      | SOME dir => SOME (dir ^ "/.mlworks_preferences")

end
@


1.17.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a5 4
 * Revision 1.17  1998/07/03  12:32:17  mitchell
 * [Bug #30434]
 * Use Windows structure for registry access rather than Win32
 *
@


1.16
log
@[Bug #70065]
Remove uses of MLWorks.IO.messages and use the Messages structure
@
text
@d6 4
d79 1
a79 1
require "win32";
d82 1
a82 1
		      structure Win32: WIN32): GETENV =
d129 1
a129 2
    open Win32 
    fun close_key (SOME key) = regCloseKey key
d132 2
a133 1
	regOpenKeyEx(reg_key, reg_string, KEY_EXECUTE)
d161 2
a162 1
	val (software_key, mlworks_key) = openMLWorksKey (SOME HKEY_CURRENT_USER)
d164 2
a165 1
		regQueryValueEx((valOf mlworks_key), value_string)
@


1.15
log
@[Bug #30125]
Add dummy fn get_doc_dir.
@
text
@d6 4
d72 1
d130 1
a130 1
    fun warning s = MLWorks.IO.output (MLWorks.IO.messages, s);
@


1.14
log
@[Bug #1829]
Removed some redundant code.
@
text
@d6 4
d182 2
@


1.14.3.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a5 4
 * Revision 1.14  1997/03/31  14:13:49  johnh
 * [Bug #1829]
 * Removed some redundant code.
 *
@


1.14.2.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a5 4
 * Revision 1.14  1997/03/31  14:13:49  johnh
 * [Bug #1829]
 * Removed some redundant code.
 *
@


1.14.1.1
log
@branched from 1.14
@
text
@a5 4
 * Revision 1.14  1997/03/31  14:13:49  johnh
 * [Bug #1829]
 * Removed some redundant code.
 *
@


1.14.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a5 3
 * Revision 1.14.1.1  1997/05/12  10:54:01  hope
 * branched from 1.14
 *
@


1.14.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a5 3
 * Revision 1.14.1.1  1997/05/12  10:54:01  hope
 * branched from 1.14
 *
@


1.14.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a5 3
 * Revision 1.14.1.1  1997/05/12  10:54:01  hope
 * branched from 1.14
 *
@


1.14.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a5 3
 * Revision 1.14.1.1.1.1  1997/07/28  18:36:56  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.13
log
@[Bug #1967]
Added a call to OSPath.mkCanonical.
@
text
@d6 4
d123 1
a123 2
    fun print_warn default_string value_string = 
      if (default_string = "") then
a126 1
      else SOME default_string
a145 12
    fun getDefaultValue value_string = 
      let 
	val (default_software, default_mlworks) = openMLWorksKey
		(openKey (HKEY_USERS, ".DEFAULT"))
	val default_value = if (isSome default_mlworks) then
		regQueryValueEx((valOf default_mlworks), value_string)
	   else "";
      in
	(close_key default_software;
	 print_warn default_value value_string)
      end

d165 1
a165 1
      mkCanonical (getMLWorksValue "Startup Directory" getDefaultValue)
d168 1
a168 1
      mkCanonical (getMLWorksValue "Source Path" getDefaultValue)
d171 1
a171 1
      mkCanonical (getMLWorksValue "Object Path" getDefaultValue)
d174 1
a174 1
      mkCanonical (getMLWorksValue "Pervasive Path" getDefaultValue)
@


1.12
log
@[Bug #1990]
Added get_version_setting.  To prevent this printing a warning when the key
is not set in the registry, modified getMLWorksValue to take a fail action.
For existing functions, the fail action is getDefaultValue.
@
text
@d6 6
d61 1
d64 2
a65 1
functor Win_ntGetenv (structure Win32: WIN32): GETENV =
d161 1
a161 1
	   else "";
d170 3
d175 1
a175 1
      getMLWorksValue "Startup Directory" getDefaultValue
d178 1
a178 1
      getMLWorksValue "Source Path" getDefaultValue
d181 1
a181 1
      getMLWorksValue "Object Path" getDefaultValue
d184 1
a184 1
      getMLWorksValue "Pervasive Path" getDefaultValue
@


1.11
log
@[Bug #1763]
Remove get_user_name from GETENV
@
text
@d6 4
a15 1
 * [Bug #1426]
d110 1
d114 2
a115 1
		  " value not set in registry.\n"); NONE)
d148 1
a148 1
    fun getMLWorksValue value_string = 
d157 1
a157 1
	    (getDefaultValue value_string)
d163 8
d172 2
a173 4
    fun get_startup_dir () = getMLWorksValue "Startup Directory"
    fun get_source_path () = getMLWorksValue "Source Path"
    fun get_object_path () = getMLWorksValue "Object Path"
    fun get_pervasive_dir () = getMLWorksValue "Pervasive Path"
d175 2
@


1.11.3.1
log
@branched from 1.11
@
text
@a5 4
 * Revision 1.11  1996/11/14  15:11:52  jont
 * [Bug #1763]
 * Remove get_user_name from GETENV
 *
@


1.11.2.1
log
@branched from 1.11
@
text
@a5 4
 * Revision 1.11  1996/11/14  15:11:52  jont
 * [Bug #1763]
 * Remove get_user_name from GETENV
 *
@


1.11.2.1.1.1
log
@branched from 1.11.2.1
@
text
@a5 3
 * Revision 1.11.2.1  1996/12/17  18:20:22  hope
 * branched from 1.11
 *
@


1.11.1.1
log
@branched from 1.11
@
text
@a5 4
 * Revision 1.11  1996/11/14  15:11:52  jont
 * [Bug #1763]
 * Remove get_user_name from GETENV
 *
@


1.10
log
@[Bug #1614]
remove toplevel String.
@
text
@d6 4
a159 1
    fun get_user_name () = getMLWorksValue "User Name"
@


1.10.1.1
log
@branched from 1.10
@
text
@a5 4
 * Revision 1.10  1996/10/30  20:40:02  io
 * [Bug #1614]
 * remove toplevel String.
 *
@


1.10.1.1.1.1
log
@branched from 1.10.1.1
@
text
@a5 3
 * Revision 1.10.1.1  1996/11/14  13:24:19  hope
 * branched from 1.10
 *
@


1.9
log
@[Bug #1426]
[Bug #1426]
Implemented Windows registry and removed redundant Win32 environment.
@
text
@d6 5
a51 1
  open MLWorks.Option
d58 1
a58 1
        String.substring (s, 0, seperator_index) :: result
d60 1
a60 1
        if String.ordof (s, n) = String.ord ";" then
d63 1
a63 1
             String.substring (s, n + 1, seperator_index - n - 1) :: result)
d82 3
a84 1
        else if String.substring(arg, 0, option_length) = option_name then
d89 1
a89 1
	      (String.substring(arg, option_length, size arg - option_length))
@


1.8
log
@Replaced Getenv.get_home_dir with Getenv.get_startup_filename and
Getenv.get_preferences_filename.
@
text
@d6 4
d90 56
a145 2
  fun get_user_name () = 
    get_option_value "USER=" (Win32.environment())
d147 1
a147 2
  fun get_source_path () =
    get_option_value "MLWORKS_SRC_PATH=" (Win32.environment())
d149 5
a153 2
  fun get_object_path () =
    get_option_value "MLWORKS_OBJ_PATH=" (Win32.environment())
d155 1
a155 2
  fun get_pervasive_dir () =
    get_option_value "MLWORKS_PERVASIVE=" (Win32.environment())
d157 3
a159 7
  local
    fun get_home_dir () =
      get_option_value "HOME=" (Win32.environment())
  in
    fun get_startup_filename () =
      case get_home_dir () of
        NONE => NONE
d162 2
a163 2
    fun get_preferences_filename () =
      case get_home_dir () of
a165 1
  end
@


1.8.3.1
log
@branched from 1.8
@
text
@a5 4
 * Revision 1.8  1996/06/24  11:42:13  daveb
 * Replaced Getenv.get_home_dir with Getenv.get_startup_filename and
 * Getenv.get_preferences_filename.
 *
@


1.8.2.1
log
@branched from 1.8
@
text
@a5 4
 * Revision 1.8  1996/06/24  11:42:13  daveb
 * Replaced Getenv.get_home_dir with Getenv.get_startup_filename and
 * Getenv.get_preferences_filename.
 *
@


1.8.1.1
log
@branched from 1.8
@
text
@a5 4
 * Revision 1.8  1996/06/24  11:42:13  daveb
 * Replaced Getenv.get_home_dir with Getenv.get_startup_filename and
 * Getenv.get_preferences_filename.
 *
@


1.7
log
@String functions explode, implode, chr and ord now only available from String
io functions and types
instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
now only available from MLWorks.IO
@
text
@d6 6
d43 2
d70 1
a70 1
      fun get_value [] = MLWorks.Option.NONE
d76 1
a76 1
            MLWorks.Option.NONE
d78 1
a78 1
            MLWorks.Option.SOME
d98 15
a112 2
  fun get_home_dir () =
    get_option_value "HOME=" (Win32.environment())
@


1.6
log
@OS reorganisation: Since the pervasive library no longer
contains OS specific stuff, parameterise the functor with
the Win32 structure.
@
text
@d6 5
d44 1
a44 1
        if String.ordof (s, n) = ord ";" then
@


1.5
log
@Added expand_home_dir.
@
text
@d6 3
d28 1
d30 1
a30 1
functor Win_ntGetenv (): GETENV =
d74 1
a74 1
    get_option_value "USER=" (MLWorks.OS.Win_nt.environment())
d77 1
a77 1
    get_option_value "MLWORKS_SRC_PATH=" (MLWorks.OS.Win_nt.environment())
d80 1
a80 1
    get_option_value "MLWORKS_OBJ_PATH=" (MLWorks.OS.Win_nt.environment())
d83 1
a83 1
    get_option_value "MLWORKS_PERVASIVE=" (MLWorks.OS.Win_nt.environment())
d86 1
a86 1
    get_option_value "HOME=" (MLWorks.OS.Win_nt.environment())
@


1.4
log
@Add get_object_path
@
text
@d6 3
d44 4
@


1.3
log
@Moved functionality for parsing environment paths here from io.sml.
Replaced Option structure with references to MLWorks.Option.
@
text
@d6 4
d67 3
@


1.2
log
@Add separator value to interface
@
text
@d1 1
a1 1
(*  GETENV FUNCTION - UNIX VERSIOn
d6 3
a16 1
require "../utils/option";
d19 1
a19 3
functor Win_ntGetenv
  (structure Option : OPTION
  ): GETENV =
d21 16
a36 3
  structure Option = Option

  val separator = ";"
d42 1
a42 1
      fun get_value [] = Option.ABSENT
d48 1
a48 1
            Option.ABSENT
d50 1
a50 1
            Option.PRESENT
@


1.1
log
@new file
@
text
@d5 4
a8 1
 *  $Log: _unixgetenv.sml,v $
d22 2
@
