head	1.17;
access;
symbols
	MLW_daveb_inline_1_4_99:1.17.1
	MLWorks_21c0_1999_03_25:1.17
	MLWorks_20c1_1998_08_20:1.17
	MLWorks_20c0_1998_08_04:1.17
	MLWorks_20b2c2_1998_06_19:1.16
	MLWorks_20b2_Windows_1998_06_12:1.16
	MLWorks_20b1c1_1998_05_07:1.16
	MLWorks_20b0_1998_04_07:1.15
	MLWorks_20b0_1998_03_20:1.15
	MLWorks_20m2_1998_02_16:1.15
	MLWorks_20m1_1997_10_23:1.14
	MLWorks_11r1:1.14.5.1.1.1.1
	MLWorks_workspace_97:1.14.7
	MLWorks_dt_wizard:1.14.6
	MLWorks_11c0_1997_09_09:1.14.5.1.1.1
	MLWorks_10r3:1.14.5.1.3
	MLWorks_10r2_551:1.14.5.1.2
	MLWorks_11:1.14.5.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.14.5.1
	MLWorks_20m0_1997_06_20:1.14
	MLWorks_1_0_r2c2_1997_06_14:1.14.5.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.14.5.1
	MLWorks_1_0_r2c1_1997_05_12:1.14.5
	MLWorks_BugFix_1997_04_24:1.14
	MLWorks_1_0_r2_Win32_1997_04_11:1.14
	MLWorks_1_0_r2_Unix_1997_04_04:1.14
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.14.3.1.1
	MLWorks_gui_1996_12_18:1.14.4
	MLWorks_1_0_Win32_1996_12_17:1.14.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.14.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.14.1.1
	MLWorks_1_0_Irix_1996_11_28:1.14.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.14.2
	MLWorks_1_0_Unix_1996_11_14:1.14.1
	MLWorks_Open_Beta2_1996_10_11:1.11.3
	MLWorks_License_dev:1.11.2
	MLWorks_1_open_beta_1996_09_13:1.11.1
	MLWorks_Open_Beta_1996_08_22:1.10
	MLWorks_Beta_1996_07_02:1.10
	MLWorks_Beta_1996_06_07:1.8
	MLWorks_Beta_1996_06_06:1.8
	MLWorks_Beta_1996_06_05:1.8
	MLWorks_Beta_1996_06_03:1.7
	MLWorks_Beta_1996_05_31:1.7
	MLWorks_Beta_1996_05_30:1.7;
locks; strict;
comment	@ * @;


1.17
date	98.07.03.12.32.17;	author mitchell;	state Exp;
branches
	1.17.1.1;
next	1.16;

1.16
date	98.04.20.17.10.55;	author jont;	state Exp;
branches;
next	1.15;

1.15
date	97.10.30.10.11.48;	author johnh;	state Exp;
branches;
next	1.14;

1.14
date	96.11.08.14.23.12;	author matthew;	state Exp;
branches
	1.14.1.1
	1.14.2.1
	1.14.3.1
	1.14.4.1
	1.14.5.1
	1.14.6.1
	1.14.7.1;
next	1.13;

1.13
date	96.10.29.12.42.15;	author jont;	state Exp;
branches;
next	1.12;

1.12
date	96.10.25.10.36.53;	author johnh;	state Exp;
branches;
next	1.11;

1.11
date	96.08.21.12.02.34;	author stephenb;	state Exp;
branches
	1.11.1.1
	1.11.2.1
	1.11.3.1;
next	1.10;

1.10
date	96.06.14.08.55.09;	author stephenb;	state Exp;
branches;
next	1.9;

1.9
date	96.06.05.14.36.08;	author stephenb;	state Exp;
branches;
next	1.8;

1.8
date	96.05.31.15.46.13;	author stephenb;	state Exp;
branches;
next	1.7;

1.7
date	96.05.29.12.36.16;	author matthew;	state Exp;
branches;
next	1.6;

1.6
date	96.04.22.11.58.40;	author brianm;	state Exp;
branches;
next	1.5;

1.5
date	96.03.29.10.05.33;	author stephenb;	state Exp;
branches;
next	1.4;

1.4
date	96.03.12.15.45.55;	author matthew;	state Exp;
branches;
next	1.3;

1.3
date	96.01.23.08.35.26;	author stephenb;	state Exp;
branches;
next	1.2;

1.2
date	96.01.22.14.57.00;	author stephenb;	state Exp;
branches;
next	1.1;

1.1
date	96.01.22.09.35.44;	author stephenb;	state Exp;
branches;
next	;

1.11.1.1
date	96.09.13.11.44.01;	author hope;	state Exp;
branches;
next	;

1.11.2.1
date	96.10.07.16.37.13;	author hope;	state Exp;
branches;
next	;

1.11.3.1
date	96.10.17.11.56.12;	author hope;	state Exp;
branches;
next	;

1.14.1.1
date	96.11.14.13.24.33;	author hope;	state Exp;
branches
	1.14.1.1.1.1;
next	;

1.14.1.1.1.1
date	96.11.28.15.35.29;	author hope;	state Exp;
branches;
next	;

1.14.2.1
date	96.11.22.18.41.40;	author hope;	state Exp;
branches;
next	;

1.14.3.1
date	96.12.17.18.20.37;	author hope;	state Exp;
branches
	1.14.3.1.1.1;
next	;

1.14.3.1.1.1
date	97.02.24.12.15.16;	author hope;	state Exp;
branches;
next	;

1.14.4.1
date	96.12.18.10.16.12;	author hope;	state Exp;
branches;
next	;

1.14.5.1
date	97.05.12.10.54.16;	author hope;	state Exp;
branches
	1.14.5.1.1.1
	1.14.5.1.2.1
	1.14.5.1.3.1;
next	;

1.14.5.1.1.1
date	97.07.28.18.36.50;	author daveb;	state Exp;
branches
	1.14.5.1.1.1.1.1;
next	;

1.14.5.1.1.1.1.1
date	97.10.07.12.01.56;	author jkbrook;	state Exp;
branches;
next	;

1.14.5.1.2.1
date	97.09.08.17.29.00;	author daveb;	state Exp;
branches;
next	;

1.14.5.1.3.1
date	97.09.09.14.26.54;	author daveb;	state Exp;
branches;
next	;

1.14.6.1
date	97.09.10.19.45.11;	author brucem;	state Exp;
branches;
next	;

1.14.7.1
date	97.09.11.21.12.21;	author daveb;	state Exp;
branches;
next	;

1.17.1.1
date	99.04.01.18.10.24;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
OS reorganisation: the pervasive library no longer contains
OS specific stuff such as the NT structure, instead it has
been factored out as a separate structure and renamed Win32.
@


1.17
log
@[Bug #30434]
Use Windows structure for registry access rather than Win32
@
text
@(* Copyright (C) 1996 Harlequin Ltd.
 *
 * See ./win32.sml
 *
 * Revision Log
 * ------------
 *
 * $Log: _win32.sml,v $
 * Revision 1.16  1998/04/20  17:10:55  jont
 * [Bug #70107]
 * Add closeIOD function
 *
 * Revision 1.15  1997/10/30  10:11:48  johnh
 * [Bug #30233]
 * Fix return result of create process.
 *
 * Revision 1.14  1996/11/08  14:23:12  matthew
 * [Bug #1661]
 * Changing io_desc to iodesc
 *
 * Revision 1.13  1996/10/29  12:42:15  jont
 * Sorting out lost version problems
 *
 * Revision 1.12  1996/10/25  10:36:53  johnh
 * [Bug #1426]
 * Removing Win32 environment and using registry instead.
 *
 * Revision 1.11  1996/08/21  12:02:34  stephenb
 * [Bug #1554]
 * Move iodesc from os_io.sml to here and also add conversion
 * function fdToIOD to convert between file descriptors and io
 * descriptors.
 *
 * Revision 1.10  1996/06/14  08:55:09  stephenb
 * Move the definition of a iodesc from OS.IO to here and called it file_desc
 * so that it is possible to construct a file_desc for testing purposes by dealing
 * directly with the representation.
 *
 * Revision 1.9  1996/06/05  14:36:08  stephenb
 * Remove the find_{first_file,next_file,close} functions since
 * they were only here to support OS.FileSys.{open,read,close}Dir and
 * these now pull the relevant routines through directly from the runtime.
 *
 * Revision 1.8  1996/05/31  15:46:13  stephenb
 * Remove various functions that are now pulled through directly
 * in _os_file_sys.sml.
 *
 * Revision 1.7  1996/05/29  12:36:16  matthew
 * Fixing problem with SysErr
 *
 * Revision 1.6  1996/04/22  11:58:40  brianm
 * Adding Win32 call for creating a process with priorities ...
 *
 * Revision 1.5  1996/03/29  10:05:33  stephenb
 * Replace the Win32 exception with an OS.SysErr compatible exception
 * so that this functor can be used to create an Os structure.
 *
 * Revision 1.4  1996/03/12  15:45:55  matthew
 * Adding set_current_directory
 *
 * Revision 1.3  1996/01/23  08:35:26  stephenb
 * Add missing integer to Win32 exception constructor.
 *
 *  Revision 1.2  1996/01/22  14:57:00  stephenb
 *  Bind the exception handler -- should have been done in OS reorg.
 *
 *  Revision 1.1  1996/01/22  09:35:44  stephenb
 *  new unit
 *  OS reorganisation: the pervasive library no longer contains
 *  OS specific stuff such as the NT structure, instead it has
 *  been factored out as a separate structure and renamed Win32.
 *
 *
 *)

require "win32";

functor Win32(): WIN32 =
struct
  val env = MLWorks.Internal.Runtime.environment

  type syserror = MLWorks.Internal.Error.syserror
  exception SysErr = MLWorks.Internal.Error.SysErr

  type file_desc = MLWorks.Internal.IO.file_desc (* Win32 HANDLE *)

  datatype iodesc = IODESC of int      (* Unix style file descriptor *)

  (*
   * Convert a file_desc to an iodesc.
   * Raises OS.SysErr if the conversion cannot be done.
   *)
  val fdToIOD : file_desc -> iodesc = env "Win32.fdToIOD"

  val closeIOD : iodesc -> unit = env"Win32.closeIOD"

  datatype priority = REAL_TIME | HIGH | NORMAL | BACKGROUND

  val create_process : string * priority -> bool =
    env "system os win32 create_process"
  
end
@


1.17.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a8 4
 * Revision 1.17  1998/07/03  12:32:17  mitchell
 * [Bug #30434]
 * Use Windows structure for registry access rather than Win32
 *
@


1.16
log
@[Bug #70107]
Add closeIOD function
@
text
@d9 4
a76 1
require "../basis/__word32";
a79 1

a80 2
  structure Word = Word32
  type word = Word.word
a84 1

a95 26

  (* Windows registry functions *)

  datatype regsam = 
    KEY_ALL_ACCESS
  | KEY_CREATE_LINK
  | KEY_CREATE_SUB_KEY
  | KEY_ENUMERATE_SUB_KEYS
  | KEY_EXECUTE
  | KEY_NOTIFY
  | KEY_QUERY_VALUE
  | KEY_READ
  | KEY_SET_VALUE
  | KEY_WRITE

  val convertSamValues : regsam -> int = env "nt ml convert sam values"

  datatype hkey = HKEY of word
  val HKEY_CLASSES_ROOT : hkey = env "nt reg hkey classes root"
  val HKEY_CURRENT_USER : hkey = env "nt reg hkey current user"
  val HKEY_LOCAL_MACHINE : hkey = env "nt reg hkey local machine"
  val HKEY_USERS : hkey = env "nt reg hkey users"

  val regCloseKey : hkey -> unit = env "nt reg close key"
  val regOpenKeyEx : hkey * string * regsam -> hkey option = env "nt reg open key ex"
  val regQueryValueEx : hkey * string -> string =env "nt reg query value ex"
@


1.15
log
@[Bug #30233]
Fix return result of create process.
@
text
@d9 4
d95 2
@


1.14
log
@[Bug #1661]
Changing io_desc to iodesc
@
text
@d9 4
d120 1
a120 1
  val create_process : string * priority -> int =
@


1.14.7.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a8 4
 * Revision 1.14  1996/11/08  14:23:12  matthew
 * [Bug #1661]
 * Changing io_desc to iodesc
 *
@


1.14.6.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a8 4
 * Revision 1.14  1996/11/08  14:23:12  matthew
 * [Bug #1661]
 * Changing io_desc to iodesc
 *
@


1.14.5.1
log
@branched from 1.14
@
text
@a8 4
 * Revision 1.14  1996/11/08  14:23:12  matthew
 * [Bug #1661]
 * Changing io_desc to iodesc
 *
@


1.14.5.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a8 3
 * Revision 1.14.5.1  1997/05/12  10:54:16  hope
 * branched from 1.14
 *
@


1.14.5.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a8 3
 * Revision 1.14.5.1  1997/05/12  10:54:16  hope
 * branched from 1.14
 *
@


1.14.5.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a8 3
 * Revision 1.14.5.1  1997/05/12  10:54:16  hope
 * branched from 1.14
 *
@


1.14.5.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a8 3
 * Revision 1.14.5.1.1.1  1997/07/28  18:36:50  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.14.4.1
log
@branched from 1.14
@
text
@a8 4
 * Revision 1.14  1996/11/08  14:23:12  matthew
 * [Bug #1661]
 * Changing io_desc to iodesc
 *
@


1.14.3.1
log
@branched from 1.14
@
text
@a8 4
 * Revision 1.14  1996/11/08  14:23:12  matthew
 * [Bug #1661]
 * Changing io_desc to iodesc
 *
@


1.14.3.1.1.1
log
@branched from 1.14.3.1
@
text
@a8 3
 * Revision 1.14.3.1  1996/12/17  18:20:37  hope
 * branched from 1.14
 *
@


1.14.2.1
log
@branched from 1.14
@
text
@a8 4
 * Revision 1.14  1996/11/08  14:23:12  matthew
 * [Bug #1661]
 * Changing io_desc to iodesc
 *
@


1.14.1.1
log
@branched from 1.14
@
text
@a8 4
 * Revision 1.14  1996/11/08  14:23:12  matthew
 * [Bug #1661]
 * Changing io_desc to iodesc
 *
@


1.14.1.1.1.1
log
@branched from 1.14.1.1
@
text
@a8 3
 * Revision 1.14.1.1  1996/11/14  13:24:33  hope
 * branched from 1.14
 *
@


1.13
log
@Sorting out lost version problems
@
text
@d9 3
d18 1
a18 1
 * Move io_desc from os_io.sml to here and also add conversion
d23 1
a23 1
 * Move the definition of a io_desc from OS.IO to here and called it file_desc
d80 1
a80 1
  datatype io_desc = IO_DESC of int      (* Unix style file descriptor *)
d83 1
a83 1
   * Convert a file_desc to an io_desc.
d86 1
a86 1
  val fdToIOD : file_desc -> io_desc = env "Win32.fdToIOD"
@


1.12
log
@[Bug #1426]
Removing Win32 environment and using registry instead.
@
text
@d9 10
d67 1
d71 3
a73 1
  val env = MLWorks.Internal.Runtime.environment
d75 1
a75 2
  type syserror = int
  exception SysErr = MLWorks.Internal.SysErr
d77 1
d79 5
a83 1
  datatype file_desc = FILE_DESC of int
@


1.11
log
@[Bug #1554]
Move io_desc from os_io.sml to here and also add conversion
function fdToIOD to convert between file descriptors and io
descriptors.
@
text
@d52 1
a52 1

d57 3
d62 2
a63 8
  type syserror = MLWorks.Internal.Error.syserror
  exception SysErr = MLWorks.Internal.Error.SysErr


  type file_desc = MLWorks.Internal.IO.file_desc (* Win32 HANDLE *)

  datatype io_desc = IO_DESC of int      (* Unix style file descriptor *)

a64 5
  (*
   * Convert a file_desc to an io_desc.
   * Raises OS.SysErr if the conversion cannot be done.
   *)
  val fdToIOD : file_desc -> io_desc = env "Win32.fdToIOD"
d66 1
d68 1
a68 2
  val environment : unit -> string list =
    env "system os win32 environment"
d70 23
@


1.11.3.1
log
@branched from 1.11
@
text
@a8 6
 * Revision 1.11  1996/08/21  12:02:34  stephenb
 * [Bug #1554]
 * Move io_desc from os_io.sml to here and also add conversion
 * function fdToIOD to convert between file descriptors and io
 * descriptors.
 *
@


1.11.2.1
log
@branched from 1.11
@
text
@a8 6
 * Revision 1.11  1996/08/21  12:02:34  stephenb
 * [Bug #1554]
 * Move io_desc from os_io.sml to here and also add conversion
 * function fdToIOD to convert between file descriptors and io
 * descriptors.
 *
@


1.11.1.1
log
@branched from 1.11
@
text
@a8 6
 * Revision 1.11  1996/08/21  12:02:34  stephenb
 * [Bug #1554]
 * Move io_desc from os_io.sml to here and also add conversion
 * function fdToIOD to convert between file descriptors and io
 * descriptors.
 *
@


1.10
log
@Move the definition of a io_desc from OS.IO to here and called it file_desc
so that it is possible to construct a file_desc for testing purposes by dealing
directly with the representation.
@
text
@d9 5
d59 7
a65 2
  type syserror = int
  exception SysErr = MLWorks.Internal.SysErr
d68 5
a72 1
  datatype file_desc = FILE_DESC of int
@


1.9
log
@Remove the find_{first_file,next_file,close} functions since
they were only here to support OS.FileSys.{open,read,close}Dir and
these now pull the relevant routines through directly from the runtime.
@
text
@d9 5
d56 4
@


1.8
log
@Remove various functions that are now pulled through directly
in _os_file_sys.sml.
@
text
@d9 4
a53 12


  type DirHandle = int

  val find_first_file : string -> string * DirHandle =
    env "system os win32 find_first_file"

  val find_next_file : DirHandle -> string =
    env "system os win32 find_next_file"

  val find_close : DirHandle -> unit =
    env "system os win32 find_close"
@


1.7
log
@Fixing problem with SysErr
@
text
@d9 3
a50 8
  val get_current_directory : unit -> string =
    env "system os win32 getcd"

  val set_current_directory : string -> unit =
    env "system os win32 setcd"

  val get_path_name : string -> string =
    env "system os win32 get_path_name"
@


1.6
log
@Adding Win32 call for creating a process with priorities ...
@
text
@d9 3
d43 1
a43 4
  exception SysErr of (string * syserror MLWorks.Option.option)
  val sysErrRef = env "exception syserr"
  val _ = sysErrRef := SysErr ("", MLWorks.Option.NONE)

@


1.5
log
@Replace the Win32 exception with an OS.SysErr compatible exception
so that this functor can be used to create an Os structure.
@
text
@d9 4
d67 7
@


1.4
log
@Adding set_current_directory
@
text
@d9 3
d33 1
a33 3
  exception Win32 of int

  fun env s = MLWorks.Internal.Value.cast (MLWorks.Internal.Runtime.environment s)
d35 4
a38 1
  val win32_ref = env "system os win32 exception Win32"
a39 1
  val _ = win32_ref := Win32 0
@


1.3
log
@Add missing integer to Win32 exception constructor.
@
text
@d9 3
d43 3
@


1.2
log
@Bind the exception handler -- should have been done in OS reorg.
@
text
@d9 3
d33 1
a33 1
  val _ = win32_ref := Win32
@


1.1
log
@new unit
OS reorganisation: the pervasive library no longer contains
OS specific stuff such as the NT structure, instead it has
been factored out as a separate structure and renamed Win32.
@
text
@d8 7
a14 1
 * $Log$
d28 4
d33 1
a33 1
    env "system os win_nt environment"
d36 1
a36 1
    env "system os win_nt getcd"
d39 1
a39 1
    env "system os win_nt get_path_name"
d44 1
a44 1
    env "system os win_nt find_first_file"
d47 1
a47 1
    env "system os win_nt find_next_file"
d50 1
a50 1
    env "system os win_nt find_close"
@
