head	1.12;
access;
symbols;
locks; strict;
comment	@ * @;


1.12
date	96.05.16.15.52.47;	author stephenb;	state Exp;
branches;
next	1.11;

1.11
date	96.05.08.12.31.03;	author stephenb;	state Exp;
branches;
next	1.10;

1.10
date	96.05.01.09.22.58;	author stephenb;	state Exp;
branches;
next	1.9;

1.9
date	96.04.18.15.26.07;	author jont;	state Exp;
branches;
next	1.8;

1.8
date	96.03.28.13.58.49;	author stephenb;	state Exp;
branches;
next	1.7;

1.7
date	96.03.12.15.42.48;	author matthew;	state Exp;
branches;
next	1.6;

1.6
date	96.01.18.16.23.58;	author stephenb;	state Exp;
branches;
next	1.5;

1.5
date	96.01.15.14.44.55;	author matthew;	state Exp;
branches;
next	1.4;

1.4
date	95.12.04.16.28.34;	author matthew;	state Exp;
branches;
next	1.3;

1.3
date	95.04.20.19.43.48;	author daveb;	state Exp;
branches;
next	1.2;

1.2
date	95.04.12.13.30.46;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	95.01.25.17.15.41;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
The OS.FileSys structure from the basis.
@


1.12
log
@Add a bunch of stubs so that it at least looks like it implements
the OS_FILE_SYS interface.
@
text
@(* FILE SYSTEM INTERFACE *)
(*
 * This should be the version from the revised basis.
 * For now it just contains the expand_path function.
 *
 * Copyright Harlequin Ltd. 1994.
 *
 * $Log: _win_ntfilesys.sml,v $
 * Revision 1.11  1996/05/08  12:31:03  stephenb
 * Rename filesys to be os_filesys in line with latest file naming conventions.
 *
 * Revision 1.10  1996/05/01  09:22:58  stephenb
 * Add some more missing functions.
 * Specifically: fileSize and modTime
 *
 * Revision 1.9  1996/04/18  15:26:07  jont
 * initbasis moves to basis
 *
 * Revision 1.8  1996/03/28  13:58:49  stephenb
 * FILE_SYS -> OS_FILE_SYS
 *
 * Revision 1.7  1996/03/12  15:42:48  matthew
 * Adding chDir and setDir
 *
 * Revision 1.6  1996/01/18  16:23:58  stephenb
 * OS reorganisation: Since the pervasive library no longer
 * contains OS specific stuff, parameterise the functor with
 * the Win32 structure.
 *
 * Revision 1.5  1996/01/15  14:44:55  matthew
 * Adding directory functions
 *
 * Revision 1.4  1995/12/04  16:28:34  matthew
 * Adding directory functions
 *
 * Revision 1.3  1995/04/20  19:43:48  daveb
 * filesys moved from utils to initbasis..
 * Changed names to match intial basis.
 * Moved BadHomeName to getenv.
 *
 * Revision 1.2  1995/04/12  13:30:46  jont
 * Change FILESYS to FILE_SYS
 *
 * Revision 1.1  1995/01/25  17:15:41  daveb
 * new unit
 * The OS.FileSys structure from the basis.
 *
 *)

require "^.basis.toplevel";
require "^.basis.os_filesys";
require "^.basis.__word";
require "^.basis.__word32";
require "^.basis.__position";
require "__time";
require "win32";


functor Win_ntFileSys (structure Win32: WIN32): OS_FILE_SYS =
struct
  val env = MLWorks.Internal.Runtime.environment
  exception Unimplemented of string

  datatype dirstream = DIRSTREAM of (Win32.DirHandle * string list ref)

  (* Need to sort out exactly what exceptions etc. can be raised here *)
  fun openDir dir = 
    let
      val dirname = if dir = "" then "*" else dir ^ "/*"
      val (file,dirhandle) = Win32.find_first_file dirname
    in
      DIRSTREAM (dirhandle,ref [file])
    end

  fun readDir (DIRSTREAM (dirhandle,ref [])) = 
    (Win32.find_next_file dirhandle handle _ => "")
    | readDir (DIRSTREAM (dirhandle,r as ref (a::b))) =
      (r := b;
       a)

  fun rewindDir d = raise Unimplemented "rewindDir"

  fun closeDir (DIRSTREAM (dirhandle,_)) = 
    Win32.find_close dirhandle

  val chDir = Win32.set_current_directory;

  val getDir = Win32.get_current_directory;

  fun mkDir d = raise Unimplemented "mkDir"

  fun rmDir d = raise Unimplemented "rmDir"

  fun isDir s = (openDir s; true) handle _ => false

  fun isLink _ = false  (* Win32 doesn't support links *)

  fun readLink _ = raise Win32.SysErr ("Win32 does not support links", NONE)

  val fullPath = Win32.get_path_name   (* XXX: is this correct? *)

  fun realPath "" = Win32.get_current_directory ()
    | realPath p = Win32.get_path_name p

  val modTime : string -> Time.time = env "OS.FileSys.modTime"

  val fileSize : string -> int = env "OS.FileSys.fileSize"

  fun setTime _ = raise Unimplemented "setTime"

  fun remove _ = raise Unimplemented "remove"

  fun rename _ = raise Unimplemented "rename"

  datatype access_mode = A_READ | A_WRITE | A_EXEC

  fun access _ = raise Unimplemented "access"

  fun tmpName _ = raise Unimplemented "tmpName"

  datatype file_id = FILE_ID of int (* XXX: just a dummy definition for now *)

  fun fileId _ = raise Unimplemented "fileId"

  fun hash _ = raise Unimplemented "hash"

  fun compare _ = raise Unimplemented "compare"

end
@


1.11
log
@Rename filesys to be os_filesys in line with latest file naming conventions.
@
text
@d9 3
d50 1
d52 3
a61 7

  fun realPath "" = Win32.get_current_directory ()
    | realPath p = Win32.get_path_name p

  val getDir = Win32.get_current_directory;
  val chDir = Win32.set_current_directory;

d81 2
d86 8
d96 8
a103 1
  fun rewindDir d = raise Unimplemented "rewindDir"
d108 20
@


1.10
log
@Add some more missing functions.
Specifically: fileSize and modTime
@
text
@d9 4
d47 2
a48 2
require "../basis/filesys";
require "../system/__time";
@


1.9
log
@initbasis moves to basis
@
text
@d9 3
d44 1
d50 2
d83 4
@


1.8
log
@FILE_SYS -> OS_FILE_SYS
@
text
@d9 3
d40 1
a40 1
require "../initbasis/filesys";
@


1.7
log
@Adding chDir and setDir
@
text
@d9 3
d41 1
a41 1
functor Win_ntFileSys (structure Win32: WIN32): FILE_SYS =
@


1.6
log
@OS reorganisation: Since the pervasive library no longer
contains OS specific stuff, parameterise the functor with
the Win32 structure.
@
text
@d9 5
d44 1
@


1.5
log
@Adding directory functions
@
text
@d9 3
d30 2
d33 1
a33 1
functor Win_ntFileSys (): FILE_SYS =
d35 2
a36 3
  structure NT = MLWorks.OS.Win_nt
  fun realPath "" = NT.get_current_directory ()
    | realPath p = NT.get_path_name p
d38 1
a38 1
  val getDir = NT.get_current_directory;
d42 1
a42 1
  datatype dirstream = DIRSTREAM of (NT.DirHandle * string list ref)
d48 1
a48 1
      val (file,dirhandle) = NT.find_first_file dirname
d54 1
a54 1
    (NT.find_next_file dirhandle handle _ => "")
d60 1
a60 1
    NT.find_close dirhandle
@


1.4
log
@Adding directory functions
@
text
@d9 3
d30 3
a32 1
  val realPath = MLWorks.OS.Win_nt.get_path_name
d34 1
a34 1
  val getDir = MLWorks.OS.Win_nt.get_current_directory;
d38 21
a58 1
  type dirstream = int
a59 2
  fun openDir s = raise Unimplemented "openDir"
  fun readDir d = raise Unimplemented "readDir"
a60 1
  fun closeDir d = raise Unimplemented "closeDir"
a61 1
  fun isDir s = raise Unimplemented "isDir"
@


1.3
log
@filesys moved from utils to initbasis..
Changed names to match intial basis.
Moved BadHomeName to getenv.
@
text
@d9 5
d30 11
@


1.2
log
@Change FILESYS to FILE_SYS
@
text
@d9 3
d18 1
a18 1
require "../utils/filesys";
d22 1
a22 3
  exception BadHomeName of string

  val expand_path = MLWorks.OS.Win_nt.get_path_name
d24 1
a24 1
  val getdir = MLWorks.OS.Win_nt.get_current_directory;
@


1.1
log
@new unit
The OS.FileSys structure from the basis.
@
text
@d8 4
a11 1
 * $Log$
d17 1
a17 1
functor Win_ntFileSys (): FILESYS =
@
