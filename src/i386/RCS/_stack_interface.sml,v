head	1.15;
access;
symbols
	MLW_daveb_inline_1_4_99:1.15.1
	MLWorks_21c0_1999_03_25:1.15
	MLWorks_20c1_1998_08_20:1.15
	MLWorks_20c0_1998_08_04:1.15
	MLWorks_20b2c2_1998_06_19:1.15
	MLWorks_20b2_Windows_1998_06_12:1.15
	MLWorks_20b1c1_1998_05_07:1.15
	MLWorks_20b0_1998_04_07:1.15
	MLWorks_20b0_1998_03_20:1.14
	MLWorks_20m2_1998_02_16:1.14
	MLWorks_20m1_1997_10_23:1.14
	MLWorks_11r1:1.14.1.1.1.1.1
	MLWorks_workspace_97:1.14.3
	MLWorks_dt_wizard:1.14.2
	MLWorks_11c0_1997_09_09:1.14.1.1.1.1
	MLWorks_10r3:1.14.1.1.3
	MLWorks_10r2_551:1.14.1.1.2
	MLWorks_11:1.14.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.14.1.1
	MLWorks_20m0_1997_06_20:1.14
	MLWorks_1_0_r2c2_1997_06_14:1.14.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.14.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.14.1
	MLWorks_BugFix_1997_04_24:1.14
	MLWorks_1_0_r2_Win32_1997_04_11:1.14
	MLWorks_1_0_r2_Unix_1997_04_04:1.14
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.13.2.1.1
	MLWorks_gui_1996_12_18:1.13.3
	MLWorks_1_0_Win32_1996_12_17:1.13.2
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.12.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.12.4.1
	MLWorks_1_0_Irix_1996_11_28:1.12.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.13.1
	MLWorks_1_0_Unix_1996_11_14:1.12.4
	MLWorks_Open_Beta2_1996_10_11:1.12.3
	MLWorks_License_dev:1.12.2
	MLWorks_1_open_beta_1996_09_13:1.12.1
	MLWorks_Open_Beta_1996_08_22:1.12
	MLWorks_Beta_1996_07_02:1.12
	MLWorks_Beta_1996_06_07:1.12
	MLWorks_Beta_1996_06_06:1.12
	MLWorks_Beta_1996_06_05:1.12
	MLWorks_Beta_1996_06_03:1.12
	MLWorks_Beta_1996_05_31:1.12
	MLWorks_Beta_1996_05_30:1.12;
locks; strict;
comment	@ * @;


1.15
date	98.03.23.15.01.39;	author jont;	state Exp;
branches
	1.15.1.1;
next	1.14;

1.14
date	97.03.21.10.33.10;	author stephenb;	state Exp;
branches
	1.14.1.1
	1.14.2.1
	1.14.3.1;
next	1.13;

1.13
date	96.11.14.11.31.50;	author stephenb;	state Exp;
branches
	1.13.1.1
	1.13.2.1
	1.13.3.1;
next	1.12;

1.12
date	96.05.17.09.47.34;	author matthew;	state Exp;
branches
	1.12.1.1
	1.12.2.1
	1.12.3.1
	1.12.4.1;
next	1.11;

1.11
date	96.05.01.12.59.44;	author jont;	state Exp;
branches;
next	1.10;

1.10
date	96.03.20.14.42.14;	author matthew;	state Exp;
branches;
next	1.9;

1.9
date	96.02.20.09.18.30;	author stephenb;	state Exp;
branches;
next	1.8;

1.8
date	96.02.14.12.46.03;	author stephenb;	state Exp;
branches;
next	1.7;

1.7
date	95.12.18.13.47.41;	author matthew;	state Exp;
branches;
next	1.6;

1.6
date	95.10.17.14.05.26;	author matthew;	state Exp;
branches;
next	1.5;

1.5
date	95.06.14.13.24.14;	author jont;	state Exp;
branches;
next	1.4;

1.4
date	95.06.13.09.58.30;	author jont;	state Exp;
branches;
next	1.3;

1.3
date	95.04.27.15.57.10;	author jont;	state Exp;
branches;
next	1.2;

1.2
date	95.04.21.14.30.47;	author matthew;	state Exp;
branches;
next	1.1;

1.1
date	95.03.20.11.04.33;	author matthew;	state Exp;
branches;
next	;

1.12.1.1
date	96.09.13.11.15.04;	author hope;	state Exp;
branches;
next	;

1.12.2.1
date	96.10.07.16.05.24;	author hope;	state Exp;
branches;
next	;

1.12.3.1
date	96.10.17.11.23.40;	author hope;	state Exp;
branches;
next	;

1.12.4.1
date	96.11.14.12.48.04;	author hope;	state Exp;
branches
	1.12.4.1.1.1;
next	;

1.12.4.1.1.1
date	96.11.28.14.59.35;	author hope;	state Exp;
branches;
next	;

1.13.1.1
date	96.11.22.18.08.03;	author hope;	state Exp;
branches;
next	;

1.13.2.1
date	96.12.17.17.46.45;	author hope;	state Exp;
branches
	1.13.2.1.1.1;
next	;

1.13.2.1.1.1
date	97.02.24.11.36.23;	author hope;	state Exp;
branches;
next	;

1.13.3.1
date	96.12.18.09.40.44;	author hope;	state Exp;
branches;
next	;

1.14.1.1
date	97.05.12.10.33.07;	author hope;	state Exp;
branches
	1.14.1.1.1.1
	1.14.1.1.2.1
	1.14.1.1.3.1;
next	;

1.14.1.1.1.1
date	97.07.28.18.18.49;	author daveb;	state Exp;
branches
	1.14.1.1.1.1.1.1;
next	;

1.14.1.1.1.1.1.1
date	97.10.07.11.43.55;	author jkbrook;	state Exp;
branches;
next	;

1.14.1.1.2.1
date	97.09.08.17.12.25;	author daveb;	state Exp;
branches;
next	;

1.14.1.1.3.1
date	97.09.09.14.08.02;	author daveb;	state Exp;
branches;
next	;

1.14.2.1
date	97.09.10.19.23.01;	author brucem;	state Exp;
branches;
next	;

1.14.3.1
date	97.09.11.20.54.12;	author daveb;	state Exp;
branches;
next	;

1.15.1.1
date	99.04.01.17.56.29;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
Machine dependent debugger stuff.
@


1.15
log
@[Bug #30090]
Remove use of MLWorks.IO
@
text
@(* _stack_interface the structure *)
(*
 * $Log: _stack_interface.sml,v $
 * Revision 1.14  1997/03/21  10:33:10  stephenb
 * [Bug #1822]
 * Add frame and ml_value types as which have been introduced
 * into the signature <URI:hope://MLWsrc/main/stack_interface.sml>
 * in version 1.4.
 *
 * Revision 1.13  1996/11/14  11:31:50  stephenb
 * [Bug #1767]
 * get_basic_frames: Remove "val bottom = next_frame bottom"
 * so that the top frame is not skipped (it is only on the SPARC
 * that it needs to be skipped).
 *
 * Revision 1.12  1996/05/17  09:47:34  matthew
 * Moved Bits to MLWorks.Internal
 *
 * Revision 1.11  1996/05/01  12:59:44  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
 * Revision 1.10  1996/03/20  14:42:14  matthew
 * Changes for new language definition
 *
 * Revision 1.9  1996/02/20  09:18:30  stephenb
 * Make the change that claims to have been made in the previous change!
 *
 * Revision 1.8  1996/02/14  12:46:03  stephenb
 * Add frame_code to support the implementation of "n" in the debugger.
 *
 * Revision 1.7  1995/12/18  13:47:41  matthew
 * Adding call to C set_frame_return_value
 *
 * Revision 1.6  1995/10/17  14:05:26  matthew
 * Adding "set_return_value" function
 *
 * for use in tracing.
 *
 * Revision 1.5  1995/06/14  13:24:14  jont
 * Cope with extra stack frame generated in ml_raise
 *
 * Revision 1.4  1995/06/13  09:58:30  jont
 * Convert to be Intel specific
 * Not complete yet, eg for argument acquisition
 *
 * Revision 1.3  1995/04/27  15:57:10  jont
 * Fix require statements and comments
 *
 * Revision 1.2  1995/04/21  14:30:47  matthew
 * Switching off debugging
 *
 * Revision 1.1  1995/03/20  11:04:33  matthew
 * new unit
 * Machine dependent debugger stuff.
 *
*)

require "^.basis.__text_io";
require "^.rts.gen.tags";
require "^.utils.crash";
require "^.main.stack_interface";

functor StackInterface (structure Tags : TAGS
                        structure Crash : CRASH
                          ) : STACK_INTERFACE =
  struct

    type frame = MLWorks.Internal.Value.Frame.frame

    type ml_value = MLWorks.Internal.Value.ml_value

    structure Bits = MLWorks.Internal.Bits

    (* This has been partially adapted for the 386 stuff *)
    val do_debug = false

    fun debug f =
      if do_debug
        then TextIO.output(TextIO.stdErr,"  # " ^ f () ^ "\n")
      else ()

    (* Miscellaneous utilities *)
    (* Maybe these should be elsewhere *)

    val is_ml_frame = MLWorks.Internal.Value.Frame.is_ml_frame
    val cast = MLWorks.Internal.Value.cast


    (* I386 specific stuff *)
    val sp_offset = 0
    val closure_offset = 1
    val arg_offset = 2 (* Wrong, but not yet determined anyway *)

    local
      val env = MLWorks.Internal.Runtime.environment
    in
      val frame_arg : frame -> ml_value = env "debugger frame argument"

      val set_frame_return_value : frame * ml_value -> unit = 
        env "debugger set frame return value"
        
    end

    (* "Generic" frame function *)

    fun next_frame frame : frame = 
      cast (MLWorks.Internal.Value.Frame.sub (frame,sp_offset))

    (* I386 version *)
    fun get_basic_frames (bottom,base_frame) =
      let
        fun scan (bottom,acc) =
          let
            val (another,next,offset) = MLWorks.Internal.Value.Frame.frame_next bottom
          in
            if another andalso next <> base_frame
              then
                scan (next,(next,offset,offset <> 0)::acc)
            else
              (if next <> base_frame then debug (fn _ => "No base frame") else ();
                 acc)
          end
        val acc = [(bottom,0,is_ml_frame bottom)]
      in
        case scan (bottom,acc) of
          (_::_::_::rest) => rest
        | (_::_::rest) => rest
        | (_::rest) => rest
        | rest => rest
(*        scan (bottom,acc)*)
      end

    fun variable_debug_frame frame = frame

    (* End I386 specific stuff *)

    fun frame_code frame = 
      let
        open MLWorks.Internal.Value
        val closure = Frame.sub (frame, closure_offset)
        val primary = primary closure
        val offset = 
          if primary = Tags.PAIRPTR then 0
          else if primary = Tags.POINTER then 1
          else Crash.impossible "bad primary for frame_name"
      in
        sub (closure, offset)
      end


    fun frame_name frame = MLWorks.Internal.Value.code_name (frame_code frame)


    fun frame_closure frame = MLWorks.Internal.Value.Frame.sub (frame,closure_offset)

    fun is_stack_extension_frame frame = 
      let
        val closure = frame_closure frame
      in
        cast closure = Bits.rshift (Tags.STACK_EXTENSION,2)
      end

  end

    
@


1.15.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a3 4
 * Revision 1.15  1998/03/23  15:01:39  jont
 * [Bug #30090]
 * Remove use of MLWorks.IO
 *
@


1.14
log
@[Bug #1822]
Add frame and ml_value types as which have been introduced
into the signature <URI:hope://MLWsrc/main/stack_interface.sml>
in version 1.4.
@
text
@d4 6
d61 1
d82 1
a82 1
        then MLWorks.IO.output(MLWorks.IO.std_err,"  # " ^ f () ^ "\n")
@


1.14.3.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a3 6
 * Revision 1.14  1997/03/21  10:33:10  stephenb
 * [Bug #1822]
 * Add frame and ml_value types as which have been introduced
 * into the signature <URI:hope://MLWsrc/main/stack_interface.sml>
 * in version 1.4.
 *
@


1.14.2.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a3 6
 * Revision 1.14  1997/03/21  10:33:10  stephenb
 * [Bug #1822]
 * Add frame and ml_value types as which have been introduced
 * into the signature <URI:hope://MLWsrc/main/stack_interface.sml>
 * in version 1.4.
 *
@


1.14.1.1
log
@branched from 1.14
@
text
@a3 6
 * Revision 1.14  1997/03/21  10:33:10  stephenb
 * [Bug #1822]
 * Add frame and ml_value types as which have been introduced
 * into the signature <URI:hope://MLWsrc/main/stack_interface.sml>
 * in version 1.4.
 *
@


1.14.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a3 3
 * Revision 1.14.1.1  1997/05/12  10:33:07  hope
 * branched from 1.14
 *
@


1.14.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a3 3
 * Revision 1.14.1.1  1997/05/12  10:33:07  hope
 * branched from 1.14
 *
@


1.14.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a3 3
 * Revision 1.14.1.1  1997/05/12  10:33:07  hope
 * branched from 1.14
 *
@


1.14.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a3 3
 * Revision 1.14.1.1.1.1  1997/07/28  18:18:49  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.13
log
@[Bug #1767]
get_basic_frames: Remove "val bottom = next_frame bottom"
so that the top frame is not skipped (it is only on the SPARC
that it needs to be skipped).
@
text
@d4 6
d55 3
a57 3
require "../rts/gen/tags";
require "../utils/crash";
require "../main/stack_interface";
d64 4
d93 1
a93 2
      val frame_arg : MLWorks.Internal.Value.Frame.frame -> MLWorks.Internal.Value.T = 
        env "debugger frame argument"
d95 1
a95 1
      val set_frame_return_value : MLWorks.Internal.Value.Frame.frame * MLWorks.Internal.Value.T -> unit = 
d102 1
a102 1
    fun next_frame frame : MLWorks.Internal.Value.Frame.frame = 
@


1.13.3.1
log
@branched from 1.13
@
text
@a3 6
 * Revision 1.13  1996/11/14  11:31:50  stephenb
 * [Bug #1767]
 * get_basic_frames: Remove "val bottom = next_frame bottom"
 * so that the top frame is not skipped (it is only on the SPARC
 * that it needs to be skipped).
 *
@


1.13.2.1
log
@branched from 1.13
@
text
@a3 6
 * Revision 1.13  1996/11/14  11:31:50  stephenb
 * [Bug #1767]
 * get_basic_frames: Remove "val bottom = next_frame bottom"
 * so that the top frame is not skipped (it is only on the SPARC
 * that it needs to be skipped).
 *
@


1.13.2.1.1.1
log
@branched from 1.13.2.1
@
text
@a3 3
 * Revision 1.13.2.1  1996/12/17  17:46:45  hope
 * branched from 1.13
 *
@


1.13.1.1
log
@branched from 1.13
@
text
@a3 6
 * Revision 1.13  1996/11/14  11:31:50  stephenb
 * [Bug #1767]
 * get_basic_frames: Remove "val bottom = next_frame bottom"
 * so that the top frame is not skipped (it is only on the SPARC
 * that it needs to be skipped).
 *
@


1.12
log
@Moved Bits to MLWorks.Internal
@
text
@d4 3
a109 2
        (* Skip a frame *)
        val bottom = next_frame bottom
@


1.12.4.1
log
@branched from 1.12
@
text
@a3 3
 * Revision 1.12  1996/05/17  09:47:34  matthew
 * Moved Bits to MLWorks.Internal
 *
@


1.12.4.1.1.1
log
@branched from 1.12.4.1
@
text
@a3 3
 * Revision 1.12.4.1  1996/11/14  12:48:04  hope
 * branched from 1.12
 *
@


1.12.3.1
log
@branched from 1.12
@
text
@a3 3
 * Revision 1.12  1996/05/17  09:47:34  matthew
 * Moved Bits to MLWorks.Internal
 *
@


1.12.2.1
log
@branched from 1.12
@
text
@a3 3
 * Revision 1.12  1996/05/17  09:47:34  matthew
 * Moved Bits to MLWorks.Internal
 *
@


1.12.1.1
log
@branched from 1.12
@
text
@a3 3
 * Revision 1.12  1996/05/17  09:47:34  matthew
 * Moved Bits to MLWorks.Internal
 *
@


1.11
log
@String functions explode, implode, chr and ord now only available from String
io functions and types
instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
now only available from MLWorks.IO
@
text
@d4 6
d55 2
a121 2

    structure Bits = MLWorks.Bits
@


1.10
log
@Changes for new language definition
@
text
@d4 3
d54 1
a54 1
        then output(MLWorks.IO.std_err,"  # " ^ f () ^ "\n")
@


1.9
log
@Make the change that claims to have been made in the previous change!
@
text
@d4 3
d58 1
a58 1
    val castit : 'a -> 'b = MLWorks.Internal.Value.cast (fn x => x)
d67 1
a67 1
      fun env s = MLWorks.Internal.Value.cast (MLWorks.Internal.Runtime.environment s)
d69 1
a69 1
      val frame_arg : MLWorks.Internal.Value.Frame.frame -> MLWorks.Internal.Value.ml_value = 
d72 3
a74 2
      val set_frame_return_value = env "debugger set frame return value"

d80 1
a80 1
      castit (MLWorks.Internal.Value.Frame.sub (frame,sp_offset))
d137 1
a137 1
        castit closure = Bits.rshift (Tags.STACK_EXTENSION,2)
@


1.8
log
@Add frame_code to support the implementation of "n" in the debugger.
@
text
@d4 3
d110 1
a110 1
    fun frame_name frame = 
d124 1
a124 1
    fun frame_name frame = MLWorks.Internal.Value.code_name (frame_name frame)
@


1.7
log
@Adding call to C set_frame_return_value
@
text
@d4 3
d117 1
a117 1
        code_name (sub (closure, offset))
a119 1
      fun frame_closure frame = MLWorks.Internal.Value.Frame.sub (frame,closure_offset)
d121 11
a131 6
      fun is_stack_extension_frame frame = 
        let
          val closure = frame_closure frame
        in
          castit closure = Bits.rshift (Tags.STACK_EXTENSION,2)
        end
@


1.6
log
@Adding "set_return_value" function

for use in tracing.
@
text
@d4 5
d57 9
a65 2
    fun frame_arg frame = MLWorks.Internal.Value.Frame.sub (frame,arg_offset)
    fun set_frame_return_value _ = MLWorks.Internal.Value.cast 0
@


1.5
log
@Cope with extra stack frame generated in ml_raise
@
text
@d4 3
d53 1
@


1.4
log
@Convert to be Intel specific
Not complete yet, eg for argument acquisition
@
text
@d4 4
d47 1
a47 1
    val arg_offset = 8 (* Wrong, but not yet determined anyway *)
d75 2
a76 1
          (_::_::rest) => rest
@


1.3
log
@Fix require statements and comments
@
text
@d4 3
d25 1
a25 1
    (* This hasn't yet been adapted for the 386 stuff *)
d40 4
a43 4
    (* SPARC specific stuff *)
    val sp_offset = 14
    val closure_offset = 9
    val arg_offset = 8
a48 1
    (* SPARC version *)
d52 1
d70 5
a74 1
        scan (bottom,acc)
d79 1
a79 1
    (* End SPARC specific stuff *)
@


1.2
log
@Switching off debugging
@
text
@d3 8
a10 5
$Log: _stack_interface.sml,v $
# Revision 1.1  1995/03/20  11:04:33  matthew
# new unit
# Machine dependent debugger stuff.
#
d13 1
a13 2
require "rts/gen/tags";

@


1.1
log
@new unit
Machine dependent debugger stuff.
@
text
@d3 5
a7 1
$Log: stack_interface.sml,v $
d21 1
a21 1
    val do_debug = true
@
