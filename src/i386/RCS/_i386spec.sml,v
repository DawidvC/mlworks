head	1.23;
access;
symbols
	MLW_daveb_inline_1_4_99:1.23.1
	MLWorks_21c0_1999_03_25:1.23
	MLWorks_20c1_1998_08_20:1.22
	MLWorks_20c0_1998_08_04:1.22
	MLWorks_20b2c2_1998_06_19:1.22
	MLWorks_20b2_Windows_1998_06_12:1.22
	MLWorks_20b1c1_1998_05_07:1.22
	MLWorks_20b0_1998_04_07:1.22
	MLWorks_20b0_1998_03_20:1.22
	MLWorks_20m2_1998_02_16:1.22
	MLWorks_20m1_1997_10_23:1.22
	MLWorks_11r1:1.17.1.1.1.1.1
	MLWorks_workspace_97:1.22.2
	MLWorks_dt_wizard:1.22.1
	MLWorks_11c0_1997_09_09:1.17.1.1.1.1
	MLWorks_10r3:1.17.1.1.3
	MLWorks_10r2_551:1.17.1.1.2
	MLWorks_11:1.17.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.17.1.1
	MLWorks_20m0_1997_06_20:1.22
	MLWorks_1_0_r2c2_1997_06_14:1.17.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.17.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.17.1
	MLWorks_BugFix_1997_04_24:1.17
	MLWorks_1_0_r2_Win32_1997_04_11:1.17
	MLWorks_1_0_r2_Unix_1997_04_04:1.17
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.14.6.1.1
	MLWorks_gui_1996_12_18:1.14.7
	MLWorks_1_0_Win32_1996_12_17:1.14.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.14.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.14.4.1
	MLWorks_1_0_Irix_1996_11_28:1.14.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.14.5
	MLWorks_1_0_Unix_1996_11_14:1.14.4
	MLWorks_Open_Beta2_1996_10_11:1.14.3
	MLWorks_License_dev:1.14.2
	MLWorks_1_open_beta_1996_09_13:1.14.1
	MLWorks_Open_Beta_1996_08_22:1.14
	MLWorks_Beta_1996_07_02:1.14
	MLWorks_Beta_1996_06_07:1.14
	MLWorks_Beta_1996_06_06:1.14
	MLWorks_Beta_1996_06_05:1.14
	MLWorks_Beta_1996_06_03:1.14
	MLWorks_Beta_1996_05_31:1.14
	MLWorks_Beta_1996_05_30:1.14;
locks; strict;
comment	@ * @;


1.23
date	98.08.27.12.13.50;	author jont;	state Exp;
branches
	1.23.1.1;
next	1.22;

1.22
date	97.05.27.09.55.37;	author jont;	state Exp;
branches
	1.22.1.1
	1.22.2.1;
next	1.21;

1.21
date	97.05.13.13.38.14;	author jont;	state Exp;
branches;
next	1.20;

1.20
date	97.05.06.09.59.50;	author jont;	state Exp;
branches;
next	1.19;

1.19
date	97.04.25.12.27.43;	author jont;	state Exp;
branches;
next	1.18;

1.18
date	97.04.24.15.46.08;	author jont;	state Exp;
branches;
next	1.17;

1.17
date	97.03.25.10.22.50;	author matthew;	state Exp;
branches
	1.17.1.1;
next	1.16;

1.16
date	97.01.21.16.08.09;	author jont;	state Exp;
branches;
next	1.15;

1.15
date	96.12.18.13.12.12;	author matthew;	state Exp;
branches;
next	1.14;

1.14
date	96.03.20.14.38.18;	author matthew;	state Exp;
branches
	1.14.1.1
	1.14.2.1
	1.14.3.1
	1.14.4.1
	1.14.5.1
	1.14.6.1
	1.14.7.1;
next	1.13;

1.13
date	95.12.20.12.50.31;	author jont;	state Exp;
branches;
next	1.12;

1.12
date	95.08.14.12.15.06;	author jont;	state Exp;
branches;
next	1.11;

1.11
date	95.07.25.15.58.44;	author jont;	state Exp;
branches;
next	1.10;

1.10
date	95.05.30.12.54.53;	author matthew;	state Exp;
branches;
next	1.9;

1.9
date	94.11.18.15.10.17;	author jont;	state Exp;
branches;
next	1.8;

1.8
date	94.11.11.13.57.07;	author jont;	state Exp;
branches;
next	1.7;

1.7
date	94.10.12.13.57.59;	author jont;	state Exp;
branches;
next	1.6;

1.6
date	94.10.06.13.39.13;	author jont;	state Exp;
branches;
next	1.5;

1.5
date	94.09.21.16.11.32;	author jont;	state Exp;
branches;
next	1.4;

1.4
date	94.09.19.10.34.12;	author jont;	state Exp;
branches;
next	1.3;

1.3
date	94.09.16.10.30.02;	author jont;	state Exp;
branches;
next	1.2;

1.2
date	94.09.15.17.55.03;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	94.09.15.12.32.21;	author jont;	state Exp;
branches;
next	;

1.14.1.1
date	96.09.13.11.15.16;	author hope;	state Exp;
branches;
next	;

1.14.2.1
date	96.10.07.16.05.35;	author hope;	state Exp;
branches;
next	;

1.14.3.1
date	96.10.17.11.23.50;	author hope;	state Exp;
branches;
next	;

1.14.4.1
date	96.11.14.12.48.16;	author hope;	state Exp;
branches
	1.14.4.1.1.1;
next	;

1.14.4.1.1.1
date	96.11.28.14.59.47;	author hope;	state Exp;
branches;
next	;

1.14.5.1
date	96.11.22.18.08.14;	author hope;	state Exp;
branches;
next	;

1.14.6.1
date	96.12.17.17.46.55;	author hope;	state Exp;
branches
	1.14.6.1.1.1;
next	;

1.14.6.1.1.1
date	97.02.24.11.36.35;	author hope;	state Exp;
branches;
next	;

1.14.7.1
date	96.12.18.09.40.54;	author hope;	state Exp;
branches;
next	;

1.17.1.1
date	97.05.12.10.33.18;	author hope;	state Exp;
branches
	1.17.1.1.1.1
	1.17.1.1.2.1
	1.17.1.1.3.1;
next	;

1.17.1.1.1.1
date	97.07.28.18.18.39;	author daveb;	state Exp;
branches
	1.17.1.1.1.1.1.1;
next	;

1.17.1.1.1.1.1.1
date	97.10.07.11.43.43;	author jkbrook;	state Exp;
branches;
next	;

1.17.1.1.2.1
date	97.09.08.17.12.13;	author daveb;	state Exp;
branches;
next	;

1.17.1.1.3.1
date	97.09.09.14.07.51;	author daveb;	state Exp;
branches;
next	;

1.22.1.1
date	97.09.10.19.22.47;	author brucem;	state Exp;
branches;
next	;

1.22.2.1
date	97.09.11.20.53.58;	author daveb;	state Exp;
branches;
next	;

1.23.1.1
date	99.04.01.17.56.22;	author daveb;	state Exp;
branches;
next	;


desc
@new file
@


1.23
log
@[Bug #70040]
Modify register colourer to use stack colourer only if requested from machspec
@
text
@(*   ==== MACHINE SPECIFICATION ====
 *              FUNCTOR
 *
 *  $Log: _i386spec.sml,v $
 * Revision 1.22  1997/05/27  09:55:37  jont
 * [Bug #30076]
 * Adding argument passing pseudo registers for multiple argument passing work.
 *
 * Revision 1.21  1997/05/13  13:38:14  jont
 * [Bug #20038]
 * Add referenced_by_alloc
 *
 * Revision 1.20  1997/05/06  09:59:50  jont
 * [Bug #30088]
 * Get rid of MLWorks.Option
 *
 * Revision 1.19  1997/04/25  12:27:43  jont
 * [Bug #20018]
 * Make sure fp_global is reserved
 *
 * Revision 1.18  1997/04/24  15:46:08  jont
 * [Bug #20007]
 * Adding reserved_but_preferencable registers
 *
 * Revision 1.17  1997/03/25  10:22:50  matthew
 * Adding mach_type value
 *
 * Revision 1.16  1997/01/21  16:08:09  jont
 * [Bug #0]
 * Add in corrupted_by_alloc and leaf_regs
 *
 * Revision 1.15  1996/12/18  13:12:12  matthew
 * Adding fp_arg_regs
 *
 * Revision 1.14  1996/03/20  14:38:18  matthew
 * Changes for new language definition
 *
 * Revision 1.13  1995/12/20  12:50:31  jont
 * Add extra field to procedure_parameters to contain old (pre register allocation)
 * spill sizes. This is for the i386, where spill assignment is done in the backend
 *
Revision 1.12  1995/08/14  12:15:06  jont
Add bits_per_word
Remove smallest_int, largest_int, largest_word

Revision 1.11  1995/07/25  15:58:44  jont
Add largest_word

Revision 1.10  1995/05/30  12:54:53  matthew
Adding debugging_reserved register list

Revision 1.9  1994/11/18  15:10:17  jont
Modify to new register assignment

Revision 1.8  1994/11/11  13:57:07  jont
Add has_immediate_store flag

Revision 1.7  1994/10/12  13:57:59  jont
Add callee_closure to reserved register list

Revision 1.6  1994/10/06  13:39:13  jont
Get tail_closure right (cf MIPS, not SPARC)

Revision 1.5  1994/09/21  16:11:32  jont
Add do_unspill value to control register allocator

Revision 1.4  1994/09/19  10:34:12  jont
Prevent list of special assignments clashing with gcs

Revision 1.3  1994/09/16  10:30:02  jont
Get register preference order unique for callee saves

Revision 1.2  1994/09/15  17:55:03  jont
Add chr and ord
Also add Chr and Ord

Revision 1.1  1994/09/15  12:32:21  jont
new file

 *
 *  Copyright (C) 1994 Harlequin Ltd.
 *)


require "../utils/set";
require "../utils/crash";
require "../main/machspec";
require "i386types";


functor I386Spec (
  structure I386Types	: I386TYPES
  structure Set		: SET
  structure Crash       : CRASH
) : MACHSPEC =

struct

  structure Set = Set


  (* === What sort of machine is it? === *)

  datatype MachType = SPARC | MIPS | I386

  val mach_type : MachType = I386

  (*  === MACHINE REGISTERS ===  *)


  type register = I386Types.I386_Reg



  local
    open I386Types
  in

    (*  == Special registers ==  *)

    val caller_arg =		caller_arg
    val callee_arg =		callee_arg
    val caller_arg_regs =	[caller_arg, o_arg1, o_arg2, o_arg3, o_arg4, o_arg5, o_arg6, o_arg7]
    val callee_arg_regs =	[callee_arg, i_arg1, i_arg2, i_arg3, i_arg4, i_arg5, i_arg6, i_arg7]
    val caller_closure =	caller_closure
    val callee_closure =	callee_closure
    val fp_arg_regs =           []
    val tail_arg =		callee_arg
    val tail_closure = 		caller_closure
    val fp =			stack (* Not using this *)
    val sp =			sp
    val handler =		heap (* This one in store *)
    val global =		global
    val implicit =		implicit
    val fp_global =		stack (* Shouldn't be needed *)

    val zero = NONE


    (*  == General registers ==
     *
     *  gcs:		int/ptr visible to garbage collector
     *  non_gcs:	int/ptr not visible to garbage collector
     *  fps:		floating point registers
     *)
    
    val gcs = [EAX, EDX]

    val non_gcs = []

    val fps : register list = case I386Types.fp_used of
      I386Types.single =>
        Crash.impossible "i386spec not configured for single-float case"
    | I386Types.double =>
        []
    | I386Types.extended =>
        Crash.impossible "i386spec not configured for extended-float case"

    val empty_register_set : register Set.Set = Set.empty_set
    val corrupted_by_callee =
      {gc = Set.list_to_set(caller_closure :: implicit :: caller_arg_regs),
       non_gc = empty_register_set,
       fp = empty_register_set}

    val corrupted_by_alloc =
      {gc = empty_register_set,
       non_gc = empty_register_set,
       fp = empty_register_set }

    val defined_on_entry =
      {gc = Set.list_to_set [caller_closure],
       non_gc = empty_register_set,
       fp = empty_register_set }

    val referenced_by_alloc =
      {gc = Set.list_to_set [callee_closure],
       (* This is to prevent callee_closure from being updated before an alloc *)
       (* which would then break the gc *)
       non_gc = empty_register_set,
       fp = empty_register_set }

    (*  == Reserved registers ==
     *
     *  These can never be used for anything except their special purpose,
     *  they can't even be temporarily spilled.  This list includes the
     *  temporary registers.
     *)

    val reserved =
      {gc = Set.list_to_set [sp, fp, global,
                             implicit,
                             handler, callee_closure,
			     o_arg1, o_arg2, o_arg3, o_arg4, o_arg5, o_arg6, o_arg7,
			     i_arg1, i_arg2, i_arg3, i_arg4, i_arg5, i_arg6, i_arg7],
       non_gc = empty_register_set,
       fp = Set.list_to_set[fp_global]}

    val debugging_reserved = reserved

    val reserved_but_preferencable =
      {gc = [callee_closure, global, i_arg1, i_arg2, i_arg3, i_arg4, i_arg5, i_arg6, i_arg7],
       non_gc = [],
       fp = []}

    (* For debugging code, no extra preferencing *)
    val debugging_reserved_but_preferencable =
      {gc = [],
       non_gc = [],
       fp = []}

    (*  == Temporary registers ==
     *
     *  These are the registers reserved for use as temporaries for the
     *  register allocator.  None are required for the PC.
     *)

    val temporary =
      {gc = [],
       non_gc = [],
       fp = []}


    (*  == Allocation order ==
     *
     *)

    local
      fun rank EAX = 2
        | rank EBX = 0
        | rank ECX = 5
        | rank EDX = 3
        | rank EBP = 1
        | rank ESP = 5
        | rank EDI = 4
        | rank ESI = 5
        | rank _ = 5

      (* Note that EAX is preferenced ahead of EDX *)
      (* This order (one preference level for each callee save) *)
      (* is required for stack unwinding during exception handling *)
      (* Also, we preference EBX before EBP as allocating EBP forces non-leaf *)

      fun order (reg, reg') =
        let
          val r = rank reg
          val r' = rank reg'
        in
          r < r'
        end
 
      fun equal (reg, reg') =
        let
          val r = rank reg
          val r' = rank reg'
        in
          r = r'
        end

      fun fp_order(reg, reg') =
	let
	  val b1 = Set.is_member(reg, #fp corrupted_by_callee)
	  val b2 = Set.is_member(reg', #fp corrupted_by_callee)
	in
          b1 andalso not b2
	end

      fun fp_equal (reg, reg') =
	let
	  val b1 = Set.is_member(reg, #fp corrupted_by_callee)
	  val b2 = Set.is_member(reg', #fp corrupted_by_callee)
	in
          b1 = b2
	end

    in
      val allocation_order =
        {gc = order,
         non_gc = order,
         fp = fp_order}
      val allocation_equal =
        {gc = equal,
         non_gc = equal,
         fp = fp_equal}
    end

  end

  (*  == Spill handling == *)

  val do_unspilling = false

  (*  == Register printing ==  *)

  val print_register = I386Types.reg_to_string

  (* Immediate stores for CISCs *)

  val has_immediate_stores = true

  (*  === MACHINE LIMITS ===  *)

  val digits_in_real = I386Types.digits_in_real
  val bits_per_word = I386Types.bits_per_word
  val leaf_regs = 0

  (* === REGISTER ALLOCATION STRATEGY === *)

  val use_stack_colourer = false

  (*  === MACHINE FUNCTIONS === *)

  exception Ord = I386Types.Ord
  exception Chr = I386Types.Chr

  val ord = I386Types.ord
  val chr = I386Types.chr

end
@


1.23.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a4 4
 * Revision 1.23  1998/08/27  12:13:50  jont
 * [Bug #70040]
 * Modify register colourer to use stack colourer only if requested from machspec
 *
@


1.22
log
@[Bug #30076]
Adding argument passing pseudo registers for multiple argument passing work.
@
text
@d5 4
d305 4
@


1.22.2.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a4 4
 * Revision 1.22  1997/05/27  09:55:37  jont
 * [Bug #30076]
 * Adding argument passing pseudo registers for multiple argument passing work.
 *
@


1.22.1.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a4 4
 * Revision 1.22  1997/05/27  09:55:37  jont
 * [Bug #30076]
 * Adding argument passing pseudo registers for multiple argument passing work.
 *
@


1.21
log
@[Bug #20038]
Add referenced_by_alloc
@
text
@d5 4
d119 2
a120 2
    val caller_arg_regs =	[caller_arg]
    val callee_arg_regs =	[callee_arg]
d157 1
a157 1
      {gc = Set.list_to_set [caller_closure, implicit],
d188 3
a190 1
                             handler, callee_closure],
d197 1
a197 1
      {gc = [callee_closure, global],
@


1.20
log
@[Bug #30088]
Get rid of MLWorks.Option
@
text
@d5 4
d158 10
@


1.19
log
@[Bug #20018]
Make sure fp_global is reserved
@
text
@d5 4
d125 1
a125 1
    val zero = MLWorks.Option.NONE
@


1.18
log
@[Bug #20007]
[Bug #20007]
Adding reserved_but_preferencable registers
@
text
@d5 4
d168 1
a168 1
       fp = empty_register_set}
@


1.17
log
@Adding mach_type value
@
text
@d5 3
d99 21
d141 1
a141 1
      {gc = Set.list_to_set [EBP, ESI],
d146 3
a148 1
      {gc = empty_register_set,
a151 21
    (*  == Special registers ==  *)

    val caller_arg =		I386Types.caller_arg
    val callee_arg =		I386Types.callee_arg
    val caller_arg_regs =	[caller_arg]
    val callee_arg_regs =	[callee_arg]
    val caller_closure =	I386Types.caller_closure
    val callee_closure =	I386Types.callee_closure
    val fp_arg_regs =           []
    val tail_arg =		callee_arg
    val tail_closure = 		caller_closure
    val fp =			I386Types.stack (* Not using this *)
    val sp =			I386Types.sp
    val handler =		I386Types.heap (* This one in store *)
    val global =		I386Types.global
    val implicit =		I386Types.implicit
    val fp_global =		I386Types.stack (* Shouldn't be needed *)

    val zero = MLWorks.Option.NONE


d167 11
@


1.17.1.1
log
@branched from 1.17
@
text
@a4 3
 * Revision 1.17  1997/03/25  10:22:50  matthew
 * Adding mach_type value
 *
@


1.17.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a4 3
 * Revision 1.17.1.1  1997/05/12  10:33:18  hope
 * branched from 1.17
 *
@


1.17.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a4 3
 * Revision 1.17.1.1  1997/05/12  10:33:18  hope
 * branched from 1.17
 *
@


1.17.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a4 3
 * Revision 1.17.1.1  1997/05/12  10:33:18  hope
 * branched from 1.17
 *
@


1.17.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a4 3
 * Revision 1.17.1.1.1.1  1997/07/28  18:18:39  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.16
log
@[Bug #0]
Add in corrupted_by_alloc and leaf_regs
@
text
@d5 4
d78 6
@


1.15
log
@Adding fp_arg_regs
@
text
@d5 3
d111 4
d246 1
@


1.14
log
@Changes for new language definition
@
text
@d5 3
d117 1
@


1.14.7.1
log
@branched from 1.14
@
text
@a4 3
 * Revision 1.14  1996/03/20  14:38:18  matthew
 * Changes for new language definition
 *
@


1.14.6.1
log
@branched from 1.14
@
text
@a4 3
 * Revision 1.14  1996/03/20  14:38:18  matthew
 * Changes for new language definition
 *
@


1.14.6.1.1.1
log
@branched from 1.14.6.1
@
text
@a4 3
 * Revision 1.14.6.1  1996/12/17  17:46:55  hope
 * branched from 1.14
 *
@


1.14.5.1
log
@branched from 1.14
@
text
@a4 3
 * Revision 1.14  1996/03/20  14:38:18  matthew
 * Changes for new language definition
 *
@


1.14.4.1
log
@branched from 1.14
@
text
@a4 3
 * Revision 1.14  1996/03/20  14:38:18  matthew
 * Changes for new language definition
 *
@


1.14.4.1.1.1
log
@branched from 1.14.4.1
@
text
@a4 3
 * Revision 1.14.4.1  1996/11/14  12:48:16  hope
 * branched from 1.14
 *
@


1.14.3.1
log
@branched from 1.14
@
text
@a4 3
 * Revision 1.14  1996/03/20  14:38:18  matthew
 * Changes for new language definition
 *
@


1.14.2.1
log
@branched from 1.14
@
text
@a4 3
 * Revision 1.14  1996/03/20  14:38:18  matthew
 * Changes for new language definition
 *
@


1.14.1.1
log
@branched from 1.14
@
text
@a4 3
 * Revision 1.14  1996/03/20  14:38:18  matthew
 * Changes for new language definition
 *
@


1.13
log
@Add extra field to procedure_parameters to contain old (pre register allocation)
spill sizes. This is for the i386, where spill assignment is done in the backend
@
text
@d5 4
d91 1
a91 1
    val fps = case I386Types.fp_used of
d99 1
d102 2
a103 2
       non_gc = Set.empty_set,
       fp = Set.list_to_set[] }
d137 2
a138 2
       non_gc = Set.empty_set,
       fp = Set.list_to_set []}
d198 1
a198 1
      fun fp_equal(reg, reg') =
@


1.12
log
@Add bits_per_word
Remove smallest_int, largest_int, largest_word
@
text
@d5 4
a49 1
require "../utils/option";
a57 1
  structure Option	: OPTION
a62 1
  structure Option = Option
d118 1
a118 1
    val zero = Option.ABSENT
@


1.11
log
@Add largest_word
@
text
@d5 3
a226 3
  val largest_int = I386Types.largest_int
  val smallest_int = I386Types.smallest_int
  val largest_word = I386Types.largest_word
d228 1
@


1.10
log
@Adding debugging_reserved register list
@
text
@d5 3
d226 1
@


1.9
log
@Modify to new register assignment
@
text
@d5 3
d127 2
@


1.8
log
@Add has_immediate_store flag
@
text
@d5 3
d143 1
a143 1
        | rank EBX = 5
d149 1
a149 1
        | rank ESI = 0
d155 1
a155 1
      (* Also, we preference ESI before EBP as allocating EBP forces non-leaf *)
@


1.7
log
@Add callee_closure to reserved register list
@
text
@d5 3
d206 4
@


1.6
log
@Get tail_closure right (cf MIPS, not SPARC)
@
text
@d5 3
d115 1
a115 1
                             handler],
d136 7
a142 7
      fun rank EAX = 1
        | rank EBX = 4
        | rank ECX = 4
        | rank EDX = 2
        | rank EBP = 0
        | rank ESP = 4
        | rank EDI = 3
d144 1
a144 1
        | rank _ = 4
d149 1
@


1.5
log
@Add do_unspill value to control register allocator
@
text
@d5 3
d91 1
a91 1
    val tail_closure = 		callee_closure
@


1.4
log
@Prevent list of special assignments clashing with gcs
@
text
@d5 13
a17 10
# Revision 1.3  1994/09/16  10:30:02  jont
# Get register preference order unique for callee saves
#
# Revision 1.2  1994/09/15  17:55:03  jont
# Add chr and ord
# Also add Chr and Ord
#
# Revision 1.1  1994/09/15  12:32:21  jont
# new file
#
d189 1
d191 1
a192 1

d197 1
a197 3


    (*  === MACHINE LIMITS ===  *)
@


1.3
log
@Get register preference order unique for callee saves
@
text
@d5 3
d58 1
a58 1
    val gcs = [EAX, EDX, EBP, ESI, EDI, ESP]
@


1.2
log
@Add chr and ord
Also add Chr and Ord
@
text
@d5 4
d125 3
a127 3
        | rank EBX = 3
        | rank ECX = 3
        | rank EDX = 1
d129 2
a130 2
        | rank ESP = 3
        | rank EDI = 2
d132 5
a136 1
        | rank _ = 3
@


1.1
log
@new file
@
text
@d4 4
a7 1
 *  $Log$
d189 8
@
