head	1.6;
access;
symbols
	MLW_daveb_inline_1_4_99:1.6.12
	MLWorks_21c0_1999_03_25:1.6
	MLWorks_20c1_1998_08_20:1.6
	MLWorks_20c0_1998_08_04:1.6
	MLWorks_20b2c2_1998_06_19:1.6
	MLWorks_20b2_Windows_1998_06_12:1.6
	MLWorks_20b1c1_1998_05_07:1.6
	MLWorks_20b0_1998_04_07:1.6
	MLWorks_20b0_1998_03_20:1.6
	MLWorks_20m2_1998_02_16:1.6
	MLWorks_20m1_1997_10_23:1.6
	MLWorks_11r1:1.6.9.1.1.1.1
	MLWorks_workspace_97:1.6.11
	MLWorks_dt_wizard:1.6.10
	MLWorks_11c0_1997_09_09:1.6.9.1.1.1
	MLWorks_10r3:1.6.9.1.3
	MLWorks_10r2_551:1.6.9.1.2
	MLWorks_11:1.6.9.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.6.9.1
	MLWorks_20m0_1997_06_20:1.6
	MLWorks_1_0_r2c2_1997_06_14:1.6.9.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.6.9.1
	MLWorks_1_0_r2c1_1997_05_12:1.6.9
	MLWorks_BugFix_1997_04_24:1.6
	MLWorks_1_0_r2_Win32_1997_04_11:1.6
	MLWorks_1_0_r2_Unix_1997_04_04:1.6
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.6.7.1.1
	MLWorks_gui_1996_12_18:1.6.8
	MLWorks_1_0_Win32_1996_12_17:1.6.7
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.6.5.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.6.5.1
	MLWorks_1_0_Irix_1996_11_28:1.6.5.1.1
	MLWorks_1_0_Win32_1996_11_22:1.6.6
	MLWorks_1_0_Unix_1996_11_14:1.6.5
	MLWorks_Open_Beta2_1996_10_11:1.6.4
	MLWorks_License_dev:1.6.3
	MLWorks_1_open_beta_1996_09_13:1.6.2
	MLWorks_Open_Beta_1996_08_22:1.6
	MLWorks_Beta_1996_07_02:1.6
	MLWorks_Beta_1996_06_07:1.6
	MLWorks_Beta_1996_06_06:1.6
	MLWorks_Beta_1996_06_05:1.6
	MLWorks_Beta_1996_06_03:1.6
	MLWorks_Beta_1996_05_31:1.6
	MLWorks_Beta_1996_05_30:1.6
	ML_beta_release_12/08/94:1.6
	ML_beta_release_03/08/94:1.6
	ML_revised_beta_release_25/05/94:1.6
	ML_final_beta_release_02/03/94:1.6
	mlworks-28-01-1994:1.6
	Release:1.6
	mlworks-beta-01-09-1993:1.6
	MLWorks-1-0-4-29/01/1993:1.4
	MLWorks-1-0-3-21/12/1992:1.4
	MLWorks-1-0-2-15/12/1992:1.4
	MLWorks-1-0-1-04/12/1992:1.4
	checkpoint_17_08_92:1.3;
locks; strict;
comment	@ * @;


1.6
date	93.05.20.12.52.14;	author jont;	state Exp;
branches
	1.6.1.1
	1.6.2.1
	1.6.3.1
	1.6.4.1
	1.6.5.1
	1.6.6.1
	1.6.7.1
	1.6.8.1
	1.6.9.1
	1.6.10.1
	1.6.11.1
	1.6.12.1;
next	1.5;

1.5
date	93.02.25.13.59.03;	author jont;	state Exp;
branches;
next	1.4;

1.4
date	92.12.01.18.34.17;	author jont;	state Exp;
branches;
next	1.3;

1.3
date	92.08.13.16.16.16;	author davidt;	state Exp;
branches;
next	1.2;

1.2
date	92.08.04.19.07.48;	author davidt;	state Exp;
branches;
next	1.1;

1.1
date	92.04.22.11.01.57;	author jont;	state Exp;
branches;
next	;

1.6.1.1
date	93.05.20.12.52.14;	author jont;	state Exp;
branches;
next	;

1.6.2.1
date	96.09.13.11.43.40;	author hope;	state Exp;
branches;
next	;

1.6.3.1
date	96.10.07.16.36.53;	author hope;	state Exp;
branches;
next	;

1.6.4.1
date	96.10.17.11.55.52;	author hope;	state Exp;
branches;
next	;

1.6.5.1
date	96.11.14.13.24.13;	author hope;	state Exp;
branches
	1.6.5.1.1.1;
next	;

1.6.5.1.1.1
date	96.11.28.15.35.01;	author hope;	state Exp;
branches;
next	;

1.6.6.1
date	96.11.22.18.41.19;	author hope;	state Exp;
branches;
next	;

1.6.7.1
date	96.12.17.18.20.17;	author hope;	state Exp;
branches
	1.6.7.1.1.1;
next	;

1.6.7.1.1.1
date	97.02.24.12.14.46;	author hope;	state Exp;
branches;
next	;

1.6.8.1
date	96.12.18.10.15.48;	author hope;	state Exp;
branches;
next	;

1.6.9.1
date	97.05.12.10.53.28;	author hope;	state Exp;
branches
	1.6.9.1.1.1
	1.6.9.1.2.1
	1.6.9.1.3.1;
next	;

1.6.9.1.1.1
date	97.07.28.18.35.31;	author daveb;	state Exp;
branches
	1.6.9.1.1.1.1.1;
next	;

1.6.9.1.1.1.1.1
date	97.10.07.12.01.03;	author jkbrook;	state Exp;
branches;
next	;

1.6.9.1.2.1
date	97.09.08.17.28.06;	author daveb;	state Exp;
branches;
next	;

1.6.9.1.3.1
date	97.09.09.14.25.32;	author daveb;	state Exp;
branches;
next	;

1.6.10.1
date	97.09.10.19.44.10;	author brucem;	state Exp;
branches;
next	;

1.6.11.1
date	97.09.11.21.11.34;	author daveb;	state Exp;
branches;
next	;

1.6.12.1
date	99.04.01.18.09.33;	author daveb;	state Exp;
branches;
next	;


desc
@A new implementation of sets based on hashing. This is mildly imperative.
Beware.
@


1.6
log
@Added a rehash function to deal with sets where the hash value changes
due to update (eg Namesets)
@
text
@(* hashset.sml the signature *)
(*
$Log: hashset.sml,v $
Revision 1.5  1993/02/25  13:59:03  jont
Modified to accept a size parameter to empty_set

Revision 1.4  1992/12/01  18:34:17  jont
Improved to avoid parameter recopying in numerous places

Revision 1.3  1992/08/13  16:16:16  davidt
Added iterate function.

Revision 1.2  1992/08/04  19:07:48  davidt
Added fold function.

Revision 1.1  1992/04/22  11:01:57  jont
Initial revision

Copyright (c) 1992 Harlequin Ltd.
*)

(* A few basic well-known set functions, using a hashtable internally *)
(* Note that this is an imperative implementation *)

signature HASHSET =
  sig
    type HashSet
    type element

    val max_size : int
    val add_member   : (HashSet * element) -> HashSet
    val add_list     : (HashSet * element list) -> HashSet
    val remove_member : (HashSet * element) -> HashSet
    val empty_set     : int -> HashSet
    val empty_setp    : HashSet -> bool
    val is_member     :  (HashSet * element) -> bool
    val union         : HashSet * HashSet -> HashSet
    val intersection  : HashSet * HashSet -> HashSet
    val subset        : HashSet * HashSet -> bool
    val setdiff       : HashSet * HashSet -> HashSet
    val seteq         : HashSet * HashSet -> bool
    val set_to_list   : HashSet -> element list
    val fold          : ('a * element -> 'a) -> ('a * HashSet) -> 'a
    val iterate       : (element -> unit) -> HashSet -> unit
    val list_to_set   : element list -> HashSet
    val set_print     : HashSet * (element -> string) -> string
    val set_size      : HashSet -> int
    val rehash	      : HashSet -> unit
  (* For sets where the hash value goes out of date *)
  end
@


1.6.12.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a3 4
 * Revision 1.6  1993/05/20  12:52:14  jont
 * Added a rehash function to deal with sets where the hash value changes
 * due to update (eg Namesets)
 *
@


1.6.11.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a3 4
 * Revision 1.6  1993/05/20  12:52:14  jont
 * Added a rehash function to deal with sets where the hash value changes
 * due to update (eg Namesets)
 *
@


1.6.10.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a3 4
 * Revision 1.6  1993/05/20  12:52:14  jont
 * Added a rehash function to deal with sets where the hash value changes
 * due to update (eg Namesets)
 *
@


1.6.9.1
log
@branched from 1.6
@
text
@a3 4
 * Revision 1.6  1993/05/20  12:52:14  jont
 * Added a rehash function to deal with sets where the hash value changes
 * due to update (eg Namesets)
 *
@


1.6.9.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a3 3
 * Revision 1.6.9.1  1997/05/12  10:53:28  hope
 * branched from 1.6
 *
@


1.6.9.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a3 3
 * Revision 1.6.9.1  1997/05/12  10:53:28  hope
 * branched from 1.6
 *
@


1.6.9.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a3 3
 * Revision 1.6.9.1  1997/05/12  10:53:28  hope
 * branched from 1.6
 *
@


1.6.9.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a3 3
 * Revision 1.6.9.1.1.1  1997/07/28  18:35:31  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.6.8.1
log
@branched from 1.6
@
text
@a3 4
 * Revision 1.6  1993/05/20  12:52:14  jont
 * Added a rehash function to deal with sets where the hash value changes
 * due to update (eg Namesets)
 *
@


1.6.7.1
log
@branched from 1.6
@
text
@a3 4
 * Revision 1.6  1993/05/20  12:52:14  jont
 * Added a rehash function to deal with sets where the hash value changes
 * due to update (eg Namesets)
 *
@


1.6.7.1.1.1
log
@branched from 1.6.7.1
@
text
@a3 3
 * Revision 1.6.7.1  1996/12/17  18:20:17  hope
 * branched from 1.6
 *
@


1.6.6.1
log
@branched from 1.6
@
text
@a3 4
 * Revision 1.6  1993/05/20  12:52:14  jont
 * Added a rehash function to deal with sets where the hash value changes
 * due to update (eg Namesets)
 *
@


1.6.5.1
log
@branched from 1.6
@
text
@a3 4
 * Revision 1.6  1993/05/20  12:52:14  jont
 * Added a rehash function to deal with sets where the hash value changes
 * due to update (eg Namesets)
 *
@


1.6.5.1.1.1
log
@branched from 1.6.5.1
@
text
@a3 3
 * Revision 1.6.5.1  1996/11/14  13:24:13  hope
 * branched from 1.6
 *
@


1.6.4.1
log
@branched from 1.6
@
text
@a3 4
 * Revision 1.6  1993/05/20  12:52:14  jont
 * Added a rehash function to deal with sets where the hash value changes
 * due to update (eg Namesets)
 *
@


1.6.3.1
log
@branched from 1.6
@
text
@a3 4
 * Revision 1.6  1993/05/20  12:52:14  jont
 * Added a rehash function to deal with sets where the hash value changes
 * due to update (eg Namesets)
 *
@


1.6.2.1
log
@branched from 1.6
@
text
@a3 4
 * Revision 1.6  1993/05/20  12:52:14  jont
 * Added a rehash function to deal with sets where the hash value changes
 * due to update (eg Namesets)
 *
@


1.6.1.1
log
@Fork for bug fixing
@
text
@a3 4
Revision 1.6  1993/05/20  12:52:14  jont
Added a rehash function to deal with sets where the hash value changes
due to update (eg Namesets)

@


1.5
log
@Modified to accept a size parameter to empty_set
@
text
@d4 3
d48 2
@


1.4
log
@Improved to avoid parameter recopying in numerous places
@
text
@d4 3
d31 1
a31 1
    val empty_set     : unit -> HashSet
d44 1
@


1.3
log
@Added iterate function.
@
text
@d4 3
d25 3
a27 3
    val add_member   : (element * HashSet) -> HashSet
    val add_list   : (element list * HashSet) -> HashSet
    val remove_member : (element * HashSet) -> HashSet
d30 1
a30 1
    val is_member     :  (element * HashSet) -> bool
@


1.2
log
@Added fold function.
@
text
@d4 3
d24 14
a37 13
    val remove_member   : (element * HashSet) -> HashSet
    val empty_set    : unit -> HashSet
    val empty_setp   : HashSet -> bool
    val is_member    :  (element * HashSet) -> bool
    val union        : HashSet * HashSet -> HashSet
    val intersection : HashSet * HashSet -> HashSet
    val subset       : HashSet * HashSet -> bool
    val setdiff      : HashSet * HashSet -> HashSet
    val seteq        : HashSet * HashSet -> bool
    val set_to_list  : HashSet -> element list
    val fold         : ('a * element -> 'a) -> ('a * HashSet) -> 'a
    val list_to_set  : element list -> HashSet
    val set_print    : HashSet * (element -> string) -> string
@


1.1
log
@Initial revision
@
text
@d3 4
a6 1
$Log$
d31 1
@
