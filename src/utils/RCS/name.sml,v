head	1.3;
access;
symbols
	ML_final_beta_release_02/03/94:1.3
	mlworks-28-01-1994:1.3
	Release:1.3
	mlworks-beta-01-09-1993:1.3
	MLWorks-1-0-4-29/01/1993:1.3
	MLWorks-1-0-3-21/12/1992:1.3
	MLWorks-1-0-2-15/12/1992:1.3
	MLWorks-1-0-1-04/12/1992:1.3
	checkpoint_17_08_92:1.3;
locks; strict;
comment	@ *  @;


1.3
date	92.02.17.13.34.29;	author richard;	state Exp;
branches
	1.3.1.1;
next	1.2;

1.2
date	92.02.14.14.27.55;	author richard;	state Exp;
branches;
next	1.1;

1.1
date	92.02.12.11.48.51;	author richard;	state Exp;
branches;
next	;

1.3.1.1
date	92.02.17.13.34.29;	author jont;	state Exp;
branches;
next	;


desc
@Number Naming Module.
Signature.
@


1.3
log
@spong.
@
text
@(*  ==== ABSTRACT NAME TYPE ====
 *	     SIGNATURE
 *
 *  Copyright (C) 1992 Harlequin Ltd.
 * 
 *  Description
 *  -----------
 *  This module provides `abstract names', unique values which can be used
 *  as identifiers and contain some state to assist with their efficient
 *  use.  Name.T's have a global immutable ordering, but also a mutable
 *  internal `index' which can provides fast lookup onto an array type.  A
 *  name may also contain an arbitrary `value' which is fixed when it is
 *  created.
 *
 *  Revision Log
 *  ------------
 *  $Log: name.sml,v $
 *  Revision 1.2  1992/02/14  14:27:55  richard
 *  Rewritten.  Will fix this log later.
 *)


require "set";
require "array";
require "text";


signature NAME =

  sig

    structure Set	: SET
    structure Text	: TEXT
    structure Array	: ARRAY

    eqtype 'a T

    val new		: 'a -> 'a T
    val value		: 'a T -> 'a
    val order		: 'a T * 'a T -> bool
    val hash		: 'a T -> int
    val to_string	: 'a T -> string
    val to_text		: 'a T -> Text.T


    (*  == Name Indexes ==
     *
     *  `pack' takes a set of names and updates their internal indexes such
     *  that they are numbered contiguously from zero.  `pack_invert' does
     *  the same, but also returns an array which will map an index back
     *  onto its corresponding name.
     *) 

    val index		: 'a T -> int ref
    val pack		: ''a T Set.Set -> int
    val pack_invert	: ''_a T Set.Set -> int * ''_a T Array.array

  end
@


1.3.1.1
log
@Fork for bug fixing
@
text
@a17 3
 *  Revision 1.3  1992/02/17  13:34:29  richard
 *  spong.
 *
@


1.2
log
@Rewritten.  Will fix this log later.
@
text
@d11 3
a13 2
 *  internal value which provides fast lookup onto an array type.  A name
 *  may also contain an arbitrary `value' which is fixed when it is created.
d17 3
a19 1
 *  $Log$
d24 1
d34 1
d46 1
a46 1
    (*  == Name Arrays ==
d48 5
a52 6
     *  Each name contains a mutable `index' field which provides fast
     *  lookup onto an array.  For any set of names, `array' creates an
     *  array and updates the indexes of the names in the such that they can
     *  be used as subscripts on that array.  A name may only be used to
     *  index one such array at any one time.
     *)
d54 3
a56 6
    type '_a array
    exception Subscript
    val array		: ''a T Set.Set * '_b -> '_b array
    val array_of_list	: ('a T * '_b) list -> '_b array
    val sub		: '_b array * 'a T -> '_b
    val update		: '_b array * 'a T * '_b -> unit
@


1.1
log
@Initial revision
@
text
@d1 20
d23 1
d28 1
d31 25
a55 1
    val int : int -> Text.T
@
