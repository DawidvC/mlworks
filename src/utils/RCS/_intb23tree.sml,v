head	1.6;
access;
symbols
	MLW_daveb_inline_1_4_99:1.6.1
	MLWorks_21c0_1999_03_25:1.6
	MLWorks_20c1_1998_08_20:1.6
	MLWorks_20c0_1998_08_04:1.6
	MLWorks_20b2c2_1998_06_19:1.6
	MLWorks_20b2_Windows_1998_06_12:1.6
	MLWorks_20b1c1_1998_05_07:1.6
	MLWorks_20b0_1998_04_07:1.6
	MLWorks_20b0_1998_03_20:1.6
	MLWorks_20m2_1998_02_16:1.5
	MLWorks_20m1_1997_10_23:1.5
	MLWorks_11r1:1.5.5.1.1.1.1
	MLWorks_workspace_97:1.5.7
	MLWorks_dt_wizard:1.5.6
	MLWorks_11c0_1997_09_09:1.5.5.1.1.1
	MLWorks_10r3:1.5.5.1.3
	MLWorks_10r2_551:1.5.5.1.2
	MLWorks_11:1.5.5.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.5.5.1
	MLWorks_20m0_1997_06_20:1.5
	MLWorks_1_0_r2c2_1997_06_14:1.5.5.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.5.5.1
	MLWorks_1_0_r2c1_1997_05_12:1.5.5
	MLWorks_BugFix_1997_04_24:1.5
	MLWorks_1_0_r2_Win32_1997_04_11:1.5
	MLWorks_1_0_r2_Unix_1997_04_04:1.5
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.5.3.1.1
	MLWorks_gui_1996_12_18:1.5.4
	MLWorks_1_0_Win32_1996_12_17:1.5.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.5.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.5.1.1
	MLWorks_1_0_Irix_1996_11_28:1.5.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.5.2
	MLWorks_1_0_Unix_1996_11_14:1.5.1
	MLWorks_Open_Beta2_1996_10_11:1.4.3
	MLWorks_License_dev:1.4.2
	MLWorks_1_open_beta_1996_09_13:1.4.1
	MLWorks_Open_Beta_1996_08_22:1.4
	MLWorks_Beta_1996_07_02:1.4
	MLWorks_Beta_1996_06_07:1.4
	MLWorks_Beta_1996_06_06:1.4
	MLWorks_Beta_1996_06_05:1.4
	MLWorks_Beta_1996_06_03:1.4
	MLWorks_Beta_1996_05_31:1.4
	MLWorks_Beta_1996_05_30:1.4;
locks; strict;
comment	@ * @;


1.6
date	98.02.19.16.25.52;	author mitchell;	state Exp;
branches
	1.6.1.1;
next	1.5;

1.5
date	96.10.28.14.34.53;	author io;	state Exp;
branches
	1.5.1.1
	1.5.2.1
	1.5.3.1
	1.5.4.1
	1.5.5.1
	1.5.6.1
	1.5.7.1;
next	1.4;

1.4
date	96.04.30.14.45.44;	author jont;	state Exp;
branches
	1.4.1.1
	1.4.2.1
	1.4.3.1;
next	1.3;

1.3
date	96.03.20.12.16.14;	author matthew;	state Exp;
branches;
next	1.2;

1.2
date	94.10.13.10.11.07;	author matthew;	state Exp;
branches;
next	1.1;

1.1
date	94.10.11.13.44.23;	author matthew;	state Exp;
branches;
next	;

1.4.1.1
date	96.09.13.11.43.22;	author hope;	state Exp;
branches;
next	;

1.4.2.1
date	96.10.07.16.36.34;	author hope;	state Exp;
branches;
next	;

1.4.3.1
date	96.10.17.11.55.35;	author hope;	state Exp;
branches;
next	;

1.5.1.1
date	96.11.14.13.23.57;	author hope;	state Exp;
branches
	1.5.1.1.1.1;
next	;

1.5.1.1.1.1
date	96.11.28.15.34.34;	author hope;	state Exp;
branches;
next	;

1.5.2.1
date	96.11.22.18.41.02;	author hope;	state Exp;
branches;
next	;

1.5.3.1
date	96.12.17.18.19.59;	author hope;	state Exp;
branches
	1.5.3.1.1.1;
next	;

1.5.3.1.1.1
date	97.02.24.12.14.25;	author hope;	state Exp;
branches;
next	;

1.5.4.1
date	96.12.18.10.15.29;	author hope;	state Exp;
branches;
next	;

1.5.5.1
date	97.05.12.10.53.20;	author hope;	state Exp;
branches
	1.5.5.1.1.1
	1.5.5.1.2.1
	1.5.5.1.3.1;
next	;

1.5.5.1.1.1
date	97.07.28.18.36.33;	author daveb;	state Exp;
branches
	1.5.5.1.1.1.1.1;
next	;

1.5.5.1.1.1.1.1
date	97.10.07.12.01.43;	author jkbrook;	state Exp;
branches;
next	;

1.5.5.1.2.1
date	97.09.08.17.28.45;	author daveb;	state Exp;
branches;
next	;

1.5.5.1.3.1
date	97.09.09.14.26.35;	author daveb;	state Exp;
branches;
next	;

1.5.6.1
date	97.09.10.19.44.51;	author brucem;	state Exp;
branches;
next	;

1.5.7.1
date	97.09.11.21.12.05;	author daveb;	state Exp;
branches;
next	;

1.6.1.1
date	99.04.01.18.10.13;	author daveb;	state Exp;
branches;
next	;


desc
@new file
@


1.6
log
@[Bug #30349]
Fix to avoid non-unit sequence warnings
@
text
@(*  ==== GENERAL PURPOSE MAP ====
 *   ===    BALANCED TREE    ===
 *             FUNCTOR
 *       SPECIALISED FOR INTEGER
 *
 *  Copyright (C) 1994 Harlequin Ltd.
 *
 *  $Log: _intb23tree.sml,v $
 * Revision 1.5  1996/10/28  14:34:53  io
 * moving String from toplevel
 *
 * Revision 1.4  1996/04/30  14:45:44  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
 *
 *)

require "intnewmap";

functor IntB23Tree () : INTNEWMAP =
  struct
    type object = int
    
    type 'a result = 'a option

    datatype 'a Node =
      L1 of (object * 'a result) |
      L2 of (object * 'a result * object * 'a result) |
      N2 of 'a Node * object * 'a result * 'a Node | 
      N3 of 'a Node * object * 'a result * 'a Node * object * 'a result * 'a Node

    datatype 'a T = EMPTY | TREE of 'a Node * int

    val empty = EMPTY

    fun is_empty EMPTY = true
      | is_empty (TREE (_,0)) = true
      | is_empty _ = false

    datatype 'a Result =
      SINGLE of 'a Node |
      SPLIT of 'a Node * object * 'a result * 'a Node

(* This is the insert function before CPS conversion *)
(*
    fun insert (t,k,v,f) =
      let
        fun scan (L1 (k1,v1)) =
          if k < k1 
            then 
              SINGLE (L2 (k,v,k1,v1))
          else 
            if k = k1
              then SINGLE (L1 (k,f v1))
            else SINGLE (L2 (k1,v1,k,v))
          | scan (L2 (k1,v1,k2,v2)) =
            if k < k1 
              then SPLIT (L1 (k,v),k1,v1,L1 (k2,v2))
            else if k < k2
               then 
                 if k = k1 
                   then SINGLE (L2 (k,f v1,k2,v2))
                 else SPLIT (L1 (k1,v1),k,v,L1 (k2,v2))
            else if k = k2 then SINGLE (L2 (k1,v1,k,f v2))
            else SPLIT (L1 (k1,v1),k2,v2,L1 (k,v))
          | scan (N2 (t1,k1,v1,t2)) =
            if k < k1
              then
                (case scan t1 of
                   SINGLE (t1') => SINGLE (N2 (t1',k1,v1,t2))
                 | SPLIT (t1',k1',v1',t2') => SINGLE (N3 (t1',k1',v1',t2',k1,v1,t2)))
            else if k = k1
                   then SINGLE (N2 (t1,k,f v1,t2))
                 else
                   (case scan t2 of
                      SINGLE (t2') => SINGLE (N2 (t1,k1,v1,t2'))
                    | SPLIT (t2',k2',v2',t3') => SINGLE (N3 (t1,k1,v1,t2',k2',v2',t3')))
          | scan (N3 (t1,k1,v1,t2,k2,v2,t3)) = 
            if k < k1
              then
                (case scan t1 of
                   SINGLE (t1') => SINGLE (N3 (t1',k1,v1,t2,k2,v2,t3))
                 | SPLIT (t1',k1',v1',t2') =>
                     SPLIT (N2 (t1',k1',v1',t2'),k1,v1,N2 (t2,k2,v2,t3)))
            else if k < k2
                   then if k = k1
                          then SINGLE (N3 (t1,k,f v1,t2,k2,v2,t3))
                        else
                          (case scan t2 of
                             SINGLE (t2') => SINGLE (N3 (t1,k1,v1,t2',k2,v2,t3))
                           | SPLIT (t2',k2',v2',t3') =>
                               SPLIT (N2 (t1,k1,v1,t2'),k2',v2',N2 (t3',k2,v2,t3)))
            else if k = k2
                   then SINGLE (N3 (t1,k1,v1,t2,k,f v2,t3))
            else
              (case scan t3 of
                 SINGLE (t3') => SINGLE (N3 (t1,k1,v1,t2,k2,v2,t3'))
               | SPLIT (t3',k3',v3',t4') =>
                   SPLIT (N2 (t1,k1,v1,t2),k2,v2,N2 (t3',k3',v3',t4')))
      in
        case scan t of
          SINGLE t' => t'
        | SPLIT data => N2 data
      end
*)

    (* The continuation type.  Note reuse of node data. *)

    datatype 'a Cont = 
      C1 of 'a Node * object * 'a result * 'a Node | 
      C2 of 'a Node * object * 'a result * 'a Node |
      C3 of 'a Node * object * 'a result * 'a Node * object * 'a result * 'a Node |
      C4 of 'a Node * object * 'a result * 'a Node * object * 'a result * 'a Node |
      C5 of 'a Node * object * 'a result * 'a Node * object * 'a result * 'a Node

    (* Whether the recursive call splits or not is indicated by the continuation function it calls *)

    fun unwind1 (t1',C1(t1,k1,v1,t2)::c) = unwind1(N2 (t1',k1,v1,t2),c)
      | unwind1 (t2',C2(t1,k1,v1,t2)::c) = unwind1 (N2 (t1,k1,v1,t2'),c)
      | unwind1 (t1',C3(t1,k1,v1,t2,k2,v2,t3)::c) = unwind1 (N3 (t1',k1,v1,t2,k2,v2,t3),c)
      | unwind1 (t2',C4(t1,k1,v1,t2,k2,v2,t3)::c) = unwind1 (N3 (t1,k1,v1,t2',k2,v2,t3),c)
      | unwind1 (t3',C5(t1,k1,v1,t2,k2,v2,t3)::c) = unwind1 (N3 (t1,k1,v1,t2,k2,v2,t3'),c)
      | unwind1 (t,[]) = t

    fun unwind2 (t1',k1',v1',t2',C1(t1,k1,v1,t2)::c) = unwind1 (N3 (t1',k1',v1',t2',k1,v1,t2),c)
      | unwind2 (t2',k2',v2',t3',C2(t1,k1,v1,t2)::c) = unwind1 (N3 (t1,k1,v1,t2',k2',v2',t3'),c)
      | unwind2 (t1',k1',v1',t2',C3(t1,k1,v1,t2,k2,v2,t3)::c) =
        unwind2 (N2 (t1',k1',v1',t2'),k1,v1,N2 (t2,k2,v2,t3),c)
      | unwind2 (t2',k2',v2',t3',C4(t1,k1,v1,t2,k2,v2,t3)::c) =
        unwind2 (N2 (t1,k1,v1,t2'),k2',v2',N2 (t3',k2,v2,t3),c)
      | unwind2 (t3',k3',v3',t4',C5(t1,k1,v1,t2,k2,v2,t3)::c) =
        unwind2 (N2 (t1,k1,v1,t2),k2,v2,N2 (t3',k3',v3',t4'),c)
      | unwind2 (t1,k1,v1,t2,[]) = N2 (t1,k1,v1,t2)
 
    fun insert (t,k,v,combine) =
      let
        fun scan (L1 (k1,v1),c) =
          if k < k1 
            then 
              unwind1(L2 (k,v,k1,v1),c)
          else 
            if k = k1
              then unwind1 (L1 (k,combine v1),c)
            else unwind1 (L2 (k1,v1,k,v),c)
          | scan (L2 (k1,v1,k2,v2),c) =
            if k < k1 
              then unwind2 (L1 (k,v),k1,v1,L1 (k2,v2),c)
            else if k < k2
                   then 
                     if k = k1 
                       then unwind1 (L2 (k,combine v1,k2,v2),c)
                     else unwind2 (L1 (k1,v1),k,v,L1 (k2,v2),c)
                     else if k = k2 then unwind1 (L2 (k1,v1,k,combine v2),c)
                          else unwind2 (L1 (k1,v1),k2,v2,L1 (k,v),c)
          | scan (N2 (data as (t1,k1,v1,t2)),c) =
            if k < k1
              then scan (t1,C1 data :: c)
            else if k = k1
                   then unwind1 (N2 (t1,k,combine v1,t2),c)
                 else scan (t2,C2 data :: c)
          | scan (N3 (data as (t1,k1,v1,t2,k2,v2,t3)),c) = 
            if k < k1
              then scan (t1,C3 data :: c)
            else if k < k2
                   then if k = k1
                          then unwind1 (N3 (t1,k,combine v1,t2,k2,v2,t3),c)
                        else scan (t2,C4 data::c)
                        else if k = k2
                               then unwind1 (N3 (t1,k1,v1,t2,k,combine v2,t3),c)
                             else scan (t3,C5 data::c)
      in
        scan (t,[])
      end

    fun define (EMPTY,k,v) = TREE (L1 (k,SOME v),1)
      | define (TREE (t,size),k,v) = 
        let
          val sz = ref (size+1)
          val newv = SOME v
          fun combine (SOME _) = (sz := size; newv)
            | combine _ = newv
        in
          TREE (insert (t,k,newv,combine),!sz)
        end
      
    fun define' (t,(k,v)) = define (t,k,v)

    fun combine f (EMPTY,k,v) = TREE (L1 (k,SOME v),1)
      | combine f (TREE (t,size),k,v) = 
        let
          val newv = SOME v
          val sz = ref (size+1)
          fun combine (SOME v') = (sz := size; SOME (f (k,v,v')))
            | combine _ = SOME v
        in
          TREE (insert (t,k,newv,combine),!sz)
        end
      
    fun undefine (EMPTY,k) = EMPTY
      | undefine (TREE (t,size),k) = 
        let
          val sz = ref size
          (* If its there and defined, then decrement the size *)
          fun combine (SOME _) = (sz := size-1; NONE)
            | combine NONE = NONE
          fun remove (t,k) =
            let
              (* Slight modification of scan function above *)
              fun scan (L1 (k1,v1),c) =
                if k = k1
                  then unwind1 (L1 (k,combine v1),c)
                else unwind1 (L1 (k1,v1),c)
                | scan (L2 (k1,v1,k2,v2),c) =
                  if k = k1 
                    then unwind1 (L2 (k,combine v1,k2,v2),c)
                  else if k = k2 
                    then unwind1 (L2 (k1,v1,k,combine v2),c)
                  else unwind1 (L2 (k1,v1,k2,v2),c)
                | scan (N2 (data as (t1,k1,v1,t2)),c) =
                  if k < k1
                    then scan (t1,C1 data :: c)
                  else if k = k1
                         then unwind1 (N2 (t1,k,combine v1,t2),c)
                       else scan (t2,C2 data :: c)
                | scan (N3 (data as (t1,k1,v1,t2,k2,v2,t3)),c) = 
                  if k < k1
                    then scan (t1,C3 data :: c)
                  else if k < k2
                    then if k = k1
                                then unwind1 (N3 (t1,k,combine v1,t2,k2,v2,t3),c)
                              else scan (t2,C4 data::c)
                  else if k = k2
                    then unwind1 (N3 (t1,k1,v1,t2,k,combine v2,t3),c)
                  else scan (t3,C5 data::c)
            in
              scan (t,[])
            end
        in
          TREE (remove (t,k),!sz)
        end
      
    fun tryApply' (EMPTY,k) = NONE
      | tryApply' (TREE (t,_),k) =
        let 
          fun find (L1 (k1,v1)) =
            if k = k1 then v1 else NONE
            | find (L2 (k1,v1,k2,v2)) =
              if k = k1 then v1 else if k = k2 then v2 else NONE
            | find (N2 (t1,k1,v1,t2)) =
              if k < k1 then find t1 else if k = k1 then v1 else find t2
            | find (N3 (t1,k1,v1,t2,k2,v2,t3)) =
              if k < k1 then find t1
              else if k < k2 then if k = k1 then v1 else find t2
              else if k = k2 then v2 else find t3
        in
          find t
        end
      
    fun tryApply t k = tryApply'(t,k)

    exception Undefined

    fun apply' (t,k) =
      case tryApply' (t,k) of
        NONE => raise Undefined
      | SOME x => x

    fun apply t k = apply' (t,k)

    fun apply_default' (t,v,k) =
      case tryApply' (t,k) of
        NONE => v
      | SOME x => x

    fun apply_default (t,v) k = apply_default'(t,v,k)

    fun fold f (acc,EMPTY) = acc
      | fold f (acc,TREE (t,_)) =
        let
          fun one (k,SOME x,acc) =
            f (acc,k,x)
            | one (_,_,acc) = acc
          fun aux (L1 (k1,v1),acc) = one (k1,v1,acc)
            | aux (L2 (k1,v1,k2,v2),acc) = one (k2,v2,one (k1,v1,acc))
            | aux (N2 (t1,k1,v1,t2),acc) =
              aux (t2,one(k1,v1,aux (t1,acc)))
            | aux (N3 (t1,k1,v1,t2,k2,v2,t3),acc) =
              aux (t3,one(k2,v2,aux (t2,one (k1,v1,aux (t1,acc)))))
        in
          aux (t,acc)
        end
    
    val fold_in_order = fold
      
    fun fold_in_rev_order f (acc,EMPTY) = acc
      | fold_in_rev_order f (acc,TREE (t,_)) =
        let
          fun one (k,SOME x,acc) =
            f (acc,k,x)
            | one (_,_,acc) = acc
          fun aux (L1 (k1,v1),acc) = one (k1,v1,acc)
            | aux (L2 (k1,v1,k2,v2),acc) = one (k1,v1,one (k2,v2,acc))
            | aux (N2 (t1,k1,v1,t2),acc) =
              aux (t1,one(k1,v1,aux (t2,acc)))
            | aux (N3 (t1,k1,v1,t2,k2,v2,t3),acc) =
              aux (t1,one(k1,v1,aux (t2,one (k2,v2,aux (t3,acc)))))
        in
          aux (t,acc)
        end

    fun union args = fold define args

    fun merge f = fold (combine (fn (ob, im, im') => f(im, im')))

    exception Found of int

    (* copied from intbtree *)
    fun rank' (m, ob) =
      let
	fun f (res, object:int, _) =
	  if op<(object, ob) then
	      res + 1
	  else
	    if op=(object, ob) then
		raise Found(res)
	    else
	      raise Undefined
      in
	(ignore(fold_in_order f (0, m)); raise Undefined)
	handle Found(res) => res
      end

    fun rank m ob = rank' (m, ob)

    fun to_list EMPTY = []
      | to_list (TREE (t,_)) =
        let
          fun add (k,SOME x,acc) =
            (k,x)::acc
            | add (_,_,acc) = acc
          fun aux (L1 (k1,v1),acc) = add (k1,v1,acc)
            | aux (L2 (k1,v1,k2,v2),acc) = add (k1,v1,add(k2,v2,acc))
            | aux (N2 (t1,k1,v1,t2),acc) =
              aux (t1,add(k1,v1,aux (t2,acc)))
            | aux (N3 (t1,k1,v1,t2,k2,v2,t3),acc) =
              aux (t1,add(k1,v1,aux (t2,add (k2,v2,aux (t3,acc)))))
        in
          aux (t,[])
        end
    
    val to_list_ordered = to_list

    fun from_list l =
      let
        fun aux ((k,v)::l,acc) =
          aux (l,define (acc,k,v))
          | aux ([],acc) = acc
      in
        aux (l,EMPTY)
      end

    fun range EMPTY = []
      | range (TREE (t,_)) =
        let
          fun add (k,SOME x,acc) = x::acc
            | add (_,_,acc) = acc
          fun aux (L1 (k1,v1),acc) = add (k1,v1,acc)
            | aux (L2 (k1,v1,k2,v2),acc) = add (k1,v1,add(k2,v2,acc))
            | aux (N2 (t1,k1,v1,t2),acc) =
              aux (t1,add(k1,v1,aux (t2,acc)))
            | aux (N3 (t1,k1,v1,t2,k2,v2,t3),acc) =
              aux (t1,add(k1,v1,aux (t2,add (k2,v2,aux (t3,acc)))))
        in
          aux (t,[])
        end
    
    val range_ordered = range

    fun domain EMPTY = []
      | domain (TREE (t,_)) =
        let
          fun add (k,SOME x,acc) = k::acc
            | add (_,_,acc) = acc
          fun aux (L1 (k1,v1),acc) = add (k1,v1,acc)
            | aux (L2 (k1,v1,k2,v2),acc) = add (k1,v1,add(k2,v2,acc))
            | aux (N2 (t1,k1,v1,t2),acc) =
              aux (t1,add(k1,v1,aux (t2,acc)))
            | aux (N3 (t1,k1,v1,t2,k2,v2,t3),acc) =
              aux (t1,add(k1,v1,aux (t2,add (k2,v2,aux (t3,acc)))))
        in
          aux (t,[])
        end
    
    val domain_ordered = domain

    fun size EMPTY = 0
      | size (TREE (_,n)) = n
        
    fun iterate f EMPTY = ()
      | iterate f (TREE (t,_)) =
        let
          fun one (k,SOME x) = f (k,x)
            | one (_,_) = ()
          fun aux (L1 (k1,v1)) = one(k1,v1)
            | aux (L2 (k1,v1,k2,v2)) = (one (k1,v1);one(k2,v2))
            | aux (N2 (t1,k1,v1,t2)) =
              (aux t1;one (k1,v1);aux t2)
            | aux (N3 (t1,k1,v1,t2,k2,v2,t3)) =
              (aux t1;one(k1,v1);aux t2;one (k2,v2);aux t3)
        in
          aux t
        end

    val iterate_ordered = iterate

    fun map f EMPTY = EMPTY
      | map f (TREE (t,size)) =
        let
          fun one (k,SOME x) = SOME (f (k,x))
            | one (_,_) = NONE
          fun aux (L1 (k1,v1)) = L1(k1,one(k1,v1))
            | aux (L2 (k1,v1,k2,v2)) = L2(k1,one (k1,v1),k2,one(k2,v2))
            | aux (N2 (t1,k1,v1,t2)) =
              N2 (aux t1,k1,one (k1,v1),aux t2)
            | aux (N3 (t1,k1,v1,t2,k2,v2,t3)) =
              N3(aux t1,k1,one(k1,v1),aux t2,k2,one (k2,v2),aux t3)
        in
          TREE (aux t,size)
        end

    fun forall p EMPTY = true
      | forall p (TREE (t,_)) =
        let
          fun one (k,SOME x) = p (k,x)
            | one (_,_) = true
          fun aux (L1 (k1,v1)) = one(k1,v1)
            | aux (L2 (k1,v1,k2,v2)) = one (k1,v1) andalso one(k2,v2)
            | aux (N2 (t1,k1,v1,t2)) =
              aux t1 andalso one (k1,v1) andalso aux t2
            | aux (N3 (t1,k1,v1,t2,k2,v2,t3)) =
              aux t1 andalso one(k1,v1) andalso aux t2 andalso one (k2,v2) andalso aux t3
        in
          aux t
        end

    fun exists p EMPTY = false
      | exists p (TREE (t,_)) =
        let
          fun one (k,SOME x) = p (k,x)
            | one (_,_) = false
          fun aux (L1 (k1,v1)) = one(k1,v1)
            | aux (L2 (k1,v1,k2,v2)) = one (k1,v1) orelse one(k2,v2)
            | aux (N2 (t1,k1,v1,t2)) =
              aux t1 orelse one (k1,v1) orelse aux t2
            | aux (N3 (t1,k1,v1,t2,k2,v2,t3)) =
              aux t1 orelse one(k1,v1) orelse aux t2 orelse one (k2,v2) orelse aux t3
        in
          aux t
        end

    fun eq f (m1, m2) =
      size m1 = size m2 andalso
      ((forall (fn (ob, im) => f (apply'(m1, ob), im)) m2)
       handle Undefined => false)

      
    (* === PRINT A MAP === *)

    fun string obP imP {start, domSep, itemSep, finish} m =
      let
	fun make ((doSep, res), ob, im) =
	  (true, obP ob :: domSep :: imP im :: (if doSep then itemSep :: res else res))
      in
	concat(start :: #2 (fold_in_rev_order make ((false, [finish]), m)))
      end
  
  end;
@


1.6.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a8 4
 * Revision 1.6  1998/02/19  16:25:52  mitchell
 * [Bug #30349]
 * Fix to avoid non-unit sequence warnings
 *
@


1.5
log
@moving String from toplevel
@
text
@d9 3
d332 1
a332 1
	(fold_in_order f (0, m); raise Undefined)
@


1.5.7.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a8 3
 * Revision 1.5  1996/10/28  14:34:53  io
 * moving String from toplevel
 *
@


1.5.6.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a8 3
 * Revision 1.5  1996/10/28  14:34:53  io
 * moving String from toplevel
 *
@


1.5.5.1
log
@branched from 1.5
@
text
@a8 3
 * Revision 1.5  1996/10/28  14:34:53  io
 * moving String from toplevel
 *
@


1.5.5.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a8 3
 * Revision 1.5.5.1  1997/05/12  10:53:20  hope
 * branched from 1.5
 *
@


1.5.5.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a8 3
 * Revision 1.5.5.1  1997/05/12  10:53:20  hope
 * branched from 1.5
 *
@


1.5.5.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a8 3
 * Revision 1.5.5.1  1997/05/12  10:53:20  hope
 * branched from 1.5
 *
@


1.5.5.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a8 3
 * Revision 1.5.5.1.1.1  1997/07/28  18:36:33  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.5.4.1
log
@branched from 1.5
@
text
@a8 3
 * Revision 1.5  1996/10/28  14:34:53  io
 * moving String from toplevel
 *
@


1.5.3.1
log
@branched from 1.5
@
text
@a8 3
 * Revision 1.5  1996/10/28  14:34:53  io
 * moving String from toplevel
 *
@


1.5.3.1.1.1
log
@branched from 1.5.3.1
@
text
@a8 3
 * Revision 1.5.3.1  1996/12/17  18:19:59  hope
 * branched from 1.5
 *
@


1.5.2.1
log
@branched from 1.5
@
text
@a8 3
 * Revision 1.5  1996/10/28  14:34:53  io
 * moving String from toplevel
 *
@


1.5.1.1
log
@branched from 1.5
@
text
@a8 3
 * Revision 1.5  1996/10/28  14:34:53  io
 * moving String from toplevel
 *
@


1.5.1.1.1.1
log
@branched from 1.5.1.1
@
text
@a8 3
 * Revision 1.5.1.1  1996/11/14  13:23:57  hope
 * branched from 1.5
 *
@


1.4
log
@String functions explode, implode, chr and ord now only available from String
io functions and types
instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
now only available from MLWorks.IO
@
text
@d8 7
a14 1
 *  $Log$
d24 1
a24 2
    structure Option = MLWorks.Option
    type 'a result = 'a Option.option
d175 1
a175 1
    fun define (EMPTY,k,v) = TREE (L1 (k,Option.SOME v),1)
d179 2
a180 2
          val newv = Option.SOME v
          fun combine (Option.SOME _) = (sz := size; newv)
d188 1
a188 1
    fun combine f (EMPTY,k,v) = TREE (L1 (k,Option.SOME v),1)
d191 1
a191 1
          val newv = Option.SOME v
d193 2
a194 2
          fun combine (Option.SOME v') = (sz := size; Option.SOME (f (k,v,v')))
            | combine _ = Option.SOME v
d204 2
a205 2
          fun combine (Option.SOME _) = (sz := size-1; Option.NONE)
            | combine Option.NONE = Option.NONE
d242 1
a242 1
    fun tryApply' (EMPTY,k) = Option.NONE
d246 1
a246 1
            if k = k1 then v1 else Option.NONE
d248 1
a248 1
              if k = k1 then v1 else if k = k2 then v2 else Option.NONE
d265 2
a266 2
        Option.NONE => raise Undefined
      | Option.SOME x => x
d272 2
a273 2
        Option.NONE => v
      | Option.SOME x => x
d280 1
a280 1
          fun one (k,Option.SOME x,acc) =
d298 1
a298 1
          fun one (k,Option.SOME x,acc) =
d338 1
a338 1
          fun add (k,Option.SOME x,acc) =
d365 1
a365 1
          fun add (k,Option.SOME x,acc) = x::acc
d382 1
a382 1
          fun add (k,Option.SOME x,acc) = k::acc
d402 1
a402 1
          fun one (k,Option.SOME x) = f (k,x)
d419 2
a420 2
          fun one (k,Option.SOME x) = Option.SOME (f (k,x))
            | one (_,_) = Option.NONE
d434 1
a434 1
          fun one (k,Option.SOME x) = p (k,x)
d449 1
a449 1
          fun one (k,Option.SOME x) = p (k,x)
d474 1
a474 1
	String.implode(start :: #2 (fold_in_rev_order make ((false, [finish]), m)))
@


1.4.3.1
log
@branched from 1.4
@
text
@d8 1
a8 7
 *  $Log: _intb23tree.sml,v $
 * Revision 1.4  1996/04/30  14:45:44  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
@


1.4.2.1
log
@branched from 1.4
@
text
@d8 1
a8 7
 *  $Log: _intb23tree.sml,v $
 * Revision 1.4  1996/04/30  14:45:44  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
@


1.4.1.1
log
@branched from 1.4
@
text
@d8 1
a8 7
 *  $Log: _intb23tree.sml,v $
 * Revision 1.4  1996/04/30  14:45:44  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
@


1.3
log
@Value polymorphism
@
text
@d1 11
d469 1
a469 1
	implode(start :: #2 (fold_in_rev_order make ((false, [finish]), m)))
@


1.2
log
@Use pervasive Option.option for return values
@
text
@d295 1
a295 1
    val union = fold define
@


1.1
log
@new file
@
text
@d6 3
a8 1
    datatype 'a result = YES of 'a | NO
d159 1
a159 1
    fun define (EMPTY,k,v) = TREE (L1 (k,YES v),1)
d163 2
a164 2
          val newv = YES v
          fun combine (YES _) = (sz := size; newv)
d172 1
a172 1
    fun combine f (EMPTY,k,v) = TREE (L1 (k,YES v),1)
d175 1
a175 1
          val newv = YES v
d177 2
a178 2
          fun combine (YES v') = (sz := size; YES (f (k,v,v')))
            | combine _ = YES v
d188 2
a189 2
          fun combine (YES _) = (sz := size-1; NO)
            | combine NO = NO
d226 1
a226 1
    fun tryApply' (EMPTY,k) = NO
d230 1
a230 1
            if k = k1 then v1 else NO
d232 1
a232 1
              if k = k1 then v1 else if k = k2 then v2 else NO
d249 2
a250 2
        NO => raise Undefined
      | YES x => x
d256 2
a257 2
        NO => v
      | YES x => x
d264 1
a264 1
          fun one (k,YES x,acc) =
d282 1
a282 1
          fun one (k,YES x,acc) =
d322 1
a322 1
          fun add (k,YES x,acc) =
d349 1
a349 1
          fun add (k,YES x,acc) = x::acc
d366 1
a366 1
          fun add (k,YES x,acc) = k::acc
d386 1
a386 1
          fun one (k,YES x) = f (k,x)
d403 2
a404 2
          fun one (k,YES x) = YES (f (k,x))
            | one (_,_) = NO
d418 1
a418 1
          fun one (k,YES x) = p (k,x)
d433 1
a433 1
          fun one (k,YES x) = p (k,x)
@
