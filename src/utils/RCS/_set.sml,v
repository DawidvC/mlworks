head	1.10;
access;
symbols
	MLW_daveb_inline_1_4_99:1.10.4
	MLWorks_21c0_1999_03_25:1.10
	MLWorks_20c1_1998_08_20:1.10
	MLWorks_20c0_1998_08_04:1.10
	MLWorks_20b2c2_1998_06_19:1.10
	MLWorks_20b2_Windows_1998_06_12:1.10
	MLWorks_20b1c1_1998_05_07:1.10
	MLWorks_20b0_1998_04_07:1.10
	MLWorks_20b0_1998_03_20:1.10
	MLWorks_20m2_1998_02_16:1.10
	MLWorks_20m1_1997_10_23:1.10
	MLWorks_11r1:1.10.1.1.1.1.1
	MLWorks_workspace_97:1.10.3
	MLWorks_dt_wizard:1.10.2
	MLWorks_11c0_1997_09_09:1.10.1.1.1.1
	MLWorks_10r3:1.10.1.1.3
	MLWorks_10r2_551:1.10.1.1.2
	MLWorks_11:1.10.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.10.1.1
	MLWorks_20m0_1997_06_20:1.10
	MLWorks_1_0_r2c2_1997_06_14:1.10.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.10.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.10.1
	MLWorks_BugFix_1997_04_24:1.10
	MLWorks_1_0_r2_Win32_1997_04_11:1.10
	MLWorks_1_0_r2_Unix_1997_04_04:1.10
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.9.3.1.1
	MLWorks_gui_1996_12_18:1.9.4
	MLWorks_1_0_Win32_1996_12_17:1.9.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.9.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.9.1.1
	MLWorks_1_0_Irix_1996_11_28:1.9.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.9.2
	MLWorks_1_0_Unix_1996_11_14:1.9.1
	MLWorks_Open_Beta2_1996_10_11:1.8.3
	MLWorks_License_dev:1.8.2
	MLWorks_1_open_beta_1996_09_13:1.8.1
	MLWorks_Open_Beta_1996_08_22:1.8
	MLWorks_Beta_1996_07_02:1.8
	MLWorks_Beta_1996_06_07:1.8
	MLWorks_Beta_1996_06_06:1.8
	MLWorks_Beta_1996_06_05:1.8
	MLWorks_Beta_1996_06_03:1.8
	MLWorks_Beta_1996_05_31:1.8
	MLWorks_Beta_1996_05_30:1.8
	ML_beta_release_12/08/94:1.7
	ML_beta_release_03/08/94:1.7
	ML_revised_beta_release_25/05/94:1.7
	ML_final_beta_release_02/03/94:1.7
	mlworks-28-01-1994:1.7
	Release:1.7
	mlworks-beta-01-09-1993:1.7
	MLWorks-1-0-4-29/01/1993:1.7
	MLWorks-1-0-3-21/12/1992:1.7
	MLWorks-1-0-2-15/12/1992:1.7
	MLWorks-1-0-1-04/12/1992:1.7
	checkpoint_17_08_92:1.7
	Ten15_release_19-11-91:1.2
	Ten15_release_21-08-91:1.2
	Ten15_release_19-08-91:1.2
	ten15_release:1.2;
locks; strict;
comment	@ * @;


1.10
date	97.01.30.17.07.07;	author matthew;	state Exp;
branches
	1.10.1.1
	1.10.2.1
	1.10.3.1
	1.10.4.1;
next	1.9;

1.9
date	96.10.09.12.06.32;	author io;	state Exp;
branches
	1.9.1.1
	1.9.2.1
	1.9.3.1
	1.9.4.1;
next	1.8;

1.8
date	96.04.30.15.05.09;	author jont;	state Exp;
branches
	1.8.1.1
	1.8.2.1
	1.8.3.1;
next	1.7;

1.7
date	92.08.04.18.41.26;	author davidt;	state Exp;
branches
	1.7.1.1;
next	1.6;

1.6
date	92.04.22.12.24.02;	author jont;	state Exp;
branches;
next	1.5;

1.5
date	92.02.17.22.09.51;	author jont;	state Exp;
branches;
next	1.4;

1.4
date	91.11.21.17.02.20;	author jont;	state Exp;
branches;
next	1.3;

1.3
date	91.10.10.09.47.55;	author richard;	state Exp;
branches;
next	1.2;

1.2
date	91.07.17.11.32.12;	author davida;	state Exp;
branches;
next	1.1;

1.1
date	91.06.07.15.57.31;	author colin;	state Exp;
branches;
next	;

1.7.1.1
date	92.08.04.18.41.26;	author jont;	state Exp;
branches;
next	;

1.8.1.1
date	96.09.13.11.43.30;	author hope;	state Exp;
branches;
next	;

1.8.2.1
date	96.10.07.16.36.43;	author hope;	state Exp;
branches;
next	;

1.8.3.1
date	96.10.17.11.55.43;	author hope;	state Exp;
branches;
next	;

1.9.1.1
date	96.11.14.13.24.04;	author hope;	state Exp;
branches
	1.9.1.1.1.1;
next	;

1.9.1.1.1.1
date	96.11.28.15.34.44;	author hope;	state Exp;
branches;
next	;

1.9.2.1
date	96.11.22.18.41.10;	author hope;	state Exp;
branches;
next	;

1.9.3.1
date	96.12.17.18.20.07;	author hope;	state Exp;
branches
	1.9.3.1.1.1;
next	;

1.9.3.1.1.1
date	97.02.24.12.14.34;	author hope;	state Exp;
branches;
next	;

1.9.4.1
date	96.12.18.10.15.38;	author hope;	state Exp;
branches;
next	;

1.10.1.1
date	97.05.12.10.53.23;	author hope;	state Exp;
branches
	1.10.1.1.1.1
	1.10.1.1.2.1
	1.10.1.1.3.1;
next	;

1.10.1.1.1.1
date	97.07.28.18.36.05;	author daveb;	state Exp;
branches
	1.10.1.1.1.1.1.1;
next	;

1.10.1.1.1.1.1.1
date	97.10.07.12.01.26;	author jkbrook;	state Exp;
branches;
next	;

1.10.1.1.2.1
date	97.09.08.17.28.28;	author daveb;	state Exp;
branches;
next	;

1.10.1.1.3.1
date	97.09.09.14.26.06;	author daveb;	state Exp;
branches;
next	;

1.10.2.1
date	97.09.10.19.44.00;	author brucem;	state Exp;
branches;
next	;

1.10.3.1
date	97.09.11.21.11.25;	author daveb;	state Exp;
branches;
next	;

1.10.4.1
date	99.04.01.18.09.57;	author daveb;	state Exp;
branches;
next	;


desc
@Polymorphic Sets
@


1.10
log
@Adding intersect function
@
text
@(* _set.sml the functor *)
(*
$Log: _set.sml,v $
 * Revision 1.9  1996/10/09  12:06:32  io
 * moving String from toplevel
 *
 * Revision 1.8  1996/04/30  15:05:09  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
 * Revision 1.7  1992/08/04  18:41:26  davidt
 * Added fold function.
 *
Revision 1.6  1992/04/22  12:24:02  jont
Added a disjoint union function for efficiency

Revision 1.5  1992/02/17  22:09:51  jont
Tidied up slightly, and reordered some tests for efficiency

Revision 1.4  1991/11/21  17:02:20  jont
Added copyright message

Revision 1.3  91/10/10  09:47:55  richard
Added map.

Revision 1.3  91/10/09  15:00:53  richard
Added map.

Revision 1.2  91/07/17  11:32:12  davida
Added seteq and altered list_to_set to remove duplicate elements.

Revision 1.1  91/06/07  15:57:31  colin
Initial revision

Copyright (c) 1991 Harlequin Ltd.
*)
require "set";
	
functor Set () : SET =

    struct
	(* standard list functions - could import from List *)

	fun length l =
	  let
	    fun len (acc,[]) = acc
	      | len (acc,_::ls) = len(acc+1,ls)
	  in 
	    len (0,l)
	  end

	fun reduce_left f =
	  let 
	    fun itl (i,[]) = i
	      | itl (i,x::xs) = itl(f(x,i),xs)
	  in 
	    itl
	  end

	    
	type ''a Set = ''a list

	val empty_set = []

	fun empty_setp [] = true
	| empty_setp _ = false

	fun is_member(_, []) = false
	| is_member(a,h::t) = (a = h) orelse is_member (a,t)

        fun intersect ([],_) = false
          | intersect (a::b,x) =
          let
            fun loop(_, []) = intersect (b,x)
              | loop(a,h::t) = (a = h) orelse loop (a,t)
          in
            loop (a,x)
          end

	fun add_member (m,l) = if is_member (m,l) then l else m::l

	fun singleton e = [e]

	fun union ([],l) = l
	| union (h::t,l) = union (t,add_member (h,l))

	fun intersection(set1,set2) =
	  let 
	    fun intersect(result,h::t,set) = 
	      if is_member (h,set)
		then intersect(h::result,t,set)
	      else intersect(result,t,set)
	    | intersect(result,[],set) = result
	  in
	    case set2 of
	      [] => []
	    | _ => intersect([],set1,set2)
	  end

	fun subset ([],l2) = true
	| subset (h::t,l2) = 
	  is_member (h,l2) 
	  andalso 
	  subset (t,l2)

	fun setdiff ([],_) = []
	| setdiff (h::t,l) =
	  if is_member (h,l) 
	    then setdiff(t,l) else h::setdiff(t,l)

	fun seteq(set1,set2) =
	  (length(set1) = length(set2)) andalso subset(set1,set2)
	  
	fun set_to_list set = set

	fun list_to_set alist = reduce_left add_member (empty_set,alist)

	val map = fn f => fn s => list_to_set (map f s)

	fun fold f =
	  let 
	    fun itl (i,[]) = i
	      | itl (i,x::xs) = itl(f(i,x),xs)
	  in 
	    itl
	  end


	fun set_print ([], _) = ""
	| set_print(x, printfun) =
	  let
	    fun print_sub([], acc) = concat(rev acc)
	    | print_sub([x], acc) = concat(rev(printfun x :: acc))
	    | print_sub(x :: xs, acc) = print_sub(xs, "," :: printfun x :: acc)
	  in
	    print_sub(x, [])
	  end
	val disjoin = op @@
end
@


1.10.4.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a3 3
 * Revision 1.10  1997/01/30  17:07:07  matthew
 * Adding intersect function
 *
@


1.10.3.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a3 3
 * Revision 1.10  1997/01/30  17:07:07  matthew
 * Adding intersect function
 *
@


1.10.2.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a3 3
 * Revision 1.10  1997/01/30  17:07:07  matthew
 * Adding intersect function
 *
@


1.10.1.1
log
@branched from 1.10
@
text
@a3 3
 * Revision 1.10  1997/01/30  17:07:07  matthew
 * Adding intersect function
 *
@


1.10.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a3 3
 * Revision 1.10.1.1  1997/05/12  10:53:23  hope
 * branched from 1.10
 *
@


1.10.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a3 3
 * Revision 1.10.1.1  1997/05/12  10:53:23  hope
 * branched from 1.10
 *
@


1.10.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a3 3
 * Revision 1.10.1.1  1997/05/12  10:53:23  hope
 * branched from 1.10
 *
@


1.10.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a3 3
 * Revision 1.10.1.1.1.1  1997/07/28  18:36:05  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.9
log
@moving String from toplevel
@
text
@d4 3
d72 9
@


1.9.4.1
log
@branched from 1.9
@
text
@a3 3
 * Revision 1.9  1996/10/09  12:06:32  io
 * moving String from toplevel
 *
@


1.9.3.1
log
@branched from 1.9
@
text
@a3 3
 * Revision 1.9  1996/10/09  12:06:32  io
 * moving String from toplevel
 *
@


1.9.3.1.1.1
log
@branched from 1.9.3.1
@
text
@a3 3
 * Revision 1.9.3.1  1996/12/17  18:20:07  hope
 * branched from 1.9
 *
@


1.9.2.1
log
@branched from 1.9
@
text
@a3 3
 * Revision 1.9  1996/10/09  12:06:32  io
 * moving String from toplevel
 *
@


1.9.1.1
log
@branched from 1.9
@
text
@a3 3
 * Revision 1.9  1996/10/09  12:06:32  io
 * moving String from toplevel
 *
@


1.9.1.1.1.1
log
@branched from 1.9.1.1
@
text
@a3 3
 * Revision 1.9.1.1  1996/11/14  13:24:04  hope
 * branched from 1.9
 *
@


1.8
log
@String functions explode, implode, chr and ord now only available from String
io functions and types
instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
now only available from MLWorks.IO
@
text
@d4 6
d122 2
a123 2
	    fun print_sub([], acc) = String.implode(rev acc)
	    | print_sub([x], acc) = String.implode(rev(printfun x :: acc))
@


1.8.3.1
log
@branched from 1.8
@
text
@a3 6
 * Revision 1.8  1996/04/30  15:05:09  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
@


1.8.2.1
log
@branched from 1.8
@
text
@a3 6
 * Revision 1.8  1996/04/30  15:05:09  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
@


1.8.1.1
log
@branched from 1.8
@
text
@a3 6
 * Revision 1.8  1996/04/30  15:05:09  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
@


1.7
log
@Added fold function.
@
text
@d4 3
d116 2
a117 2
	    fun print_sub([], acc) = implode(rev acc)
	    | print_sub([x], acc) = implode(rev(printfun x :: acc))
@


1.7.1.1
log
@Fork for bug fixing
@
text
@a3 3
Revision 1.7  1992/08/04  18:41:26  davidt
Added fold function.

@


1.6
log
@Added a disjoint union function for efficiency
@
text
@d4 3
d100 9
@


1.5
log
@Tidied up slightly, and reordered some tests for efficiency
@
text
@d4 3
d107 1
@


1.4
log
@Added copyright message
@
text
@d3 4
a6 1
$Log:	_set.sml,v $
d29 6
a34 6
	    let 
		fun len (acc,[]) = acc
		  | len (acc,_::ls) = len(acc+1,ls)
	    in 
		len (0,l)
	    end
d37 6
a42 6
	    let 
		fun itl (i,[]) = i
		  | itl (i,x::xs) = itl(f(x,i),xs)
	    in 
		itl
	    end
d50 1
a50 1
	  | empty_setp _ = false
d52 2
a53 7
	val is_member = 
	    let 
		fun member (_,[]) = false
		  | member (a,h::t) = (a = h) orelse member (a,t)
	    in
	      member
	    end
d57 1
a57 1
	fun singleton e = add_member (e,empty_set)
d60 1
a60 1
	  | union (h::t,l) = union (t,add_member (h,l))
d63 11
a73 10
	    let 
		fun intersect(result,h::t,set) = 
		    			if is_member (h,set)
					    then intersect(h::result,t,set)
					else intersect(result,t,set)
		  | intersect(result,[],set) = result
	    in
		if (set2=[]) then []
		else intersect([],set1,set2)
	    end
d76 4
a79 4
	  | subset (h::t,l2) = 
	    is_member (h,l2) 
	    andalso 
	    subset (t,l2)
d82 3
a84 2
	  | setdiff (h::t,l) = if is_member (h,l) 
				 then setdiff(t,l) else h::setdiff(t,l)
d86 2
a87 2
	fun seteq(set1,set2) = subset(set1,set2) andalso 
				(length(set1) = length(set2))
d89 1
a89 1
	fun set_to_list (set) = set
d91 1
a91 1
	fun list_to_set (alist) = reduce_left add_member (empty_set,alist)
d95 9
a103 5
	fun set_print ([],printfun) = ""
	  | set_print ([h],printfun) = printfun h
	  | set_print (h::t,printfun) = 
	    printfun h ^ "," ^ set_print (t,printfun)

@


1.3
log
@Added map.
@
text
@d1 1
d4 3
d16 1
@


1.2
log
@Added seteq and altered list_to_set to remove duplicate elements.
@
text
@d3 6
d87 2
@


1.1
log
@Initial revision
@
text
@d2 4
a5 1
$Log$
d10 1
d12 19
d53 12
a64 7
	fun intersection ([],_) = []
	  | intersection (_,[]) = []
	  | intersection (h::t,set) = 
	    if is_member (h,set)
	      then h::intersection (t,set)
	    else intersection (t,set)
      
d74 4
a77 1
				   
d80 1
a80 1
	fun list_to_set (alist) = alist
@
