head	1.7;
access;
symbols
	MLW_daveb_inline_1_4_99:1.7.1
	MLWorks_21c0_1999_03_25:1.7
	MLWorks_20c1_1998_08_20:1.7
	MLWorks_20c0_1998_08_04:1.7
	MLWorks_20b2c2_1998_06_19:1.7
	MLWorks_20b2_Windows_1998_06_12:1.7
	MLWorks_20b1c1_1998_05_07:1.7
	MLWorks_20b0_1998_04_07:1.7
	MLWorks_20b0_1998_03_20:1.7
	MLWorks_20m2_1998_02_16:1.6
	MLWorks_20m1_1997_10_23:1.6
	MLWorks_11r1:1.6.9.1.1.1.1
	MLWorks_workspace_97:1.6.11
	MLWorks_dt_wizard:1.6.10
	MLWorks_11c0_1997_09_09:1.6.9.1.1.1
	MLWorks_10r3:1.6.9.1.3
	MLWorks_10r2_551:1.6.9.1.2
	MLWorks_11:1.6.9.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.6.9.1
	MLWorks_20m0_1997_06_20:1.6
	MLWorks_1_0_r2c2_1997_06_14:1.6.9.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.6.9.1
	MLWorks_1_0_r2c1_1997_05_12:1.6.9
	MLWorks_BugFix_1997_04_24:1.6
	MLWorks_1_0_r2_Win32_1997_04_11:1.6
	MLWorks_1_0_r2_Unix_1997_04_04:1.6
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.6.7.1.1
	MLWorks_gui_1996_12_18:1.6.8
	MLWorks_1_0_Win32_1996_12_17:1.6.7
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.6.5.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.6.5.1
	MLWorks_1_0_Irix_1996_11_28:1.6.5.1.1
	MLWorks_1_0_Win32_1996_11_22:1.6.6
	MLWorks_1_0_Unix_1996_11_14:1.6.5
	MLWorks_Open_Beta2_1996_10_11:1.6.4
	MLWorks_License_dev:1.6.3
	MLWorks_1_open_beta_1996_09_13:1.6.2
	MLWorks_Open_Beta_1996_08_22:1.6
	MLWorks_Beta_1996_07_02:1.6
	MLWorks_Beta_1996_06_07:1.6
	MLWorks_Beta_1996_06_06:1.6
	MLWorks_Beta_1996_06_05:1.6
	MLWorks_Beta_1996_06_03:1.6
	MLWorks_Beta_1996_05_31:1.6
	MLWorks_Beta_1996_05_30:1.6
	ML_beta_release_12/08/94:1.6
	ML_beta_release_03/08/94:1.6
	ML_revised_beta_release_25/05/94:1.6
	ML_final_beta_release_02/03/94:1.6
	mlworks-28-01-1994:1.6
	Release:1.6
	mlworks-beta-01-09-1993:1.6
	MLWorks-1-0-4-29/01/1993:1.6
	MLWorks-1-0-3-21/12/1992:1.6
	MLWorks-1-0-2-15/12/1992:1.6
	MLWorks-1-0-1-04/12/1992:1.6
	checkpoint_17_08_92:1.6;
locks; strict;
comment	@ * @;


1.7
date	98.02.19.16.59.01;	author mitchell;	state Exp;
branches
	1.7.1.1;
next	1.6;

1.6
date	92.08.04.11.01.01;	author jont;	state Exp;
branches
	1.6.1.1
	1.6.2.1
	1.6.3.1
	1.6.4.1
	1.6.5.1
	1.6.6.1
	1.6.7.1
	1.6.8.1
	1.6.9.1
	1.6.10.1
	1.6.11.1;
next	1.5;

1.5
date	92.06.04.09.05.10;	author richard;	state Exp;
branches;
next	1.4;

1.4
date	92.05.18.14.05.06;	author richard;	state Exp;
branches;
next	1.3;

1.3
date	92.05.05.10.17.17;	author richard;	state Exp;
branches;
next	1.2;

1.2
date	92.02.28.14.22.58;	author richard;	state Exp;
branches;
next	1.1;

1.1
date	92.02.27.14.31.10;	author richard;	state Exp;
branches;
next	;

1.6.1.1
date	92.08.04.11.01.01;	author jont;	state Exp;
branches;
next	;

1.6.2.1
date	96.09.13.11.43.12;	author hope;	state Exp;
branches;
next	;

1.6.3.1
date	96.10.07.16.36.23;	author hope;	state Exp;
branches;
next	;

1.6.4.1
date	96.10.17.11.55.23;	author hope;	state Exp;
branches;
next	;

1.6.5.1
date	96.11.14.13.23.45;	author hope;	state Exp;
branches
	1.6.5.1.1.1;
next	;

1.6.5.1.1.1
date	96.11.28.15.34.22;	author hope;	state Exp;
branches;
next	;

1.6.6.1
date	96.11.22.18.40.50;	author hope;	state Exp;
branches;
next	;

1.6.7.1
date	96.12.17.18.19.48;	author hope;	state Exp;
branches
	1.6.7.1.1.1;
next	;

1.6.7.1.1.1
date	97.02.24.12.14.12;	author hope;	state Exp;
branches;
next	;

1.6.8.1
date	96.12.18.10.15.19;	author hope;	state Exp;
branches;
next	;

1.6.9.1
date	97.05.12.10.53.38;	author hope;	state Exp;
branches
	1.6.9.1.1.1
	1.6.9.1.2.1
	1.6.9.1.3.1;
next	;

1.6.9.1.1.1
date	97.07.28.18.35.54;	author daveb;	state Exp;
branches
	1.6.9.1.1.1.1.1;
next	;

1.6.9.1.1.1.1.1
date	97.10.07.12.01.19;	author jkbrook;	state Exp;
branches;
next	;

1.6.9.1.2.1
date	97.09.08.17.28.21;	author daveb;	state Exp;
branches;
next	;

1.6.9.1.3.1
date	97.09.09.14.25.55;	author daveb;	state Exp;
branches;
next	;

1.6.10.1
date	97.09.10.19.44.39;	author brucem;	state Exp;
branches;
next	;

1.6.11.1
date	97.09.11.21.11.55;	author daveb;	state Exp;
branches;
next	;

1.7.1.1
date	99.04.01.18.09.48;	author daveb;	state Exp;
branches;
next	;


desc
@Monomorphic Integer Sets: implementation using lists
Functor.
@


1.7
log
@[Bug #30349]
Fix to avoid non-unit sequence warnings
@
text
@(*  ==== INTEGER SET ABSTRACT TYPE ====
 *   ===    LIST IMPLEMENTATION    ===
 *              FUNCTOR
 *
 *  Copyright (C) 1992 Harlequin Ltd.
 *
 *  Implementation
 *  --------------
 *  This is a straightforward implementation of integer sets using unordered
 *  lists.  Care has been taken to provide an _efficient_ implementation, so
 *  the definition of `remove', for example, may be counter-intuitive.
 *  Redundant cases which check for empty lists are included in several
 *  places.
 *
 *  Revision Log
 *  ------------
 *  $Log: _intsetlist.sml,v $
 * Revision 1.6  1992/08/04  11:01:01  jont
 * Removed integer parameter
 *
 *  Revision 1.5  1992/06/04  09:05:10  richard
 *  Added is_empty.
 *
 *  Revision 1.4  1992/05/18  14:05:06  richard
 *  Added int_to_text parameter to functor.
 *
 *  Revision 1.3  1992/05/05  10:17:17  richard
 *  Added `filter'.
 *
 *  Revision 1.2  1992/02/28  14:22:58  richard
 *  Corrected the definition of `union' and added `subset', `equal', and
 *  `reduce' & `iterate'.
 *
 *  Revision 1.1  1992/02/27  14:31:10  richard
 *  Initial revision
 *
 *)


require "text";
require "intset";


functor IntSetList (

  structure Text	: TEXT

  val int_to_text : int -> Text.T

) : INTSET =

  struct

    structure Text = Text

    type T = int list
    type element = int

    val empty = []

    fun singleton (x : int) = [x]

    fun member (set, x : int) =
      let
        fun member' [] = false
          | member' (e::es) = if e = x then true else member' es
      in
        member' set
      end

    fun add (set, x) = if member (set, x) then set else x::set

    fun remove (set, x : int) =
      let
        fun find (n, []) = (0, set)
          | find (n, e::es) = if e = x then (n, es) else find (n+1, es)
        fun head (done, 0, _) = done
          | head (done, n, []) = done
          | head (done, n, e::es) = head (e::done, n-1, es)
        val (n, tail) = find (0, set)
      in
        head (tail, n, set)
      end

    fun intersection (_, []) = []
      | intersection ([], _) = []
      | intersection (set, set') =
        let
          fun intersection' (passed, []) = passed
            | intersection' (passed, e::es) =
              if member (set', e) then
                intersection' (e::passed, es)
              else
                intersection' (passed, es)
        in
          intersection' ([], set)
        end

    fun union (set, []) = set
      | union ([], set) = set
      | union (set, set') =
        let
          fun union' (done, []) = done
            | union' (done, e::es) =
              if member (set', e) then
                union' (done, es)
              else
                union' (e::done, es)
        in
          union' (set', set)
        end

    fun difference (set, []) = set
      | difference ([], _) = []
      | difference (set, set') =
        let
          fun difference' (done, []) = done
            | difference' (done, e::es) =
              if member (set', e) then
                difference' (done, es)
              else
                difference' (e::done, es)
        in
          difference' ([], set)
        end

    fun cardinality [] = 0
      | cardinality (e::es) =
        let
          fun length (n, []) = n
            | length (n, e::es) = length (n+1, es)
        in
          length (1, es)
        end

    fun subset ([], _) = true
      | subset (_, []) = false
      | subset (set, set') =
        let
          fun subset' [] = true
            | subset' (e::es) = member (set', e) andalso subset' es
        in
          subset' set
        end

    fun is_empty [] = true
      | is_empty _  = false

    fun equal ([], []) = true
      | equal ([], _) = false
      | equal (_, []) = false
      | equal (set, set') = cardinality set = cardinality set' andalso subset (set, set')

    fun reduce _ (i, []) = i
      | reduce f (i, set) =
        let
          fun reduce' (i, []) = i
            | reduce' (i, e::es) =
              reduce' (f (i, e), es)
        in
          reduce' (i, set)
        end

    fun iterate f [] = ()
      | iterate f set =
        let
          fun iterate' [] = ()
            | iterate' (e::es) = (ignore(f e); iterate' es)
        in
          iterate' set
        end

    fun filter f [] = []
      | filter f set =
        let
          fun filter' (passed, []) = passed
            | filter' (passed, e::es) = 
              filter' (if f e then e::passed else passed, es)
        in
          filter' ([], set)
        end

    fun to_list set = set

    fun from_list [] = []
      | from_list list =
        let
          fun from_list' (done, []) = done
            | from_list' (done, x::xs) =
              if member (done, x) then
                from_list' (done, xs)
              else
                from_list' (x::done, xs)
        in
          from_list' ([], list)
        end

    fun to_text set =
      let
        infix ^^
        val (op^^) = Text.concatenate
        val $ = Text.from_string

        fun to_text' (text, []) = text
          | to_text' (text, [e]) = text ^^ int_to_text e
          | to_text' (text, e::es) =
            to_text' (text ^^ int_to_text e ^^ $", ", es)
      in
        to_text' ($"{", set) ^^ $"}"
      end

  end
@


1.7.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a17 4
 * Revision 1.7  1998/02/19  16:59:01  mitchell
 * [Bug #30349]
 * Fix to avoid non-unit sequence warnings
 *
@


1.6
log
@Removed integer parameter
@
text
@d18 3
d168 1
a168 1
            | iterate' (e::es) = (f e; iterate' es)
@


1.6.11.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a17 3
 * Revision 1.6  1992/08/04  11:01:01  jont
 * Removed integer parameter
 *
@


1.6.10.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a17 3
 * Revision 1.6  1992/08/04  11:01:01  jont
 * Removed integer parameter
 *
@


1.6.9.1
log
@branched from 1.6
@
text
@a17 3
 * Revision 1.6  1992/08/04  11:01:01  jont
 * Removed integer parameter
 *
@


1.6.9.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a17 3
 * Revision 1.6.9.1  1997/05/12  10:53:38  hope
 * branched from 1.6
 *
@


1.6.9.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a17 3
 * Revision 1.6.9.1  1997/05/12  10:53:38  hope
 * branched from 1.6
 *
@


1.6.9.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a17 3
 * Revision 1.6.9.1  1997/05/12  10:53:38  hope
 * branched from 1.6
 *
@


1.6.9.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a17 3
 * Revision 1.6.9.1.1.1  1997/07/28  18:35:54  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.6.8.1
log
@branched from 1.6
@
text
@a17 3
 * Revision 1.6  1992/08/04  11:01:01  jont
 * Removed integer parameter
 *
@


1.6.7.1
log
@branched from 1.6
@
text
@a17 3
 * Revision 1.6  1992/08/04  11:01:01  jont
 * Removed integer parameter
 *
@


1.6.7.1.1.1
log
@branched from 1.6.7.1
@
text
@a17 3
 * Revision 1.6.7.1  1996/12/17  18:19:48  hope
 * branched from 1.6
 *
@


1.6.6.1
log
@branched from 1.6
@
text
@a17 3
 * Revision 1.6  1992/08/04  11:01:01  jont
 * Removed integer parameter
 *
@


1.6.5.1
log
@branched from 1.6
@
text
@a17 3
 * Revision 1.6  1992/08/04  11:01:01  jont
 * Removed integer parameter
 *
@


1.6.5.1.1.1
log
@branched from 1.6.5.1
@
text
@a17 3
 * Revision 1.6.5.1  1996/11/14  13:23:45  hope
 * branched from 1.6
 *
@


1.6.4.1
log
@branched from 1.6
@
text
@a17 3
 * Revision 1.6  1992/08/04  11:01:01  jont
 * Removed integer parameter
 *
@


1.6.3.1
log
@branched from 1.6
@
text
@a17 3
 * Revision 1.6  1992/08/04  11:01:01  jont
 * Removed integer parameter
 *
@


1.6.2.1
log
@branched from 1.6
@
text
@a17 3
 * Revision 1.6  1992/08/04  11:01:01  jont
 * Removed integer parameter
 *
@


1.6.1.1
log
@Fork for bug fixing
@
text
@a17 3
 *  Revision 1.6  1992/08/04  11:01:01  jont
 *  Removed integer parameter
 *
@


1.5
log
@Added is_empty.
@
text
@d18 3
a37 1
require "integer";
a43 1
  structure Integer	: INTEGER
@


1.4
log
@Added int_to_text parameter to functor.
@
text
@d18 3
d141 3
@


1.3
log
@Added `filter'.
@
text
@d18 3
d41 2
d50 1
d195 1
a195 1
          | to_text' (text, [e]) = text ^^ $(Integer.makestring e)
d197 1
a197 1
            to_text' (text ^^ $(Integer.makestring e) ^^ $", ", es)
@


1.2
log
@Corrected the definition of `union' and added `subset', `equal', and
`reduce' & `iterate'.
@
text
@d18 4
d155 10
@


1.1
log
@Initial revision
@
text
@d17 4
a20 1
 *  $Log$
d84 11
a94 1
      | union (set, e::es) = union (e::set, es)
d117 34
@
