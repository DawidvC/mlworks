head	1.4;
access;
symbols
	ML_beta_release_12/08/94:1.4
	ML_beta_release_03/08/94:1.4
	ML_revised_beta_release_25/05/94:1.4
	ML_final_beta_release_02/03/94:1.4
	mlworks-28-01-1994:1.4
	Release:1.4
	mlworks-beta-01-09-1993:1.4
	MLWorks-1-0-4-29/01/1993:1.4
	MLWorks-1-0-3-21/12/1992:1.4
	MLWorks-1-0-2-15/12/1992:1.4
	MLWorks-1-0-1-04/12/1992:1.4
	checkpoint_17_08_92:1.4
	Ten15_release_19-11-91:1.1
	Ten15_release_21-08-91:1.1
	Ten15_release_19-08-91:1.1;
locks; strict;


1.4
date	91.11.21.17.02.41;	author jont;	state Exp;
branches
	1.4.1.1;
next	1.3;

1.3
date	91.10.18.14.52.07;	author richard;	state Exp;
branches;
next	1.2;

1.2
date	91.10.01.13.14.17;	author richard;	state Exp;
branches;
next	1.1;

1.1
date	91.08.08.13.41.27;	author davida;	state Exp;
branches;
next	;

1.4.1.1
date	91.11.21.17.02.41;	author jont;	state Exp;
branches;
next	;


desc
@Efficient lookup-tables.
@


1.4
log
@Added copyright message
@
text
@(* _table.sml the functor *)
(*
$Log:	_table.sml,v $
Revision 1.3  91/10/18  14:52:07  richard
Added size.

Revision 1.2  91/10/01  13:14:17  richard
Added spec function to extract table spec from a table.

Revision 1.1  91/08/08  13:41:27  davida
Initial revision

Copyright (c) 1991 Harlequin Ltd.
*)


require "table";

functor Table() : TABLE =
    struct

	datatype 'key tablespec =  TableSpec of {order : 'key * 'key -> bool,
						 eq    : 'key * 'key -> bool};


	datatype ('a,'b) tree = Branch of 'a * 'b * ('a,'b) tree * ('a,'b) tree
	  		      | Leaf

	datatype ('key,'val) table = Table of {table: ('key,'val) tree,
					       order: 'key * 'key -> bool,
					       eq:    'key * 'key -> bool}

	fun empty_table (TableSpec{order,eq : 'a * 'a -> bool}) = 
	    Table{table = Leaf : ('a,'b) tree,
		  order = order,
		  eq = eq};

	fun spec (Table {order = order, eq = eq, ...}) =
	  TableSpec{order = order, eq = eq}
	    
	exception Lookup;

	fun lookup (key, Table{table,order,eq}) =
	 let
	   fun find Leaf = raise Lookup
	     | find (Branch(key',value,t1,t2)) = if order(key,key')
						     then find t1
						 else if eq(key,key')
							  then value
						      else find t2
	 in
	     find table
	 end;
	 

	exception Exists;

	fun add_new ((key,value), Table{table,order,eq}) =
	 let
	     fun add Leaf = Branch(key,value,Leaf,Leaf)
	       | add (Branch(key',value',t1,t2)) = 
		            if order(key,key')
				then Branch(key',value',add t1,t2)
			    else if eq(key,key')
				     then raise Exists
				 else Branch(key',value',t1,add t2)
	 in
	     Table{table = add table,
		   order = order,
		   eq = eq}
	 end;
	 
	fun overwrite ((key,value), Table{table,order,eq}) =
	 let
	     fun add Leaf = Branch(key,value,Leaf,Leaf)
	       | add (Branch(key',value',t1,t2)) = 	
		            if order(key,key')
				then Branch(key',value',add t1,t2)
			    else if eq(key,key')
				     then Branch(key,value,t1,t2)
				 else Branch(key',value',t1,add t2)
	 in
	     Table{table = add table,
		   order = order,
		   eq = eq}
	 end;
	 

	fun in_order tree =
	  let
	     fun trav (Leaf,acc) = acc
	       | trav (Branch(k,v,t1,t2),acc) = trav(t1,(k,v)::(trav(t2,acc)))
	  in
	      trav (tree,[])
	  end;
	  
	fun alist_of_table (Table{table,...}) = in_order table;
	    

	fun reduce f =
	    let 
		fun red (i,[]) = i
		  | red (i,x::xs) = red(f(x,i),xs)
	    in
		red
	    end;


	fun table_of_alist (alist,spec) =
	    reduce overwrite (empty_table spec, alist);
	    

	fun apply f (Table{table,order,eq}) =
	    let
		fun app Leaf = Leaf
		  | app (Branch(key,value,t1,t2)) = Branch(key,f value,
							   app t1,
							   app t2)
	    in
		(Table{table = app table,
		       order = order,
		       eq = eq})
	    end;

	fun size (Table{table, ...}) =
	  let
	    fun s Leaf = 0
	      | s (Branch(_,_,l,r)) =
		1 + (s l) + (s r)
	  in
	    s table
	  end

    end;

	
@


1.4.1.1
log
@Fork for bug fixing
@
text
@d3 1
a3 4
$Log: _table.sml,v $
Revision 1.4  1991/11/21  17:02:41  jont
Added copyright message

@


1.3
log
@Added size.
@
text
@d1 1
d4 3
d13 1
@


1.2
log
@Added spec function to extract table spec from a table.
@
text
@d3 3
d119 9
a127 1
	    
@


1.1
log
@Initial revision
@
text
@d2 4
a5 1
$Log$
d29 3
@
