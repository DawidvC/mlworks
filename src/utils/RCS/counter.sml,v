head	1.5;
access;
symbols
	MLW_daveb_inline_1_4_99:1.5.12
	MLWorks_21c0_1999_03_25:1.5
	MLWorks_20c1_1998_08_20:1.5
	MLWorks_20c0_1998_08_04:1.5
	MLWorks_20b2c2_1998_06_19:1.5
	MLWorks_20b2_Windows_1998_06_12:1.5
	MLWorks_20b1c1_1998_05_07:1.5
	MLWorks_20b0_1998_04_07:1.5
	MLWorks_20b0_1998_03_20:1.5
	MLWorks_20m2_1998_02_16:1.5
	MLWorks_20m1_1997_10_23:1.5
	MLWorks_11r1:1.5.9.1.1.1.1
	MLWorks_workspace_97:1.5.11
	MLWorks_dt_wizard:1.5.10
	MLWorks_11c0_1997_09_09:1.5.9.1.1.1
	MLWorks_10r3:1.5.9.1.3
	MLWorks_10r2_551:1.5.9.1.2
	MLWorks_11:1.5.9.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.5.9.1
	MLWorks_20m0_1997_06_20:1.5
	MLWorks_1_0_r2c2_1997_06_14:1.5.9.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.5.9.1
	MLWorks_1_0_r2c1_1997_05_12:1.5.9
	MLWorks_BugFix_1997_04_24:1.5
	MLWorks_1_0_r2_Win32_1997_04_11:1.5
	MLWorks_1_0_r2_Unix_1997_04_04:1.5
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.5.7.1.1
	MLWorks_gui_1996_12_18:1.5.8
	MLWorks_1_0_Win32_1996_12_17:1.5.7
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.5.5.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.5.5.1
	MLWorks_1_0_Irix_1996_11_28:1.5.5.1.1
	MLWorks_1_0_Win32_1996_11_22:1.5.6
	MLWorks_1_0_Unix_1996_11_14:1.5.5
	MLWorks_Open_Beta2_1996_10_11:1.5.4
	MLWorks_License_dev:1.5.3
	MLWorks_1_open_beta_1996_09_13:1.5.2
	MLWorks_Open_Beta_1996_08_22:1.5
	MLWorks_Beta_1996_07_02:1.5
	MLWorks_Beta_1996_06_07:1.5
	MLWorks_Beta_1996_06_06:1.5
	MLWorks_Beta_1996_06_05:1.5
	MLWorks_Beta_1996_06_03:1.5
	MLWorks_Beta_1996_05_31:1.5
	MLWorks_Beta_1996_05_30:1.5
	ML_beta_release_12/08/94:1.5
	ML_beta_release_03/08/94:1.5
	ML_revised_beta_release_25/05/94:1.5
	ML_final_beta_release_02/03/94:1.5
	mlworks-28-01-1994:1.5
	Release:1.5
	mlworks-beta-01-09-1993:1.5
	MLWorks-1-0-4-29/01/1993:1.5
	MLWorks-1-0-3-21/12/1992:1.5
	MLWorks-1-0-2-15/12/1992:1.5
	MLWorks-1-0-1-04/12/1992:1.5
	checkpoint_17_08_92:1.5
	Ten15_release_19-11-91:1.1.1.1
	Ten15_release_21-08-91:1.1
	Ten15_release_19-08-91:1.1
	ten15_release:1.1;
locks; strict;
comment	@ * @;


1.5
date	92.01.29.11.13.16;	author clive;	state Exp;
branches
	1.5.1.1
	1.5.2.1
	1.5.3.1
	1.5.4.1
	1.5.5.1
	1.5.6.1
	1.5.7.1
	1.5.8.1
	1.5.9.1
	1.5.10.1
	1.5.11.1
	1.5.12.1;
next	1.4;

1.4
date	92.01.28.12.30.40;	author clive;	state Exp;
branches;
next	1.3;

1.3
date	91.11.21.17.03.31;	author jont;	state Exp;
branches;
next	1.2;

1.2
date	91.11.19.12.20.37;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	91.06.07.15.58.05;	author colin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	91.11.19.11.13.37;	author jont;	state Exp;
branches;
next	;

1.5.1.1
date	92.01.29.11.13.16;	author jont;	state Exp;
branches;
next	;

1.5.2.1
date	96.09.13.11.42.58;	author hope;	state Exp;
branches;
next	;

1.5.3.1
date	96.10.07.16.36.08;	author hope;	state Exp;
branches;
next	;

1.5.4.1
date	96.10.17.11.55.10;	author hope;	state Exp;
branches;
next	;

1.5.5.1
date	96.11.14.13.23.32;	author hope;	state Exp;
branches
	1.5.5.1.1.1;
next	;

1.5.5.1.1.1
date	96.11.28.15.34.07;	author hope;	state Exp;
branches;
next	;

1.5.6.1
date	96.11.22.18.40.36;	author hope;	state Exp;
branches;
next	;

1.5.7.1
date	96.12.17.18.19.35;	author hope;	state Exp;
branches
	1.5.7.1.1.1;
next	;

1.5.7.1.1.1
date	97.02.24.12.13.56;	author hope;	state Exp;
branches;
next	;

1.5.8.1
date	96.12.18.10.15.03;	author hope;	state Exp;
branches;
next	;

1.5.9.1
date	97.05.12.10.53.31;	author hope;	state Exp;
branches
	1.5.9.1.1.1
	1.5.9.1.2.1
	1.5.9.1.3.1;
next	;

1.5.9.1.1.1
date	97.07.28.18.35.39;	author daveb;	state Exp;
branches
	1.5.9.1.1.1.1.1;
next	;

1.5.9.1.1.1.1.1
date	97.10.07.12.01.08;	author jkbrook;	state Exp;
branches;
next	;

1.5.9.1.2.1
date	97.09.08.17.28.11;	author daveb;	state Exp;
branches;
next	;

1.5.9.1.3.1
date	97.09.09.14.25.40;	author daveb;	state Exp;
branches;
next	;

1.5.10.1
date	97.09.10.19.44.22;	author brucem;	state Exp;
branches;
next	;

1.5.11.1
date	97.09.11.21.11.43;	author daveb;	state Exp;
branches;
next	;

1.5.12.1
date	99.04.01.18.09.40;	author daveb;	state Exp;
branches;
next	;


desc
@Resetable integer counter
@


1.5
log
@Added code to compute the next value that a counter would take given
its existing value
@
text
@(* counter.sml the signature *)
(*
$Log: counter.sml,v $
Revision 1.4  1992/01/28  12:30:40  clive
Added a previous counter value function

Revision 1.3  1991/11/21  17:03:31  jont
Added copyright message

Revision 1.2  91/11/19  12:20:37  jont
Merging in comments from Ten15 branch to main trunk

Revision 1.1.1.1  91/11/19  11:13:37  jont
Added comments for DRA on functions

Revision 1.1  91/06/07  15:58:05  colin
Initial revision

Copyright (c) 1991 Harlequin Ltd.
*)

(* This module is an integer counter. counter () returns the current
value and increments it. reset_counter sets it to any value, and
read_counter returns the current value without incrementing. A new
instance of this module is required for each counter. *)

signature COUNTER =
    sig
	val counter : unit -> int
        val previous_count : int -> int
        val next_count : int -> int
	val reset_counter : int -> unit
	val read_counter : unit -> int
    end;
@


1.5.12.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a3 4
 * Revision 1.5  1992/01/29  11:13:16  clive
 * Added code to compute the next value that a counter would take given
 * its existing value
 *
@


1.5.11.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a3 4
 * Revision 1.5  1992/01/29  11:13:16  clive
 * Added code to compute the next value that a counter would take given
 * its existing value
 *
@


1.5.10.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a3 4
 * Revision 1.5  1992/01/29  11:13:16  clive
 * Added code to compute the next value that a counter would take given
 * its existing value
 *
@


1.5.9.1
log
@branched from 1.5
@
text
@a3 4
 * Revision 1.5  1992/01/29  11:13:16  clive
 * Added code to compute the next value that a counter would take given
 * its existing value
 *
@


1.5.9.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a3 3
 * Revision 1.5.9.1  1997/05/12  10:53:31  hope
 * branched from 1.5
 *
@


1.5.9.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a3 3
 * Revision 1.5.9.1  1997/05/12  10:53:31  hope
 * branched from 1.5
 *
@


1.5.9.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a3 3
 * Revision 1.5.9.1  1997/05/12  10:53:31  hope
 * branched from 1.5
 *
@


1.5.9.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a3 3
 * Revision 1.5.9.1.1.1  1997/07/28  18:35:39  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.5.8.1
log
@branched from 1.5
@
text
@a3 4
 * Revision 1.5  1992/01/29  11:13:16  clive
 * Added code to compute the next value that a counter would take given
 * its existing value
 *
@


1.5.7.1
log
@branched from 1.5
@
text
@a3 4
 * Revision 1.5  1992/01/29  11:13:16  clive
 * Added code to compute the next value that a counter would take given
 * its existing value
 *
@


1.5.7.1.1.1
log
@branched from 1.5.7.1
@
text
@a3 3
 * Revision 1.5.7.1  1996/12/17  18:19:35  hope
 * branched from 1.5
 *
@


1.5.6.1
log
@branched from 1.5
@
text
@a3 4
 * Revision 1.5  1992/01/29  11:13:16  clive
 * Added code to compute the next value that a counter would take given
 * its existing value
 *
@


1.5.5.1
log
@branched from 1.5
@
text
@a3 4
 * Revision 1.5  1992/01/29  11:13:16  clive
 * Added code to compute the next value that a counter would take given
 * its existing value
 *
@


1.5.5.1.1.1
log
@branched from 1.5.5.1
@
text
@a3 3
 * Revision 1.5.5.1  1996/11/14  13:23:32  hope
 * branched from 1.5
 *
@


1.5.4.1
log
@branched from 1.5
@
text
@a3 4
 * Revision 1.5  1992/01/29  11:13:16  clive
 * Added code to compute the next value that a counter would take given
 * its existing value
 *
@


1.5.3.1
log
@branched from 1.5
@
text
@a3 4
 * Revision 1.5  1992/01/29  11:13:16  clive
 * Added code to compute the next value that a counter would take given
 * its existing value
 *
@


1.5.2.1
log
@branched from 1.5
@
text
@a3 4
 * Revision 1.5  1992/01/29  11:13:16  clive
 * Added code to compute the next value that a counter would take given
 * its existing value
 *
@


1.5.1.1
log
@Fork for bug fixing
@
text
@a3 4
Revision 1.5  1992/01/29  11:13:16  clive
Added code to compute the next value that a counter would take given
its existing value

@


1.4
log
@Added a previous counter value function
@
text
@d4 3
d31 1
@


1.3
log
@Added copyright message
@
text
@d3 4
a6 1
$Log:	counter.sml,v $
d27 1
@


1.2
log
@Merging in comments from Ten15 branch to main trunk
@
text
@d1 1
d4 3
d13 1
@


1.1
log
@Initial revision
@
text
@d2 7
a8 1
$Log$
d10 6
@


1.1.1.1
log
@Added comments for DRA on functions
@
text
@d2 1
a2 4
$Log:	counter.sml,v $
Revision 1.1  91/06/07  15:58:05  colin
Initial revision

a3 6

(* This module is an integer counter. counter () returns the current
value and increments it. reset_counter sets it to any value, and
read_counter returns the current value without incrementing. A new
instance of this module is required for each counter. *)

@
