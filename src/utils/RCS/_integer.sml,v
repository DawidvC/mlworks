head	1.6;
access;
symbols
	ML_beta_release_12/08/94:1.6
	ML_beta_release_03/08/94:1.6
	ML_revised_beta_release_25/05/94:1.6
	ML_final_beta_release_02/03/94:1.6
	mlworks-28-01-1994:1.6
	Release:1.6
	mlworks-beta-01-09-1993:1.6
	MLWorks-1-0-4-29/01/1993:1.5
	MLWorks-1-0-3-21/12/1992:1.5
	MLWorks-1-0-2-15/12/1992:1.5
	MLWorks-1-0-1-04/12/1992:1.5
	checkpoint_17_08_92:1.4
	Ten15_release_19-11-91:1.2
	Ten15_release_21-08-91:1.2
	Ten15_release_19-08-91:1.2
	ten15_release:1.2;
locks; strict;
comment	@ * @;


1.6
date	93.04.23.15.14.22;	author jont;	state Exp;
branches
	1.6.1.1;
next	1.5;

1.5
date	92.10.07.11.05.48;	author clive;	state Exp;
branches;
next	1.4;

1.4
date	91.11.21.17.01.23;	author jont;	state Exp;
branches;
next	1.3;

1.3
date	91.10.10.11.28.54;	author jont;	state Exp;
branches;
next	1.2;

1.2
date	91.07.25.17.23.00;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	91.06.07.15.57.05;	author colin;	state Exp;
branches;
next	;

1.6.1.1
date	93.04.23.15.14.22;	author jont;	state Exp;
branches;
next	;


desc
@Integer Utilities
@


1.6
log
@Removed makestring implementation to __pervasive_library
@
text
@(* _integer.sml the functor *)
(*
$Log: _integer.sml,v $
Revision 1.5  1992/10/07  11:05:48  clive
String to int conversion failed on most negative int

Revision 1.4  1991/11/21  17:01:23  jont
Added copyright message

Revision 1.3  91/10/10  11:28:54  jont
Fixed negative number printing (again!)

Revision 1.2  91/07/25  17:23:00  jont
Fixed printing of negative integers

Revision 1.1  91/06/07  15:57:05  colin
Initial revision

Copyright (c) 1991 Harlequin Ltd.
*)

require "integer";
require "print";

functor Integer (structure Print : PRINT) : INTEGER = 
  struct 
    
    fun max (m:int,n) = if m >= n then m else n

    fun min (m:int,n) = if m <= n then m else n

    val makestring = MLWorks.Integer.makestring

(*
    fun makestring anint =
      let
        val sign = if anint < 0 then "~" else ""
        fun makedigits anint =
          let
            val digit = if anint >= 0 
                          then anint mod 10 
                        else 
                          let
                            val res = anint mod 10
                          in
                            if res = 0
                              then 0
                                else 10 - res
                          end
            val new_int = if anint >= 0 orelse digit = 0
                            then anint div 10
                          else 1 + anint div 10
          in
            (if new_int <> 0
               then makedigits new_int
             else
               "") ^
               chr (digit + 48)
          end
      in
        sign ^ makedigits anint
      end
*)

    fun print n = Print.print (makestring n)

    exception Invalid

    fun getint str =
      let
	fun convert res [] = res
	  | convert res (h :: t) =
	    let
	      val d = ord h - ord "0"
	    in
	      if d >= 0 andalso d <= 9 then
		convert (res * 10 + d) t
	      else
		raise Invalid
	    end
      in
	convert 0 (explode str)
      end

    local 
      fun convert (x,[]) = x
	| convert (x,"~"::rest) : int = ~(convert (x,rest))
	| convert (x,h::t) = convert( x * 10 + ord h - 48, t)
    in
      fun parseinteger x = convert (0,explode x)
    end


  end
@


1.6.1.1
log
@Fork for bug fixing
@
text
@a3 3
Revision 1.6  1993/04/23  15:14:22  jont
Removed makestring implementation to __pervasive_library

@


1.5
log
@String to int conversion failed on most negative int
@
text
@d4 3
d21 1
d32 3
d63 1
d65 1
a83 2

    fun print n = Print.print (makestring n)
@


1.4
log
@Added copyright message
@
text
@d3 4
a6 1
$Log:	_integer.sml,v $
d30 23
a52 3
	val sign = if anint < 0 then "~" else ""
	val anint = if anint < 0 then 0 - anint else anint
	val new_int = anint div 10
d54 1
a54 6
	sign ^
	(if new_int > 0
	  then makestring new_int
	else
	   "") ^
	   chr ((anint mod 10) + 48)
d56 1
@


1.3
log
@Fixed negative number printing (again!)
@
text
@d1 1
d4 3
d13 1
@


1.2
log
@Fixed printing of negative integers
@
text
@d3 3
d26 3
a28 2
	if new_int > 0
	  then (makestring new_int) ^ chr ((anint mod 10) + 48)
d30 2
a31 1
	  sign ^ chr ((anint mod 10) + 48)
@


1.1
log
@Initial revision
@
text
@d2 4
a5 1
$Log$
d17 1
a17 1
    fun makestring anint = 
d19 2
d26 1
a26 1
	  chr ((anint mod 10) + 48)
@
