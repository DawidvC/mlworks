head	1.5;
access;
symbols
	MLW_daveb_inline_1_4_99:1.5.1
	MLWorks_21c0_1999_03_25:1.5
	MLWorks_20c1_1998_08_20:1.5
	MLWorks_20c0_1998_08_04:1.5
	MLWorks_20b2c2_1998_06_19:1.5
	MLWorks_20b2_Windows_1998_06_12:1.5
	MLWorks_20b1c1_1998_05_07:1.5
	MLWorks_20b0_1998_04_07:1.5
	MLWorks_20b0_1998_03_20:1.5
	MLWorks_20m2_1998_02_16:1.4
	MLWorks_20m1_1997_10_23:1.4
	MLWorks_11r1:1.4.8.1.1.1.1
	MLWorks_workspace_97:1.4.10
	MLWorks_dt_wizard:1.4.9
	MLWorks_11c0_1997_09_09:1.4.8.1.1.1
	MLWorks_10r3:1.4.8.1.3
	MLWorks_10r2_551:1.4.8.1.2
	MLWorks_11:1.4.8.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.4.8.1
	MLWorks_20m0_1997_06_20:1.4
	MLWorks_1_0_r2c2_1997_06_14:1.4.8.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.4.8.1
	MLWorks_1_0_r2c1_1997_05_12:1.4.8
	MLWorks_BugFix_1997_04_24:1.4
	MLWorks_1_0_r2_Win32_1997_04_11:1.4
	MLWorks_1_0_r2_Unix_1997_04_04:1.4
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.4.6.1.1
	MLWorks_gui_1996_12_18:1.4.7
	MLWorks_1_0_Win32_1996_12_17:1.4.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.4.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.4.4.1
	MLWorks_1_0_Irix_1996_11_28:1.4.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.4.5
	MLWorks_1_0_Unix_1996_11_14:1.4.4
	MLWorks_Open_Beta2_1996_10_11:1.4.3
	MLWorks_License_dev:1.4.2
	MLWorks_1_open_beta_1996_09_13:1.4.1
	MLWorks_Open_Beta_1996_08_22:1.4
	MLWorks_Beta_1996_07_02:1.4
	MLWorks_Beta_1996_06_07:1.4
	MLWorks_Beta_1996_06_06:1.4
	MLWorks_Beta_1996_06_05:1.4
	MLWorks_Beta_1996_06_03:1.4
	MLWorks_Beta_1996_05_31:1.4
	MLWorks_Beta_1996_05_30:1.4;
locks; strict;
comment	@ * @;


1.5
date	98.02.19.19.41.35;	author mitchell;	state Exp;
branches
	1.5.1.1;
next	1.4;

1.4
date	95.09.25.13.01.47;	author brianm;	state Exp;
branches
	1.4.1.1
	1.4.2.1
	1.4.3.1
	1.4.4.1
	1.4.5.1
	1.4.6.1
	1.4.7.1
	1.4.8.1
	1.4.9.1
	1.4.10.1;
next	1.3;

1.3
date	95.09.23.15.29.43;	author brianm;	state Exp;
branches;
next	1.2;

1.2
date	95.09.23.12.24.32;	author brianm;	state Exp;
branches;
next	1.1;

1.1
date	95.09.22.14.24.33;	author brianm;	state Exp;
branches;
next	;

1.4.1.1
date	96.09.13.11.42.54;	author hope;	state Exp;
branches;
next	;

1.4.2.1
date	96.10.07.16.36.04;	author hope;	state Exp;
branches;
next	;

1.4.3.1
date	96.10.17.11.55.06;	author hope;	state Exp;
branches;
next	;

1.4.4.1
date	96.11.14.13.23.28;	author hope;	state Exp;
branches
	1.4.4.1.1.1;
next	;

1.4.4.1.1.1
date	96.11.28.15.34.03;	author hope;	state Exp;
branches;
next	;

1.4.5.1
date	96.11.22.18.40.31;	author hope;	state Exp;
branches;
next	;

1.4.6.1
date	96.12.17.18.19.31;	author hope;	state Exp;
branches
	1.4.6.1.1.1;
next	;

1.4.6.1.1.1
date	97.02.24.12.13.52;	author hope;	state Exp;
branches;
next	;

1.4.7.1
date	96.12.18.10.14.57;	author hope;	state Exp;
branches;
next	;

1.4.8.1
date	97.05.12.10.53.05;	author hope;	state Exp;
branches
	1.4.8.1.1.1
	1.4.8.1.2.1
	1.4.8.1.3.1;
next	;

1.4.8.1.1.1
date	97.07.28.18.36.17;	author daveb;	state Exp;
branches
	1.4.8.1.1.1.1.1;
next	;

1.4.8.1.1.1.1.1
date	97.10.07.12.01.33;	author jkbrook;	state Exp;
branches;
next	;

1.4.8.1.2.1
date	97.09.08.17.28.35;	author daveb;	state Exp;
branches;
next	;

1.4.8.1.3.1
date	97.09.09.14.26.18;	author daveb;	state Exp;
branches;
next	;

1.4.9.1
date	97.09.10.19.44.16;	author brucem;	state Exp;
branches;
next	;

1.4.10.1
date	97.09.11.21.11.39;	author daveb;	state Exp;
branches;
next	;

1.5.1.1
date	99.04.01.18.10.05;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
New file.
@


1.5
log
@[Bug #30349]
Fix to avoid non-unit sequence warnings
@
text
@(*  ==== UTILITIES : LISP ====
 *
 *  Copyright (C) 1995 Harlequin Ltd.
 *
 *  Revision Log
 *  ------------
 *  $Log: _lisp.sml,v $
 * Revision 1.4  1995/09/25  13:01:47  brianm
 * Adding unwind_protect' and letv' ...
 *
 *  Revision 1.2  1995/09/23  12:24:32  brianm
 *  Minor change to type of letv.
 *
 *  Revision 1.1  1995/09/22  14:24:33  brianm
 *  new unit
 *  New file.
 *
 *
 *)

require "lisp";

functor LispUtils() : LISP_UTILS =
   struct

      fun unwind_protect (body_fn) (coda_fn) =
          let val res = body_fn ()
   	                handle exn => (ignore(coda_fn()); raise exn)
          in
              (* If we get here then body_fn succeeded *)
	      ignore(coda_fn());
	      res
          end

      fun unwind_protect' (body_fn) (coda_fn) (arg) =
          let val res = body_fn (arg)
   	                handle exn => (ignore(coda_fn(arg)); raise exn)
          in
              (* If we get here then body_fn succeeded *)
	      ignore(coda_fn(arg));
	      res
          end

      (* It is interesting to compare the code above with the following
         which looks similar and superficialy seems equivalent:

	 fun unwind_protect' (body_fn) (coda_fn) (arg) =
	     let val res = body_fn (arg)
	     in
		 (* If we get here then body_fn succeeded *)
		 coda_fn(arg);
		 res
	     end handle exn => (coda_fn(arg); raise exn)

         Of course the problem is - what happens if coda_fn
         raises an exception.  With this code, if the body_fn
         succeeded then the coda_fn gets invoked TWICE with
         argument arg, possibly causing repeated updates and
         side-effects - so this _isn't_ what we want!!
       *) 


      datatype ('a)svref = SV of 'a ref list ref

      fun svref (x) = SV (ref([ref x]))

      fun set_svref(SV(rl),x) = (rl := (ref x :: !rl))

      fun unset_svref(SV(rl),_) =
          case !rl of
            _ :: rest => rl := rest
          | _ => ()

      fun app f =
	let fun loop (a::rest) = (ignore(f(a)) ; loop(rest))
              | loop ([]) = ()
        in
            loop
        end

      fun letv (svref_l) (body_fn) =
  	  ( app set_svref svref_l;
	    unwind_protect body_fn (fn _ => app unset_svref svref_l)
          )

      fun letv' (svref_l) (body_fn) (arg) =
  	  ( app set_svref svref_l;
	    unwind_protect' body_fn (fn _ => app unset_svref svref_l) (arg)
          )

      exception UndefinedSpecialVariable

      fun setv (SV(ref(rx :: _))) (x) = (rx := x)
        | setv (_) (_)                = raise UndefinedSpecialVariable

      fun !! (SV(ref(ref(v) :: _))) = v
        | !! (_) = raise UndefinedSpecialVariable

      (* The exception UndefinedSpecialVariable cannot be raised in normal
         use - it is not possible to generate an empty svref, because of the
         robust way in which they are bound/unbound.
       *)

    end
@


1.5.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a7 4
 * Revision 1.5  1998/02/19  19:41:35  mitchell
 * [Bug #30349]
 * Fix to avoid non-unit sequence warnings
 *
@


1.4
log
@Adding unwind_protect' and letv' ...
@
text
@d8 3
d28 1
a28 1
   	                handle exn => (coda_fn(); raise exn)
d31 1
a31 1
	      coda_fn();
d37 1
a37 1
   	                handle exn => (coda_fn(arg); raise exn)
d40 1
a40 1
	      coda_fn(arg);
d75 1
a75 1
	let fun loop (a::rest) = (f(a) ; loop(rest))
@


1.4.10.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a7 3
 * Revision 1.4  1995/09/25  13:01:47  brianm
 * Adding unwind_protect' and letv' ...
 *
@


1.4.9.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a7 3
 * Revision 1.4  1995/09/25  13:01:47  brianm
 * Adding unwind_protect' and letv' ...
 *
@


1.4.8.1
log
@branched from 1.4
@
text
@a7 3
 * Revision 1.4  1995/09/25  13:01:47  brianm
 * Adding unwind_protect' and letv' ...
 *
@


1.4.8.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a7 3
 * Revision 1.4.8.1  1997/05/12  10:53:05  hope
 * branched from 1.4
 *
@


1.4.8.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a7 3
 * Revision 1.4.8.1  1997/05/12  10:53:05  hope
 * branched from 1.4
 *
@


1.4.8.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a7 3
 * Revision 1.4.8.1  1997/05/12  10:53:05  hope
 * branched from 1.4
 *
@


1.4.8.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a7 3
 * Revision 1.4.8.1.1.1  1997/07/28  18:36:17  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.4.7.1
log
@branched from 1.4
@
text
@a7 3
 * Revision 1.4  1995/09/25  13:01:47  brianm
 * Adding unwind_protect' and letv' ...
 *
@


1.4.6.1
log
@branched from 1.4
@
text
@a7 3
 * Revision 1.4  1995/09/25  13:01:47  brianm
 * Adding unwind_protect' and letv' ...
 *
@


1.4.6.1.1.1
log
@branched from 1.4.6.1
@
text
@a7 3
 * Revision 1.4.6.1  1996/12/17  18:19:31  hope
 * branched from 1.4
 *
@


1.4.5.1
log
@branched from 1.4
@
text
@a7 3
 * Revision 1.4  1995/09/25  13:01:47  brianm
 * Adding unwind_protect' and letv' ...
 *
@


1.4.4.1
log
@branched from 1.4
@
text
@a7 3
 * Revision 1.4  1995/09/25  13:01:47  brianm
 * Adding unwind_protect' and letv' ...
 *
@


1.4.4.1.1.1
log
@branched from 1.4.4.1
@
text
@a7 3
 * Revision 1.4.4.1  1996/11/14  13:23:28  hope
 * branched from 1.4
 *
@


1.4.3.1
log
@branched from 1.4
@
text
@a7 3
 * Revision 1.4  1995/09/25  13:01:47  brianm
 * Adding unwind_protect' and letv' ...
 *
@


1.4.2.1
log
@branched from 1.4
@
text
@a7 3
 * Revision 1.4  1995/09/25  13:01:47  brianm
 * Adding unwind_protect' and letv' ...
 *
@


1.4.1.1
log
@branched from 1.4
@
text
@a7 3
 * Revision 1.4  1995/09/25  13:01:47  brianm
 * Adding unwind_protect' and letv' ...
 *
@


1.3
log
@Adding unwind_protect' and letv' ...
@
text
@d41 1
a41 1
      (* It is interesting to compare the above code with the following
d78 1
a78 1
      fun letv (svref_l) body_fn =
d83 1
a83 1
      fun letv' (svref_l) body_fn arg =
@


1.2
log
@Minor change to type of letv.
@
text
@d8 3
d23 10
a32 1
      fun unwind_protect (body_fn) (coda_fn) (arg) =
d41 1
a41 1
      (* It is interesting to compare this code with the following
d44 1
a44 1
	 fun unwind_protect (body_fn) (coda_fn) (arg) =
d80 6
a85 1
	    unwind_protect body_fn (fn _ => app unset_svref svref_l) ()
@


1.1
log
@new unit
New file.
@
text
@d7 5
a11 1
 *  $Log$
d68 1
a68 1
	    unwind_protect body_fn (fn _ => app unset_svref svref_l)
@
