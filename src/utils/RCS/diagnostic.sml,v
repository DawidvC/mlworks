head	1.5;
access;
symbols
	MLW_daveb_inline_1_4_99:1.5.3
	MLWorks_21c0_1999_03_25:1.5
	MLWorks_20c1_1998_08_20:1.5
	MLWorks_20c0_1998_08_04:1.5
	MLWorks_20b2c2_1998_06_19:1.5
	MLWorks_20b2_Windows_1998_06_12:1.5
	MLWorks_20b1c1_1998_05_07:1.5
	MLWorks_20b0_1998_04_07:1.5
	MLWorks_20b0_1998_03_20:1.5
	MLWorks_20m2_1998_02_16:1.5
	MLWorks_20m1_1997_10_23:1.5
	MLWorks_11r1:1.4.8.1.1.1.1
	MLWorks_workspace_97:1.5.2
	MLWorks_dt_wizard:1.5.1
	MLWorks_11c0_1997_09_09:1.4.8.1.1.1
	MLWorks_10r3:1.4.8.1.3
	MLWorks_10r2_551:1.4.8.1.2
	MLWorks_11:1.4.8.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.4.8.1
	MLWorks_20m0_1997_06_20:1.5
	MLWorks_1_0_r2c2_1997_06_14:1.4.8.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.4.8.1
	MLWorks_1_0_r2c1_1997_05_12:1.4.8
	MLWorks_BugFix_1997_04_24:1.4
	MLWorks_1_0_r2_Win32_1997_04_11:1.4
	MLWorks_1_0_r2_Unix_1997_04_04:1.4
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.4.6.1.1
	MLWorks_gui_1996_12_18:1.4.7
	MLWorks_1_0_Win32_1996_12_17:1.4.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.4.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.4.4.1
	MLWorks_1_0_Irix_1996_11_28:1.4.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.4.5
	MLWorks_1_0_Unix_1996_11_14:1.4.4
	MLWorks_Open_Beta2_1996_10_11:1.4.3
	MLWorks_License_dev:1.4.2
	MLWorks_1_open_beta_1996_09_13:1.4.1
	MLWorks_Open_Beta_1996_08_22:1.4
	MLWorks_Beta_1996_07_02:1.4
	MLWorks_Beta_1996_06_07:1.4
	MLWorks_Beta_1996_06_06:1.4
	MLWorks_Beta_1996_06_05:1.4
	MLWorks_Beta_1996_06_03:1.4
	MLWorks_Beta_1996_05_31:1.4
	MLWorks_Beta_1996_05_30:1.4
	ML_beta_release_12/08/94:1.3
	ML_beta_release_03/08/94:1.3
	ML_revised_beta_release_25/05/94:1.3
	ML_final_beta_release_02/03/94:1.3
	mlworks-28-01-1994:1.3
	Release:1.3
	mlworks-beta-01-09-1993:1.3
	MLWorks-1-0-4-29/01/1993:1.3
	MLWorks-1-0-3-21/12/1992:1.3
	MLWorks-1-0-2-15/12/1992:1.3
	MLWorks-1-0-1-04/12/1992:1.3
	checkpoint_17_08_92:1.3;
locks; strict;
comment	@ * @;


1.5
date	97.05.21.17.19.55;	author jont;	state Exp;
branches
	1.5.1.1
	1.5.2.1
	1.5.3.1;
next	1.4;

1.4
date	96.04.30.14.24.59;	author jont;	state Exp;
branches
	1.4.1.1
	1.4.2.1
	1.4.3.1
	1.4.4.1
	1.4.5.1
	1.4.6.1
	1.4.7.1
	1.4.8.1;
next	1.3;

1.3
date	92.06.16.11.28.58;	author davida;	state Exp;
branches
	1.3.1.1;
next	1.2;

1.2
date	92.02.11.12.20.19;	author richard;	state Exp;
branches;
next	1.1;

1.1
date	91.11.18.16.09.40;	author richard;	state Exp;
branches;
next	;

1.3.1.1
date	92.06.16.11.28.58;	author jont;	state Exp;
branches;
next	;

1.4.1.1
date	96.09.13.11.43.01;	author hope;	state Exp;
branches;
next	;

1.4.2.1
date	96.10.07.16.36.12;	author hope;	state Exp;
branches;
next	;

1.4.3.1
date	96.10.17.11.55.13;	author hope;	state Exp;
branches;
next	;

1.4.4.1
date	96.11.14.13.23.35;	author hope;	state Exp;
branches
	1.4.4.1.1.1;
next	;

1.4.4.1.1.1
date	96.11.28.15.34.11;	author hope;	state Exp;
branches;
next	;

1.4.5.1
date	96.11.22.18.40.40;	author hope;	state Exp;
branches;
next	;

1.4.6.1
date	96.12.17.18.19.38;	author hope;	state Exp;
branches
	1.4.6.1.1.1;
next	;

1.4.6.1.1.1
date	97.02.24.12.14.00;	author hope;	state Exp;
branches;
next	;

1.4.7.1
date	96.12.18.10.15.07;	author hope;	state Exp;
branches;
next	;

1.4.8.1
date	97.05.12.10.53.32;	author hope;	state Exp;
branches
	1.4.8.1.1.1
	1.4.8.1.2.1
	1.4.8.1.3.1;
next	;

1.4.8.1.1.1
date	97.07.28.18.36.20;	author daveb;	state Exp;
branches
	1.4.8.1.1.1.1.1;
next	;

1.4.8.1.1.1.1.1
date	97.10.07.12.01.35;	author jkbrook;	state Exp;
branches;
next	;

1.4.8.1.2.1
date	97.09.08.17.28.37;	author daveb;	state Exp;
branches;
next	;

1.4.8.1.3.1
date	97.09.09.14.26.21;	author daveb;	state Exp;
branches;
next	;

1.5.1.1
date	97.09.10.19.44.25;	author brucem;	state Exp;
branches;
next	;

1.5.2.1
date	97.09.11.21.11.45;	author daveb;	state Exp;
branches;
next	;

1.5.3.1
date	99.04.01.18.10.08;	author daveb;	state Exp;
branches;
next	;


desc
@Diagnostic and debugging message output.  This is the signature.
@


1.5
log
@[Bug #30090]
Replace MLWorks.IO with TextIO where applicable
@
text
@(*  ==== DIAGNOSTIC OUTPUT ====
 *
 *  Copyright (C) 1992 Harlequin Ltd.
 *
 *  Description
 *  -----------
 *  This module is intended for use in all other modules which could produce
 *  debugging output.  The structure should be exported in the signature of
 *  the module it diagnoses, and the Diagnostic functor should therefore be
 *  applied for each instance so that each module can have a separate
 *  debugging level, settable from outside.  For example a structure Foo can
 *  have its debugging output enabled by, say:
 *
 *     Foo.Diagnostic.set 10
 *
 *  Revision Log
 *  ------------
 *  $Log: diagnostic.sml,v $
 * Revision 1.4  1996/04/30  14:24:59  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
 * Revision 1.3  1992/06/16  11:28:58  davida
 * Added output_fn, internal outstream for messages.
 *
 *  Revision 1.2  1992/02/11  12:20:19  richard
 *  There is a new function, `output_text' which outputs
 *  using the Text type, for efficiency.  See utils/text.sml.
 *
 *  Revision 1.1  1991/11/18  16:09:40  richard
 *  Initial revision
 *)

require "../basis/__text_io";
require "text";

signature DIAGNOSTIC =

  sig

    structure Text	: TEXT


    (*  === SET DIAGNOSTIC LEVEL ===
     *
     *  The diagnostic level controls which messages are output, and
     *  possibly how verbose those messages are. See `output' below.
     *)

    val set : int -> unit


    (*  === DIAGNOTIC OUTPUT ===
     *
     *  Takes a message level, and a function.  The function is applied only
     *  if the current message level (set by `set', see above) is not less
     *  than the level supplied.  (Level 0 messages will always be output.)
     *  The function is passed the difference between the current level and
     *  the supplied level, and can use this to decide how verbose to be.
     *  The list of strings it returns are printed as if concatenated on the
     *  standard output, followed by a newline.
     *
     *  A function is passed rather than a string so that the code to build
     *  the string is not executed unless it is going to be printed.  The
     *  function returns a list of strings because it is generally expensive
     *  to build large strings by concatenation, whereas consing long lists
     *  of strings is cheap.
     *
     *  The second function, `output_text', is a variant in which the
     *  function returns a Text.T, which is even more efficient to build
     *  than a list of strings.
     *
     *  output_fn allows use of a user-given print routine, on the
     *  standard stream used by diagnostic.
     *
     *)

    val output		: int -> (int -> string list) -> unit
    val output_text	: int -> (int -> Text.T) -> unit
    val output_fn	: int -> (int * TextIO.outstream -> unit) -> unit


  end
@


1.5.3.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a18 4
 * Revision 1.5  1997/05/21  17:19:55  jont
 * [Bug #30090]
 * Replace MLWorks.IO with TextIO where applicable
 *
@


1.5.2.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a18 4
 * Revision 1.5  1997/05/21  17:19:55  jont
 * [Bug #30090]
 * Replace MLWorks.IO with TextIO where applicable
 *
@


1.5.1.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a18 4
 * Revision 1.5  1997/05/21  17:19:55  jont
 * [Bug #30090]
 * Replace MLWorks.IO with TextIO where applicable
 *
@


1.4
log
@String functions explode, implode, chr and ord now only available from String
io functions and types
instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
now only available from MLWorks.IO
@
text
@d19 6
d36 1
a36 1

a38 1

d82 1
a82 1
    val output_fn	: int -> (int * MLWorks.IO.outstream -> unit) -> unit
@


1.4.8.1
log
@branched from 1.4
@
text
@a18 6
 * Revision 1.4  1996/04/30  14:24:59  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
@


1.4.8.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a18 3
 * Revision 1.4.8.1  1997/05/12  10:53:32  hope
 * branched from 1.4
 *
@


1.4.8.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a18 3
 * Revision 1.4.8.1  1997/05/12  10:53:32  hope
 * branched from 1.4
 *
@


1.4.8.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a18 3
 * Revision 1.4.8.1  1997/05/12  10:53:32  hope
 * branched from 1.4
 *
@


1.4.8.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a18 3
 * Revision 1.4.8.1.1.1  1997/07/28  18:36:20  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.4.7.1
log
@branched from 1.4
@
text
@a18 6
 * Revision 1.4  1996/04/30  14:24:59  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
@


1.4.6.1
log
@branched from 1.4
@
text
@a18 6
 * Revision 1.4  1996/04/30  14:24:59  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
@


1.4.6.1.1.1
log
@branched from 1.4.6.1
@
text
@a18 3
 * Revision 1.4.6.1  1996/12/17  18:19:38  hope
 * branched from 1.4
 *
@


1.4.5.1
log
@branched from 1.4
@
text
@a18 6
 * Revision 1.4  1996/04/30  14:24:59  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
@


1.4.4.1
log
@branched from 1.4
@
text
@a18 6
 * Revision 1.4  1996/04/30  14:24:59  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
@


1.4.4.1.1.1
log
@branched from 1.4.4.1
@
text
@a18 3
 * Revision 1.4.4.1  1996/11/14  13:23:35  hope
 * branched from 1.4
 *
@


1.4.3.1
log
@branched from 1.4
@
text
@a18 6
 * Revision 1.4  1996/04/30  14:24:59  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
@


1.4.2.1
log
@branched from 1.4
@
text
@a18 6
 * Revision 1.4  1996/04/30  14:24:59  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
@


1.4.1.1
log
@branched from 1.4
@
text
@a18 6
 * Revision 1.4  1996/04/30  14:24:59  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
@


1.3
log
@Added output_fn, internal outstream for messages.
@
text
@d19 3
d77 1
a77 1
    val output_fn	: int -> (int * outstream -> unit) -> unit
@


1.3.1.1
log
@Fork for bug fixing
@
text
@a18 3
 *  Revision 1.3  1992/06/16  11:28:58  davida
 *  Added output_fn, internal outstream for messages.
 *
@


1.2
log
@The diagnostic output function now writes directly to the std_err
stream.  There ia also a new function, `output_text' which outputs
using the Text type, for efficiency.  See utils/text.sml.
@
text
@d18 5
a22 1
 *  $Log$
d66 4
d74 1
@


1.1
log
@Initial revision
@
text
@d3 4
d15 6
a22 3
(* $Log$
Copyright (C) 1991 Harlequin Ltd.
*)
d24 1
d26 1
d31 1
d33 1
d37 1
a37 1
     *  possibly how verbose those messages are. See >output< below.
d46 1
a46 1
     *  if the current message level (set by >set<, see above) is not less
d58 4
d64 2
a65 1
    val output : int -> (int -> string list) -> unit
@
