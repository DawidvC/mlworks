head	1.7;
access;
symbols
	MLW_daveb_inline_1_4_99:1.7.1
	MLWorks_21c0_1999_03_25:1.7
	MLWorks_20c1_1998_08_20:1.7
	MLWorks_20c0_1998_08_04:1.7
	MLWorks_20b2c2_1998_06_19:1.7
	MLWorks_20b2_Windows_1998_06_12:1.7
	MLWorks_20b1c1_1998_05_07:1.7
	MLWorks_20b0_1998_04_07:1.7
	MLWorks_20b0_1998_03_20:1.7
	MLWorks_20m2_1998_02_16:1.6
	MLWorks_20m1_1997_10_23:1.6
	MLWorks_11r1:1.5.8.1.1.1.1
	MLWorks_workspace_97:1.6.2
	MLWorks_dt_wizard:1.6.1
	MLWorks_11c0_1997_09_09:1.5.8.1.1.1
	MLWorks_10r3:1.5.8.1.3
	MLWorks_10r2_551:1.5.8.1.2
	MLWorks_11:1.5.8.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.5.8.1
	MLWorks_20m0_1997_06_20:1.6
	MLWorks_1_0_r2c2_1997_06_14:1.5.8.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.5.8.1
	MLWorks_1_0_r2c1_1997_05_12:1.5.8
	MLWorks_BugFix_1997_04_24:1.5
	MLWorks_1_0_r2_Win32_1997_04_11:1.5
	MLWorks_1_0_r2_Unix_1997_04_04:1.5
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.5.6.1.1
	MLWorks_gui_1996_12_18:1.5.7
	MLWorks_1_0_Win32_1996_12_17:1.5.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.5.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.5.4.1
	MLWorks_1_0_Irix_1996_11_28:1.5.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.5.5
	MLWorks_1_0_Unix_1996_11_14:1.5.4
	MLWorks_Open_Beta2_1996_10_11:1.5.3
	MLWorks_License_dev:1.5.2
	MLWorks_1_open_beta_1996_09_13:1.5.1
	MLWorks_Open_Beta_1996_08_22:1.5
	MLWorks_Beta_1996_07_02:1.5
	MLWorks_Beta_1996_06_07:1.5
	MLWorks_Beta_1996_06_06:1.5
	MLWorks_Beta_1996_06_05:1.5
	MLWorks_Beta_1996_06_03:1.5
	MLWorks_Beta_1996_05_31:1.5
	MLWorks_Beta_1996_05_30:1.5
	ML_beta_release_12/08/94:1.4
	ML_beta_release_03/08/94:1.4
	ML_revised_beta_release_25/05/94:1.4
	ML_final_beta_release_02/03/94:1.4
	mlworks-28-01-1994:1.4
	Release:1.4
	mlworks-beta-01-09-1993:1.4
	MLWorks-1-0-4-29/01/1993:1.4
	MLWorks-1-0-3-21/12/1992:1.4
	MLWorks-1-0-2-15/12/1992:1.4
	MLWorks-1-0-1-04/12/1992:1.4
	checkpoint_17_08_92:1.4;
locks; strict;
comment	@ * @;


1.7
date	98.02.19.16.24.34;	author mitchell;	state Exp;
branches
	1.7.1.1;
next	1.6;

1.6
date	97.05.21.17.20.52;	author jont;	state Exp;
branches
	1.6.1.1
	1.6.2.1;
next	1.5;

1.5
date	96.04.30.14.27.15;	author jont;	state Exp;
branches
	1.5.1.1
	1.5.2.1
	1.5.3.1
	1.5.4.1
	1.5.5.1
	1.5.6.1
	1.5.7.1
	1.5.8.1;
next	1.4;

1.4
date	92.06.16.11.28.19;	author davida;	state Exp;
branches
	1.4.1.1;
next	1.3;

1.3
date	92.02.11.16.48.39;	author richard;	state Exp;
branches;
next	1.2;

1.2
date	91.11.21.15.16.37;	author richard;	state Exp;
branches;
next	1.1;

1.1
date	91.11.18.16.07.53;	author richard;	state Exp;
branches;
next	;

1.4.1.1
date	92.06.16.11.28.19;	author jont;	state Exp;
branches;
next	;

1.5.1.1
date	96.09.13.11.43.26;	author hope;	state Exp;
branches;
next	;

1.5.2.1
date	96.10.07.16.36.38;	author hope;	state Exp;
branches;
next	;

1.5.3.1
date	96.10.17.11.55.39;	author hope;	state Exp;
branches;
next	;

1.5.4.1
date	96.11.14.13.24.00;	author hope;	state Exp;
branches
	1.5.4.1.1.1;
next	;

1.5.4.1.1.1
date	96.11.28.15.34.38;	author hope;	state Exp;
branches;
next	;

1.5.5.1
date	96.11.22.18.41.06;	author hope;	state Exp;
branches;
next	;

1.5.6.1
date	96.12.17.18.20.03;	author hope;	state Exp;
branches
	1.5.6.1.1.1;
next	;

1.5.6.1.1.1
date	97.02.24.12.14.29;	author hope;	state Exp;
branches;
next	;

1.5.7.1
date	96.12.18.10.15.33;	author hope;	state Exp;
branches;
next	;

1.5.8.1
date	97.05.12.10.53.21;	author hope;	state Exp;
branches
	1.5.8.1.1.1
	1.5.8.1.2.1
	1.5.8.1.3.1;
next	;

1.5.8.1.1.1
date	97.07.28.18.36.35;	author daveb;	state Exp;
branches
	1.5.8.1.1.1.1.1;
next	;

1.5.8.1.1.1.1.1
date	97.10.07.12.01.45;	author jkbrook;	state Exp;
branches;
next	;

1.5.8.1.2.1
date	97.09.08.17.28.48;	author daveb;	state Exp;
branches;
next	;

1.5.8.1.3.1
date	97.09.09.14.26.38;	author daveb;	state Exp;
branches;
next	;

1.6.1.1
date	97.09.10.19.44.58;	author brucem;	state Exp;
branches;
next	;

1.6.2.1
date	97.09.11.21.12.10;	author daveb;	state Exp;
branches;
next	;

1.7.1.1
date	99.04.01.18.10.13;	author daveb;	state Exp;
branches;
next	;


desc
@Diagnostic and debugging message output.  This is the functor.
@


1.7
log
@[Bug #30349]
Fix to avoid non-unit sequence warnings
@
text
@(*  ==== DIAGNOSTIC OUTPUT ====
 *
 *  Copyright (C) 1992 Harlequin Ltd.
 *
 *  Implementation
 *  --------------
 *  See signature for documentation of the intended use of this module.
 *
 *  The module is implemented using an internal int ref to store the current
 *  level, which is why it must be instanced on the module it produces
 *  diagnostics for.
 *
 *  Revision Log
 *  ------------
 *  $Log: _diagnostic.sml,v $
 * Revision 1.6  1997/05/21  17:20:52  jont
 * [Bug #30090]
 * Replace MLWorks.IO with TextIO where applicable
 *
 * Revision 1.5  1996/04/30  14:27:15  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
 * Revision 1.4  1992/06/16  11:28:19  davida
 * Added output_fn, internal outstream for messages.
 *
 *  Revision 1.3  1992/02/11  16:48:39  richard
 *  There is a new function, `output_text' which outputs
 *  using the Text type, for efficiency.  See utils/text.sml.
 *
 *  Revision 1.2  1991/11/21  15:16:37  richard
 *  Changed the application of map to an iterate function to prevent
 *  the generation of a useless list of units.
 *
 *  Revision 1.1  91/11/18  16:07:53  richard
 *  Initial revision
 *)

require "../basis/__text_io";
require "text";
require "diagnostic";


functor Diagnostic ( structure Text : TEXT ) : DIAGNOSTIC =

  struct

    structure Text = Text

    val output_stream = TextIO.stdOut

    val level = ref 0

    fun set new_level =
      level := new_level


    (* This function is duplicated in Lists, but it is a pain to *)
    (* parameterize the Diagnostic functor overmuch. *)

    fun iterate f [] = ()
      | iterate f list =
        let
          fun iterate' [] = ()
            | iterate' (x::xs) = (ignore(f x); iterate' xs)
        in
          iterate' list
        end

    fun output_text message_level message_function =
      if !level >= message_level then
        (Text.output (output_stream, 
		      message_function (!level - message_level));
         print"\n")
      else
        ()

    fun output' message_level message_function =
      let
      in
	if !level >= message_level then
	  (iterate 
           (fn string => TextIO.output (output_stream, string))
           (message_function (!level - message_level));
	   TextIO.output (output_stream, "\n"))
	else
	  ()
      end

    val output = output'

      

    fun output_fn message_level message_function =
      let
      in 
	if !level >= message_level then
	  message_function (!level - message_level,
			    output_stream)
	else
	  ()
      end

  end
@


1.7.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a15 4
 * Revision 1.7  1998/02/19  16:24:34  mitchell
 * [Bug #30349]
 * Fix to avoid non-unit sequence warnings
 *
@


1.6
log
@[Bug #30090]
Replace MLWorks.IO with TextIO where applicable
@
text
@d16 4
d67 1
a67 1
            | iterate' (x::xs) = (f x; iterate' xs)
@


1.6.2.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a15 4
 * Revision 1.6  1997/05/21  17:20:52  jont
 * [Bug #30090]
 * Replace MLWorks.IO with TextIO where applicable
 *
@


1.6.1.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a15 4
 * Revision 1.6  1997/05/21  17:20:52  jont
 * [Bug #30090]
 * Replace MLWorks.IO with TextIO where applicable
 *
@


1.5
log
@String functions explode, implode, chr and ord now only available from String
io functions and types
instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
now only available from MLWorks.IO
@
text
@d16 6
d37 1
a37 1

d48 1
a48 1
    val output_stream = MLWorks.IO.std_out
d72 1
a72 1
         MLWorks.IO.output (MLWorks.IO.std_out, "\n"))
d81 1
a81 1
           (fn string => MLWorks.IO.output (output_stream, string))
d83 1
a83 1
	   MLWorks.IO.output (output_stream, "\n"))
@


1.5.8.1
log
@branched from 1.5
@
text
@a15 6
 * Revision 1.5  1996/04/30  14:27:15  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
@


1.5.8.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a15 3
 * Revision 1.5.8.1  1997/05/12  10:53:21  hope
 * branched from 1.5
 *
@


1.5.8.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a15 3
 * Revision 1.5.8.1  1997/05/12  10:53:21  hope
 * branched from 1.5
 *
@


1.5.8.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a15 3
 * Revision 1.5.8.1  1997/05/12  10:53:21  hope
 * branched from 1.5
 *
@


1.5.8.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a15 3
 * Revision 1.5.8.1.1.1  1997/07/28  18:36:35  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.5.7.1
log
@branched from 1.5
@
text
@a15 6
 * Revision 1.5  1996/04/30  14:27:15  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
@


1.5.6.1
log
@branched from 1.5
@
text
@a15 6
 * Revision 1.5  1996/04/30  14:27:15  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
@


1.5.6.1.1.1
log
@branched from 1.5.6.1
@
text
@a15 3
 * Revision 1.5.6.1  1996/12/17  18:20:03  hope
 * branched from 1.5
 *
@


1.5.5.1
log
@branched from 1.5
@
text
@a15 6
 * Revision 1.5  1996/04/30  14:27:15  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
@


1.5.4.1
log
@branched from 1.5
@
text
@a15 6
 * Revision 1.5  1996/04/30  14:27:15  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
@


1.5.4.1.1.1
log
@branched from 1.5.4.1
@
text
@a15 3
 * Revision 1.5.4.1  1996/11/14  13:24:00  hope
 * branched from 1.5
 *
@


1.5.3.1
log
@branched from 1.5
@
text
@a15 6
 * Revision 1.5  1996/04/30  14:27:15  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
@


1.5.2.1
log
@branched from 1.5
@
text
@a15 6
 * Revision 1.5  1996/04/30  14:27:15  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
@


1.5.1.1
log
@branched from 1.5
@
text
@a15 6
 * Revision 1.5  1996/04/30  14:27:15  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
@


1.4
log
@Added output_fn, internal outstream for messages.
@
text
@d16 3
d42 1
a42 1
    val output_stream = std_out
d66 1
a66 1
         output (std_out, "\n"))
d75 1
a75 1
           (fn string => output (output_stream, string))
d77 1
a77 1
	   output (output_stream, "\n"))
@


1.4.1.1
log
@Fork for bug fixing
@
text
@a15 3
 *  Revision 1.4  1992/06/16  11:28:19  davida
 *  Added output_fn, internal outstream for messages.
 *
@


1.3
log
@The diagnostic output function now writes directly to the std_err
stream.  There ia also a new function, `output_text' which outputs
using the Text type, for efficiency.  See utils/text.sml.
@
text
@d15 5
a19 1
 *  $Log$
d39 2
d61 2
a62 1
        (Text.output (std_out, message_function (!level - message_level));
d72 1
a72 1
           (fn string => output (std_out, string))
d74 1
a74 1
	   output (std_out, "\n"))
d80 12
@


1.2
log
@Changed the application of map to an iterate function to prevent
the generation of a useless list of units.
@
text
@d3 4
d10 12
a21 1
 *  level.  It uses the Print module to do the output.
a23 3
(* $Log:	_diagnostic.sml,v $
Revision 1.1  91/11/18  16:07:53  richard
Initial revision
d25 1
a25 4
Copyright (C) 1991 Harlequin Ltd.
*)

require "print";
a27 1
functor Diagnostic (
d29 1
a29 1
  structure Print	: PRINT
a30 2
) : DIAGNOSTIC =

d33 2
d40 21
a60 1
    fun output message_level message_function =
a61 2
	fun iterate (f, []) = ()
	  | iterate (f, x::xs) = (f x; iterate (f, xs))
d64 4
a67 2
	  (iterate (Print.print, message_function (!level - message_level));
	   Print.print "\n")
d71 2
@


1.1
log
@Initial revision
@
text
@d9 4
a12 1
(* $Log$
d33 10
a42 5
      if !level >= message_level then
	(map Print.print (message_function (!level - message_level));
	 Print.print "\n")
      else
	()
@
