head	1.4;
access;
symbols
	MLW_daveb_inline_1_4_99:1.4.11
	MLWorks_21c0_1999_03_25:1.4
	MLWorks_20c1_1998_08_20:1.4
	MLWorks_20c0_1998_08_04:1.4
	MLWorks_20b2c2_1998_06_19:1.4
	MLWorks_20b2_Windows_1998_06_12:1.4
	MLWorks_20b1c1_1998_05_07:1.4
	MLWorks_20b0_1998_04_07:1.4
	MLWorks_20b0_1998_03_20:1.4
	MLWorks_20m2_1998_02_16:1.4
	MLWorks_20m1_1997_10_23:1.4
	MLWorks_11r1:1.4.8.1.1.1.1
	MLWorks_workspace_97:1.4.10
	MLWorks_dt_wizard:1.4.9
	MLWorks_11c0_1997_09_09:1.4.8.1.1.1
	MLWorks_10r3:1.4.8.1.3
	MLWorks_10r2_551:1.4.8.1.2
	MLWorks_11:1.4.8.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.4.8.1
	MLWorks_20m0_1997_06_20:1.4
	MLWorks_1_0_r2c2_1997_06_14:1.4.8.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.4.8.1
	MLWorks_1_0_r2c1_1997_05_12:1.4.8
	MLWorks_BugFix_1997_04_24:1.4
	MLWorks_1_0_r2_Win32_1997_04_11:1.4
	MLWorks_1_0_r2_Unix_1997_04_04:1.4
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.4.6.1.1
	MLWorks_gui_1996_12_18:1.4.7
	MLWorks_1_0_Win32_1996_12_17:1.4.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.4.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.4.4.1
	MLWorks_1_0_Irix_1996_11_28:1.4.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.4.5
	MLWorks_1_0_Unix_1996_11_14:1.4.4
	MLWorks_Open_Beta2_1996_10_11:1.4.3
	MLWorks_License_dev:1.4.2
	MLWorks_1_open_beta_1996_09_13:1.4.1
	MLWorks_Open_Beta_1996_08_22:1.4
	MLWorks_Beta_1996_07_02:1.4
	MLWorks_Beta_1996_06_07:1.4
	MLWorks_Beta_1996_06_06:1.4
	MLWorks_Beta_1996_06_05:1.4
	MLWorks_Beta_1996_06_03:1.4
	MLWorks_Beta_1996_05_31:1.4
	MLWorks_Beta_1996_05_30:1.4;
locks; strict;
comment	@ * @;


1.4
date	96.04.29.15.09.55;	author matthew;	state Exp;
branches
	1.4.1.1
	1.4.2.1
	1.4.3.1
	1.4.4.1
	1.4.5.1
	1.4.6.1
	1.4.7.1
	1.4.8.1
	1.4.9.1
	1.4.10.1
	1.4.11.1;
next	1.3;

1.3
date	95.09.23.15.02.55;	author brianm;	state Exp;
branches;
next	1.2;

1.2
date	95.09.23.12.22.57;	author brianm;	state Exp;
branches;
next	1.1;

1.1
date	95.09.22.14.22.51;	author brianm;	state Exp;
branches;
next	;

1.4.1.1
date	96.09.13.11.43.18;	author hope;	state Exp;
branches;
next	;

1.4.2.1
date	96.10.07.16.36.30;	author hope;	state Exp;
branches;
next	;

1.4.3.1
date	96.10.17.11.55.31;	author hope;	state Exp;
branches;
next	;

1.4.4.1
date	96.11.14.13.23.53;	author hope;	state Exp;
branches
	1.4.4.1.1.1;
next	;

1.4.4.1.1.1
date	96.11.28.15.34.29;	author hope;	state Exp;
branches;
next	;

1.4.5.1
date	96.11.22.18.40.57;	author hope;	state Exp;
branches;
next	;

1.4.6.1
date	96.12.17.18.19.54;	author hope;	state Exp;
branches
	1.4.6.1.1.1;
next	;

1.4.6.1.1.1
date	97.02.24.12.14.21;	author hope;	state Exp;
branches;
next	;

1.4.7.1
date	96.12.18.10.15.25;	author hope;	state Exp;
branches;
next	;

1.4.8.1
date	97.05.12.10.53.42;	author hope;	state Exp;
branches
	1.4.8.1.1.1
	1.4.8.1.2.1
	1.4.8.1.3.1;
next	;

1.4.8.1.1.1
date	97.07.28.18.36.30;	author daveb;	state Exp;
branches
	1.4.8.1.1.1.1.1;
next	;

1.4.8.1.1.1.1.1
date	97.10.07.12.01.41;	author jkbrook;	state Exp;
branches;
next	;

1.4.8.1.2.1
date	97.09.08.17.28.43;	author daveb;	state Exp;
branches;
next	;

1.4.8.1.3.1
date	97.09.09.14.26.31;	author daveb;	state Exp;
branches;
next	;

1.4.9.1
date	97.09.10.19.44.47;	author brucem;	state Exp;
branches;
next	;

1.4.10.1
date	97.09.11.21.12.01;	author daveb;	state Exp;
branches;
next	;

1.4.11.1
date	99.04.01.18.10.12;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
New file.
@


1.4
log
@Removing MLWorks.Integer
@
text
@(*  ==== UTILITIES : LISP ====
 *
 *  Copyright (C) 1995 Harlequin Ltd.
 *
 *  Description
 *  -----------
 *  Some ideas from Common Lisp are given ML-like renderings here.
 *  (joint work by Brian & Matthew)
 * 
 *  - Unwind-protect is a way of ensuring that some `clean-up' code always
 *    gets done, even if an exception is raised by the body which would
 *    otherwise cause early termination.
 * 
 *  - Lisp like special variables allow for scoped updates to reference
 *    like objects.  Exiting their scope always _undoes_ the latest binding,
 *    even by exception exit.  In addition, they allow a type-safe form of
 *    _dynamic_ binding - which can (on occasion) do some useful things.
 *
 *    Since they are always initialised and scoped, you can never
 *    get out of sync due to exceptions being raised and then caught internally.
 *    A brief demo is given following the signature.
 * 
 *  Note that the primed versions of unwind_protect and letv are slightly more
 *  general versions that take an additional argument which initiates action 
 *  and is passed to the action functions. 
 *
 *  Revision Log
 *  ------------
 *  $Log: lisp.sml,v $
 * Revision 1.3  1995/09/23  15:02:55  brianm
 * Adding unwind_protect' and letv' ...
 *
 *  Revision 1.2  1995/09/23  12:22:57  brianm
 *  Minor change to type of letv.
 *
 *  Revision 1.1  1995/09/22  14:22:51  brianm
 *  new unit
 *  New file.
 *
 *
 *)

signature LISP_UTILS =
   sig


     (* Unwind Protect :

           unwind_protect  body_fn coda_fn
           unwind_protect' body_fn coda_fn arg
      *)

     val unwind_protect  : (unit -> 'a) -> (unit -> 'b) -> 'a
     val unwind_protect' : ('a -> 'b) -> ('a -> 'c) -> ('a -> 'b)

     (* Note:  unwind_protect b_fn c_fn  =  unwind_protect' b_fn c_fn ()  *)

     (* Special Variables *)

     type 'a svref   (* Special Variable refs *)

     val svref : '_a -> '_a svref

     val letv  : ('_a svref * '_a) list -> (unit -> 'b) -> 'b
     val letv' : ('_a svref * '_a) list -> ('c -> 'b) -> 'c  -> 'b

     (* Note :  letv svl b_fn  =  letv' svl b_fn ()  *)

     val setv : '_a svref -> '_a -> unit

     val !! : '_a svref -> '_a

   end


 
(*  Here is a brief demo:

   fun print_int(i) =
       (
        output(std_out,Int.toString(i));
        output(std_out,"\n")
       )

   val my_sv1 = svref 23
   val my_sv2 = svref 42
   val my_sv3 = svref 27
  
   fun foo(sv) =
     ( setv sv (!!my_sv1 + !!my_sv2);
       print_int(!!sv)
     )

   exception MyException

   (letv [(my_sv1 , 2), (my_sv2 , 3)]
      (fn _ => (
          setv my_sv1 4;
	  foo (my_sv3);
	  (letv [(my_sv3, 6)]
	      (fn _ => (
		  setv my_sv2 (!!my_sv3);
		  foo (my_sv3)
	      ))
	  );
	  print_int (!!my_sv2);
	  raise MyException      
      ))
   ) handle _ => 0;
   
   !!my_sv1;
   !!my_sv2;
   !!my_sv3;

 *   Running the above gives the following results:
 * 
 *        val print_int : int -> unit = fn
 *        val my_sv1 : int svref = _
 *        val my_sv2 : int svref = _
 *        val my_sv3 : int svref = _
 *        val foo : int svref -> unit = fn
 *        exception MyException
 *        7                       -- first application of foo     
 *        10                      -- second application of foo    
 *        6                       -- from the explicit print_int  
 *        val it : int = 0        -- result of the outer letv, via the handle 
 * 
 *        val it : int = 23       -- current value of my_sv1 
 *        val it : int = 42       -- current value of my_sv2 
 *        val it : int = 7        -- current value of my_sv3 
 *)
@


1.4.11.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a29 3
 * Revision 1.4  1996/04/29  15:09:55  matthew
 * Removing MLWorks.Integer
 *
@


1.4.10.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a29 3
 * Revision 1.4  1996/04/29  15:09:55  matthew
 * Removing MLWorks.Integer
 *
@


1.4.9.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a29 3
 * Revision 1.4  1996/04/29  15:09:55  matthew
 * Removing MLWorks.Integer
 *
@


1.4.8.1
log
@branched from 1.4
@
text
@a29 3
 * Revision 1.4  1996/04/29  15:09:55  matthew
 * Removing MLWorks.Integer
 *
@


1.4.8.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a29 3
 * Revision 1.4.8.1  1997/05/12  10:53:42  hope
 * branched from 1.4
 *
@


1.4.8.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a29 3
 * Revision 1.4.8.1  1997/05/12  10:53:42  hope
 * branched from 1.4
 *
@


1.4.8.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a29 3
 * Revision 1.4.8.1  1997/05/12  10:53:42  hope
 * branched from 1.4
 *
@


1.4.8.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a29 3
 * Revision 1.4.8.1.1.1  1997/07/28  18:36:30  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.4.7.1
log
@branched from 1.4
@
text
@a29 3
 * Revision 1.4  1996/04/29  15:09:55  matthew
 * Removing MLWorks.Integer
 *
@


1.4.6.1
log
@branched from 1.4
@
text
@a29 3
 * Revision 1.4  1996/04/29  15:09:55  matthew
 * Removing MLWorks.Integer
 *
@


1.4.6.1.1.1
log
@branched from 1.4.6.1
@
text
@a29 3
 * Revision 1.4.6.1  1996/12/17  18:19:54  hope
 * branched from 1.4
 *
@


1.4.5.1
log
@branched from 1.4
@
text
@a29 3
 * Revision 1.4  1996/04/29  15:09:55  matthew
 * Removing MLWorks.Integer
 *
@


1.4.4.1
log
@branched from 1.4
@
text
@a29 3
 * Revision 1.4  1996/04/29  15:09:55  matthew
 * Removing MLWorks.Integer
 *
@


1.4.4.1.1.1
log
@branched from 1.4.4.1
@
text
@a29 3
 * Revision 1.4.4.1  1996/11/14  13:23:53  hope
 * branched from 1.4
 *
@


1.4.3.1
log
@branched from 1.4
@
text
@a29 3
 * Revision 1.4  1996/04/29  15:09:55  matthew
 * Removing MLWorks.Integer
 *
@


1.4.2.1
log
@branched from 1.4
@
text
@a29 3
 * Revision 1.4  1996/04/29  15:09:55  matthew
 * Removing MLWorks.Integer
 *
@


1.4.1.1
log
@branched from 1.4
@
text
@a29 3
 * Revision 1.4  1996/04/29  15:09:55  matthew
 * Removing MLWorks.Integer
 *
@


1.3
log
@Adding unwind_protect' and letv' ...
@
text
@d30 3
d81 1
a81 1
        output(std_out,MLWorks.Integer.makestring(i));
@


1.2
log
@Minor change to type of letv.
@
text
@d22 4
d30 3
d44 5
a48 1
     (* Unwind Protect : unwind_protect body_fn coda_fn arg *)
d50 2
a51 1
     val unwind_protect : ('a -> 'b) -> ('a -> 'c) -> ('a -> 'b)
d53 1
d61 4
a64 1
     val letv : ('_a svref * '_a) list -> (unit -> 'b) -> 'b
@


1.1
log
@new unit
New file.
@
text
@d25 5
a29 1
 *  $Log$
d48 1
a48 1
     val letv : ('_a svref * '_a) list -> ('c -> 'b) -> ('c -> 'b)
d78 1
a78 2
      (fn _ =>
         (
d82 1
a82 2
	      (fn _ =>
		 (
d85 1
a85 3
		 )
	      )
	      ()
d89 1
a89 3
         )
      )
      ()
@
