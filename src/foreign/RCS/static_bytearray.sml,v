head	1.7;
access;
symbols
	MLW_daveb_inline_1_4_99:1.7.8
	MLWorks_21c0_1999_03_25:1.7
	MLWorks_20c1_1998_08_20:1.7
	MLWorks_20c0_1998_08_04:1.7
	MLWorks_20b2c2_1998_06_19:1.7
	MLWorks_20b2_Windows_1998_06_12:1.7
	MLWorks_20b1c1_1998_05_07:1.7
	MLWorks_20b0_1998_04_07:1.7
	MLWorks_20b0_1998_03_20:1.7
	MLWorks_20m2_1998_02_16:1.7
	MLWorks_20m1_1997_10_23:1.7
	MLWorks_11r1:1.7.5.1.1.1.1
	MLWorks_workspace_97:1.7.7
	MLWorks_dt_wizard:1.7.6
	MLWorks_11c0_1997_09_09:1.7.5.1.1.1
	MLWorks_10r3:1.7.5.1.3
	MLWorks_10r2_551:1.7.5.1.2
	MLWorks_11:1.7.5.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.7.5.1
	MLWorks_20m0_1997_06_20:1.7
	MLWorks_1_0_r2c2_1997_06_14:1.7.5.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.7.5.1
	MLWorks_1_0_r2c1_1997_05_12:1.7.5
	MLWorks_BugFix_1997_04_24:1.7
	MLWorks_1_0_r2_Win32_1997_04_11:1.7
	MLWorks_1_0_r2_Unix_1997_04_04:1.7
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.7.3.1.1
	MLWorks_gui_1996_12_18:1.7.4
	MLWorks_1_0_Win32_1996_12_17:1.7.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.7.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.7.1.1
	MLWorks_1_0_Irix_1996_11_28:1.7.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.7.2
	MLWorks_1_0_Unix_1996_11_14:1.7.1
	MLWorks_Open_Beta2_1996_10_11:1.6.2
	MLWorks_License_dev:1.6.1
	MLWorks_1_open_beta_1996_09_13:1.5.1
	MLWorks_Open_Beta_1996_08_22:1.5
	MLWorks_Beta_1996_07_02:1.5
	MLWorks_Beta_1996_06_07:1.5
	MLWorks_Beta_1996_06_06:1.5
	MLWorks_Beta_1996_06_05:1.5
	MLWorks_Beta_1996_06_03:1.5
	MLWorks_Beta_1996_05_31:1.5
	MLWorks_Beta_1996_05_30:1.5;
locks; strict;
comment	@ * @;


1.7
date	96.09.20.15.41.46;	author io;	state Exp;
branches
	1.7.1.1
	1.7.2.1
	1.7.3.1
	1.7.4.1
	1.7.5.1
	1.7.6.1
	1.7.7.1
	1.7.8.1;
next	1.6;

1.6
date	96.09.20.14.49.02;	author io;	state Exp;
branches
	1.6.1.1
	1.6.2.1;
next	1.5;

1.5
date	96.04.18.17.02.14;	author jont;	state Exp;
branches
	1.5.1.1;
next	1.4;

1.4
date	96.03.28.13.32.49;	author matthew;	state Exp;
branches;
next	1.3;

1.3
date	95.04.20.01.12.47;	author brianm;	state Exp;
branches;
next	1.2;

1.2
date	95.03.24.15.12.12;	author brianm;	state Exp;
branches;
next	1.1;

1.1
date	95.03.17.16.07.37;	author brianm;	state Exp;
branches;
next	;

1.5.1.1
date	96.09.13.11.11.55;	author hope;	state Exp;
branches;
next	;

1.6.1.1
date	96.10.07.16.02.38;	author hope;	state Exp;
branches;
next	;

1.6.2.1
date	96.10.17.11.20.53;	author hope;	state Exp;
branches;
next	;

1.7.1.1
date	96.11.14.12.44.36;	author hope;	state Exp;
branches
	1.7.1.1.1.1;
next	;

1.7.1.1.1.1
date	96.11.28.14.56.33;	author hope;	state Exp;
branches;
next	;

1.7.2.1
date	96.11.22.18.05.00;	author hope;	state Exp;
branches;
next	;

1.7.3.1
date	96.12.17.17.43.56;	author hope;	state Exp;
branches
	1.7.3.1.1.1;
next	;

1.7.3.1.1.1
date	97.02.24.11.33.15;	author hope;	state Exp;
branches;
next	;

1.7.4.1
date	96.12.18.09.37.55;	author hope;	state Exp;
branches;
next	;

1.7.5.1
date	97.05.12.10.30.12;	author hope;	state Exp;
branches
	1.7.5.1.1.1
	1.7.5.1.2.1
	1.7.5.1.3.1;
next	;

1.7.5.1.1.1
date	97.07.28.18.16.38;	author daveb;	state Exp;
branches
	1.7.5.1.1.1.1.1;
next	;

1.7.5.1.1.1.1.1
date	97.10.07.11.41.30;	author jkbrook;	state Exp;
branches;
next	;

1.7.5.1.2.1
date	97.09.08.17.10.13;	author daveb;	state Exp;
branches;
next	;

1.7.5.1.3.1
date	97.09.09.14.05.42;	author daveb;	state Exp;
branches;
next	;

1.7.6.1
date	97.09.10.19.20.07;	author brucem;	state Exp;
branches;
next	;

1.7.7.1
date	97.09.11.20.51.20;	author daveb;	state Exp;
branches;
next	;

1.7.8.1
date	99.04.01.17.55.03;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
New file.
@


1.7
log
@current naming conventions
@
text
@(*  ==== STATIC BYTEARRAYS ====
 *
 *  Copyright (C) 1995 Harlequin Ltd.
 *
 *  Description
 *  -----------
 *  Static bytearrays are static versions of bytearray values - that
 *  is, once created, they remain in a fixed position within memory
 *  until they are no longer referenced - at which point they can be
 *  GC'd (see rts/src/alloc.[ch] and rts/src/bytearrays.c)
 *
 *  Otherwise, they have many of the properties of standard bytearrays,
 *  plus having a well-defined base address.
 *  
 *
 *  Revision Log
 *  ------------
 *  $Log: static_bytearray.sml,v $
 * Revision 1.6  1996/09/20  14:49:02  io
 * [Bug #1603]
 * convert ByteArray to Internal.ByteArray
 *
 * Revision 1.5  1996/04/18  17:02:14  jont
 * initbasis becomes basis
 *
 * Revision 1.4  1996/03/28  13:32:49  matthew
 * Sharing constraints
 *
 * Revision 1.3  1995/04/20  01:12:47  brianm
 * General updating to reach prototype level for ML FI.
 *
 * Revision 1.2  1995/03/24  15:12:12  brianm
 * Added address_of operator to static_bytearrays and also
 * simplified implementation (mostly casts now).
 *
 * Revision 1.1  1995/03/17  16:07:37  brianm
 * new unit
 * New file.
 *
 *)

require "../basis/__word8";
require "../basis/__word32";



signature STATIC_BYTEARRAY =
  sig

    eqtype bytearray = MLWorks.Internal.ByteArray.bytearray

    eqtype address = Word32.word

    eqtype word8 = Word8.word

    eqtype static_bytearray

    val array           : int * word8 -> static_bytearray
    val length          : static_bytearray -> int
    val update          : static_bytearray * int * word8 -> unit
    val sub             : static_bytearray * int -> word8
    val array_of_list   : word8 list -> static_bytearray
    val tabulate        : int * (int -> word8) -> static_bytearray

    val to_bytearray    : static_bytearray -> bytearray
        (* This is a pure coercion - in particular, _no_ copy is made. *)

    val address_of      : static_bytearray * int -> address

    val from_list       : word8 list -> static_bytearray
    val to_list         : static_bytearray -> word8 list

    val from_string     : string -> static_bytearray
    val to_string       : static_bytearray -> string

    val alloc_array     : int -> static_bytearray
        (* This allocates *uninitialised* static_bytearray values *)
  end;
@


1.7.8.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a18 3
 * Revision 1.7  1996/09/20  15:41:46  io
 * current naming conventions
 *
@


1.7.7.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a18 3
 * Revision 1.7  1996/09/20  15:41:46  io
 * current naming conventions
 *
@


1.7.6.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a18 3
 * Revision 1.7  1996/09/20  15:41:46  io
 * current naming conventions
 *
@


1.7.5.1
log
@branched from 1.7
@
text
@a18 3
 * Revision 1.7  1996/09/20  15:41:46  io
 * current naming conventions
 *
@


1.7.5.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a18 3
 * Revision 1.7.5.1  1997/05/12  10:30:12  hope
 * branched from 1.7
 *
@


1.7.5.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a18 3
 * Revision 1.7.5.1  1997/05/12  10:30:12  hope
 * branched from 1.7
 *
@


1.7.5.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a18 3
 * Revision 1.7.5.1  1997/05/12  10:30:12  hope
 * branched from 1.7
 *
@


1.7.5.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a18 3
 * Revision 1.7.5.1.1.1  1997/07/28  18:16:38  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.7.4.1
log
@branched from 1.7
@
text
@a18 3
 * Revision 1.7  1996/09/20  15:41:46  io
 * current naming conventions
 *
@


1.7.3.1
log
@branched from 1.7
@
text
@a18 3
 * Revision 1.7  1996/09/20  15:41:46  io
 * current naming conventions
 *
@


1.7.3.1.1.1
log
@branched from 1.7.3.1
@
text
@a18 3
 * Revision 1.7.3.1  1996/12/17  17:43:56  hope
 * branched from 1.7
 *
@


1.7.2.1
log
@branched from 1.7
@
text
@a18 3
 * Revision 1.7  1996/09/20  15:41:46  io
 * current naming conventions
 *
@


1.7.1.1
log
@branched from 1.7
@
text
@a18 3
 * Revision 1.7  1996/09/20  15:41:46  io
 * current naming conventions
 *
@


1.7.1.1.1.1
log
@branched from 1.7.1.1
@
text
@a18 3
 * Revision 1.7.1.1  1996/11/14  12:44:36  hope
 * branched from 1.7
 *
@


1.6
log
@[Bug #1603]
convert ByteArray to Internal.ByteArray
@
text
@d19 4
d62 1
a62 1
    val arrayOfList     : word8 list -> static_bytearray
@


1.6.2.1
log
@branched from 1.6
@
text
@a18 4
 * Revision 1.6  1996/09/20  14:49:02  io
 * [Bug #1603]
 * convert ByteArray to Internal.ByteArray
 *
@


1.6.1.1
log
@branched from 1.6
@
text
@a18 4
 * Revision 1.6  1996/09/20  14:49:02  io
 * [Bug #1603]
 * convert ByteArray to Internal.ByteArray
 *
@


1.5
log
@initbasis becomes basis
@
text
@d19 3
d46 1
a46 1
    eqtype bytearray = MLWorks.ByteArray.bytearray
@


1.5.1.1
log
@branched from 1.5
@
text
@a18 3
 * Revision 1.5  1996/04/18  17:02:14  jont
 * initbasis becomes basis
 *
@


1.4
log
@Sharing constraints
@
text
@d19 3
d25 7
a31 8
# Revision 1.2  1995/03/24  15:12:12  brianm
# Added address_of operator to static_bytearrays and also
# simplified implementation (mostly casts now).
#
# Revision 1.1  1995/03/17  16:07:37  brianm
# new unit
# New file.
#
d35 2
a36 2
require "../initbasis/__word8";
require "../initbasis/__word32";
@


1.3
log
@General updating to reach prototype level for ML FI.
@
text
@d19 3
d41 1
a41 2
    eqtype bytearray
      sharing type bytearray = MLWorks.ByteArray.bytearray
d43 1
a43 2
    eqtype address
      sharing type address = Word32.word
d45 1
a45 2
    eqtype word8
      sharing type word8 = Word8.word
@


1.2
log
@Added address_of operator to static_bytearrays and also
simplified implementation (mostly casts now).
@
text
@d19 4
d30 1
d33 2
d39 1
a39 1
      sharing type bytearray = MLWorks.ByteArray.bytearray;
d45 1
d49 6
a54 6
    val array		: (int * word8) -> static_bytearray
    val length		: static_bytearray -> int
    val update		: static_bytearray * int * word8 -> unit
    val sub		: static_bytearray * int -> word8
    val arrayOfList	: word8 list -> static_bytearray
    val tabulate        : (int * (int -> word8)) -> static_bytearray
d59 1
a59 1
    val address_of      : (static_bytearray * int) -> address
d61 2
a62 2
    val from_list	: word8 list -> static_bytearray
    val to_list		: static_bytearray -> word8 list
d64 2
a65 2
    val from_string	: string -> static_bytearray
    val to_string	: static_bytearray -> string
d67 2
@


1.1
log
@new unit
New file.
@
text
@d7 5
a11 2
 *  Static bytearrays are static versions of bytearray values - that is,
 *  once created, they remain in a fixed position within memory.
d18 5
a22 1
 *  $Log$
d26 1
d32 6
a37 1
      sharing type bytearray = MLWorks.ByteArray.bytearray
d41 1
a41 1
    val array		: (int * int) -> static_bytearray
d43 4
a46 3
    val update		: static_bytearray * int * int -> unit
    val sub		: static_bytearray * int -> int
    val arrayoflist	: int list -> static_bytearray
d49 6
a55 2
    val from_list	: int list -> static_bytearray
    val to_list		: static_bytearray -> int list
@
