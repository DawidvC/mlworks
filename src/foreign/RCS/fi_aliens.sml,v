head	1.3;
access;
symbols
	MLWorks_Beta_1996_06_07:1.3
	MLWorks_Beta_1996_06_06:1.3
	MLWorks_Beta_1996_06_05:1.3
	MLWorks_Beta_1996_06_03:1.3
	MLWorks_Beta_1996_05_31:1.3
	MLWorks_Beta_1996_05_30:1.3;
locks; strict;
comment	@ * @;


1.3
date	96.03.28.12.57.38;	author matthew;	state Exp;
branches;
next	1.2;

1.2
date	95.09.07.22.43.43;	author brianm;	state Exp;
branches;
next	1.1;

1.1
date	95.04.25.11.49.16;	author brianm;	state Exp;
branches;
next	;


desc
@new unit
New file.
@


1.3
log
@New sharing syntax etc.
@
text
@(*  ==== FOREIGN INTERFACE : ALIENS INTERFACE ====
 *
 *  Copyright (C) 1995 Harlequin Ltd.
 *
 *  Description
 *  -----------
 *  The general part of the FI is implemented in three layers:
 *  
 *     - FOREIGN_CORE
 *       provides basic OS-dependent `dynamic linking' functionality
 *       via the runtime.
 *  
 *     - FOREIGN_ALIENS
 *       provides an intermediate level of (general) foreign interface
 *       that facilitates renewal/reset of foreign_objects and values.  This
 *       allows lazy semantics for recovering objects on save/restore
 *       boundaries.
 *  
 *     - FOREIGN_CODESET & FOREIGN_CODEINFO
 *       provides users level access to the General part of the FI.
 *   
 *  
 *
 *  Revision Log
 *  ------------
 *  $Log: fi_aliens.sml,v $
 * Revision 1.2  1995/09/07  22:43:43  brianm
 * Modifications for reorganisation & documentation.
 *
 *  Revision 1.1  1995/04/25  11:49:16  brianm
 *  new unit
 *  New file.
 *
 *
 *)

require "fi_types";

signature FOREIGN_ALIENS =
   sig

     structure FITypes : FOREIGN_TYPES

     type address = FITypes.address
     type name = FITypes.name  
     type filename = FITypes.filename

      type ('a,'b)Map

      type foreign_module
      type foreign_item

      type info

      val get_module_later : filename -> foreign_module
      val get_item_later   : (foreign_module * name) -> foreign_item

      val get_module_now : filename -> foreign_module
      val get_item_now   : (foreign_module * name) -> foreign_item

      val get_item_names : foreign_module -> name list
      val get_item_info  : foreign_module -> (name, info) Map


    (* ACCESSING (individual) *)

      val ensure_module  : foreign_module -> foreign_module
      val ensure_item    : foreign_item -> foreign_item
          (* These ensure that the entities are present *)

      val reset_module : foreign_module -> foreign_module
      val reset_item   : foreign_item -> foreign_item
          (* These reset the state of entities *)

      val refresh_module  : foreign_module -> foreign_module
      val refresh_item    : foreign_item -> foreign_item
          (* These refresh the entities, even if already present *)

    (* ACCESSING (collective) *)

      val ensure_alien_modules : unit -> unit
      val ensure_alien_items   : unit -> unit
      val ensure_aliens        : unit -> unit
          (* Ensures that all objects and associated values are available.
             This preserves any existing entities that are present.
           *)

      val reset_alien_modules : unit -> unit
      val reset_alien_items   : unit -> unit
      val reset_aliens        : unit -> unit
          (* Reset all objects and associated values - so that they are
             obtained afresh when they are next requested - and not before.
             This allows lazy semantics for establishing value associations.
           *)

      val refresh_alien_modules : unit -> unit
      val refresh_alien_items   : unit -> unit
      val refresh_aliens        : unit -> unit
          (* Refresh objects and associated values immeadiately.
             This reobtains all entities - even if they are
             already present.
           *)


   (* FOREIGN FUNCTION CALLING *)

      val call_alien_code : foreign_item * address * int * address -> unit

   end;
@


1.2
log
@Modifications for reorganisation & documentation.
@
text
@d27 3
d44 3
a46 8
     type address
     type name
     type filename

       sharing type address    = FITypes.address
       sharing type name       = FITypes.name  
       sharing type filename   = FITypes.filename

@


1.1
log
@new unit
New file.
@
text
@d19 1
a19 1
 *     - FOREIGN_STRUCTURE & FOREIGN_SIGNATURE
d26 5
a30 1
 *  $Log$
@
