head	1.2;
access;
symbols
	MLW_daveb_inline_1_4_99:1.2.8
	MLWorks_21c0_1999_03_25:1.2
	MLWorks_20c1_1998_08_20:1.2
	MLWorks_20c0_1998_08_04:1.2
	MLWorks_20b2c2_1998_06_19:1.2
	MLWorks_20b2_Windows_1998_06_12:1.2
	MLWorks_20b1c1_1998_05_07:1.2
	MLWorks_20b0_1998_04_07:1.2
	MLWorks_20b0_1998_03_20:1.2
	MLWorks_20m2_1998_02_16:1.2
	MLWorks_20m1_1997_10_23:1.2
	MLWorks_workspace_97:1.2.7
	MLWorks_dt_wizard:1.2.6
	MLWorks_10r3:1.2.5.1.3
	MLWorks_10r2_551:1.2.5.1.2
	MLWorks_11:1.2.5.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.2.5.1
	MLWorks_20m0_1997_06_20:1.2
	MLWorks_1_0_r2c2_1997_06_14:1.2.5.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.2.5.1
	MLWorks_1_0_r2c1_1997_05_12:1.2.5
	MLWorks_BugFix_1997_04_24:1.2
	MLWorks_1_0_r2_Win32_1997_04_11:1.2
	MLWorks_1_0_r2_Unix_1997_04_04:1.2
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.2.3.1.1
	MLWorks_gui_1996_12_18:1.2.4
	MLWorks_1_0_Win32_1996_12_17:1.2.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.2.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.2.1.1
	MLWorks_1_0_Irix_1996_11_28:1.2.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.2.2
	MLWorks_1_0_Unix_1996_11_14:1.2.1
	MLWorks_Open_Beta2_1996_10_11:1.1.3
	MLWorks_License_dev:1.1.2
	MLWorks_1_open_beta_1996_09_13:1.1.1
	MLWorks_Open_Beta_1996_08_22:1.1
	MLWorks_Beta_1996_07_02:1.1
	MLWorks_Beta_1996_06_07:1.1
	MLWorks_Beta_1996_06_06:1.1
	MLWorks_Beta_1996_06_05:1.1
	MLWorks_Beta_1996_06_03:1.1
	MLWorks_Beta_1996_05_31:1.1
	MLWorks_Beta_1996_05_30:1.1;
locks; strict;
comment	@ *  @;


1.2
date	96.10.25.10.57.20;	author io;	state Exp;
branches
	1.2.1.1
	1.2.2.1
	1.2.3.1
	1.2.4.1
	1.2.5.1
	1.2.6.1
	1.2.7.1
	1.2.8.1;
next	1.1;

1.1
date	96.05.24.01.19.16;	author brianm;	state Exp;
branches
	1.1.1.1
	1.1.2.1
	1.1.3.1;
next	;

1.1.1.1
date	96.09.13.11.12.18;	author hope;	state Exp;
branches;
next	;

1.1.2.1
date	96.10.07.16.03.00;	author hope;	state Exp;
branches;
next	;

1.1.3.1
date	96.10.17.11.21.15;	author hope;	state Exp;
branches;
next	;

1.2.1.1
date	96.11.14.12.45.02;	author hope;	state Exp;
branches
	1.2.1.1.1.1;
next	;

1.2.1.1.1.1
date	96.11.28.14.56.55;	author hope;	state Exp;
branches;
next	;

1.2.2.1
date	96.11.22.18.05.30;	author hope;	state Exp;
branches;
next	;

1.2.3.1
date	96.12.17.17.44.20;	author hope;	state Exp;
branches
	1.2.3.1.1.1;
next	;

1.2.3.1.1.1
date	97.02.24.11.33.42;	author hope;	state Exp;
branches;
next	;

1.2.4.1
date	96.12.18.09.38.18;	author hope;	state Exp;
branches;
next	;

1.2.5.1
date	97.05.12.10.30.36;	author hope;	state Exp;
branches
	1.2.5.1.1.1
	1.2.5.1.2.1
	1.2.5.1.3.1;
next	;

1.2.5.1.1.1
date	97.07.28.18.15.42;	author daveb;	state Exp;
branches;
next	;

1.2.5.1.2.1
date	97.09.08.17.09.15;	author daveb;	state Exp;
branches;
next	;

1.2.5.1.3.1
date	97.09.09.14.04.25;	author daveb;	state Exp;
branches;
next	;

1.2.6.1
date	97.09.10.19.18.51;	author brucem;	state Exp;
branches;
next	;

1.2.7.1
date	97.09.11.20.49.59;	author daveb;	state Exp;
branches;
next	;

1.2.8.1
date	99.04.01.17.53.37;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
New file.
@


1.2
log
@[Bug #1547]
updating for current naming convention
@
text
@(*  ==== FOREIGN INTERFACE : FOREIGN_STRUCTURE ====
 *
 *  Copyright (C) 1995 Harlequin Ltd.
 *
 *  Implementation
 *  --------------
 *  
 *
 *  Revision Log
 *  ------------
 *  $Log: __structure.sml,v $
 *  Revision 1.1  1996/05/24  01:19:16  brianm
 *  new unit
 *  New file.
 *
 *  Revision 1.1  1996/05/19  13:59:07  brianm
 *  new unit
 *  Renamed file.
 *
 * Revision 1.4  1996/05/01  11:46:04  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
 * Revision 1.3  1996/03/28  13:10:17  matthew
 * New sharing syntax etc.
 *
 * Revision 1.2  1996/03/07  11:50:25  jont
 * Changing newmap to map, NEWMAP to MAP, T to map
 *
 * Revision 1.1  1995/09/07  22:48:34  brianm
 * new unit
 * Rename due to reorganisation & documentation of FI.
 *
 *  Revision 1.1  1995/04/25  11:38:04  brianm
 *  new unit
 *  New file.
 *
 *
 *)

require "structure";
require "aliens";
require "types";
require "__aliens";
require "__types";

require "^.utils.map";
require "^.utils.__btree";
require "^.basis.__char";
require "^.basis.__list";
require "^.basis.__string";


structure Structure_ : FOREIGN_STRUCTURE =
   struct
     structure Map = BTree_
       
     structure FIAliens  : FOREIGN_ALIENS = ForeignAliens_
     structure FITypes   : FOREIGN_TYPES  = ForeignTypes_

   (* Mapping *)

     structure FITypes = FITypes
     type name = FITypes.name
     type filename = FITypes.filename
       
     type ('a,'b) Map = ('a,'b)Map.map

     exception Undefined = Map.Undefined

     type foreign_module    =  FIAliens.foreign_module

     val get_module_later   =  FIAliens.get_module_later
     val get_item_later     =  FIAliens.get_item_later

     val get_module_now     =  FIAliens.get_module_now
     val get_item_now       =  FIAliens.get_item_now

     val get_item_names     =  FIAliens.get_item_names
     val get_item_info      =  FIAliens.get_item_info

     val lookup             = Map.apply'


   (* Definitions *)

     datatype load_mode = IMMEDIATE_LOAD | DEFERRED_LOAD

     val files = ref([] : filename list)

     fun filesLoaded () = !files

     datatype value_type = CODE_VALUE | VAR_VALUE | UNKNOWN_VALUE

     fun load_module (fname,IMMEDIATE_LOAD)  =  get_module_now(fname)
       | load_module (fname,DEFERRED_LOAD)    =  get_module_later(fname)

     abstype fStructure =

        FCODESET of (filename * load_mode * foreign_module)

     with
       
        fun load_object_file(fname : filename, mode) =
            let 
	      fun adjoin (x,xs) = 
		let val mem : string -> bool = fn y=> (x=y)
		in
		  if List.exists mem xs then xs else (x::xs)
		end (* adjoin *)
	      val F_mod = load_module(fname,mode)
            in
              files := adjoin(fname,!files);
              FCODESET(fname,mode,F_mod)
            end

        fun file_info(FCODESET(fname,mode,_)) = (fname,mode)

        fun symbols(FCODESET(_,_,f_mod)) = get_item_names(f_mod)

        fun symbol_info(FCODESET(_,_,f_mod),str) =
            let val info_map = get_item_info(f_mod)
                val info = lookup(info_map,str)
            in
                case Char.toLower (String.sub (info, 0)) of
                  #"c" => CODE_VALUE |
                  #"v" => VAR_VALUE  |
                   _  => UNKNOWN_VALUE
            end handle Undefined => UNKNOWN_VALUE

        fun module(FCODESET(_,_,f_mod)) = f_mod

     end
   end;
@


1.2.8.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a11 4
 *  Revision 1.2  1996/10/25  10:57:20  io
 *  [Bug #1547]
 *  updating for current naming convention
 *
@


1.2.7.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a11 4
 *  Revision 1.2  1996/10/25  10:57:20  io
 *  [Bug #1547]
 *  updating for current naming convention
 *
@


1.2.6.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a11 4
 *  Revision 1.2  1996/10/25  10:57:20  io
 *  [Bug #1547]
 *  updating for current naming convention
 *
@


1.2.5.1
log
@branched from 1.2
@
text
@a11 4
 *  Revision 1.2  1996/10/25  10:57:20  io
 *  [Bug #1547]
 *  updating for current naming convention
 *
@


1.2.5.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a11 3
 *  Revision 1.2.5.1  1997/05/12  10:30:36  hope
 *  branched from 1.2
 *
@


1.2.5.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a11 3
 *  Revision 1.2.5.1  1997/05/12  10:30:36  hope
 *  branched from 1.2
 *
@


1.2.5.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a11 3
 *  Revision 1.2.5.1  1997/05/12  10:30:36  hope
 *  branched from 1.2
 *
@


1.2.4.1
log
@branched from 1.2
@
text
@a11 4
 *  Revision 1.2  1996/10/25  10:57:20  io
 *  [Bug #1547]
 *  updating for current naming convention
 *
@


1.2.3.1
log
@branched from 1.2
@
text
@a11 4
 *  Revision 1.2  1996/10/25  10:57:20  io
 *  [Bug #1547]
 *  updating for current naming convention
 *
@


1.2.3.1.1.1
log
@branched from 1.2.3.1
@
text
@a11 3
 *  Revision 1.2.3.1  1996/12/17  17:44:20  hope
 *  branched from 1.2
 *
@


1.2.2.1
log
@branched from 1.2
@
text
@a11 4
 *  Revision 1.2  1996/10/25  10:57:20  io
 *  [Bug #1547]
 *  updating for current naming convention
 *
@


1.2.1.1
log
@branched from 1.2
@
text
@a11 4
 *  Revision 1.2  1996/10/25  10:57:20  io
 *  [Bug #1547]
 *  updating for current naming convention
 *
@


1.2.1.1.1.1
log
@branched from 1.2.1.1
@
text
@a11 3
 *  Revision 1.2.1.1  1996/11/14  12:45:02  hope
 *  branched from 1.2
 *
@


1.1
log
@new unit
New file.
@
text
@d11 5
a15 1
 *  $Log: _structure.sml,v $
d43 1
a43 4
require "../utils/stringlib";
require "../utils/map";
require "../utils/lists";

a45 5

require "../utils/__stringlib";
require "../utils/__btree";
require "../utils/__lists";

d49 5
a53 1
require "structure";
d58 2
a59 5

     structure StringLib : STRING_LIB = StringLib_
     structure Lists     : LISTS      = Lists_
     structure Map       : MAP        = BTree_

d66 4
a69 5
     open FITypes

     open MLWorks.Option

     type ('a,'b)Map = ('a,'b)Map.map
a83 5
     val chrof              =  String.chr o String.ordof
     val to_lower           =  StringLib.to_lower

     val adjoin             = Lists.adjoin

d93 1
a93 1
     fun files_loaded () = !files
d105 1
a105 1

d107 7
a113 1
            let val F_mod = load_module(fname,mode)
a125 1
                val chr  = to_lower(chrof(info,0))
d127 3
a129 3
                case chr of
                  "c" => CODE_VALUE |
                  "v" => VAR_VALUE  |
@


1.1.3.1
log
@branched from 1.1
@
text
@d11 1
a11 5
 *  $Log: __structure.sml,v $
 *  Revision 1.1  1996/05/24  01:19:16  brianm
 *  new unit
 *  New file.
 *
@


1.1.2.1
log
@branched from 1.1
@
text
@d11 1
a11 5
 *  $Log: __structure.sml,v $
 *  Revision 1.1  1996/05/24  01:19:16  brianm
 *  new unit
 *  New file.
 *
@


1.1.1.1
log
@branched from 1.1
@
text
@d11 1
a11 5
 *  $Log: __structure.sml,v $
 *  Revision 1.1  1996/05/24  01:19:16  brianm
 *  new unit
 *  New file.
 *
@
