head	1.4;
access;
symbols
	MLWorks_Beta_1996_06_07:1.4
	MLWorks_Beta_1996_06_06:1.4
	MLWorks_Beta_1996_06_05:1.4
	MLWorks_Beta_1996_06_03:1.4
	MLWorks_Beta_1996_05_31:1.4
	MLWorks_Beta_1996_05_30:1.4;
locks; strict;
comment	@ * @;


1.4
date	96.04.18.16.56.43;	author jont;	state Exp;
branches;
next	1.3;

1.3
date	96.03.20.15.11.33;	author matthew;	state Exp;
branches;
next	1.2;

1.2
date	96.03.07.11.49.54;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	95.09.07.22.49.07;	author brianm;	state Exp;
branches;
next	;


desc
@new unit
Rename due to reorganisation & documentation of FI.
@


1.4
log
@initbasis becomes basis
@
text
@(*  ==== FOREIGN INTERFACE : FOREIGN_CODEINFO ====
 *
 *  Copyright (C) 1995 Harlequin Ltd.
 *
 *  Implementation
 *  --------------
 *  
 *
 *  Revision Log
 *  ------------
 *  $Log: _fi_codeinfo.sml,v $
 * Revision 1.3  1996/03/20  15:11:33  matthew
 * Language revision
 *
 * Revision 1.2  1996/03/07  11:49:54  jont
 * Changing newmap to map, NEWMAP to MAP, T to map
 *
 * Revision 1.1  1995/09/07  22:49:07  brianm
 * new unit
 * Rename due to reorganisation & documentation of FI.
 *
 *  Revision 1.1  1995/04/25  11:37:07  brianm
 *  new unit
 *  New file.
 *
 * Revision 1.1  1995/03/27  15:48:27  brianm
 * new unit
 * New file.
 *
 *)

require "../utils/map";
require "../basis/__general";
require "fi_codeinfo";

functor ForeignCodeInfo(

    structure Map : MAP

) : FOREIGN_CODEINFO =
   struct

   (* Mapping *)

     open General

     type ('a,'b)Map = ('a,'b)Map.map

     fun empty_map ()      =  Map.empty'(String.<)
     val apply'            =  Map.apply'
     val define'           =  Map.define'
     val undefine          =  Map.undefine
     val to_list_ordered   =  Map.to_list_ordered 


   (* Exported Definitions *)

     abstype ('entry) foreign_codeinfo =
             FCODEINFO of ((string,'entry)Map)ref
     with

     (* foreign signature operations *)

        fun new_codeinfo () =
            FCODEINFO(ref(empty_map ()))

        fun lookup_entry (FCODEINFO(ref(map)),nm) =
            SOME(apply'(map,nm)) handle Undefined => NONE

        fun def_entry (FCODEINFO(map_r),itm) =
            map_r := define'(!map_r,itm)

        fun hide_entry(FCODEINFO(map_r),nm) =
            map_r := undefine(!map_r,nm)

        fun show_entries (FCODEINFO(ref(map))) =
            to_list_ordered(map)
     end 
   end;
@


1.3
log
@Language revision
@
text
@d12 3
d26 3
a28 4
# Revision 1.1  1995/03/27  15:48:27  brianm
# new unit
# New file.
#
d33 1
a33 1
require "../initbasis/__general";
@


1.2
log
@Changing newmap to map, NEWMAP to MAP, T to map
@
text
@d12 3
d47 1
a47 1
     val empty_map         =  Map.empty'(String.<)
d63 1
a63 1
            FCODEINFO(ref(empty_map))
@


1.1
log
@new unit
Rename due to reorganisation & documentation of FI.
@
text
@d11 5
a15 1
 *  $Log: _fi_sig.sml,v $
d27 1
a27 1
require "../utils/newmap";
d33 1
a33 1
    structure Map : NEWMAP
d42 1
a42 1
     type ('a,'b)Map = ('a,'b)Map.T
@
