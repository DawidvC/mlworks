head	1.3;
access;
symbols
	MLW_daveb_inline_1_4_99:1.3.8
	MLWorks_21c0_1999_03_25:1.3
	MLWorks_20c1_1998_08_20:1.3
	MLWorks_20c0_1998_08_04:1.3
	MLWorks_20b2c2_1998_06_19:1.3
	MLWorks_20b2_Windows_1998_06_12:1.3
	MLWorks_20b1c1_1998_05_07:1.3
	MLWorks_20b0_1998_04_07:1.3
	MLWorks_20b0_1998_03_20:1.3
	MLWorks_20m2_1998_02_16:1.3
	MLWorks_20m1_1997_10_23:1.3
	MLWorks_11r1:1.3.5.1.1.1.1
	MLWorks_workspace_97:1.3.7
	MLWorks_dt_wizard:1.3.6
	MLWorks_11c0_1997_09_09:1.3.5.1.1.1
	MLWorks_10r3:1.3.5.1.3
	MLWorks_10r2_551:1.3.5.1.2
	MLWorks_11:1.3.5.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.3.5.1
	MLWorks_20m0_1997_06_20:1.3
	MLWorks_1_0_r2c2_1997_06_14:1.3.5.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.3.5.1
	MLWorks_1_0_r2c1_1997_05_12:1.3.5
	MLWorks_BugFix_1997_04_24:1.3
	MLWorks_1_0_r2_Win32_1997_04_11:1.3
	MLWorks_1_0_r2_Unix_1997_04_04:1.3
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.3.3.1.1
	MLWorks_gui_1996_12_18:1.3.4
	MLWorks_1_0_Win32_1996_12_17:1.3.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.3.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.3.1.1
	MLWorks_1_0_Irix_1996_11_28:1.3.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.3.2
	MLWorks_1_0_Unix_1996_11_14:1.3.1
	MLWorks_Open_Beta2_1996_10_11:1.2.3
	MLWorks_License_dev:1.2.2
	MLWorks_1_open_beta_1996_09_13:1.2.1
	MLWorks_Open_Beta_1996_08_22:1.2
	MLWorks_Beta_1996_07_02:1.2
	MLWorks_Beta_1996_06_07:1.2
	MLWorks_Beta_1996_06_06:1.2
	MLWorks_Beta_1996_06_05:1.2
	MLWorks_Beta_1996_06_03:1.2
	MLWorks_Beta_1996_05_31:1.2
	MLWorks_Beta_1996_05_30:1.2;
locks; strict;
comment	@ *  @;


1.3
date	96.09.06.12.36.30;	author io;	state Exp;
branches
	1.3.1.1
	1.3.2.1
	1.3.3.1
	1.3.4.1
	1.3.5.1
	1.3.6.1
	1.3.7.1
	1.3.8.1;
next	1.2;

1.2
date	96.05.20.20.39.51;	author brianm;	state Exp;
branches
	1.2.1.1
	1.2.2.1
	1.2.3.1;
next	1.1;

1.1
date	96.05.19.13.59.10;	author brianm;	state Exp;
branches;
next	;

1.2.1.1
date	96.09.13.11.12.16;	author hope;	state Exp;
branches;
next	;

1.2.2.1
date	96.10.07.16.02.58;	author hope;	state Exp;
branches;
next	;

1.2.3.1
date	96.10.17.11.21.13;	author hope;	state Exp;
branches;
next	;

1.3.1.1
date	96.11.14.12.45.00;	author hope;	state Exp;
branches
	1.3.1.1.1.1;
next	;

1.3.1.1.1.1
date	96.11.28.14.56.54;	author hope;	state Exp;
branches;
next	;

1.3.2.1
date	96.11.22.18.05.27;	author hope;	state Exp;
branches;
next	;

1.3.3.1
date	96.12.17.17.44.18;	author hope;	state Exp;
branches
	1.3.3.1.1.1;
next	;

1.3.3.1.1.1
date	97.02.24.11.33.40;	author hope;	state Exp;
branches;
next	;

1.3.4.1
date	96.12.18.09.38.16;	author hope;	state Exp;
branches;
next	;

1.3.5.1
date	97.05.12.10.30.34;	author hope;	state Exp;
branches
	1.3.5.1.1.1
	1.3.5.1.2.1
	1.3.5.1.3.1;
next	;

1.3.5.1.1.1
date	97.07.28.18.16.16;	author daveb;	state Exp;
branches
	1.3.5.1.1.1.1.1;
next	;

1.3.5.1.1.1.1.1
date	97.10.07.11.41.10;	author jkbrook;	state Exp;
branches;
next	;

1.3.5.1.2.1
date	97.09.08.17.09.49;	author daveb;	state Exp;
branches;
next	;

1.3.5.1.3.1
date	97.09.09.14.05.16;	author daveb;	state Exp;
branches;
next	;

1.3.6.1
date	97.09.10.19.19.34;	author brucem;	state Exp;
branches;
next	;

1.3.7.1
date	97.09.11.20.50.46;	author daveb;	state Exp;
branches;
next	;

1.3.8.1
date	99.04.01.17.54.28;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
Renamed file.
@


1.3
log
@[Bug #1547]
updating for current naming conventions
@
text
@(*  ==== FOREIGN INTERFACE : FOREIGN_STORE ====
 *
 *  Copyright (C) 1995 Harlequin Ltd.
 *
 *  Description
 *  -----------
 *
 *  A _Store_ is an area of memory reserved for the purpose of
 *  reading/writing data from ML for use in foreign computations.  A
 *  store possesses a size (in 8-bit bytes) and can either be
 *  _Standard_ or _Managed_.  A Standard store generally remains
 *  fixed in size, and can only be expanded by an explicit call of
 *  function expand_store().  A Managed store, on the other hand,
 *  can be expanded automatically as needed - in principle, the memory
 *  used can be allocated as needed.
 *
 *  The use of stores helps the user programmer to control the
 *  memory mgmt.  overhead when dealing with foreign data - although a
 *  Managed store is most convenient, a Standard store of a fixed
 *  size might be all that is actually required.
 *
 *  Also associated with a store is a status field - this is
 *  provided to help the user provide low-level support for avoiding
 *  inadvertent corruption of data.
 * 
 *  
 *    - If the status is Rd then only reading is permitted, but writing is not.
 *    - If the status is Wr then only writing is permitted but reading is not.
 *    - If the status is RdWr then both reading and writing are permitted.
 *
 *  In the presence of concurrency within ML, this form of locking
 *  would have to be additionally protected by an appropriate monitor
 *
 *  Revision Log
 *  ------------
 *  $Log: store.sml,v $
 *  Revision 1.2  1996/05/20  20:39:51  brianm
 *  Beta release modifications.
 *
 *  Revision 1.1  1996/05/19  13:59:10  brianm
 *  new unit
 *  Renamed file.
 *
 * Revision 1.5  1996/03/28  13:51:45  matthew
 * Sharing constraints
 *
 * Revision 1.4  1995/09/07  22:43:44  brianm
 * Modifications for reorganisation & documentation.
 *
 *  Revision 1.3  1995/06/21  15:09:41  brianm
 *  Adding remote access, diagnostics and other facilities.
 *
 *  Revision 1.2  1995/05/04  19:35:35  brianm
 *  Removing restrictive eqtype constraints & introduce abstypes in
 *  various implementing types.
 *
 *  Revision 1.1  1995/04/25  11:45:36  brianm
 *  new unit
 *  New file.
 *
 * Revision 1.1  1995/03/27  15:47:52  brianm
 * new unit
#
 * New file.
#
 *
 *)

require "types";

signature FOREIGN_STORE =
   sig

     structure FITypes : FOREIGN_TYPES

     type bytearray = FITypes.bytearray
     type address = FITypes.address

     type store

     exception ReadOnly
     exception WriteOnly

     datatype store_status = LOCKED_STATUS | RD_STATUS | WR_STATUS | RDWR_STATUS 

     val storeStatus  : store -> store_status
     val setStoreStatus : (store * store_status) -> unit

     datatype alloc_policy = ORIGIN | SUCC | ALIGNED_4 | ALIGNED_8

     datatype overflow_policy = BREAK | EXTEND | RECYCLE

     val store : { alloc    : alloc_policy,
                    overflow : overflow_policy,
                    status   : store_status,
                    size     : int } -> store

     val storeSize     : store -> int
     val store_origin   : store -> address
     val storeAlloc    : store -> alloc_policy
     val storeOverflow : store -> overflow_policy
     val store_content  : store -> bytearray

     exception ExpandStore

     val isStandardStore  : store -> bool
     val isEphemeralStore : store -> bool

     val expand          : (store * int) -> unit
     val expand_managed  : (store * int) -> unit

     val fresh_object_offset  : (store * int) -> int
     val adjust_store        : (store * int * int) -> unit


     (* Diagnostic tools *)

     val viewStore : store -> string
     val dispStore : store -> store

     val storeInfo : store ->
	    { kind     : string,
              origin   : address,
	      status   : string,
	      alloc    : string,
	      overflow : string,
	      size     : int,
	      top      : int,
              free     : int }

     val storeData :
	 { store : store,
	   start  : int,
	   length : int } -> int list

     val storeDataHex :
	 { store : store,
	   start  : int,
	   length : int } -> string

     val storeDataAscii :
	 { store : store,
	   start  : int,
	   length : int } -> string

     val diffAddr : address -> address -> int
     val incrAddr : address * int -> address

   end;
@


1.3.8.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a36 4
 *  Revision 1.3  1996/09/06  12:36:30  io
 *  [Bug #1547]
 *  updating for current naming conventions
 *
@


1.3.7.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a36 4
 *  Revision 1.3  1996/09/06  12:36:30  io
 *  [Bug #1547]
 *  updating for current naming conventions
 *
@


1.3.6.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a36 4
 *  Revision 1.3  1996/09/06  12:36:30  io
 *  [Bug #1547]
 *  updating for current naming conventions
 *
@


1.3.5.1
log
@branched from 1.3
@
text
@a36 4
 *  Revision 1.3  1996/09/06  12:36:30  io
 *  [Bug #1547]
 *  updating for current naming conventions
 *
@


1.3.5.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a36 3
 *  Revision 1.3.5.1  1997/05/12  10:30:34  hope
 *  branched from 1.3
 *
@


1.3.5.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a36 3
 *  Revision 1.3.5.1  1997/05/12  10:30:34  hope
 *  branched from 1.3
 *
@


1.3.5.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a36 3
 *  Revision 1.3.5.1  1997/05/12  10:30:34  hope
 *  branched from 1.3
 *
@


1.3.5.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a36 3
 *  Revision 1.3.5.1.1.1  1997/07/28  18:16:16  daveb
 *  branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.3.4.1
log
@branched from 1.3
@
text
@a36 4
 *  Revision 1.3  1996/09/06  12:36:30  io
 *  [Bug #1547]
 *  updating for current naming conventions
 *
@


1.3.3.1
log
@branched from 1.3
@
text
@a36 4
 *  Revision 1.3  1996/09/06  12:36:30  io
 *  [Bug #1547]
 *  updating for current naming conventions
 *
@


1.3.3.1.1.1
log
@branched from 1.3.3.1
@
text
@a36 3
 *  Revision 1.3.3.1  1996/12/17  17:44:18  hope
 *  branched from 1.3
 *
@


1.3.2.1
log
@branched from 1.3
@
text
@a36 4
 *  Revision 1.3  1996/09/06  12:36:30  io
 *  [Bug #1547]
 *  updating for current naming conventions
 *
@


1.3.1.1
log
@branched from 1.3
@
text
@a36 4
 *  Revision 1.3  1996/09/06  12:36:30  io
 *  [Bug #1547]
 *  updating for current naming conventions
 *
@


1.3.1.1.1.1
log
@branched from 1.3.1.1
@
text
@a36 3
 *  Revision 1.3.1.1  1996/11/14  12:45:00  hope
 *  branched from 1.3
 *
@


1.2
log
@Beta release modifications.
@
text
@d37 3
d86 2
a87 2
     val store_status  : store -> store_status
     val set_store_status : (store * store_status) -> unit
d98 1
a98 1
     val store_size     : store -> int
d100 2
a101 2
     val store_alloc    : store -> alloc_policy
     val store_overflow : store -> overflow_policy
d106 2
a107 2
     val is_standard_store  : store -> bool
     val is_ephemeral_store : store -> bool
d118 2
a119 2
     val view_store : store -> string
     val disp_store : store -> store
d121 1
a121 1
     val store_info : store ->
d131 1
a131 1
     val store_data :
d136 1
a136 1
     val store_data_hex :
d141 1
a141 1
     val store_data_ascii :
d146 2
a147 2
     val diff_addr : address -> address -> int
     val incr_addr : address * int -> address
@


1.2.3.1
log
@branched from 1.2
@
text
@a36 3
 *  Revision 1.2  1996/05/20  20:39:51  brianm
 *  Beta release modifications.
 *
@


1.2.2.1
log
@branched from 1.2
@
text
@a36 3
 *  Revision 1.2  1996/05/20  20:39:51  brianm
 *  Beta release modifications.
 *
@


1.2.1.1
log
@branched from 1.2
@
text
@a36 3
 *  Revision 1.2  1996/05/20  20:39:51  brianm
 *  Beta release modifications.
 *
@


1.1
log
@new unit
Renamed file.
@
text
@d37 4
d58 2
a59 2
# Revision 1.1  1995/03/27  15:47:52  brianm
# new unit
d61 1
a61 1
# New file.
@
