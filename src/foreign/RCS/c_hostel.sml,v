head	1.5;
access;
symbols
	MLWorks_Beta_1996_06_07:1.5
	MLWorks_Beta_1996_06_06:1.5
	MLWorks_Beta_1996_06_05:1.5
	MLWorks_Beta_1996_06_03:1.5
	MLWorks_Beta_1996_05_31:1.5
	MLWorks_Beta_1996_05_30:1.5;
locks; strict;
comment	@ * @;


1.5
date	96.03.28.13.56.53;	author matthew;	state Exp;
branches;
next	1.4;

1.4
date	95.09.07.22.43.42;	author brianm;	state Exp;
branches;
next	1.3;

1.3
date	95.06.15.15.19.54;	author brianm;	state Exp;
branches;
next	1.2;

1.2
date	95.05.04.19.42.15;	author brianm;	state Exp;
branches;
next	1.1;

1.1
date	95.04.25.11.46.37;	author brianm;	state Exp;
branches;
next	;


desc
@new unit
New file.
@


1.5
log
@Sharing constraints
@
text
@(*  ==== FOREIGN INTERFACE : C_HOSTEL ====
 *
 *  Copyright (C) 1995 Harlequin Ltd.
 *
 *  Description
 *  -----------
 *  The C interface version of the internal FOREIGN_HOSTEL signature.
 *  
 *
 *  Revision Log
 *  ------------
 *  $Log: c_hostel.sml,v $
 * Revision 1.4  1995/09/07  22:43:42  brianm
 * Modifications for reorganisation & documentation.
 *
 *  Revision 1.3  1995/06/15  15:19:54  brianm
 *  Adding remote access, diagnostics and other facilities.
 *
 *  Revision 1.2  1995/05/04  19:42:15  brianm
 *  Removing restrictive eqtype constraints & introduce abstypes in
 *  various implementing types.
 *
 *  Revision 1.1  1995/04/25  11:46:37  brianm
 *  new unit
 *  New file.
 *
 *
 *)

require "fi_types";

signature C_HOSTEL =
   sig

     structure FITypes : FOREIGN_TYPES
     type bytearray = FITypes.bytearray
     type address = FITypes.address

     type hostel

     exception ReadOnly
     exception WriteOnly

     datatype hostel_status = LOCKED_HS | RD_HS | WR_HS | RDWR_HS 

     val hostel_status  : hostel -> hostel_status
     val set_hostel_status : (hostel * hostel_status) -> unit

     datatype alloc_policy = ORIGIN_AP | SUCC_AP | ALIGNED_4_AP | ALIGNED_8_AP

     datatype overflow_policy = BREAK_OV | EXTEND_OV | RECYCLE_OV

     val hostel : { alloc    : alloc_policy,
                    overflow : overflow_policy,
                    status   : hostel_status,
                    size     : int } -> hostel

     val hostel_size     : hostel -> int
     val hostel_alloc    : hostel -> alloc_policy
     val hostel_overflow : hostel -> overflow_policy

     exception ExpandHostel

     val is_standard_hostel  : hostel -> bool
     val is_ephemeral_hostel : hostel -> bool

     val expand  : (hostel * int) -> unit

     (* Debugging tools *)

     val hostel_info : hostel ->
	    { kind     : string,
              origin   : address,
	      status   : string,
	      alloc    : string,
	      overflow : string,
	      size     : int,
	      top      : int,
              free     : int }

     val hostel_data :
	 { hostel : hostel,
	   start  : int,
	   length : int } -> int list

     val hostel_data_hex :
	 { hostel : hostel,
	   start  : int,
	   length : int } -> string

     val hostel_data_ascii :
	 { hostel : hostel,
	   start  : int,
	   length : int } -> string

     val diff_addr : address -> address -> int
     val incr_addr : address * int -> address

   end;
@


1.4
log
@Modifications for reorganisation & documentation.
@
text
@d13 3
d36 2
a37 5
     type bytearray
     type address

       sharing type bytearray  = FITypes.bytearray
       sharing type address    = FITypes.address
@


1.3
log
@Adding remote access, diagnostics and other facilities.
@
text
@d13 3
d44 1
a44 1
     datatype hostel_status = LOCKED_H | RD_H | WR_H | RDWR_H 
d49 1
a49 1
     datatype alloc_policy = ORIGIN_AP | FLOAT_AP | ALIGNED_4_AP | ALIGNED_8_AP
d96 1
a96 1
     val conv_addr : address -> address -> int
@


1.2
log
@Removing restrictive eqtype constraints & introduce abstypes in
various implementing types.
@
text
@d13 4
d48 1
a48 3
     datatype overflow_policy = BREAK_OV       | EXTEND_OV
                              | EPHEM_BREAK_OV | EPHEM_EXTEND_OV
                              | EPHEM_RECYCLE_OV
d65 30
@


1.1
log
@new unit
New file.
@
text
@d12 4
a15 1
 *  $Log$
d17 1
d32 1
a32 1
     eqtype hostel
@
