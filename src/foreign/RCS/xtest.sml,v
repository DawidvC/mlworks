head	1.4;
access;
symbols
	MLW_daveb_inline_1_4_99:1.4.8
	MLWorks_21c0_1999_03_25:1.4
	MLWorks_20c1_1998_08_20:1.4
	MLWorks_20c0_1998_08_04:1.4
	MLWorks_20b2c2_1998_06_19:1.4
	MLWorks_20b2_Windows_1998_06_12:1.4
	MLWorks_20b1c1_1998_05_07:1.4
	MLWorks_20b0_1998_04_07:1.4
	MLWorks_20b0_1998_03_20:1.4
	MLWorks_20m2_1998_02_16:1.4
	MLWorks_20m1_1997_10_23:1.4
	MLWorks_11r1:1.4.5.1.1.1.1
	MLWorks_workspace_97:1.4.7
	MLWorks_dt_wizard:1.4.6
	MLWorks_11c0_1997_09_09:1.4.5.1.1.1
	MLWorks_10r3:1.4.5.1.3
	MLWorks_10r2_551:1.4.5.1.2
	MLWorks_11:1.4.5.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.4.5.1
	MLWorks_20m0_1997_06_20:1.4
	MLWorks_1_0_r2c2_1997_06_14:1.4.5.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.4.5.1
	MLWorks_1_0_r2c1_1997_05_12:1.4.5
	MLWorks_BugFix_1997_04_24:1.4
	MLWorks_1_0_r2_Win32_1997_04_11:1.4
	MLWorks_1_0_r2_Unix_1997_04_04:1.4
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.4.3.1.1
	MLWorks_gui_1996_12_18:1.4.4
	MLWorks_1_0_Win32_1996_12_17:1.4.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.4.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.4.1.1
	MLWorks_1_0_Irix_1996_11_28:1.4.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.4.2
	MLWorks_1_0_Unix_1996_11_14:1.4.1
	MLWorks_Open_Beta2_1996_10_11:1.3.3
	MLWorks_License_dev:1.3.2
	MLWorks_1_open_beta_1996_09_13:1.3.1
	MLWorks_Open_Beta_1996_08_22:1.3
	MLWorks_Beta_1996_07_02:1.3
	MLWorks_Beta_1996_06_07:1.3
	MLWorks_Beta_1996_06_06:1.3
	MLWorks_Beta_1996_06_05:1.3
	MLWorks_Beta_1996_06_03:1.3
	MLWorks_Beta_1996_05_31:1.3
	MLWorks_Beta_1996_05_30:1.3;
locks; strict;
comment	@ * @;


1.4
date	96.10.22.17.29.07;	author io;	state Exp;
branches
	1.4.1.1
	1.4.2.1
	1.4.3.1
	1.4.4.1
	1.4.5.1
	1.4.6.1
	1.4.7.1
	1.4.8.1;
next	1.3;

1.3
date	96.05.24.01.19.19;	author brianm;	state Exp;
branches
	1.3.1.1
	1.3.2.1
	1.3.3.1;
next	1.2;

1.2
date	95.09.07.22.43.46;	author brianm;	state Exp;
branches;
next	1.1;

1.1
date	95.07.14.18.37.27;	author brianm;	state Exp;
branches;
next	;

1.3.1.1
date	96.09.13.11.12.45;	author hope;	state Exp;
branches;
next	;

1.3.2.1
date	96.10.07.16.03.27;	author hope;	state Exp;
branches;
next	;

1.3.3.1
date	96.10.17.11.21.43;	author hope;	state Exp;
branches;
next	;

1.4.1.1
date	96.11.14.12.45.28;	author hope;	state Exp;
branches
	1.4.1.1.1.1;
next	;

1.4.1.1.1.1
date	96.11.28.14.57.21;	author hope;	state Exp;
branches;
next	;

1.4.2.1
date	96.11.22.18.06.01;	author hope;	state Exp;
branches;
next	;

1.4.3.1
date	96.12.17.17.44.44;	author hope;	state Exp;
branches
	1.4.3.1.1.1;
next	;

1.4.3.1.1.1
date	97.02.24.11.34.10;	author hope;	state Exp;
branches;
next	;

1.4.4.1
date	96.12.18.09.38.44;	author hope;	state Exp;
branches;
next	;

1.4.5.1
date	97.05.12.10.31.04;	author hope;	state Exp;
branches
	1.4.5.1.1.1
	1.4.5.1.2.1
	1.4.5.1.3.1;
next	;

1.4.5.1.1.1
date	97.07.28.18.16.35;	author daveb;	state Exp;
branches
	1.4.5.1.1.1.1.1;
next	;

1.4.5.1.1.1.1.1
date	97.10.07.11.41.27;	author jkbrook;	state Exp;
branches;
next	;

1.4.5.1.2.1
date	97.09.08.17.10.09;	author daveb;	state Exp;
branches;
next	;

1.4.5.1.3.1
date	97.09.09.14.05.38;	author daveb;	state Exp;
branches;
next	;

1.4.6.1
date	97.09.10.19.20.03;	author brucem;	state Exp;
branches;
next	;

1.4.7.1
date	97.09.11.20.51.16;	author daveb;	state Exp;
branches;
next	;

1.4.8.1
date	99.04.01.17.54.59;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
New file.
@


1.4
log
@[Bug #1547]
current naming conventions
@
text
@(* test script for foreign interface *)


(* *)

use "open";


   (*  Loading X libraries *)

   val libX11 = loadObjectFile("/usr/lib/libX11.so.5.0",IMMEDIATE_LOAD);
   val libXt  = loadObjectFile("/usr/lib/libXt.so.5.0",IMMEDIATE_LOAD);
   val libXm  = loadObjectFile("/usr/lib/libXm.so.1.2",IMMEDIATE_LOAD);

   (*  TEST 2.1 - Building X stores *)

   val x_store =
         store{ alloc    = SUCC,
                 overflow = EXTEND,
                 size     = 1000,
                 status   = RDWR_STATUS   };

   val x_name = "foreign/xtst.so";
  
   val x_struct = loadObjectFile(x_name,IMMEDIATE_LOAD);

   symbols(x_struct);
   symbolInfo(x_struct,"demo_box");



   (* TEST 2.2 - Building X OBJECT's *)

   val x_object =
         object { ctype     = STRING_TYPE{ length = 64 },
               store    = x_store };
   
   val x_object1 = dupObject(x_object);


   val void_object =
         object { ctype     = VOID_TYPE,
               store    = x_store };


   (* TEST 2.3 - Building X signatures *)

   val x_sig = newSignature();

   defEntry(x_sig,
             FUN_DECL 
               { name = "demo_box",
                 source = [STRING_TYPE{ length = 64 }],
                 target = VOID_TYPE });
   
   val demo_box = defineForeignFun(x_struct,x_sig)("demo_box");

   setString(x_object1,"Hope springs Eternal"); 

   call(demo_box)([x_object1],void_object);
@


1.4.8.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@@


1.4.7.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@@


1.4.6.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@@


1.4.5.1
log
@branched from 1.4
@
text
@@


1.4.5.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@@


1.4.5.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@@


1.4.5.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@@


1.4.5.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@


1.4.4.1
log
@branched from 1.4
@
text
@@


1.4.3.1
log
@branched from 1.4
@
text
@@


1.4.3.1.1.1
log
@branched from 1.4.3.1
@
text
@@


1.4.2.1
log
@branched from 1.4
@
text
@@


1.4.1.1
log
@branched from 1.4
@
text
@@


1.4.1.1.1.1
log
@branched from 1.4.1.1
@
text
@@


1.3
log
@Beta release modifications.
@
text
@a8 1

d11 3
a13 3
   val libX11 = load_object_file("/usr/lib/libX11.so.5.0",IMMEDIATE_LOAD);
   val libXt  = load_object_file("/usr/lib/libXt.so.5.0",IMMEDIATE_LOAD);
   val libXm  = load_object_file("/usr/lib/libXm.so.1.2",IMMEDIATE_LOAD);
d23 1
a23 1
   val x_name = "./xtst.so";
d25 1
a25 1
   val x_struct = load_object_file(x_name,IMMEDIATE_LOAD);
d28 1
a28 1
   symbol_info(x_struct,"demo_box");
d38 1
a38 1
   val x_object1 = dup_object(x_object);
d48 1
a48 1
   val x_sig = new_signature();
d50 1
a50 1
   def_entry(x_sig,
d53 2
a54 2
                 source = makeBox([STRING_TYPE{ length = 64 }]),
                 target = makeBox(VOID_TYPE) });
d56 1
a56 1
   val demo_box = define_foreign_fun(x_struct,x_sig)("demo_box");
d58 1
a58 1
   set_string(x_object1,"Hope springs Eternal"); 
@


1.3.3.1
log
@branched from 1.3
@
text
@@


1.3.2.1
log
@branched from 1.3
@
text
@@


1.3.1.1
log
@branched from 1.3
@
text
@@


1.2
log
@Modifications for reorganisation & documentation.
@
text
@d12 9
a20 9
   val libX11 = load_codeset("/usr/lib/libX11.so.5.0",IMMEDIATE_LM);
   val libXt  = load_codeset("/usr/lib/libXt.so.5.0",IMMEDIATE_LM);
   val libXm  = load_codeset("/usr/lib/libXm.so.1.2",IMMEDIATE_LM);

   (*  TEST 2.1 - Building X hostels *)

   val x_hostel =
         hostel{ alloc    = SUCC_AP,
                 overflow = EXTEND_OV,
d22 1
a22 1
                 status   = RDWR_HS   };
d26 1
a26 1
   val x_struct = load_codeset(x_name,IMMEDIATE_LM);
d33 1
a33 1
   (* TEST 2.2 - Building X POD's *)
d35 3
a37 3
   val x_pod =
         pod { ctype     = STRING_CT{ length = 64 },
               hostel    = x_hostel };
d39 1
a39 1
   val x_pod1 = dup_pod(x_pod);
d42 3
a44 3
   val void_pod =
         pod { ctype     = VOID_CT,
               hostel    = x_hostel };
d49 1
a49 1
   val x_sig = new_codeinfo();
d52 1
a52 1
             CODE_DI 
d54 2
a55 2
                 source = makeBOX([STRING_CT{ length = 64 }]),
                 target = makeBOX(VOID_CT) });
d57 1
a57 1
   val demo_box = attach(x_struct,x_sig)("demo_box");
d59 1
a59 1
   set_string(x_pod1,"Hope springs Eternal"); 
d61 1
a61 1
   call(demo_box)([x_pod1],void_pod);
@


1.1
log
@new unit
New file.
@
text
@d12 3
a14 3
   val libX11 = load_structure("/usr/lib/libX11.so.5.0",IMMEADIATE_LM);
   val libXt  = load_structure("/usr/lib/libXt.so.5.0",IMMEADIATE_LM);
   val libXm  = load_structure("/usr/lib/libXm.so.1.2",IMMEADIATE_LM);
d19 1
a19 1
         hostel{ alloc    = FLOAT_AP,
d22 1
a22 1
                 status   = RDWR_H   };
d26 1
a26 1
   val x_struct = load_structure(x_name,IMMEADIATE_LM);
d36 1
a36 1
         pod { ctype     = STRING_T{ length = 64 },
d43 1
a43 1
         pod { ctype     = VOID_T,
d49 1
a49 1
   val x_sig = new_sig();
d52 1
a52 1
             CODE_SE 
d54 2
a55 2
                 source = makeDF([STRING_T{ length = 64 }]),
                 target = makeDF(VOID_T) });
@
