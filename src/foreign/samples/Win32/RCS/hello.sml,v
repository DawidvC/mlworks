head	1.7;
access;
symbols
	MLW_daveb_inline_1_4_99:1.7.3
	MLWorks_21c0_1999_03_25:1.7
	MLWorks_20c1_1998_08_20:1.7
	MLWorks_20c0_1998_08_04:1.7
	MLWorks_20b2c2_1998_06_19:1.7
	MLWorks_20b2_Windows_1998_06_12:1.7
	MLWorks_20b1c1_1998_05_07:1.7
	MLWorks_20b0_1998_04_07:1.7
	MLWorks_20b0_1998_03_20:1.7
	MLWorks_20m2_1998_02_16:1.7
	MLWorks_20m1_1997_10_23:1.7
	MLWorks_11r1:1.6.4.2.1.1.1
	MLWorks_workspace_97:1.7.2
	MLWorks_dt_wizard:1.7.1
	MLWorks_11c0_1997_09_09:1.6.4.2.1.1
	MLWorks_10r3:1.6.4.2.3
	MLWorks_10r2_551:1.6.4.2.2
	MLWorks_11:1.6.4.2.1
	MLWorks_1_0_r2c2_1997_07_28:1.6.4.2
	MLWorks_20m0_1997_06_20:1.7
	MLWorks_1_0_r2c2_1997_06_14:1.6.4.2
	MLWorks_1_0_r2c1_released_1997_05_23:1.6.4.2
	MLWorks_1_0_r2c1_1997_05_12:1.6.4
	MLWorks_BugFix_1997_04_24:1.6
	MLWorks_1_0_r2_Win32_1997_04_11:1.6
	MLWorks_1_0_r2_Unix_1997_04_04:1.6
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.6.2.1.1
	MLWorks_gui_1996_12_18:1.6.3
	MLWorks_1_0_Win32_1996_12_17:1.6.2
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.5.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.5.1.1
	MLWorks_1_0_Irix_1996_11_28:1.5.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.6.1
	MLWorks_1_0_Unix_1996_11_14:1.5.1
	MLWorks_Open_Beta2_1996_10_11:1.2.3
	MLWorks_License_dev:1.2.2
	MLWorks_1_open_beta_1996_09_13:1.2.1
	MLWorks_Open_Beta_1996_08_22:1.2
	MLWorks_Beta_1996_07_02:1.1;
locks; strict;
comment	@ *  @;


1.7
date	97.06.16.10.53.45;	author jkbrook;	state Exp;
branches
	1.7.1.1
	1.7.2.1
	1.7.3.1;
next	1.6;

1.6
date	96.11.18.11.24.32;	author brianm;	state Exp;
branches
	1.6.1.1
	1.6.2.1
	1.6.3.1
	1.6.4.1;
next	1.5;

1.5
date	96.11.06.19.03.28;	author brianm;	state Exp;
branches
	1.5.1.1;
next	1.4;

1.4
date	96.10.22.16.39.24;	author io;	state Exp;
branches;
next	1.3;

1.3
date	96.10.21.18.13.20;	author jont;	state Exp;
branches;
next	1.2;

1.2
date	96.08.11.20.36.27;	author brianm;	state Exp;
branches
	1.2.1.1
	1.2.2.1
	1.2.3.1;
next	1.1;

1.1
date	96.05.24.14.31.33;	author brianm;	state Exp;
branches;
next	;

1.2.1.1
date	96.09.13.11.12.19;	author hope;	state Exp;
branches;
next	;

1.2.2.1
date	96.10.07.16.03.01;	author hope;	state Exp;
branches;
next	;

1.2.3.1
date	96.10.17.11.21.18;	author hope;	state Exp;
branches;
next	;

1.5.1.1
date	96.11.14.12.45.03;	author hope;	state Exp;
branches
	1.5.1.1.1.1;
next	;

1.5.1.1.1.1
date	96.11.28.14.56.57;	author hope;	state Exp;
branches;
next	;

1.6.1.1
date	96.11.22.18.05.32;	author hope;	state Exp;
branches;
next	;

1.6.2.1
date	96.12.17.17.44.22;	author hope;	state Exp;
branches
	1.6.2.1.1.1;
next	;

1.6.2.1.1.1
date	97.02.24.11.33.44;	author hope;	state Exp;
branches;
next	;

1.6.3.1
date	96.12.18.09.38.20;	author hope;	state Exp;
branches;
next	;

1.6.4.1
date	97.05.12.10.30.38;	author hope;	state Exp;
branches;
next	1.6.4.2;

1.6.4.2
date	97.05.15.13.15.34;	author daveb;	state Exp;
branches
	1.6.4.2.1.1
	1.6.4.2.2.1
	1.6.4.2.3.1;
next	;

1.6.4.2.1.1
date	97.07.28.18.15.42;	author daveb;	state Exp;
branches
	1.6.4.2.1.1.1.1;
next	;

1.6.4.2.1.1.1.1
date	97.10.07.11.40.44;	author jkbrook;	state Exp;
branches;
next	;

1.6.4.2.2.1
date	97.09.08.17.09.15;	author daveb;	state Exp;
branches;
next	;

1.6.4.2.3.1
date	97.09.09.14.04.27;	author daveb;	state Exp;
branches;
next	;

1.7.1.1
date	97.09.10.19.18.51;	author brucem;	state Exp;
branches;
next	;

1.7.2.1
date	97.09.11.20.49.59;	author daveb;	state Exp;
branches;
next	;

1.7.3.1
date	99.04.01.17.53.38;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
New file.
@


1.7
log
@[Bug #30127]
Merging changes from 1.0r2c1 into 2.0m0
@
text
@(* Hello example ML FI interface code.
 *
 * Copyright (C) 1997 The Harlequin Group Limited.  All rights reserved.
 *)

require "$.foreign.__interface";

(* ML FI structure mapping *)

local
   structure Store  = Interface.Store
   structure Structure  = Interface.C.Structure
   structure Signature  = Interface.C.Signature
   structure Function  = Interface.C.Function
   structure Type  = Interface.C.Type
   structure Value  = Interface.C.Value
in
   val ALIGNED_4     = Store.ALIGNED_4
   val BREAK         = Store.BREAK
   val RDWR_STATUS   = Store.RDWR_STATUS
   val store         = Store.store

   val loadObjectFile = Structure.loadObjectFile
   val IMMEDIATE_LOAD   = Structure.IMMEDIATE_LOAD

   val newSignature = Signature.newSignature
   val defEntry     = Signature.defEntry
   val FUN_DECL      = Signature.FUN_DECL

   val defineForeignFun = Function.defineForeignFun
   val call               = Function.call

   type c_type = Type.c_type

   val VOID_TYPE     = Type.VOID_TYPE
   val STRING_TYPE   = Type.STRING_TYPE
   val INT_TYPE      = Type.INT_TYPE
   val CHAR_TYPE     = Type.CHAR_TYPE
   val ptrType       = Type.ptrType

   val object           = Value.object
   val setString       = Value.setString
   val getString       = Value.getString
   val setInt          = Value.setInt
   val getInt          = Value.getInt
   val setPtrType     = Value.setPtrType
   val setPtrAddrOf  = Value.setPtrAddrOf
   val castPtrType    = Value.castPtrType
end


(* Loading a Structure *)
   val hello_struct = loadObjectFile("foreign\\samples\\hello.dll",IMMEDIATE_LOAD);
   (* the filename is relative to the current directory that MLWorks is using *)



(* Building a store *)

    val hello_store =
          store{ alloc    = ALIGNED_4,
                 overflow = BREAK,
                 size     = 60,
                 status   = RDWR_STATUS   };


(* Creating objects *)

   val void_object =
         object { ctype  = VOID_TYPE,
                  store  = hello_store };

   val str_object =
         object { ctype  = STRING_TYPE{ length = 30 },
                  store  = hello_store };

   val int_object1 =
         object { ctype  = INT_TYPE,
                  store  = hello_store };

   val int_object2 =
         object { ctype  = INT_TYPE,
                  store  = hello_store };

   val ptr_object =
         object { ctype  = ptrType(VOID_TYPE),
                  store  = hello_store };



(* Initialising object values - these will be our arguments *)

   setString(str_object, "What is 65 - 42? ---- Ans is ");
   setInt(int_object1, 23);

(* Examining object values *)

   getString(str_object);
   getInt(int_object1);


(* Defining a c_signature object *)

   val hello_sig = newSignature();


(* Adding a new Signature entry *)

   defEntry(hello_sig,
             FUN_DECL { name = "hello",
                        source = [ptrType(CHAR_TYPE), INT_TYPE] : c_type list,
                        target = INT_TYPE }
	     );


(* Make a `callable object' lookup function for our foreign code *)

   val def_hello = defineForeignFun( hello_struct, hello_sig );


(* Extract a foreign function object as an ML value *) 

   val hello = def_hello "hello";;


(* Setting up string pointers ... *)

     setPtrType    { ptr = ptr_object, data = str_object };
     setPtrAddrOf { ptr = ptr_object, data = str_object };
     castPtrType   { ptr = ptr_object, ctype = CHAR_TYPE };


(* Call the foreign function *)

   call hello ( [ptr_object,int_object1], int_object2 );


(* Extracting the result data *)

   getInt(int_object2);
@


1.7.3.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@@


1.7.2.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@@


1.7.1.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@@


1.6
log
@Fixing examples ...
@
text
@d1 4
a4 2
(* ++++ Hello example ML FI interface code ++++ *)
(* ++++ ================================== ++++ *)
@


1.6.4.1
log
@branched from 1.6
@
text
@@


1.6.4.2
log
@[Bug #30127]
Added copyright strings.
@
text
@d1 2
a2 4
(* Hello example ML FI interface code.
 *
 * Copyright (C) 1997 The Harlequin Group Limited.  All rights reserved.
 *)
@


1.6.4.2.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@@


1.6.4.2.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@@


1.6.4.2.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@@


1.6.4.2.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@


1.6.3.1
log
@branched from 1.6
@
text
@@


1.6.2.1
log
@branched from 1.6
@
text
@@


1.6.2.1.1.1
log
@branched from 1.6.2.1
@
text
@@


1.6.1.1
log
@branched from 1.6
@
text
@@


1.5
log
@Fixing samples.
@
text
@d51 1
a51 1
   val hello_struct = loadObjectFile("foreign\\samples\\hello.so",IMMEDIATE_LOAD);
@


1.5.1.1
log
@branched from 1.5
@
text
@@


1.5.1.1.1.1
log
@branched from 1.5.1.1
@
text
@@


1.4
log
@[Bug #1547]
current naming conventions
@
text
@d51 2
a53 1
   val hello_struct = loadObjectFile("./hello.so",IMMEDIATE_LOAD);
@


1.3
log
@Add missing require declaration for __interface
@
text
@d21 1
a21 1
   val load_object_file = Structure.load_object_file
d24 2
a25 2
   val new_signature = Signature.new_signature
   val def_entry     = Signature.def_entry
d28 1
a28 1
   val define_foreign_fun = Function.define_foreign_fun
d40 7
a46 7
   val set_string       = Value.set_string
   val get_string       = Value.get_string
   val set_int          = Value.set_int
   val get_int          = Value.get_int
   val set_ptr_type     = Value.set_ptr_type
   val set_ptr_addr_of  = Value.set_ptr_addr_of
   val cast_ptr_type    = Value.cast_ptr_type
d52 1
a52 1
   val hello_struct = load_object_file("./hello.so",IMMEDIATE_LOAD);
d90 2
a91 2
   set_string(str_object, "What is 65 - 42? ---- Ans is ");
   set_int(int_object1, 23);
d95 2
a96 2
   get_string(str_object);
   get_int(int_object1);
d101 1
a101 1
   val hello_sig = new_signature();
d106 1
a106 1
   def_entry(hello_sig,
d110 1
a110 1
            );
d115 1
a115 1
   val def_hello = define_foreign_fun( hello_struct, hello_sig );
d125 3
a127 3
   set_ptr_type    { ptr = ptr_object, data = str_object };
   set_ptr_addr_of { ptr = ptr_object, data = str_object };
   cast_ptr_type   { ptr = ptr_object, ctype = CHAR_TYPE };
d137 1
a137 1
   get_int(int_object2);
@


1.2
log
@Removing open's in examples ...
@
text
@d4 1
@


1.2.3.1
log
@branched from 1.2
@
text
@@


1.2.2.1
log
@branched from 1.2
@
text
@@


1.2.1.1
log
@branched from 1.2
@
text
@@


1.1
log
@new unit
New file.
@
text
@d5 1
a5 15
(* Opening the ML FI structures *)


   open ForeignInterface;
   open Store;
   open Object;
   open Diagnostic;
   open LibML;
   open C;
   open Structure;
   open Type;
   open Value;
   open Signature;
   open Function;
   open Diagnostic;
d7 40
d57 1
a57 1
         store{ alloc    = ALIGNED_4,
d70 1
a70 1
         object { ctype  = STRING_TYPE{ length = 20 },
@
