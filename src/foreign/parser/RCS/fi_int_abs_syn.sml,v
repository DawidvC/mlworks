head	1.2;
access;
symbols
	MLW_daveb_inline_1_4_99:1.2.3
	MLWorks_21c0_1999_03_25:1.2
	MLWorks_20c1_1998_08_20:1.2
	MLWorks_20c0_1998_08_04:1.2
	MLWorks_20b2c2_1998_06_19:1.2
	MLWorks_20b2_Windows_1998_06_12:1.2
	MLWorks_20b1c1_1998_05_07:1.2
	MLWorks_20b0_1998_04_07:1.2
	MLWorks_20b0_1998_03_20:1.2
	MLWorks_20m2_1998_02_16:1.2
	MLWorks_20m1_1997_10_23:1.2
	MLWorks_workspace_97:1.2.2
	MLWorks_dt_wizard:1.2.1;
locks; strict;
comment	@ *  @;


1.2
date	97.08.22.10.27.56;	author brucem;	state Exp;
branches
	1.2.1.1
	1.2.2.1
	1.2.3.1;
next	1.1;

1.1
date	97.08.22.09.27.55;	author brucem;	state Exp;
branches;
next	;

1.2.1.1
date	97.09.10.19.19.16;	author brucem;	state Exp;
branches;
next	;

1.2.2.1
date	97.09.11.20.50.27;	author daveb;	state Exp;
branches;
next	;

1.2.3.1
date	99.04.01.17.54.07;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
Defines abstract syntax used inside the Foreign Interface parser.
Not used outside the Foreign Interface parser.
@


1.2
log
@Automatic checkin:
changed attribute _comment to ' *  '
@
text
@(*
 * Foreign Interface parser: Internal abstract syntax
 *
 * Copyright (C) 1997 The Harlequin Group Limited.  All rights reserved.
 *
 * $Log$
 *
 *)

require "fi_abs_syntax";

(* FI Internal Abstract Syntax:
   Extra structures and function used for constructing abstract syntax *)

signature FI_INT_ABS_SYN =
  sig

    structure FIAbsSyntax : FI_ABS_SYNTAX

    (* Information for making new types from simpler ones *)
    datatype type_info =
      NO_TYPE_INFO
    | AS_POINTER of type_info
    | AS_ARRAY of 
        {dimensions: FIAbsSyntax.expression option, elemTypeInfo: type_info}
    | AS_FUNCTION of
        {returnTypeInfo : type_info,
         params: {name : string option, paramType : FIAbsSyntax.types} list }

    (* insertTypeInfo a b
       Goes through `a' until it finds a NO_TYPE_INFO, and replaces
       this with `b'.  *)
    val insertTypeInfo : type_info * type_info -> type_info

    (* Make a new type using type info *)
    val makeType : FIAbsSyntax.types * type_info -> FIAbsSyntax.types

    (* Make new simple types e.g. unsigned int *)
    val makeSignedType : FIAbsSyntax.types -> FIAbsSyntax.types
    val makeUnsignedType : FIAbsSyntax.types -> FIAbsSyntax.types
    val makeLongType : FIAbsSyntax.types -> FIAbsSyntax.types
    val makeShortType : FIAbsSyntax.types -> FIAbsSyntax.types

    (* Combine a type and declarator to make a struct/union field *)
    val makeField :
      FIAbsSyntax.types * {name :string, typeInfo :type_info}
      -> FIAbsSyntax.field

    (* Combine type and declarator information to make a declaration *)
    val makeDeclaration :
      FIAbsSyntax.types *
      {name : string, typeInfo : type_info} ->
      FIAbsSyntax.declaration

    (* Combine type and declarator information to make a typedef declaration *)
    val makeTypedef : 
      FIAbsSyntax.types *
      {name : string, typeInfo : type_info } ->
      FIAbsSyntax.declaration

    (* Combine type, declarator and value to make a constant declaration *)
    val makeConst :
      FIAbsSyntax.types *
      {name : string, typeInfo : type_info } *
      FIAbsSyntax.expression ->
      FIAbsSyntax.declaration

  end
@


1.2.3.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@d6 1
a6 5
 * $Log: parser:fi_int_abs_syn.sml,v $
 *  Revision 1.2  1997/08/22  10:27:56  brucem
 *  Automatic checkin:
 *  changed attribute _comment to ' *  '
 *
@


1.2.2.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@d6 1
a6 5
 * $Log: parser:fi_int_abs_syn.sml,v $
 *  Revision 1.2  1997/08/22  10:27:56  brucem
 *  Automatic checkin:
 *  changed attribute _comment to ' *  '
 *
@


1.2.1.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@d6 1
a6 5
 * $Log: parser:fi_int_abs_syn.sml,v $
 *  Revision 1.2  1997/08/22  10:27:56  brucem
 *  Automatic checkin:
 *  changed attribute _comment to ' *  '
 *
@


1.1
log
@new unit
Defines abstract syntax used inside the Foreign Interface parser.
Not used outside the Foreign Interface parser.
@
text
@@
