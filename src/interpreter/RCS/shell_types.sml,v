head	1.32;
access;
symbols
	MLW_daveb_inline_1_4_99:1.32.11
	MLWorks_21c0_1999_03_25:1.32
	MLWorks_20c1_1998_08_20:1.32
	MLWorks_20c0_1998_08_04:1.32
	MLWorks_20b2c2_1998_06_19:1.32
	MLWorks_20b2_Windows_1998_06_12:1.32
	MLWorks_20b1c1_1998_05_07:1.32
	MLWorks_20b0_1998_04_07:1.32
	MLWorks_20b0_1998_03_20:1.32
	MLWorks_20m2_1998_02_16:1.32
	MLWorks_20m1_1997_10_23:1.32
	MLWorks_11r1:1.32.8.1.1.1.1
	MLWorks_workspace_97:1.32.10
	MLWorks_dt_wizard:1.32.9
	MLWorks_11c0_1997_09_09:1.32.8.1.1.1
	MLWorks_10r3:1.32.8.1.3
	MLWorks_10r2_551:1.32.8.1.2
	MLWorks_11:1.32.8.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.32.8.1
	MLWorks_20m0_1997_06_20:1.32
	MLWorks_1_0_r2c2_1997_06_14:1.32.8.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.32.8.1
	MLWorks_1_0_r2c1_1997_05_12:1.32.8
	MLWorks_BugFix_1997_04_24:1.32
	MLWorks_1_0_r2_Win32_1997_04_11:1.32
	MLWorks_1_0_r2_Unix_1997_04_04:1.32
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.32.6.1.1
	MLWorks_gui_1996_12_18:1.32.7
	MLWorks_1_0_Win32_1996_12_17:1.32.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.32.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.32.4.1
	MLWorks_1_0_Irix_1996_11_28:1.32.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.32.5
	MLWorks_1_0_Unix_1996_11_14:1.32.4
	MLWorks_Open_Beta2_1996_10_11:1.32.3
	MLWorks_License_dev:1.32.2
	MLWorks_1_open_beta_1996_09_13:1.32.1
	MLWorks_Open_Beta_1996_08_22:1.32
	MLWorks_Beta_1996_07_02:1.32
	MLWorks_Beta_1996_06_07:1.32
	MLWorks_Beta_1996_06_06:1.32
	MLWorks_Beta_1996_06_05:1.32
	MLWorks_Beta_1996_06_03:1.32
	MLWorks_Beta_1996_05_31:1.32
	MLWorks_Beta_1996_05_30:1.32
	ML_beta_release_12/08/94:1.22
	ML_beta_release_03/08/94:1.22
	ML_revised_beta_release_25/05/94:1.17
	ML_final_beta_release_02/03/94:1.17
	mlworks-28-01-1994:1.15
	Release:1.14
	mlworks-beta-01-09-1993:1.14;
locks; strict;
comment	@ * @;


1.32
date	95.10.18.14.10.20;	author nickb;	state Exp;
branches
	1.32.1.1
	1.32.2.1
	1.32.3.1
	1.32.4.1
	1.32.5.1
	1.32.6.1
	1.32.7.1
	1.32.8.1
	1.32.9.1
	1.32.10.1
	1.32.11.1;
next	1.31;

1.31
date	95.05.29.16.31.58;	author daveb;	state Exp;
branches;
next	1.30;

1.30
date	95.04.28.10.38.01;	author daveb;	state Exp;
branches;
next	1.29;

1.29
date	95.04.18.14.19.02;	author daveb;	state Exp;
branches;
next	1.28;

1.28
date	95.03.31.15.29.02;	author daveb;	state Exp;
branches;
next	1.27;

1.27
date	95.03.16.18.43.43;	author daveb;	state Exp;
branches;
next	1.26;

1.26
date	95.03.15.15.22.31;	author daveb;	state Exp;
branches;
next	1.25;

1.25
date	95.03.10.14.51.18;	author daveb;	state Exp;
branches;
next	1.24;

1.24
date	95.03.02.14.39.48;	author daveb;	state Exp;
branches;
next	1.23;

1.23
date	95.01.13.12.14.49;	author daveb;	state Exp;
branches;
next	1.22;

1.22
date	94.07.29.15.54.22;	author daveb;	state Exp;
branches;
next	1.21;

1.21
date	94.07.18.16.58.34;	author daveb;	state Exp;
branches;
next	1.20;

1.20
date	94.07.14.15.35.28;	author daveb;	state Exp;
branches;
next	1.19;

1.19
date	94.06.30.14.37.28;	author daveb;	state Exp;
branches;
next	1.18;

1.18
date	94.06.21.12.26.55;	author daveb;	state Exp;
branches;
next	1.17;

1.17
date	94.02.23.19.51.50;	author daveb;	state Exp;
branches;
next	1.16;

1.16
date	94.01.28.16.27.35;	author matthew;	state Exp;
branches;
next	1.15;

1.15
date	93.11.25.14.18.37;	author matthew;	state Exp;
branches;
next	1.14;

1.14
date	93.06.03.17.54.23;	author daveb;	state Exp;
branches
	1.14.1.1;
next	1.13;

1.13
date	93.05.10.16.59.08;	author daveb;	state Exp;
branches;
next	1.12;

1.12
date	93.05.10.10.30.47;	author daveb;	state Exp;
branches;
next	1.11;

1.11
date	93.05.06.14.38.30;	author matthew;	state Exp;
branches;
next	1.10;

1.10
date	93.05.04.15.29.29;	author matthew;	state Exp;
branches;
next	1.9;

1.9
date	93.04.02.14.34.36;	author matthew;	state Exp;
branches;
next	1.8;

1.8
date	93.03.30.11.13.31;	author matthew;	state Exp;
branches;
next	1.7;

1.7
date	93.03.26.14.40.37;	author matthew;	state Exp;
branches;
next	1.6;

1.6
date	93.03.19.15.50.45;	author matthew;	state Exp;
branches;
next	1.5;

1.5
date	93.03.18.18.05.39;	author matthew;	state Exp;
branches;
next	1.4;

1.4
date	93.03.15.16.20.56;	author matthew;	state Exp;
branches;
next	1.3;

1.3
date	93.03.10.13.25.27;	author matthew;	state Exp;
branches;
next	1.2;

1.2
date	93.03.09.15.23.50;	author matthew;	state Exp;
branches;
next	1.1;

1.1
date	93.03.02.18.29.53;	author daveb;	state Exp;
branches;
next	;

1.14.1.1
date	93.06.03.17.54.23;	author jont;	state Exp;
branches;
next	;

1.32.1.1
date	96.09.13.11.16.36;	author hope;	state Exp;
branches;
next	;

1.32.2.1
date	96.10.07.16.06.29;	author hope;	state Exp;
branches;
next	;

1.32.3.1
date	96.10.17.11.24.44;	author hope;	state Exp;
branches;
next	;

1.32.4.1
date	96.11.14.12.49.35;	author hope;	state Exp;
branches
	1.32.4.1.1.1;
next	;

1.32.4.1.1.1
date	96.11.28.15.00.50;	author hope;	state Exp;
branches;
next	;

1.32.5.1
date	96.11.22.18.09.11;	author hope;	state Exp;
branches;
next	;

1.32.6.1
date	96.12.17.17.47.50;	author hope;	state Exp;
branches
	1.32.6.1.1.1;
next	;

1.32.6.1.1.1
date	97.02.24.11.37.36;	author hope;	state Exp;
branches;
next	;

1.32.7.1
date	96.12.18.09.41.50;	author hope;	state Exp;
branches;
next	;

1.32.8.1
date	97.05.12.10.34.18;	author hope;	state Exp;
branches
	1.32.8.1.1.1
	1.32.8.1.2.1
	1.32.8.1.3.1;
next	;

1.32.8.1.1.1
date	97.07.28.18.19.21;	author daveb;	state Exp;
branches
	1.32.8.1.1.1.1.1;
next	;

1.32.8.1.1.1.1.1
date	97.10.07.11.44.29;	author jkbrook;	state Exp;
branches;
next	;

1.32.8.1.2.1
date	97.09.08.17.12.56;	author daveb;	state Exp;
branches;
next	;

1.32.8.1.3.1
date	97.09.09.14.08.35;	author daveb;	state Exp;
branches;
next	;

1.32.9.1
date	97.09.10.19.23.51;	author brucem;	state Exp;
branches;
next	;

1.32.10.1
date	97.09.11.20.54.45;	author daveb;	state Exp;
branches;
next	;

1.32.11.1
date	99.04.01.17.56.47;	author daveb;	state Exp;
branches;
next	;


desc
@ Defines types used elsewhere in this directory.
@


1.32
log
@Add profiler.
@
text
@(* Types for passing to the shell and listener creation functions.
 *
 * Copyright (C) 1993 Harlequin Ltd.
 *
 * $Log: shell_types.sml,v $
 *  Revision 1.31  1995/05/29  16:31:58  daveb
 *  Added user_preferences field to SHELL_DATA.
 *
 *  Revision 1.30  1995/04/28  10:38:01  daveb
 *  Moved all the user_context stuff from ShellTypes into a separate file.
 *
 *  Revision 1.29  1995/04/18  14:19:02  daveb
 *  Added set_context_name.
 *  
 *  Revision 1.28  1995/03/31  15:29:02  daveb
 *  Added history number to each history item.
 *  
 *  Revision 1.27  1995/03/16  18:43:43  daveb
 *  Merged get_context_name and string_context_name.
 *  
 *  Revision 1.26  1995/03/15  15:22:31  daveb
 *  Changed ShellData to hold a single user_context instead of a stack.
 *  
 *  Revision 1.25  1995/03/10  14:51:18  daveb
 *  Added a current selection to the user_context type, and functions
 *  to set and get this, and a registry for automatic update of a tool's
 *  current selection.
 *  
 *  Revision 1.24  1995/03/02  14:39:48  daveb
 *  Added context to history item type.  Added process_result function.
 *  
 *  Revision 1.23  1995/01/13  12:14:49  daveb
 *  Replaced Option structure with references to MLWorks.Option.
 *  
 *  Revision 1.22  1994/07/29  15:54:22  daveb
 *  Added get_current_preferences.
 *  
 *  Revision 1.21  1994/07/18  16:58:34  daveb
 *  Added register of update functions to user contexts.
 *  
 *  Revision 1.20  1994/07/14  15:35:28  daveb
 *  mk_xinterface_fn now has the type Podium_.ListenerArgs -> bool -> unit.
 *  
 *  Revision 1.19  1994/06/30  14:37:28  daveb
 *  Made source_map a concrete type, added [sg]et_saved_file_name.
 *  
 *  Revision 1.18  1994/06/21  12:26:55  daveb
 *  Replaced ContextRefs with user_contexts.  These store info about the
 *  evaluations done in the current user context, as well as the aggregate
 *  context.
 * 
 *  Revision 1.17  1994/02/23  19:51:50  daveb
 *  Removing getContextId.
 *  
 *  Revision 1.16  1994/01/28  16:27:35  matthew
 *  Improvements to error locations
 *  
 *  Revision 1.15  1993/11/25  14:18:37  matthew
 *  Moved exception DebuggerTrapped from Shell for easier use elsewhere.
 *  
 *  Revision 1.14  1993/06/03  17:54:23  daveb
 *  Removed the context field from the prompter.
 *  
 *  Revision 1.13  1993/05/10  16:59:08  daveb
 *  Added code to create, store and retreive an initial contextref.
 *  
 *  Revision 1.12  1993/05/10  10:30:47  daveb
 *  Removed error_info field from ListenerArgs, ShellData and Incremental.options
 *  
 *  Revision 1.11  1993/05/06  14:38:30  matthew
 *  Simplified.
 *  
 *  Revision 1.10  1993/05/04  15:29:29  matthew
 *  Changed context ref handling
 *  
 *  Revision 1.9  1993/04/02  14:34:36  matthew
 *  Signature changes
 *  
 *  Revision 1.8  1993/03/30  11:13:31  matthew
 *  Added ShellState
 *  Changed prompter function
 *  Added shell_data_ref and with_shell_state
 *  
 *  Revision 1.7  1993/03/26  14:40:37  matthew
 *  Added break function field
 *  changed context ref in ShellData to a list of context refs
 *  
 *  Revision 1.6  1993/03/19  15:50:45  matthew
 *  Added copy_listener_args
 *  
 *  Revision 1.5  1993/03/18  18:05:39  matthew
 *  Added output_fn field to shell_data
 *  
 *  Revision 1.4  1993/03/15  16:20:56  matthew
 *  Simplified types
 *  
 *  Revision 1.3  1993/03/10  13:25:27  matthew
 *  Simplified debugger interface
 *  
 *  Revision 1.2  1993/03/09  15:23:50  matthew
 *  Options & Info changes
 *  Added ShellData type
 *  
 *  Revision 1.1  1993/03/02  18:29:53  daveb
 *  Initial revision
 *  
 *
 *)

require "../main/options";

signature SHELL_TYPES =
sig
  structure Options : OPTIONS

  type preferences
  type user_preferences
  type user_options
  type Context
     
  type user_context

  datatype ListenerArgs = 
    LISTENER_ARGS of
     {user_context: user_context,
      user_options : user_options,
      user_preferences : user_preferences,
      prompter :
        {line : int, subline : int, name : string, topdec : int} -> string,
      mk_xinterface_fn : ListenerArgs -> bool -> unit}

  val new_options: user_options * user_context -> Options.options

  (* this is the data used by each shell *)
  datatype ShellData =
    SHELL_DATA of
      {get_user_context: unit -> user_context,
       user_options : user_options,
       user_preferences: user_preferences,
       prompter :
         {line : int, subline : int, name : string, topdec : int} -> string,
       debugger :
         (MLWorks.Internal.Value.T -> MLWorks.Internal.Value.T) ->
         (MLWorks.Internal.Value.T -> MLWorks.Internal.Value.T),
       profiler : MLWorks.Profile.profile -> unit,
       exit_fn : int -> unit,
       x_running : bool,
       mk_xinterface_fn : ListenerArgs -> bool -> unit,
       (* This is used for restarting a saved image *)
       mk_tty_listener : ListenerArgs -> int}

  val get_user_options : ShellData -> user_options
  val get_user_preferences : ShellData -> user_preferences
  val get_current_context : ShellData -> Context
  val get_user_context : ShellData -> user_context

  val get_current_options : ShellData -> Options.options
  val get_current_preferences : ShellData -> preferences
  val get_current_prompter :
    ShellData -> ({line : int, subline : int, name : string, topdec : int}
		  -> string)
  val get_current_profiler : ShellData -> (MLWorks.Profile.profile -> unit)

  val get_current_print_options : ShellData -> Options.print_options
  val get_listener_args : ShellData -> ListenerArgs

  val shell_data_ref : ShellData ref

  val with_shell_data : ShellData -> (unit -> 'a) -> 'a

  val with_toplevel_name : string -> (unit -> 'a) -> 'a
  val get_current_toplevel_name : unit -> string

  exception DebuggerTrapped

end;
@


1.32.11.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a5 3
 * Revision 1.32  1995/10/18  14:10:20  nickb
 * Add profiler.
 *
@


1.32.10.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a5 3
 * Revision 1.32  1995/10/18  14:10:20  nickb
 * Add profiler.
 *
@


1.32.9.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a5 3
 * Revision 1.32  1995/10/18  14:10:20  nickb
 * Add profiler.
 *
@


1.32.8.1
log
@branched from 1.32
@
text
@a5 3
 * Revision 1.32  1995/10/18  14:10:20  nickb
 * Add profiler.
 *
@


1.32.8.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a5 3
 * Revision 1.32.8.1  1997/05/12  10:34:18  hope
 * branched from 1.32
 *
@


1.32.8.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a5 3
 * Revision 1.32.8.1  1997/05/12  10:34:18  hope
 * branched from 1.32
 *
@


1.32.8.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a5 3
 * Revision 1.32.8.1  1997/05/12  10:34:18  hope
 * branched from 1.32
 *
@


1.32.8.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a5 3
 * Revision 1.32.8.1.1.1  1997/07/28  18:19:21  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.32.7.1
log
@branched from 1.32
@
text
@a5 3
 * Revision 1.32  1995/10/18  14:10:20  nickb
 * Add profiler.
 *
@


1.32.6.1
log
@branched from 1.32
@
text
@a5 3
 * Revision 1.32  1995/10/18  14:10:20  nickb
 * Add profiler.
 *
@


1.32.6.1.1.1
log
@branched from 1.32.6.1
@
text
@a5 3
 * Revision 1.32.6.1  1996/12/17  17:47:50  hope
 * branched from 1.32
 *
@


1.32.5.1
log
@branched from 1.32
@
text
@a5 3
 * Revision 1.32  1995/10/18  14:10:20  nickb
 * Add profiler.
 *
@


1.32.4.1
log
@branched from 1.32
@
text
@a5 3
 * Revision 1.32  1995/10/18  14:10:20  nickb
 * Add profiler.
 *
@


1.32.4.1.1.1
log
@branched from 1.32.4.1
@
text
@a5 3
 * Revision 1.32.4.1  1996/11/14  12:49:35  hope
 * branched from 1.32
 *
@


1.32.3.1
log
@branched from 1.32
@
text
@a5 3
 * Revision 1.32  1995/10/18  14:10:20  nickb
 * Add profiler.
 *
@


1.32.2.1
log
@branched from 1.32
@
text
@a5 3
 * Revision 1.32  1995/10/18  14:10:20  nickb
 * Add profiler.
 *
@


1.32.1.1
log
@branched from 1.32
@
text
@a5 3
 * Revision 1.32  1995/10/18  14:10:20  nickb
 * Add profiler.
 *
@


1.31
log
@Added user_preferences field to SHELL_DATA.
@
text
@d6 3
d145 1
d162 1
@


1.30
log
@Moved all the user_context stuff from ShellTypes into a separate file.
@
text
@d6 3
d114 1
d124 1
d129 2
d134 1
a134 1
      {user_context: user_context ref,
d136 1
d149 1
@


1.29
log
@Added set_context_name.
@
text
@d6 3
a104 1
require "../main/info";
a108 1
  structure Info : INFO
a111 1
  type IncrementalOptions
a112 1
  type Result
a114 43
  type ('a, 'b) map
  type ContextName
  type identifier

  datatype history_entry =
    ITEM of int * identifier * Context * string * string

  datatype source_map = MAP of (identifier, string) map

  (* Each user_context contains the full incremental context used by the
     compiler, a second context containing just the identifiers defined in
     this user_context (used by the browser), a list for the history widget,
     and a map from identifiers to their source, all in the same ref so that
     they can be updated together.  This is the information returned and set
     by the [gs]et_context_info and [gs]et_user_context_info functions.

     Two more references hold registers of update and select functions.  These
     are called when the context is updated or the current selection is
     changed.  They can be used to update a context browser or similar tool.
     The add_update_fn, remove_update_fn, add_select_fn and remove_select_fn
     functions affect these registers.

     User contexts also contain the name of the context, a flag that indicates
     whether the context is constant, which file the history for that context
     has been saved in (if any) and the number of times that the context has
     been copied (which is used by the naming scheme).

     Keeping the per-user_context info in an incremental context keeps the
     option open of merging contexts.  Someday the history representation will
     change to handle modules better. *)

  val getCurrentContexts : unit -> user_context list
  val getNewInitialContext : unit -> user_context
  val copyUserContext : user_context -> user_context

  val makeInitialUserContext : Context * string -> user_context

  val get_saved_file_name : user_context -> string MLWorks.Option.option

  val set_saved_file_name : user_context * string -> unit

  val get_context_info :
    user_context -> (Context * Context * history_entry list * source_map)
a115 34
  val set_context_info :
    user_context * (Context * Context * history_entry list * source_map) -> unit

  val get_context : user_context -> Context

  val set_selected : user_context * user_options * history_entry -> unit
  val get_selected : user_context * user_options
		     -> history_entry MLWorks.Option.option

  (* update functions are associated with an abstract key type, so that
     they can be removed later. *)
  type register_key

  val add_update_fn : user_context * (unit -> unit) -> register_key

  val remove_update_fn : user_context * register_key -> unit

  val add_select_fn :
    user_context * ((history_entry -> unit) * (unit -> user_options))
    -> register_key
  (* add_select_fn (c, (select_fn, mk_user_options)).  The current
     settings of the user options are checked before calling the callback. *)

  val remove_select_fn : user_context * register_key -> unit

  val is_const_context : user_context -> bool

  val set_context_name : user_context * string -> unit
  val get_context_name : user_context -> string

  val process_result :
    string * Result * user_context * Options.options * (string -> unit)
    -> unit

a139 1
  val make_incremental_options : ShellData -> IncrementalOptions
a158 1

@


1.28
log
@Added history number to each history item.
@
text
@d6 3
a149 1
  val namedCopyUserContext : user_context * string -> user_context
d187 2
a188 1
  val context_name : user_context -> string
@


1.27
log
@Merged get_context_name and string_context_name.
@
text
@d6 33
a38 30
Revision 1.26  1995/03/15  15:22:31  daveb
Changed ShellData to hold a single user_context instead of a stack.

Revision 1.25  1995/03/10  14:51:18  daveb
Added a current selection to the user_context type, and functions
to set and get this, and a registry for automatic update of a tool's
current selection.

Revision 1.24  1995/03/02  14:39:48  daveb
Added context to history item type.  Added process_result function.

Revision 1.23  1995/01/13  12:14:49  daveb
Replaced Option structure with references to MLWorks.Option.

Revision 1.22  1994/07/29  15:54:22  daveb
Added get_current_preferences.

Revision 1.21  1994/07/18  16:58:34  daveb
Added register of update functions to user contexts.

Revision 1.20  1994/07/14  15:35:28  daveb
mk_xinterface_fn now has the type Podium_.ListenerArgs -> bool -> unit.

Revision 1.19  1994/06/30  14:37:28  daveb
Made source_map a concrete type, added [sg]et_saved_file_name.

 * Revision 1.18  1994/06/21  12:26:55  daveb
 * Replaced ContextRefs with user_contexts.  These store info about the
 * evaluations done in the current user context, as well as the aggregate
 * context.
d117 2
a118 1
  datatype history_entry = ITEM of identifier * Context * string * string
@


1.26
log
@Changed ShellData to hold a single user_context instead of a stack.
@
text
@d6 3
d174 2
a175 2
  (* add_select_fn (c, (select_fn, mk_user_options)).  The current settings
     of the user options are checked before calling the callback. *)
d181 1
a181 3
  val get_context_name : user_context -> ContextName

  val string_context_name : ContextName -> string
@


1.25
log
@Added a current selection to the user_context type, and functions
to set and get this, and a registry for automatic update of a tool's
current selection.
@
text
@d6 5
d188 5
a192 5
    {user_context : user_context,
     user_options : user_options,
     prompter :
       {line : int, subline : int, name : string, topdec : int} -> string,
     mk_xinterface_fn : ListenerArgs -> bool -> unit}
d197 12
a208 12
    {context_stack : user_context list ref,
     user_options : user_options,
     prompter :
       {line : int, subline : int, name : string, topdec : int} -> string,
     debugger :
       (MLWorks.Internal.Value.T -> MLWorks.Internal.Value.T) ->
       (MLWorks.Internal.Value.T -> MLWorks.Internal.Value.T),
     exit_fn : int -> unit,
     x_running : bool,
     mk_xinterface_fn : ListenerArgs -> bool -> unit,
     (* This is just used for restarting a saved image *)
     mk_tty_listener : ListenerArgs -> int}
a213 5

  val get_user_context_info :
    ShellData -> (Context * Context * history_entry list * source_map)
  val set_user_context_info :
    ShellData * (Context * Context * history_entry list * source_map) -> unit
@


1.24
log
@Added context to history item type.  Added process_result function.
@
text
@d6 3
d117 5
a121 4
     A second reference holds a register of update functions.  These are
     called when the context is updated.  They can be used to update a
     context browser or similar tool.  The add_update_fn and remove_update_fn
     functions affest this register.
d151 5
a155 1
  (* update functions are assoicated with an abstract key type, so that
d157 5
a161 1
  type update_fn_key
d163 5
a167 1
  val add_update_fn : user_context * (unit -> unit) -> update_fn_key
d169 1
a169 1
  val remove_update_fn : user_context * update_fn_key -> unit
@


1.23
log
@Replaced Option structure with references to MLWorks.Option.
@
text
@d6 3
d96 1
d102 3
a104 1
  datatype history_entry = ITEM of identifier * string * string
d160 4
@


1.22
log
@Added get_current_preferences.
@
text
@d6 3
a81 1
require "../utils/option";
a86 1
  structure Option : OPTION
d129 1
a129 1
  val get_saved_file_name : user_context -> string Option.opt
@


1.21
log
@Added register of update functions to user contexts.
@
text
@d6 3
d88 1
d189 1
@


1.20
log
@mk_xinterface_fn now has the type Podium_.ListenerArgs -> bool -> unit.
@
text
@d6 3
d103 9
a111 4
     User contexts also contain the name of the context, whether it is
     constant, which file the history for that context has been saved in
     (if any) and the number of times that the context has been copied
     (which is used by the naming scheme).
d135 8
@


1.19
log
@Made source_map a concrete type, added [sg]et_saved_file_name.
@
text
@d6 3
d140 1
a140 1
     mk_xinterface_fn : ListenerArgs -> unit -> unit}
d154 1
a154 1
     mk_xinterface_fn : ListenerArgs -> unit -> unit,
@


1.18
log
@Replaced ContextRefs with user_contexts.  These store info about the
evaluations done in the current user context, as well as the aggregate
context.
@
text
@d6 5
d84 1
d88 1
a88 1
  type source_map (* = (Compiler.identifier, string) map *)
d98 2
a99 1
     constant, and the number of times that the context has been copied
d112 4
@


1.17
log
@Removing getContextId.
@
text
@d6 15
a20 12
Revision 1.16  1994/01/28  16:27:35  matthew
Improvements to error locations

Revision 1.15  1993/11/25  14:18:37  matthew
> Moved exception DebuggerTrapped from Shell for easier use elsewhere.

Revision 1.14  1993/06/03  17:54:23  daveb
Removed the context field from the prompter.

Revision 1.13  1993/05/10  16:59:08  daveb
Added code to create, store and retreive an initial contextref.

d78 1
d80 3
a82 1
  type ContextRef
d84 6
a89 4
  val getCurrentContexts : unit -> ContextRef list
  val getNewInitialContext : unit -> ContextRef
  val copyContextRef : ContextRef -> ContextRef
  val namedCopyContextRef : ContextRef * string -> ContextRef
d91 3
a93 1
  val makeInitialContextRef : Context * string -> ContextRef
d95 3
a97 2
  val get_context_ref : ContextRef -> Context ref
  val set_context_ref : ContextRef * Context -> unit
d99 4
a102 1
  val get_context_name : ContextRef -> ContextName
d104 14
d122 1
a122 1
    {context_ref : ContextRef,
d131 1
a131 1
    {context_stack : ContextRef list ref,
d147 7
a153 1
  val set_current_context : ShellData * Context -> unit
a160 1
  val get_shell_context_ref : ShellData -> ContextRef
@


1.16
log
@Improvements to error locations
@
text
@d6 3
a79 1
  val getContextId : unit -> int
@


1.15
log
@> Moved exception DebuggerTrapped from Shell for easier use elsewhere.
@
text
@d6 3
d130 4
@


1.14
log
@Removed the context field from the prompter.
@
text
@d6 3
d127 2
@


1.14.1.1
log
@Fork for bug fixing
@
text
@a5 3
Revision 1.14  1993/06/03  17:54:23  daveb
Removed the context field from the prompter.

@


1.13
log
@Added code to create, store and retreive an initial contextref.
@
text
@d6 3
d88 2
a89 1
     prompter : {line : int, subline : int, name : string, topdec : int, context : int} -> string,
d97 2
a98 1
     prompter : {line : int, subline : int, name : string, topdec : int, context : int} -> string,
d100 2
a101 2
     (MLWorks.Internal.Value.T -> MLWorks.Internal.Value.T) ->
     (MLWorks.Internal.Value.T -> MLWorks.Internal.Value.T),
d113 3
a115 1
  val get_current_prompter : ShellData -> ({line : int, subline : int, name : string, topdec : int, context : int} -> string)
@


1.12
log
@Removed error_info field from ListenerArgs, ShellData and Incremental.options
@
text
@d6 40
a45 37
Revision 1.11  1993/05/06  14:38:30  matthew
Simplified.

Revision 1.10  1993/05/04  15:29:29  matthew
Changed context ref handling

Revision 1.9  1993/04/02  14:34:36  matthew
Signature changes

Revision 1.8  1993/03/30  11:13:31  matthew
Added ShellState
Changed prompter function
Added shell_data_ref and with_shell_state

Revision 1.7  1993/03/26  14:40:37  matthew
Added break function fiels
 changed context ref in ShellData to a list of context refs

Revision 1.6  1993/03/19  15:50:45  matthew
Added copy_listener_args

Revision 1.5  1993/03/18  18:05:39  matthew
Added output_fn field to shell_data

Revision 1.4  1993/03/15  16:20:56  matthew
Simplified types

Revision 1.3  1993/03/10  13:25:27  matthew
Simplified debugger interface

Revision 1.2  1993/03/09  15:23:50  matthew
Options & Info changes
Added ShellData type

Revision 1.1  1993/03/02  18:29:53  daveb
Initial revision

d67 1
d72 1
a72 1
  val makeContextRef : Context * string -> ContextRef
@


1.11
log
@Simplified.
@
text
@d6 3
a80 1
     error_info : Info.options,
a88 2
     output_fn : string -> unit,
     error_info : Info.options,
a103 1
  val get_error_info : ShellData -> Info.options
@


1.10
log
@Changed context ref handling
@
text
@d6 3
a52 2
  type printer_descriptor
  type print_method_table
a76 1
     print_method_table_ref : print_method_table ref,
a78 1
     name_monitor : (string -> unit) Option.T,
a81 6
  datatype ShellState =
    SHELL_STATE of
    {context_ref : ContextRef,
     print_method_table_ref : print_method_table ref,
     user_options : user_options}

d85 2
a86 1
    {state_stack : ShellState list ref,
a88 1
     name_monitor : (string -> unit) Option.T,
a98 2
  val copy_shell_state : ShellState -> ShellState

a99 1
  val make_printer_descriptor : ShellData -> printer_descriptor
a102 1
  val get_current_print_method_table : ShellData -> print_method_table
@


1.9
log
@Signature changes
@
text
@d6 3
d56 17
d75 1
a75 1
    {context_ref : Context ref,
d85 1
a85 1
    {context_ref : Context ref,
d120 1
a120 1
  val get_context_ref : ShellData -> Context ref
@


1.8
log
@Added ShellState
Changed prompter function
Added shell_data_ref and with_shell_state
@
text
@d6 5
d37 3
a39 2
require "../debugger/value_printer";
require "incremental";
d43 3
a45 1
  structure Incremental: INCREMENTAL
d50 2
a51 1

d55 1
a55 1
    {context_ref : Incremental.Context ref,
d58 2
a59 2
     error_info : Incremental.InterMake.Compiler.Info.options,
     name_monitor : (string -> unit) Incremental.InterMake.FileName.Option.T,
d65 1
a65 1
    {context_ref : Incremental.Context ref,
d74 2
a75 2
     error_info : Incremental.InterMake.Compiler.Info.options,
     name_monitor : (string -> unit) Incremental.InterMake.FileName.Option.T,
d88 1
a88 1
  val make_incremental_options : ShellData -> Incremental.options
d91 2
a92 2
  val get_current_context : ShellData -> Incremental.Context
  val set_current_context : ShellData * Incremental.Context -> unit
d94 2
a95 2
  val get_current_options : ShellData -> Incremental.InterMake.Inter_EnvTypes.Options.options
  val get_error_info : ShellData -> Incremental.InterMake.Compiler.Info.options
d98 1
a98 1
  val get_current_print_options : ShellData -> Incremental.InterMake.Inter_EnvTypes.Options.print_options
d100 1
a100 1
  val get_context_ref : ShellData -> Incremental.Context ref
@


1.7
log
@Added break function fiels
 changed context ref in ShellData to a list of context refs
@
text
@d6 4
d46 1
a46 2
    {options_ref : Incremental.InterMake.Inter_EnvTypes.Options.options ref,
     context_ref : Incremental.Context ref,
d51 1
a51 1
     prompter : {line : int, subline : int, name : string, topdec : int} -> string,
d54 6
d63 1
a63 3
    {options_ref : Incremental.InterMake.Inter_EnvTypes.Options.options ref,
     contexts : (Incremental.Context ref) list ref,
     print_method_table_ref : print_method_table ref,
a64 1
     user_options : user_options,
d67 1
a67 2
     prompter : {line : int, subline : int, name : string, topdec : int} -> string,
     break_function : string -> unit,
a68 1
     string ->
d74 1
d77 2
d81 1
d87 1
a87 1
  val get_current_prompter : ShellData -> ({line : int, subline : int, name : string, topdec : int} -> string)
d93 1
a93 1
  val copy_listener_args : ListenerArgs -> ListenerArgs
d95 1
a95 1
  val update_options : ShellData -> unit
@


1.6
log
@Added copy_listener_args
@
text
@d6 3
a40 1

d55 1
a55 1
     context_ref : Incremental.Context ref,
d62 1
@


1.5
log
@Added output_fn field to shell_data
@
text
@d6 3
d81 2
@


1.4
log
@Simplified types
@
text
@d6 3
d52 1
@


1.3
log
@Simplified debugger interface
@
text
@d6 3
d30 14
d52 2
a53 1
     debugger	:
d57 5
a61 3
     prompter : ({line : int, subline : int, name : string, topdec : int} -> string)
     }
     
d72 1
a72 2
  val copy_shell_data : ShellData -> ShellData
  val copy_shell_data_with_context : ShellData * Incremental.Context -> ShellData
a76 44
  datatype ListenerArgs = 
    LISTENER_ARGS of
    ShellData * (ShellData -> unit -> unit)

(*
      Incremental.options *
      Incremental.Context * 
      ({line : int, subline : int, name : string, topdec : int} -> string) *
      printer_descriptor *
      ( user_options *
        printer_descriptor *
        Incremental.options *
        Incremental.Context ref *
        ({line : int, subline : int, name : string, topdec : int} -> string) ->
          unit -> unit
      )
*)

  (* ShellArgs doesn't include a context, because sometimes a Context ref
     is required and sometimes a Context is sufficient. *)
  datatype ShellArgs =
    SHELL_ARGS of
    ShellData * 
    (int -> unit)
    * bool 
    * (ShellData -> unit -> unit) 
    * (ListenerArgs -> int)
(*
      ({line : int, subline : int, name : string, topdec : int} -> string) *
      Incremental.options *
      printer_descriptor *
      user_options *
      (int -> unit) *   (* exit function *)
      bool *            (* can we start X? *)
      ( user_options *
        printer_descriptor *
        Incremental.options *
        Incremental.Context ref *
        ({line : int, subline : int, name : string, topdec : int} -> string) ->
          unit -> unit
      ) *
      (ListenerArgs -> int)
*)

a77 1

@


1.2
log
@Options & Info changes
Added ShellData type
@
text
@d6 4
d36 1
a36 1
     (Incremental.options * Incremental.Context ref * string) ->
@


1.1
log
@Initial revision
@
text
@d5 4
a8 1
 * $Log$
d20 1
d23 30
a52 1
  (* Clearly these types are far too complicated *)
d54 1
a54 1
  datatype ListenerArgs =
d56 5
a60 4
      ( Incremental.InterMake.Compiler.MirTypes.options *
        Incremental.InterMake.options
      ) *
      Incremental.context * 
d66 1
a66 2
        Incremental.InterMake.Compiler.BasisTypes.Info.options *
        Incremental.context ref *
d70 1
d72 2
a73 2
  (* ShellArgs doesn't include a context, because sometimes a context ref
     is required and sometimes a context is sufficient. *)
d76 6
d91 1
a91 2
        Incremental.InterMake.Compiler.BasisTypes.Info.options *
        Incremental.context ref *
d96 2
@
