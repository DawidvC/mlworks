head	1.65;
access;
symbols
	MLW_daveb_inline_1_4_99:1.65.3
	MLWorks_21c0_1999_03_25:1.65
	MLWorks_20c1_1998_08_20:1.65
	MLWorks_20c0_1998_08_04:1.65
	MLWorks_20b2c2_1998_06_19:1.65
	MLWorks_20b2_Windows_1998_06_12:1.65
	MLWorks_20b1c1_1998_05_07:1.65
	MLWorks_20b0_1998_04_07:1.65
	MLWorks_20b0_1998_03_20:1.65
	MLWorks_20m2_1998_02_16:1.65
	MLWorks_20m1_1997_10_23:1.65
	MLWorks_11r1:1.64.8.1.1.1.1
	MLWorks_workspace_97:1.65.2
	MLWorks_dt_wizard:1.65.1
	MLWorks_11c0_1997_09_09:1.64.8.1.1.1
	MLWorks_10r3:1.64.8.1.3
	MLWorks_10r2_551:1.64.8.1.2
	MLWorks_11:1.64.8.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.64.8.1
	MLWorks_20m0_1997_06_20:1.65
	MLWorks_1_0_r2c2_1997_06_14:1.64.8.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.64.8.1
	MLWorks_1_0_r2c1_1997_05_12:1.64.8
	MLWorks_BugFix_1997_04_24:1.64
	MLWorks_1_0_r2_Win32_1997_04_11:1.64
	MLWorks_1_0_r2_Unix_1997_04_04:1.64
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.64.6.1.1
	MLWorks_gui_1996_12_18:1.64.7
	MLWorks_1_0_Win32_1996_12_17:1.64.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.64.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.64.4.1
	MLWorks_1_0_Irix_1996_11_28:1.64.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.64.5
	MLWorks_1_0_Unix_1996_11_14:1.64.4
	MLWorks_Open_Beta2_1996_10_11:1.64.3
	MLWorks_License_dev:1.64.2
	MLWorks_1_open_beta_1996_09_13:1.64.1
	MLWorks_Open_Beta_1996_08_22:1.64
	MLWorks_Beta_1996_07_02:1.64
	MLWorks_Beta_1996_06_07:1.64
	MLWorks_Beta_1996_06_06:1.64
	MLWorks_Beta_1996_06_05:1.64
	MLWorks_Beta_1996_06_03:1.64
	MLWorks_Beta_1996_05_31:1.64
	MLWorks_Beta_1996_05_30:1.64
	ML_beta_release_12/08/94:1.54
	ML_beta_release_03/08/94:1.54
	ML_revised_beta_release_25/05/94:1.52
	ML_final_beta_release_02/03/94:1.52
	mlworks-28-01-1994:1.50
	Release:1.47
	mlworks-beta-01-09-1993:1.47
	MLWorks-1-0-4-29/01/1993:1.29
	MLWorks-1-0-3-21/12/1992:1.29
	MLWorks-1-0-2-15/12/1992:1.26
	MLWorks-1-0-1-04/12/1992:1.26
	checkpoint_17_08_92:1.6;
locks; strict;
comment	@ * @;


1.65
date	97.05.06.09.27.59;	author jont;	state Exp;
branches
	1.65.1.1
	1.65.2.1
	1.65.3.1;
next	1.64;

1.64
date	96.01.08.16.26.10;	author nickb;	state Exp;
branches
	1.64.1.1
	1.64.2.1
	1.64.3.1
	1.64.4.1
	1.64.5.1
	1.64.6.1
	1.64.7.1
	1.64.8.1;
next	1.63;

1.63
date	95.12.07.15.19.35;	author jont;	state Exp;
branches;
next	1.62;

1.62
date	95.07.13.10.05.03;	author matthew;	state Exp;
branches;
next	1.61;

1.61
date	95.06.15.14.45.26;	author daveb;	state Exp;
branches;
next	1.60;

1.60
date	95.06.14.12.39.12;	author daveb;	state Exp;
branches;
next	1.59;

1.59
date	95.06.02.14.09.41;	author nickb;	state Exp;
branches;
next	1.58;

1.58
date	95.05.02.15.10.15;	author matthew;	state Exp;
branches;
next	1.57;

1.57
date	95.04.07.16.01.36;	author matthew;	state Exp;
branches;
next	1.56;

1.56
date	95.02.20.17.26.37;	author matthew;	state Exp;
branches;
next	1.55;

1.55
date	95.01.13.14.52.17;	author daveb;	state Exp;
branches;
next	1.54;

1.54
date	94.08.01.09.18.14;	author daveb;	state Exp;
branches;
next	1.53;

1.53
date	94.06.17.16.55.46;	author daveb;	state Exp;
branches;
next	1.52;

1.52
date	94.02.23.17.00.02;	author nosa;	state Exp;
branches;
next	1.51;

1.51
date	94.02.02.12.21.58;	author daveb;	state Exp;
branches;
next	1.50;

1.50
date	93.12.09.19.27.38;	author jont;	state Exp;
branches;
next	1.49;

1.49
date	93.11.23.10.09.56;	author daveb;	state Exp;
branches;
next	1.48;

1.48
date	93.10.12.16.20.27;	author matthew;	state Exp;
branches;
next	1.47;

1.47
date	93.08.06.14.45.51;	author nosa;	state Exp;
branches
	1.47.1.1;
next	1.46;

1.46
date	93.08.04.14.57.23;	author nosa;	state Exp;
branches;
next	1.45;

1.45
date	93.07.30.13.43.58;	author nosa;	state Exp;
branches;
next	1.44;

1.44
date	93.06.11.13.00.46;	author matthew;	state Exp;
branches;
next	1.43;

1.43
date	93.05.28.14.27.48;	author matthew;	state Exp;
branches;
next	1.42;

1.42
date	93.05.12.15.19.14;	author matthew;	state Exp;
branches;
next	1.41;

1.41
date	93.05.10.15.34.07;	author daveb;	state Exp;
branches;
next	1.40;

1.40
date	93.05.07.17.14.11;	author matthew;	state Exp;
branches;
next	1.39;

1.39
date	93.05.06.12.59.37;	author matthew;	state Exp;
branches;
next	1.38;

1.38
date	93.04.30.12.36.02;	author matthew;	state Exp;
branches;
next	1.37;

1.37
date	93.04.26.12.26.18;	author matthew;	state Exp;
branches;
next	1.36;

1.36
date	93.04.02.13.52.56;	author matthew;	state Exp;
branches;
next	1.35;

1.35
date	93.03.29.14.30.14;	author matthew;	state Exp;
branches;
next	1.34;

1.34
date	93.03.11.12.20.16;	author matthew;	state Exp;
branches;
next	1.33;

1.33
date	93.03.09.15.19.15;	author matthew;	state Exp;
branches;
next	1.32;

1.32
date	93.02.23.15.52.22;	author matthew;	state Exp;
branches;
next	1.31;

1.31
date	93.02.09.10.39.42;	author matthew;	state Exp;
branches;
next	1.30;

1.30
date	93.02.04.17.50.18;	author matthew;	state Exp;
branches;
next	1.29;

1.29
date	92.12.18.10.07.13;	author clive;	state Exp;
branches;
next	1.28;

1.28
date	92.12.17.11.37.24;	author clive;	state Exp;
branches;
next	1.27;

1.27
date	92.12.15.14.23.21;	author clive;	state Exp;
branches;
next	1.26;

1.26
date	92.11.27.14.52.28;	author clive;	state Exp;
branches;
next	1.25;

1.25
date	92.11.20.13.03.53;	author clive;	state Exp;
branches;
next	1.24;

1.24
date	92.11.17.11.44.54;	author matthew;	state Exp;
branches;
next	1.23;

1.23
date	92.11.12.14.51.06;	author clive;	state Exp;
branches;
next	1.22;

1.22
date	92.10.29.16.09.05;	author richard;	state Exp;
branches;
next	1.21;

1.21
date	92.10.27.11.04.59;	author clive;	state Exp;
branches;
next	1.20;

1.20
date	92.10.13.14.40.30;	author clive;	state Exp;
branches;
next	1.19;

1.19
date	92.10.06.13.21.08;	author clive;	state Exp;
branches;
next	1.18;

1.18
date	92.10.06.13.21.08;	author clive;	state Exp;
branches;
next	1.17;

1.17
date	92.09.10.14.26.50;	author richard;	state Exp;
branches;
next	1.16;

1.16
date	92.09.03.09.09.47;	author clive;	state Exp;
branches;
next	1.15;

1.15
date	92.08.26.19.02.19;	author richard;	state Exp;
branches;
next	1.14;

1.14
date	92.08.26.18.47.21;	author jont;	state Exp;
branches;
next	1.13;

1.13
date	92.08.26.12.32.00;	author clive;	state Exp;
branches;
next	1.12;

1.12
date	92.08.24.16.10.32;	author clive;	state Exp;
branches;
next	1.11;

1.11
date	92.08.21.09.22.49;	author clive;	state Exp;
branches;
next	1.10;

1.10
date	92.08.19.12.24.55;	author clive;	state Exp;
branches;
next	1.9;

1.9
date	92.08.19.10.46.27;	author clive;	state Exp;
branches;
next	1.8;

1.8
date	92.08.18.16.27.17;	author richard;	state Exp;
branches;
next	1.7;

1.7
date	92.08.17.10.43.16;	author clive;	state Exp;
branches;
next	1.6;

1.6
date	92.08.13.13.45.10;	author clive;	state Exp;
branches;
next	1.5;

1.5
date	92.08.10.11.39.31;	author clive;	state Exp;
branches;
next	1.4;

1.4
date	92.07.30.12.41.37;	author clive;	state Exp;
branches;
next	1.3;

1.3
date	92.07.16.16.17.22;	author clive;	state Exp;
branches;
next	1.2;

1.2
date	92.07.13.10.14.28;	author clive;	state Exp;
branches;
next	1.1;

1.1
date	92.06.22.15.20.54;	author clive;	state Exp;
branches;
next	;

1.47.1.1
date	93.08.06.14.45.51;	author jont;	state Exp;
branches;
next	1.47.1.2;

1.47.1.2
date	93.10.12.12.04.03;	author matthew;	state Exp;
branches;
next	;

1.64.1.1
date	96.09.13.11.11.22;	author hope;	state Exp;
branches;
next	;

1.64.2.1
date	96.10.07.16.02.08;	author hope;	state Exp;
branches;
next	;

1.64.3.1
date	96.10.17.11.20.23;	author hope;	state Exp;
branches;
next	;

1.64.4.1
date	96.11.14.12.43.58;	author hope;	state Exp;
branches
	1.64.4.1.1.1;
next	;

1.64.4.1.1.1
date	96.11.28.14.55.54;	author hope;	state Exp;
branches;
next	;

1.64.5.1
date	96.11.22.18.04.24;	author hope;	state Exp;
branches;
next	;

1.64.6.1
date	96.12.17.17.43.21;	author hope;	state Exp;
branches
	1.64.6.1.1.1;
next	;

1.64.6.1.1.1
date	97.02.24.11.32.16;	author hope;	state Exp;
branches;
next	;

1.64.7.1
date	96.12.18.09.37.20;	author hope;	state Exp;
branches;
next	;

1.64.8.1
date	97.05.12.10.29.30;	author hope;	state Exp;
branches
	1.64.8.1.1.1
	1.64.8.1.2.1
	1.64.8.1.3.1;
next	;

1.64.8.1.1.1
date	97.07.28.18.15.22;	author daveb;	state Exp;
branches
	1.64.8.1.1.1.1.1;
next	;

1.64.8.1.1.1.1.1
date	97.10.07.11.40.26;	author jkbrook;	state Exp;
branches;
next	;

1.64.8.1.2.1
date	97.09.08.17.08.52;	author daveb;	state Exp;
branches;
next	;

1.64.8.1.3.1
date	97.09.09.14.03.58;	author daveb;	state Exp;
branches;
next	;

1.65.1.1
date	97.09.10.19.18.29;	author brucem;	state Exp;
branches;
next	;

1.65.2.1
date	97.09.11.20.49.29;	author daveb;	state Exp;
branches;
next	;

1.65.3.1
date	99.04.01.17.53.14;	author daveb;	state Exp;
branches;
next	;


desc
@First version
@


1.65
log
@[Bug #30088]
Get rid of MLWorks.Option
@
text
@(* ml_debugger.sml the signature *)
(*
$Log: ml_debugger.sml,v $
 * Revision 1.64  1996/01/08  16:26:10  nickb
 * Change SIGNAL to INTERRUPT (interrupts aren't signals on Windows).
 *
 * Revision 1.63  1995/12/07  15:19:35  jont
 * Add functions to add and remove breakpoints from the table,
 * along with max hit counts
 *
 * Revision 1.62  1995/07/13  10:05:03  matthew
 * Removing Incremental structure
 *
Revision 1.61  1995/06/15  14:45:26  daveb
Hid the details of the WINDOWING type.

Revision 1.60  1995/06/14  12:39:12  daveb
Removed redundant parameters from ml_debugger, added a message_fn
parameter, and removed unnecessary currying.

Revision 1.59  1995/06/02  14:09:41  nickb
Add fatal signals.

Revision 1.58  1995/05/02  15:10:15  matthew
Removing script parameter from ml_debugger

Revision 1.57  1995/04/07  16:01:36  matthew
nothing much

Revision 1.56  1995/02/20  17:26:37  matthew
Changes to pervasive Frame structure

Revision 1.55  1995/01/13  14:52:17  daveb
Replaced Option structure with references to MLWorks.Option.

Revision 1.54  1994/08/01  09:18:14  daveb
Added preferences argument to ml_debugger.

Revision 1.53  1994/06/17  16:55:46  daveb
Replaced context_ref with context.

Revision 1.52  1994/02/23  17:00:02  nosa
Debugger scripts for tracing tool using debugger.

Revision 1.51  1994/02/02  12:21:58  daveb
CHanged substructure of InterMake.

Revision 1.50  1993/12/09  19:27:38  jont
Added copyright message

Revision 1.49  1993/11/23  10:09:56  daveb
Removed with_frame_wrap.  Changed type of with_start_frame so that callers
don't have to provide the frame.

Revision 1.48  1993/10/12  16:20:27  matthew
Merging bug fixes

Revision 1.47.1.2  1993/10/12  12:04:03  matthew
Added STACK_OVERFLOW parameter type

Revision 1.47.1.1  1993/08/06  14:45:51  jont
Fork for bug fixing

Revision 1.47  1993/08/06  14:45:51  nosa
Inspector invocation in debugger-window.

Revision 1.46  1993/08/04  14:57:23  nosa
Changed type of WINDOWING for ShowFrameInfo option in debugger window.

Revision 1.45  1993/07/30  13:43:58  nosa
Changed Option.T to Option.opt.

Revision 1.44  1993/06/11  13:00:46  matthew
Added function debugger continuation

Revision 1.43  1993/05/28  14:27:48  matthew
Added tty_ok option to WINDOWING

Revision 1.42  1993/05/12  15:19:14  matthew
 Added message function to Windowing debugger
Added with_frame_wrap

Revision 1.41  1993/05/10  15:34:07  daveb
Changed argument of ml_debugger from Incremental.options to Options.options.

Revision 1.40  1993/05/07  17:14:11  matthew
Added quit and continue options to windowing debugger.
Added global base frame and debugger_types

Revision 1.39  1993/05/06  12:59:37  matthew
>> Removed printer descriptors.
>> stringify_value now takes just a print_options object
>> .

Revision 1.38  1993/04/30  12:36:02  matthew
Changed type of WINDOWING datatype

Revision 1.37  1993/04/26  12:26:18  matthew
Removes BackTraceType type and the TRACE parameter option

Revision 1.36  1993/04/02  13:52:56  matthew
Removed Debugger_Types

Revision 1.35  1993/03/29  14:30:14  matthew
Removed current_module parameter from ml_debugger

Revision 1.34  1993/03/11  12:20:16  matthew
Signature revisions

Revision 1.33  1993/03/09  15:19:15  matthew
Options & Info changes

Revision 1.32  1993/02/23  15:52:22  matthew
Added BREAK option to parameter type.

Revision 1.31  1993/02/09  10:39:42  matthew
Typechecker structure changes

Revision 1.30  1993/02/04  17:50:18  matthew
Rationalised substructures.

Revision 1.29  1992/12/18  10:07:13  clive
We also pass the current module forward for the source_displayer

Revision 1.28  1992/12/17  11:37:24  clive
Changed debug info to have only module name - needed to pass module table through to window stuff

Revision 1.27  1992/12/15  14:23:21  clive
Allow the backtrace to stop at a particular frame

Revision 1.26  1992/11/27  14:52:28  clive
Debugger now takes a print_descriptor

Revision 1.25  1992/11/20  13:03:53  clive
Allowed messages for the 'c' and 'q' options

Revision 1.24  1992/11/17  11:44:54  matthew
Changed Error structure to Info

Revision 1.23  1992/11/12  14:51:06  clive
Tracing added again

Revision 1.22  1992/10/29  16:09:05  richard
The debugger can now be invoked by a signal or exception.
The MLWorks.Internal.Debugger structure has been removed.

Revision 1.21  1992/10/27  11:04:59  clive
Took out trace and added binding of frame arguments to it

Revision 1.20  1992/10/13  14:40:30  clive
Changes for windowing listener

Revision 1.19  1992/10/06  13:21:08  clive
Tynames now have a slot recording their definition point

Revision 1.18  1992/10/06  13:21:08  clive
Changes for the use of new shell

Revision 1.17  1992/09/10  14:26:50  richard
Created a type `information' which wraps up the debugger information
needed in so many parts of the compiler.

Revision 1.16  1992/09/03  09:09:47  clive
Added functionality to the value_printer

Revision 1.15  1992/08/26  19:02:19  richard
Rationalisation of the MLWorks structure.

Revision 1.14  1992/08/26  18:47:21  jont
Removed some redundant structures and sharing

Revision 1.13  1992/08/26  12:32:00  clive
Fixed a few bugs and added binding of frame arguments to it

Revision 1.12  1992/08/24  16:10:32  clive
Added details about leafness to the debug information

Revision 1.11  1992/08/21  09:22:49  clive
Added a loop inside the debugger

Revision 1.10  1992/08/19  12:24:55  clive
Added untrace

Revision 1.9  1992/08/19  10:46:27  clive
Changed to reflect changes to pervasive_library

Revision 1.8  1992/08/18  16:27:17  richard
 Changed coercion and the ml_value type in the pervasive environment.

Revision 1.7  1992/08/17  10:43:16  clive
Various improvements

Revision 1.6  1992/08/13  13:45:10  clive
Neatening up, plus changes due to lower level sharing changes

Revision 1.5  1992/08/10  11:39:31  clive
New sharing constraints after lower level changes

Revision 1.4  1992/07/30  12:41:37  clive
Working monomorphic version of trace

Revision 1.3  1992/07/16  16:17:22  clive
Made the debugger work better, and changes for the new interface to the runtime system

Revision 1.2  1992/07/13  10:14:28  clive
Support for interpreter

Revision 1.1  1992/06/22  15:20:54  clive
Initial revision

 * Copyright (c) 1993 Harlequin Ltd.
*)

require "../debugger/value_printer";

signature ML_DEBUGGER =
  sig
    structure ValuePrinter : VALUE_PRINTER

    datatype ('a, 'b)union = INL of 'a | INR of 'b
    type preferences

    val size_of_data_cache : int ref

    type debugger_window

    datatype TypeOfDebugger = 
      WINDOWING of debugger_window * (string -> unit) * bool
    | TERMINAL

    datatype parameter =
      INTERRUPT
    | FATAL_SIGNAL of int
    | EXCEPTION of exn
    | BREAK of string
    | STACK_OVERFLOW

(*
    | TRACE of MLWorks.Internal.Value.ml_value * MLWorks.Internal.Value.ml_value
*)

    datatype Continuation =
      POSSIBLE of string * Continuation_action
    | NOT_POSSIBLE
    and Continuation_action =
      NORMAL_RETURN
      | DO_RAISE of exn
      | FUN of (unit -> unit)

    val get_start_frame : unit -> MLWorks.Internal.Value.Frame.frame

    val with_start_frame :
      (MLWorks.Internal.Value.Frame.frame -> 'a) -> 'a

    val with_debugger_type :
      TypeOfDebugger ->
      (MLWorks.Internal.Value.Frame.frame -> 'a) ->
      'a

    val get_debugger_type : unit -> TypeOfDebugger

    val ml_debugger : 
      (TypeOfDebugger * ValuePrinter.Options.options * preferences)
      -> (MLWorks.Internal.Value.Frame.frame * parameter
          * Continuation * Continuation)
      -> unit

(*
    val add_break : int * string -> unit
    val add_break_list : (int * string) list -> unit
    val remove_break : string -> unit
    val break_list : unit -> {name:string,hits:int,max:int} list
*)

  end
@


1.65.3.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a3 4
 * Revision 1.65  1997/05/06  09:27:59  jont
 * [Bug #30088]
 * Get rid of MLWorks.Option
 *
@


1.65.2.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a3 4
 * Revision 1.65  1997/05/06  09:27:59  jont
 * [Bug #30088]
 * Get rid of MLWorks.Option
 *
@


1.65.1.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a3 4
 * Revision 1.65  1997/05/06  09:27:59  jont
 * [Bug #30088]
 * Get rid of MLWorks.Option
 *
@


1.64
log
@Change SIGNAL to INTERRUPT (interrupts aren't signals on Windows).
@
text
@d4 3
d220 1
@


1.64.8.1
log
@branched from 1.64
@
text
@a3 3
 * Revision 1.64  1996/01/08  16:26:10  nickb
 * Change SIGNAL to INTERRUPT (interrupts aren't signals on Windows).
 *
@


1.64.8.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a3 3
 * Revision 1.64.8.1  1997/05/12  10:29:30  hope
 * branched from 1.64
 *
@


1.64.8.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a3 3
 * Revision 1.64.8.1  1997/05/12  10:29:30  hope
 * branched from 1.64
 *
@


1.64.8.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a3 3
 * Revision 1.64.8.1  1997/05/12  10:29:30  hope
 * branched from 1.64
 *
@


1.64.8.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a3 3
 * Revision 1.64.8.1.1.1  1997/07/28  18:15:22  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.64.7.1
log
@branched from 1.64
@
text
@a3 3
 * Revision 1.64  1996/01/08  16:26:10  nickb
 * Change SIGNAL to INTERRUPT (interrupts aren't signals on Windows).
 *
@


1.64.6.1
log
@branched from 1.64
@
text
@a3 3
 * Revision 1.64  1996/01/08  16:26:10  nickb
 * Change SIGNAL to INTERRUPT (interrupts aren't signals on Windows).
 *
@


1.64.6.1.1.1
log
@branched from 1.64.6.1
@
text
@a3 3
 * Revision 1.64.6.1  1996/12/17  17:43:21  hope
 * branched from 1.64
 *
@


1.64.5.1
log
@branched from 1.64
@
text
@a3 3
 * Revision 1.64  1996/01/08  16:26:10  nickb
 * Change SIGNAL to INTERRUPT (interrupts aren't signals on Windows).
 *
@


1.64.4.1
log
@branched from 1.64
@
text
@a3 3
 * Revision 1.64  1996/01/08  16:26:10  nickb
 * Change SIGNAL to INTERRUPT (interrupts aren't signals on Windows).
 *
@


1.64.4.1.1.1
log
@branched from 1.64.4.1
@
text
@a3 3
 * Revision 1.64.4.1  1996/11/14  12:43:58  hope
 * branched from 1.64
 *
@


1.64.3.1
log
@branched from 1.64
@
text
@a3 3
 * Revision 1.64  1996/01/08  16:26:10  nickb
 * Change SIGNAL to INTERRUPT (interrupts aren't signals on Windows).
 *
@


1.64.2.1
log
@branched from 1.64
@
text
@a3 3
 * Revision 1.64  1996/01/08  16:26:10  nickb
 * Change SIGNAL to INTERRUPT (interrupts aren't signals on Windows).
 *
@


1.64.1.1
log
@branched from 1.64
@
text
@a3 3
 * Revision 1.64  1996/01/08  16:26:10  nickb
 * Change SIGNAL to INTERRUPT (interrupts aren't signals on Windows).
 *
@


1.63
log
@Add functions to add and remove breakpoints from the table,
along with max hit counts
@
text
@d4 4
d228 1
a228 1
      SIGNAL of int
@


1.62
log
@Removing Incremental structure
@
text
@d4 3
d259 7
@


1.61
log
@Hid the details of the WINDOWING type.
@
text
@d4 3
a204 1
require "../interpreter/incremental";
a207 1
    structure Incremental : INCREMENTAL
a208 8

    sharing Incremental.InterMake.Compiler.Options =
      ValuePrinter.Options

    sharing type ValuePrinter.TypeBasis = Incremental.InterMake.Compiler.TypeBasis
    sharing type Incremental.InterMake.Compiler.DebugInformation =
      ValuePrinter.DebugInformation
      
@


1.60
log
@Removed redundant parameters from ml_debugger, added a message_fn
parameter, and removed unnecessary currying.
@
text
@d4 4
d221 2
d224 1
a224 15
      WINDOWING of 
      ((string * {name : string, loc : string, 
                 details: string * string * (ValuePrinter.Type * MLWorks.Internal.Value.ml_value 
                                            * string) * 
                (unit -> string * (string * (ValuePrinter.Type * MLWorks.Internal.Value.ml_value 
                                            * string)) list,
                 string * (string * (ValuePrinter.Type * MLWorks.Internal.Value.ml_value 
                                            * string)) list) 
                MLWorks.Option.union ref
                 MLWorks.Option.option} list 
       * (string -> unit) *
       ((unit -> unit) MLWorks.Option.option *
        (unit -> unit) MLWorks.Option.option) ->
       unit) *
      (string -> unit)) * bool
d259 1
a259 2
      (TypeOfDebugger * ValuePrinter.Options.options * preferences
       * (string -> unit))
@


1.59
log
@Add fatal signals.
@
text
@d4 3
d267 5
a271 6
      TypeOfDebugger ->
      (ValuePrinter.Options.options * preferences * Incremental.Context) ->
      (Incremental.Context -> unit) ->
      MLWorks.Internal.Value.Frame.frame ->
      (parameter * Continuation * Continuation) -> 
      unit
@


1.58
log
@Removing script parameter from ml_debugger
@
text
@d4 3
d234 1
@


1.57
log
@nothing much
@
text
@d4 3
d264 1
a264 1
      (parameter * Continuation * Continuation) -> string list -> 
@


1.56
log
@Changes to pervasive Frame structure
@
text
@d4 3
@


1.55
log
@Replaced Option structure with references to MLWorks.Option.
@
text
@d4 3
a202 1
    val show_compiler_frames : bool ref
d241 1
a241 1
    val get_start_frame : unit -> MLWorks.Internal.Value.frame
d244 1
a244 1
      (MLWorks.Internal.Value.frame -> 'a) -> 'a
d248 1
a248 1
      (MLWorks.Internal.Value.frame -> 'a) ->
d257 1
a257 1
      MLWorks.Internal.Value.frame ->
@


1.54
log
@Added preferences argument to ml_debugger.
@
text
@d4 3
d212 2
a213 2
                Incremental.InterMake.Option.option ref
                 Incremental.InterMake.Option.opt} list 
d215 2
a216 2
       ((unit -> unit) Incremental.InterMake.Option.opt *
        (unit -> unit) Incremental.InterMake.Option.opt) ->
@


1.53
log
@Replaced context_ref with context.
@
text
@d4 3
d195 2
d250 1
a250 1
      (ValuePrinter.Options.options * Incremental.Context) ->
@


1.52
log
@Debugger scripts for tracing tool using debugger.
@
text
@d4 3
d245 1
a245 1
      (ValuePrinter.Options.options * Incremental.Context ref) ->
a249 3
(*
      (MLWorks.Internal.Value.ml_value -> unit)
*)
@


1.51
log
@CHanged substructure of InterMake.
@
text
@d4 3
d245 1
a245 1
      (parameter * Continuation * Continuation) -> 
@


1.50
log
@Added copyright message
@
text
@d4 3
d198 2
a199 2
                Incremental.InterMake.FileName.Option.option ref
                 Incremental.InterMake.FileName.Option.opt} list 
d201 2
a202 2
       ((unit -> unit) Incremental.InterMake.FileName.Option.opt *
        (unit -> unit) Incremental.InterMake.FileName.Option.opt) ->
@


1.49
log
@Removed with_frame_wrap.  Changed type of with_start_frame so that callers
don't have to provide the frame.
@
text
@d4 4
d164 1
@


1.48
log
@Merging bug fixes
@
text
@d4 3
d217 2
d220 1
a220 8
      MLWorks.Internal.Value.frame ->
      (unit -> 'a) ->
      'a

    val with_frame_wrap :
      (unit -> 'a) -> 'a

    val get_start_frame : unit -> MLWorks.Internal.Value.frame
d224 1
a224 1
      (unit -> 'a) ->
@


1.47
log
@Inspector invocation in debugger-window.
@
text
@d4 9
d200 2
@


1.47.1.1
log
@Fork for bug fixing
@
text
@a3 3
Revision 1.47  1993/08/06  14:45:51  nosa
Inspector invocation in debugger-window.

@


1.47.1.2
log
@Added STACK_OVERFLOW parameter type
@
text
@a3 3
Revision 1.47.1.1  1993/08/06  14:45:51  jont
Fork for bug fixing

a193 2
    | STACK_OVERFLOW

@


1.46
log
@Changed type of WINDOWING for ShowFrameInfo option in debugger window.
@
text
@d4 3
d170 9
a178 3
      WINDOWING of
      (string * {name : string, loc : string, 
                 details: string * string * string * (unit -> string) 
d184 1
a184 2
      (string -> unit) *
      bool
@


1.45
log
@Changed Option.T to Option.opt.
@
text
@d4 3
d168 4
a171 1
      (string * {name : string, loc : string, details: string * string} list * (string -> unit) *
@


1.44
log
@Added function debugger continuation
@
text
@d4 3
d166 2
a167 2
       ((unit -> unit) Incremental.InterMake.FileName.Option.T *
        (unit -> unit) Incremental.InterMake.FileName.Option.T) ->
@


1.43
log
@Added tty_ok option to WINDOWING
@
text
@d4 3
d184 1
@


1.42
log
@ Added message function to Windowing debugger
Added with_frame_wrap
@
text
@d4 4
d163 2
a164 1
      (string -> unit)
@


1.41
log
@Changed argument of ml_debugger from Incremental.options to Options.options.
@
text
@d4 3
d155 5
a159 4
      string * {name : string, loc : string, details: string * string} list * (string -> unit) *
      ((unit -> unit) Incremental.InterMake.FileName.Option.T *
       (unit -> unit) Incremental.InterMake.FileName.Option.T) ->
      unit
d181 3
@


1.40
log
@Added quit and continue options to windowing debugger.
Added global base frame and debugger_types
@
text
@d4 4
d189 1
a189 1
      (Incremental.options * Incremental.Context ref) ->
@


1.39
log
@>> Removed printer descriptors.
>> stringify_value now takes just a print_options object
>> .
@
text
@d4 5
d148 4
a151 1
      string * {name : string, loc : string, details: string * string} list * (string -> unit) -> unit
d168 14
@


1.38
log
@Changed type of WINDOWING datatype
@
text
@d4 3
d163 1
a163 1
      (ValuePrinter.print_method_table * Incremental.options * Incremental.Context ref) ->
d167 2
d170 1
@


1.37
log
@Removes BackTraceType type and the TRACE parameter option
@
text
@d4 3
d139 2
a140 1
      WINDOWING of string * (string * string) list * (string -> string) -> unit
@


1.36
log
@Removed Debugger_Types
@
text
@d4 3
d143 1
d145 1
a145 11

      datatype Continuation =
        POSSIBLE of string * Continuation_action
      | NOT_POSSIBLE
        and Continuation_action =
          NORMAL_RETURN
          | DO_RAISE of exn

      datatype BackTraceType =
        BASE_FRAME of MLWorks.Internal.Value.frame |
        NO_BASE_FRAME
d147 6
d158 1
a158 1
      BackTraceType ->
@


1.35
log
@Removed current_module parameter from ml_debugger
@
text
@d4 3
d121 3
d125 3
a127 2
    sharing Incremental.InterMake.Compiler.Debugger_Types =
      ValuePrinter.Debugger_Types
@


1.34
log
@Signature revisions
@
text
@d4 3
d149 1
a149 1
      (ValuePrinter.print_method_table * Incremental.options * Incremental.Context ref * string) ->
@


1.33
log
@Options & Info changes
@
text
@d4 3
d116 1
a116 1
    sharing Incremental.InterMake.Compiler.MirTypes.Debugger_Types =
@


1.32
log
@Added BREAK option to parameter type.
@
text
@d4 3
d112 1
a112 1
    sharing Incremental.InterMake.Compiler.BasisTypes = ValuePrinter.BasisTypes
d143 2
a144 4
      Incremental.InterMake.Inter_EnvTypes.Info.options ->
      (ValuePrinter.printer_descriptor * Incremental.options * 
       Incremental.context * string) ->
      (Incremental.context -> unit) ->
@


1.31
log
@Typechecker structure changes
@
text
@d4 3
d123 1
@


1.30
log
@Rationalised substructures.
@
text
@d4 3
d106 1
a106 1
    sharing Incremental.InterMake.Compiler.Basis = ValuePrinter.Basis
@


1.29
log
@We also pass the current module forward for the source_displayer
@
text
@d4 3
a94 5
require "debugger_types";
require "debugger_type_utilities";
require "../main/info";
require "../parser/parser";
require "../typechecker/basis";
a99 4
    structure Debugger_Types : DEBUGGER_TYPES
    structure Debugger_Type_Utilities : DEBUGGER_TYPE_UTILITIES
    structure Parser : PARSER
    structure Basis : BASIS
a100 1
    structure Info : INFO
d103 4
d133 1
a133 1
      Info.options ->
@


1.28
log
@Changed debug info to have only module name - needed to pass module table through to window stuff
@
text
@d4 3
d133 1
d137 2
a138 1
      (ValuePrinter.printer_descriptor * Incremental.options * Incremental.context) ->
@


1.27
log
@Allow the backtrace to stop at a particular frame
@
text
@d4 3
d111 1
a111 1
      WINDOWING of string * (string * string) list -> unit
@


1.26
log
@Debugger now takes a print_descriptor
@
text
@d4 3
d123 4
d132 1
@


1.25
log
@Allowed messages for the 'c' and 'q' options
@
text
@d4 3
d88 1
d99 1
d123 1
a123 1
      (Incremental.options * Incremental.context) ->
@


1.24
log
@Changed Error structure to Info
@
text
@d4 3
d108 7
d120 1
a120 1
      parameter -> 
@


1.23
log
@Tracing added again
@
text
@d4 3
d79 1
d91 1
d107 1
@


1.22
log
@The debugger can now be invoked by a signal or exception.
The MLWorks.Internal.Debugger structure has been removed.
@
text
@d4 4
d98 1
d104 2
a105 1
      parameter -> unit
@


1.21
log
@Took out trace and added binding of frame arguments to it
@
text
@d4 3
d91 4
d99 1
a99 4
      MLWorks.Internal.Debugger.StackFrame * 
      MLWorks.Internal.Debugger.Type_Of_Exception * 
      MLWorks.Internal.Value.T  -> 
      MLWorks.Internal.Debugger.Debugger_Result
@


1.20
log
@Changes for windowing listener
@
text
@d4 3
d90 5
a94 3
      Incremental.context ->
      (unit -> unit) ->
      MLWorks.Internal.Debugger.StackFrame * MLWorks.Internal.Debugger.Type_Of_Exception * MLWorks.Internal.Value.T  -> 
@


1.19
log
@Tynames now have a slot recording their definition point
@
text
@d4 3
d81 4
d86 1
@


1.18
log
@Changes for the use of new shell
@
text
@d4 3
@


1.17
log
@Created a type `information' which wraps up the debugger information
needed in so many parts of the compiler.
@
text
@d4 4
d62 1
d70 1
a72 1

a74 20
    val trace : 
      (unit -> Debugger_Types.information) ->
      ('a -> 'b) -> bool
    val untrace : ('a -> 'b) -> bool
    val untrace_all : unit -> unit
    val breakpoint : 
      (unit -> Debugger_Types.information) ->
      ('a -> 'b) -> bool
    val unbreakpoint : ('a -> 'b) -> bool
    val unbreakpoint_all : unit -> unit

    val print_method_defined : Basis.Basis * string -> bool

    val define_a_print_method : 
      Basis.Basis * string * (MLWorks.Internal.Value.T list
                              * (MLWorks.Internal.Value.T -> string) list
                              * (MLWorks.Internal.Value.T -> MLWorks.Internal.Value.T list)
                              * (MLWorks.Internal.Value.T -> bool * int)
                              -> string) -> bool
      
d76 4
a79 12
      (string * Debugger_Types.Datatypes.Type * MLWorks.Internal.Value.T -> unit) ->
      (unit -> Debugger_Types.information) ->
      ((unit -> Parser.ParserBasis) * (unit -> Basis.Basis)) ->
      (string -> unit) ->
      MLWorks.Internal.Debugger.StackFrame * MLWorks.Internal.Debugger.Type_Of_Exception * 
      MLWorks.Internal.Value.T  -> MLWorks.Internal.Debugger.Debugger_Result
    val output_emacs_commands : bool ref

    val toplevel_value_printer : 
      ((unit -> Parser.ParserBasis) * (unit -> Basis.Basis) *
       (unit -> Debugger_Types.information) ->
       MLWorks.Internal.Value.T * Debugger_Types.Datatypes.Type -> string)
@


1.16
log
@Added functionality to the value_printer
@
text
@d4 3
d71 1
a71 2
      (unit -> (string,Debugger_Types.Datatypes.Type * bool * 
                (int * Debugger_Types.Backend_Annotation) list) Debugger_Types.Datatypes.NewMap.T) -> 
d76 1
a76 2
      (unit -> (string,Debugger_Types.Datatypes.Type * bool * 
                (int * Debugger_Types.Backend_Annotation) list) Debugger_Types.Datatypes.NewMap.T) ->
d92 1
a92 2
      (unit -> (string,Debugger_Types.Datatypes.Type * bool * 
                (int * Debugger_Types.Backend_Annotation) list) Debugger_Types.Datatypes.NewMap.T) ->
d101 1
a101 1
       (unit -> (string,Debugger_Types.Datatypes.Type * bool * (int * Debugger_Types.Backend_Annotation) list) Debugger_Types.Datatypes.NewMap.T) ->
@


1.15
log
@Rationalisation of the MLWorks structure.
@
text
@d4 3
d84 4
a87 1
                              * (MLWorks.Internal.Value.T -> string) list  -> string) -> bool
@


1.14
log
@Removed some redundant structures and sharing
@
text
@d4 3
d80 2
a81 2
      Basis.Basis * string * (MLWorks.System.Unsafe.Value.T list
                              * (MLWorks.System.Unsafe.Value.T -> string) list  -> string) -> bool
d84 1
a84 1
      (string * Debugger_Types.Datatypes.Type * MLWorks.System.Unsafe.Value.T -> unit) ->
d89 2
a90 2
      MLWorks.Debugger.StackFrame * MLWorks.Debugger.Type_Of_Exception * 
      MLWorks.System.Unsafe.Value.T  -> MLWorks.Debugger.Debugger_Result
d96 1
a96 1
       MLWorks.System.Unsafe.Value.T * Debugger_Types.Datatypes.Type -> string)
@


1.13
log
@Fixed a few bugs and added binding of frame arguments to it
@
text
@d4 3
a46 1
require "../typechecker/datatypes";
a53 1
    structure Datatypes : DATATYPES
d62 2
a63 2
      (unit -> (string,Datatypes.Type * bool * 
                (int * Debugger_Types.Backend_Annotation) list) Debugger_Types.Map.T) -> 
d68 2
a69 2
      (unit -> (string,Datatypes.Type * bool * 
                (int * Debugger_Types.Backend_Annotation) list) Debugger_Types.Map.T) ->
d81 3
a83 3
      (string * Datatypes.Type * MLWorks.System.Unsafe.Value.T -> unit) ->
      (unit -> (string,Datatypes.Type * bool * 
                (int * Debugger_Types.Backend_Annotation) list) Debugger_Types.Map.T) ->
d92 2
a93 2
       (unit -> (string,Datatypes.Type * bool * (int * Debugger_Types.Backend_Annotation) list) Debugger_Types.Map.T) ->
       MLWorks.System.Unsafe.Value.T * Datatypes.Type -> string)
@


1.12
log
@Added details about leafness to the debug information
@
text
@d4 3
d60 4
a63 1
    val trace : ('a -> 'b) -> bool
d66 4
a69 1
    val breakpoint : ('a -> 'b) -> bool
d76 2
a77 2
      Basis.Basis * string * (MLWorks.System.Unsafe.Value.T * Datatypes.Type list 
                              * (MLWorks.System.Unsafe.Value.T * Datatypes.Type -> string)  -> string) -> bool
d80 3
a82 1
      (unit -> (string,Datatypes.Type * bool * (int * Debugger_Types.Backend_Annotation) list) Debugger_Types.Map.T) ->
d85 2
a86 1
      MLWorks.Debugger.StackFrame * MLWorks.Debugger.Type_Of_Exception * MLWorks.System.Unsafe.Value.T  -> MLWorks.Debugger.Debugger_Result
@


1.11
log
@Added a loop inside the debugger
@
text
@d4 3
d71 1
a71 1
      (unit -> (string,Datatypes.Type * (int * Debugger_Types.Backend_Annotation) list) Debugger_Types.Map.T) ->
d79 1
a79 1
       (unit -> (string,Datatypes.Type * (int * Debugger_Types.Backend_Annotation) list) Debugger_Types.Map.T) ->
@


1.10
log
@Added untrace
@
text
@d4 3
d70 1
@


1.9
log
@Changed to reflect changes to pervasive_library
@
text
@d4 3
d53 1
a53 1
    val untrace_all : ('a -> 'b) -> unit
d56 1
a56 1
    val unbreakpoint_all : ('a -> 'b) -> unit
@


1.8
log
@ Changed coercion and the ml_value type in the pervasive environment.
@
text
@d4 3
d50 1
d53 1
@


1.7
log
@Various improvements
@
text
@d4 3
d53 2
a54 2
      Basis.Basis * string * (MLWorks.Debugger.ml_value * Datatypes.Type list 
                              * (MLWorks.Debugger.ml_value * Datatypes.Type -> string)  -> string) -> bool
d59 1
a59 1
      MLWorks.Debugger.StackFrame * MLWorks.Debugger.Type_Of_Exception * MLWorks.Debugger.ml_value  -> MLWorks.Debugger.Debugger_Result
d65 1
a65 1
       MLWorks.Debugger.ml_value * Datatypes.Type -> string)
@


1.6
log
@Neatening up, plus changes due to lower level sharing changes
@
text
@d4 3
d37 2
@


1.5
log
@New sharing constraints after lower level changes
@
text
@d4 3
d35 2
d42 6
d49 3
a51 3
      ((string,Datatypes.Type * (int * Debugger_Types.Backend_Annotation) list) Debugger_Types.Map.T) ref ->
      (Parser.ParserBasis ref * Basis.Basis ref) ->
      Debugger.StackFrame * Debugger.Type_Of_Exception * Debugger.ml_value  -> Debugger.Debugger_Result
d54 4
a57 4
      val toplevel_value_printer : 
        (Parser.ParserBasis ref * Basis.Basis ref *
         (string,Datatypes.Type * (int * Debugger_Types.Backend_Annotation) list) Debugger_Types.Map.T ref) ->
        Debugger.ml_value * Datatypes.Type -> string
@


1.4
log
@Working monomorphic version of trace
@
text
@d4 3
d34 2
@


1.3
log
@Made the debugger work better, and changes for the new interface to the runtime system
@
text
@d4 3
d28 3
@


1.2
log
@Support for interpreter
@
text
@d4 3
d13 1
d21 1
d29 1
a29 1
      Debugger.StackFrame * bool * Debugger.ml_value  -> unit
d31 5
@


1.1
log
@Initial revision
@
text
@d3 4
a6 1
$Log$
d9 5
d16 11
a26 1
    val ml_debugger : Debugger.StackFrame * bool * Debugger.MlObject  -> bool
@
