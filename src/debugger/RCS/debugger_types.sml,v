head	1.26;
access;
symbols
	MLW_daveb_inline_1_4_99:1.26.3
	MLWorks_21c0_1999_03_25:1.26
	MLWorks_20c1_1998_08_20:1.26
	MLWorks_20c0_1998_08_04:1.26
	MLWorks_20b2c2_1998_06_19:1.26
	MLWorks_20b2_Windows_1998_06_12:1.26
	MLWorks_20b1c1_1998_05_07:1.26
	MLWorks_20b0_1998_04_07:1.26
	MLWorks_20b0_1998_03_20:1.26
	MLWorks_20m2_1998_02_16:1.26
	MLWorks_20m1_1997_10_23:1.26
	MLWorks_11r1:1.25.8.1.1.1.1
	MLWorks_workspace_97:1.26.2
	MLWorks_dt_wizard:1.26.1
	MLWorks_11c0_1997_09_09:1.25.8.1.1.1
	MLWorks_10r3:1.25.8.1.3
	MLWorks_10r2_551:1.25.8.1.2
	MLWorks_11:1.25.8.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.25.8.1
	MLWorks_20m0_1997_06_20:1.26
	MLWorks_1_0_r2c2_1997_06_14:1.25.8.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.25.8.1
	MLWorks_1_0_r2c1_1997_05_12:1.25.8
	MLWorks_BugFix_1997_04_24:1.25
	MLWorks_1_0_r2_Win32_1997_04_11:1.25
	MLWorks_1_0_r2_Unix_1997_04_04:1.25
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.25.6.1.1
	MLWorks_gui_1996_12_18:1.25.7
	MLWorks_1_0_Win32_1996_12_17:1.25.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.25.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.25.4.1
	MLWorks_1_0_Irix_1996_11_28:1.25.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.25.5
	MLWorks_1_0_Unix_1996_11_14:1.25.4
	MLWorks_Open_Beta2_1996_10_11:1.25.3
	MLWorks_License_dev:1.25.2
	MLWorks_1_open_beta_1996_09_13:1.25.1
	MLWorks_Open_Beta_1996_08_22:1.25
	MLWorks_Beta_1996_07_02:1.23
	MLWorks_Beta_1996_06_07:1.23
	MLWorks_Beta_1996_06_06:1.23
	MLWorks_Beta_1996_06_05:1.23
	MLWorks_Beta_1996_06_03:1.23
	MLWorks_Beta_1996_05_31:1.23
	MLWorks_Beta_1996_05_30:1.23
	ML_beta_release_12/08/94:1.19
	ML_beta_release_03/08/94:1.19
	ML_revised_beta_release_25/05/94:1.18
	ML_final_beta_release_02/03/94:1.18
	mlworks-28-01-1994:1.16
	Release:1.14
	mlworks-beta-01-09-1993:1.14
	MLWorks-1-0-4-29/01/1993:1.10
	MLWorks-1-0-3-21/12/1992:1.10
	MLWorks-1-0-2-15/12/1992:1.10
	MLWorks-1-0-1-04/12/1992:1.10
	checkpoint_17_08_92:1.5;
locks; strict;
comment	@ * @;


1.26
date	97.05.01.15.13.07;	author jont;	state Exp;
branches
	1.26.1.1
	1.26.2.1
	1.26.3.1;
next	1.25;

1.25
date	96.08.05.17.10.41;	author andreww;	state Exp;
branches
	1.25.1.1
	1.25.2.1
	1.25.3.1
	1.25.4.1
	1.25.5.1
	1.25.6.1
	1.25.7.1
	1.25.8.1;
next	1.24;

1.24
date	96.08.01.12.00.15;	author jont;	state Exp;
branches;
next	1.23;

1.23
date	95.11.08.12.38.36;	author jont;	state Exp;
branches;
next	1.22;

1.22
date	95.02.28.11.42.20;	author matthew;	state Exp;
branches;
next	1.21;

1.21
date	95.01.13.16.59.03;	author matthew;	state Exp;
branches;
next	1.20;

1.20
date	94.09.13.10.05.22;	author matthew;	state Exp;
branches;
next	1.19;

1.19
date	94.06.22.11.26.49;	author jont;	state Exp;
branches;
next	1.18;

1.18
date	94.02.28.06.45.26;	author nosa;	state Exp;
branches;
next	1.17;

1.17
date	94.02.25.15.55.46;	author daveb;	state Exp;
branches;
next	1.16;

1.16
date	93.12.09.19.27.35;	author jont;	state Exp;
branches;
next	1.15;

1.15
date	93.09.03.11.33.22;	author nosa;	state Exp;
branches;
next	1.14;

1.14
date	93.07.12.08.56.03;	author nosa;	state Exp;
branches
	1.14.1.1;
next	1.13;

1.13
date	93.03.11.12.04.09;	author matthew;	state Exp;
branches;
next	1.12;

1.12
date	93.03.04.12.11.59;	author matthew;	state Exp;
branches;
next	1.11;

1.11
date	93.02.01.16.22.32;	author matthew;	state Exp;
branches;
next	1.10;

1.10
date	92.11.26.19.18.46;	author daveb;	state Exp;
branches;
next	1.9;

1.9
date	92.11.18.11.57.04;	author clive;	state Exp;
branches;
next	1.8;

1.8
date	92.10.05.15.16.14;	author richard;	state Exp;
branches;
next	1.7;

1.7
date	92.09.10.08.50.30;	author richard;	state Exp;
branches;
next	1.6;

1.6
date	92.08.26.10.52.31;	author jont;	state Exp;
branches;
next	1.5;

1.5
date	92.07.20.15.48.23;	author clive;	state Exp;
branches;
next	1.4;

1.4
date	92.07.16.16.31.59;	author clive;	state Exp;
branches;
next	1.3;

1.3
date	92.07.06.14.08.38;	author clive;	state Exp;
branches;
next	1.2;

1.2
date	92.06.30.09.52.32;	author clive;	state Exp;
branches;
next	1.1;

1.1
date	92.06.29.11.08.09;	author clive;	state Exp;
branches;
next	;

1.14.1.1
date	93.07.12.08.56.03;	author jont;	state Exp;
branches;
next	;

1.25.1.1
date	96.09.13.11.11.15;	author hope;	state Exp;
branches;
next	;

1.25.2.1
date	96.10.07.16.02.02;	author hope;	state Exp;
branches;
next	;

1.25.3.1
date	96.10.17.11.20.16;	author hope;	state Exp;
branches;
next	;

1.25.4.1
date	96.11.14.12.43.52;	author hope;	state Exp;
branches
	1.25.4.1.1.1;
next	;

1.25.4.1.1.1
date	96.11.28.14.55.47;	author hope;	state Exp;
branches;
next	;

1.25.5.1
date	96.11.22.18.04.18;	author hope;	state Exp;
branches;
next	;

1.25.6.1
date	96.12.17.17.43.15;	author hope;	state Exp;
branches
	1.25.6.1.1.1;
next	;

1.25.6.1.1.1
date	97.02.24.11.32.01;	author hope;	state Exp;
branches;
next	;

1.25.7.1
date	96.12.18.09.37.13;	author hope;	state Exp;
branches;
next	;

1.25.8.1
date	97.05.12.10.29.23;	author hope;	state Exp;
branches
	1.25.8.1.1.1
	1.25.8.1.2.1
	1.25.8.1.3.1;
next	;

1.25.8.1.1.1
date	97.07.28.18.15.15;	author daveb;	state Exp;
branches
	1.25.8.1.1.1.1.1;
next	;

1.25.8.1.1.1.1.1
date	97.10.07.11.40.20;	author jkbrook;	state Exp;
branches;
next	;

1.25.8.1.2.1
date	97.09.08.17.08.45;	author daveb;	state Exp;
branches;
next	;

1.25.8.1.3.1
date	97.09.09.14.03.51;	author daveb;	state Exp;
branches;
next	;

1.26.1.1
date	97.09.10.19.18.23;	author brucem;	state Exp;
branches;
next	;

1.26.2.1
date	97.09.11.20.49.20;	author daveb;	state Exp;
branches;
next	;

1.26.3.1
date	99.04.01.17.53.11;	author daveb;	state Exp;
branches;
next	;


desc
@Initial version
@


1.26
log
@[Bug #30088]
Get rid of MLWorks.Option
@
text
@(* debugger_types the signature *)
(*
$Log: debugger_types.sml,v $
 * Revision 1.25  1996/08/05  17:10:41  andreww
 * [Bug #1521]
 * Porpagating changes to typechecker/_types.sml
 *
 * Revision 1.24  1996/08/01  12:00:15  jont
 * [Bug #1503]
 * Add field to FUNINFO to say if arg actually saved
 *
 * Revision 1.23  1995/11/08  12:38:36  jont
 * Add comments on recipe mechanism
 *
Revision 1.22  1995/02/28  11:42:20  matthew
information type now abstract

Revision 1.21  1995/01/13  16:59:03  matthew
Renaming debugger_env to runtime_env

Revision 1.20  1994/09/13  10:05:22  matthew
Abstraction of debug information

Revision 1.19  1994/06/22  11:26:49  jont
Ensure debug info can be cleared when required

Revision 1.18  1994/02/28  06:45:26  nosa
Deleted compiler option debug_polyvariables in Debugger_Types.INFO.

Revision 1.17  1994/02/25  15:55:46  daveb
Removed string_information function, added clear_information.

Revision 1.16  1993/12/09  19:27:35  jont
Added copyright message

Revision 1.15  1993/09/03  11:33:22  nosa
Record compiler option debug_polyvariables in Debugger_Types.INFO
for recompilation purposes.

Revision 1.14  1993/07/12  08:56:03  nosa
Debugger Environments for local and closure variable inspection
in the debugger.

Revision 1.13  1993/03/11  12:04:09  matthew
Signature revisions

Revision 1.12  1993/03/04  12:11:59  matthew
Options & Info changes

Revision 1.11  1993/02/01  16:22:32  matthew
Added sharing.

Revision 1.10  1992/11/26  19:18:46  daveb
Changes to make show_id_class and show_eq_info part of Info structure
instead of references.

Revision 1.9  1992/11/18  11:57:04  clive
Added a to_strinmg for debugger information

Revision 1.8  1992/10/05  15:16:14  richard
Added empty_information.

Revision 1.7  1992/09/10  08:50:30  richard
Created a type `information' which wraps up the debugger information
needed in so many parts of the compiler.

Revision 1.6  1992/08/26  10:52:31  jont
Removed some redundant structures and sharing

Revision 1.5  1992/07/20  15:48:23  clive
More work on the debugger

Revision 1.4  1992/07/16  16:31:59  clive
Added an error element to the type

Revision 1.3  1992/07/06  14:08:38  clive
Changes when implementing call point annotation

Revision 1.2  1992/06/30  09:52:32  clive
Minor changes
,

Revision 1.1  1992/06/29  11:08:09  clive
Initial revision

 * Copyright (c) 1993 Harlequin Ltd.
*)

require "runtime_env";
require "^.main.options";

signature DEBUGGER_TYPES =

  sig

    structure RuntimeEnv : RUNTIMEENV

    structure Options: OPTIONS

    (* These are just the corresponding types in Datatypes *)
    type Type
    type Instance
    eqtype Tyname

    (*
     * A recipe is a way of transferring instantiations of type variables
     * from one type to another. So given type ty, ty' with common type variables
     * and an instantiation of some of the type variables of ty to give
     * a type ty'', a recipe for (ty, ty') will construct from ty'' a type
     * ty''' where the type variables of ty' have been instantiated in the
     * same way. Eg, if ty is 'a * 'b, and ty' is 'b * 'a * string, and ty is
     * instantiated to int * (bool * real), the recipe will instantiate
     * ty' to (bool * real) * int * string.
     *)

    (* Datatype that gives a method for calculating the output type from the
       input type *)

    datatype Recipe =

      SELECT of int * Recipe  | (* Select from a record *)
      MAKERECORD of (string * Recipe) list |

      NOP | (* Just the parameter type *)
      ERROR of string | (* Ooops *)

      FUNARG of Recipe | (* Argument of the funtype *)
      FUNRES of Recipe | (* Result of this function type *)
      MAKEFUNTYPE of Recipe * Recipe |

      DECONS of int * Recipe | (* For the types in a constructor *)
      MAKECONSTYPE of Recipe list * Tyname

    type information
    type Backend_Annotation 
    sharing type Backend_Annotation = Recipe

    datatype FunInfo = 
      FUNINFO of
      {ty : Type,
       is_leaf : bool,
       has_saved_arg : bool,
       annotations : (int * Backend_Annotation) list, (* Sub function annotations *)
       runtime_env : RuntimeEnv.RuntimeEnv, (* Variable debug info *)
       is_exn : bool}


    (* Second bool is exception constructor indicator *)

    (* bool determines if recipes are shown *)
    val print_information : Options.options -> 
                                information * bool -> string list
    val print_function_information : 
      Options.options -> string * information * bool -> string

    val empty_information   : information

    (* bool is true if we are in debug mode here *)
    val augment_information : bool * information * information -> information
    val clear_information   : string * information -> information

    val null_backend_annotation : Backend_Annotation
    val empty_runtime_env : RuntimeEnv.RuntimeEnv

    val print_backend_annotation : Options.options ->
                                       Backend_Annotation -> string
    val print_type : Options.options -> Type -> string

    val null_type : Type

    (* These only seem to be used by the old optimizer *)
    val int_type : Type
    val int_pair_type : Type
    val string_pair_type : Type
    val string_list_type : Type
    val exn_type : Type

    val string_types :
      Options.options ->
      Type * (int * Type * Instance) ref list ->
      string * (int * Type * Instance) ref list

    val set_proc_data : string * bool * bool * RuntimeEnv.RuntimeEnv * information -> information
    val add_debug_info : information * string * FunInfo -> information
    val add_annotation : string * int * Backend_Annotation * information -> information

    val lookup_debug_info : information * string -> FunInfo option

  (* Conversion to and from lists *)

    val debug_info_to_list : information -> (string * FunInfo) list
    val debug_info_from_list : (string * FunInfo) list -> information

  end

@


1.26.3.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a3 4
 * Revision 1.26  1997/05/01  15:13:07  jont
 * [Bug #30088]
 * Get rid of MLWorks.Option
 *
@


1.26.2.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a3 4
 * Revision 1.26  1997/05/01  15:13:07  jont
 * [Bug #30088]
 * Get rid of MLWorks.Option
 *
@


1.26.1.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a3 4
 * Revision 1.26  1997/05/01  15:13:07  jont
 * [Bug #30088]
 * Get rid of MLWorks.Option
 *
@


1.25
log
@[Bug #1521]
Porpagating changes to typechecker/_types.sml
@
text
@d4 4
d187 1
a187 1
    val lookup_debug_info : information * string -> FunInfo MLWorks.Option.option
@


1.25.8.1
log
@branched from 1.25
@
text
@a3 4
 * Revision 1.25  1996/08/05  17:10:41  andreww
 * [Bug #1521]
 * Porpagating changes to typechecker/_types.sml
 *
@


1.25.8.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a3 3
 * Revision 1.25.8.1  1997/05/12  10:29:23  hope
 * branched from 1.25
 *
@


1.25.8.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a3 3
 * Revision 1.25.8.1  1997/05/12  10:29:23  hope
 * branched from 1.25
 *
@


1.25.8.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a3 3
 * Revision 1.25.8.1  1997/05/12  10:29:23  hope
 * branched from 1.25
 *
@


1.25.8.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a3 3
 * Revision 1.25.8.1.1.1  1997/07/28  18:15:15  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.25.7.1
log
@branched from 1.25
@
text
@a3 4
 * Revision 1.25  1996/08/05  17:10:41  andreww
 * [Bug #1521]
 * Porpagating changes to typechecker/_types.sml
 *
@


1.25.6.1
log
@branched from 1.25
@
text
@a3 4
 * Revision 1.25  1996/08/05  17:10:41  andreww
 * [Bug #1521]
 * Porpagating changes to typechecker/_types.sml
 *
@


1.25.6.1.1.1
log
@branched from 1.25.6.1
@
text
@a3 3
 * Revision 1.25.6.1  1996/12/17  17:43:15  hope
 * branched from 1.25
 *
@


1.25.5.1
log
@branched from 1.25
@
text
@a3 4
 * Revision 1.25  1996/08/05  17:10:41  andreww
 * [Bug #1521]
 * Porpagating changes to typechecker/_types.sml
 *
@


1.25.4.1
log
@branched from 1.25
@
text
@a3 4
 * Revision 1.25  1996/08/05  17:10:41  andreww
 * [Bug #1521]
 * Porpagating changes to typechecker/_types.sml
 *
@


1.25.4.1.1.1
log
@branched from 1.25.4.1
@
text
@a3 3
 * Revision 1.25.4.1  1996/11/14  12:43:52  hope
 * branched from 1.25
 *
@


1.25.3.1
log
@branched from 1.25
@
text
@a3 4
 * Revision 1.25  1996/08/05  17:10:41  andreww
 * [Bug #1521]
 * Porpagating changes to typechecker/_types.sml
 *
@


1.25.2.1
log
@branched from 1.25
@
text
@a3 4
 * Revision 1.25  1996/08/05  17:10:41  andreww
 * [Bug #1521]
 * Porpagating changes to typechecker/_types.sml
 *
@


1.25.1.1
log
@branched from 1.25
@
text
@a3 4
 * Revision 1.25  1996/08/05  17:10:41  andreww
 * [Bug #1521]
 * Porpagating changes to typechecker/_types.sml
 *
@


1.24
log
@[Bug #1503]
Add field to FUNINFO to say if arg actually saved
@
text
@d4 4
d86 1
d94 2
a100 2
    type printOptions

d147 4
a150 2
    val print_information : information * bool -> string list
    val print_function_information : string * information * bool -> string
d161 3
a163 2
    val print_backend_annotation : Backend_Annotation -> string
    val print_type : Type -> string
d175 1
a175 1
      printOptions ->
d191 1
@


1.23
log
@Add comments on recipe mechanism
@
text
@d4 3
d133 1
d171 1
a171 1
    val set_proc_data : string * bool * RuntimeEnv.RuntimeEnv * information -> information
@


1.22
log
@information type now abstract
@
text
@d4 3
d92 11
@


1.21
log
@Renaming debugger_env to runtime_env
@
text
@d4 3
a74 1
require "../utils/newmap";
a75 1
require "../main/options";
a80 2
    structure NewMap : NEWMAP
    structure Options : OPTIONS
d88 2
d108 1
a119 2
    datatype information =
     INFO of (string,FunInfo) NewMap.T
d128 3
a130 1
    val augment_information : Options.options * information * information -> information
d149 1
a149 1
      Options.print_options ->
d154 2
d157 6
a162 1
    val add_annotation : string * int * Backend_Annotation * information -> information
@


1.20
log
@Abstraction of debug information
@
text
@d4 3
d73 1
a73 1
require "debugger_env";
d84 1
d94 2
a95 2
      Select of int * Recipe  | (* Select from a record *)
      MakeRecord of (string * Recipe) list |
d97 2
a98 2
      Nop |  (* This is it *)
      Error |
d100 3
a102 3
      Funarg of Recipe | (* Argument of the funtype *)
      Funres of Recipe | (* Result of this function type *)
      MakeFunType of Recipe * Recipe |
d104 2
a105 2
      DeCons of int * Recipe | (* For the types in a constructor *)
      MakeConsType of Recipe list * Tyname
d110 8
d119 2
a120 2
      INFO of (string, (Type * bool * 
               (int * Backend_Annotation) list) * RuntimeEnv.debugger_env * bool) NewMap.T
d123 4
d132 1
a132 1
    val empty_debugger_env : RuntimeEnv.debugger_env
d138 2
a141 1
    val string_type : Type
d150 4
@


1.19
log
@Ensure debug info can be cleared when required
@
text
@d4 3
d79 1
a79 1
    structure Debugger_Env : DEBUGGER_ENVIRONMENT_TYPE
d108 1
a108 1
               (int * Backend_Annotation) list) * Debugger_Env.debugger_env * bool) NewMap.T
d116 1
a116 1
    val empty_debugger_env : Debugger_Env.debugger_env
@


1.18
log
@Deleted compiler option debug_polyvariables in Debugger_Types.INFO.
@
text
@d4 3
d105 3
a107 2
               (int * Backend_Annotation) list) * Debugger_Env.debugger_env) NewMap.T
              
d109 1
a109 1
    val augment_information : information * information -> information
@


1.17
log
@Removed string_information function, added clear_information.
@
text
@d4 3
d102 1
a102 1
               (int * Backend_Annotation) list) * Debugger_Env.debugger_env) NewMap.T * bool
@


1.16
log
@Added copyright message
@
text
@d4 3
d103 1
a103 1
    val string_information  : Options.print_options -> information -> string
@


1.15
log
@Record compiler option debug_polyvariables in Debugger_Types.INFO
for recompilation purposes.
@
text
@d4 4
d54 1
@


1.14
log
@Debugger Environments for local and closure variable inspection
in the debugger.
@
text
@d4 4
d65 1
d91 1
a91 1
               (int * Backend_Annotation) list) * Debugger_Env.debugger_env) NewMap.T
d113 2
a114 2
      Type * (int * Type) ref list ->
      string * (int * Type) ref list
@


1.14.1.1
log
@Fork for bug fixing
@
text
@a3 4
Revision 1.14  1993/07/12  08:56:03  nosa
Debugger Environments for local and closure variable inspection
in the debugger.

@


1.13
log
@Signature revisions
@
text
@d4 3
d49 1
d58 1
d85 2
a86 2
      INFO of (string, Type * bool * 
               (int * Backend_Annotation) list) NewMap.T
d93 1
d98 1
@


1.12
log
@Options & Info changes
@
text
@d4 3
d45 1
a46 1
require "../typechecker/datatypes";
d52 1
a52 1
    structure Datatypes : DATATYPES
d55 3
d74 1
a74 1
      MakeConsType of Recipe list * Datatypes.Tyname
d80 2
a81 2
      INFO of (string, Datatypes.Type * bool * 
               (int * Backend_Annotation) list) Datatypes.NewMap.T
d90 1
d92 6
a97 6
    val int_type : Datatypes.Type
    val int_pair_type : Datatypes.Type
    val string_type : Datatypes.Type
    val string_pair_type : Datatypes.Type
    val string_list_type : Datatypes.Type
    val exn_type : Datatypes.Type
d101 2
a102 2
      Datatypes.Type * (int * Datatypes.Type) ref list ->
      string * (int * Datatypes.Type) ref list
@


1.11
log
@Added sharing.
@
text
@d4 3
d42 1
a42 1
require "../main/info";
d50 1
a50 3
    structure Info : INFO

    sharing Info.Location = Datatypes.Ident.Location
d79 1
a79 1
    val string_information  : Info.options -> information -> string
d92 4
a95 3
    val string_types : Info.options ->
			 Datatypes.Type * (int * Datatypes.Type) ref list ->
			 string * (int * Datatypes.Type) ref list
@


1.10
log
@Changes to make show_id_class and show_eq_info part of Info structure
instead of references.
@
text
@d4 4
d48 2
@


1.9
log
@Added a to_strinmg for debugger information
@
text
@d4 3
d35 1
d43 1
d70 3
a72 3
    val empty_information	: information
    val augment_information	: information * information -> information
    val string_information       : information -> string
a82 1
    val extract_list_element_type : Datatypes.Type * Datatypes.Type -> Datatypes.Type
d85 3
a87 1
    val string_types : Datatypes.Type * (int * Datatypes.Type) ref list -> string * (int * Datatypes.Type) ref list
@


1.8
log
@Added empty_information.
@
text
@d4 3
d67 2
a68 1
              
@


1.7
log
@Created a type `information' which wraps up the debugger information
needed in so many parts of the compiler.
@
text
@d4 4
d62 2
a63 1
    val augment_information : information * information -> information
@


1.6
log
@Removed some redundant structures and sharing
@
text
@d4 3
d54 6
@


1.5
log
@More work on the debugger
@
text
@d4 3
a22 1
require "../utils/newmap";
a28 1
    structure Map : NEWMAP
@


1.4
log
@Added an error element to the type
@
text
@d4 3
d53 10
@


1.3
log
@Changes when implementing call point annotation
@
text
@d4 3
d16 1
a16 1
require "../typechecker/types";
d23 1
a23 1
    structure Types : TYPES
d32 1
a32 1
      MakeRecord of Recipe list |
d35 1
d42 1
a42 1
      MakeConsType of Recipe list * Types.Datatypes.Tyname
@


1.2
log
@Minor changes
,
@
text
@d4 4
d14 1
d21 1
@


1.1
log
@Initial revision
@
text
@d3 4
a6 1
$Log: $
d21 1
d23 2
d26 2
a27 1
      Funarg of Recipe | (* Arguemnt of the funtype *)
d29 4
a32 3
      DeCons of Types.Datatypes.Tyname * int * Recipe | (* For the types in a constructor *)
      ConcreteType of Types.Datatypes.Tyname |
      MakeConsType of Recipe list * Recipe
d34 2
a35 1
    type Backend_Annotation
@
