head	1.119;
access;
symbols
	MLW_daveb_inline_1_4_99:1.119.1
	MLWorks_21c0_1999_03_25:1.119
	MLWorks_20c1_1998_08_20:1.119
	MLWorks_20c0_1998_08_04:1.119
	MLWorks_20b2c2_1998_06_19:1.119
	MLWorks_20b2_Windows_1998_06_12:1.119
	MLWorks_20b1c1_1998_05_07:1.119
	MLWorks_20b0_1998_04_07:1.119
	MLWorks_20b0_1998_03_20:1.119
	MLWorks_20m2_1998_02_16:1.117
	MLWorks_20m1_1997_10_23:1.117
	MLWorks_11r1:1.114.1.1.1.1.1
	MLWorks_workspace_97:1.115.2
	MLWorks_dt_wizard:1.115.1
	MLWorks_11c0_1997_09_09:1.114.1.1.1.1
	MLWorks_10r3:1.114.1.1.3
	MLWorks_10r2_551:1.114.1.1.2
	MLWorks_11:1.114.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.114.1.1
	MLWorks_20m0_1997_06_20:1.115
	MLWorks_1_0_r2c2_1997_06_14:1.114.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.114.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.114.1
	MLWorks_BugFix_1997_04_24:1.114
	MLWorks_1_0_r2_Win32_1997_04_11:1.114
	MLWorks_1_0_r2_Unix_1997_04_04:1.114
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.111.3.1.1
	MLWorks_gui_1996_12_18:1.111.4
	MLWorks_1_0_Win32_1996_12_17:1.111.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.111.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.111.1.1
	MLWorks_1_0_Irix_1996_11_28:1.111.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.111.2
	MLWorks_1_0_Unix_1996_11_14:1.111.1
	MLWorks_Open_Beta2_1996_10_11:1.109.1
	MLWorks_License_dev:1.108.2
	MLWorks_1_open_beta_1996_09_13:1.108.1
	MLWorks_Open_Beta_1996_08_22:1.108
	MLWorks_Beta_1996_07_02:1.108
	MLWorks_Beta_1996_06_07:1.108
	MLWorks_Beta_1996_06_06:1.108
	MLWorks_Beta_1996_06_05:1.108
	MLWorks_Beta_1996_06_03:1.107
	MLWorks_Beta_1996_05_31:1.107
	MLWorks_Beta_1996_05_30:1.106
	ML_beta_release_12/08/94:1.79
	ML_beta_release_03/08/94:1.79
	ML_revised_beta_release_25/05/94:1.74
	ML_final_beta_release_02/03/94:1.70
	mlworks-28-01-1994:1.67
	Release:1.60
	mlworks-beta-01-09-1993:1.60
	MLWorks-1-0-4-29/01/1993:1.43
	MLWorks-1-0-3-21/12/1992:1.41
	MLWorks-1-0-2-15/12/1992:1.40
	MLWorks-1-0-1-04/12/1992:1.34
	checkpoint_17_08_92:1.10;
locks; strict;
comment	@ * @;


1.119
date	98.03.20.08.46.32;	author mitchell;	state Exp;
branches
	1.119.1.1;
next	1.118;

1.118
date	98.02.18.17.38.58;	author jont;	state Exp;
branches;
next	1.117;

1.117
date	97.09.24.09.13.40;	author brucem;	state Exp;
branches;
next	1.116;

1.116
date	97.09.18.14.43.07;	author brucem;	state Exp;
branches;
next	1.115;

1.115
date	97.05.02.16.44.56;	author jont;	state Exp;
branches
	1.115.1.1
	1.115.2.1;
next	1.114;

1.114
date	97.03.27.14.47.38;	author matthew;	state Exp;
branches
	1.114.1.1;
next	1.113;

1.113
date	97.03.18.17.06.12;	author andreww;	state Exp;
branches;
next	1.112;

1.112
date	97.01.06.17.42.12;	author andreww;	state Exp;
branches;
next	1.111;

1.111
date	96.11.06.11.23.18;	author matthew;	state Exp;
branches
	1.111.1.1
	1.111.2.1
	1.111.3.1
	1.111.4.1;
next	1.110;

1.110
date	96.10.31.14.29.42;	author io;	state Exp;
branches;
next	1.109;

1.109
date	96.10.02.16.11.53;	author andreww;	state Exp;
branches
	1.109.1.1;
next	1.108;

1.108
date	96.06.04.20.24.16;	author io;	state Exp;
branches
	1.108.1.1
	1.108.2.1;
next	1.107;

1.107
date	96.05.30.12.58.09;	author daveb;	state Exp;
branches;
next	1.106;

1.106
date	96.05.28.11.57.08;	author matthew;	state Exp;
branches;
next	1.105;

1.105
date	96.05.22.13.32.05;	author matthew;	state Exp;
branches;
next	1.104;

1.104
date	96.05.13.11.19.54;	author matthew;	state Exp;
branches;
next	1.103;

1.103
date	96.05.03.11.03.16;	author matthew;	state Exp;
branches;
next	1.102;

1.102
date	96.05.01.09.30.21;	author jont;	state Exp;
branches;
next	1.101;

1.101
date	96.04.30.09.35.23;	author matthew;	state Exp;
branches;
next	1.100;

1.100
date	96.04.18.15.18.04;	author jont;	state Exp;
branches;
next	1.99;

1.99
date	96.03.28.12.20.07;	author matthew;	state Exp;
branches;
next	1.98;

1.98
date	96.03.27.16.24.23;	author jont;	state Exp;
branches;
next	1.97;

1.97
date	96.03.20.14.01.21;	author matthew;	state Exp;
branches;
next	1.96;

1.96
date	96.02.15.10.38.33;	author jont;	state Exp;
branches;
next	1.95;

1.95
date	95.12.27.13.16.00;	author jont;	state Exp;
branches;
next	1.94;

1.94
date	95.10.19.15.47.57;	author matthew;	state Exp;
branches;
next	1.93;

1.93
date	95.10.13.22.59.06;	author brianm;	state Exp;
branches;
next	1.92;

1.92
date	95.09.15.11.08.15;	author daveb;	state Exp;
branches;
next	1.91;

1.91
date	95.09.12.17.53.30;	author daveb;	state Exp;
branches;
next	1.90;

1.90
date	95.07.26.14.13.21;	author jont;	state Exp;
branches;
next	1.89;

1.89
date	95.07.17.11.58.22;	author jont;	state Exp;
branches;
next	1.88;

1.88
date	95.04.28.14.00.08;	author matthew;	state Exp;
branches;
next	1.87;

1.87
date	95.03.24.16.47.08;	author matthew;	state Exp;
branches;
next	1.86;

1.86
date	95.03.15.15.41.45;	author matthew;	state Exp;
branches;
next	1.85;

1.85
date	95.03.01.10.48.01;	author matthew;	state Exp;
branches;
next	1.84;

1.84
date	95.01.30.12.35.32;	author matthew;	state Exp;
branches;
next	1.83;

1.83
date	94.12.14.15.23.32;	author matthew;	state Exp;
branches;
next	1.82;

1.82
date	94.12.06.10.27.26;	author matthew;	state Exp;
branches;
next	1.81;

1.81
date	94.11.21.17.14.04;	author matthew;	state Exp;
branches;
next	1.80;

1.80
date	94.08.16.11.12.37;	author jont;	state Exp;
branches;
next	1.79;

1.79
date	94.06.23.13.58.29;	author jont;	state Exp;
branches;
next	1.78;

1.78
date	94.06.23.12.02.50;	author nickh;	state Exp;
branches;
next	1.77;

1.77
date	94.06.09.15.49.41;	author nickh;	state Exp;
branches;
next	1.76;

1.76
date	94.06.03.14.55.30;	author matthew;	state Exp;
branches;
next	1.75;

1.75
date	94.06.02.14.00.59;	author brianm;	state Exp;
branches;
next	1.74;

1.74
date	94.05.11.14.52.09;	author daveb;	state Exp;
branches;
next	1.73;

1.73
date	94.03.22.16.00.34;	author nickh;	state Exp;
branches;
next	1.72;

1.72
date	94.03.16.17.55.47;	author matthew;	state Exp;
branches;
next	1.71;

1.71
date	94.03.16.15.46.14;	author matthew;	state Exp;
branches;
next	1.70;

1.70
date	94.02.28.08.24.34;	author nosa;	state Exp;
branches;
next	1.69;

1.69
date	94.02.23.12.40.50;	author daveb;	state Exp;
branches;
next	1.68;

1.68
date	94.02.14.16.24.56;	author nickh;	state Exp;
branches;
next	1.67;

1.67
date	93.12.09.19.27.30;	author jont;	state Exp;
branches;
next	1.66;

1.66
date	93.11.30.13.25.48;	author matthew;	state Exp;
branches;
next	1.65;

1.65
date	93.11.24.10.20.30;	author nickh;	state Exp;
branches;
next	1.64;

1.64
date	93.11.18.17.52.23;	author daveb;	state Exp;
branches;
next	1.63;

1.63
date	93.10.13.11.51.39;	author daveb;	state Exp;
branches;
next	1.62;

1.62
date	93.10.08.16.08.06;	author matthew;	state Exp;
branches;
next	1.61;

1.61
date	93.09.16.15.26.04;	author nosa;	state Exp;
branches;
next	1.60;

1.60
date	93.08.19.09.16.43;	author matthew;	state Exp;
branches
	1.60.1.1;
next	1.59;

1.59
date	93.07.30.13.40.25;	author nosa;	state Exp;
branches;
next	1.58;

1.58
date	93.06.01.17.17.39;	author matthew;	state Exp;
branches;
next	1.57;

1.57
date	93.05.18.16.32.56;	author daveb;	state Exp;
branches;
next	1.56;

1.56
date	93.05.12.17.27.44;	author matthew;	state Exp;
branches;
next	1.55;

1.55
date	93.05.06.12.08.48;	author matthew;	state Exp;
branches;
next	1.54;

1.54
date	93.04.20.15.31.03;	author jont;	state Exp;
branches;
next	1.53;

1.53
date	93.04.02.13.33.53;	author matthew;	state Exp;
branches;
next	1.52;

1.52
date	93.03.24.18.44.54;	author jont;	state Exp;
branches;
next	1.51;

1.51
date	93.03.11.10.50.58;	author matthew;	state Exp;
branches;
next	1.50;

1.50
date	93.03.08.16.06.00;	author matthew;	state Exp;
branches;
next	1.49;

1.49
date	93.03.02.15.20.29;	author matthew;	state Exp;
branches;
next	1.48;

1.48
date	93.03.01.18.24.04;	author matthew;	state Exp;
branches;
next	1.47;

1.47
date	93.03.01.11.06.19;	author matthew;	state Exp;
branches;
next	1.46;

1.46
date	93.02.23.17.50.28;	author matthew;	state Exp;
branches;
next	1.45;

1.45
date	93.02.09.10.18.48;	author matthew;	state Exp;
branches;
next	1.44;

1.44
date	93.02.04.17.32.21;	author matthew;	state Exp;
branches;
next	1.43;

1.43
date	93.01.08.11.35.08;	author daveb;	state Exp;
branches;
next	1.42;

1.42
date	92.12.22.15.01.46;	author jont;	state Exp;
branches;
next	1.41;

1.41
date	92.12.18.11.36.11;	author clive;	state Exp;
branches;
next	1.40;

1.40
date	92.12.09.19.29.15;	author clive;	state Exp;
branches;
next	1.39;

1.39
date	92.12.09.19.00.13;	author clive;	state Exp;
branches;
next	1.38;

1.38
date	92.12.09.16.01.18;	author clive;	state Exp;
branches;
next	1.37;

1.37
date	92.12.09.11.25.46;	author clive;	state Exp;
branches;
next	1.36;

1.36
date	92.12.08.13.42.42;	author clive;	state Exp;
branches;
next	1.35;

1.35
date	92.12.07.13.54.31;	author clive;	state Exp;
branches;
next	1.34;

1.34
date	92.11.27.14.14.12;	author clive;	state Exp;
branches;
next	1.33;

1.33
date	92.11.20.12.31.39;	author clive;	state Exp;
branches;
next	1.32;

1.32
date	92.11.20.11.43.46;	author clive;	state Exp;
branches;
next	1.31;

1.31
date	92.11.13.16.17.34;	author clive;	state Exp;
branches;
next	1.30;

1.30
date	92.11.05.18.01.12;	author richard;	state Exp;
branches;
next	1.29;

1.29
date	92.10.28.11.23.53;	author clive;	state Exp;
branches;
next	1.28;

1.28
date	92.10.28.10.22.48;	author clive;	state Exp;
branches;
next	1.27;

1.27
date	92.10.23.14.11.04;	author clive;	state Exp;
branches;
next	1.26;

1.26
date	92.10.19.16.45.12;	author clive;	state Exp;
branches;
next	1.25;

1.25
date	92.10.12.08.32.20;	author clive;	state Exp;
branches;
next	1.24;

1.24
date	92.10.07.16.53.52;	author clive;	state Exp;
branches;
next	1.23;

1.23
date	92.09.24.14.19.54;	author matthew;	state Exp;
branches;
next	1.22;

1.22
date	92.09.14.10.29.36;	author clive;	state Exp;
branches;
next	1.21;

1.21
date	92.09.09.13.09.15;	author clive;	state Exp;
branches;
next	1.20;

1.20
date	92.09.03.09.22.34;	author clive;	state Exp;
branches;
next	1.19;

1.19
date	92.09.02.16.23.12;	author clive;	state Exp;
branches;
next	1.18;

1.18
date	92.09.01.11.43.08;	author clive;	state Exp;
branches;
next	1.17;

1.17
date	92.08.28.17.31.20;	author clive;	state Exp;
branches;
next	1.16;

1.16
date	92.08.28.10.43.31;	author clive;	state Exp;
branches;
next	1.15;

1.15
date	92.08.27.09.48.04;	author richard;	state Exp;
branches;
next	1.14;

1.14
date	92.08.26.16.25.00;	author clive;	state Exp;
branches;
next	1.13;

1.13
date	92.08.19.09.24.10;	author clive;	state Exp;
branches;
next	1.12;

1.12
date	92.08.18.16.25.14;	author richard;	state Exp;
branches;
next	1.11;

1.11
date	92.08.17.13.20.14;	author clive;	state Exp;
branches;
next	1.10;

1.10
date	92.08.14.14.42.12;	author clive;	state Exp;
branches;
next	1.9;

1.9
date	92.08.13.15.47.49;	author clive;	state Exp;
branches;
next	1.8;

1.8
date	92.08.11.13.05.19;	author clive;	state Exp;
branches;
next	1.7;

1.7
date	92.08.10.13.56.41;	author clive;	state Exp;
branches;
next	1.6;

1.6
date	92.08.06.12.26.09;	author clive;	state Exp;
branches;
next	1.5;

1.5
date	92.07.29.11.32.38;	author clive;	state Exp;
branches;
next	1.4;

1.4
date	92.07.14.08.56.11;	author clive;	state Exp;
branches;
next	1.3;

1.3
date	92.07.13.09.53.08;	author clive;	state Exp;
branches;
next	1.2;

1.2
date	92.06.25.09.19.56;	author clive;	state Exp;
branches;
next	1.1;

1.1
date	92.06.22.15.20.13;	author clive;	state Exp;
branches;
next	;

1.60.1.1
date	93.08.19.09.16.43;	author jont;	state Exp;
branches;
next	1.60.1.2;

1.60.1.2
date	93.10.06.16.28.48;	author matthew;	state Exp;
branches;
next	1.60.1.3;

1.60.1.3
date	93.10.12.17.00.30;	author daveb;	state Exp;
branches;
next	;

1.108.1.1
date	96.09.13.11.11.26;	author hope;	state Exp;
branches;
next	;

1.108.2.1
date	96.10.07.16.02.12;	author hope;	state Exp;
branches;
next	;

1.109.1.1
date	96.10.17.11.20.26;	author hope;	state Exp;
branches;
next	;

1.111.1.1
date	96.11.14.12.44.02;	author hope;	state Exp;
branches
	1.111.1.1.1.1;
next	;

1.111.1.1.1.1
date	96.11.28.14.55.58;	author hope;	state Exp;
branches;
next	;

1.111.2.1
date	96.11.22.18.04.28;	author hope;	state Exp;
branches;
next	;

1.111.3.1
date	96.12.17.17.43.25;	author hope;	state Exp;
branches
	1.111.3.1.1.1;
next	;

1.111.3.1.1.1
date	97.02.24.11.32.24;	author hope;	state Exp;
branches;
next	;

1.111.4.1
date	96.12.18.09.37.23;	author hope;	state Exp;
branches;
next	;

1.114.1.1
date	97.05.12.10.29.34;	author hope;	state Exp;
branches
	1.114.1.1.1.1
	1.114.1.1.2.1
	1.114.1.1.3.1;
next	;

1.114.1.1.1.1
date	97.07.28.18.15.25;	author daveb;	state Exp;
branches
	1.114.1.1.1.1.1.1;
next	;

1.114.1.1.1.1.1.1
date	97.10.07.11.40.29;	author jkbrook;	state Exp;
branches;
next	;

1.114.1.1.2.1
date	97.09.08.17.08.56;	author daveb;	state Exp;
branches;
next	;

1.114.1.1.3.1
date	97.09.09.14.04.02;	author daveb;	state Exp;
branches;
next	;

1.115.1.1
date	97.09.10.19.18.32;	author brucem;	state Exp;
branches;
next	;

1.115.2.1
date	97.09.11.20.49.33;	author daveb;	state Exp;
branches;
next	;

1.119.1.1
date	99.04.01.17.53.16;	author daveb;	state Exp;
branches;
next	;


desc
@First version
@


1.119
log
@[Bug #70076]
Change value printer to use MLWorks.Internal.Value.exn_name instead of General.exnName
@
text
@(* _value_printer.sml the functor *)
(*
 * $Log: _value_printer.sml,v $
 * Revision 1.118  1998/02/18  17:38:58  jont
 * [Bug #70070]
 * Remove MLWorks.IO.terminal_out in favour of Terminal.output
 *
 * Revision 1.117  1997/09/24  09:13:40  brucem
 * [Bug #30153]
 * Fix mistake from previous change (Old.chr is equiv to String.str(Chr.chr ...)).
 *
 * Revision 1.116  1997/09/18  14:43:07  brucem
 * [Bug #30153]
 * Remove references to Old.
 *
 * Revision 1.115  1997/05/02  16:44:56  jont
 * [Bug #30088]
 * Get rid of MLWorks.Option
 *
 * Revision 1.114  1997/03/27  14:47:38  matthew
 * Removing <<not a ...>> message
 *
 * Revision 1.113  1997/03/18  17:06:12  andreww
 * [Bug #1431]
 * Printing the Io exception nicely.
 *
 * Revision 1.112  1997/01/06  17:42:12  andreww
 * [Bug #1818]
 * Adding routine to print value of floatarray.
 *
 * Revision 1.111  1996/11/06  11:23:18  matthew
 * [Bug #1728]
 * __integer becomes __int
 *
 * Revision 1.110  1996/10/31  14:29:42  io
 * [Bug #1614]
 * basifying String
 *
 * Revision 1.109  1996/10/02  16:11:53  andreww
 * [Bug #1592]
 * threading level info in tynames.
 *
 * Revision 1.108  1996/06/04  20:24:16  io
 * stringcvt->string_cvt
 *
 * Revision 1.107  1996/05/30  12:58:09  daveb
 * (Char.)ord is now at top level.
 *
 * Revision 1.106  1996/05/28  11:57:08  matthew
 * FIxing problem with string printing.
 *
 * Revision 1.105  1996/05/22  13:32:05  matthew
 * Changed type of MLWorks.Internal.real_to_string
 * ,
 *
 * Revision 1.104  1996/05/13  11:19:54  matthew
 * Changes to basis
 *
 * Revision 1.103  1996/05/03  11:03:16  matthew
 * Changes to Word structure
 *
 * Revision 1.102  1996/05/01  09:30:21  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
 * Revision 1.101  1996/04/30  09:35:23  matthew
 * Removing MLWorks.Integer
 *
 * Revision 1.100  1996/04/18  15:18:04  jont
 * initbasis moves to basis
 *
 * Revision 1.99  1996/03/28  12:20:07  matthew
 * New language definition
 *
 * Revision 1.98  1996/03/27  16:24:23  jont
 * Modify printing of functions when show details is on
 * so as not to include <Entry1> type info.
 *
 * Revision 1.97  1996/03/20  14:01:21  matthew
 * Language revision
 *
 * Revision 1.96  1996/02/15  10:38:33  jont
 * ERROR becomes MLERROR
 *
 * Revision 1.95  1995/12/27  13:16:00  jont
 * Removing Option in favour of MLWorks.Option
 *
 * Revision 1.94  1995/10/19  15:47:57  matthew
 * Correcting misspelling of abbreviate.
 *
Revision 1.93  1995/10/13  22:59:06  brianm
Adding extra control for abbreviated strings - needed in printing labels
in the Graphical Inspector, which uses stringify_value eventually.

Revision 1.92  1995/09/15  11:08:15  daveb
Added printing for Int32.int values.

Revision 1.91  1995/09/12  17:53:30  daveb
Added types for different lengths of words, ints and reals.

Revision 1.90  1995/07/26  14:13:21  jont
Add printing for builtin word type

Revision 1.89  1995/07/17  11:58:22  jont
Add printing of builtin char type

Revision 1.88  1995/04/28  14:00:08  matthew
Changing uses of cast (again)

Revision 1.87  1995/03/24  16:47:08  matthew
Changing Tyname_id etc. to Stamp

Revision 1.86  1995/03/15  15:41:45  matthew
Removing call to shape (again).

Revision 1.85  1995/03/01  10:48:01  matthew
Various minor changes to the way things are printed

Revision 1.84  1995/01/30  12:35:32  matthew
Rationalizing

Revision 1.83  1994/12/14  15:23:32  matthew
Removed call to shape when an unexpected value is found
as shape can bus error with some inputs.  This should be sorted
out properly.

Revision 1.82  1994/12/06  10:27:26  matthew
Changing uses of cast

Revision 1.81  1994/11/21  17:14:04  matthew
Fixing 2 element vector printing.

Revision 1.80  1994/08/16  11:12:37  jont
Made the printing of values more strict. Values supposedly from datatypes
will now only print if they are integers or pairs, and if pairs only if
the tag is an integer, and in either case, if and only the type of the constructor
(vcc or non-vcc) is correct for the value in question.

Revision 1.79  1994/06/23  13:58:29  jont
Update debugger information production

Revision 1.78  1994/06/23  12:02:50  nickh
Change bogus code message and shared closure bug.

Revision 1.77  1994/06/09  15:49:41  nickh
New runtime directory structure.

Revision 1.76  1994/06/03  14:55:30  matthew
Fixed debruijn printing.
Fixed depth in bound debruijns.

Revision 1.75  1994/06/02  14:00:59  brianm
Prevented shape printer from showing record contents (my first bug fix - with help from ma)

Revision 1.74  1994/05/11  14:52:09  daveb
Datatypes.META_OVERLOADED takes extra arguments.

Revision 1.73  1994/03/22  16:00:34  nickh
Fixed Waynisms and added better shape printing for unknown shapes.

Revision 1.72  1994/03/16  17:55:47  matthew
Changed exn printing again to use brackets only when needed.

Revision 1.71  1994/03/16  15:46:14  matthew
Changed printing of exception values slightly.

Revision 1.70  1994/02/28  08:24:34  nosa
Changed null type function handling to accomodate Monomorphic debugger decapsulation;
Extra TYNAME valenv for Modules Debugger.

Revision 1.69  1994/02/23  12:40:50  daveb
Adding function to find the name of a function.

Revision 1.68  1994/02/14  16:24:56  nickh
Moved convert_string to MLWorks.String.ml_string.

Revision 1.67  1993/12/09  19:27:30  jont
Added copyright message

Revision 1.66  1993/11/30  13:25:48  matthew
Added is_abs field to TYNAME and METATYNAME
Print abstypes as _

Revision 1.65  1993/11/24  10:20:30  nickh
Fix printing of wide tuples (and rewrite related code for efficiency).

Revision 1.64  1993/11/18  17:52:23  daveb
Made exceptions print as just their name, instead of "exn(name)".

Revision 1.63  1993/10/13  11:51:39  daveb
Merged in bug fix.

Revision 1.62  1993/10/08  16:08:06  matthew
Merging from bug fix branch

Revision 1.61  1993/09/16  15:26:04  nosa
Instances for METATYVARs and TYVARs and in schemes for polymorphic debugger.

Revision 1.60.1.3  1993/10/12  17:00:30  daveb
Changed maximum_list_size to maximum_seq_size, and made it affect arrays,
bytearrays and vectors.  Added a maximum_string_size.  Made negative values
for either of these be interpreted as infinity.

Revision 1.60.1.2  1993/10/06  16:28:48  matthew
Improved exception printing

Revision 1.60.1.1  1993/08/19  09:16:43  jont
Fork for bug fixing

Revision 1.60  1993/08/19  09:16:43  matthew
Changed parsing of debug information string
This should be done by some central utilities

Revision 1.59  1993/07/30  13:40:25  nosa
Changed type of constructor NULL_TYFUN for value printing in
local and closure variable inspection in the debugger.

Revision 1.58  1993/06/01  17:17:39  matthew
Changes to debug information
Better handling of types defined within functor parameters.

Revision 1.57  1993/05/18  16:32:56  daveb
Merged the maximum_depth and maximum_shape_depth options.
Replaced Integer.makestring with MLWorks.Integer.makestring and removed
the Integer structure.

Revision 1.56  1993/05/12  17:27:44  matthew
Fixed error with handler for Nth

Revision 1.55  1993/05/06  12:08:48  matthew
 Removed printer descriptors.
stringify_value now takes just a print_options object

Revision 1.54  1993/04/20  15:31:03  jont
Added code to deal with printing of vectors

Revision 1.53  1993/04/02  13:33:53  matthew
Signature changes

Revision 1.52  1993/03/24  18:44:54  jont
Got byte arrays printing properly after tagging changes

Revision 1.51  1993/03/11  10:50:58  matthew
Signature revisions

Revision 1.50  1993/03/08  16:06:00  matthew
Options & Info changes

Revision 1.49  1993/03/02  15:20:29  matthew
Rationalised use of Mapping structure

Revision 1.48  1993/03/01  18:24:04  matthew
 Change of error messages

Revision 1.47  1993/03/01  11:06:19  matthew
Printing for arrays, bytearrays, vectors

Revision 1.46  1993/02/23  17:50:28  matthew
Slightly more intelligent treatment of brackets for constructed values

Revision 1.45  1993/02/09  10:18:48  matthew
Typechecker structure changes

Revision 1.44  1993/02/04  17:32:21  matthew
Changed functor parameter

Revision 1.43  1993/01/08  11:35:08  daveb
Changes to support new list representation.

Revision 1.42  1992/12/22  15:01:46  jont
*** empty log message ***

Revision 1.41  1992/12/18  11:36:11  clive
Removed the debug message in generate_underbar

Revision 1.40  1992/12/09  19:29:15  clive
Changed the list size exceeded extension

Revision 1.39  1992/12/09  19:00:13  clive
maximum_list_size was being ignored

Revision 1.38  1992/12/09  16:01:18  clive
Changed depth message to ...

Revision 1.37  1992/12/09  11:25:46  clive
Printing of one element tuple

Revision 1.36  1992/12/08  13:42:42  clive
If maximum_shape_depth is zero then do not print shape details

Revision 1.35  1992/12/07  13:54:31  clive
Added some debugging messages

Revision 1.34  1992/11/27  14:14:12  clive
Removed default print_descriptor

Revision 1.33  1992/11/20  12:31:39  clive
Added a flag to control detailed printed of exceptions
Added maximum list size

Revision 1.32  1992/11/20  11:43:46  clive
Added a bound to the size of printed lists

Revision 1.31  1992/11/13  16:17:34  clive
Backpointers were causing a problem with printing

Revision 1.30  1992/11/05  18:01:12  richard
Changes to the pervsaive library.  Specifcally, calls to the
pervasive Debugger structure have been replaced by calls to
Internal.Value.

Revision 1.29  1992/10/28  11:23:53  clive
Got compare and equality round the wrong way in empty

Revision 1.28  1992/10/28  10:22:48  clive
Changed to use empty instead of empty'

Revision 1.27  1992/10/23  14:11:04  clive
null_tyfun no longer erroneously generated

Revision 1.26  1992/10/19  16:45:12  clive
Empty VE tynames are printed as "_"

Revision 1.25  1992/10/12  08:32:20  clive
Tynames now have a slot recording their definition point

Revision 1.24  1992/10/07  16:53:52  clive
Changes for the use of new shell

Revision 1.23  1992/09/24  14:19:54  matthew
Changed string value printer so that characters are escaped properly.

Revision 1.22  1992/09/14  10:29:36  clive
Now prints out real numbers

Revision 1.21  1992/09/09  13:09:15  clive
Added switches t the value-printer to control depth of printing etc

Revision 1.20  1992/09/03  09:22:34  clive
Added functionality to the value_printer

Revision 1.19  1992/09/02  16:23:12  clive
Took out wrong real number printer

Revision 1.18  1992/09/01  11:43:08  clive
Fiex the shape routine

Revision 1.17  1992/08/28  17:31:20  clive
Changes to reflect new Internal structure

Revision 1.16  1992/08/28  10:43:31  clive
Added the shape function

Revision 1.15  1992/08/27  09:48:04  richard
Rationalisation of the MLWorks structure.

Revision 1.14  1992/08/26  16:25:00  clive
More support for the definition of print functions

Revision 1.13  1992/08/19  09:24:10  clive
Extra then statement had been added

Revision 1.12  1992/08/18  16:25:14  richard
 Changed coercion and the ml_value type in the pervasive environment.

Revision 1.11  1992/08/17  13:20:14  clive
Various improvements

Revision 1.10  1992/08/14  14:42:12  clive
Added the printing of reals

Revision 1.9  1992/08/13  15:47:49  clive
Neatening up, plus changes due to lower level sharing changes

Revision 1.8  1992/08/11  13:05:19  clive
More improvements

Revision 1.7  1992/08/10  13:56:41  clive
New sharing constraints after lower level changes

Revision 1.6  1992/08/06  12:26:09  clive
Now handles eta_tyfuns

Revision 1.5  1992/07/29  11:32:38  clive
Periodical checking in - many improvements

Revision 1.4  1992/07/14  08:56:11  clive
Prints the value carried by an exception

Revision 1.3  1992/07/13  09:53:08  clive
Some minor printing changes

Revision 1.2  1992/06/25  09:19:56  clive
Added a simplified function for toplevel printing

Revision 1.1  1992/06/22  15:20:13  clive
Initial revision

 * Copyright (c) 1993 Harlequin Ltd.
*)

require "$.basis.__int";
require "$.basis.__int32";
require "$.basis.__word" ;
require "$.basis.__word32" ;
require "$.basis.__string_cvt" ;
require "$.basis.__char";
require "$.basis.__string";
require "^.utils.__terminal";

require "../typechecker/types" ;
require "../typechecker/valenv";
require "value_printer_utilities";
require "debugger_types";
require "../rts/gen/tags";
require "../utils/lists";
require "../utils/crash";
require "value_printer" ;

functor ValuePrinter(
  structure Types : TYPES
  structure Valenv : VALENV
  structure ValuePrinterUtilities : VALUEPRINTERUTILITIES
  structure Debugger_Types : DEBUGGER_TYPES
  structure Tags : TAGS
  structure Lists : LISTS
  structure Crash : CRASH

  sharing Types.Datatypes = Valenv.Datatypes =
          ValuePrinterUtilities.BasisTypes.Datatypes

  sharing type Types.Datatypes.Type = Debugger_Types.Type
) : VALUE_PRINTER =
  struct

    structure BasisTypes = ValuePrinterUtilities.BasisTypes
    structure Datatypes = Types.Datatypes
    structure NewMap = Datatypes.NewMap
    structure Ident = Datatypes.Ident
    structure Debugger_Types = Debugger_Types
    structure Options = Types.Options

    type TypeBasis = BasisTypes.Basis
    type Type = Datatypes.Type
    type DebugInformation = Debugger_Types.information

    val do_debug = false

    fun debug s = if do_debug then Terminal.output(s ^ "\n") else ()

    val cast : 'a -> 'b = MLWorks.Internal.Value.cast
    fun max_len (max_seq_size, actual_seq_size) =
      if max_seq_size < 0 orelse max_seq_size > actual_seq_size then
	actual_seq_size
      else
	max_seq_size

    fun generate_underbar x = "_" ^ (if do_debug then (" [" ^ x ^ "] ") else "")

    val ellipsis = ".."

    val list_ellipsis = ", " ^ ellipsis ^ "]"

    val string_abbreviation = ref "\\..."

(*
    fun equal_tynames(Datatypes.TYNAME (x,_,_,_,_,_,_,_),Datatypes.TYNAME (y,_,_,_,_,_,_,_)) = 
      Datatypes.Stamp.stamp_eq(x,y)
      | equal_tynames _ = false

    fun compare_tynames(Datatypes.TYNAME (x,_,_,_,_,_,_,_),Datatypes.TYNAME (y,_,_,_,_,_,_,_)) = 
      Datatypes.Stamp.stamp_lt(x,y)
      | compare_tynames _ = false
*)

    fun get_arg_type(Datatypes.METATYVAR(ref(_,object,_),_,_)) = get_arg_type object
      | get_arg_type(Datatypes.FUNTYPE (arg,_)) = arg
      | get_arg_type x = Datatypes.NULLTYPE


    fun splice (left, separator, right) [] = left ^ right
      | splice (left, separator, right) (s::ss) =
        concat (left :: s ::
                 Lists.reducer
                 (fn (s, strings) => separator :: s :: strings)
                 (ss, [right]))

    fun vector_map (object, length) f =
        let
          fun iterate (list, 0) = list
            | iterate (list, n) =
              iterate ((f (MLWorks.Internal.Value.sub (object, n)))::list, n-1)
        in
          iterate ([], length)
        end

    (* For pairs we select 0 & 1 *)
    (* else 1,2,...,n *)
    fun record_map (object, 2) f =
        [f (MLWorks.Internal.Value.sub (object, 0)),
         f (MLWorks.Internal.Value.sub (object, 1))]
      | record_map (object, length) f =
        vector_map (object,length) f

    fun array_map (object, length) f =
      let
        fun iterate (list, 0) = list
          | iterate (list, n) =
            iterate ((f (MLWorks.Internal.Value.sub (object, n+2)))::list, n-1)
      in
        iterate ([], length)
      end

    fun bytearray_map (object, length) f =
      let
        fun iterate (list, 0) = list
          | iterate (list, n) =
	    iterate 
	      (cast
	         (f(MLWorks.Internal.Value.sub_byte(object, n+3))):: list,  n-1)
      in
        iterate ([], length)
      end


    fun floatarray_map (object, length) f =
      let
        fun iterate (list, 0) = list
          | iterate (list, n) =
	    iterate 
	      (cast
	         (f(MLWorks.Internal.FloatArray.sub(object, n-1))):: list,  n-1)
      in
        iterate ([], length)
      end




    exception Value of string


    (* A header of zero is possible if we are in a shared closure *)
    fun select field =
      if field < 0 then
        raise Value "select: negative field"
      else
        fn value =>
        let
          val primary = MLWorks.Internal.Value.primary value
        in
          if primary = Tags.PAIRPTR 
            then
              if field >= 2 
                then
                  raise Value "select: field >= 2 in pair"
              else
                MLWorks.Internal.Value.sub (value, field)
	  else if primary = Tags.POINTER 
		 then
		   let
		     val (secondary, length) = MLWorks.Internal.Value.header value
		   in
		     if (secondary = Tags.INTEGER0 andalso field=0)
		       orelse (secondary = Tags.INTEGER1 andalso field=0)
		       then
			 MLWorks.Internal.Value.sub (value, 1)
		     else 
		       if secondary = Tags.RECORD then
			 if field >= length then
			   raise Value "select: field >= length in record"
			 else
			   MLWorks.Internal.Value.sub (value, field+1)
		       else
			 raise Value "select: invalid secondary"
		   end
	       else
		 raise Value "select: invalid primary"
        end

    fun integer value =
      let
        val primary = MLWorks.Internal.Value.primary value
      in
        if primary = Tags.INTEGER0 orelse primary = Tags.INTEGER1 then
          cast value : int
        else
          raise Value "not an integer"
      end

    fun word value =
      let
        val primary = MLWorks.Internal.Value.primary value
      in
        if primary = Tags.INTEGER0 orelse primary = Tags.INTEGER1 then
          cast value : word
        else
          raise Value "not a word"
      end

    fun word32 value =
      if
	MLWorks.Internal.Value.primary value = Tags.POINTER andalso
        #1 (MLWorks.Internal.Value.header value) = Tags.STRING
      then
        (cast value : Word32.word)
      else
        raise Value "not a word32"

    fun int32 value =
      if
	MLWorks.Internal.Value.primary value = Tags.POINTER andalso
        #1 (MLWorks.Internal.Value.header value) = Tags.STRING
      then
        (cast value : Int32.int)
      else
        raise Value "not a int32"

    fun contag value =
      let
        val primary = MLWorks.Internal.Value.primary value
      in
        if primary = Tags.INTEGER0 orelse primary = Tags.INTEGER1 then
          cast value : int
        else if primary = Tags.PAIRPTR then
          cast (MLWorks.Internal.Value.sub (value, 0)) : int
        else
          raise Value "contag: not a constructor"
      end

    fun bool value =
      let
        val primary = MLWorks.Internal.Value.primary value
      in
        if primary = Tags.INTEGER0 orelse primary = Tags.INTEGER1 then
          case cast value : int of
            0 => false
          | 1 => true
          | _ => raise Value "bool: invalid integer"
        else
          raise Value "bool: wrong primary"
      end

    fun string value =
      if
        MLWorks.Internal.Value.primary (cast value) = Tags.POINTER andalso
        #1 (MLWorks.Internal.Value.header (cast value)) = Tags.STRING
      then
        cast value : string
      else
        raise Value "not a string"

    fun list (count, value, acc) =
      let val primary = MLWorks.Internal.Value.primary value
      in
	if primary = Tags.INTEGER1 then
          if (cast value : int) = 1 then
	    (true, rev acc)
	  else
	    raise Value "list: invalid integer"
        else if primary = Tags.PAIRPTR then
	  let val head = select 0 value
	      val tail = select 1 value
	  in
	    if count = 0 then
	      (false, rev acc)
	    else
	      list (if count < 0 then count else count - 1, tail, head :: acc)
	  end
        else
	  raise Value "invalid list"
      end
      
    fun real value =
      if
        MLWorks.Internal.Value.primary value = Tags.POINTER andalso
        MLWorks.Internal.Value.header value = (Tags.BYTEARRAY, 12)
      then
        cast value : real
      else
        raise Value "not a real"

    fun code_name value =
      if
        MLWorks.Internal.Value.primary value = Tags.POINTER andalso
         #1 (MLWorks.Internal.Value.header value) = Tags.BACKPTR
      then
        MLWorks.Internal.Value.code_name value
      else
        raise Value "code_name: not a code item"

    fun exn value =
      if MLWorks.Internal.Value.primary value = Tags.PAIRPTR then
        let
          val (name, arg) = cast value
        in
          if MLWorks.Internal.Value.primary name = Tags.PAIRPTR then
            let
              val (unique, string) = cast name
            in
              if MLWorks.Internal.Value.primary unique = Tags.REFPTR then
                if MLWorks.Internal.Value.primary string = Tags.POINTER then
                  if #1 (MLWorks.Internal.Value.header string) = Tags.STRING then
                    cast value : exn
                  else raise Value "exn: wrong secondary on exn name string"
                else raise Value "exn: wrong primary on exn name string"
              else raise Value "exn: wrong primary on exn name unique"
            end
          else raise Value "exn: wrong primary on exn name"
        end
      else raise Value "exn: wrong primary"

    fun convert_ref value =
      if
        MLWorks.Internal.Value.primary value = Tags.REFPTR andalso
        MLWorks.Internal.Value.header value = (Tags.ARRAY, 1)
      then
        cast value : MLWorks.Internal.Value.T ref
      else
        raise Value "not a ref cell"

    fun get_location s =
      let
        val sz = size s
        fun find_end_of_name x =
          if x=sz orelse substring (* could raise Substring *)(s,x,1) = "["
	    then x
	  else find_end_of_name (x+1)
	val ix = find_end_of_name 0
      in
	substring (* could raise Substring *) (s,ix,sz-ix)
      end

    fun find_end_of_name name =
      let
        val s = size name
        fun f x =
          if x=s
            then name
          else if substring (* could raise Substring *)(name,x,1) = "["
                 then substring (* could raise Substring *)(name,0,x)
               else f (x+1)
      in
        f 0
      end
                   

    fun exn_lookup (debug_info, name) =
      let
        val name' = find_end_of_name name
      in
        case Debugger_Types.lookup_debug_info (debug_info,name) of
          SOME (Debugger_Types.FUNINFO {ty,...}) =>
            (name',get_arg_type ty)
        | _ => (name',Datatypes.NULLTYPE)
      end

(*
    type print_method_table =
      (Datatypes.Tyname,(MLWorks.Internal.Value.T list 
                         * (MLWorks.Internal.Value.T -> string) list
                         * (MLWorks.Internal.Value.T -> MLWorks.Internal.Value.T list)
      * (MLWorks.Internal.Value.T -> bool * int)
      -> string)) NewMap.T
            
    fun make_empty_definition_table() = (NewMap.empty 
                                         (compare_tynames,equal_tynames)) : print_method_table

    datatype printer_descriptor =
      PRINTER_DESCRIPTOR of
      {print_options : Options.print_options,
       print_method_table : print_method_table
       }

    (* Define a table of print methods for other types *)

    val default_print_method_table = make_empty_definition_table ()

    fun define_a_print_method(basis,ty,function,
                              descriptor as 
                              (PRINTER_DESCRIPTOR 
                               {print_options,
                                print_method_table})) =
      let
        val tyname = ValuePrinterUtilities.find_tyname(basis,ty)
        val new_definition_table = NewMap.define(print_method_table,tyname,function)
      in
        (true,
         PRINTER_DESCRIPTOR
         {print_options = print_options,
          print_method_table = new_definition_table})
      end
    handle ValuePrinterUtilities.FailedToFind => (false,descriptor)

    fun print_method_defined(basis,ty,PRINTER_DESCRIPTOR printer_descriptor) =
      let
        val tyname = ValuePrinterUtilities.find_tyname(basis,ty)
        val _ = NewMap.apply'(#print_method_table printer_descriptor,tyname)
      in
        true
      end
    handle NewMap.Undefined => false
         | ValuePrinterUtilities.FailedToFind => false

    val toplevel_default_print_descriptor =
      PRINTER_DESCRIPTOR
      {print_options = Options.default_print_options,
       print_method_table = make_empty_definition_table()}

    val global_print_method_table = ref (make_empty_definition_table())
*)

    val error_notify = false

    datatype environment = EMPTY | ENTRY of Datatypes.Type list * environment

    fun unknown (message,primary,secondary,length) =
      concat [message,
	       "primary = ",
	       Int.toString primary,
	       ", secondary = ",
	       Int.toString secondary,
	       ", length = ",
	       Int.toString length]

    (* find if value is a closure *)
    (* Assumes value is either a pair or a record. *)

    fun is_closure value =
      let 
	val fst = select 0 value
      in
        MLWorks.Internal.Value.primary fst = Tags.POINTER andalso
         #1 (MLWorks.Internal.Value.header fst) = Tags.BACKPTR
      end

    fun shape (0,_,_,_,_) = generate_underbar("shape")
      | shape (depth, max_seq_size, max_str_size, float_precision,object) =
        let
          val primary = MLWorks.Internal.Value.primary object
        in
          if primary = Tags.INTEGER0 orelse primary = Tags.INTEGER1 
	    then Int.toString(cast object)
          else if primary = Tags.PAIRPTR 
	    then
	      if is_closure object
		then "<fn>"
	      else
		splice ("{", ", ", "}")
		(record_map (object, 2)
		 (fn object => shape (depth-1, max_seq_size, max_str_size, float_precision,object)))
	    else 
	      if primary = Tags.POINTER then
            let
              val (secondary, length) = MLWorks.Internal.Value.header object
            in
              if secondary = Tags.RECORD then
		if is_closure object
		  then "<fn>"
		else
		  splice ("{", ", ", "}")
		  (record_map (object, length)
                 (fn object => shape (depth-1, max_seq_size, max_str_size, float_precision,object)))
              else if secondary = Tags.STRING then
                concat ["\"", 
                                MLWorks.String.ml_string
                                (cast object,
                                 max_str_size), "\""]
              else if secondary = Tags.BYTEARRAY then
                if length = 12 then
                  MLWorks.Internal.real_to_string (cast object,float_precision)
                else
                  unknown("bad real: ",primary, secondary,length)
              else if secondary = Tags.CODE then
		"<CODE>"
              else if secondary = Tags.BACKPTR then
                "<BACKPTR>"
		(* shared closure case *)
	      else if secondary = 0 andalso length = 0
		     then "<fn>"
	      else 
		unknown("bad ptr: ", primary, secondary, length)
            end
          else if primary = Tags.REFPTR then
            let
              val (secondary, length) = MLWorks.Internal.Value.header object
	      val tail = if length > max_seq_size andalso max_seq_size > 0
                           then list_ellipsis
			 else "]"
            in
              if secondary = Tags.ARRAY then
                splice ("array[", ", ", tail)
                (array_map (object, max_len (max_seq_size, length))
                 (fn object => shape (depth-1, max_seq_size, max_str_size, float_precision,object)))
              else
		if secondary = Tags.BYTEARRAY then
		  splice ("bytearray[", ",", tail)
		  (bytearray_map (object, max_len (max_seq_size, length))
		   (fn object =>
 		      shape (depth-1, max_seq_size, max_str_size,
			     float_precision, cast object)))
		else
		  unknown("bad refptr: ", primary, secondary,length)
            end
          else
	    unknown("bad primary: ", primary, 0, 0)
        end
          
    fun stringify_value debugger_print
      (print_options as
       Options.PRINTOPTIONS {maximum_seq_size,
                             maximum_string_size,
                             maximum_ref_depth,
                             maximum_depth,
                             print_fn_details,
                             print_exn_details,
                             float_precision,
                             ...},
       object,
       ty,
       interpreter_information) =

      let
        (* val print_method_table = !global_print_method_table *)
          fun error_notification (object, message) =
            let
              val shape = "_" 
            (* shape (maximum_depth, maximum_seq_size,maximum_string_size, float_precision, object) *)
            in
              concat
              (if error_notify then
                 ["<", message, ": ", shape, ">"]
               else
                 ["_"])
            end
              
          fun get_arg_type(Datatypes.METATYVAR(ref(_,object,_),_,_)) = get_arg_type object
            | get_arg_type(Datatypes.FUNTYPE (arg,_)) = arg
            | get_arg_type x = Datatypes.NULLTYPE
              
          fun get_next_part_of_type(Datatypes.METATYVAR(ref(_,object,_),_,_)) = 
                 get_next_part_of_type object
            | get_next_part_of_type x = x

          (* maybe the printer should produce an s-expression representation, which can *)
          (* be printed optimally *)

          (* This function could be combined with print_value' *)

          fun needs_brackets (ty as Datatypes.METATYVAR _) =
              needs_brackets (get_next_part_of_type ty)
            | needs_brackets (Datatypes.META_OVERLOADED {1=ref ty,...}) =
              needs_brackets (get_next_part_of_type ty)
            | needs_brackets (Datatypes.CONSTYPE(tys,Datatypes.METATYNAME(ref(tyfun as (Datatypes.TYFUN _)),_,_,_,_,_))) =
              needs_brackets (Types.apply(tyfun,tys))
            | needs_brackets (Datatypes.CONSTYPE
                              (tys,Datatypes.METATYNAME(ref(Datatypes.ETA_TYFUN tyname),_,_,_,_,_))) =
              needs_brackets (Datatypes.CONSTYPE(tys,tyname))
            | needs_brackets (Datatypes.CONSTYPE
                              (tys,Datatypes.METATYNAME(ref(Datatypes.NULL_TYFUN _),_,_,_,_,_))) = false
            | needs_brackets (ty as Datatypes.CONSTYPE(tys,tyname)) =
              if
		Types.num_or_string_typep ty orelse
                Types.tyname_eq (tyname,Types.bool_tyname) orelse
                Types.tyname_eq (tyname,Types.list_tyname) orelse
                Types.tyname_eq (tyname,Types.ml_value_tyname) orelse
                Types.tyname_eq (tyname,Types.dynamic_tyname)
                then false
              else true
            | needs_brackets _ = false

	  val entry1 = "<Entry1>"
	  val entry2 = "<Entry2>"
	  val closure = "<Closure>"

	  val sz_entry1 = size entry1
	  val sz_closure = size closure

	  fun strip_fn_name name =
	    let
	      val sz = size name
	    in
	      if sz >= sz_entry1 andalso
		let
		  val en_string = substring (* could raise Substring *)(name, sz-sz_entry1, sz_entry1)
		in
		 en_string = entry1 orelse en_string = entry2
		end then
		substring (* could raise Substring *)(name, 0, sz-sz_entry1)
	      else
		if sz >= sz_closure andalso
		  substring (* could raise Substring *)(name, sz-sz_closure, sz_closure) = closure then
		  substring (* could raise Substring *)(name, 0, sz-sz_closure)
		else
		  name
	    end

          fun value_to_string(object,ty,env) =
            let
              fun value_to_string'(_,_,_,_,0) = ellipsis
                | value_to_string'(object,ty as Datatypes.METATYVAR _,env,ref_depth,depth) = 
                  value_to_string'(object,get_next_part_of_type ty,env,ref_depth,depth)
                  
                | value_to_string'
		    (object, Datatypes.META_OVERLOADED {1=ref ty,...},
		     env,ref_depth,depth) = 
                  value_to_string'(object,get_next_part_of_type ty,env,ref_depth,depth)
                  
                | value_to_string'(object,Datatypes.TYVAR _,env,ref_depth,depth) = 
                  generate_underbar("tyvar")
                  
                | value_to_string'(object,Datatypes.FUNTYPE _,env,ref_depth,depth) = 
                  if print_fn_details then
		    let
		      val name = MLWorks.String.ml_string (code_name (select 0 object), ~1)
		    in
		      "fn[" ^ strip_fn_name name ^ "]"
		    end
                    handle Value message => error_notification (object, message)
                  else
                    "fn"

                | value_to_string' (object,Datatypes.METARECTYPE (ref (_,uninstantiated,ty,_,_)),env,ref_depth,depth) = 
                  if uninstantiated
                    then
                      error_notification (object,"Uninstantiated METARECTYPE")
                  else
                    value_to_string' (object,ty,env,ref_depth,depth)

		| value_to_string'(object,ty as (Datatypes.RECTYPE _),env,ref_depth,depth) =
                  (* Unless there is enough room to print the components, don't print the labels *)
                  if depth <= 1
                    then ellipsis
                  else
		  let
		    val dom = Types.rectype_domain ty
		    val len = length dom
		    val range = Types.rectype_range ty
		    val primary = MLWorks.Internal.Value.primary object
		  in
		    if len = 0 then 
		      "()"
		    else
		      if primary = Tags.PAIRPTR orelse primary = Tags.POINTER then
			let
			  fun get_elements ([],_) = []
			    | get_elements (ty::tys,pos) = 
			      value_to_string'
			      (MLWorks.Internal.Value.sub (object,pos),
			       ty,env,ref_depth,depth-1) ::
                              get_elements(tys,pos+1)
			      
			  (* tuple members are not guaranteed to be in order,
			   * so we build a list of indices *)
			      
			  fun tuple_indices () =
			    if len < 2 then NONE
			    else
			      let
				fun tuple_indices' (acc,0) = SOME acc
				  | tuple_indices' (acc,n) = 
				    (let
				       val name = Int.toString n
				       val sym = Ident.Symbol.find_symbol name
				       val lab = Ident.LAB sym
				       val pos = Lists.find (lab,dom)
				     in
				       tuple_indices' (pos::acc, n-1)
				     end)
			      in
				tuple_indices' ([],len)
				handle Lists.Find => NONE
			      end
			    
			  fun print_as_record values =
			    let
			      fun print_as_record' (Ident.LAB name,value) =
				Ident.Symbol.symbol_name name ^ "=" ^ value
			      val result = map print_as_record' (Lists.zip(dom,values))
			    in
			      case result of
				[] => "()"
			      | [one] => "{" ^ one ^ "}"
			      | arg::args =>
				  let
				    fun put_together [] = ""
				      | put_together (h::t) = ", " ^ h ^ put_together t
				  in
				    "{" ^ arg ^ put_together args ^ "}"
				  end
			    end
			  
			  (* for a tuple, take a list of indices and a list of elements *)
			
			  fun print_as_tuple (ilist, els) =
			    let
			      val ordered_els = (map (fn n => Lists.nth(n,els)) ilist
						 handle Lists.Nth => Crash.impossible "Problem (2) in value_printer")
			      fun put_together [] = ""
				| put_together (h::t) = ", " ^ h ^ put_together t
			    in
			      case ordered_els of
				arg::args => 
				  "(" ^ arg ^ put_together args ^ ")"
			      | _ =>
				  Crash.impossible "Problem (1) in value_printer"
			    end
			  
			  val record_size =
			    if primary = Tags.PAIRPTR then
			      2
			    else
			      #2 (MLWorks.Internal.Value.header object)
			in
			  if length range = record_size then
			    let val elements = get_elements (range, if record_size = 2 then 0 else 1)
			    in
			      case tuple_indices () of 
				NONE =>
				  print_as_record elements
			      | SOME index_list =>
				  print_as_tuple (index_list,elements)
			    end
			  else 
			    error_notification(object,"(Record is not of correct size)")
			end
		      else
			error_notification(object,"(record pointer not found when expected)")
		  end

		| value_to_string'(object,
                                   Datatypes.CONSTYPE
                                   (tys,Datatypes.METATYNAME(ref(tyfun as (Datatypes.TYFUN _)),_,_,_,_,_)),
                                   env,ref_depth,depth) =
                  value_to_string'(object,Types.apply(tyfun,tys),env,ref_depth,depth)
                  
                | value_to_string'(object,
                                   Datatypes.CONSTYPE
                                   (tys,Datatypes.METATYNAME(ref(Datatypes.ETA_TYFUN tyname),_,_,_,_,_)),
                                   env,ref_depth,depth) =
                  value_to_string'(object,Datatypes.CONSTYPE(tys,tyname),env,ref_depth,depth)

                | value_to_string' (object, ty as Datatypes.CONSTYPE(tys,tyname),env,ref_depth,depth) =
                  if debugger_print andalso
                     (case tyname of
                        Datatypes.METATYNAME(ref(Datatypes.NULL_TYFUN _),_,_,_,ref ve,_) =>
                          Valenv.empty_valenvp ve
                      | _ => false) then
                      (case tyname of
                         Datatypes.METATYNAME(ref(Datatypes.NULL_TYFUN(_,tyfun)),name,n,b,ve,is_abs) =>
                         (value_to_string'(object,
                                        Datatypes.CONSTYPE(tys,
                                                  Datatypes.METATYNAME(tyfun,name,n,b,ve,is_abs)),
                                        env,ref_depth,depth))
                        | _ => Crash.impossible "CONSTYPE:value_printer")
                  else 
                  let
                    val (in_table,func) = (* (true,NewMap.apply'(print_method_table,tyname)) 
                      handle NewMap.Undefined => *) (false, fn _ => "")

                    val primary = MLWorks.Internal.Value.primary object
                  in
                    if in_table then
                      let
                        val print_methods_for_arguments =
                          map (fn ty => fn (object) => value_to_string'(object,ty,env,ref_depth,depth-1)) tys

                        fun extract_elements object =
                          if primary = Tags.INTEGER0 orelse primary = Tags.INTEGER1 then
                            [object]
                          else if primary = Tags.PAIRPTR then
                            [MLWorks.Internal.Value.sub (object, 0),
                             MLWorks.Internal.Value.sub (object, 1)]
                          else if primary = Tags.REFPTR then
			    let
			      val (secondary, length) = MLWorks.Internal.Value.header object
			    in
			      if secondary = Tags.ARRAY then
				array_map
				  (object, max_len (maximum_seq_size, length))
				  (fn x => x)
			      else
				bytearray_map
				(object, max_len (maximum_seq_size, length))
				(fn x => x)
                            end
                          else if primary = Tags.POINTER then
                            let
                              val (secondary, length) = MLWorks.Internal.Value.header object
                            in
                              if secondary = Tags.RECORD then
                                record_map (object, length) (fn x => x)
                              else
                                []
                            end
                          else
                            []

                        val list_of_elements = extract_elements object

                        fun is_integer_tagged object =
                          let
                            val primary = MLWorks.Internal.Value.primary object
                          in
                            if primary = Tags.INTEGER0 orelse primary = Tags.INTEGER1 then
                              (true, cast object : int)
                            else
                              (false, 0)
                          end
                      in
                        func(list_of_elements,print_methods_for_arguments,extract_elements,is_integer_tagged)
                        handle _ => error_notification (object,"(Failure in a user print function)")
                      end

                    else 
		      if Types.type_eq (ty, Types.int32_type, true, true) then
                        Int32.toString (int32 object)
                        handle Value message => error_notification (object, "<" ^ message ^ ">")
                      else if Types.int_typep ty then
                        Int.toString (integer object)
                        handle Value message => error_notification (object, "<" ^ message ^ ">")

		      else if Types.type_eq (ty, Types.word32_type, true, true) then
                        "0w" ^ Word32.fmt StringCvt.DEC (word32 object)
                        handle Value message => error_notification (object, "<" ^ message ^ ">")
                      else if Types.word_typep ty then
                        "0w" ^ Word.fmt StringCvt.DEC (word object)
                        handle Value message => error_notification (object, "<" ^ message ^ ">")

                      else if Types.real_typep ty then
                        MLWorks.Internal.real_to_string(real object,float_precision)
                        handle Value message => error_notification (object, "<" ^ message ^ ">")

                      else if Types.tyname_eq (tyname,Types.bool_tyname) then
                        (fn true => "true" | false => "false") (bool object)
                        handle Value message => error_notification (object, "<" ^ message ^ ">")

                      else if Types.tyname_eq (tyname,Types.string_tyname) then
                        concat ["\"", MLWorks.String.ml_string
					 (string object,
					  maximum_string_size), "\""]
                        handle Value message => error_notification (object, "<" ^ message ^ ">")

                      else if Types.tyname_eq (tyname,Types.char_tyname) then
                        concat ["#\"", MLWorks.String.ml_string
				 (string (String.str(Char.chr(ord(MLWorks.Internal.Value.cast object)))),
				  maximum_string_size), "\""]
                        handle Value message => error_notification (object, "<" ^ message ^ ">")

                      else if Types.tyname_eq (tyname,Types.list_tyname) then
                        (case tys of
                           [ty] =>
                             if depth <= 1 then "[...]"
                             else
                               let
                                 val (total,element_list) =   
                                   list (maximum_seq_size,object,[])
                               in
                                 concat
                                 ("[" ::
                                  rev (
                                       (if total then "]" else list_ellipsis) ::
                                          Lists.reducel
                                          (fn (list, object) =>
                                           value_to_string' (object, ty, env, ref_depth, depth-1) ::
                                           (case list of
                                              [] => []
                                            | list => ", " :: list))
                                          ([],element_list)))
                               end
                         | _ => error_notification (object, "<list arity>"))
                        handle Value message => error_notification (object, "<" ^ message ^ ">")

                      else if Types.tyname_eq (tyname,Types.ml_value_tyname) then
                         shape (depth, maximum_seq_size,
				maximum_string_size, float_precision,object)

                      else if Types.tyname_eq (tyname,Types.exn_tyname) then
                        let
                          val s = MLWorks.Internal.Value.exn_name (exn object)
                        in
                          if print_exn_details then s
                          else find_end_of_name s
                        end

                      else if Types.tyname_eq (tyname,Types.ref_tyname) then 
                         if ref_depth <= 0 then
                           generate_underbar("ref_depth")
                         else
                           (case (tys, convert_ref object) of
                              ([ty], ref object) =>
                                concat ["ref(",
                                         value_to_string' (object,ty,env,ref_depth-1,depth-1),
                                         ")"]
                            | _ => error_notification (object, "<ref arity>"))
                           handle Value message => error_notification (object, "<" ^ message ^ ">")

                      else if Types.tyname_eq (tyname,Types.array_tyname) then
                        if ref_depth <= 0 then
                          generate_underbar("ref depth")
                        else
                          case tys of
                            [ty] => 
                              if MLWorks.Internal.Value.primary object = Tags.REFPTR
                                then
                                  let
				    val (secondary,length) =
				      MLWorks.Internal.Value.header object
                                  in
                                    if secondary = Tags.ARRAY then
				      let
					val element_list =
                                          array_map
                                            (object,
					     max_len (maximum_seq_size, length))
                                            (fn x => x)
					val tail = 
					  if length > maximum_seq_size andalso
					     maximum_seq_size > 0 then
                                             list_ellipsis
					  else
					    "]"
				      in
					concat
					("#A[" ::
					 rev (tail :: 
					      Lists.reducel
					      (fn (list, object') =>
					       value_to_string' (object', ty, env, ref_depth, depth-1) ::
					       (case list of
						  [] => []
						| list => ", " :: list))
					      ([],element_list)))
				      end
				    else
				      error_notification (object,"<Array not an array>")
                                  end
                              else
                                error_notification(object,"<Array not a ref pointer>")
                             | _ => error_notification (object,"<Bad array type>")
                        
                      else if Types.tyname_eq (tyname,Types.bytearray_tyname) then
                        if ref_depth <= 0 then
                          generate_underbar("ref depth")
                        else
                          if MLWorks.Internal.Value.primary object = Tags.REFPTR then
			    let
			      val (secondary,length) =
				MLWorks.Internal.Value.header object
			    in
			      if secondary = Tags.BYTEARRAY then
				let
				  val element_list =
				    bytearray_map
				      (object,
  				       max_len (maximum_seq_size, length))
				      (fn x => x)

				  val tail = 
                                    if length > maximum_seq_size andalso
				       maximum_seq_size > 0 then
                                       list_ellipsis
                                    else
                                      "]"
				in
				  concat
				  ("#B[" ::
				   rev (tail :: 
					Lists.reducel
					(fn (list, object') =>
					 value_to_string'
					 (cast object',
					  Types.int_type, env, ref_depth, depth-1) ::
					 (case list of
					    [] => []
					  | list => ", " :: list))
					([],element_list)))
				end
			      else
				error_notification
                                  (object,"<Bytearray not a bytearray>")
			    end
                          else
                            error_notification(object,"<Byte array not a ref>")


                      else if Types.tyname_eq (tyname,Types.floatarray_tyname)
                             then
                        if ref_depth <= 0 then
                          generate_underbar("ref depth")
                        else
                          if MLWorks.Internal.Value.primary object 
                                                       = Tags.REFPTR then
			    let
                              (* floatarray is implemented as a bytearray.
                                 each float is 8 bytes long *)

			      val (secondary,length) =
				MLWorks.Internal.Value.header object
                              val length = length div 8
			    in
			      if secondary = Tags.BYTEARRAY then
				let
				  val element_list =
				    floatarray_map
				      (cast object,
  				       max_len (maximum_seq_size, length))
				      (fn x => x)

				  val tail = 
                                    if length > maximum_seq_size andalso
				       maximum_seq_size > 0 then
                                       list_ellipsis
                                    else
                                      "]"
				in
				  concat
				  ("#F[" ::
				   rev (tail :: 
					Lists.reducel
					(fn (list, object') =>
					 value_to_string'
					 (cast object',
					  Types.real_type, env, ref_depth, depth-1) ::
					 (case list of
					    [] => []
					  | list => ", " :: list))
					([],element_list)))
				end
			      else
				error_notification
                                  (object,"<Floatarray not a floatarray>")
			    end
                          else
                            error_notification(object,"<Float array not a ref>")


		      else if Types.tyname_eq(tyname, Types.vector_tyname) then
                        if ref_depth <= 0 then
                          generate_underbar("ref depth")
                        else
                          case tys of
                            [ty] =>
			      let
				val primary = MLWorks.Internal.Value.primary object
				val (secondary, length) =
				  if primary = Tags.POINTER then
				    MLWorks.Internal.Value.header object
				  else
				    if primary = Tags.PAIRPTR then
				      (Tags.RECORD, 2)
				    else
				      (Tags.MLERROR, 0)
			      in
				if secondary = Tags.RECORD then
				  let
				    val element_list =
				      vector_map
				      (object, max_len(maximum_seq_size, length))
				      (fn x => x)
				    val tail = 
				      if length > maximum_seq_size then
                                        list_ellipsis
				      else
				        "]"
				  in
				    concat
				    ("#V[" ::
				     rev (tail :: 
					  Lists.reducel
					  (fn (list, object') =>
					   value_to_string' (object', ty, env, ref_depth, depth-1) ::
					   (case list of
					      [] => []
					    | list => ", " :: list))
					  ([],element_list)))
				  end
				else
				  if secondary = Tags.MLERROR then
				    error_notification(object,"<Vector not a pointer>")
				  else
				    error_notification (object,"<Vector not a record>")
			      end
			  | _ => error_notification (object,"<Bad vector type>")
                      else
                        let
                          fun do_it (ty_name,val_map as Datatypes.VE(_,constructor_map),is_abs) =
                             if (is_abs andalso not debugger_print)
                               orelse NewMap.is_empty constructor_map then
                               (* This probably means that we have a functor parameter type *)
                               generate_underbar("empty constructor map:"^ty_name)
                             else
                               let
                                 val (domain,range) = 
                                   Lists.unzip(NewMap.to_list_ordered constructor_map)
                                 val is_a_single_constructor = (length domain = 1)
                                 fun test_scheme (Datatypes.SCHEME(_,
                                                  (Datatypes.FUNTYPE _,_))) = true
                                   | test_scheme (Datatypes.UNBOUND_SCHEME(
                                                                Datatypes.FUNTYPE _,_)) = true
                                   | test_scheme _ = false
                                 val is_a_single_vcc = 
                                   case range of
                                     [x] => test_scheme x
                                   | _ => false
                               in
                                 if is_a_single_constructor andalso not is_a_single_vcc then
                                   case domain of
                                     [Ident.CON name] => Ident.Symbol.symbol_name name
                                   | _ => error_notification(object,
                                                            "(single non-vcc problem with name)")
                                 else 
                                   if is_a_single_vcc then
                                     case domain of 
                                       [name' as Ident.CON name] => 
                                         let
                                           val name = Ident.Symbol.symbol_name name
                                           val scheme = Valenv.lookup(name',val_map)

                                           val (ty,env') =
                                             (case scheme of
                                                Datatypes.SCHEME(_,(ty',_)) => 
                                                  (ty',ENTRY(tys,env))
                                              | Datatypes.UNBOUND_SCHEME(ty',_) => (ty',env)
					      | Datatypes.OVERLOADED_SCHEME _ =>
                                                  (Datatypes.NULLTYPE,env))
                                           val arg_type = get_arg_type ty
                                           val brackets = needs_brackets arg_type
                                         in
                                           concat [name,
                                                    (if brackets then "(" else " "),
                                                    value_to_string'(object,
                                                                     arg_type,
                                                                     env',ref_depth,depth-1),
                                                    (if brackets then ")" else "")]
                                         end
                                     | _ => error_notification(object,"(Problems in vcc code)")
                                   else
                                     if primary = Tags.INTEGER0 orelse primary = Tags.INTEGER1 then
                                       (case Lists.nth(cast(object),domain) of
                                          name' as Ident.CON name =>
					    (if test_scheme(NewMap.apply'(constructor_map, name')) then
					       error_notification(object,"(should carry value)")
					     else
					       Ident.Symbol.symbol_name name)
                                        | _ => error_notification(object,"(Not a CONS in a datatype)"))
                                          handle Lists.Nth =>
                                            (debug ("Yargh: " ^
                                                    Int.toString (cast object));
                                            generate_underbar("lists.nth 1"))
                                     else
				       if primary = Tags.PAIRPTR then
					 let
					   val (code, packet) =
					     (MLWorks.Internal.Value.sub (object,0),
					      MLWorks.Internal.Value.sub (object,1))
					   val code_primary =
					     MLWorks.Internal.Value.primary code
					 in
					   if code_primary = Tags.INTEGER0 orelse
					     code_primary = Tags.INTEGER1 then
					     let
					       val name' = Lists.nth(cast(code),domain)
					       val name =
						 case name' of
						   Ident.CON x => Ident.Symbol.symbol_name x
						 | _ => "CantFigureNameOut"
					       val scheme = Valenv.lookup(name',val_map)
					       val (ty,env') =
						 (case scheme of
						    Datatypes.SCHEME(_,(ty',_)) => 
						      (ty',ENTRY(tys,env))
						  | Datatypes.UNBOUND_SCHEME(ty',_) => (ty',env)
						  | Datatypes.OVERLOADED_SCHEME _ =>
						      (Datatypes.NULLTYPE,env))
					       val arg_type = get_arg_type ty
					       val brackets = needs_brackets arg_type
					     in
					       if test_scheme scheme then
						 concat [name,
							  (if brackets then "(" else " "),
							     value_to_string'(packet,
									      arg_type,
									      env',ref_depth,depth-1),
							     if brackets then ")" else ""]
					       else
						 error_notification(object,"(should not carry value)")
					     end
					   handle Lists.Nth => generate_underbar("lists.nth 2")
					   else
					     error_notification
					     (object, 
					      "(Constructor tag not integer in expected datatype case)")
					 end
				       else 
					 error_notification
					 (object, 
					  "(Not INTEGER or PAIR in expected datatype case)")
                               end
                        in
                          case tyname of
                            Datatypes.TYNAME (_,name,_,_,ref valenv,_,
                                              ref is_abs,_,_) =>
                              do_it (name,valenv,is_abs)
                          | Datatypes.METATYNAME (_,name,_,_,ref valenv,
                                                  ref is_abs) =>
                              do_it (name,valenv,is_abs)
                        end
                  end

                | value_to_string'(object,Datatypes.DEBRUIJN(level,_,_,_),env,ref_depth,depth) =
                  (case env of
                      ENTRY(env,old_env) =>
                        let
                          exception DeBruijn_In_ValuePrinter
                          fun find_it (level) =
                            let
                              fun find_it'(0,h::t) = h
                                | find_it'(n,h::t) = find_it'(n-1,t)
                                | find_it'(_,[]) = raise DeBruijn_In_ValuePrinter
                            in
                              find_it'(level,env)
                            end
                          val ty = find_it(level)
                        in
                          (* Print the value with the actual type at the same depth *)
                          value_to_string'(object,ty,old_env,ref_depth,depth)
                        end
                    (* Dynamic values can contain types with unbound debruijns *)
                    (* One day the debruijns will be filled in with recipe information *)
                    | _ => generate_underbar("Unbound debruijn"))

                | value_to_string'(_,Datatypes.NULLTYPE,env,ref_depth,depth) = generate_underbar("nulltype")
            in
              value_to_string'(object,ty,env,maximum_ref_depth,maximum_depth) 
            end
      in
        value_to_string(object,ty,EMPTY)
      end

    (* Why is this here? *)
    fun function_name f =
      let val object = cast f
      in MLWorks.String.ml_string (code_name (select 0 object), ~1)
	 handle Value _ => Crash.impossible "Error in function_name"
      end
  end
@


1.119.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a3 4
 * Revision 1.119  1998/03/20  08:46:32  mitchell
 * [Bug #70076]
 * Change value printer to use MLWorks.Internal.Value.exn_name instead of General.exnName
 *
@


1.118
log
@[Bug #70070]
Remove MLWorks.IO.terminal_out in favour of Terminal.output
@
text
@d4 4
d1282 1
a1282 1
                          val s = General.exnMessage (exn object)
@


1.117
log
@[Bug #30153]
Fix mistake from previous change (Old.chr is equiv to String.str(Chr.chr ...)).
@
text
@d4 4
d407 1
d447 1
a447 1
    fun debug s = if do_debug then MLWorks.IO.output(MLWorks.IO.terminal_out,s ^ "\n") else ()
@


1.116
log
@[Bug #30153]
Remove references to Old.
@
text
@d4 4
d402 1
d1239 1
a1239 1
				 (string (Char.chr(ord(MLWorks.Internal.Value.cast object))),
@


1.115
log
@[Bug #30088]
Get rid of MLWorks.Option
@
text
@d4 4
d392 6
a397 5
require "../basis/__int";
require "../basis/__int32";
require "../basis/__word" ;
require "../basis/__word32" ;
require "../basis/__string_cvt" ;
a406 1
require "^.basis.__old";
d1234 1
a1234 1
				 (string (Old.chr(ord(MLWorks.Internal.Value.cast object))),
@


1.115.2.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a3 4
 * Revision 1.115  1997/05/02  16:44:56  jont
 * [Bug #30088]
 * Get rid of MLWorks.Option
 *
@


1.115.1.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a3 4
 * Revision 1.115  1997/05/02  16:44:56  jont
 * [Bug #30088]
 * Get rid of MLWorks.Option
 *
@


1.114
log
@Removing <<not a ...>> message
@
text
@d4 3
d1103 1
a1103 1
				MLWorks.Option.NONE =>
@


1.114.1.1
log
@branched from 1.114
@
text
@a3 3
 * Revision 1.114  1997/03/27  14:47:38  matthew
 * Removing <<not a ...>> message
 *
@


1.114.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a3 3
 * Revision 1.114.1.1  1997/05/12  10:29:34  hope
 * branched from 1.114
 *
@


1.114.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a3 3
 * Revision 1.114.1.1  1997/05/12  10:29:34  hope
 * branched from 1.114
 *
@


1.114.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a3 3
 * Revision 1.114.1.1  1997/05/12  10:29:34  hope
 * branched from 1.114
 *
@


1.114.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a3 3
 * Revision 1.114.1.1.1.1  1997/07/28  18:15:25  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.113
log
@[Bug #1431]
Printing the Io exception nicely.
@
text
@d4 4
d794 1
a794 1
    val error_notify = true
d915 1
a915 5
                 if maximum_depth=0
                   then 
                     ["_"]
                 else
                   ["<shape ", shape, ">"])
@


1.112
log
@[Bug #1818]
Adding routine to print value of floatarray.
@
text
@d4 4
d711 1
a711 1
    fun exn_lookup (debug_info, name) =
d714 1
a714 1
        fun find_end_of_name x =
d719 9
a727 2
               else find_end_of_name (x+1)
        val name' = find_end_of_name 0
d1260 6
a1265 26
			let
			  val exn = exn object
			  val name = MLWorks.Internal.Value.exn_name exn
			  val arg = MLWorks.Internal.Value.exn_argument exn
			  val string = MLWorks.Internal.Value.exn_name_string name
			  val (string', ty) = exn_lookup (interpreter_information, string)
			in
			  case ty of
			    Datatypes.NULLTYPE => 
			      concat [string',if print_exn_details then get_location string else ""]
			  | _ =>
                              let
                                val brackets = needs_brackets ty
                              in
                                concat [string',
                                         if print_exn_details 
                                           then get_location string 
                                         else "",
                                         " ",
                                         if brackets then "(" else "",
                                         value_to_string' (arg, ty, env, ref_depth, depth-1),
                                         if brackets then ")" else ""
                                         ]
                              end
			end
		        handle Value message => error_notification (object, "<" ^ message ^ ">")
@


1.111
log
@[Bug #1728]
__integer becomes __int
@
text
@d4 4
d498 15
d1370 2
a1371 1
				error_notification (object,"<Bytearray not an bytearray>")
d1375 53
@


1.111.4.1
log
@branched from 1.111
@
text
@a3 4
 * Revision 1.111  1996/11/06  11:23:18  matthew
 * [Bug #1728]
 * __integer becomes __int
 *
@


1.111.3.1
log
@branched from 1.111
@
text
@a3 4
 * Revision 1.111  1996/11/06  11:23:18  matthew
 * [Bug #1728]
 * __integer becomes __int
 *
@


1.111.3.1.1.1
log
@branched from 1.111.3.1
@
text
@a3 3
 * Revision 1.111.3.1  1996/12/17  17:43:25  hope
 * branched from 1.111
 *
@


1.111.2.1
log
@branched from 1.111
@
text
@a3 4
 * Revision 1.111  1996/11/06  11:23:18  matthew
 * [Bug #1728]
 * __integer becomes __int
 *
@


1.111.1.1
log
@branched from 1.111
@
text
@a3 4
 * Revision 1.111  1996/11/06  11:23:18  matthew
 * [Bug #1728]
 * __integer becomes __int
 *
@


1.111.1.1.1.1
log
@branched from 1.111.1.1
@
text
@a3 3
 * Revision 1.111.1.1  1996/11/14  12:44:02  hope
 * branched from 1.111
 *
@


1.110
log
@[Bug #1614]
basifying String
@
text
@d4 4
d373 1
a373 1
require "../basis/__integer";
@


1.109
log
@[Bug #1592]
threading level info in tynames.
@
text
@d4 4
d383 1
d448 1
a448 1
        String.implode (left :: s ::
d676 1
a676 1
          if x=sz orelse String.substring(s,x,1) = "["
d681 1
a681 1
	String.substring (s,ix,sz-ix)
d690 2
a691 2
          else if String.substring(name,x,1) = "["
                 then String.substring(name,0,x)
d696 1
a696 1
          MLWorks.Option.SOME (Debugger_Types.FUNINFO {ty,...}) =>
d761 1
a761 1
      String.implode [message,
d808 1
a808 1
                String.implode ["\"", 
d873 1
a873 1
              String.implode
d932 1
a932 1
		  val en_string = String.substring(name, sz-sz_entry1, sz_entry1)
d936 1
a936 1
		String.substring(name, 0, sz-sz_entry1)
d939 2
a940 2
		  String.substring(name, sz-sz_closure, sz_closure) = closure then
		  String.substring(name, 0, sz-sz_closure)
d984 1
a984 1
		    val len = Lists.length dom
d1004 1
a1004 1
			    if len < 2 then MLWorks.Option.NONE
d1007 1
a1007 1
				fun tuple_indices' (acc,0) = MLWorks.Option.SOME acc
d1019 1
a1019 1
				handle Lists.Find => MLWorks.Option.NONE
d1062 1
a1062 1
			  if Lists.length range = record_size then
d1068 1
a1068 1
			      | MLWorks.Option.SOME index_list =>
d1186 1
a1186 1
                        String.implode ["\"", MLWorks.String.ml_string
d1192 2
a1193 2
                        String.implode ["#\"", MLWorks.String.ml_string
				 (string (String.chr(ord(MLWorks.Internal.Value.cast object))),
d1206 1
a1206 1
                                 String.implode
d1235 1
a1235 1
			      String.implode [string',if print_exn_details then get_location string else ""]
d1240 1
a1240 1
                                String.implode [string',
d1259 1
a1259 1
                                String.implode ["ref(",
d1291 1
a1291 1
					String.implode
d1333 1
a1333 1
				  String.implode
d1380 1
a1380 1
				    String.implode
d1409 1
a1409 1
                                 val is_a_single_constructor = (Lists.length domain = 1)
d1443 1
a1443 1
                                           String.implode [name,
d1493 1
a1493 1
						 String.implode [name,
@


1.109.1.1
log
@branched from 1.109
@
text
@a3 4
 * Revision 1.109  1996/10/02  16:11:53  andreww
 * [Bug #1592]
 * threading level info in tynames.
 *
@


1.108
log
@stringcvt->string_cvt
@
text
@d4 3
d1510 2
a1511 1
                            Datatypes.TYNAME (_,name,_,_,ref valenv,_,ref is_abs,_) =>
d1513 2
a1514 1
                          | Datatypes.METATYNAME (_,name,_,_,ref valenv,ref is_abs) =>
@


1.108.2.1
log
@branched from 1.108
@
text
@a3 3
 * Revision 1.108  1996/06/04  20:24:16  io
 * stringcvt->string_cvt
 *
@


1.108.1.1
log
@branched from 1.108
@
text
@a3 3
 * Revision 1.108  1996/06/04  20:24:16  io
 * stringcvt->string_cvt
 *
@


1.107
log
@(Char.)ord is now at top level.
@
text
@d4 3
d366 1
a366 1
require "../basis/__stringcvt" ;
@


1.106
log
@FIxing problem with string printing.
@
text
@d4 3
d1182 1
a1182 1
				 (string (String.chr(Char.ord(MLWorks.Internal.Value.cast object))),
@


1.105
log
@Changed type of MLWorks.Internal.real_to_string
,
@
text
@d4 4
a416 36
    fun local_ml_string (s,max_size) =
      let
	fun to_digit n = String.chr (n +String.ord "0")

	fun aux ([],result,_) = String.implode (rev result)
	  | aux (_,result,0) = String.implode (rev (!string_abbreviation :: result))
	  | aux (char::rest,result,n) =
	    let val newres =
	      case char of 
		"\n" => "\\n"::result
	      | "\t" => "\\t"::result
	      | "\"" => "\\\""::result
	      | "\\" => "\\\\"::result
	      | c =>
		  let val n = String.ord c
		  in
		    if n < 32 orelse n >= 127 then
		      let
			val n1 = n div 10
		      in
			(to_digit (n mod 10))::
			(to_digit (n1 mod 10))::
			(to_digit (n1 div 10))::
			"\\" :: result
		      end
		    else
		      c::result
		  end
	    in
	      aux (rest, newres, n-1)
	    end
      in
	aux (String.explode s,[],if max_size < 0 then ~1 else max_size)
      end


d794 4
a797 3
                String.implode ["\"", local_ml_string
				 (cast object,
				  max_str_size), "\""]
d1172 1
a1172 1
                        String.implode ["\"", local_ml_string
d1178 1
a1178 1
                        String.implode ["#\"", local_ml_string
@


1.104
log
@Changes to basis
@
text
@d4 3
d798 2
a799 2
    fun shape (0, _, _, _) = generate_underbar("shape")
      | shape (depth, max_seq_size, max_str_size, object) =
d812 1
a812 1
		 (fn object => shape (depth-1, max_seq_size, max_str_size, object)))
d824 1
a824 1
                 (fn object => shape (depth-1, max_seq_size, max_str_size, object)))
d831 1
a831 1
                  MLWorks.Internal.real_to_string (cast object)
d854 1
a854 1
                 (fn object => shape (depth-1, max_seq_size, max_str_size, object)))
d861 1
a861 1
			     cast object)))
d877 1
d888 1
a888 1
            (* shape (maximum_depth, maximum_seq_size,maximum_string_size, object) *)
d1195 1
a1195 1
                        MLWorks.Internal.real_to_string(real object)
d1240 1
a1240 1
				maximum_string_size, object)
@


1.103
log
@Changes to Word structure
@
text
@d4 3
d350 4
a362 2
require "../basis/word" ;
require "../basis/integer" ;
a364 1
  include sig
a370 3
  structure Word : WORD 
  structure Word32 : WORD
  structure Int32 : INTEGER
a376 1
  end where type Word.word = word
d1184 1
a1184 1
                        Word32.toString (word32 object)
d1187 1
a1187 1
                        Word.toString (word object)
@


1.102
log
@String functions explode, implode, chr and ord now only available from String
io functions and types
instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
now only available from MLWorks.IO
@
text
@d4 6
d1184 1
a1184 1
                        Word32.makestring (word32 object)
d1187 1
a1187 1
                        Word.makestring (word object)
@


1.101
log
@Removing MLWorks.Integer
@
text
@d4 3
d387 1
a387 1
    fun debug s = if do_debug then output(MLWorks.IO.terminal_out,s ^ "\n") else ()
d406 1
a406 1
	fun to_digit n = chr (n +ord "0")
d408 2
a409 2
	fun aux ([],result,_) = implode (rev result)
	  | aux (_,result,0) = implode (rev (!string_abbreviation :: result))
d418 1
a418 1
		  let val n = ord c
d436 1
a436 1
	aux (explode s,[],if max_size < 0 then ~1 else max_size)
d457 1
a457 1
        implode (left :: s ::
d770 1
a770 1
      implode [message,
d817 1
a817 1
                implode ["\"", local_ml_string
d880 1
a880 1
              implode
d1193 1
a1193 1
                        implode ["\"", local_ml_string
d1199 2
a1200 2
                        implode ["#\"", local_ml_string
				 (string (chr(Char.ord(MLWorks.Internal.Value.cast object))),
d1213 1
a1213 1
                                 implode
d1242 1
a1242 1
			      implode [string',if print_exn_details then get_location string else ""]
d1247 1
a1247 1
                                implode [string',
d1266 1
a1266 1
                                implode ["ref(",
d1298 1
a1298 1
					implode
d1340 1
a1340 1
				  implode
d1387 1
a1387 1
				    implode
d1450 1
a1450 1
                                           implode [name,
d1500 1
a1500 1
						 implode [name,
@


1.100
log
@initbasis moves to basis
@
text
@d4 3
d337 2
d769 1
a769 1
	       MLWorks.Integer.makestring primary,
d771 1
a771 1
	       MLWorks.Integer.makestring secondary,
d773 1
a773 1
	       MLWorks.Integer.makestring length]
d792 1
a792 1
	    then MLWorks.Integer.makestring(cast object)
d1014 1
a1014 1
				       val name = MLWorks.Integer.makestring n
d1168 1
a1168 1
                        Int32.makestring (int32 object)
d1171 1
a1171 1
                        MLWorks.Integer.makestring (integer object)
d1466 1
a1466 1
                                                    MLWorks.Integer.makestring (cast object));
@


1.99
log
@New language definition
@
text
@d4 3
d342 2
a343 2
require "../initbasis/word" ;
require "../initbasis/integer" ;
@


1.98
log
@Modify printing of functions when show details is on
so as not to include <Entry1> type info.
@
text
@d4 4
d343 1
d350 1
a350 1
  structure Word : WORD
d359 1
a359 1
  sharing type Word.word = word
@


1.97
log
@Language revision
@
text
@d4 3
d910 27
a936 1
          fun value_to_string(object,ty,env) = 
d952 5
a956 1
                    "fn[" ^ MLWorks.String.ml_string (code_name (select 0 object), ~1) ^ "]"
@


1.96
log
@ERROR becomes MLERROR
@
text
@d4 3
d586 2
a587 2
        MLWorks.Internal.Value.primary value = Tags.POINTER andalso
        #1 (MLWorks.Internal.Value.header value) = Tags.STRING
d1151 1
a1151 1
				 (string(chr(Char.ord(MLWorks.Internal.Value.cast object))),
@


1.95
log
@Removing Option in favour of MLWorks.Option
@
text
@d3 4
a6 1
$Log: _value_printer.sml,v $
d1321 1
a1321 1
				      (Tags.ERROR, 0)
d1347 1
a1347 1
				  if secondary = Tags.ERROR then
@


1.94
log
@Correcting misspelling of abbreviate.
@
text
@d4 3
d956 1
a956 1
			    if len < 2 then Datatypes.Option.ABSENT
d959 1
a959 1
				fun tuple_indices' (acc,0) = Datatypes.Option.PRESENT acc
d971 1
a971 1
				handle Lists.Find => Datatypes.Option.ABSENT
d1018 1
a1018 1
				Datatypes.Option.ABSENT =>
d1020 1
a1020 1
			      | Datatypes.Option.PRESENT index_list =>
@


1.93
log
@Adding extra control for abbreaviated strings - needed in printing labels
in the Graphical Inspector, which uses stringify_value eventually.
@
text
@d4 4
d374 1
a374 1
    val string_abbreaviation = ref "\\..."
d381 1
a381 1
	  | aux (_,result,0) = implode (rev (!string_abbreaviation :: result))
@


1.92
log
@Added printing for Int32.int values.
@
text
@d4 3
d370 38
d785 1
a785 1
                implode ["\"", MLWorks.String.ml_string
d1131 1
a1131 1
                        implode ["\"", MLWorks.String.ml_string
d1137 1
a1137 1
                        implode ["#\"", MLWorks.String.ml_string
@


1.91
log
@Added types for different lengths of words, ints and reals.
@
text
@d4 3
d317 1
d328 1
d496 9
d1067 4
a1070 1
                      if Types.int_typep ty then
@


1.90
log
@Add printing for builtin word type
@
text
@d4 3
d313 1
d315 17
a331 12
functor ValuePrinter(structure Types : TYPES
                     structure Valenv : VALENV
                     structure ValuePrinterUtilities : VALUEPRINTERUTILITIES
                     structure Debugger_Types : DEBUGGER_TYPES
                     structure Tags : TAGS
                     structure Lists : LISTS
                     structure Crash : CRASH

                     sharing Types.Datatypes = Valenv.Datatypes =
                       ValuePrinterUtilities.BasisTypes.Datatypes
                     sharing type Types.Datatypes.Type = Debugger_Types.Type
                       ) : VALUE_PRINTER =
d346 1
d482 9
d828 1
a828 1
            | needs_brackets (Datatypes.CONSTYPE(tys,tyname)) =
d830 1
a830 5
                Types.tyname_eq (tyname,Types.int_tyname) orelse
                Types.tyname_eq (tyname,Types.real_tyname) orelse
                Types.tyname_eq (tyname,Types.string_tyname) orelse
                Types.tyname_eq (tyname,Types.char_tyname) orelse
                Types.tyname_eq (tyname,Types.word_tyname) orelse
d980 1
a980 1
                | value_to_string' (object,Datatypes.CONSTYPE(tys,tyname),env,ref_depth,depth) =
d982 4
a985 4
                  (case tyname of
                     Datatypes.METATYNAME(ref(Datatypes.NULL_TYFUN _),_,_,_,ref ve,_) =>
                     Valenv.empty_valenvp ve
                   | _ => false) then
d1051 1
d1053 3
d1057 5
a1061 2
                      if Types.tyname_eq (tyname,Types.int_tyname) then
                        MLWorks.Integer.makestring (integer object)
d1064 1
a1064 1
                      else if Types.tyname_eq (tyname,Types.real_tyname) then
a1081 4
                        handle Value message => error_notification (object, "<" ^ message ^ ">")

		     else if Types.tyname_eq(tyname, Types.word_tyname) then
                        MLWorks.Word.makestring (word object)
@


1.89
log
@Add printing of builtin char type
@
text
@d4 3
d462 10
d815 1
a1041 1

d1060 4
@


1.88
log
@Changing uses of cast (again)
@
text
@d4 3
d801 1
d1041 6
@


1.87
log
@Changing Tyname_id etc. to Stamp
@
text
@d4 3
d333 1
a333 1
    val castit : 'a -> 'b = MLWorks.Internal.Value.cast (fn x => x)
d399 1
a399 1
	      (castit
d451 1
a451 1
          castit value : int
d461 1
a461 1
          castit value : int
d463 1
a463 1
          castit (MLWorks.Internal.Value.sub (value, 0)) : int
d473 1
a473 1
          case castit value : int of
d486 1
a486 1
        castit value : string
d494 1
a494 1
          if (castit value : int) = 1 then
d516 1
a516 1
        castit value : real
d532 1
a532 1
          val (name, arg) = castit value
d536 1
a536 1
              val (unique, string) = castit name
d541 1
a541 1
                    castit value : exn
d555 1
a555 1
        castit value : MLWorks.Internal.Value.T ref
d673 1
a673 1
	    then MLWorks.Integer.makestring(castit object)
d696 1
a696 1
				 (castit object,
d700 1
a700 1
                  MLWorks.Internal.real_to_string (castit object)
d730 1
a730 1
			     castit object)))
d1010 1
a1010 1
                              (true, castit object : int)
d1181 1
a1181 1
					 (castit object',
d1295 1
a1295 1
                                       (case Lists.nth(castit(object),domain) of
d1304 1
a1304 1
                                                    MLWorks.Integer.makestring (castit object));
d1318 1
a1318 1
					       val name' = Lists.nth(castit(code),domain)
d1396 1
a1396 1
      let val object = castit f
@


1.86
log
@Removing call to shape (again).
@
text
@d4 3
d343 1
d345 1
a345 1
      Datatypes.Tyname_id.tyname_id_eq(x,y)
d349 1
a349 1
      Datatypes.Tyname_id.tyname_id_lt(x,y)
d351 1
d585 1
a595 1
(*
a635 1
*)
d638 1
d749 1
a749 1
          val print_method_table = !global_print_method_table
d959 2
a960 2
                    val (in_table,func) = (true,NewMap.apply'(print_method_table,tyname)) 
                      handle NewMap.Undefined => (false, fn _ => "")
@


1.85
log
@Various minor changes to the way things are printed
@
text
@d4 3
d747 2
a748 4
              val shape =
                (* shape is DANGEROUS *)
                 shape (maximum_depth, maximum_seq_size,
                        maximum_string_size, object)
@


1.84
log
@Rationalizing
@
text
@d4 3
a305 1
                     sharing Types.Datatypes.NewMap = Debugger_Types.NewMap
d315 1
a315 1
    structure Options = Debugger_Types.Options
d331 3
a333 1
    fun generate_underbar(x) = "_" ^ (if do_debug then (" [" ^ x ^ "] ") else "")
d335 2
d560 1
a560 1
    fun exn_lookup (info as (Debugger_Types.INFO interpreter_information)) name =
d571 4
a574 6
        let
          val Debugger_Types.FUNINFO {ty,...} = NewMap.apply interpreter_information name
        in
          (name',get_arg_type ty)
        end
      handle NewMap.Undefined => (name',Datatypes.NULLTYPE)
d705 2
a706 2
	      val tail = if length > max_seq_size andalso max_seq_size > 0 then
			   ", ...]"
d744 1
a744 1
              val shape = "_"
a745 1
                (*
a747 1
                 *)
d799 1
a799 2
              fun value_to_string'(_,_,_,_,0) = "..."

d826 4
d845 2
a846 2
			       ty,env,ref_depth,depth-1) 
			      :: get_elements(tys,pos+1)
d870 1
a870 1
			  fun print_as_a_record values =
d872 1
a872 1
			      fun print_as_a_record' (Ident.LAB name,value) =
d874 1
a874 1
			      val result = map print_as_a_record' (Lists.zip(dom,values))
d915 1
a915 1
				  print_as_a_record elements
d941 1
a941 1
                     Datatypes.METATYNAME(ref(Datatypes.NULL_TYFUN(_)),_,_,_,ref(ve),_) =>
d1033 18
a1050 16
                             let
                               val (total,element_list) =   
                                 list (maximum_seq_size,object,[])
                             in
                               implode
                               ("[" ::
                                rev (
                                     "]" :: (if total then "" else ",...") ::
                                     Lists.reducel
                                     (fn (list, object) =>
                                      value_to_string' (object, ty, env, ref_depth, depth-1) ::
                                      (case list of
                                         [] => []
                                       | list => ", " :: list))
                                     ([],element_list)))
                             end
d1064 1
a1064 1
			  val (string', ty) = exn_lookup interpreter_information string
d1120 1
a1120 1
					    ", ...]"
d1162 1
a1162 1
                                      ", ...]"
d1209 1
a1209 1
				        ", ...]"
@


1.83
log
@Removed call to shape when an unexpected value is found
as shape can bus error with some inputs.  This should be sorted
out properly.
@
text
@d4 5
d566 1
a566 1
          val ((ty,_,_),_, _) = NewMap.apply interpreter_information name
d628 1
a628 1
    val error_notify = ref true
d748 1
a748 1
              (if !error_notify then
d1229 1
@


1.82
log
@Changing uses of cast
@
text
@d4 3
d735 6
a740 2
              val shape = shape (maximum_depth, maximum_seq_size,
				 maximum_string_size, object)
d744 1
a744 1
                 ["<", message, " shape ", shape, ">"]
@


1.81
log
@Fixing 2 element vector printing.
@
text
@d4 3
d314 1
d374 1
a374 1
	      (MLWorks.Internal.Value.cast
d426 1
a426 1
          MLWorks.Internal.Value.cast value : int
d436 1
a436 1
          MLWorks.Internal.Value.cast value : int
d438 1
a438 1
          MLWorks.Internal.Value.cast (MLWorks.Internal.Value.sub (value, 0)) : int
d448 1
a448 1
          case MLWorks.Internal.Value.cast value : int of
d461 1
a461 1
        MLWorks.Internal.Value.cast value : string
d469 1
a469 1
          if (MLWorks.Internal.Value.cast value : int) = 1 then
d491 1
a491 1
        MLWorks.Internal.Value.cast value : real
d507 1
a507 1
          val (name, arg) = MLWorks.Internal.Value.cast value
d511 1
a511 1
              val (unique, string) = MLWorks.Internal.Value.cast name
d516 1
a516 1
                    MLWorks.Internal.Value.cast value : exn
d530 1
a530 1
        MLWorks.Internal.Value.cast value : MLWorks.Internal.Value.T ref
d650 1
a650 1
	    then MLWorks.Integer.makestring(MLWorks.Internal.Value.cast object)
d673 1
a673 1
				 (MLWorks.Internal.Value.cast object,
d677 1
a677 1
                  MLWorks.Internal.real_to_string (MLWorks.Internal.Value.cast object)
d707 1
a707 1
			     MLWorks.Internal.Value.cast object)))
d984 1
a984 1
                              (true, MLWorks.Internal.Value.cast object : int)
d1153 1
a1153 1
					 (MLWorks.Internal.Value.cast object',
d1266 1
a1266 1
                                       (case Lists.nth(MLWorks.Internal.Value.cast(object),domain) of
d1275 1
a1275 1
                                                    MLWorks.Integer.makestring (MLWorks.Internal.Value.cast object));
d1289 1
a1289 1
					       val name' = Lists.nth(MLWorks.Internal.Value.cast(code),domain)
d1367 1
a1367 1
      let val object = MLWorks.Internal.Value.cast f
@


1.80
log
@Made the printing of values more strict. Values supposedly from datatypes
will now only print if they are integers or pairs, and if pairs only if
the tag is an integer, and in either case, if and only the type of the constructor
(vcc or non-vcc) is correct for the value in question.
@
text
@d4 6
d339 1
a339 4
    fun record_map (object, 2) f =
        [f (MLWorks.Internal.Value.sub (object, 0)),
         f (MLWorks.Internal.Value.sub (object, 1))]
      | record_map (object, length) f =
d348 8
d513 3
a515 6
                  else
                    raise Value "exn: wrong secondary on exn name string"
                else
                  raise Value "exn: wrong primary on exn name string"
              else
                raise Value "exn: wrong primary on exn name unique"
d517 1
a517 2
          else
            raise Value "exn: wrong primary on exn name"
d519 1
a519 2
      else
        raise Value "exn: wrong primary"
d1181 1
a1181 1
				      record_map
@


1.79
log
@Update debugger information production
@
text
@d4 3
d1205 1
a1205 1
                             if (is_abs andalso not debugger_print) 
d1257 5
a1261 1
                                          Ident.CON name => Ident.Symbol.symbol_name name
d1267 48
a1314 36
                                     else if primary = Tags.POINTER orelse primary = Tags.PAIRPTR then
                                       let
                                         val (code, packet) =
                                           if primary = Tags.PAIRPTR then
                                             (MLWorks.Internal.Value.sub (object,0),
                                              MLWorks.Internal.Value.sub (object,1))
                                           else
                                             (MLWorks.Internal.Value.sub (object,1),
                                              MLWorks.Internal.Value.sub (object,2))
                                         val name' = Lists.nth(MLWorks.Internal.Value.cast(code),domain)
                                         val name =
                                           case name' of
                                             Ident.CON x => Ident.Symbol.symbol_name x
                                           | _ => "CantFigureNameOut"
                                         val scheme = Valenv.lookup(name',val_map)
                                         val (ty,env') =
                                           (case scheme of
                                              Datatypes.SCHEME(_,(ty',_)) => 
                                                (ty',ENTRY(tys,env))
                                            | Datatypes.UNBOUND_SCHEME(ty',_) => (ty',env)
                                            | Datatypes.OVERLOADED_SCHEME _ =>
                                                (Datatypes.NULLTYPE,env))
                                         val arg_type = get_arg_type ty
                                         val brackets = needs_brackets arg_type
                                       in
                                         implode [name,
                                                  (if brackets then "(" else " "),
                                                  value_to_string'(packet,
                                                                   arg_type,
                                                                   env',ref_depth,depth-1),
                                                  if brackets then ")" else ""]
                                       end
                                     handle Lists.Nth => generate_underbar("lists.nth 2")
                                     else 
                                       error_notification(object, 
                                         "(Not INTEGER,POINTER,PAIR in expected datatype case)")
@


1.78
log
@Change bogus code message and shared closure bug.
@
text
@d4 3
d545 1
a545 1
          val ((ty,_,_),_) = NewMap.apply interpreter_information name
@


1.77
log
@New runtime directory structure.
@
text
@d4 3
d378 20
a397 20
              else if primary = Tags.POINTER 
                     then
                       let
                         val (secondary, length) = MLWorks.Internal.Value.header value
                       in
                         if (secondary = Tags.INTEGER0 andalso field=0)
                           orelse (secondary = Tags.INTEGER1 andalso field=0)
                           then
                             MLWorks.Internal.Value.sub (value, 1)
                         else 
                           if secondary = Tags.RECORD then
                             if field >= length then
                               raise Value "select: field >= length in record"
                             else
                               MLWorks.Internal.Value.sub (value, field+1)
                           else
                             raise Value "select: invalid secondary"
                       end
                   else
                     raise Value "select: invalid primary"
d481 1
a481 1
        raise Value "code_name: not a code vector"
d638 1
a638 1
		then "<CLOSURE>"
d650 1
a650 1
		  then "<CLOSURE>"
d665 1
a665 4
               (* implode ["code[", MLWorks.String.ml_string
				    (MLWorks.Internal.Value.code_name object,
				     max_str_size), "]"] *)
		"<fn>"
d667 6
a672 3
                "BACKPTR"
              else
                unknown("bad ptr: ", primary, secondary,length)
@


1.76
log
@Fixed debruijn printing.
Fixed depth in bound debruijns.
@
text
@d4 4
d262 1
a262 1
require "../rts/tags";
@


1.75
log
@Prevented shape printer from showing record contents (my first bug fix - with help from ma)
@
text
@d4 3
d1311 2
a1312 1
                          value_to_string'(object,ty,old_env,ref_depth,depth-1)
d1314 3
a1316 1
                    | _ => error_notification(object,"(DEBRUIJN with empty environment)"))
a1318 4
                  
(*
                | value_to_string' _ = error_notification(object,"(Don't know how to translate this yet)")
*)
d1326 1
@


1.74
log
@Datatypes.META_OVERLOADED takes extra arguments.
@
text
@d4 3
d351 1
d389 1
a389 1
      
d467 1
a467 3
        (#1 (MLWorks.Internal.Value.header value) = Tags.CODE
         orelse
         #1 (MLWorks.Internal.Value.header value) = Tags.BACKPTR)
d607 11
d623 12
a634 7
          if primary = Tags.INTEGER0 orelse primary = Tags.INTEGER1 then
            MLWorks.Integer.makestring(MLWorks.Internal.Value.cast object)
          else if primary = Tags.PAIRPTR then
            splice ("{", ", ", "}")
            (record_map (object, 2)
             (fn object => shape (depth-1, max_seq_size, max_str_size, object)))
          else if primary = Tags.POINTER then
d639 5
a643 2
                splice ("{", ", ", "}")
                (record_map (object, length)
d655 1
a655 1
                implode ["code[", MLWorks.String.ml_string
d657 2
a658 1
				     max_str_size), "]"]
@


1.73
log
@Fixed Waynisms and added better shape printing for unknown shapes.
@
text
@d4 3
d713 1
a713 1
            | needs_brackets (Datatypes.META_OVERLOADED (ref ty,_)) =
d742 3
a744 1
                | value_to_string'(object,Datatypes.META_OVERLOADED(ref ty,_),env,ref_depth,depth) = 
d950 1
d1203 1
a1203 1
                                              | Datatypes.OVERLOADED_SCHEME _ =>
@


1.72
log
@Changed exn printing again to use brackets only when needed.
@
text
@d4 3
d390 1
a390 1
          raise Value "integer: not!"
d425 1
a425 1
        raise Value "string: not!"
d455 1
a455 1
        raise Value "real: not!"
d501 1
a501 1
        raise Value "ref: not!"
d593 9
d629 1
a629 1
                  "?"
d637 1
a637 1
                "?"
d658 1
a658 1
		  "?"
d661 1
a661 1
            "?"
@


1.71
log
@Changed printing of exception values slightly.
@
text
@d4 3
d985 7
a991 4
			      implode [string',
                                       if print_exn_details 
                                         then get_location string 
                                       else "",
d993 1
a993 1
                                         "(",
d995 3
a997 1
                                         ")"]
@


1.70
log
@Changed null type function handling to accomodate Monomorphic debugger decapsulation;
Extra TYNAME valenv for Modules Debugger.
@
text
@d4 4
d982 8
a989 2
			      implode ["(",string'," ",value_to_string' (arg, ty, env, ref_depth, depth-1),
				       if print_exn_details then get_location string else "",")"]
@


1.69
log
@Adding function to find the name of a function.
@
text
@d4 3
d281 1
a281 1
    fun equal_tynames(Datatypes.TYNAME (x,_,_,_,_,_,_),Datatypes.TYNAME (y,_,_,_,_,_,_)) = 
d285 1
a285 1
    fun compare_tynames(Datatypes.TYNAME (x,_,_,_,_,_,_),Datatypes.TYNAME (y,_,_,_,_,_,_)) = 
d505 1
a505 1
    fun exn_lookup (info as (Debugger_Types.INFO (interpreter_information,_))) name =
d579 1
a579 1
    val error_notify = ref false
d645 12
a656 11
    fun stringify_value(print_options as
                        Options.PRINTOPTIONS {maximum_seq_size,
                                              maximum_string_size,
                                              maximum_ref_depth,
                                              maximum_depth,
                                              print_fn_details,
                                              print_exn_details,
                                              ...},
                        object,
                        ty,
                        interpreter_information) =
d849 9
a857 8
                | value_to_string'(object,
                                   Datatypes.CONSTYPE
                                   (tys,Datatypes.METATYNAME(
                                     ref(Datatypes.NULL_TYFUN(_,
                                            Datatypes.Option.PRESENT(tyfun))),name,n,b,ve,is_abs)),
                                   env,ref_depth,depth)
                  = 
                  value_to_string'(object,
d860 3
a862 2
                                        env,ref_depth,depth)
                | value_to_string' (object,Datatypes.CONSTYPE(tys,tyname),env,ref_depth,depth) =
d1131 3
a1133 2
                             if is_abs orelse NewMap.is_empty constructor_map then
                               generate_underbar("empty constructor map")
d1228 1
a1228 1
                            Datatypes.TYNAME (_,name,_,_,ref valenv,_,ref is_abs) => 
d1230 1
a1230 1
                          | Datatypes.METATYNAME (_,name,_,_,ref valenv,ref is_abs) => 
@


1.68
log
@Moved convert_string to MLWorks.String.ml_string.
@
text
@d4 3
d1259 5
@


1.67
log
@Added copyright message
@
text
@d4 3
a576 41
    fun convert_string (s, max_str_size) =
      let
        fun make_digits n =
          let
            val d1 = n mod 10
            val n1 = n div 10
            val d2 = n1 mod 10
            val n2 = n1 div 10
            val d3 = n2 mod 3
          in
            (d1,d2,d3)
          end
        fun aux ([],result,_) = implode (rev result)
          | aux (_,result,0) = implode (rev ("\\..." :: result))
          | aux (char::rest,result,n) =
            let val newbit =
              case char of 
                "\n" => ["n","\\"]
              | "\t" => ["t","\\"]
              | "\"" => ["\"","\\"]
              | "\\" => ["\\","\\"]
              | c =>
                  (if (ord c) < 32
                     then [chr (64 + ord c),"^","\\"]
                   else
                     if (ord c) >= 127
                       then
                         let val (d1,d2,d3) = make_digits (ord c)
                           fun to_digit n = chr (n + ord "0")
                         in
                           [to_digit d1,to_digit d2,to_digit d3,"\\"]
                         end
                     else
                       [c])
            in
              aux (rest, newbit @@ result, if n < 0 then n else n - 1)
            end
      in
        aux (explode s,[],max_str_size)
      end

d597 1
a597 1
                implode ["\"", convert_string
d606 1
a606 1
                implode ["code[", convert_string
d721 1
a721 1
                    "fn[" ^ convert_string (code_name (select 0 object), ~1) ^ "]"
d926 1
a926 1
                        implode ["\"", convert_string
@


1.66
log
@Added is_abs field to TYNAME and METATYNAME
Print abstypes as _
@
text
@d4 4
d223 1
@


1.65
log
@Fix printing of wide tuples (and rewrite related code for efficiency).
@
text
@d4 3
d267 1
a267 1
    fun equal_tynames(Datatypes.TYNAME (x,_,_,_,_,_),Datatypes.TYNAME (y,_,_,_,_,_)) = 
d271 1
a271 1
    fun compare_tynames(Datatypes.TYNAME (x,_,_,_,_,_),Datatypes.TYNAME (y,_,_,_,_,_)) = 
d719 1
a719 1
            | needs_brackets (Datatypes.CONSTYPE(tys,Datatypes.METATYNAME(ref(tyfun as (Datatypes.TYFUN _)),_,_,_,_))) =
d722 1
a722 1
                              (tys,Datatypes.METATYNAME(ref(Datatypes.ETA_TYFUN tyname),_,_,_,_))) =
d725 1
a725 1
                              (tys,Datatypes.METATYNAME(ref(Datatypes.NULL_TYFUN _),_,_,_,_))) = false
d865 1
a865 1
                                   (tys,Datatypes.METATYNAME(ref(tyfun as (Datatypes.TYFUN _)),_,_,_,_)),
d871 1
a871 1
                                   (tys,Datatypes.METATYNAME(ref(Datatypes.ETA_TYFUN tyname),_,_,_,_)),
d879 1
a879 1
                                            Datatypes.Option.PRESENT(tyfun))),name,n,b,ve)),
d884 1
a884 1
                                                  Datatypes.METATYNAME(tyfun,name,n,b,ve)),
a885 7
                      (*
                | value_to_string'(object,
                                   Datatypes.CONSTYPE
                                   (tys,Datatypes.METATYNAME(ref(Datatypes.NULL_TYFUN _),name,arity,eq,valenv)),
                                   env,ref_depth,_) =
                   generate_underbar("null_tyfun")
*)
d1154 2
a1155 2
                          fun do_it (ty_name,val_map as Datatypes.VE(_,constructor_map)) =
                             if NewMap.is_empty constructor_map then
d1251 4
a1254 2
                            Datatypes.TYNAME (_,name,_,_,ref valenv,_) => do_it (name,valenv)
                          | Datatypes.METATYNAME (_,name,_,_,ref valenv) => do_it (name,valenv)
@


1.64
log
@Made exceptions print as just their name, instead of "exn(name)".
@
text
@d4 3
d756 1
a756 1
                | value_to_string' (object,Datatypes.METARECTYPE (ref (_,uninstantiated,ty,_,_)),env,ref_depth,depth) =
d763 96
a858 49
                | value_to_string'(object,ty as (Datatypes.RECTYPE _),env,ref_depth,depth) =
                 let
                   val dom = Types.rectype_domain ty
                   val range = Types.rectype_range ty
                   val primary = MLWorks.Internal.Value.primary object
                 in
                   if Lists.length dom = 0 then 
                     "()"
                   else if primary = Tags.PAIRPTR orelse primary = Tags.POINTER then
                     let
                       fun get_elements ([],_) = []
                         | get_elements (ty::tys,pos) = 
                           value_to_string'
                           (MLWorks.Internal.Value.sub (object,pos),
                            ty,env,ref_depth,depth-1) 
                           :: get_elements(tys,pos+1)

                       fun check_for_tuple () =
                         let
                           fun check_for_tuple' 0 = true
                             | check_for_tuple' n = 
                               Lists.member
				 (Ident.LAB(Ident.Symbol.find_symbol
					      (MLWorks.Integer.makestring n)),
				  dom)
                               andalso check_for_tuple'(n-1)
                           val len = Lists.length dom
                         in
                           len > 1 andalso check_for_tuple' len
                         end

                       fun print_as_a_record values =
                         let
                           fun print_as_a_record' (Ident.LAB name,value) =
                             Ident.Symbol.symbol_name name ^ "=" ^ value
                           val result = map print_as_a_record' (Lists.zip(dom,values))
                         in
                           case result of
                             [] => "()"
                           | [one] => "{" ^ one ^ "}"
                           | arg::args =>
                               let
                                 fun put_together [x] = ", " ^ x
                                   | put_together (h::t) = ", " ^ h ^ put_together t
                                   | put_together _ = Crash.impossible "Problem(3) in value_printer"
                               in
                                 "{" ^ arg ^ put_together args ^ "}"
                               end
                         end
d860 1
a860 36
                       fun print_as_tuple [x] = "(" ^ x ^ ")"
                         | print_as_tuple (arg::args) =
                           let
                             fun put_together [x] = ", " ^ x
                               | put_together (h::t) = ", " ^ h ^ put_together t
                               | put_together _ = Crash.impossible "Problem (2) in value_printer"
                           in
                             "(" ^ arg ^ put_together args ^ ")"
                           end
                         | print_as_tuple _ = Crash.impossible "Problem (1) in value_printer"

                       val record_size =
                         if primary = Tags.PAIRPTR then
                           2
                         else
                           #2 (MLWorks.Internal.Value.header object)
                     in
                       if Lists.length range = record_size then
                         let
                           val elements = get_elements (range, if record_size = 2 then 0 else 1)
                         in
                           if check_for_tuple () then
                             print_as_tuple elements
                           else
                             print_as_a_record elements
                         end
                       else 
                         error_notification(object,"(Record is not of correct size)")
                     end
                   else
                     case dom of
                       [] => "()"
                     | _ => error_notification(object,"(record pointer not found when expected)")
                 end
                       
                | value_to_string'(object,
@


1.63
log
@Merged in bug fix.
@
text
@d4 3
d989 1
a989 1
			      implode ["exn(",string',if print_exn_details then get_location string else "",")"]
d991 1
a991 1
			      implode ["exn(",string'," ",value_to_string' (arg, ty, env, ref_depth, depth-1),
@


1.62
log
@Merging from bug fix branch
@
text
@d4 3
d10 5
d250 6
d304 2
a305 2
	    (MLWorks.Internal.Value.cast(f(MLWorks.Internal.Value.sub_byte(object, n+3)))::
	     list, n-1)
d406 1
a406 1
	    if count <= 0 then
d409 1
a409 1
	      list (count - 1, tail, head :: acc)
d560 1
a560 1
    fun convert_string s =
d572 3
a574 2
        fun aux ([],result) = implode (rev result)
          | aux (char::rest,result) =
d595 1
a595 1
              aux (rest, newbit @@ result)
d598 1
a598 1
        aux (explode s,[])
d601 2
a602 2
    fun shape (0, _) = generate_underbar("shape")
      | shape (depth, object) =
d611 1
a611 1
             (fn object => shape (depth-1, object)))
d619 1
a619 1
                 (fn object => shape (depth-1, object)))
d621 3
a623 1
                implode ["\"", convert_string (MLWorks.Internal.Value.cast object), "\""]
d630 3
a632 1
                implode ["code[", convert_string (MLWorks.Internal.Value.code_name object), "]"]
d641 3
d646 3
a648 3
                splice ("array[", ", ", "]")
                (array_map (object, length)
                 (fn object => shape (depth-1, object)))
d651 5
a655 3
		  splice ("bytearray[", ",", "]")
		  (bytearray_map (object, length)
		   (fn object => shape (depth-1, MLWorks.Internal.Value.cast object)))
d664 2
a665 1
                        Options.PRINTOPTIONS {maximum_list_size,
d679 2
a680 1
              val shape = shape (maximum_depth, object)
d745 1
a745 1
                    "fn[" ^ convert_string (code_name (select 0 object)) ^ "]"
d895 3
a897 1
				array_map (object, length) (fn x => x)
d899 3
a901 1
				bytearray_map (object, length) (fn x => x)
d915 1
a915 1
                          val list_of_elements = extract_elements object
d917 9
a925 9
                          fun is_integer_tagged object =
                            let
                              val primary = MLWorks.Internal.Value.primary object
                            in
                              if primary = Tags.INTEGER0 orelse primary = Tags.INTEGER1 then
                                (true, MLWorks.Internal.Value.cast object : int)
                              else
                                (false, 0)
                            end
d945 3
a947 1
                        implode ["\"", convert_string (string object), "\""]
d955 1
a955 1
                                 list (maximum_list_size,object,[])
d973 2
a974 1
                         shape (depth, object)
d1021 9
a1029 2
                                          (object,length)
                                          (fn x => x)
d1033 1
a1033 1
					 rev ("]" :: 
d1062 10
a1071 2
				    (object,length)
				    (fn x => x)
d1075 1
a1075 1
				   rev ("]" :: 
d1112 1
a1112 1
				      (object,length)
d1114 5
d1122 1
a1122 1
				     rev ("]" :: 
@


1.61
log
@Instances for METATYVARs and TYVARs and in schemes for polymorphic debugger.
@
text
@d4 9
d456 12
d944 15
a958 20
                        if print_exn_details
                          then
                            let
                              val exn = exn object
                              val name = MLWorks.Internal.Value.exn_name exn
                              val arg = MLWorks.Internal.Value.exn_argument exn
                              val string = MLWorks.Internal.Value.exn_name_string name
                              val (string', ty) = exn_lookup interpreter_information string
                            in
                              case ty of
                                Datatypes.NULLTYPE => "exn(" ^ string' ^ ")"
                              | _ =>
                                  implode ["exn(",
                                           string', " ",
                                           value_to_string' (arg, ty, env, ref_depth, depth-1),
                                           ")"]
                            end
                          handle Value message => error_notification (object, "<" ^ message ^ ">")
                        else
                          "exn"
@


1.60
log
@Changed parsing of debug information string
This should be done by some central utilities
@
text
@d4 4
d243 1
a243 1
    fun get_arg_type(Datatypes.METATYVAR(ref(_,object),_,_)) = get_arg_type object
d447 1
a447 1
    fun exn_lookup (info as (Debugger_Types.INFO interpreter_information)) name =
d646 1
a646 1
          fun get_arg_type(Datatypes.METATYVAR(ref(_,object),_,_)) = get_arg_type object
d650 2
a651 1
          fun get_next_part_of_type(Datatypes.METATYVAR(ref(_,object),_,_)) = get_next_part_of_type object
d815 4
a818 4
                                   Datatypes.CONSTYPE(tys,
                                     Datatypes.METATYNAME(tyfun,name,n,b,ve)),
                                   env,ref_depth,depth)
(*
d1076 2
a1077 1
                                 val (domain,range) = Lists.unzip(NewMap.to_list_ordered constructor_map)
d1079 4
a1082 2
                                 fun test_scheme (Datatypes.SCHEME(_,Datatypes.FUNTYPE _)) = true
                                   | test_scheme (Datatypes.UNBOUND_SCHEME(Datatypes.FUNTYPE _)) = true
d1092 2
a1093 1
                                   | _ => error_notification(object,"(single non-vcc problem with name)")
d1104 5
a1108 3
                                                Datatypes.SCHEME(_,ty') => (ty',ENTRY(tys,env))
                                              | Datatypes.UNBOUND_SCHEME(ty') => (ty',env)
                                              | Datatypes.OVERLOADED_SCHEME _ =>(Datatypes.NULLTYPE,env))
d1146 5
a1150 3
                                              Datatypes.SCHEME(_,ty') => (ty',ENTRY(tys,env))
                                            | Datatypes.UNBOUND_SCHEME(ty') => (ty',env)
                                            | Datatypes.OVERLOADED_SCHEME _ =>(Datatypes.NULLTYPE,env))
d1163 2
a1164 1
                                       error_notification(object, "(Not INTEGER,POINTER,PAIR in expected datatype case)")
d1173 1
a1173 1
                | value_to_string'(object,Datatypes.DEBRUIJN(level,_,_),env,ref_depth,depth) =
@


1.60.1.1
log
@Fork for bug fixing
@
text
@a3 4
Revision 1.60  1993/08/19  09:16:43  matthew
Changed parsing of debug information string
This should be done by some central utilities

@


1.60.1.2
log
@Improved exception printing
@
text
@a3 3
Revision 1.60.1.1  1993/08/19  09:16:43  jont
Fork for bug fixing

a446 12
    fun get_location s =
      let
        val sz = size s
        fun find_end_of_name x =
          if x=sz orelse String.substring(s,x,1) = "["
	    then x
	  else find_end_of_name (x+1)
	val ix = find_end_of_name 0
      in
	String.substring (s,ix,sz-ix)
      end

d922 20
a941 15
			let
			  val exn = exn object
			  val name = MLWorks.Internal.Value.exn_name exn
			  val arg = MLWorks.Internal.Value.exn_argument exn
			  val string = MLWorks.Internal.Value.exn_name_string name
			  val (string', ty) = exn_lookup interpreter_information string
			in
			  case ty of
			    Datatypes.NULLTYPE => 
			      implode ["exn(",string',if print_exn_details then get_location string else "",")"]
			  | _ =>
			      implode ["exn(",string'," ",value_to_string' (arg, ty, env, ref_depth, depth-1),
				       if print_exn_details then get_location string else "",")"]
			end
		        handle Value message => error_notification (object, "<" ^ message ^ ">")
@


1.60.1.3
log
@Changed maximum_list_size to maximum_seq_size, and made it affect arrays,
bytearrays and vectors.  Added a maximum_string_size.  Made negative values
for either of these be interpreted as infinity.
@
text
@a3 3
Revision 1.60.1.2  1993/10/06  16:28:48  matthew
Improved exception printing

a235 6
    fun max_len (max_seq_size, actual_seq_size) =
      if max_seq_size < 0 orelse max_seq_size > actual_seq_size then
	actual_seq_size
      else
	max_seq_size

d284 2
a285 2
	      (MLWorks.Internal.Value.cast
	         (f(MLWorks.Internal.Value.sub_byte(object, n+3))):: list,  n-1)
d386 1
a386 1
	    if count = 0 then
d389 1
a389 1
	      list (if count < 0 then count else count - 1, tail, head :: acc)
d540 1
a540 1
    fun convert_string (s, max_str_size) =
d552 2
a553 3
        fun aux ([],result,_) = implode (rev result)
          | aux (_,result,0) = implode (rev ("\\..." :: result))
          | aux (char::rest,result,n) =
d574 1
a574 1
              aux (rest, newbit @@ result, if n < 0 then n else n - 1)
d577 1
a577 1
        aux (explode s,[],max_str_size)
d580 2
a581 2
    fun shape (0, _, _, _) = generate_underbar("shape")
      | shape (depth, max_seq_size, max_str_size, object) =
d590 1
a590 1
             (fn object => shape (depth-1, max_seq_size, max_str_size, object)))
d598 1
a598 1
                 (fn object => shape (depth-1, max_seq_size, max_str_size, object)))
d600 1
a600 3
                implode ["\"", convert_string
				 (MLWorks.Internal.Value.cast object,
				  max_str_size), "\""]
d607 1
a607 3
                implode ["code[", convert_string
				    (MLWorks.Internal.Value.code_name object,
				     max_str_size), "]"]
a615 3
	      val tail = if length > max_seq_size andalso max_seq_size > 0 then
			   ", ...]"
			 else "]"
d618 3
a620 3
                splice ("array[", ", ", tail)
                (array_map (object, max_len (max_seq_size, length))
                 (fn object => shape (depth-1, max_seq_size, max_str_size, object)))
d623 3
a625 5
		  splice ("bytearray[", ",", tail)
		  (bytearray_map (object, max_len (max_seq_size, length))
		   (fn object =>
 		      shape (depth-1, max_seq_size, max_str_size,
			     MLWorks.Internal.Value.cast object)))
d634 1
a634 2
                        Options.PRINTOPTIONS {maximum_seq_size,
                                              maximum_string_size,
d648 1
a648 2
              val shape = shape (maximum_depth, maximum_seq_size,
				 maximum_string_size, object)
d712 1
a712 1
                    "fn[" ^ convert_string (code_name (select 0 object), ~1) ^ "]"
d862 1
a862 3
				array_map
				  (object, max_len (maximum_seq_size, length))
				  (fn x => x)
d864 1
a864 3
				bytearray_map
				(object, max_len (maximum_seq_size, length))
				(fn x => x)
d878 1
a878 1
                        val list_of_elements = extract_elements object
d880 9
a888 9
                        fun is_integer_tagged object =
                          let
                            val primary = MLWorks.Internal.Value.primary object
                          in
                            if primary = Tags.INTEGER0 orelse primary = Tags.INTEGER1 then
                              (true, MLWorks.Internal.Value.cast object : int)
                            else
                              (false, 0)
                          end
d908 1
a908 3
                        implode ["\"", convert_string
					 (string object,
					  maximum_string_size), "\""]
d916 1
a916 1
                                 list (maximum_seq_size,object,[])
d934 1
a934 2
                         shape (depth, maximum_seq_size,
				maximum_string_size, object)
d981 2
a982 9
                                            (object,
					     max_len (maximum_seq_size, length))
                                            (fn x => x)
					val tail = 
					  if length > maximum_seq_size andalso
					     maximum_seq_size > 0 then
					    ", ...]"
					  else
					    "]"
d986 1
a986 1
					 rev (tail :: 
d1015 2
a1016 10
				      (object,
  				       max_len (maximum_seq_size, length))
				      (fn x => x)

				  val tail = 
                                    if length > maximum_seq_size andalso
				       maximum_seq_size > 0 then
                                      ", ...]"
                                    else
                                      "]"
d1020 1
a1020 1
				   rev (tail :: 
d1057 1
a1057 1
				      (object, max_len(maximum_seq_size, length))
a1058 5
				    val tail = 
				      if length > maximum_seq_size then
				        ", ...]"
				      else
				        "]"
d1062 1
a1062 1
				     rev (tail :: 
@


1.59
log
@Changed type of constructor NULL_TYFUN for value printing in
local and closure variable inspection in the debugger.
@
text
@d4 4
d449 1
a449 1
          else if String.substring(name,x,1) = " "
@


1.58
log
@Changes to debug information
Better handling of types defined within functor parameters.
@
text
@d4 4
d451 1
a451 1
          val (ty,_,_) = NewMap.apply interpreter_information name
d798 11
d815 1
a815 1
*)                  
@


1.57
log
@Merged the maximum_depth and maximum_shape_depth options.
Replaced Integer.makestring with MLWorks.Integer.makestring and removed
the Integer structure.
@
text
@d4 5
d218 4
a221 1
    fun generate_underbar(x) = "_" (* ^ " (" ^ x ^ ") " *)
a689 18
                | value_to_string'(object,
                                   Datatypes.CONSTYPE
                                   (tys,Datatypes.METATYNAME(ref(tyfun as (Datatypes.TYFUN _)),_,_,_,_)),
                                   env,ref_depth,depth) =
                  value_to_string'(object,Types.apply(tyfun,tys),env,ref_depth,depth)
                  
                | value_to_string'(object,
                                   Datatypes.CONSTYPE
                                   (tys,Datatypes.METATYNAME(ref(Datatypes.ETA_TYFUN tyname),_,_,_,_)),
                                   env,ref_depth,depth) =
                  value_to_string'(object,Datatypes.CONSTYPE(tys,tyname),env,ref_depth,depth)

                | value_to_string'(object,
                                   Datatypes.CONSTYPE
                                   (tys,Datatypes.METATYNAME(ref(Datatypes.NULL_TYFUN _),_,_,_,_)),
                                   env,ref_depth,_)
                  = generate_underbar("null_tyfun")
                  
d782 19
d1046 2
a1047 2
                         case tyname of 
                           Datatypes.TYNAME(_,ty_name,_,_,ref(val_map as Datatypes.VE(_,constructor_map)),_) => 
d1096 2
a1097 4
                                            (output(std_out,
                                                    "Yargh: " ^
                                                    MLWorks.Integer.makestring (MLWorks.Internal.Value.cast object) ^
                                                    "\n");
d1133 5
a1137 1
                         | _ => error_notification(object,"(Can't handle this part of the object)")
@


1.56
log
@Fixed error with handler for Nth
@
text
@d4 3
a182 1
require "../utils/integer";
a191 1
                     structure Integer : INTEGER
d551 1
a551 1
            Integer.makestring(MLWorks.Internal.Value.cast object)
a600 1
                                              maximum_shape_depth,
d613 1
a613 1
              val shape = shape (maximum_shape_depth, object)
d619 1
a619 1
                 if maximum_shape_depth=0
d728 4
a731 1
                               Lists.member(Ident.LAB(Ident.Symbol.find_symbol(Integer.makestring n)),dom)
d849 1
a849 1
                        Integer.makestring (integer object)
@


1.55
log
@ Removed printer descriptors.
stringify_value now takes just a print_options object
@
text
@d4 4
d1080 9
a1088 4
                                       case Lists.nth(MLWorks.Internal.Value.cast(object),domain) of
                                         Ident.CON name => Ident.Symbol.symbol_name name
                                       | _ => error_notification(object,"(Not a CONS in a datatype)")
                                           handle Lists.Nth => generate_underbar("lists.nth 1")
@


1.54
log
@Added code to deal with printing of vectors
@
text
@d4 3
d448 4
a459 3
    fun make_empty_definition_table() = (NewMap.empty 
                                         (compare_tynames,equal_tynames)) : print_method_table

d492 3
d593 8
a600 10
    fun stringify_value(PRINTER_DESCRIPTOR
                        {print_options =
                         Options.PRINTOPTIONS {maximum_list_size,
                                               maximum_ref_depth,
                                               maximum_shape_depth,
                                               maximum_depth,
                                               print_fn_details,
                                               print_exn_details,
                                               ...},
                         print_method_table},
d606 1
@


1.53
log
@Signature changes
@
text
@d4 3
a248 3

(* Switched out while sub bus errors *)
(**)
a254 1

a257 6
(**)
(*
      map
      (fn x => MLWorks.Internal.Value.cast (ord x))
      (explode (MLWorks.ByteArray.to_string (MLWorks.Internal.Value.cast object)))
*)
d910 1
a910 2
                      else if Types.tyname_eq (tyname,Types.array_tyname) orelse
                             Types.tyname_eq (tyname,Types.vector_tyname) then
d981 42
@


1.52
log
@Got byte arrays printing properly after tagging changes
@
text
@d4 3
d199 2
@


1.51
log
@Signature revisions
@
text
@d4 3
d243 1
a243 1
(*
d247 4
a250 1
            iterate ((f (MLWorks.ByteArray.sub (object, n+2)))::list, n-1)
d254 2
a255 1
*)
d259 1
d560 1
a560 1
                  "BYTEARRAY"
d577 6
a582 1
                "?"
d800 7
a806 4
                            let
                              val (_, length) = MLWorks.Internal.Value.header object
                            in
                              array_map (object, length) (fn x => x)
d921 3
a923 1
                                  let val (secondary,length) = MLWorks.Internal.Value.header object
d925 3
a927 3
                                    if secondary = Tags.ARRAY
                                      then
                                        let val element_list =
d931 14
a944 14
                                        in
                                          implode
                                          ("#A[" ::
                                           rev ("]" :: 
                                                Lists.reducel
                                                (fn (list, object') =>
                                                 value_to_string' (object', ty, env, ref_depth, depth-1) ::
                                                 (case list of
                                                    [] => []
                                                  | list => ", " :: list))
                                                ([],element_list)))
                                        end
                                      else
                                        error_notification (object,"<Array not an array>")
d954 28
a981 25
                          if MLWorks.Internal.Value.primary object = Tags.POINTER
                            then
                              let val (secondary,length) = MLWorks.Internal.Value.header object
                              in
                                if secondary = Tags.BYTEARRAY
                                  then
                                    let val element_list =
                                      bytearray_map
                                      (object,length)
                                      (fn x => x)
                                    in
                                      implode
                                      ("#B[" ::
                                       rev ("]" :: 
                                            Lists.reducel
                                            (fn (list, object') =>
                                             value_to_string' (object', Types.int_type, env, ref_depth, depth-1) ::
                                             (case list of
                                                [] => []
                                              | list => ", " :: list))
                                            ([],element_list)))
                                    end
                                else
                                  error_notification (object,"<Bytearray not an bytearray>")
                              end
d983 1
a983 1
                            error_notification(object,"<Byte array not a pointer>")
@


1.50
log
@Options & Info changes
@
text
@d4 3
d179 3
a181 2
                       ValuePrinterUtilities.BasisTypes.Datatypes = Debugger_Types.Datatypes

d429 1
a429 1
      handle Datatypes.NewMap.Undefined => (name',Datatypes.NULLTYPE)
d966 1
a966 1
                             if Datatypes.NewMap.is_empty constructor_map then
@


1.49
log
@Rationalised use of Mapping structure
@
text
@d4 3
a176 2
                     sharing Debugger_Types.Info =
                       ValuePrinterUtilities.BasisTypes.Info
d186 3
d437 1
a437 7
      {
       maximum_list_size : int,
       maximum_ref_depth : int,
       maximum_shape_depth : int,
       maximum_depth : int,
       print_fn_details : bool,
       print_exn_details : bool,
d446 2
d451 2
a452 4
                               (value as 
                                {maximum_list_size,maximum_ref_depth,maximum_shape_depth,
                                 maximum_depth,print_fn_details,print_method_table,
                                 print_exn_details}))) =
d455 1
a455 1
        val new_definition_table = NewMap.define(#print_method_table value,tyname,function)
d459 1
a459 6
         {maximum_list_size = maximum_list_size,
          maximum_ref_depth = maximum_ref_depth,
          maximum_shape_depth = maximum_shape_depth,
          maximum_depth = maximum_depth,
          print_fn_details = print_fn_details,
          print_exn_details=print_exn_details,
d476 1
a476 6
      {maximum_list_size = 10,
       maximum_ref_depth = 3,
       maximum_shape_depth = 10,
       maximum_depth = 7,
       print_fn_details = false,
       print_exn_details = true,
d571 10
a580 1
    fun stringify_value(descriptor as PRINTER_DESCRIPTOR print_descriptor,
a585 7
          val maximum_list_size = #maximum_list_size print_descriptor
          val maximum_ref_depth = #maximum_ref_depth print_descriptor
          val maximum_shape_depth = #maximum_shape_depth print_descriptor
          val maximum_depth = #maximum_depth print_descriptor
          val print_fn_details = #print_fn_details print_descriptor
          val print_exn_details = #print_exn_details print_descriptor

d766 1
a766 1
                    val (in_table,func) = (true,NewMap.apply'(#print_method_table print_descriptor,tyname)) 
@


1.48
log
@ Change of error messages
@
text
@d4 3
a181 1
    structure Mapping = Datatypes.Mapping
d692 1
a692 1
                | value_to_string'(object,Datatypes.RECTYPE mapping,env,ref_depth,depth) =
d694 2
a695 2
                   val dom = Mapping.domain mapping
                   val range = Mapping.range mapping
@


1.47
log
@Printing for arrays, bytearrays, vectors
@
text
@d4 3
d655 2
a656 1
                | value_to_string'(_,Datatypes.NULLTYPE,env,ref_depth,depth) = generate_underbar("nulltype")
d680 67
a746 1
                                   env,ref_depth,_) = generate_underbar("null_tyfun")
d748 24
d1055 18
a1072 16
                | value_to_string'(object,Datatypes.RECTYPE mapping,env,ref_depth,depth) =
                 let
                   val dom = Mapping.domain mapping
                   val range = Mapping.range mapping
                   val primary = MLWorks.Internal.Value.primary object
                 in
                   if Lists.length dom = 0 then 
                     "()"
                   else if primary = Tags.PAIRPTR orelse primary = Tags.POINTER then
                     let
                       fun get_elements ([],_) = []
                         | get_elements (ty::tys,pos) = 
                           value_to_string'
                           (MLWorks.Internal.Value.sub (object,pos),
                            ty,env,ref_depth,depth-1) 
                           :: get_elements(tys,pos+1)
d1074 3
a1076 82
                       fun check_for_tuple () =
                         let
                           fun check_for_tuple' 0 = true
                             | check_for_tuple' n = 
                               Lists.member(Ident.LAB(Ident.Symbol.find_symbol(Integer.makestring n)),dom)
                               andalso check_for_tuple'(n-1)
                           val len = Lists.length dom
                         in
                           len > 1 andalso check_for_tuple' len
                         end

                       fun print_as_a_record values =
                         let
                           fun print_as_a_record' (Ident.LAB name,value) =
                             Ident.Symbol.symbol_name name ^ "=" ^ value
                           val result = map print_as_a_record' (Lists.zip(dom,values))
                         in
                           case result of
                             [] => "()"
                           | [one] => "{" ^ one ^ "}"
                           | arg::args =>
                               let
                                 fun put_together [x] = ", " ^ x
                                   | put_together (h::t) = ", " ^ h ^ put_together t
                                   | put_together _ = Crash.impossible "Problem(3) in value_printer"
                               in
                                 "{" ^ arg ^ put_together args ^ "}"
                               end
                         end

                       fun print_as_tuple [x] = "(" ^ x ^ ")"
                         | print_as_tuple (arg::args) =
                           let
                             fun put_together [x] = ", " ^ x
                               | put_together (h::t) = ", " ^ h ^ put_together t
                               | put_together _ = Crash.impossible "Problem (2) in value_printer"
                           in
                             "(" ^ arg ^ put_together args ^ ")"
                           end
                         | print_as_tuple _ = Crash.impossible "Problem (1) in value_printer"

                       val record_size =
                         if primary = Tags.PAIRPTR then
                           2
                         else
                           #2 (MLWorks.Internal.Value.header object)
                     in
                       if Lists.length range = record_size then
                         let
                           val elements = get_elements (range, if record_size = 2 then 0 else 1)
                         in
                           if check_for_tuple () then
                             print_as_tuple elements
                           else
                             print_as_a_record elements
                         end
                       else 
                         error_notification(object,"(Record is not of correct size)")
                     end
                   else
                     case dom of
                       [] => "()"
                     | _ => error_notification(object,"(record pointer not found when expected)")
                 end
                       
                | value_to_string'(object,Datatypes.DEBRUIJN(level,_,_),ENTRY(env,old_env),ref_depth,depth) =
                 let
                   exception DeBruijn_In_ValuePrinter

                   fun find_it (level) =
                     let
                       fun find_it'(0,h::t) = h
                         | find_it'(n,h::t) = find_it'(n-1,t)
                         | find_it'(_,[]) = raise DeBruijn_In_ValuePrinter
                     in
                       find_it'(level,env)
                     end
                   val ty = find_it(level)
                 in
                   value_to_string'(object,ty,old_env,ref_depth,depth-1)
                 end

d1078 1
@


1.46
log
@Slightly more intelligent treatment of brackets for constructed values
@
text
@d4 3
d224 16
d480 1
a480 1
       maximum_shape_depth = 0,
d806 67
@


1.45
log
@Typechecker structure changes
@
text
@d4 3
d593 30
a622 1
              
d821 2
d824 6
a829 6
                                           name ^
                                           "(" ^
                                           value_to_string'(object,
                                                            get_arg_type ty,
                                                            env',ref_depth,depth-1) ^
                                           ")"
d858 2
d861 2
a862 1
                                         implode [name, "(",
d864 1
a864 1
                                                                   get_arg_type ty,
d866 1
a866 1
                                                  ")"]
@


1.44
log
@Changed functor parameter
@
text
@d4 3
d160 2
d163 1
a163 4
                       ValuePrinterUtilities.Basis.Sigenv.Sigma.Nameset.Info
                     sharing Types.Datatypes = Valenv.Datatypes =
                       ValuePrinterUtilities.Basis.Tyvarenv.Datatypes =
                       Debugger_Types.Datatypes
d168 1
a168 1
    structure Basis = ValuePrinterUtilities.Basis
@


1.43
log
@Changes to support new list representation.
@
text
@d4 3
d139 4
a145 6
require "../typechecker/tyenv";
require "../typechecker/tystr";
require "../typechecker/valenv";
require "../rts/tags";
require "debugger_types";
require "value_printer_utilities";
d150 3
a155 3
                     structure ValuePrinterUtilities : VALUEPRINTERUTILITIES
                     structure Tags : TAGS
                     structure Debugger_Types : DEBUGGER_TYPES
d157 5
a161 1
                     sharing Types.Datatypes = Valenv.Datatypes = ValuePrinterUtilities.Datatypes = Debugger_Types.Datatypes
@


1.42
log
@*** empty log message ***
@
text
@d4 3
d295 2
a296 3
    fun list (count,value,acc) =
      let
        val c = contag value
d298 16
a313 18
        if c = 0 then
          let
            val object = select 1 value
            val head = select 0 object
            val tail = select 1 object
          in
            if count<=0
              then 
                (false,rev acc)
            else
              list(count-1,tail,head::acc)
          end
        else 
          if c = 1 
            then
              (true,rev acc)
          else
            raise Value "list: illegal constructor"
@


1.41
log
@Removed the debug message in generate_underbar
@
text
@d4 3
d591 1
a591 1
                | value_to_string'(object,Datatypes.META_OVERLOADED(ref ty),env,ref_depth,depth) = 
@


1.40
log
@Changed the list size exceeded extension
@
text
@d4 3
d162 1
a162 1
    fun generate_underbar(x) = "_" ^ " (" ^ x ^ ") "
@


1.39
log
@maximum_list_size was being ignored
@
text
@d4 3
d693 1
a693 1
                                     "]" :: (if total then "" else " ...") ::
@


1.38
log
@Changed depth message to ...
@
text
@d4 3
d283 13
a295 19
    fun list (count,value) =
      if count<=0
        then 
          (false,[])
      else
        let
          val c = contag value
        in
          if c = 0 then
            let
              val tail = select 1 (select 1 value)
            in
              list (count-1,tail);
              (true,MLWorks.Internal.Value.cast value : MLWorks.Internal.Value.T list)
            end
          else 
            if c = 1 
              then
                (true,nil)
d297 9
a305 2
              raise Value "list: illegal constructor"
        end
d685 1
a685 1
                                 list (maximum_list_size,object)
d689 2
a690 1
                                rev ("]" ::
@


1.37
log
@Printing of one element tuple
@
text
@d4 3
d436 1
a436 1
      {maximum_list_size = 30,
d440 1
a440 1
       print_fn_details = true,
d573 1
a573 1
              fun value_to_string'(_,_,_,_,0) = generate_underbar("depth=0")
@


1.36
log
@If maximum_shape_depth is zero then do not print shape details
@
text
@d4 3
d839 1
a839 1
                           len > 0 andalso check_for_tuple' len
d850 1
a850 1
                           | [one] => one
@


1.35
log
@Added some debugging messages
@
text
@d4 3
d432 1
a432 1
       maximum_shape_depth = 7,
d551 5
a555 1
                 ["<shape ", shape, ">"])
@


1.34
log
@Removed default print_descriptor
@
text
@d4 3
d144 2
d479 1
a479 1
    fun shape (0, _) = "_"
d560 1
a560 1
              fun value_to_string'(_,_,_,_,0) = "_"
d568 1
a568 1
                | value_to_string'(_,Datatypes.NULLTYPE,env,ref_depth,depth) = "_"
d592 1
a592 1
                                   env,ref_depth,_) = "_"
d711 1
a711 1
                           "_"
d725 1
a725 1
                               "_"
d769 1
a769 1
                                           handle Lists.Nth => "_"
d797 1
a797 1
                                       handle Lists.Nth => "_"
@


1.33
log
@Added a flag to control detailed printed of exceptions
Added maximum list size
@
text
@d4 4
a418 11


    val default_print_descriptor =
      PRINTER_DESCRIPTOR
      {maximum_list_size = 10,
       maximum_ref_depth = 3,
       maximum_shape_depth = 3,
       maximum_depth = 10,
       print_fn_details = true,
       print_exn_details = true,
       print_method_table = make_empty_definition_table()}
@


1.32
log
@Added a bound to the size of printed lists
@
text
@d4 3
d265 1
a265 1
          []
d275 1
a275 1
              MLWorks.Internal.Value.cast value : MLWorks.Internal.Value.T list
d277 6
a282 4
          else if c = 1 then
            nil
               else
                 raise Value "list: illegal constructor"
d374 1
d387 3
a389 1
                                {maximum_list_size,maximum_ref_depth,maximum_shape_depth,maximum_depth,print_fn_details,print_method_table}))) =
d401 1
d419 1
a419 1
      {maximum_list_size = 30,
d424 1
d434 1
d540 1
d668 15
a682 10
                             implode
                             ("[" ::
                              rev ("]" ::
                                   Lists.reducel
                                   (fn (list, object) =>
                                    value_to_string' (object, ty, env, ref_depth, depth-1) ::
                                    (case list of
                                       [] => []
                                     | list => ", " :: list))
                                   ([], list (maximum_list_size,object))))
d690 20
a709 16
                        let
                          val exn = exn object
                          val name = MLWorks.Internal.Value.exn_name exn
                          val arg = MLWorks.Internal.Value.exn_argument exn
                          val string = MLWorks.Internal.Value.exn_name_string name
                          val (string', ty) = exn_lookup interpreter_information string
                        in
                          case ty of
                            Datatypes.NULLTYPE => "exn(" ^ string' ^ ")"
                          | _ =>
                              implode ["exn(",
                                       string', " ",
                                       value_to_string' (arg, ty, env, ref_depth, depth-1),
                                       ")"]
                        end
                        handle Value message => error_notification (object, "<" ^ message ^ ">")
@


1.31
log
@Backpointers were causing a problem with printing
@
text
@d4 3
d259 21
a279 17
    fun list value =
      let
        val c = contag value
      in
        if c = 0 then
          let
            val tail = select 1 (select 1 value)
          in
            list tail;
            MLWorks.Internal.Value.cast value : MLWorks.Internal.Value.T list
          end
        else if c = 1 then
          nil
        else
          raise Value "list: illegal constructor"
      end

d413 1
a413 1
       maximum_depth = 10000,
d665 1
a665 1
                                   ([], list object)))
@


1.30
log
@Changes to the pervsaive library.  Specifcally, calls to the
pervasive Debugger structure have been replaced by calls to
Internal.Value.
@
text
@d4 5
d174 1
d183 27
a209 19
          if primary = Tags.PAIRPTR then
            if field >= 2 then
              raise Value "select: field >= 2 in pair"
            else
              MLWorks.Internal.Value.sub (value, field)
            else if primary = Tags.POINTER then
              let
                val (secondary, length) = MLWorks.Internal.Value.header value
              in
                if secondary = Tags.RECORD then
                  if field >= length then
                    raise Value "select: field >= length in record"
                  else
                    MLWorks.Internal.Value.sub (value, field+1)
                else
                  raise Value "select: invalid secondary"
              end
            else
              raise Value "select: invalid primary"
d211 1
a211 1

d285 3
a287 1
        #1 (MLWorks.Internal.Value.header value) = Tags.CODE
@


1.29
log
@Got compare and equality round the wrong way in empty
@
text
@d4 3
d138 174
d392 1
a392 2
       print_method_table = make_empty_definition_table()
       }
d401 1
a401 2
       print_method_table = make_empty_definition_table()
       }
d403 1
a403 1
    val error_notify = ref(false)
d407 54
a460 66
      fun stringify_value(descriptor as PRINTER_DESCRIPTOR print_descriptor,
                          object,
                          ty,
                          interpreter_information) =

        let

          fun shape x =
            let
              fun shape'(0,_) = "_"
                | shape' (depth,object) =
                  case MLWorks.Internal.Debugger.get_primary_tag object of
                    MLWorks.Internal.Debugger.ERROR => "_"
                  | MLWorks.Internal.Debugger.INTEGER => 
                      Integer.makestring(MLWorks.Internal.Value.cast object)
                  | MLWorks.Internal.Debugger.PAIRPTR =>
                      "(" ^ shape'(depth-1,MLWorks.Internal.Debugger.get_object_at_address(object,~1)) ^
                      "," ^ shape'(depth-1,MLWorks.Internal.Debugger.get_object_at_address(object,3)) ^ ")"
                  | MLWorks.Internal.Debugger.POINTER =>
                      let
                        val (tag,size) = MLWorks.Internal.Debugger.get_header object
                      in
                        if tag = Tags.RECORD
                          then
                            if size = 0
                              then "illegal record size of zero"
                            else
                              let
                                fun make_it(1,offset) = 
                                  shape'(depth-1,
                                         MLWorks.Internal.Debugger.get_object_at_address(object,offset))
                                  | make_it(n,offset) = 
                                    make_it(n-1,offset+4) ^ "," ^
                                    shape'(depth-1,
                                           MLWorks.Internal.Debugger.get_object_at_address(object,offset)) 
                              in
                                if size < 1
                                  then "illegal record size"
                                else 
                                  make_it(size,~1)
                              end
                        else "unknown pointer tag"
                      end
                  | MLWorks.Internal.Debugger.REFPTR => 
                      let
                        val (_,size) = MLWorks.Internal.Debugger.get_header object
                      in
                        if size = 0
                          then "illegal ref size of zero"
                        else
                          let
                            fun make_it(1,offset) = 
                              shape'(depth-1,
                                     MLWorks.Internal.Debugger.get_object_at_address(object,offset))
                              | make_it(n,offset) = 
                                make_it(n-1,offset+4) ^ "," ^
                                shape'(depth-1,
                                       MLWorks.Internal.Debugger.get_object_at_address(object,offset)) 
                          in
                            if size >= 1
                              then 
                                make_it(size,9)
                            else
                              "illegal record size"
                          end
                      end
d462 17
a478 1
              "Shape is [" ^ shape' x ^ "]"
d480 14
d495 6
a500 2
          (* Define a few useful constants *)
        
d507 10
a516 4
          fun error_notification (object,x) =
            if ! error_notify
              then x
            else shape(maximum_shape_depth,object)
a524 40
          fun convert_string s =
            let
              fun make_digits n =
                let
                  val d1 = n mod 10
                  val n1 = n div 10
                  val d2 = n1 mod 10
                  val n2 = n1 div 10
                  val d3 = n2 mod 3
                in
                  (d1,d2,d3)
                end
              fun aux ([],result) = implode (rev result)
                | aux (char::rest,result) =
                  let val newbit =
                    case char of 
                      "\n" => ["n","\\"]
                    | "\t" => ["t","\\"]
                    | "\"" => ["\"","\\"]
                    | "\\" => ["\\","\\"]
                    | c =>
                        (if (ord c) < 32
                           then [chr (64 + ord c),"^","\\"]
                         else
                           if (ord c) >= 127
                             then
                               let val (d1,d2,d3) = make_digits (ord c)
                                 fun to_digit n = chr (n + ord "0")
                               in
                                 [to_digit d1,to_digit d2,to_digit d3,"\\"]
                               end
                           else
                             [c])
                  in
                    aux (rest, newbit @@ result)
                  end
            in
              aux (explode s,[])
            end

d527 1
a527 1
              fun value_to_string'(_,_,_,_,0) = "..."
d529 1
a529 1
                | value_to_string' (object,ty as Datatypes.METATYVAR _,env,ref_depth,depth) = 
d532 1
a532 1
                | value_to_string' (object,Datatypes.META_OVERLOADED(ref ty),env,ref_depth,depth) = 
d535 1
a535 1
                | value_to_string' (_,Datatypes.NULLTYPE,env,ref_depth,depth) = "_"
d537 7
a543 23
                | value_to_string' (object,Datatypes.FUNTYPE _,env,ref_depth,depth) = 
                  if print_fn_details
                    then
                      let
                        val primary = MLWorks.Internal.Debugger.get_primary_tag object
                      in
                        if (primary = MLWorks.Internal.Debugger.POINTER 
                            orelse primary = MLWorks.Internal.Debugger.PAIRPTR)
                          then
                            let
                              val code_string = 
                                MLWorks.Internal.Debugger.get_object_at_address(object,~1)
                              val debug = 
                                MLWorks.Internal.Debugger.get_code_object_debug_info code_string
                            in
                              if debug = ""
                                then "fn"
                                  else ("fn[" ^ debug ^ "]")
                            end
                          else "fn"
                      end
                  else "fn"
                  
d559 1
a559 2
                                   env,ref_depth,_) =
                  "_"
d564 3
a566 1
                      handle NewMap.Undefined => (false,fn _ => "")
d568 29
a596 33
                    if in_table
                      then
                        let
                          val print_methods_for_arguments =
                            map (fn ty => fn (object) => value_to_string'(object,ty,env,ref_depth,depth-1)) tys
                          fun extract_elements object =
                            case MLWorks.Internal.Debugger.get_primary_tag object of
                              MLWorks.Internal.Debugger.ERROR => []
                            | MLWorks.Internal.Debugger.INTEGER => [object]
                            | MLWorks.Internal.Debugger.PAIRPTR => 
                                [MLWorks.Internal.Debugger.get_object_at_address(object,~1),
                                 MLWorks.Internal.Debugger.get_object_at_address(object,3)]
                            | MLWorks.Internal.Debugger.REFPTR =>
                                let
                                  val (tag,size) = MLWorks.Internal.Debugger.get_header object
                                  fun deal_with (0,x) = []
                                    | deal_with (n,x) = 
                                      MLWorks.Internal.Debugger.get_object_at_address(object,x) :: deal_with(n-1,x+4)
                                in
                                  deal_with(size,9)
                                end
                            | MLWorks.Internal.Debugger.POINTER =>
                                let
                                  val (tag,size) = MLWorks.Internal.Debugger.get_header object
                                  fun deal_with (0,x) = []
                                    | deal_with (n,x) = 
                                      MLWorks.Internal.Debugger.get_object_at_address(object,x) :: deal_with(n-1,x+4)
                                in
                                  if tag=Tags.RECORD 
                                    then 
                                      deal_with(size,~1)
                                  else []
                                end
d598 1
d600 56
a655 3
                            case MLWorks.Internal.Debugger.get_primary_tag object of
                              MLWorks.Internal.Debugger.INTEGER => (true,MLWorks.Internal.Value.cast object)
                            | _ => (false,0)
d657 7
a663 2
                          func(list_of_elements,print_methods_for_arguments,extract_elements,is_integer_tagged)
                          handle _ => error_notification (object,"(Failure in a user print function)")
d665 14
a678 7
                    else 
                      if compare_tynames(tyname,Types.int_tyname)
                        then
                          case MLWorks.Internal.Debugger.get_primary_tag object of
                            MLWorks.Internal.Debugger.INTEGER => 
                              Integer.makestring(MLWorks.Internal.Value.cast object)
                          | _ => error_notification(object,"(Not integer when integer expected)")
d680 4
a683 98
                      if compare_tynames(tyname,Types.real_tyname) 
                        then 
                          MLWorks.Internal.real_to_string(MLWorks.Internal.Value.cast object)
                      else
                        if compare_tynames(tyname,Types.bool_tyname)
                          then
                            case MLWorks.Internal.Debugger.get_primary_tag object of
                              MLWorks.Internal.Debugger.INTEGER => 
                                if MLWorks.Internal.Value.cast(object) = 0
                              then "false"
                            else "true"
                        | _ => error_notification(object,"(Not a bool when a bool expected)")
                    else 
                      if compare_tynames(tyname,Types.string_tyname)
                        then 
                          let
                            val (tag,_) = MLWorks.Internal.Debugger.get_header object
                          in
                            if tag = Tags.STRING
                              then
                                "\"" ^ (convert_string (MLWorks.Internal.Value.cast object)) ^ "\""
                            else 
                              error_notification(object,"(Failed to find string header when string expected)")
                          end
                      else 
                        if compare_tynames(tyname,Types.list_tyname)
                          then
                            (case MLWorks.Internal.Debugger.get_primary_tag object of
                               MLWorks.Internal.Debugger.INTEGER => 
                                 list_to_string(object,Datatypes.NULLTYPE,env,ref_depth,depth)
                             | MLWorks.Internal.Debugger.PAIRPTR =>
                                 (case tys of
                                    [ty] => list_to_string (object,ty,env,ref_depth,depth)
                                  | _ => error_notification(object,"(Can't handle this type of list)"))
                             | _ => error_notification(object,"(Not a list when a list expected)"))
                        else if compare_tynames(tyname,Types.ml_value_tyname)
                               then
                                 "ml_value(" ^
                                 (case MLWorks.Internal.Debugger.get_primary_tag object of
                                    MLWorks.Internal.Debugger.INTEGER => 
                                      Integer.makestring(MLWorks.Internal.Value.cast object)
                                  | MLWorks.Internal.Debugger.PAIRPTR => "(_,_)"
                                  | MLWorks.Internal.Debugger.POINTER => 
                                      let
                                        val (tag,length) = MLWorks.Internal.Debugger.get_header object
                                      in
                                        if tag = Tags.STRING 
                                          then "string"
                                        else if tag = Tags.RECORD 
                                               then "record of length " ^ Integer.makestring(length)
                                             else "_"
                                      end
                                  | MLWorks.Internal.Debugger.REFPTR => "ref(_)"
                                  | MLWorks.Internal.Debugger.ERROR => "_") ^
                                    ")"
                        else if compare_tynames(tyname,Types.exn_tyname)
                               then 
                                 (case MLWorks.Internal.Debugger.get_primary_tag object of
                                    MLWorks.Internal.Debugger.PAIRPTR => 
                                      let
                                        val slot = MLWorks.Internal.Debugger.get_object_at_address(object,~1)
                                        val value = MLWorks.Internal.Debugger.get_object_at_address(object,3)
                                      in
                                        (case MLWorks.Internal.Debugger.get_primary_tag slot of
                                           MLWorks.Internal.Debugger.PAIRPTR =>
                                             let
                                               val debug = MLWorks.Internal.Debugger.get_object_at_address(slot,3)
                                               val name = MLWorks.Internal.Value.cast debug
                                               val (name',ty) = exn_lookup interpreter_information name
                                             in
                                               (case ty of
                                                  Datatypes.NULLTYPE => "exn(" ^ name' ^ ")"
                                                | _ => ("exn(" ^ name' ^ " " ^
                                                        stringify_value
                                                        (descriptor,
                                                         value,ty,interpreter_information) ^ 
                                                        ")")) 
                                             end
                                         | _ => "exn")
                                      end
                                  | _ => error_notification(object,"Not an exception when one expected"))
                        else if compare_tynames(tyname,Types.ref_tyname)
                               then 
                                 if ref_depth <= 0
                                   then "..."
                                 else 
                                   (case MLWorks.Internal.Debugger.get_primary_tag object of
                                      MLWorks.Internal.Debugger.REFPTR =>
                                        (case tys of
                                           [ty] => 
                                             "ref(" 
                                             ^  value_to_string' 
                                             (MLWorks.Internal.Debugger.get_object_at_address
                                              (object,9),
                                              ty,env,ref_depth-1,depth-1) 
                                           ^ ")"
                                         | _ => error_notification(object,"(Wrong type of ref)"))
                                    | _ => error_notification(object,"(Not a ref when a ref expected)"))
d685 22
a706 91
                               (case tyname of 
                                  Datatypes.TYNAME(_,ty_name,_,_,ref(val_map as Datatypes.VE(_,constructor_map)),_) => 
                                    if Datatypes.NewMap.is_empty constructor_map
                                      then
                                        "_"
                                    else
                                      let
                                        val (domain,range) = Lists.unzip(NewMap.to_list_ordered constructor_map)
                                        val tag = MLWorks.Internal.Debugger.get_primary_tag(object) 
                                        val is_a_single_constructor = (Lists.length domain = 1)
                                        fun test_scheme (Datatypes.SCHEME(_,Datatypes.FUNTYPE _)) = true
                                          | test_scheme (Datatypes.UNBOUND_SCHEME(Datatypes.FUNTYPE _)) = true
                                          | test_scheme _ = false
                                        val is_a_single_vcc = 
                                          case range of
                                            [x] => test_scheme x
                                          | _ => false
                                      in
                                        if is_a_single_constructor andalso not is_a_single_vcc
                                          then
                                            case domain of
                                              [Ident.CON name] => Ident.Symbol.symbol_name name
                                            | _ => error_notification(object,"(single non-vcc problem with name)")
                                        else 
                                          if is_a_single_vcc
                                            then
                                              case domain of 
                                                [name' as Ident.CON name] => 
                                                  let
                                                    val name = Ident.Symbol.symbol_name name
                                                    val scheme =
                                                      Valenv.lookup(name',val_map)
                                                      
                                                    val (ty,env') =
                                                      (case scheme of
                                                         Datatypes.SCHEME(_,ty') => (ty',ENTRY(tys,env))
                                                       | Datatypes.UNBOUND_SCHEME(ty') => (ty',env)
                                                       | Datatypes.OVERLOADED_SCHEME _ =>(Datatypes.NULLTYPE,env))
                                                  in
                                                    name ^
                                                    "(" ^
                                                    value_to_string'(object,
                                                                     get_arg_type ty,
                                                                     env',ref_depth,depth-1) ^
                                                    ")"
                                                  end
                                              | _ => error_notification(object,"(Problems in vcc code)")
                                          else
                                            if tag = MLWorks.Internal.Debugger.INTEGER
                                              then
                                                (case Lists.nth(MLWorks.Internal.Value.cast(object),domain) of
                                                   Ident.CON name => Ident.Symbol.symbol_name name
                                                 | _ => error_notification(object,"(Not a CONS in a datatype)"))
                                                   handle Lists.Nth => "_"
                                            else if tag = MLWorks.Internal.Debugger.POINTER 
                                              orelse tag = MLWorks.Internal.Debugger.PAIRPTR
                                                   then
                                                     (let
                                                        
                                                       val code = MLWorks.Internal.Debugger.get_object_at_address(object,~1)
                                                       val packet = MLWorks.Internal.Debugger.get_object_at_address(object,3)
                                                       val name' = Lists.nth(MLWorks.Internal.Value.cast(code),domain)
                                                       val name = case name' of
                                                         Ident.CON x => Ident.Symbol.symbol_name x
                                                       | _ => "CantFigureNameOut"
                                                           
                                                       val scheme =
                                                         Valenv.lookup(name',val_map)
                                                         
                                                       val (ty,env') =
                                                         (case scheme of
                                                            Datatypes.SCHEME(_,ty') => (ty',ENTRY(tys,env))
                                                          | Datatypes.UNBOUND_SCHEME(ty') => (ty',env)
                                                          | Datatypes.OVERLOADED_SCHEME _ =>(Datatypes.NULLTYPE,env))
                                                     in
                                                       name ^
                                                       "(" ^
                                                       value_to_string'(packet,
                                                                        get_arg_type ty,
                                                                        env',ref_depth,depth-1) ^
                                                       ")"
                                                     end
                                                   
                                                   handle Lists.Nth => "_")
                                                        
                                                 else 
                                                   error_notification(object,
                                                                      "(Not INTEGER,POINTER,PAIR in expected datatype case)")
                                      end
                                | _ => error_notification(object,"(Can't handle this part of the object)"))
                  end 
d708 135
a842 82
                       | value_to_string'(object,Datatypes.RECTYPE mapping,env,ref_depth,depth) =
                         let
                           val dom = Mapping.domain mapping
                           val range = Mapping.range mapping
                           val primary_tag = MLWorks.Internal.Debugger.get_primary_tag object
                         in
                           if Lists.length dom = 0
                             then 
                               "()"
                           else
                             if primary_tag = MLWorks.Internal.Debugger.PAIRPTR 
                               orelse primary_tag = MLWorks.Internal.Debugger.POINTER
                               then
                                 let
                                   fun get_elements ([],_) = []
                                     | get_elements (ty::tys,pos) = 
                                       value_to_string'
                                       (MLWorks.Internal.Debugger.get_object_at_address
                                        (object,pos),
                                        ty,env,ref_depth,depth-1) 
                                       :: get_elements(tys,pos+4)
                                   fun check_for_tuple () =
                                     let
                                       fun check_for_tuple' 0 = true
                                         | check_for_tuple' n = 
                                           Lists.member(Ident.LAB(Ident.Symbol.find_symbol(Integer.makestring n)),dom)
                                           andalso check_for_tuple'(n-1)
                                       val len = Lists.length dom
                                     in
                                       len > 0 andalso check_for_tuple' len
                                     end
                                   fun print_as_a_record values =
                                     let
                                       fun print_as_a_record' (Ident.LAB name,value) =
                                         Ident.Symbol.symbol_name name ^ "=" ^ value
                                       val result = map print_as_a_record' (Lists.zip(dom,values))
                                     in
                                       case result of
                                         [] => "()"
                                       | [one] => one
                                       | arg::args =>
                                           let
                                             fun put_together [x] = "," ^ x
                                               | put_together (h::t) = "," ^ h ^ put_together t
                                               | put_together _ = Crash.impossible "Problem(3) in value_printer"
                                           in
                                             "{" ^ arg ^ put_together args ^ "}"
                                           end
                                     end
                                   fun print_as_tuple [x] = "(" ^ x ^ ")"
                                     | print_as_tuple (arg::args) =
                                       let
                                         fun put_together [x] = "," ^ x
                                           | put_together (h::t) = "," ^ h ^ put_together t
                                           | put_together _ = Crash.impossible "Problem (2) in value_printer"
                                       in
                                         "(" ^ arg ^ put_together args ^ ")"
                                       end
                                     | print_as_tuple _ = Crash.impossible "Problem (1) in value_printer"
                                 in
                                   if primary_tag = MLWorks.Internal.Debugger.PAIRPTR
                                     orelse
                                     (let
                                       val (header,record_size) = MLWorks.Internal.Debugger.get_header(object)
                                     in
                                        Lists.length range = record_size
                                     end)
                                     then
                                       let
                                         val elements = get_elements(range,~1)
                                       in
                                         if check_for_tuple()
                                           then print_as_tuple elements
                                         else print_as_a_record elements
                                       end
                                   else 
                                     error_notification(object,"(Record is not of correct size)")
                                 end
                             else (case dom of
                                     [] => "()"
                                   | _ => error_notification(object,"(record pointer not found when expected)"))
                         end
d844 5
a848 1
                   | value_to_string'(object,Datatypes.DEBRUIJN(level,_,_),ENTRY(env,old_env),ref_depth,depth) =
d850 3
a852 10
                       exception DeBruijn_In_ValuePrinter
                       fun find_it (level) =
                         let
                           fun find_it'(0,h::t) = h
                             | find_it'(n,h::t) = find_it'(n-1,t)
                             | find_it'(_,[]) = raise DeBruijn_In_ValuePrinter
                         in
                           find_it'(level,env)
                         end
                       val ty = find_it(level)
d854 1
a854 1
                       value_to_string'(object,ty,old_env,ref_depth,depth-1)
d856 4
d861 1
a861 33

             | value_to_string' _ = error_notification(object,"(Don't know how to translate this yet)")
                                                            
                and list_to_string(object,ty,env,ref_depth,depth) =
                  let
                    fun deal_with_list' object =
                      if MLWorks.Internal.Debugger.get_primary_tag object = MLWorks.Internal.Debugger.INTEGER 
                        then if MLWorks.Internal.Value.cast object = 1
                               then []
                             else [error_notification(object,"(In list - integer but not 1 found)")]
                      else
                        let
                          val packet = MLWorks.Internal.Debugger.get_object_at_address(object,3)
                          val car = MLWorks.Internal.Debugger.get_object_at_address(packet,~1)
                          val cdr = MLWorks.Internal.Debugger.get_object_at_address(packet,3)
                        in
                          value_to_string' (car,ty,env,ref_depth,depth-1) :: deal_with_list' cdr
                        end
                  in
                    case deal_with_list' object of
                      [] => "[]"
                    | [a] => "[" ^ a ^ "]"
                    | more =>
                        let
                          fun put_together ([],_) = ""
                            | put_together ([a],_) = a
                            | put_together (_,0) = "..."
                            | put_together (h::t,count) = h ^ "," ^ put_together (t,count-1)
                        in
                          "[" ^ put_together (more,maximum_list_size) ^ "]"
                        end
                  end
          
d865 3
a867 3
        in
          value_to_string(object,ty,EMPTY)
        end
a869 4




@


1.28
log
@Changed to use empty instead of empty'
@
text
@d4 3
d175 1
a175 1
                                         (equal_tynames ,compare_tynames)) : print_method_table
@


1.27
log
@null_tyfun no longer erroneously generated
@
text
@d4 3
d120 6
a125 1
    fun compare_tynames(Datatypes.TYNAME(x,_,_,_,_,_), Datatypes.TYNAME(y,_,_,_,_,_)) = (x=y)
d171 2
a172 1
    fun make_empty_definition_table() = (NewMap.empty' compare_tynames) : print_method_table
@


1.26
log
@Empty VE tynames are printed as "_"
@
text
@d4 3
d401 1
a401 2
                    (output(std_out,"***Hit a null_tyfun****\n");
                     "****")
@


1.25
log
@Tynames now have a slot recording their definition point
@
text
@d4 3
d557 17
a573 19
                                    let
                                      val (domain,range) = Lists.unzip(NewMap.to_list_ordered constructor_map)
                                      val tag = MLWorks.Internal.Debugger.get_primary_tag(object) 
                                      val is_a_single_constructor = (Lists.length domain = 1)
                                      fun test_scheme (Datatypes.SCHEME(_,Datatypes.FUNTYPE _)) = true
                                        | test_scheme (Datatypes.UNBOUND_SCHEME(Datatypes.FUNTYPE _)) = true
                                        | test_scheme _ = false
                                      val is_a_single_vcc = 
                                        case range of
                                          [x] => test_scheme x
                                        | _ => false
                                    in
                                      if is_a_single_constructor andalso not is_a_single_vcc
                                        then
                                          case domain of
                                            [Ident.CON name] => Ident.Symbol.symbol_name name
                                          | _ => error_notification(object,"(single non-vcc problem with name)")
                                      else 
                                        if is_a_single_vcc
d575 12
a586 6
                                            case domain of 
                                              [name' as Ident.CON name] => 
                                                let
                                                  val name = Ident.Symbol.symbol_name name
                                                  val scheme =
                                                    Valenv.lookup(name',val_map)
d588 56
a643 55
                                                  val (ty,env') =
                                                    (case scheme of
                                                       Datatypes.SCHEME(_,ty') => (ty',ENTRY(tys,env))
                                                     | Datatypes.UNBOUND_SCHEME(ty') => (ty',env)
                                                     | Datatypes.OVERLOADED_SCHEME _ =>(Datatypes.NULLTYPE,env))
                                                in
                                                  name ^
                                                  "(" ^
                                                  value_to_string'(object,
                                                                   get_arg_type ty,
                                                                   env',ref_depth,depth-1) ^
                                                  ")"
                                                end
                                            | _ => error_notification(object,"(Problems in vcc code)")
                                        else
                                          if tag = MLWorks.Internal.Debugger.INTEGER
                                            then
                                              (case Lists.nth(MLWorks.Internal.Value.cast(object),domain) of
                                                 Ident.CON name => Ident.Symbol.symbol_name name
                                               | _ => error_notification(object,"(Not a CONS in a datatype)"))
                                                 handle Lists.Nth => "_"
                                          else if tag = MLWorks.Internal.Debugger.POINTER orelse tag = MLWorks.Internal.Debugger.PAIRPTR
                                             then
                                               (let
                                                  
                                                 val code = MLWorks.Internal.Debugger.get_object_at_address(object,~1)
                                                 val packet = MLWorks.Internal.Debugger.get_object_at_address(object,3)
                                                 val name' = Lists.nth(MLWorks.Internal.Value.cast(code),domain)
                                                 val name = case name' of
                                                   Ident.CON x => Ident.Symbol.symbol_name x
                                                 | _ => "CantFigureNameOut"
                                                     
                                                 val scheme =
                                                   Valenv.lookup(name',val_map)
                                                     
                                                 val (ty,env') =
                                                   (case scheme of
                                                      Datatypes.SCHEME(_,ty') => (ty',ENTRY(tys,env))
                                                    | Datatypes.UNBOUND_SCHEME(ty') => (ty',env)
                                                    | Datatypes.OVERLOADED_SCHEME _ =>(Datatypes.NULLTYPE,env))
                                               in
                                                 name ^
                                                 "(" ^
                                                 value_to_string'(packet,
                                                                  get_arg_type ty,
                                                                  env',ref_depth,depth-1) ^
                                                 ")"
                                               end
                                             
                                             handle Lists.Nth => "_")
                                                  
                                           else 
                                             error_notification(object,
                                                                "(Not INTEGER,POINTER,PAIR in expected datatype case)")
                                    end
d645 1
a645 1
                                 end 
@


1.24
log
@Changes for the use of new shell
@
text
@d4 3
d111 1
a111 1
    fun compare_tynames(Datatypes.TYNAME(x,_,_,_,_), Datatypes.TYNAME(y,_,_,_,_)) = (x=y)
d553 1
a553 1
                                  Datatypes.TYNAME(_,ty_name,_,_,ref(val_map as Datatypes.VE(_,constructor_map))) => 
@


1.23
log
@Changed string value printer so that characters are escaped properly.
@
text
@d4 3
d83 1
a87 2
                     structure Tyenv : TYENV
                     structure Tystr : TYSTR
d94 1
d96 1
a96 2
                     sharing Tyenv.Datatypes = Types.Datatypes = Tystr.Datatypes = Valenv.Datatypes =
                             ValuePrinterUtilities.Datatypes
d106 1
d110 30
d141 11
d154 7
a160 7
    val definition_table = ref((NewMap.empty' compare_tynames) : 
                               (Datatypes.Tyname,(MLWorks.Internal.Value.T list 
                                                  * (MLWorks.Internal.Value.T -> string) list
                                                  * (MLWorks.Internal.Value.T -> MLWorks.Internal.Value.T list)
                                                  * (MLWorks.Internal.Value.T -> bool * int)
                                                  -> string)) NewMap.T)
    fun define_a_print_method(basis,ty,function) =
d163 1
a163 1
        val _ = definition_table := NewMap.define(!definition_table,tyname,function)
d165 8
a172 1
        true
d174 1
a174 1
    handle ValuePrinterUtilities.FailedToFind => false
d176 1
a176 1
    fun print_method_defined(basis,ty) =
d179 1
a179 1
        val _ = NewMap.apply'(!definition_table,tyname)
a185 9
    datatype printer_descriptor =
      PRINTER_DESCRIPTOR of
      {
       maximum_list_size : int,
       maximum_ref_depth : int,
       maximum_shape_depth : int,
       maximum_depth : int,
       print_fn_details : bool
       }
d193 2
a194 1
       print_fn_details = true
d201 4
a204 3
       maximum_shape_depth = 3,
       maximum_depth = 4,
       print_fn_details = true
d209 2
d212 3
a214 1
                          object,ty,tyenv,exn_lookup,type_from_encapsulation) =
d397 1
a397 1
                    val (in_table,func) = (true,NewMap.apply'(!definition_table,tyname)) 
d518 1
a518 1
                                               val (name',ty,tyenv,type_from_encapsulation) = exn_lookup name
d525 1
a525 1
                                                         value,ty,tyenv,exn_lookup,type_from_encapsulation) ^ 
d576 1
a576 11
                                                    if type_from_encapsulation
                                                      then
                                                        let
                                                          val Datatypes.TYSTR(_,ce) = 
                                                            Tyenv.lookup
                                                            (Ident.TYCON (Ident.Symbol.find_symbol ty_name),tyenv)
                                                        in
                                                      Valenv.lookup(name',ce)
                                                        end
                                                    else
                                                      Valenv.lookup(name',val_map)
d580 1
a580 1
                                                       Datatypes.SCHEME(_,ty') => (ty',tys @@ env)
d611 1
a611 11
                                                   if type_from_encapsulation
                                                     then
                                                       let
                                                         val Datatypes.TYSTR(_,ce) = 
                                                           Tyenv.lookup
                                                           (Ident.TYCON (Ident.Symbol.find_symbol ty_name),tyenv)
                                                       in
                                                         Valenv.lookup(name',ce)
                                                       end
                                                   else
                                                     Valenv.lookup(name',val_map)
d615 1
a615 1
                                                      Datatypes.SCHEME(_,ty') => (ty',tys @@ env)
d627 1
a627 2
                                             handle Tyenv.Lookup_in_TE => "_"
                                                  | Lists.Nth => "_")
d719 1
a719 1
                   | value_to_string'(object,Datatypes.DEBRUIJN(level,_,_),env,ref_depth,depth) =
d724 1
a724 1
                           fun find_it'(0,h::t) = (h,t)
d730 1
a730 2
                       val (ty,env') = find_it(level)
                     (* val _ = output(std_out,"Substituting DEBRUIJN " ^ Integer.makestring level ^ "\n") *)
d732 1
a732 1
                       value_to_string'(object,ty,env',ref_depth,depth-1)
d772 1
a772 1
          value_to_string(object,ty,[])
@


1.22
log
@Now prints out real numbers
@
text
@d4 3
d253 40
d422 1
a422 1
                                "\"" ^ MLWorks.Internal.Value.cast object ^ "\""
@


1.21
log
@Added switches t the value-printer to control depth of printing etc
@
text
@d4 3
d361 1
a361 1
                          "real_number"
@


1.20
log
@Added functionality to the value_printer
@
text
@d4 3
d129 9
a137 1
    (* Output the 'shape' of an object *)
d139 8
a146 59
    fun shape(0,_) = "_"
      | shape (depth,object) =
        case MLWorks.Internal.Debugger.get_primary_tag object of
          MLWorks.Internal.Debugger.ERROR => "_"
        | MLWorks.Internal.Debugger.INTEGER => 
            Integer.makestring(MLWorks.Internal.Value.cast object)
        | MLWorks.Internal.Debugger.PAIRPTR =>
            "(" ^ shape(depth-1,MLWorks.Internal.Debugger.get_object_at_address(object,~1)) ^
            "," ^ shape(depth-1,MLWorks.Internal.Debugger.get_object_at_address(object,3)) ^ ")"
        | MLWorks.Internal.Debugger.POINTER =>
            let
              val (tag,size) = MLWorks.Internal.Debugger.get_header object
            in
              if tag = Tags.RECORD
                then
                  if size = 0
                    then "illegal record size of zero"
                  else
                    let
                      fun make_it(1,offset) = 
                        shape(depth-1,
                              MLWorks.Internal.Debugger.get_object_at_address(object,offset))
                        | make_it(n,offset) = 
                          make_it(n-1,offset+4) ^ "," ^
                          shape(depth-1,
                                MLWorks.Internal.Debugger.get_object_at_address(object,offset)) 
                    in
                      if size < 1
                        then "illegal record size"
                      else 
                        make_it(size,~1)
                    end
              else "unknown pointer tag"
            end
        | MLWorks.Internal.Debugger.REFPTR => 
            let
              val (_,size) = MLWorks.Internal.Debugger.get_header object
            in
              if size = 0
              then "illegal ref size of zero"
              else
                let
                  fun make_it(1,offset) = 
                    shape(depth-1,
                          MLWorks.Internal.Debugger.get_object_at_address(object,offset))
                    | make_it(n,offset) = 
                      make_it(n-1,offset+4) ^ "," ^
                      shape(depth-1,
                            MLWorks.Internal.Debugger.get_object_at_address(object,offset)) 
                in
                  if size >= 1
                    then 
                      make_it(size,9)
                  else
                    "illegal record size"
                end
            end
          
    (* Define a few useful constants *)
d148 8
a155 3
    val maximum_list_size = ref(100)
    val maximum_ref_depth = ref(5)
    val maximum_shape_depth = ref(100)
a157 4
    fun error_notification (object,x) =
      if ! error_notify
        then x
      else shape(!maximum_shape_depth,object)
d159 2
a160 3
    fun get_arg_type(Datatypes.METATYVAR(ref(_,object),_,_)) = get_arg_type object
      | get_arg_type(Datatypes.FUNTYPE (arg,_)) = arg
      | get_arg_type x = Datatypes.NULLTYPE
a161 2
      fun stringify_value(object,ty,tyenv,exn_lookup,type_from_encapsulation) =

d164 80
d249 4
a252 5
              fun value_to_string' (object,ty as Datatypes.METATYVAR _,env,depth) = 
                value_to_string'(object,get_next_part_of_type ty,env,depth)
                
                | value_to_string' (object,Datatypes.META_OVERLOADED(ref ty),env,depth) = 
                  value_to_string'(object,get_next_part_of_type ty,env,depth)
d254 2
a255 1
                | value_to_string' (_,Datatypes.NULLTYPE,env,depth) = "_"
d257 1
a257 1
                | value_to_string' (_,Datatypes.FUNTYPE _,env,depth) = "fn"
d259 23
d284 3
a286 2
                                   (tys,Datatypes.METATYNAME(ref(tyfun as (Datatypes.TYFUN _)),_,_,_,_)),env,depth) =
                  value_to_string'(object,Types.apply(tyfun,tys),env,depth)
d290 12
a301 4
                                   (tys,Datatypes.METATYNAME(ref(Datatypes.ETA_TYFUN tyname),_,_,_,_)),env,depth) =
                  value_to_string'(object,Datatypes.CONSTYPE(tys,tyname),env,depth)
                  
                | value_to_string' (object,Datatypes.CONSTYPE(tys,tyname),env,depth) =
d310 1
a310 1
                            map (fn ty => fn (object) => value_to_string'(object,ty,env,depth)) tys
d331 2
a332 1
                                    | deal_with (n,x) = MLWorks.Internal.Debugger.get_object_at_address(object,x) :: deal_with(n-1,x+4)
d384 2
a385 1
                               MLWorks.Internal.Debugger.INTEGER => list_to_string(object,Datatypes.NULLTYPE,env,depth)
d388 1
a388 1
                                    [ty] => list_to_string (object,ty,env,depth)
d395 2
a396 1
                                    MLWorks.Internal.Debugger.INTEGER => Integer.makestring(MLWorks.Internal.Value.cast object)
d429 3
a431 1
                                                        stringify_value(value,ty,tyenv,exn_lookup,type_from_encapsulation) ^ 
d439 12
a450 6
                                 (case MLWorks.Internal.Debugger.get_primary_tag object of
                                    MLWorks.Internal.Debugger.REFPTR =>
                                      (case tys of
                                         [ty] => 
                                           "ref(" 
                                           ^  value_to_string' (MLWorks.Internal.Debugger.get_object_at_address(object,9),ty,env,depth-1) 
d452 2
a453 2
                                       | _ => error_notification(object,"(Wrong type of ref)"))
                                  | _ => error_notification(object,"(Not a ref when a ref expected)"))
d504 1
a504 1
                                                                   env',depth) ^
d549 1
a549 1
                                                                  env',depth) ^
d563 1
a563 1
                       | value_to_string'(object,Datatypes.RECTYPE mapping,env,depth) =
d573 2
a574 1
                             if primary_tag = MLWorks.Internal.Debugger.PAIRPTR orelse primary_tag = MLWorks.Internal.Debugger.POINTER
d579 4
a582 1
                                       value_to_string'(MLWorks.Internal.Debugger.get_object_at_address(object,pos),ty,env,depth) 
d646 1
a646 1
                   | value_to_string'(object,Datatypes.DEBRUIJN(level,_,_),env,depth) =
d660 1
a660 1
                       value_to_string'(object,ty,env',depth)
d666 1
a666 1
                and list_to_string(object,ty,env,depth) =
d679 1
a679 1
                          value_to_string' (car,ty,env,depth) :: deal_with_list' cdr
d692 1
a692 1
                          "[" ^ put_together (more,!maximum_list_size) ^ "]"
d697 1
a697 1
              value_to_string'(object,ty,env,!maximum_ref_depth) 
@


1.19
log
@Took out wrong real number printer
@
text
@d4 3
d104 2
d241 1
a241 1
                          val list_of_elements = 
d268 5
d274 1
a274 1
                          func(list_of_elements,print_methods_for_arguments)
@


1.18
log
@Fiex the shape routine
@
text
@d4 3
d259 2
a260 1
                                    then deal_with(size,~1)
d277 1
a277 2
                          MLWorks.Internal.Value.real_to_string 
                          (MLWorks.Internal.Value.cast object)
@


1.17
log
@Changes to reflect new Internal structure
@
text
@d4 3
d120 39
a158 35
    fun shape (depth,object) =
      case MLWorks.Internal.Debugger.get_primary_tag object of
        MLWorks.Internal.Debugger.ERROR => "_"
      | MLWorks.Internal.Debugger.INTEGER => 
          Integer.makestring(MLWorks.Internal.Value.cast object)
      | MLWorks.Internal.Debugger.PAIRPTR =>
          shape(depth-1,MLWorks.Internal.Debugger.get_object_at_address(object,~1)) ^
          shape(depth-1,MLWorks.Internal.Debugger.get_object_at_address(object,3))
      | MLWorks.Internal.Debugger.POINTER =>
          let
            val (tag,size) = MLWorks.Internal.Debugger.get_header object
          in
            if tag = Tags.RECORD
              then
                if size = 0
                  then "illegal record size of zero"
                else
                  let
                    fun make_it(1,offset) = shape(depth-1,
                                                  MLWorks.Internal.Debugger.get_object_at_address(object,offset))
                      | make_it(n,offset) = 
                        shape(depth-1,MLWorks.Internal.Debugger.get_object_at_address(object,offset)) ^ make_it(n-1,offset+4)
                  in
                    if size < 1
                      then "illegal record size"
                    else 
                      make_it(size,~1)
                  end
            else "unknown pointer tag"
          end
      | MLWorks.Internal.Debugger.REFPTR => 
          let
            val (_,size) = MLWorks.Internal.Debugger.get_header object
          in
            if size = 0
d160 18
a177 15
            else
              let
                fun make_it(1,offset) = shape(depth-1,
                                              MLWorks.Internal.Debugger.get_object_at_address(object,offset))
                  | make_it(n,offset) = 
                    shape(depth-1,MLWorks.Internal.Debugger.get_object_at_address(object,offset)) ^ make_it(n-1,offset+4)
              in
                if size < 1
                  then 
                    make_it(size,1)
                else
                  "illegal record size"
              end
          end

d267 2
a268 1
                            MLWorks.Internal.Debugger.INTEGER => Integer.makestring(MLWorks.Internal.Value.cast object)
d475 12
a486 37
                           if primary_tag = MLWorks.Internal.Debugger.PAIRPTR orelse primary_tag = MLWorks.Internal.Debugger.POINTER
                             then
                               let
                                 fun get_elements ([],_) = []
                                   | get_elements (ty::tys,pos) = 
                                     value_to_string'(MLWorks.Internal.Debugger.get_object_at_address(object,pos),ty,env,depth) 
                                     :: get_elements(tys,pos+4)
                                 fun check_for_tuple () =
                                   let
                                     fun check_for_tuple' 0 = true
                                       | check_for_tuple' n = 
                                         Lists.member(Ident.LAB(Ident.Symbol.find_symbol(Integer.makestring n)),dom)
                                         andalso check_for_tuple'(n-1)
                                     val len = Lists.length dom
                                   in
                                     len > 0 andalso check_for_tuple' len
                                   end
                                 fun print_as_a_record values =
                                   let
                                     fun print_as_a_record' (Ident.LAB name,value) =
                                       Ident.Symbol.symbol_name name ^ "=" ^ value
                                     val result = map print_as_a_record' (Lists.zip(dom,values))
                                   in
                                     case result of
                                       [] => "()"
                                     | [one] => one
                                     | arg::args =>
                                         let
                                           fun put_together [x] = "," ^ x
                                             | put_together (h::t) = "," ^ h ^ put_together t
                                             | put_together _ = Crash.impossible "Problem(3) in value_printer"
                                         in
                                           "{" ^ arg ^ put_together args ^ "}"
                                         end
                                   end
                                 fun print_as_tuple [x] = "(" ^ x ^ ")"
                                   | print_as_tuple (arg::args) =
d488 5
a492 3
                                       fun put_together [x] = "," ^ x
                                         | put_together (h::t) = "," ^ h ^ put_together t
                                         | put_together _ = Crash.impossible "Problem (2) in value_printer"
d494 1
a494 1
                                       "(" ^ arg ^ put_together args ^ ")"
d496 1
a496 10
                                   | print_as_tuple _ = Crash.impossible "Problem (1) in value_printer"
                               in
                                 if primary_tag = MLWorks.Internal.Debugger.PAIRPTR
                                   orelse
                                   (let
                                     val (header,record_size) = MLWorks.Internal.Debugger.get_header(object)
                                   in
                                      Lists.length range = record_size
                                   end)
                                   then
d498 3
a500 1
                                       val elements = get_elements(range,~1)
d502 11
a512 3
                                       if check_for_tuple()
                                         then print_as_tuple elements
                                       else print_as_a_record elements
d514 32
a545 6
                                 else 
                                   error_notification(object,"(Record is not of correct size)")
                               end
                           else (case dom of
                                   [] => "()"
                                 | _ => error_notification(object,"(record pointer not found when expected)"))
d547 1
a547 1

@


1.16
log
@Added the shape function
@
text
@d4 3
d118 3
a120 3
      case MLWorks.Debugger.get_primary_tag object of
        MLWorks.Debugger.ERROR => "_"
      | MLWorks.Debugger.INTEGER => 
d122 4
a125 4
      | MLWorks.Debugger.PAIRPTR =>
          shape(depth-1,MLWorks.Debugger.get_object_at_address(object,~1)) ^
          shape(depth-1,MLWorks.Debugger.get_object_at_address(object,3))
      | MLWorks.Debugger.POINTER =>
d135 2
a136 1
                    fun make_it(1,offset) = shape(MLWorks.Debugger.get_object_at_address(object,offset))
d138 1
a138 2
                        shape(depth-1,MLWorks.Debugger.get_object_at_address(object,offset)) ^ make_it(n-1,offset+4)
                      | make_it _ = "illegal record size"
d140 4
a143 1
                    make_it(size,~1)
d147 1
a147 1
      | MLWorks.Debugger.REFPTR => 
d155 2
a156 1
                fun make_it(1,offset) = shape(MLWorks.Debugger.get_object_at_address(object,offset))
d158 1
a158 2
                    shape(depth-1,MLWorks.Debugger.get_object_at_address(object,offset)) ^ make_it(n-1,offset+4)
                  | make_it _ = "illegal record size"
d160 5
a164 1
                make_it(size,1)
d262 2
a263 1
                          MLWorks.Internal.Value.real_to_string object
d559 1
a559 1
                             else [error_notification(object,"(In list - integer but not 1 found)"])
@


1.15
log
@Rationalisation of the MLWorks structure.
@
text
@d4 3
d112 46
d162 1
d165 1
a165 1
    fun error_notification x =
d168 1
a168 1
      else "_"
d241 1
a241 1
                          handle _ => error_notification "(Failure in a user print function)"
d248 1
a248 1
                          | _ => error_notification "(Not integer when integer expected)"
d252 1
a252 47
                          let
                            fun number_to_string number = 
                              let
                                val (sign,number) = if number < 0.0 
                                                      then ("~",~number)
                                                    else ("",number)
                                val very_large = number > 1.0E15
                                val very_small = number < 1.0E~4
                                fun normalise(number,exponent) =
                                  if number >= 1.0 andalso number < 10.0
                                    then (number,exponent)
                                  else if number > 1.0
                                         then normalise(number/10.0,exponent+1)
                                       else normalise(number * 10.0,exponent-1)
                                val (number,exponent) = 
                                  if (very_small andalso number > 1E~300) orelse very_large
                                    then normalise(number,0)
                                  else (number,0)
                                val int_part = floor number
                                val fractional = number - real int_part

                                fun make_fractional (x,0) = ""
                                  | make_fractional (x,n) =
                                    if x >= 1.0 orelse x < 0.0000000001
                                      then ""
                                    else
                                      let
                                        val next = x * 10.0
                                        val top = floor next
                                        val next = next - real top
                                      in
                                        Integer.makestring top ^ make_fractional(next,n-1)
                                      end

                                val fractional_string = make_fractional(fractional,10)
                              in
                                sign ^ Integer.makestring(int_part) ^ 
                                (if fractional_string=""
                                   then ".0"
                                 else "." ^ fractional_string) ^ 
                                   (if exponent <> 0
                                      then "E" ^ Integer.makestring(exponent)
                                    else "")
                              end
                          in
                            number_to_string(MLWorks.Internal.Value.cast object)
                          end
d261 1
a261 1
                        | _ => error_notification "(Not a bool when a bool expected)"
d272 1
a272 1
                              error_notification "(Failed to find string header when string expected)"
d282 2
a283 2
                                  | _ => error_notification "(Can't handle this type of list)")
                             | _ => error_notification "(Not a list when a list expected)")
d326 1
a326 1
                                  | _ => error_notification "Not an exception when one expected") 
d336 2
a337 2
                                       | _ => error_notification "(Wrong type of ref)")
                                  | _ => error_notification "(Not a ref when a ref expected)")
d357 1
a357 1
                                          | _ => error_notification "(single non-vcc problem with name)"
d391 1
a391 1
                                            | _ => error_notification "(Problems in vcc code)"
d397 1
a397 1
                                               | _ => error_notification "(Not a CONS in a datatype)")
d440 3
a442 1
                                           else error_notification "(Not INTEGER,POINTER,PAIR in expected datatype case)"
d444 1
a444 1
                                | _ => error_notification "(Can't handle this part of the object)")
d515 1
a515 1
                                   error_notification "(Record is not of correct size)"
d519 1
a519 1
                                 | _ => error_notification "(record pointer not found when expected)")
d540 1
a540 1
             | value_to_string' _ = "(Can't translate this yet)"
d548 1
a548 1
                             else [error_notification "(In list - integer but not 1 found)"]
@


1.14
log
@More support for the definition of print functions
@
text
@d4 3
d87 2
a88 2
                               (Datatypes.Tyname,(MLWorks.System.Unsafe.Value.T list 
                                                  * (MLWorks.System.Unsafe.Value.T -> string) list
d164 7
a170 7
                            case MLWorks.Debugger.get_primary_tag object of
                              MLWorks.Debugger.ERROR => []
                            | MLWorks.Debugger.INTEGER => [object]
                            | MLWorks.Debugger.PAIRPTR => 
                                [MLWorks.Debugger.get_object_at_address(object,~1),
                                 MLWorks.Debugger.get_object_at_address(object,3)]
                            | MLWorks.Debugger.REFPTR =>
d172 1
a172 1
                                  val (tag,size) = MLWorks.Debugger.get_header object
d175 1
a175 1
                                      MLWorks.Debugger.get_object_at_address(object,x) :: deal_with(n-1,x+4)
d179 1
a179 1
                            | MLWorks.Debugger.POINTER =>
d181 1
a181 1
                                  val (tag,size) = MLWorks.Debugger.get_header object
d183 1
a183 1
                                    | deal_with (n,x) = MLWorks.Debugger.get_object_at_address(object,x) :: deal_with(n-1,x+4)
d196 2
a197 2
                          case MLWorks.Debugger.get_primary_tag object of
                            MLWorks.Debugger.INTEGER => Integer.makestring(MLWorks.System.Unsafe.Value.cast object)
d247 1
a247 1
                            number_to_string(MLWorks.System.Unsafe.Value.cast object)
d252 3
a254 3
                            case MLWorks.Debugger.get_primary_tag object of
                              MLWorks.Debugger.INTEGER => 
                                if MLWorks.System.Unsafe.Value.cast(object) = 0
d262 1
a262 1
                            val (tag,_) = MLWorks.Debugger.get_header object
d266 1
a266 1
                                "\"" ^ MLWorks.System.Unsafe.Value.cast object ^ "\""
d273 3
a275 3
                            (case MLWorks.Debugger.get_primary_tag object of
                               MLWorks.Debugger.INTEGER => list_to_string(object,Datatypes.NULLTYPE,env,depth)
                             | MLWorks.Debugger.PAIRPTR =>
d283 4
a286 4
                                 (case MLWorks.Debugger.get_primary_tag object of
                                    MLWorks.Debugger.INTEGER => Integer.makestring(MLWorks.System.Unsafe.Value.cast object)
                                  | MLWorks.Debugger.PAIRPTR => "(_,_)"
                                  | MLWorks.Debugger.POINTER => 
d288 1
a288 1
                                        val (tag,length) = MLWorks.Debugger.get_header object
d296 2
a297 2
                                  | MLWorks.Debugger.REFPTR => "ref(_)"
                                  | MLWorks.Debugger.ERROR => "_") ^
d301 2
a302 2
                                 (case MLWorks.Debugger.get_primary_tag object of
                                    MLWorks.Debugger.PAIRPTR => 
d304 2
a305 2
                                        val slot = MLWorks.Debugger.get_object_at_address(object,~1)
                                        val value = MLWorks.Debugger.get_object_at_address(object,3)
d307 2
a308 2
                                        (case MLWorks.Debugger.get_primary_tag slot of
                                           MLWorks.Debugger.PAIRPTR =>
d310 2
a311 2
                                               val debug = MLWorks.Debugger.get_object_at_address(slot,3)
                                               val name = MLWorks.System.Unsafe.Value.cast debug
d325 2
a326 2
                                 (case MLWorks.Debugger.get_primary_tag object of
                                    MLWorks.Debugger.REFPTR =>
d330 1
a330 1
                                           ^  value_to_string' (MLWorks.Debugger.get_object_at_address(object,9),ty,env,depth-1) 
d339 1
a339 1
                                      val tag = MLWorks.Debugger.get_primary_tag(object) 
d389 1
a389 1
                                          if tag = MLWorks.Debugger.INTEGER
d391 1
a391 1
                                              (case Lists.nth(MLWorks.System.Unsafe.Value.cast(object),domain) of
d395 1
a395 1
                                          else if tag = MLWorks.Debugger.POINTER orelse tag = MLWorks.Debugger.PAIRPTR
d399 3
a401 3
                                                 val code = MLWorks.Debugger.get_object_at_address(object,~1)
                                                 val packet = MLWorks.Debugger.get_object_at_address(object,3)
                                                 val name' = Lists.nth(MLWorks.System.Unsafe.Value.cast(code),domain)
d445 1
a445 1
                           val primary_tag = MLWorks.Debugger.get_primary_tag object
d447 1
a447 1
                           if primary_tag = MLWorks.Debugger.PAIRPTR orelse primary_tag = MLWorks.Debugger.POINTER
d452 1
a452 1
                                     value_to_string'(MLWorks.Debugger.get_object_at_address(object,pos),ty,env,depth) 
d493 1
a493 1
                                 if primary_tag = MLWorks.Debugger.PAIRPTR
d496 1
a496 1
                                     val (header,record_size) = MLWorks.Debugger.get_header(object)
d539 2
a540 2
                      if MLWorks.Debugger.get_primary_tag object = MLWorks.Debugger.INTEGER 
                        then if MLWorks.System.Unsafe.Value.cast object = 1
d545 3
a547 3
                          val packet = MLWorks.Debugger.get_object_at_address(object,3)
                          val car = MLWorks.Debugger.get_object_at_address(packet,~1)
                          val cdr = MLWorks.Debugger.get_object_at_address(packet,3)
@


1.13
log
@Extra then statement had been added
@
text
@d4 3
d84 2
a85 2
                               (Datatypes.Tyname,(MLWorks.System.Unsafe.Value.T * Datatypes.Type list 
                                                  * (MLWorks.System.Unsafe.Value.T * Datatypes.Type -> string)  
d157 33
a189 2
                        func(object,tys,fn (object,ty) => value_to_string'(object,ty,env,depth))
                        handle _ => error_notification "(Failure in a user print function)"
@


1.12
log
@ Changed coercion and the ml_value type in the pervasive environment.
@
text
@d4 3
d163 1
a163 1
                      if compare_tynames(tyname,Types.real_tyname) then
@


1.11
log
@Various improvements
@
text
@d4 3
d78 2
a79 2
                               (Datatypes.Tyname,(MLWorks.Debugger.ml_value * Datatypes.Type list 
                                                  * (MLWorks.Debugger.ml_value * Datatypes.Type -> string)  
d157 1
a157 1
                            MLWorks.Debugger.INTEGER => Integer.makestring(MLWorks.Debugger.coerce_object_to_int object)
d160 1
a160 1
                      if compare_tynames(tyname,Types.real_tyname)
d207 1
a207 1
                            number_to_string(MLWorks.Debugger.coerce_object_to_real object)
d214 1
a214 1
                                if MLWorks.Debugger.coerce_object_to_int(object) = 0
d226 1
a226 1
                                "\"" ^ MLWorks.Debugger.coerce_object_to_string object ^ "\""
d244 1
a244 1
                                    MLWorks.Debugger.INTEGER => Integer.makestring(MLWorks.Debugger.coerce_object_to_int object)
d271 1
a271 1
                                               val name = MLWorks.Debugger.coerce_object_to_string debug
d351 1
a351 1
                                              (case Lists.nth(MLWorks.Debugger.coerce_object_to_int(object),domain) of
d361 1
a361 1
                                                 val name' = Lists.nth(MLWorks.Debugger.coerce_object_to_int(code),domain)
d500 1
a500 1
                        then if MLWorks.Debugger.coerce_object_to_int object = 1
@


1.10
log
@Added the printing of reals
@
text
@d4 3
d174 1
a174 1
                                  if very_small orelse very_large
d269 1
a269 1
                                               val (name',ty,tyenv) = exn_lookup name
d297 8
d306 1
a306 1
                                      if tag = MLWorks.Debugger.INTEGER
d308 45
a352 5
                                          (case Lists.nth(MLWorks.Debugger.coerce_object_to_int(object),domain) of
                                             Ident.CON name => Ident.Symbol.symbol_name name
                                           | _ => error_notification "(Not a CONS in a datatype)")
                                             handle Lists.Nth => "_"
                                      else if tag = MLWorks.Debugger.POINTER orelse tag = MLWorks.Debugger.PAIRPTR
@


1.9
log
@Neatening up, plus changes due to lower level sharing changes
@
text
@d4 3
d157 43
a199 29
                            val number = MLWorks.Debugger.coerce_object_to_real object
                            val (sign,number) = if number < 0.0 
                                                  then ("~",number)
                                                else ("",number)
                            val very_large = number > 1.0E15
                            val very_small = number < 1.0E~4
                            fun normalise(number,exponent) =
                              if number > 0.0 andalso number < 10.0
                                then (number,exponent)
                              else if number > 1.0
                                     then normalise(number/10.0,exponent-1)
                                   else normalise(number * 10.0,exponent+1)
                            val (number,exponent) = 
                              if very_small orelse very_large
                                then normalise(number,0)
                              else (number,0)
                            val int_part = floor number
                            val fractional = number - real int_part
                            fun digits_in_fraction(number,size) =
                              if number > 0.0
                                then (floor number,size)
                              else digits_in_fraction(number*10.0,size+1)
                            val (integerised_fraction,size_of_fraction) = digits_in_fraction(fractional,0)
                            val converted_fraction = Integer.makestring(integerised_fraction)
                            fun add_leading_zeros (x,acc) =
                              if x <= 0
                                then acc
                              else add_leading_zeros(x-1,"0" ^ acc)
                            val fractional = add_leading_zeros(size_of_fraction - size converted_fraction,"")
d201 1
a201 4
                            sign ^ Integer.makestring(int_part) ^ "." ^ fractional ^ 
                            (if exponent <> 0
                               then "E" ^ Integer.makestring(exponent)
                             else "")
d292 1
a292 2
                                      val domain = NewMap.domain constructor_map
                                      val range = NewMap.range constructor_map
a355 2
                                 val header = MLWorks.Debugger.get_object_at_address(object,~5)
                                 val record_size = MLWorks.Debugger.coerce_object_to_int header div 64
d399 7
a405 1
                                 if Lists.length range = record_size
@


1.8
log
@More improvements
@
text
@d4 3
d33 1
d37 2
a38 1
require "../utils/string";
d47 3
a49 1
                     structure String : STRING
d51 2
a52 1
                     sharing Tyenv.Datatypes = Types.Datatypes = Tystr.Datatypes = Valenv.Datatypes
d57 1
d63 30
a112 3
          fun compare_tynames(Datatypes.TYNAME(x,_,_,_,_), Datatypes.TYNAME(y,_,_,_,_)) = (x=y)
            | compare_tynames _ = false
            
d136 5
a140 7
                  if compare_tynames(tyname,Types.int_tyname)
                    then
                      case Debugger.get_primary_tag object of
                        Debugger.INTEGER => Integer.makestring(Debugger.coerce_object_to_int object)
                      | _ => error_notification "(Not integer when integer expected)"
                  else
                    if compare_tynames(tyname,Types.bool_tyname)
d142 53
a194 3
                        case Debugger.get_primary_tag object of
                          Debugger.INTEGER => 
                            if Debugger.coerce_object_to_int(object) = 0
d201 9
a209 1
                          "\"" ^ Debugger.coerce_object_to_string object ^ "\""
d213 3
a215 3
                            (case Debugger.get_primary_tag object of
                               Debugger.INTEGER => list_to_string(object,Datatypes.NULLTYPE,env,depth)
                             | Debugger.PAIRPTR =>
d222 17
a238 6
                                 case Debugger.get_primary_tag object of
                                   Debugger.INTEGER => Integer.makestring(Debugger.coerce_object_to_int object)
                                 | Debugger.PAIRPTR => "(_,_)"
                                 | Debugger.POINTER => "_"
                                 | Debugger.REFPTR => "ref(_)"
                                 | Debugger.ERROR => "_"
d241 2
a242 2
                                 (case Debugger.get_primary_tag object of
                                    Debugger.PAIRPTR => 
d244 2
a245 2
                                        val slot = Debugger.get_object_at_address(object,~1)
                                        val value = Debugger.get_object_at_address(object,3)
d247 2
a248 2
                                        (case Debugger.get_primary_tag slot of
                                           Debugger.PAIRPTR =>
d250 2
a251 2
                                               val debug = Debugger.get_object_at_address(slot,3)
                                               val name = Debugger.coerce_object_to_string debug
d265 2
a266 2
                                 (case Debugger.get_primary_tag object of
                                    Debugger.REFPTR =>
d270 1
a270 1
                                           ^  value_to_string' (Debugger.get_object_at_address(object,9),ty,env,depth-1) 
d280 1
a280 1
                                      val tag = Debugger.get_primary_tag(object) 
d282 1
a282 1
                                      if tag = Debugger.INTEGER
d284 1
a284 1
                                          (case Lists.nth(Debugger.coerce_object_to_int(object),domain) of
d288 1
a288 1
                                      else if tag = Debugger.POINTER orelse tag = Debugger.PAIRPTR
d292 3
a294 3
                                                 val code = Debugger.get_object_at_address(object,~1)
                                                 val packet = Debugger.get_object_at_address(object,3)
                                                 val name' = Lists.nth(Debugger.coerce_object_to_int(code),domain)
d332 2
a333 1
                                  
d338 1
a338 1
                           val primary_tag = Debugger.get_primary_tag object
d340 1
a340 1
                           if primary_tag = Debugger.PAIRPTR orelse primary_tag = Debugger.POINTER
d343 2
d347 2
a348 2
                                     value_to_string'(Debugger.get_object_at_address(object,pos),ty,env,depth) :: get_elements(tys,pos+4)
                                 val elements = get_elements(range,~1)
d372 1
d382 1
d386 1
d388 11
a398 3
                                 if check_for_tuple()
                                   then print_as_tuple elements
                                 else print_as_a_record elements
d428 2
a429 2
                      if Debugger.get_primary_tag object = Debugger.INTEGER 
                        then if Debugger.coerce_object_to_int object = 1
d434 3
a436 3
                          val packet = Debugger.get_object_at_address(object,3)
                          val car = Debugger.get_object_at_address(packet,~1)
                          val cdr = Debugger.get_object_at_address(packet,3)
d456 1
a456 1
              value_to_string'(object,ty,[],depth) 
d459 1
a459 1
          value_to_string'(object,ty,env,!maximum_ref_depth)
@


1.7
log
@New sharing constraints after lower level changes
@
text
@d4 3
d55 1
d77 30
a106 41
          fun value_to_string (object,ty as Datatypes.METATYVAR _,env) = 
            value_to_string(object,get_next_part_of_type ty,env)
            
            | value_to_string (object,Datatypes.META_OVERLOADED(ref ty),env) = 
              value_to_string(object,get_next_part_of_type ty,env)
              
            | value_to_string (_,Datatypes.NULLTYPE,env) = "_"
              
            | value_to_string (_,Datatypes.FUNTYPE _,env) = "fn"

            | value_to_string(object,
                              Datatypes.CONSTYPE
                              (tys,Datatypes.METATYNAME(ref(tyfun as (Datatypes.TYFUN _)),_,_,_,_)),env) =
              value_to_string(object,Types.apply(tyfun,tys),env)

            | value_to_string(object,
                              Datatypes.CONSTYPE
                              (tys,Datatypes.METATYNAME(ref(Datatypes.ETA_TYFUN tyname),_,_,_,_)),env) =
              value_to_string(object,Datatypes.CONSTYPE(tys,tyname),env)

            | value_to_string (object,Datatypes.CONSTYPE(tys,tyname),env) =
              if compare_tynames(tyname,Types.int_tyname)
                then
                  case Debugger.get_primary_tag object of
                    Debugger.INTEGER => Integer.makestring(Debugger.coerce_object_to_int object)
                  | _ => error_notification "(Not integer when integer expected)"
              else
                if compare_tynames(tyname,Types.bool_tyname)
                  then
                    case Debugger.get_primary_tag object of
                      Debugger.INTEGER => 
                        if Debugger.coerce_object_to_int(object) = 0
                          then "false"
                        else "true"
                    | _ => error_notification "(Not a bool when a bool expected)"
                else 
                  if compare_tynames(tyname,Types.string_tyname)
                    then 
                      "\"" ^ Debugger.coerce_object_to_string object ^ "\""
                  else 
                    if compare_tynames(tyname,Types.list_tyname)
d108 79
a186 66
                        (case Debugger.get_primary_tag object of
                           Debugger.INTEGER => list_to_string(object,Datatypes.NULLTYPE,env)
                         | Debugger.PAIRPTR =>
                             (case tys of
                                [ty] => list_to_string (object,ty,env)
                              | _ => error_notification "(Can't handle this type of list)")
                         | _ => error_notification "(Not a list when a list expected)")
                    else if compare_tynames(tyname,Types.ml_value_tyname)
                           then
                             case Debugger.get_primary_tag object of
                               Debugger.INTEGER => Integer.makestring(Debugger.coerce_object_to_int object)
                             | Debugger.PAIRPTR => "(_,_)"
                             | Debugger.POINTER => "_"
                             | Debugger.REFPTR => "ref(_)"
                             | Debugger.ERROR => "_"
                    else if compare_tynames(tyname,Types.exn_tyname)
                           then 
                             (case Debugger.get_primary_tag object of
                                Debugger.PAIRPTR => 
                                  let
                                    val slot = Debugger.get_object_at_address(object,~1)
                                    val value = Debugger.get_object_at_address(object,3)
                                  in
                                   (case Debugger.get_primary_tag slot of
                                      Debugger.PAIRPTR =>
                                        let
                                          val debug = Debugger.get_object_at_address(slot,3)
                                          val name = Debugger.coerce_object_to_string debug
                                          val (name',ty,tyenv) = exn_lookup name
                                        in
                                          (case ty of
                                            Datatypes.NULLTYPE => "exn(" ^ name' ^ ")"
                                          | _ => ("exn(" ^ name' ^ " " ^
                                                  stringify_value(value,ty,tyenv,exn_lookup,type_from_encapsulation) ^ 
                                                  ")")) 
                                        end
                                    | _ => "exn")
                                  end
                              | _ => error_notification "Not an exception when one expected") 
                    else if compare_tynames(tyname,Types.ref_tyname)
                           then 
                             (case Debugger.get_primary_tag object of
                                Debugger.REFPTR =>
                                  (case tys of
                                     [ty] => 
                                       "ref(" 
                                       ^  value_to_string (Debugger.get_object_at_address(object,9),ty,env) 
                                       ^ ")"
                                   | _ => error_notification "(Wrong type of ref)")
                              | _ => error_notification "(Not a ref when a ref expected)")
                         else
                           (case tyname of 
                              Datatypes.TYNAME(_,ty_name,_,_,ref(val_map as Datatypes.VE(_,constructor_map))) => 
                                  let
                                    val domain = NewMap.domain constructor_map
                                    val range = NewMap.range constructor_map
                                    val tag = Debugger.get_primary_tag(object) 
                                  in
                                    if tag = Debugger.INTEGER
                                      then
                                        (case Lists.nth(Debugger.coerce_object_to_int(object),domain) of
                                          Ident.CON name => Ident.Symbol.symbol_name name
                                        | _ => error_notification "(Not a CONS in a datatype)")
                                           handle Lists.Nth => "_"
                                    else if tag = Debugger.POINTER orelse tag = Debugger.PAIRPTR
                                           then
d188 1
a188 1

d195 1
a195 1

d208 1
a208 1

d217 3
a219 3
                                                 value_to_string(packet,
                                                                 get_arg_type ty,
                                                                 env') ^
d222 1
a222 1
                                                    
d225 62
d288 28
a315 18
                                         else error_notification "(Not INTEGER,POINTER,PAIR in expected datatype case)"
                                  end
                            | _ => error_notification "(Can't handle this part of the object)")
                              
            | value_to_string(object,Datatypes.RECTYPE mapping,env) =
              let
                val dom = Mapping.domain mapping
                val range = Mapping.range mapping
                val primary_tag = Debugger.get_primary_tag object
              in
                if primary_tag = Debugger.PAIRPTR orelse primary_tag = Debugger.POINTER
                  then
                    let
                      fun get_elements ([],_) = []
                        | get_elements (ty::tys,pos) = 
                          value_to_string(Debugger.get_object_at_address(object,pos),ty,env) :: get_elements(tys,pos+4)
                      val elements = get_elements(range,~1)
                      fun check_for_tuple () =
d317 3
a319 5
                          fun check_for_tuple' 0 = true
                            | check_for_tuple' n = 
                              Lists.member(Ident.LAB(Ident.Symbol.find_symbol(Integer.makestring n)),dom)
                              andalso check_for_tuple'(n-1)
                          val len = Lists.length dom
d321 1
a321 1
                          len > 0 andalso check_for_tuple' len
d323 5
a327 1
                      fun print_as_a_record values =
d329 4
a332 3
                          fun print_as_a_record' (Ident.LAB name,value) =
                            Ident.Symbol.symbol_name name ^ "=" ^ value
                          val result = map print_as_a_record' (Lists.zip(dom,values))
d334 1
a334 10
                          case result of
                            [] => "()"
                          | [one] => one
                          | arg::args =>
                              let
                                fun put_together [x] = "," ^ x
                                  | put_together (h::t) = "," ^ h ^ put_together t
                              in
                                "{" ^ arg ^ put_together args ^ "}"
                              end
a335 28
                      fun print_as_tuple [x] = "(" ^ x ^ ")"
                        | print_as_tuple (arg::args) =
                          let
                            fun put_together [x] = "," ^ x
                              | put_together (h::t) = "," ^ h ^ put_together t
                          in
                            "(" ^ arg ^ put_together args ^ ")"
                          end
                    in
                      if check_for_tuple()
                        then print_as_tuple elements
                      else print_as_a_record elements
                    end
                else (case dom of
                        [] => "()"
                      | _ => error_notification "(record pointer not found when expected)")
              end

            | value_to_string(object,Datatypes.DEBRUIJN(level,_,_),env) =
              let
                exception DeBruijn_In_ValuePrinter
                fun find_it (level) =
                  let
                    fun find_it'(0,h::t) = (h,t)
                      | find_it'(n,h::t) = find_it'(n-1,t)
                      | find_it'(_,[]) = raise DeBruijn_In_ValuePrinter
                  in
                    find_it'(level,env)
d337 1
a337 24
                val (ty,env') = find_it(level)
                (* val _ = output(std_out,"Substituting DEBRUIJN " ^ Integer.makestring level ^ "\n") *)
              in
                value_to_string(object,ty,env')
              end


             | value_to_string _ = "(Can't translate this yet)"
                                                            
          and list_to_string(object,ty,env) =
            let
              fun deal_with_list' object =
                if Debugger.get_primary_tag object = Debugger.INTEGER 
                  then if Debugger.coerce_object_to_int object = 1
                         then []
                       else [error_notification "(In list - integer but not 1 found)"]
                else
                  let
                    val packet = Debugger.get_object_at_address(object,3)
                    val car = Debugger.get_object_at_address(packet,~1)
                    val cdr = Debugger.get_object_at_address(packet,3)
                  in
                    value_to_string (car,ty,env) :: deal_with_list' cdr
                  end
d339 1
a339 12
              case deal_with_list' object of
                [] => "[]"
              | [a] => "[" ^ a ^ "]"
              | more =>
                  let
                    fun put_together ([],_) = ""
                      | put_together ([a],_) = a
                      | put_together (_,0) = "..."
                      | put_together (h::t,count) = h ^ "," ^ put_together (t,count-1)
                  in
                    "[" ^ put_together (more,!maximum_list_size) ^ "]"
                  end
a340 1
          
d342 1
a342 1
          value_to_string(object,ty,[]) 
@


1.6
log
@Now handles eta_tyfuns
@
text
@d4 3
d48 1
d169 2
a170 2
                                    val domain = Mapping.domain constructor_map
                                    val range = Mapping.range constructor_map
@


1.5
log
@Periodical checking in - many improvements
@
text
@d4 3
d49 1
a49 1
    val error_notify = ref(true)
d79 10
d116 1
a116 1
                              | _ => "(Can't handle this type of list)")
d118 8
@


1.4
log
@Prints the value carried by an exception
@
text
@d4 3
d44 2
d64 1
a225 1
                            | print_as_a_record' (_,value) = "(name not a LAB)=" ^ value
d298 4
a301 3
                    fun put_together [] = ""
                      | put_together [a] = a
                      | put_together (h::t) = h ^ "," ^ put_together t
d303 1
a303 1
                    "[" ^ put_together more ^ "]"
@


1.3
log
@Some minor printing changes
@
text
@d4 3
a302 48
        end

      fun toplevel_value_printer(object,ty,exn_env as Datatypes.VE(_,exn_map) ) =
        let
          fun exn_lookup name =
              let
                fun get_real_exception_name s =
                  let
                    val si = size s
                    fun check pos =
                      if pos >= si
                        then s
                      else if String.substring(s,pos,1) = " "
                        then String.substring(s,0,pos)
                           else check (pos+1)
                  in
                    check 0
                  end
                val name' = get_real_exception_name name
                val _ = output(std_out,"exn lookup code called on name " ^ name' ^ "\n")
                val tystr = Datatypes.Mapping.lookup
                  (Datatypes.Ident.EXCON (Datatypes.Ident.Symbol.find_symbol name'),
                   exn_map)
                val _ = output(std_out,"exn lookup - lookup succeeded\n")
              in
                case tystr of
                  Datatypes.UNBOUND_SCHEME x => 
                    let
                      val _ = output(std_out,"exn lookup - finding arg type\n")
                      val arg = get_arg_type x
                      val _ = output(std_out,"exn lookup - recursive call\n")
                    in
                      (name,arg,Datatypes.TE(Datatypes.Mapping.empty_map))
                    end
                | Datatypes.SCHEME (level,ty) =>
                    if level=0
                      then (name,get_arg_type ty,Datatypes.TE(Datatypes.Mapping.empty_map))
                    else (output(std_out,"Scheme when looking up an exception with non-zero count\n");
                          (name,Datatypes.NULLTYPE,Datatypes.TE(Datatypes.Mapping.empty_map)))
                 | _ => (name,Datatypes.NULLTYPE,Datatypes.TE(Datatypes.Mapping.empty_map))
               end
             handle Datatypes.Mapping.Lookup => (name,Datatypes.NULLTYPE,Datatypes.TE(Datatypes.Mapping.empty_map))
        in
        stringify_value(object,
                        ty,
                        Datatypes.TE(Datatypes.Mapping.empty_map),
                        exn_lookup,
                        false)
@


1.2
log
@Added a simplified function for toplevel printing
@
text
@d4 3
d18 1
d27 1
d44 4
a51 4
          fun get_arg_type(Datatypes.METATYVAR(ref(_,object),_,_)) = get_arg_type object
            | get_arg_type(Datatypes.FUNTYPE (arg,_)) = arg
            | get_arg_type x = Datatypes.NULLTYPE

d112 2
a113 2
                                            Datatypes.NULLTYPE => "exn{" ^ name' ^ "}"
                                          | _ => ("exn{" ^ name' ^ " " ^
d115 1
a115 1
                                                  "}")) 
d151 4
a154 1
                                                 val name = Lists.nth(Debugger.coerce_object_to_int(code),domain)
d164 1
a164 1
                                                         Valenv.lookup(name,ce)
d167 1
a167 1
                                                     Valenv.lookup(name,val_map)
d171 1
a171 1
                                                      Datatypes.SCHEME(_,ty') => (ty',env @@ tys)
d175 2
d179 2
a180 1
                                                                 env')
d261 1
a261 1
                val _ = output(std_out,"Substituting DEBRUIJN " ^ Integer.makestring level ^ "\n")
d302 41
a342 1
      fun toplevel_value_printer(object,ty) =
d346 1
a346 3
                        fn x => (x,
                                 Datatypes.NULLTYPE,                        
                                 Datatypes.TE(Datatypes.Mapping.empty_map)),
d348 1
@


1.1
log
@Initial revision
@
text
@d3 4
a6 1
$Log$
d290 9
@
