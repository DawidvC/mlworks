head	1.6;
access;
symbols
	MLW_daveb_inline_1_4_99:1.6.1
	MLWorks_21c0_1999_03_25:1.6
	MLWorks_20c1_1998_08_20:1.6
	MLWorks_20c0_1998_08_04:1.6
	MLWorks_20b2c2_1998_06_19:1.6
	MLWorks_20b2_Windows_1998_06_12:1.6
	MLWorks_20b1c1_1998_05_07:1.6
	MLWorks_20b0_1998_04_07:1.6
	MLWorks_20b0_1998_03_20:1.6
	MLWorks_20m2_1998_02_16:1.5
	MLWorks_20m1_1997_10_23:1.5
	MLWorks_11r1:1.5.7.1.1.1.1
	MLWorks_workspace_97:1.5.9
	MLWorks_dt_wizard:1.5.8
	MLWorks_11c0_1997_09_09:1.5.7.1.1.1
	MLWorks_10r3:1.5.7.1.3
	MLWorks_10r2_551:1.5.7.1.2
	MLWorks_11:1.5.7.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.5.7.1
	MLWorks_20m0_1997_06_20:1.5
	MLWorks_1_0_r2c2_1997_06_14:1.5.7.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.5.7.1
	MLWorks_1_0_r2c1_1997_05_12:1.5.7
	MLWorks_BugFix_1997_04_24:1.5
	MLWorks_1_0_r2_Win32_1997_04_11:1.5
	MLWorks_1_0_r2_Unix_1997_04_04:1.5
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.5.5.1.1
	MLWorks_gui_1996_12_18:1.5.6
	MLWorks_1_0_Win32_1996_12_17:1.5.5
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.5.3.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.5.3.1
	MLWorks_1_0_Irix_1996_11_28:1.5.3.1.1
	MLWorks_1_0_Win32_1996_11_22:1.5.4
	MLWorks_1_0_Unix_1996_11_14:1.5.3
	MLWorks_Open_Beta2_1996_10_11:1.5.2
	MLWorks_License_dev:1.5.1
	MLWorks_1_open_beta_1996_09_13:1.3.1
	MLWorks_Open_Beta_1996_08_22:1.3
	MLWorks_Beta_1996_07_02:1.3
	MLWorks_Beta_1996_06_07:1.3
	MLWorks_Beta_1996_06_06:1.3
	MLWorks_Beta_1996_06_05:1.3
	MLWorks_Beta_1996_06_03:1.3
	MLWorks_Beta_1996_05_31:1.3
	MLWorks_Beta_1996_05_30:1.3;
locks; strict;
comment	@ *  @;


1.6
date	98.02.19.19.54.24;	author mitchell;	state Exp;
branches
	1.6.1.1;
next	1.5;

1.5
date	96.10.03.14.45.31;	author io;	state Exp;
branches
	1.5.1.1
	1.5.2.1
	1.5.3.1
	1.5.4.1
	1.5.5.1
	1.5.6.1
	1.5.7.1
	1.5.8.1
	1.5.9.1;
next	1.4;

1.4
date	96.10.03.13.24.00;	author io;	state Exp;
branches;
next	1.3;

1.3
date	96.05.21.12.21.49;	author matthew;	state Exp;
branches
	1.3.1.1;
next	1.2;

1.2
date	96.05.17.11.40.53;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	96.05.07.15.54.54;	author jont;	state Exp;
branches;
next	;

1.3.1.1
date	96.09.13.11.10.13;	author hope;	state Exp;
branches;
next	;

1.5.1.1
date	96.10.07.16.01.03;	author hope;	state Exp;
branches;
next	;

1.5.2.1
date	96.10.17.11.19.18;	author hope;	state Exp;
branches;
next	;

1.5.3.1
date	96.11.14.12.42.50;	author hope;	state Exp;
branches
	1.5.3.1.1.1;
next	;

1.5.3.1.1.1
date	96.11.28.14.54.43;	author hope;	state Exp;
branches;
next	;

1.5.4.1
date	96.11.22.18.03.20;	author hope;	state Exp;
branches;
next	;

1.5.5.1
date	96.12.17.17.42.14;	author hope;	state Exp;
branches
	1.5.5.1.1.1;
next	;

1.5.5.1.1.1
date	97.02.24.11.30.43;	author hope;	state Exp;
branches;
next	;

1.5.6.1
date	96.12.18.09.36.14;	author hope;	state Exp;
branches;
next	;

1.5.7.1
date	97.05.12.10.28.25;	author hope;	state Exp;
branches
	1.5.7.1.1.1
	1.5.7.1.2.1
	1.5.7.1.3.1;
next	;

1.5.7.1.1.1
date	97.07.28.18.14.52;	author daveb;	state Exp;
branches
	1.5.7.1.1.1.1.1;
next	;

1.5.7.1.1.1.1.1
date	97.10.07.11.39.56;	author jkbrook;	state Exp;
branches;
next	;

1.5.7.1.2.1
date	97.09.08.17.08.19;	author daveb;	state Exp;
branches;
next	;

1.5.7.1.3.1
date	97.09.09.14.03.26;	author daveb;	state Exp;
branches;
next	;

1.5.8.1
date	97.09.10.19.17.55;	author brucem;	state Exp;
branches;
next	;

1.5.9.1
date	97.09.11.20.48.48;	author daveb;	state Exp;
branches;
next	;

1.6.1.1
date	99.04.01.17.52.46;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
@


1.6
log
@[Bug #30349]
Fix to avoid non-unit sequence warnings
@
text
@(*  ==== INITIAL BASIS : ARRAYS ====
 *
 *  Copyright (C) 1996 Harlequin Ltd.
 *
 *  Description
 *  -----------
 *  This is part of the extended Initial Basis.
 *
 *  Revision Log
 *  ------------
 *  $Log: __array.sml,v $
 *  Revision 1.5  1996/10/03  14:45:31  io
 *  [Bug #1614]
 *  remove redundant requires
 *
 *  Revision 1.4  1996/10/03  13:24:00  io
 *  [Bug #1614]
 *  remove redundant require
 *
 *  Revision 1.3  1996/05/21  12:21:49  matthew
 *  Updating
 *
 *  Revision 1.2  1996/05/17  11:40:53  jont
 *  maxint has become maxInt
 *
 *  Revision 1.1  1996/05/07  15:54:54  jont
 *  new unit
 *
 *
 *)

require "array";

structure Array : ARRAY =
  struct
    structure Bits = MLWorks.Internal.Bits

    type 'a array = 'a MLWorks.Internal.Array.array
    type 'a vector = 'a MLWorks.Internal.Vector.vector

    val maxLen = MLWorks.Internal.ExtendedArray.maxLen

    fun check_size n =
      if n < 0 orelse n > maxLen then raise Size else n

    fun fromList l = 
      (ignore(check_size (length l));
       MLWorks.Internal.Array.arrayoflist l)

    val length = MLWorks.Internal.Array.length

    fun check_slice (array,i,SOME j) =
      if i < 0 orelse j < 0 orelse i + j > length array
        then raise Subscript
      else j
      | check_slice (array,i,NONE) =
        let
          val l = length array
        in
          if i < 0 orelse i > l
            then raise Subscript
          else l - i
        end

    fun array (n,i) = 
      MLWorks.Internal.Array.array (check_size n,i)
    fun tabulate (n,f) = 
      MLWorks.Internal.Array.tabulate (check_size n,f)

    val sub = MLWorks.Internal.Array.sub
    val update = MLWorks.Internal.Array.update

    fun extract(array, i, j) =
      let
        val len = check_slice (array,i,j)
      in
        MLWorks.Internal.Vector.tabulate(len, fn n => sub (array, n+i))
      end

    fun copy {src, si, len, dst, di} =
      let
	val len = check_slice (src,si,len)
      in
	MLWorks.Internal.ExtendedArray.copy(src, si, si+len, dst, di)
      end

    fun copyVec{src : 'a vector, si : int, len, dst : 'a array, di : int} =
      let
	val len = case len of
	  SOME len => len
	| NONE => MLWorks.Internal.Vector.length src-si

	fun copy (from, start, finish, to, start') =
	  let
	    val l1 = MLWorks.Internal.Vector.length from
	    val l2 = length to
	  in
	    if start < 0 orelse start > l1 orelse finish > l1 orelse
	      start > finish orelse
	      start' < 0 orelse start' + finish - start > l2 then
	      raise Subscript
	    else
	      let
		fun copy' 0 = ()
		  | copy' n =
		    let
		      val n' = n-1
		    in
		      (update (to, start'+n', MLWorks.Internal.Vector.sub (from, start+n'));
		       copy' n')
		    end
	      in
		copy' (finish - start)
	      end
	  end
      in
	copy(src, si, si+len, dst, di)
      end

    val app = MLWorks.Internal.ExtendedArray.iterate

    fun appi f (array, i, j) =
      let
        val len = check_slice (array,i,j)
	fun iterate' n =
	  if n >= i + len then
	    ()
	  else
	    (ignore(f (n, sub (array, n)));
	     iterate'(n+1))
      in
	iterate' i
      end

    val foldl = fn f => fn b => fn array => MLWorks.Internal.ExtendedArray.reducel (fn (a, b) => f (b, a)) (b, array)

    val foldr = fn f => fn b => fn array => MLWorks.Internal.ExtendedArray.reducer f (array, b)

    fun foldli f b (array, i, j) =
      let
	val l = length array
        val len = check_slice (array,i,j)
	fun reduce (n, x) =
	  if n = i + len then
	    x
	  else
	    reduce(n + 1, f(n, sub(array, n), x))
      in
	reduce(i, b)
      end

    fun foldri f b (array, i, j) =
      let
        val len = check_slice (array,i,j)
	fun reduce (n, x) =
	  if n < i then
	    x
	  else
	    reduce(n-1, f(n, sub(array, n), x))
      in
	reduce(i + len-1, b)
      end

    fun modify f array =
      let
	val l = length array
	fun iterate n =
	  if n = l then
	    ()
	  else
	    (update(array, n, f(sub(array, n)));
	     iterate(n+1))
      in
	iterate 0
      end

    fun modifyi f (array, i, j) =
      let
        val len = check_slice (array,i,j)
	fun iterate n =
	  if n = len then () (* we have done *)
	  else
	    (update(array, i+n, f (i+n, sub (array, i+n)));
	     iterate(n+1))
      in
	iterate 0
      end

  end
@


1.6.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a11 4
 *  Revision 1.6  1998/02/19  19:54:24  mitchell
 *  [Bug #30349]
 *  Fix to avoid non-unit sequence warnings
 *
@


1.5
log
@[Bug #1614]
remove redundant requires
@
text
@d12 4
d47 1
a47 1
      (check_size (length l);
d129 1
a129 1
	    (f (n, sub (array, n));
@


1.5.9.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a11 4
 *  Revision 1.5  1996/10/03  14:45:31  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.5.8.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a11 4
 *  Revision 1.5  1996/10/03  14:45:31  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.5.7.1
log
@branched from 1.5
@
text
@a11 4
 *  Revision 1.5  1996/10/03  14:45:31  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.5.7.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a11 3
 *  Revision 1.5.7.1  1997/05/12  10:28:25  hope
 *  branched from 1.5
 *
@


1.5.7.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a11 3
 *  Revision 1.5.7.1  1997/05/12  10:28:25  hope
 *  branched from 1.5
 *
@


1.5.7.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a11 3
 *  Revision 1.5.7.1  1997/05/12  10:28:25  hope
 *  branched from 1.5
 *
@


1.5.7.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a11 3
 *  Revision 1.5.7.1.1.1  1997/07/28  18:14:52  daveb
 *  branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.5.6.1
log
@branched from 1.5
@
text
@a11 4
 *  Revision 1.5  1996/10/03  14:45:31  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.5.5.1
log
@branched from 1.5
@
text
@a11 4
 *  Revision 1.5  1996/10/03  14:45:31  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.5.5.1.1.1
log
@branched from 1.5.5.1
@
text
@a11 3
 *  Revision 1.5.5.1  1996/12/17  17:42:14  hope
 *  branched from 1.5
 *
@


1.5.4.1
log
@branched from 1.5
@
text
@a11 4
 *  Revision 1.5  1996/10/03  14:45:31  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.5.3.1
log
@branched from 1.5
@
text
@a11 4
 *  Revision 1.5  1996/10/03  14:45:31  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.5.3.1.1.1
log
@branched from 1.5.3.1
@
text
@a11 3
 *  Revision 1.5.3.1  1996/11/14  12:42:50  hope
 *  branched from 1.5
 *
@


1.5.2.1
log
@branched from 1.5
@
text
@a11 4
 *  Revision 1.5  1996/10/03  14:45:31  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.5.1.1
log
@branched from 1.5
@
text
@a11 4
 *  Revision 1.5  1996/10/03  14:45:31  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.4
log
@[Bug #1614]
remove redundant require
@
text
@d12 4
a28 1
require "toplevel";
@


1.3
log
@Updating
@
text
@d12 3
a24 2
require "__integer";
require "__list";
d36 7
a57 3
    fun check_size n =
      if n < 0 orelse n > maxLen then raise Size else n

a59 3
    fun fromList l = 
      (check_size (List.length l);
       MLWorks.Internal.Array.arrayoflist l)
@


1.3.1.1
log
@branched from 1.3
@
text
@a11 3
 *  Revision 1.3  1996/05/21  12:21:49  matthew
 *  Updating
 *
@


1.2
log
@maxint has become maxInt
@
text
@d12 3
d23 1
d28 2
d33 2
a34 4
    val MLWorks.Option.SOME maxLen = Int.maxInt
    val array = MLWorks.Internal.Array.array
    val fromList = MLWorks.Internal.Array.arrayoflist
    val tabulate = MLWorks.Internal.Array.tabulate
d36 25
d63 2
a64 1
    fun extract(array, start, i) =
d66 1
a66 3
	val len = case i of
	  SOME len => len
	| NONE => length array-start
d68 1
a68 1
	MLWorks.Internal.Vector.tabulate(len, fn i => sub(array, start+i))
d73 1
a73 3
	val len = case len of
	  SOME len => len
	| NONE => length src-si
d92 1
a92 1
	      raise MLWorks.Internal.ExtendedArray.Copy(start, finish, start')
d115 1
a115 4
	val l = length array
	val len = case j of
	  SOME len => i+len
	| NONE => l
d117 1
a117 1
	  if n >= len then
d133 1
a133 3
	val len = case j of
	  SOME len => i+len
	| NONE => l
d135 1
a135 1
	  if n >= l then
d138 1
a138 1
	    reduce(n+1, f(n, sub(array, n), x))
d145 1
a145 4
	val l = length array
	val len = case j of
	  SOME len => i+len
	| NONE => l
d152 1
a152 1
	reduce(len-1, b)
d170 1
a170 4
	val l = length array
	val len = case j of
	  SOME len => i+len
	| NONE => l
d172 1
a172 2
	  if n >= l then
	    ()
d174 1
a174 1
	    (update(array, n, f(n, sub(array, n)));
d177 1
a177 1
	iterate i
@


1.1
log
@new unit
@
text
@d11 4
a14 1
 *  $Log$
d27 1
a27 1
    val MLWorks.Option.SOME maxLen = Int.maxint
@
