head	1.4;
access;
symbols
	MLW_daveb_inline_1_4_99:1.4.4
	MLWorks_21c0_1999_03_25:1.4
	MLWorks_20c1_1998_08_20:1.4
	MLWorks_20c0_1998_08_04:1.4
	MLWorks_20b2c2_1998_06_19:1.4
	MLWorks_20b2_Windows_1998_06_12:1.4
	MLWorks_20b1c1_1998_05_07:1.4
	MLWorks_20b0_1998_04_07:1.4
	MLWorks_20b0_1998_03_20:1.4
	MLWorks_20m2_1998_02_16:1.4
	MLWorks_20m1_1997_10_23:1.4
	MLWorks_11r1:1.4.1.1.1.1.1
	MLWorks_workspace_97:1.4.3
	MLWorks_dt_wizard:1.4.2
	MLWorks_11c0_1997_09_09:1.4.1.1.1.1
	MLWorks_10r3:1.4.1.1.3
	MLWorks_10r2_551:1.4.1.1.2
	MLWorks_11:1.4.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.4.1.1
	MLWorks_20m0_1997_06_20:1.4
	MLWorks_1_0_r2c2_1997_06_14:1.4.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.4.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.4.1
	MLWorks_BugFix_1997_04_24:1.4
	MLWorks_1_0_r2_Win32_1997_04_11:1.4
	MLWorks_1_0_r2_Unix_1997_04_04:1.4
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.3.6.1.1
	MLWorks_gui_1996_12_18:1.3.7
	MLWorks_1_0_Win32_1996_12_17:1.3.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.3.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.3.4.1
	MLWorks_1_0_Irix_1996_11_28:1.3.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.3.5
	MLWorks_1_0_Unix_1996_11_14:1.3.4
	MLWorks_Open_Beta2_1996_10_11:1.3.3
	MLWorks_License_dev:1.3.2
	MLWorks_1_open_beta_1996_09_13:1.3.1
	MLWorks_Open_Beta_1996_08_22:1.3
	MLWorks_Beta_1996_07_02:1.3
	MLWorks_Beta_1996_06_07:1.3
	MLWorks_Beta_1996_06_06:1.3
	MLWorks_Beta_1996_06_05:1.3
	MLWorks_Beta_1996_06_03:1.3
	MLWorks_Beta_1996_05_31:1.3
	MLWorks_Beta_1996_05_30:1.3;
locks; strict;
comment	@ *  @;


1.4
date	97.03.03.11.38.44;	author matthew;	state Exp;
branches
	1.4.1.1
	1.4.2.1
	1.4.3.1
	1.4.4.1;
next	1.3;

1.3
date	96.05.21.11.16.48;	author matthew;	state Exp;
branches
	1.3.1.1
	1.3.2.1
	1.3.3.1
	1.3.4.1
	1.3.5.1
	1.3.6.1
	1.3.7.1;
next	1.2;

1.2
date	96.05.17.09.39.07;	author matthew;	state Exp;
branches;
next	1.1;

1.1
date	96.05.15.13.06.27;	author jont;	state Exp;
branches;
next	;

1.3.1.1
date	96.09.13.11.09.56;	author hope;	state Exp;
branches;
next	;

1.3.2.1
date	96.10.07.16.00.49;	author hope;	state Exp;
branches;
next	;

1.3.3.1
date	96.10.17.11.19.04;	author hope;	state Exp;
branches;
next	;

1.3.4.1
date	96.11.14.12.42.38;	author hope;	state Exp;
branches
	1.3.4.1.1.1;
next	;

1.3.4.1.1.1
date	96.11.28.14.54.31;	author hope;	state Exp;
branches;
next	;

1.3.5.1
date	96.11.22.18.03.07;	author hope;	state Exp;
branches;
next	;

1.3.6.1
date	96.12.17.17.42.02;	author hope;	state Exp;
branches
	1.3.6.1.1.1;
next	;

1.3.6.1.1.1
date	97.02.24.11.30.24;	author hope;	state Exp;
branches;
next	;

1.3.7.1
date	96.12.18.09.35.59;	author hope;	state Exp;
branches;
next	;

1.4.1.1
date	97.05.12.10.28.07;	author hope;	state Exp;
branches
	1.4.1.1.1.1
	1.4.1.1.2.1
	1.4.1.1.3.1;
next	;

1.4.1.1.1.1
date	97.07.28.18.13.22;	author daveb;	state Exp;
branches
	1.4.1.1.1.1.1.1;
next	;

1.4.1.1.1.1.1.1
date	97.10.07.11.38.32;	author jkbrook;	state Exp;
branches;
next	;

1.4.1.1.2.1
date	97.09.08.17.06.44;	author daveb;	state Exp;
branches;
next	;

1.4.1.1.3.1
date	97.09.09.14.02.06;	author daveb;	state Exp;
branches;
next	;

1.4.2.1
date	97.09.10.19.16.30;	author brucem;	state Exp;
branches;
next	;

1.4.3.1
date	97.09.11.20.46.35;	author daveb;	state Exp;
branches;
next	;

1.4.4.1
date	99.04.01.17.52.14;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
@


1.4
log
@Removing eq attribute from elem
@
text
@(*  ==== INITIAL BASIS : MONO VECTORS ====
 *
 *  Copyright (C) 1995 Harlequin Ltd.
 *
 *  Implementation
 *  --------------
 *  The functor MonoVectors is implemented generically using standard
 *  MLWorks vectors.
 *
 *  This is part of the extended Initial Basis.
 *  
 *
 *  Revision Log
 *  ------------
 *  $Log: _mono_vector.sml,v $
 *  Revision 1.3  1996/05/21  11:16:48  matthew
 *  Updating
 *
 *  Revision 1.2  1996/05/17  09:39:07  matthew
 *  Moved Bits to MLWorks.Internal.Bits
 *
 *  Revision 1.1  1996/05/15  13:06:27  jont
 *  new unit
 *
 * Revision 1.2  1996/05/07  12:04:50  jont
 * Array moving to MLWorks.Array
 *
 * Revision 1.1  1996/04/18  11:38:12  jont
 * new unit
 *
 *  Revision 1.2  1996/03/20  14:58:20  matthew
 *  Changes for language revision
 *
 *  Revision 1.1  1995/03/22  20:23:51  brianm
 *  new unit
 *  New file.
 *
 *
 *)


require "mono_vector";
require "__vector";

functor MonoVector (type elem) : MONO_VECTOR =
   struct
     open Vector
     type elem = elem
     type vector = elem vector
   end

@


1.4.4.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a15 3
 *  Revision 1.4  1997/03/03  11:38:44  matthew
 *  Removing eq attribute from elem
 *
@


1.4.3.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a15 3
 *  Revision 1.4  1997/03/03  11:38:44  matthew
 *  Removing eq attribute from elem
 *
@


1.4.2.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a15 3
 *  Revision 1.4  1997/03/03  11:38:44  matthew
 *  Removing eq attribute from elem
 *
@


1.4.1.1
log
@branched from 1.4
@
text
@a15 3
 *  Revision 1.4  1997/03/03  11:38:44  matthew
 *  Removing eq attribute from elem
 *
@


1.4.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a15 3
 *  Revision 1.4.1.1  1997/05/12  10:28:07  hope
 *  branched from 1.4
 *
@


1.4.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a15 3
 *  Revision 1.4.1.1  1997/05/12  10:28:07  hope
 *  branched from 1.4
 *
@


1.4.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a15 3
 *  Revision 1.4.1.1  1997/05/12  10:28:07  hope
 *  branched from 1.4
 *
@


1.4.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a15 3
 *  Revision 1.4.1.1.1.1  1997/07/28  18:13:22  daveb
 *  branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.3
log
@Updating
@
text
@d16 3
d45 1
a45 1
functor MonoVector (eqtype elem) : MONO_VECTOR =
@


1.3.7.1
log
@branched from 1.3
@
text
@a15 3
 *  Revision 1.3  1996/05/21  11:16:48  matthew
 *  Updating
 *
@


1.3.6.1
log
@branched from 1.3
@
text
@a15 3
 *  Revision 1.3  1996/05/21  11:16:48  matthew
 *  Updating
 *
@


1.3.6.1.1.1
log
@branched from 1.3.6.1
@
text
@a15 3
 *  Revision 1.3.6.1  1996/12/17  17:42:02  hope
 *  branched from 1.3
 *
@


1.3.5.1
log
@branched from 1.3
@
text
@a15 3
 *  Revision 1.3  1996/05/21  11:16:48  matthew
 *  Updating
 *
@


1.3.4.1
log
@branched from 1.3
@
text
@a15 3
 *  Revision 1.3  1996/05/21  11:16:48  matthew
 *  Updating
 *
@


1.3.4.1.1.1
log
@branched from 1.3.4.1
@
text
@a15 3
 *  Revision 1.3.4.1  1996/11/14  12:42:38  hope
 *  branched from 1.3
 *
@


1.3.3.1
log
@branched from 1.3
@
text
@a15 3
 *  Revision 1.3  1996/05/21  11:16:48  matthew
 *  Updating
 *
@


1.3.2.1
log
@branched from 1.3
@
text
@a15 3
 *  Revision 1.3  1996/05/21  11:16:48  matthew
 *  Updating
 *
@


1.3.1.1
log
@branched from 1.3
@
text
@a15 3
 *  Revision 1.3  1996/05/21  11:16:48  matthew
 *  Updating
 *
@


1.2
log
@Moved Bits to MLWorks.Internal.Bits
@
text
@d16 3
d40 1
a40 1
require "general";
d42 1
a42 4
functor MonoVectors(
   eqtype element
   structure General : GENERAL
) : MONO_VECTOR =
d44 4
a48 63
    structure Bits = MLWorks.Internal.Bits

    fun pow2(n) = Bits.lshift(1,n)

    val vector_vec    = MLWorks.Internal.Vector.vector
    val sub_vec       = MLWorks.Internal.Vector.sub
    val length_vec    = MLWorks.Internal.Vector.length
    val tabulate_vec  = MLWorks.Internal.Vector.tabulate

    type elem = element
    type vector = element MLWorks.Internal.Vector.vector

    exception Subscript = General.Subscript

    val maxlen : int = pow2(28)

  (* vector creation functions *)
    val vector   : elem list -> vector              = vector_vec
    val tabulate : (int * (int -> elem)) -> vector  = tabulate_vec

    val length   : vector -> int                    = length_vec
    val sub      : (vector * int) -> elem           = sub_vec

    local

       val MLWcast = MLWorks.Internal.Value.cast

       val unsafe_array_sub  = MLWorks.Internal.Value.unsafe_array_sub
       val unsafe_vector_sub : (vector * int) -> elem =
           MLWcast(unsafe_array_sub)

       fun extract'(vec : vector, si, len, accum) =
           let fun getlst(0,_,lst) = lst
                 | getlst(i,n,lst) =
		   getlst(i-1,n+1,unsafe_vector_sub(vec,n)::lst)
           in
               getlst(len,si,accum)
           end

    in

       fun extract(vec : vector, si, len) =
	   let val size = length(vec)
	   in
	       if ((0 <= si)  andalso
		   (0 <= len) andalso
		   (si + len < size)
		  )
	       then vector(rev(extract'(vec,si,len,[])))
	       else raise Subscript
	   end

       fun concat(v_lst) =
           let fun veccat([],lst) = lst
                 | veccat(vec::vl,lst) =
		   veccat(vl,extract'(vec,0,length(vec),lst))
           in
               vector(rev(veccat(v_lst,[])))
           end

    end

   end;
@


1.1
log
@new unit
@
text
@d15 4
a18 1
 *  $Log: _mono_vectors.sml,v $
d44 2
@
