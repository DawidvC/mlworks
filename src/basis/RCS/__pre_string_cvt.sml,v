head	1.7;
access;
symbols
	MLW_daveb_inline_1_4_99:1.7.1
	MLWorks_21c0_1999_03_25:1.7
	MLWorks_20c1_1998_08_20:1.6
	MLWorks_20c0_1998_08_04:1.6
	MLWorks_20b2c2_1998_06_19:1.6
	MLWorks_20b2_Windows_1998_06_12:1.6
	MLWorks_20b1c1_1998_05_07:1.6
	MLWorks_20b0_1998_04_07:1.6
	MLWorks_20b0_1998_03_20:1.6
	MLWorks_20m2_1998_02_16:1.5
	MLWorks_20m1_1997_10_23:1.5
	MLWorks_11r1:1.5.1.1.1.1.1
	MLWorks_workspace_97:1.5.3
	MLWorks_dt_wizard:1.5.2
	MLWorks_11c0_1997_09_09:1.5.1.1.1.1
	MLWorks_10r3:1.5.1.1.3
	MLWorks_10r2_551:1.5.1.1.2
	MLWorks_11:1.5.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.5.1.1
	MLWorks_20m0_1997_06_20:1.5
	MLWorks_1_0_r2c2_1997_06_14:1.5.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.5.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.5.1
	MLWorks_BugFix_1997_04_24:1.5
	MLWorks_1_0_r2_Win32_1997_04_11:1.5
	MLWorks_1_0_r2_Unix_1997_04_04:1.5
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.2.5.1.1
	MLWorks_gui_1996_12_18:1.2.6
	MLWorks_1_0_Win32_1996_12_17:1.2.5
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.2.3.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.2.3.1
	MLWorks_1_0_Irix_1996_11_28:1.2.3.1.1
	MLWorks_1_0_Win32_1996_11_22:1.2.4
	MLWorks_1_0_Unix_1996_11_14:1.2.3
	MLWorks_Open_Beta2_1996_10_11:1.2.2
	MLWorks_License_dev:1.2.1
	MLWorks_1_open_beta_1996_09_13:1.1.1
	MLWorks_Open_Beta_1996_08_22:1.1
	MLWorks_Beta_1996_07_02:1.1
	MLWorks_Beta_1996_06_07:1.1
	MLWorks_Beta_1996_06_06:1.1
	MLWorks_Beta_1996_06_05:1.1;
locks; strict;
comment	@ *  @;


1.7
date	99.02.17.14.38.43;	author mitchell;	state Exp;
branches
	1.7.1.1;
next	1.6;

1.6
date	98.02.19.16.15.03;	author mitchell;	state Exp;
branches;
next	1.5;

1.5
date	97.03.06.16.23.03;	author jont;	state Exp;
branches
	1.5.1.1
	1.5.2.1
	1.5.3.1;
next	1.4;

1.4
date	97.02.20.14.09.19;	author matthew;	state Exp;
branches;
next	1.3;

1.3
date	96.12.18.12.29.28;	author matthew;	state Exp;
branches;
next	1.2;

1.2
date	96.10.03.14.40.54;	author io;	state Exp;
branches
	1.2.1.1
	1.2.2.1
	1.2.3.1
	1.2.4.1
	1.2.5.1
	1.2.6.1;
next	1.1;

1.1
date	96.06.04.15.15.47;	author io;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.09.13.11.09.55;	author hope;	state Exp;
branches;
next	;

1.2.1.1
date	96.10.07.16.00.48;	author hope;	state Exp;
branches;
next	;

1.2.2.1
date	96.10.17.11.19.03;	author hope;	state Exp;
branches;
next	;

1.2.3.1
date	96.11.14.12.42.37;	author hope;	state Exp;
branches
	1.2.3.1.1.1;
next	;

1.2.3.1.1.1
date	96.11.28.14.54.30;	author hope;	state Exp;
branches;
next	;

1.2.4.1
date	96.11.22.18.03.06;	author hope;	state Exp;
branches;
next	;

1.2.5.1
date	96.12.17.17.42.01;	author hope;	state Exp;
branches
	1.2.5.1.1.1;
next	;

1.2.5.1.1.1
date	97.02.24.11.30.23;	author hope;	state Exp;
branches;
next	;

1.2.6.1
date	96.12.18.09.35.58;	author hope;	state Exp;
branches;
next	;

1.5.1.1
date	97.05.12.10.28.04;	author hope;	state Exp;
branches
	1.5.1.1.1.1
	1.5.1.1.2.1
	1.5.1.1.3.1;
next	;

1.5.1.1.1.1
date	97.07.28.18.13.20;	author daveb;	state Exp;
branches
	1.5.1.1.1.1.1.1;
next	;

1.5.1.1.1.1.1.1
date	97.10.07.11.38.31;	author jkbrook;	state Exp;
branches;
next	;

1.5.1.1.2.1
date	97.09.08.17.06.42;	author daveb;	state Exp;
branches;
next	;

1.5.1.1.3.1
date	97.09.09.14.02.05;	author daveb;	state Exp;
branches;
next	;

1.5.2.1
date	97.09.10.19.16.28;	author brucem;	state Exp;
branches;
next	;

1.5.3.1
date	97.09.11.20.46.33;	author daveb;	state Exp;
branches;
next	;

1.7.1.1
date	99.04.01.17.52.13;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
stringcvt->string_cvt
@


1.7
log
@[Bug #190507]
Modify to satisfy CM constraints.
@
text
@(*  ==== INITIAL BASIS : Unconstrinaed StringCvt structure ====
 *
 *  Copyright (C) 1996 Harlequin Ltd.
 *
 *  Description
 *  -----------
 *  This is part of the extended Initial Basis.
 *
 *  $Log: __pre_string_cvt.sml,v $
 *  Revision 1.6  1998/02/19  16:15:03  mitchell
 *  [Bug #30349]
 *  Fix to avoid non-unit sequence warnings
 *
 *  Revision 1.5  1997/03/06  16:23:03  jont
 *  [Bug #1938]
 *  Remove uses of global usafe stuff from __pre_basis
 *
 *  Revision 1.4  1997/02/20  14:09:19  matthew
 *  Adding EXACT to realfmt
 *
 *  Revision 1.3  1996/12/18  12:29:28  matthew
 *  Adding PreStringCvt structure
 *
 *  Revision 1.2  1996/10/03  14:40:54  io
 *  [Bug #1614]
 *  remove redundant requires
 *
 *  Revision 1.1  1996/06/04  15:15:47  io
 *  new unit
 *  stringcvt->string_cvt
 *
 *)
require "__pre_basis";
structure PreStringCvt = 
  struct
    datatype radix = BIN | OCT | DEC | HEX
    datatype realfmt = 
      EXACT
    | SCI of int option
    | FIX of int option
    | GEN of int option
      
    type cs = int
    type ('a,'b) reader = 'b -> ('a * 'b) option
      
    (* copy src string from indices src_x to src_y inclusive to dest_x offset in dest string *)
    fun copyFrom (src, dest, src_x, src_y, dest_x) = 
      let
        fun aux x = 
          if x <= src_y then
            (MLWorks.Internal.Value.unsafe_string_update 
             (dest, x+dest_x, MLWorks.String.ordof(src, x));
             aux (x+1))
          else
            dest
      in
        aux src_x
      end
    (* copy src char to a string at its x and y indices inclusive *)
    fun fillFrom (c:char, dest:string, dest_x:int, dest_y:int) =
      let fun aux i = 
        if i <= dest_y then
          (MLWorks.Internal.Value.unsafe_string_update (dest, i, ord c);
           aux (i+1))
        else dest
      in
        aux dest_x
      end
    fun padLeft (c:char) (i:int) (s:string) : string = 
      let
        val size = size s
        val pad = i - size
      in
        if pad > 0 then
          let val alloc_s = PreBasis.alloc_string (i+1)
          in
            ignore(fillFrom (c, alloc_s, 0, pad-1));
            ignore(copyFrom (s, alloc_s, 0, size-1, pad)); 
            alloc_s
          end
        else
          s
      end
    fun padRight (c:char) (i:int) (s:string) : string = 
      let
        val size = size s
        val pad = i - size
      in
        if pad > 0 then
          let
            val alloc_s = PreBasis.alloc_string(i+1)
          in
            ignore(copyFrom (s, alloc_s, 0, size-1, 0)); 
            ignore(fillFrom (c, alloc_s, size, i-1));
            alloc_s
          end
        else
          s
      end
    
    fun scanList f (cs:char list) = 
      let fun aux ([]:char list) = NONE
            | aux (c::cs) = SOME (c, cs)
      in
        case f aux cs of
          SOME (c,_) => SOME c
        | NONE => NONE
      end
    fun scanString f (s:string) = 
      let val size = size s
        fun aux i = 
          if i < size then
            SOME (chr(MLWorks.String.ordof(s, i)), i+1)
          else
            NONE
      in
        case f aux 0 of
          SOME (x,_) => SOME x
        | NONE => NONE
      end
    fun skipWS f s = 
      let fun aux cs = 
        case f cs of
          SOME (c, cs') =>
            if PreBasis.isSpace c then
              aux cs'
            else
              cs
        | NONE => cs
      in
        aux s
      end
    fun dropl p f src = 
      let
        fun aux cs = 
          case f cs of
            SOME (c, cs') =>
              if p c then
                aux cs'
              else
                cs
          | NONE => cs
      in
        aux src
      end
    fun splitl (p:char -> bool) f src = 
      let
        fun aux (acc, cs) = 
          case f cs of
            SOME (c, cs') => 
              if p c then
                aux (c::acc, cs')
              else
                (PreBasis.revImplode acc, cs)
          | NONE => (PreBasis.revImplode acc, cs)
      in
        aux ([], src)
      end
    fun takel p f src =
      let
        fun aux (acc, cs) = 
          case f cs of
            SOME (c, cs) => 
              if p c then 
                aux (c::acc, cs)
              else
                acc
          | NONE => acc
      in
        PreBasis.revImplode (aux ([], src))
      end
    
    fun getNChar (n:int) getc cs = 
      let 
        fun aux (i, acc, cs) =
          if i < n then
            (case getc cs of
               SOME (c, cs) => aux (i+1, c::acc, cs)
             | NONE => ([], cs))
          else
            (acc, cs)
      in
        case aux (0, [], cs) of
          ([], _) => NONE
        | (acc, cs) => SOME (rev acc, cs)
      end
    fun splitlN (n:int) (p:char -> bool) getc cs = 
      let
        fun aux (count, acc, cs) = 
          if count < n then
            (case getc cs of
               SOME (c, cs') => 
                 if p c then 
                   aux (count+1, c::acc, cs')
                 else
                   (PreBasis.revImplode acc, cs)
             | NONE => (PreBasis.revImplode acc, cs))
          else
            (PreBasis.revImplode acc, cs)
      in
        aux (0, [], cs)
      end
    fun splitlNC (n:int) (p:char -> bool) (f:char -> char)  getc cs = 
      let fun aux (count, acc, cs) = 
        if count < n then
          (case getc cs of
             SOME (c, cs') =>
               if p c then
                 aux (count+1, f c::acc, cs')
               else
                 (acc, cs)
           | NONE => (rev acc, cs))
        else
          (rev acc, cs)
      in
        aux (0, [], cs)
      end
  end (* StringCvt *)

@


1.7.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a9 4
 *  Revision 1.7  1999/02/17  14:38:43  mitchell
 *  [Bug #190507]
 *  Modify to satisfy CM constraints.
 *
@


1.6
log
@[Bug #30349]
Fix to avoid non-unit sequence warnings
@
text
@d10 4
d34 1
a34 1
structure StringCvt = 
a219 1
structure PreStringCvt = StringCvt
@


1.5
log
@[Bug #1938]
Remove uses of global usafe stuff from __pre_basis
@
text
@d10 4
d73 2
a74 2
            fillFrom (c, alloc_s, 0, pad-1);
            copyFrom (s, alloc_s, 0, size-1, pad); 
d89 2
a90 2
            copyFrom (s, alloc_s, 0, size-1, 0); 
            fillFrom (c, alloc_s, size, i-1);
@


1.5.3.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a9 4
 *  Revision 1.5  1997/03/06  16:23:03  jont
 *  [Bug #1938]
 *  Remove uses of global usafe stuff from __pre_basis
 *
@


1.5.2.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a9 4
 *  Revision 1.5  1997/03/06  16:23:03  jont
 *  [Bug #1938]
 *  Remove uses of global usafe stuff from __pre_basis
 *
@


1.5.1.1
log
@branched from 1.5
@
text
@a9 4
 *  Revision 1.5  1997/03/06  16:23:03  jont
 *  [Bug #1938]
 *  Remove uses of global usafe stuff from __pre_basis
 *
@


1.5.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a9 3
 *  Revision 1.5.1.1  1997/05/12  10:28:04  hope
 *  branched from 1.5
 *
@


1.5.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a9 3
 *  Revision 1.5.1.1  1997/05/12  10:28:04  hope
 *  branched from 1.5
 *
@


1.5.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a9 3
 *  Revision 1.5.1.1  1997/05/12  10:28:04  hope
 *  branched from 1.5
 *
@


1.5.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a9 3
 *  Revision 1.5.1.1.1.1  1997/07/28  18:13:20  daveb
 *  branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.4
log
@Adding EXACT to realfmt
@
text
@d10 3
d43 2
a44 2
            (unsafe_string_update 
             (dest, x+dest_x, unsafe_string_sub (src, x));
d55 1
a55 1
          (unsafe_string_char_update (dest, i, c);
d67 1
a67 1
          let val alloc_s = alloc_string (i+1)
d83 1
a83 1
            val alloc_s = alloc_string (i+1)
d105 1
a105 1
            SOME (unsafe_string_char_sub (s, i), i+1)
d117 1
a117 1
            if isSpace c then
d146 2
a147 2
                (revImplode acc, cs)
          | NONE => (revImplode acc, cs)
d162 1
a162 1
        revImplode (aux ([], src))
d188 2
a189 2
                   (revImplode acc, cs)
             | NONE => (revImplode acc, cs))
d191 1
a191 1
            (revImplode acc, cs)
@


1.3
log
@Adding PreStringCvt structure
@
text
@d10 3
d27 2
a28 1
      SCI of int option
@


1.2
log
@[Bug #1614]
remove redundant requires
@
text
@d10 4
d204 2
@


1.2.6.1
log
@branched from 1.2
@
text
@a9 4
 *  Revision 1.2  1996/10/03  14:40:54  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.2.5.1
log
@branched from 1.2
@
text
@a9 4
 *  Revision 1.2  1996/10/03  14:40:54  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.2.5.1.1.1
log
@branched from 1.2.5.1
@
text
@a9 3
 *  Revision 1.2.5.1  1996/12/17  17:42:01  hope
 *  branched from 1.2
 *
@


1.2.4.1
log
@branched from 1.2
@
text
@a9 4
 *  Revision 1.2  1996/10/03  14:40:54  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.2.3.1
log
@branched from 1.2
@
text
@a9 4
 *  Revision 1.2  1996/10/03  14:40:54  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.2.3.1.1.1
log
@branched from 1.2.3.1
@
text
@a9 3
 *  Revision 1.2.3.1  1996/11/14  12:42:37  hope
 *  branched from 1.2
 *
@


1.2.2.1
log
@branched from 1.2
@
text
@a9 4
 *  Revision 1.2  1996/10/03  14:40:54  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.2.1.1
log
@branched from 1.2
@
text
@a9 4
 *  Revision 1.2  1996/10/03  14:40:54  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.1
log
@new unit
stringcvt->string_cvt
@
text
@d9 5
a13 1
 *  $Log$
a14 1
require "toplevel";
@


1.1.1.1
log
@branched from 1.1
@
text
@d9 1
a9 5
 *  $Log: __pre_string_cvt.sml,v $
 *  Revision 1.1  1996/06/04  15:15:47  io
 *  new unit
 *  stringcvt->string_cvt
 *
@
