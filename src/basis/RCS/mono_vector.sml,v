head	1.6;
access;
symbols
	MLW_daveb_inline_1_4_99:1.6.1
	MLWorks_21c0_1999_03_25:1.6
	MLWorks_20c1_1998_08_20:1.5
	MLWorks_20c0_1998_08_04:1.5
	MLWorks_20b2c2_1998_06_19:1.5
	MLWorks_20b2_Windows_1998_06_12:1.5
	MLWorks_20b1c1_1998_05_07:1.5
	MLWorks_20b0_1998_04_07:1.5
	MLWorks_20b0_1998_03_20:1.5
	MLWorks_20m2_1998_02_16:1.5
	MLWorks_20m1_1997_10_23:1.5
	MLWorks_11r1:1.4.1.1.1.2.1
	MLWorks_workspace_97:1.5.2
	MLWorks_dt_wizard:1.5.1
	MLWorks_11c0_1997_09_09:1.4.1.1.1.2
	MLWorks_10r3:1.4.1.1.3
	MLWorks_10r2_551:1.4.1.1.2
	MLWorks_11:1.4.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.4.1.1
	MLWorks_20m0_1997_06_20:1.4
	MLWorks_1_0_r2c2_1997_06_14:1.4.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.4.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.4.1
	MLWorks_BugFix_1997_04_24:1.4
	MLWorks_1_0_r2_Win32_1997_04_11:1.4
	MLWorks_1_0_r2_Unix_1997_04_04:1.4
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.3.5.1.1
	MLWorks_gui_1996_12_18:1.3.6
	MLWorks_1_0_Win32_1996_12_17:1.3.5
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.3.3.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.3.3.1
	MLWorks_1_0_Irix_1996_11_28:1.3.3.1.1
	MLWorks_1_0_Win32_1996_11_22:1.3.4
	MLWorks_1_0_Unix_1996_11_14:1.3.3
	MLWorks_Open_Beta2_1996_10_11:1.3.2
	MLWorks_License_dev:1.3.1
	MLWorks_1_open_beta_1996_09_13:1.2.1
	MLWorks_Open_Beta_1996_08_22:1.2
	MLWorks_Beta_1996_07_02:1.2
	MLWorks_Beta_1996_06_07:1.2
	MLWorks_Beta_1996_06_06:1.2
	MLWorks_Beta_1996_06_05:1.2
	MLWorks_Beta_1996_06_03:1.2
	MLWorks_Beta_1996_05_31:1.2
	MLWorks_Beta_1996_05_30:1.2;
locks; strict;
comment	@ *  @;


1.6
date	98.11.13.10.32.10;	author mitchell;	state Exp;
branches
	1.6.1.1;
next	1.5;

1.5
date	97.08.08.10.19.39;	author brucem;	state Exp;
branches
	1.5.1.1
	1.5.2.1;
next	1.4;

1.4
date	97.01.29.17.22.15;	author andreww;	state Exp;
branches
	1.4.1.1;
next	1.3;

1.3
date	96.10.03.15.22.14;	author io;	state Exp;
branches
	1.3.1.1
	1.3.2.1
	1.3.3.1
	1.3.4.1
	1.3.5.1
	1.3.6.1;
next	1.2;

1.2
date	96.05.17.14.17.15;	author matthew;	state Exp;
branches
	1.2.1.1;
next	1.1;

1.1
date	96.04.18.11.44.20;	author jont;	state Exp;
branches;
next	;

1.2.1.1
date	96.09.13.11.10.26;	author hope;	state Exp;
branches;
next	;

1.3.1.1
date	96.10.07.16.01.13;	author hope;	state Exp;
branches;
next	;

1.3.2.1
date	96.10.17.11.19.28;	author hope;	state Exp;
branches;
next	;

1.3.3.1
date	96.11.14.12.43.01;	author hope;	state Exp;
branches
	1.3.3.1.1.1;
next	;

1.3.3.1.1.1
date	96.11.28.14.54.56;	author hope;	state Exp;
branches;
next	;

1.3.4.1
date	96.11.22.18.03.31;	author hope;	state Exp;
branches;
next	;

1.3.5.1
date	96.12.17.17.42.26;	author hope;	state Exp;
branches
	1.3.5.1.1.1;
next	;

1.3.5.1.1.1
date	97.02.24.11.30.57;	author hope;	state Exp;
branches;
next	;

1.3.6.1
date	96.12.18.09.36.25;	author hope;	state Exp;
branches;
next	;

1.4.1.1
date	97.05.12.10.28.37;	author hope;	state Exp;
branches
	1.4.1.1.1.1
	1.4.1.1.2.1
	1.4.1.1.3.1;
next	;

1.4.1.1.1.1
date	97.07.28.18.13.23;	author daveb;	state Exp;
branches;
next	1.4.1.1.1.2;

1.4.1.1.1.2
date	97.08.12.08.48.49;	author johnh;	state Exp;
branches
	1.4.1.1.1.2.1.1;
next	;

1.4.1.1.1.2.1.1
date	97.10.07.11.38.33;	author jkbrook;	state Exp;
branches;
next	;

1.4.1.1.2.1
date	97.09.08.17.06.45;	author daveb;	state Exp;
branches;
next	;

1.4.1.1.3.1
date	97.09.09.14.02.07;	author daveb;	state Exp;
branches;
next	;

1.5.1.1
date	97.09.10.19.16.31;	author brucem;	state Exp;
branches;
next	;

1.5.2.1
date	97.09.11.20.46.36;	author daveb;	state Exp;
branches;
next	;

1.6.1.1
date	99.04.01.17.51.46;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
@


1.6
log
@[Bug #70225]
Add a variant of the signature where the vector type admits equality
@
text
@(*  ==== INITIAL BASIS : MONO-VECTORS ====
 *
 *  Copyright (C) 1995 Harlequin Ltd.
 *
 *  Description
 *  -----------
 *  This is part of the extended Initial Basis.
 *
 *  Revision Log
 *  ------------
 *  $Log: mono_vector.sml,v $
 *  Revision 1.5  1997/08/08  10:19:39  brucem
 *  [Bug #30086]
 *  Add map and mapi.
 *
 *  Revision 1.4  1997/01/29  17:22:15  andreww
 *  [Bug #1904]
 *  elem type no longer an equality type
 *
 *  Revision 1.3  1996/10/03  15:22:14  io
 *  [Bug #1614]
 *  remove redundant requires
 *
 *  Revision 1.2  1996/05/17  14:17:15  matthew
 *  Updating
 *
 *  Revision 1.1  1996/04/18  11:44:20  jont
 *  new unit
 *
 * Revision 1.1  1996/04/18  11:44:20  jont
 * new unit
 *
 *  Revision 1.2  1995/03/18  18:37:05  brianm
 *  Made all types into eqtypes (as per the current draft).
 *
 * Revision 1.1  1995/03/16  21:18:41  brianm
 * new unit
 *renamed from mono_vectors.sml
 *
 *)

signature MONO_VECTOR =
  sig

    type elem
    type vector

    val maxLen : int
    val fromList : elem list -> vector
    val tabulate : (int * (int -> elem)) -> vector

    val length   : vector -> int
    val sub      : (vector * int) -> elem
    val extract  : (vector * int * int option) -> vector
    val concat   : vector list -> vector

    val appi : ((int * elem) -> unit) -> (vector * int * int option) -> unit
    val app : (elem -> unit) -> vector -> unit

    val foldli : ((int * elem * 'a) -> 'a) -> 'a -> (vector * int * int option)
                 -> 'a
    val foldri : ((int * elem * 'a) -> 'a) -> 'a -> (vector * int * int option)
                 -> 'a
    val foldl : ((elem * 'a) -> 'a) -> 'a -> vector -> 'a
    val foldr : ((elem * 'a) -> 'a) -> 'a -> vector -> 'a

    val map  : (elem -> elem) -> vector -> vector
    val mapi : (int * elem -> elem) -> vector * int * int option -> vector

  end

signature EQ_MONO_VECTOR =
  sig

    eqtype elem
    eqtype vector

    val maxLen : int
    val fromList : elem list -> vector
    val tabulate : (int * (int -> elem)) -> vector

    val length   : vector -> int
    val sub      : (vector * int) -> elem
    val extract  : (vector * int * int option) -> vector
    val concat   : vector list -> vector

    val appi : ((int * elem) -> unit) -> (vector * int * int option) -> unit
    val app : (elem -> unit) -> vector -> unit

    val foldli : ((int * elem * 'a) -> 'a) -> 'a -> (vector * int * int option)
                 -> 'a
    val foldri : ((int * elem * 'a) -> 'a) -> 'a -> (vector * int * int option)
                 -> 'a
    val foldl : ((elem * 'a) -> 'a) -> 'a -> vector -> 'a
    val foldr : ((elem * 'a) -> 'a) -> 'a -> vector -> 'a

    val map  : (elem -> elem) -> vector -> vector
    val mapi : (int * elem -> elem) -> vector * int * int option -> vector

  end

@


1.6.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a11 4
 *  Revision 1.6  1998/11/13  10:32:10  mitchell
 *  [Bug #70225]
 *  Add a variant of the signature where the vector type admits equality
 *
@


1.5
log
@[Bug #30086]
Add map and mapi.
@
text
@d12 4
d47 30
@


1.5.2.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a11 4
 *  Revision 1.5  1997/08/08  10:19:39  brucem
 *  [Bug #30086]
 *  Add map and mapi.
 *
@


1.5.1.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a11 4
 *  Revision 1.5  1997/08/08  10:19:39  brucem
 *  [Bug #30086]
 *  Add map and mapi.
 *
@


1.4
log
@[Bug #1904]
elem type no longer an equality type
@
text
@d12 4
d56 4
a59 2
    val foldli : ((int * elem * 'a) -> 'a) -> 'a -> (vector * int * int option) -> 'a
    val foldri : ((int * elem * 'a) -> 'a) -> 'a -> (vector * int * int option) -> 'a
d63 3
d67 1
@


1.4.1.1
log
@branched from 1.4
@
text
@a11 4
 *  Revision 1.4  1997/01/29  17:22:15  andreww
 *  [Bug #1904]
 *  elem type no longer an equality type
 *
@


1.4.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a11 3
 *  Revision 1.4.1.1  1997/05/12  10:28:37  hope
 *  branched from 1.4
 *
@


1.4.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a11 3
 *  Revision 1.4.1.1  1997/05/12  10:28:37  hope
 *  branched from 1.4
 *
@


1.4.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a11 3
 *  Revision 1.4.1.1  1997/05/12  10:28:37  hope
 *  branched from 1.4
 *
@


1.4.1.1.1.2
log
@[Bug #30086]
Merging - add map and mapi.
@
text
@a11 3
 *  Revision 1.4.1.1.1.1  1997/07/28  18:13:23  daveb
 *  branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
d59 2
a60 4
    val foldli : ((int * elem * 'a) -> 'a) -> 'a -> (vector * int * int option)
                 -> 'a
    val foldri : ((int * elem * 'a) -> 'a) -> 'a -> (vector * int * int option)
                 -> 'a
a63 3
    val map  : (elem -> elem) -> vector -> vector
    val mapi : (int * elem -> elem) -> vector * int * int option -> vector

a64 1

@


1.4.1.1.1.2.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a11 4
 *  Revision 1.4.1.1.1.2  1997/08/12  08:48:49  johnh
 *  [Bug #30086]
 *  Merging - add map and mapi.
 *
@


1.3
log
@[Bug #1614]
remove redundant requires
@
text
@d12 4
d37 2
a38 2
    eqtype elem
    eqtype vector
@


1.3.6.1
log
@branched from 1.3
@
text
@a11 4
 *  Revision 1.3  1996/10/03  15:22:14  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.3.5.1
log
@branched from 1.3
@
text
@a11 4
 *  Revision 1.3  1996/10/03  15:22:14  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.3.5.1.1.1
log
@branched from 1.3.5.1
@
text
@a11 3
 *  Revision 1.3.5.1  1996/12/17  17:42:26  hope
 *  branched from 1.3
 *
@


1.3.4.1
log
@branched from 1.3
@
text
@a11 4
 *  Revision 1.3  1996/10/03  15:22:14  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.3.3.1
log
@branched from 1.3
@
text
@a11 4
 *  Revision 1.3  1996/10/03  15:22:14  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.3.3.1.1.1
log
@branched from 1.3.3.1
@
text
@a11 3
 *  Revision 1.3.3.1  1996/11/14  12:43:01  hope
 *  branched from 1.3
 *
@


1.3.2.1
log
@branched from 1.3
@
text
@a11 4
 *  Revision 1.3  1996/10/03  15:22:14  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.3.1.1
log
@branched from 1.3
@
text
@a11 4
 *  Revision 1.3  1996/10/03  15:22:14  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.2
log
@Updating
@
text
@d12 3
a28 2

require "toplevel";
@


1.2.1.1
log
@branched from 1.2
@
text
@a11 3
 *  Revision 1.2  1996/05/17  14:17:15  matthew
 *  Updating
 *
@


1.1
log
@new unit
@
text
@d11 4
a14 1
 *  $Log: mono_vectors.sml,v $
d27 2
d35 2
a36 4
    val maxlen : int

  (* vector creation functions *)
    val vector   : elem list -> vector
d41 1
a41 1
    val extract  : (vector * int * int) -> vector
d43 8
@
