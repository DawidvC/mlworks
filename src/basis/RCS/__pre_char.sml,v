head	1.18;
access;
symbols
	MLW_daveb_inline_1_4_99:1.18.1
	MLWorks_21c0_1999_03_25:1.18
	MLWorks_20c1_1998_08_20:1.17
	MLWorks_20c0_1998_08_04:1.17
	MLWorks_20b2c2_1998_06_19:1.17
	MLWorks_20b2_Windows_1998_06_12:1.17
	MLWorks_20b1c1_1998_05_07:1.17
	MLWorks_20b0_1998_04_07:1.16
	MLWorks_20b0_1998_03_20:1.16
	MLWorks_20m2_1998_02_16:1.16
	MLWorks_20m1_1997_10_23:1.16
	MLWorks_11r1:1.16.1.1.1.1.1
	MLWorks_workspace_97:1.16.3
	MLWorks_dt_wizard:1.16.2
	MLWorks_11c0_1997_09_09:1.16.1.1.1.1
	MLWorks_10r3:1.16.1.1.3
	MLWorks_10r2_551:1.16.1.1.2
	MLWorks_11:1.16.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.16.1.1
	MLWorks_20m0_1997_06_20:1.16
	MLWorks_1_0_r2c2_1997_06_14:1.16.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.16.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.16.1
	MLWorks_BugFix_1997_04_24:1.16
	MLWorks_1_0_r2_Win32_1997_04_11:1.16
	MLWorks_1_0_r2_Unix_1997_04_04:1.16
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.13.3.1.1
	MLWorks_gui_1996_12_18:1.13.4
	MLWorks_1_0_Win32_1996_12_17:1.13.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.13.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.13.1.1
	MLWorks_1_0_Irix_1996_11_28:1.13.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.13.2
	MLWorks_1_0_Unix_1996_11_14:1.13.1
	MLWorks_Open_Beta2_1996_10_11:1.12.2
	MLWorks_License_dev:1.12.1
	MLWorks_1_open_beta_1996_09_13:1.9.1
	MLWorks_Open_Beta_1996_08_22:1.9
	MLWorks_Beta_1996_07_02:1.9
	MLWorks_Beta_1996_06_03:1.7
	MLWorks_Beta_1996_05_31:1.7
	MLWorks_Beta_1996_05_30:1.6;
locks; strict;
comment	@ *  @;


1.18
date	99.02.17.14.34.34;	author mitchell;	state Exp;
branches
	1.18.1.1;
next	1.17;

1.17
date	98.04.15.16.20.40;	author mitchell;	state Exp;
branches;
next	1.16;

1.16
date	97.03.10.13.43.18;	author jont;	state Exp;
branches
	1.16.1.1
	1.16.2.1
	1.16.3.1;
next	1.15;

1.15
date	97.03.06.16.34.51;	author jont;	state Exp;
branches;
next	1.14;

1.14
date	96.12.18.13.07.08;	author matthew;	state Exp;
branches;
next	1.13;

1.13
date	96.11.06.10.48.10;	author matthew;	state Exp;
branches
	1.13.1.1
	1.13.2.1
	1.13.3.1
	1.13.4.1;
next	1.12;

1.12
date	96.10.03.14.52.47;	author io;	state Exp;
branches
	1.12.1.1
	1.12.2.1;
next	1.11;

1.11
date	96.10.02.17.16.48;	author io;	state Exp;
branches;
next	1.10;

1.10
date	96.10.01.13.11.52;	author io;	state Exp;
branches;
next	1.9;

1.9
date	96.07.01.16.33.04;	author io;	state Exp;
branches
	1.9.1.1;
next	1.8;

1.8
date	96.06.24.20.28.32;	author io;	state Exp;
branches;
next	1.7;

1.7
date	96.05.30.11.21.46;	author daveb;	state Exp;
branches;
next	1.6;

1.6
date	96.05.23.12.10.18;	author io;	state Exp;
branches;
next	1.5;

1.5
date	96.05.22.09.43.09;	author io;	state Exp;
branches;
next	1.4;

1.4
date	96.05.16.16.27.59;	author matthew;	state Exp;
branches;
next	1.3;

1.3
date	96.05.14.20.46.51;	author io;	state Exp;
branches;
next	1.2;

1.2
date	96.05.13.13.15.10;	author io;	state Exp;
branches;
next	1.1;

1.1
date	96.05.07.21.08.40;	author io;	state Exp;
branches;
next	;

1.9.1.1
date	96.09.13.11.10.20;	author hope;	state Exp;
branches;
next	;

1.12.1.1
date	96.10.07.16.01.08;	author hope;	state Exp;
branches;
next	;

1.12.2.1
date	96.10.17.11.19.23;	author hope;	state Exp;
branches;
next	;

1.13.1.1
date	96.11.14.12.42.55;	author hope;	state Exp;
branches
	1.13.1.1.1.1;
next	;

1.13.1.1.1.1
date	96.11.28.14.54.49;	author hope;	state Exp;
branches;
next	;

1.13.2.1
date	96.11.22.18.03.25;	author hope;	state Exp;
branches;
next	;

1.13.3.1
date	96.12.17.17.42.19;	author hope;	state Exp;
branches
	1.13.3.1.1.1;
next	;

1.13.3.1.1.1
date	97.02.24.11.30.50;	author hope;	state Exp;
branches;
next	;

1.13.4.1
date	96.12.18.09.36.19;	author hope;	state Exp;
branches;
next	;

1.16.1.1
date	97.05.12.10.28.31;	author hope;	state Exp;
branches
	1.16.1.1.1.1
	1.16.1.1.2.1
	1.16.1.1.3.1;
next	;

1.16.1.1.1.1
date	97.07.28.18.14.30;	author daveb;	state Exp;
branches
	1.16.1.1.1.1.1.1;
next	;

1.16.1.1.1.1.1.1
date	97.10.07.11.39.34;	author jkbrook;	state Exp;
branches;
next	;

1.16.1.1.2.1
date	97.09.08.17.07.56;	author daveb;	state Exp;
branches;
next	;

1.16.1.1.3.1
date	97.09.09.14.03.07;	author daveb;	state Exp;
branches;
next	;

1.16.2.1
date	97.09.10.19.17.35;	author brucem;	state Exp;
branches;
next	;

1.16.3.1
date	97.09.11.20.48.20;	author daveb;	state Exp;
branches;
next	;

1.18.1.1
date	99.04.01.17.52.06;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
move __char to unconstrained __pre_char and move off StringCvt material
@


1.18
log
@[Bug #190507]
Modify to satisfy CM constraints.
@
text
@(*  ==== INITIAL BASIS : unconstrained structure Char ====
 *
 *  Copyright (C) 1996 Harlequin Ltd.
 *
 *  Description
 *  -----------
 *  This is part of the extended Initial Basis.
 *
 *  $Log: __pre_char.sml,v $
 *  Revision 1.17  1998/04/15  16:20:40  mitchell
 *  [Bug #30338]
 *  Stop bouncing quote characters in fromCString
 *
 *  Revision 1.16  1997/03/10  13:43:18  jont
 *  [Bug #0]
 *  Fix contains
 *
 *  Revision 1.15  1997/03/06  16:34:51  jont
 *  [Bug #1938]
 *  Remove uses of global usafe stuff from __pre_basis
 *
 *  Revision 1.14  1996/12/18  13:07:08  matthew
 *  Use PreStringCvt instead of StringCvt
 *
 *  Revision 1.13  1996/11/06  10:48:10  matthew
 *  Renamed __integer to __int
 *
 *  Revision 1.12  1996/10/03  14:52:47  io
 *  [Bug #1614]
 *  remove redundant requires
 *
 *  Revision 1.11  1996/10/02  17:16:48  io
 *  [Bug #1628]
 *  move is{Hex,Oct}Digit to pre_basis
 *
 *  Revision 1.10  1996/10/01  13:11:52  io
 *  [Bug #1626]
 *  remove option type in toCString
 *
 *  Revision 1.9  1996/07/01  16:33:04  io
 *  modify isPrint, fix fromCString accum bug
 *
 *  Revision 1.8  1996/06/24  20:28:32  io
 *  new unit
 *  make Char.scanc() visible
 *
 *  Revision 1.5  1996/06/04  18:54:09  io
 *  stringcvt -> string_cvt
 *
 *  Revision 1.4  1996/05/21  22:51:57  io
 *  ** No reason given. **
 *
 *  Revision 1.3  1996/05/18  00:18:34  io
 *  fromCString
 *
 *  Revision 1.2  1996/05/16  14:21:35  io
 *  fix fromString, scan
 *
 *  Revision 1.1  1996/05/15  12:42:49  jont
 *  new unit
 *
 * Revision 1.6  1996/05/15  10:27:38  io
 * further mods to fromString, scan
 *
 * Revision 1.5  1996/05/13  17:56:33  io
 * update toString
 *
 * Revision 1.4  1996/05/13  15:22:22  io
 * complete toString
 *
 * Revision 1.3  1996/05/07  21:04:48  io
 * revising...
 *
 *)
require "__pre_basis";
require "__int";
require "__pre_string_cvt";
structure PreChar = 
  struct
    (* local *)
    val makestring : char -> string = fn c=>
      let val alloc_s = PreBasis.alloc_string (1+1)
      in MLWorks.Internal.Value.unsafe_string_update(alloc_s, 0, ord c);
        alloc_s
      end
    (* end of local *)
    type char = char
    type string = string
    val chr = chr
    val ord = ord 
    (*      = ctoi *)
    val maxOrd = 255
    val minChar : char = #"\000"
    val maxChar : char = chr maxOrd
    fun succ (c:char) = 
      if c < maxChar then
        chr ((ord c) + 1)
      else
        raise Chr
    fun pred (c:char) = 
      if c > minChar then
        chr ((ord c)-1)
      else
        raise Chr
    fun compare (c:char, d:char):order = 
      if c < d then 
        LESS 
      else if c > d then 
        GREATER 
      else EQUAL
    fun contains "" = (fn _=>false)
      | contains s =
      let
	val size = size s
      in
	fn c=>
	let
	  val ord = ord c
	  fun aux i = 
	    i < size andalso
	    (MLWorks.String.ordof(s, i) = ord orelse aux(i+1))
	in
	  aux 0
	end
      end

    fun notContains "" = (fn _=>true)
      | notContains s = 
      let
	val size = size s
      in
        fn c=>
        let
	  val ord = ord c
	  fun aux i = 
	    if i < size then
	      MLWorks.String.ordof(s, i) <> ord andalso aux (i+1)
	    else
	      true
        in
          aux 0
        end
      end
    local 
      val ascii_limit = chr 127 (* DEL *)
    in
    fun isDigit c = PreBasis.isDigit c
    fun isLower c = #"a" <= c andalso c <= #"z"
    fun isUpper c = #"A" <= c andalso c <= #"Z"
    fun isAscii c = minChar <= c andalso c <= ascii_limit
    fun isAlpha c = isLower c orelse isUpper c
    fun isAlphaNum c = isDigit c orelse isAlpha c
    fun isSpace c = PreBasis.isSpace c
    fun toLower c = 
      if isUpper c then
        chr (ord c - ord #"A" + ord #"a")
      else c
    fun toUpper c = 
      if isLower c then
        chr (ord c - ord #"a" + ord #"A")
      else c
    fun isHexDigit (c:char) = PreBasis.isHexDigit c
    fun isOctDigit (c:char) = PreBasis.isOctDigit c
      
    fun isCntrl (c:char) = #"\000" <= c andalso c <= #"\031"
      
    fun isPrint1 (c:char) : bool = #"\032" <= c andalso c < ascii_limit
      
    fun isPrint (c:char) = isPrint1 c orelse
      (c >= #"\009" andalso c <= #"\013")
      
    fun isGraph (c:char) = #"\032" <  c andalso c <  ascii_limit
    fun isPunct (c:char) : bool = isGraph c andalso not (isAlphaNum c)
  end

    fun toString (c:char) : string = 
      if isCntrl c orelse c < #"\032" then
        case c of
          #"\a" => "\\a" (* Alert 7 *)
        | #"\b" => "\\b" (* Backspace 8 *)
        | #"\t" => "\\t" (* Horizontal Tab 9 *)
        | #"\n" => "\\n" (* Linefeed 10 *)
        | #"\v" => "\\v" (* Vertical Tab 11 *)
        | #"\f" => "\\f" (* Form feed 12 *)
        | #"\r" => "\\r" (* Carriage return 13 *)
        | _ => "\\^" ^ makestring (chr (ord c + ord #"@@"))
      else if isPrint c then
        case c of
          #"\\" => "\\\\"
        | #"\"" => "\\\""
        | _ => makestring c
      else (* > ascii_limit and not whitespace *)
        "\\" ^ (PreStringCvt.padLeft #"0" 3  (Int.toString (ord c)))

    fun scan getc cs = 
      case getc cs of
        SOME (#"\\", cs) =>
          (case getc cs of
             SOME (#"n", cs) => SOME (#"\n", cs)
           | SOME (#"t", cs) => SOME (#"\t", cs)
           | SOME (#"\\", cs) => SOME (#"\\", cs)
           | SOME (#"\"", cs) => SOME (#"\"", cs)
           | SOME (#"a", cs) => SOME (#"\a", cs)
           | SOME (#"b", cs) => SOME (#"\b", cs)
           | SOME (#"v", cs) => SOME (#"\v", cs)
           | SOME (#"f", cs) => SOME (#"\f", cs)
           | SOME (#"r", cs) => SOME (#"\r", cs)
           | SOME (#"^", cs) => 
               (case getc cs of
                  SOME (c, cs) => 
                    if 64 <= ord c andalso ord c <= 95 then
                      SOME (chr (ord c - 64), cs)
                    else
                      NONE
                | NONE => NONE)
           | SOME (c, cs) =>
                  if isDigit c then
                    (case PreStringCvt.getNChar 2 getc cs of
                       SOME ([d, e], cs) => 
                         if isDigit d andalso isDigit e then
                           let
                             fun convert (c,d,e) = (100 * (ord c - ord #"0") + 10 * (ord d - ord #"0") + (ord e - ord #"0"))
                             val res = convert (c, d, e)
                           in
                             if 0 <= res andalso res <= maxOrd then
                               SOME (chr res, cs)
                             else
                               NONE
                           end
                         else
                           NONE
                     | _ => NONE)
                  else
                    let
                      fun dropFormat getc cs = 
                        case getc cs of
                          SOME (#"\\", cs) => scan getc cs
                        | SOME (c, cs) => 
                            if isSpace c then
                              dropFormat getc cs
                            else
                              NONE
                        | NONE => NONE
                    in
                      dropFormat getc cs
                    end
                     | NONE => NONE)
      | SOME (c, cs) => 
(*             if isCntrl c orelse c = #"\127" orelse (not (isAscii c)) then
               NONE 
             else 
               SOME (c, cs)
 *)
             if isPrint1 c then
               SOME (c, cs)
             else (* isCntrl c orelse c = #"\127" orelse not isAscii c *)
               NONE
      | NONE => NONE

      fun fromString "" = NONE
        | fromString s = PreStringCvt.scanString scan s 

      (* See A2.5.2 Character Constants in K & R *)
      fun scanc getc cs = 
        case getc cs of
          SOME (#"\\", cs) =>
            (case getc cs of
               SOME (#"n", cs) => SOME (#"\n", cs)
             | SOME (#"t", cs) => SOME (#"\t", cs)
             | SOME (#"\\", cs) => SOME (#"\\", cs)
             | SOME (#"\"", cs) => SOME (#"\"", cs)
             | SOME (#"a", cs) => SOME (#"\a", cs)
             | SOME (#"b", cs) => SOME (#"\b", cs)
             | SOME (#"v", cs) => SOME (#"\v", cs)
             | SOME (#"f", cs) => SOME (#"\f", cs)
             | SOME (#"r", cs) => SOME (#"\r", cs)
             | SOME (#"?", cs) => SOME (#"?", cs)
             | SOME (#"'", cs) => SOME (#"'", cs)
             | SOME (#"x", cs) => 
                 (case PreStringCvt.splitl isHexDigit getc cs of
                    ("", cs) => NONE
                  | (digits, cs) =>
                      (case PreStringCvt.scanString (Int.scan PreStringCvt.HEX) digits of
                         SOME hex =>
                           if 0 <= hex andalso hex <= maxOrd then 
                             SOME (chr hex, cs)
                           else
                             NONE
                       | NONE => NONE))
             | SOME (c, cs) => 
                    if isOctDigit c then
                      (case PreStringCvt.splitlN 2 isOctDigit getc cs of
                         (s, cs) => 
                          let
			    val char_sub = chr o MLWorks.String.ordof
                            fun convert s =
                              let
                                val sz = size s
                                val (c,d,e) = 
                                  if sz = 0 then (#"0", #"0", c)
                                  else if sz = 1 then (#"0", c, char_sub(s,0))
                                  else (* sz = 2 *) 
                                    (c, char_sub(s,0), char_sub(s,1))
                              in
                                (8*8*(ord c - ord #"0") + 8*(ord d - ord #"0") + (ord e - ord #"0")) 
                              end
                            val res = convert s
                          in
                            if 0 <= res andalso res <= maxOrd then
                              SOME (chr res, cs)
                            else
                              NONE
                          end)
                    else
                      NONE
              | NONE => NONE)
        | SOME (c, cs) => 
               if isCntrl c orelse c = #"\127" orelse 
                 c = #"?" orelse 
                 c = #"\"" orelse (* \" *)
                 (not (isAscii c)) then
                 NONE 
               else 
                 SOME (c, cs)
        | NONE => NONE

        
      fun fromCString "" = NONE 
        | fromCString s = PreStringCvt.scanString scanc s 

        
      fun toCString (c:char) =
        case c of
          #"\n" => "\\n"
        | #"\t" => "\\t"
        | #"\v" => "\\v"
        | #"\b" => "\\b"
        | #"\r" => "\\r"
        | #"\f" => "\\f"
        | #"\a" => "\\a"
        | #"\\" => "\\\\"
        | #"\"" => "\\\""
        | #"?" => "\\?"
        | #"'" => "\\'"
        | _  => 
          if isPrint c then
            makestring c
          else
            "\\" ^ PreStringCvt.padLeft #"0" 3 (Int.fmt PreStringCvt.OCT (ord c))


      val op < : char * char -> bool = op <
      val op <= : char * char -> bool= op <=
      val op >  : char * char -> bool= op >
      val op >= : char * char -> bool= op >=
  end

@


1.18.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a9 4
 *  Revision 1.18  1999/02/17  14:34:34  mitchell
 *  [Bug #190507]
 *  Modify to satisfy CM constraints.
 *
@


1.17
log
@[Bug #30338]
Stop bouncing quote characters in fromCString
@
text
@d10 4
d78 1
a78 1
structure Char = 
a357 1
structure PreChar = Char
@


1.16
log
@[Bug #0]
Fix contains
@
text
@d10 4
d315 1
a315 1
                 c = #"?" orelse c = #"'" orelse
@


1.16.3.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a9 4
 *  Revision 1.16  1997/03/10  13:43:18  jont
 *  [Bug #0]
 *  Fix contains
 *
@


1.16.2.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a9 4
 *  Revision 1.16  1997/03/10  13:43:18  jont
 *  [Bug #0]
 *  Fix contains
 *
@


1.16.1.1
log
@branched from 1.16
@
text
@a9 4
 *  Revision 1.16  1997/03/10  13:43:18  jont
 *  [Bug #0]
 *  Fix contains
 *
@


1.16.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a9 3
 *  Revision 1.16.1.1  1997/05/12  10:28:31  hope
 *  branched from 1.16
 *
@


1.16.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a9 3
 *  Revision 1.16.1.1  1997/05/12  10:28:31  hope
 *  branched from 1.16
 *
@


1.16.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a9 3
 *  Revision 1.16.1.1  1997/05/12  10:28:31  hope
 *  branched from 1.16
 *
@


1.16.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a9 3
 *  Revision 1.16.1.1.1.1  1997/07/28  18:14:30  daveb
 *  branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.15
log
@[Bug #1938]
Remove uses of global usafe stuff from __pre_basis
@
text
@d10 4
d112 2
a113 2
	    (i < size andalso
	     MLWorks.String.ordof(s, i) = ord) orelse aux (i+1)
@


1.14
log
@Use PreStringCvt instead of StringCvt
@
text
@d10 3
d70 2
a71 2
      let val alloc_s = unsafe_alloc_string (1+1)
      in unsafe_string_update(alloc_s, 0, ctoi c);
d85 1
a85 1
        itoc ((ord c) + 1)
d90 1
a90 1
        itoc ((ord c)-1)
d101 12
a112 10
      let val size = size s in
        fn c=>
        let fun aux i = 
          if i < size then
            unsafe_string_char_sub (s, i) = c orelse aux (i+1)
          else
            false
        in
          aux 0
         end
d117 3
a119 1
      let val size = size s in
d121 7
a127 5
        let fun aux i = 
          if i < size then
            unsafe_string_char_sub (s, i) <> c andalso aux (i+1)
          else
            true
d144 1
a144 1
        itoc (ord c - ord #"A" + ord #"a")
d148 1
a148 1
        itoc (ord c - ord #"a" + ord #"A")
d283 1
d289 1
a289 1
                                  else if sz = 1 then (#"0", c, unsafe_string_char_sub(s,0))
d291 1
a291 1
                                    (c, unsafe_string_char_sub(s,0), unsafe_string_char_sub(s,1))
@


1.13
log
@Renamed __integer to __int
@
text
@d10 3
d172 1
a172 1
        "\\" ^ (StringCvt.padLeft #"0" 3  (Int.toString (ord c)))
d197 1
a197 1
                    (case StringCvt.getNChar 2 getc cs of
d240 1
a240 1
        | fromString s = StringCvt.scanString scan s 
d259 1
a259 1
                 (case StringCvt.splitl isHexDigit getc cs of
d262 1
a262 1
                      (case StringCvt.scanString (Int.scan StringCvt.HEX) digits of
d271 1
a271 1
                      (case StringCvt.splitlN 2 isOctDigit getc cs of
d307 1
a307 1
        | fromCString s = StringCvt.scanString scanc s 
d327 1
a327 1
            "\\" ^ StringCvt.padLeft #"0" 3 (Int.fmt StringCvt.OCT (ord c))
d336 1
@


1.13.4.1
log
@branched from 1.13
@
text
@a9 3
 *  Revision 1.13  1996/11/06  10:48:10  matthew
 *  Renamed __integer to __int
 *
@


1.13.3.1
log
@branched from 1.13
@
text
@a9 3
 *  Revision 1.13  1996/11/06  10:48:10  matthew
 *  Renamed __integer to __int
 *
@


1.13.3.1.1.1
log
@branched from 1.13.3.1
@
text
@a9 3
 *  Revision 1.13.3.1  1996/12/17  17:42:19  hope
 *  branched from 1.13
 *
@


1.13.2.1
log
@branched from 1.13
@
text
@a9 3
 *  Revision 1.13  1996/11/06  10:48:10  matthew
 *  Renamed __integer to __int
 *
@


1.13.1.1
log
@branched from 1.13
@
text
@a9 3
 *  Revision 1.13  1996/11/06  10:48:10  matthew
 *  Renamed __integer to __int
 *
@


1.13.1.1.1.1
log
@branched from 1.13.1.1
@
text
@a9 3
 *  Revision 1.13.1.1  1996/11/14  12:42:55  hope
 *  branched from 1.13
 *
@


1.12
log
@[Bug #1614]
remove redundant requires
@
text
@d10 4
d58 1
a58 1
require "__integer";
@


1.12.2.1
log
@branched from 1.12
@
text
@a9 4
 *  Revision 1.12  1996/10/03  14:52:47  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.12.1.1
log
@branched from 1.12
@
text
@a9 4
 *  Revision 1.12  1996/10/03  14:52:47  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.11
log
@[Bug #1628]
move is{Hex,Oct}Digit to pre_basis
@
text
@d10 4
a52 1
require "toplevel";
a53 1
require "char";
@


1.10
log
@[Bug #1626]
remove option type in toCString
@
text
@d10 4
d117 1
a117 1
    fun isDigit c = #"0" <= c andalso c <= #"9" 
d132 2
a133 6
    fun isHexDigit (c:char) = 
      isDigit c orelse 
      (#"a" <= c andalso c <= #"f") orelse
      (#"A" <= c andalso c <= #"F")
    fun isOctDigit (c:char) = 
      #"0" <= c andalso c <= #"7"
a231 2

      fun isOctDigit (c:char) : bool = #"0" <= c andalso c <= #"7"
@


1.9
log
@modify isPrint, fix fromCString accum bug
@
text
@d10 3
d305 11
a315 11
          #"\n" => SOME "\\n"
        | #"\t" => SOME "\\t"
        | #"\v" => SOME "\\v"
        | #"\b" => SOME "\\b"
        | #"\r" => SOME "\\r"
        | #"\f" => SOME "\\f"
        | #"\a" => SOME "\\a"
        | #"\\" => SOME "\\\\"
        | #"\"" => SOME "\\\""
        | #"?" => SOME "\\?"
        | #"'" => SOME "\\'"
d318 1
a318 1
            SOME (makestring c)
d320 1
a320 1
            SOME ("\\" ^ StringCvt.padLeft #"0" 3 (Int.fmt StringCvt.OCT (ord c)))
@


1.9.1.1
log
@branched from 1.9
@
text
@a9 3
 *  Revision 1.9  1996/07/01  16:33:04  io
 *  modify isPrint, fix fromCString accum bug
 *
@


1.8
log
@new unit
make Char.scanc() visible
@
text
@d9 5
a13 1
 *  $Log: __char.sml,v $
d133 6
a138 1
    fun isPrint (c:char) = #"\032" <= c andalso c <  ascii_limit
d143 2
a144 7
    fun toString (c:char) = 
      if isPrint c then
        case c of
          #"\\" => "\\\\"
        | #"\"" => "\\\""
        | _ => makestring c
      else if isCntrl c orelse c < #"\032" then
d154 8
a161 3
      else (* > ascii_limit *)
        "\\" ^ Int.toString (ord c)
            
d216 1
a216 1
             if isCntrl c orelse c = #"\127" orelse (not (isAscii c)) then
d220 5
d249 2
a250 2
                 (case StringCvt.splitlN 2 isHexDigit getc cs of
                    ("", cs) => NONE 
d260 22
a281 16
                    if isDigit c then
                      (case StringCvt.getNChar 2 getc cs of
                         SOME ([d, e], cs) =>
                           if isOctDigit d andalso isOctDigit e then
                             let fun convert (c, d, e) = 
                               (8*8*(ord c - ord #"0")) + (8*(ord d - ord#"0")) + (ord e - ord #"0")
                                 val res = convert (c, d, e)
                             in
                               if 0 <= res andalso res <= maxOrd then
                                 SOME (chr res, cs)
                               else 
                                 NONE
                             end
                           else
                             NONE
                       | _ => NONE)
d288 1
d312 1
d314 3
a316 1
          if isCntrl c orelse not (isAscii c) then 
d318 1
a318 2
          else
            SOME (makestring c)
@


1.7
log
@chr and ord are now at top level.
@
text
@d1 1
a1 1
(*  ==== INITIAL BASIS : unconstrained and non string_cvt related PreChar ====
d9 3
a11 3
 *  $Log: __pre_char.sml,v $
 *  Revision 1.6  1996/05/23  12:10:18  io
 *  fix padLeft
d13 2
a14 2
 *  Revision 1.5  1996/05/22  09:43:09  io
 *  fix bug in isPrint & isGraph
d16 2
a17 2
 *  Revision 1.4  1996/05/16  16:27:59  matthew
 *  Bits becomes MLWorks.Internal.Bits
d19 2
a20 2
 *  Revision 1.3  1996/05/14  20:46:51  io
 *  rm Chr exn, fix isCntrl and notContains
d22 8
a29 2
 *  Revision 1.2  1996/05/13  13:15:10  io
 *  maxSize must incl null character
d31 5
a35 3
 *  Revision 1.1  1996/05/07  21:08:40  io
 *  new unit
 *  move __char to unconstrained __pre_char and move off StringCvt material
d39 5
a43 1
structure PreChar = 
d45 1
a45 29

    (* miscellaneous *)
    val ctoi : char -> int = MLWorks.Internal.Value.cast
    val itoc : int -> char = MLWorks.Internal.Value.cast
    val unsafe_string_sub : (string * int) -> int = MLWorks.Internal.Value.unsafe_string_sub
    val unsafe_string_update : (string * int * int) -> unit = MLWorks.Internal.Value.unsafe_string_update
    val unsafe_alloc_string : int -> string = fn n =>
      let val alloc_s = MLWorks.Internal.Value.alloc_string n
      in
        unsafe_string_update (alloc_s, n-1, 0);
        alloc_s
      end
    (* Stolen from String
     * Length of string 
     * | length | secondary | primary |
     *     24         6          2
     * theoretically (2^24)-1         = 16777215
     * conservatively set at (2^15)-1 = 32767
     * actually 32766 for null character
     *)
    val maxSize = 32767 - 1 

    (* exn causing alloc_string *)
    fun alloc_string (n:int) : string = 
      if n > maxSize then
        raise Size
      else
        unsafe_alloc_string n

d51 1
a51 2
    (* end of miscellaneous *)

d54 3
a56 1

d58 2
a59 7
      
    val minChar : char = itoc 0
    val maxChar : char = itoc maxOrd

    val chr = chr
    val ord = ord

d61 3
a63 1
      if c > itoc ((ctoi maxChar)-1) then
d65 3
a68 3
        itoc((ctoi c)+1)
    fun pred (c:char) = 
      if c < itoc ((ctoi minChar) + 1) then
a69 2
      else itoc ((ctoi c) - 1)

d71 5
a75 2
      if c < d then LESS else if c > d then GREATER else EQUAL

d82 1
a82 2
            (itoc (unsafe_string_sub (s, i))) = c orelse
            aux (i+1)
d87 1
a87 1
        end
d96 1
a96 2
            (itoc (unsafe_string_sub (s, i)) <> c) andalso
            aux (i+1)
d103 6
a108 13
    val zero = #"0"
    and nine = #"9"
    and a = #"a"
    and z = #"z"
    and A = #"A"
    and Z = #"Z"
    and space = #" "
    and f = #"f"
    and F = #"F"
    and ascii_limit = itoc 127 (* DEL *)
    fun isDigit c = zero <= c andalso c <= nine
    fun isLower c = a <= c andalso c <= z
    fun isUpper c = A <= c andalso c <= Z
d112 8
a119 5
    fun isSpace c = c = space orelse
      (ctoi c) >= 9 andalso (ctoi c) <= 13
    (* space, newline, tab, cr, vt, ff *)
    fun toUpper c =
      if isLower c then itoc ((ctoi c) - (ctoi a) + (ctoi A))
a120 3
    fun toLower c =
      if isUpper c then itoc ((ctoi c) - (ctoi A) + (ctoi a))
      else c 
d123 5
a127 2
      (a <= c andalso c <= f) orelse
      (A <= c andalso c <= F)
d131 172
a302 3
    fun isPunct (c:char) : bool = 
      isGraph c andalso not (isAlphaNum c)
end
@


1.6
log
@fix padLeft
@
text
@d10 3
d77 3
a79 7
    fun chr i =
      if i < 0 orelse i > maxOrd then
	raise Chr
      else
	itoc i
    fun chr i = MLWorks.Char.chr i
    fun ord c = ctoi c
@


1.5
log
@fix bug in isPrint & isGraph
@
text
@d10 3
d57 1
a57 1
        MLWorks.Internal.Value.alloc_string n
@


1.4
log
@Bits becomes MLWorks.Internal.Bits
@
text
@d10 3
a27 1
    structure Bits = MLWorks.Internal.Bits
a130 1
    fun isDigit2 c = if Bits.andb (Bits.orb(ord zero, ord nine), ord c) <> 0 then true else false
d149 3
a151 3
    fun isCntrl (c:char) = 0 <= (ctoi c) andalso (ctoi c) <= 31
    fun isPrint (c:char) = not (isCntrl c)
    fun isGraph (c:char) = isPrint c andalso not (isSpace c)
@


1.3
log
@rm Chr exn, fix isCntrl and notContains
@
text
@d10 3
d24 2
@


1.2
log
@maxSize must incl null character
@
text
@d10 3
a63 2
    exception Chr

d99 1
a99 1
    fun notContains "" = (fn _=>false)
d105 1
a105 1
            itoc (unsafe_string_sub (s, i)) <> c orelse
d108 1
a108 1
            false
d143 1
a143 1
    fun isCntrl (c:char) = 7 <= (ctoi c) andalso (ctoi c) <= 13
@


1.1
log
@new unit
move __char to unconstrained __pre_char and move off StringCvt material
@
text
@d9 5
a13 1
 *  $Log$
d35 1
d37 1
a37 1
    val maxSize = 32767
@
