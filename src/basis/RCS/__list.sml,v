head	1.5;
access;
symbols
	MLW_daveb_inline_1_4_99:1.5.3
	MLWorks_21c0_1999_03_25:1.5
	MLWorks_20c1_1998_08_20:1.5
	MLWorks_20c0_1998_08_04:1.5
	MLWorks_20b2c2_1998_06_19:1.5
	MLWorks_20b2_Windows_1998_06_12:1.5
	MLWorks_20b1c1_1998_05_07:1.5
	MLWorks_20b0_1998_04_07:1.5
	MLWorks_20b0_1998_03_20:1.5
	MLWorks_20m2_1998_02_16:1.5
	MLWorks_20m1_1997_10_23:1.5
	MLWorks_11r1:1.4.7.1.1.1.1
	MLWorks_workspace_97:1.5.2
	MLWorks_dt_wizard:1.5.1
	MLWorks_11c0_1997_09_09:1.4.7.1.1.1
	MLWorks_10r3:1.4.7.1.3
	MLWorks_10r2_551:1.4.7.1.2
	MLWorks_11:1.4.7.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.4.7.1
	MLWorks_20m0_1997_06_20:1.5
	MLWorks_1_0_r2c2_1997_06_14:1.4.7.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.4.7.1
	MLWorks_1_0_r2c1_1997_05_12:1.4.7
	MLWorks_BugFix_1997_04_24:1.4
	MLWorks_1_0_r2_Win32_1997_04_11:1.4
	MLWorks_1_0_r2_Unix_1997_04_04:1.4
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.4.5.1.1
	MLWorks_gui_1996_12_18:1.4.6
	MLWorks_1_0_Win32_1996_12_17:1.4.5
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.4.3.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.4.3.1
	MLWorks_1_0_Irix_1996_11_28:1.4.3.1.1
	MLWorks_1_0_Win32_1996_11_22:1.4.4
	MLWorks_1_0_Unix_1996_11_14:1.4.3
	MLWorks_Open_Beta2_1996_10_11:1.4.2
	MLWorks_License_dev:1.4.1
	MLWorks_1_open_beta_1996_09_13:1.3.1
	MLWorks_Open_Beta_1996_08_22:1.3
	MLWorks_Beta_1996_07_02:1.1
	MLWorks_Beta_1996_06_07:1.1
	MLWorks_Beta_1996_06_06:1.1
	MLWorks_Beta_1996_06_05:1.1
	MLWorks_Beta_1996_06_03:1.1
	MLWorks_Beta_1996_05_31:1.1
	MLWorks_Beta_1996_05_30:1.1;
locks; strict;
comment	@ *  @;


1.5
date	97.05.27.14.27.31;	author matthew;	state Exp;
branches
	1.5.1.1
	1.5.2.1
	1.5.3.1;
next	1.4;

1.4
date	96.10.03.14.51.28;	author io;	state Exp;
branches
	1.4.1.1
	1.4.2.1
	1.4.3.1
	1.4.4.1
	1.4.5.1
	1.4.6.1
	1.4.7.1;
next	1.3;

1.3
date	96.08.16.14.01.14;	author io;	state Exp;
branches
	1.3.1.1;
next	1.2;

1.2
date	96.07.09.12.47.05;	author andreww;	state Exp;
branches;
next	1.1;

1.1
date	96.05.07.16.17.08;	author jont;	state Exp;
branches;
next	;

1.3.1.1
date	96.09.13.11.09.20;	author hope;	state Exp;
branches;
next	;

1.4.1.1
date	96.10.07.16.00.16;	author hope;	state Exp;
branches;
next	;

1.4.2.1
date	96.10.17.11.18.32;	author hope;	state Exp;
branches;
next	;

1.4.3.1
date	96.11.14.12.42.05;	author hope;	state Exp;
branches
	1.4.3.1.1.1;
next	;

1.4.3.1.1.1
date	96.11.28.14.53.58;	author hope;	state Exp;
branches;
next	;

1.4.4.1
date	96.11.22.18.02.33;	author hope;	state Exp;
branches;
next	;

1.4.5.1
date	96.12.17.17.41.30;	author hope;	state Exp;
branches
	1.4.5.1.1.1;
next	;

1.4.5.1.1.1
date	97.02.24.11.29.44;	author hope;	state Exp;
branches;
next	;

1.4.6.1
date	96.12.18.09.35.26;	author hope;	state Exp;
branches;
next	;

1.4.7.1
date	97.05.12.10.27.26;	author hope;	state Exp;
branches
	1.4.7.1.1.1
	1.4.7.1.2.1
	1.4.7.1.3.1;
next	;

1.4.7.1.1.1
date	97.07.28.18.13.34;	author daveb;	state Exp;
branches
	1.4.7.1.1.1.1.1;
next	;

1.4.7.1.1.1.1.1
date	97.10.07.11.38.44;	author jkbrook;	state Exp;
branches;
next	;

1.4.7.1.2.1
date	97.09.08.17.06.59;	author daveb;	state Exp;
branches;
next	;

1.4.7.1.3.1
date	97.09.09.14.02.18;	author daveb;	state Exp;
branches;
next	;

1.5.1.1
date	97.09.10.19.16.45;	author brucem;	state Exp;
branches;
next	;

1.5.2.1
date	97.09.11.20.46.59;	author daveb;	state Exp;
branches;
next	;

1.5.3.1
date	99.04.01.17.52.20;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
@


1.5
log
@Adding datatypes
@
text
@(*  ==== INITIAL BASIS : Lists structure ====
 *
 *  Copyright (C) 1995 Harlequin Ltd.
 *
 *  Description
 *  -----------
 *  This is part of the extended Initial Basis.
 *
 *  Revision Log
 *  ------------
 *  $Log: __list.sml,v $
 *  Revision 1.4  1996/10/03  14:51:28  io
 *  [Bug #1614]
 *  remove redundant requires
 *
 *  Revision 1.3  1996/08/16  14:01:14  io
 *  drop should barf immediately on negative arguments rather than later
 *
 *  Revision 1.2  1996/07/09  12:47:05  andreww
 *  rewriting to use the expanded toplevel functions.
 *
 *  Revision 1.1  1996/05/07  16:17:08  jont
 *  new unit
 *
 * Revision 1.1  1996/04/18  11:30:23  jont
 * new unit
 *
 *  Revision 1.3  1996/03/20  11:13:19  stephenb
 *  Bring up to date with respect to version 1.3 dated 10/1995.
 *  Added take and drop
 *  Removed nthTail
 *
 *  Revision 1.2  1995/05/05  11:32:43  daveb
 *  Removed dependencies on ../utils.
 *
 *  Revision 1.1  1995/04/13  13:22:30  jont
 *  new unit
 *  No reason given
 *
 *
 *)
require "list";

structure List : LIST =
  struct

    datatype list = datatype list

    val op @@ = op @@
    exception Empty=Empty

(*
    fun hd ([]) = raise Empty
      | hd (h::t) = h

    fun tl ([]) = raise Empty
      | tl (h::t) = t
*)

    val hd = hd
    val tl = tl

    fun last [x] = x
      | last (_::xs) = last xs
      | last [] = raise Empty

    val length = length

(*
    fun length l =
 fun length l =
      let
        fun loop ([], acc) = acc
          | loop (_::t, acc) = loop (t, 1+acc)
      in
        loop (l, 0)
      end
*)
    fun all p [] = true
      | all p (x::xs) = (p x) andalso all p xs

    fun exists P =
      let 
        fun test [] = false
          | test (x::xs) = (P x) orelse test xs
      in
        test
      end

    val app = app

(*
    fun app f [] = ()
      | app f (h :: t) = (f h; app f t)
*)
    fun filter p list =
      let
        fun loop (acc, []) = rev acc
        |   loop (acc, x::xs) =
 	  if p x then loop (x::acc, xs) else loop (acc, xs)
      in
        loop ([], list)
      end

    fun partition p list =
      let
        fun part (ys, ns, []) = (rev ys, rev ns)
        |   part (ys, ns, x::xs) =
          if p x then part (x::ys, ns, xs) else part (ys, x::ns, xs)
      in 
        part ([], [], list)
      end

    fun find f =
      let
	fun red [] = NONE
	  | red (x :: xs) =
	    if f x then SOME x else red xs
      in
	red
      end

    val foldl = foldl
    val foldr = foldr

(*
    fun foldl f i list = 
      let
        fun red (acc, []) = acc
          | red (acc, (x::xs)) = red (f (x, acc), xs)
      in 
        red (i, list)
      end


    fun foldr f i list = 
      let
        fun red (acc, []) = acc
          | red (acc, x::xs) = red (f (x,acc), xs)
      in
        red (i, rev list)
      end
*)
    fun concat x = foldr op@@ [] x 

    val map = map

    fun nth ([], _) = raise Subscript
      | nth (x :: _, 0) = x
      | nth (_ :: xs, n) = nth (xs, n-1)


    fun take (_, 0) = []
      | take ([], _) = raise Subscript
      | take (x::xs, n) = x::take (xs, n-1)
	
    fun drop (arg as (xs, n)) = 
      if n < 0 then
	raise Subscript
      else 
	let fun scan (xs, 0) = xs
	      | scan ([], _) = raise Subscript
	      | scan (_::xs, n) = scan (xs, n-1)
	in
	  scan arg
	end

    val null = null

(*
    fun null [] = true
      | null _ = false
*)
    val rev = rev

    fun revAppend([], acc) = acc
      | revAppend(x :: xs, acc) = revAppend(xs, x :: acc)

    fun mapPartial f =
      let
	fun red(acc, []) = rev acc
	  | red(acc, x :: xs) =
	    red((case f x of NONE => acc | SOME x => x :: acc), xs)
      in
	fn list => red([], list)
      end

    fun tabulate(n, f) =
      if n < 0 then
	raise Size
      else
	let
	  fun red(m, acc) = if m = n then rev acc else red(m+1, f m :: acc)
	in
	  red(0, [])
	end

  end (* List *)
@


1.5.3.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a11 3
 *  Revision 1.5  1997/05/27  14:27:31  matthew
 *  Adding datatypes
 *
@


1.5.2.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a11 3
 *  Revision 1.5  1997/05/27  14:27:31  matthew
 *  Adding datatypes
 *
@


1.5.1.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a11 3
 *  Revision 1.5  1997/05/27  14:27:31  matthew
 *  Adding datatypes
 *
@


1.4
log
@[Bug #1614]
remove redundant requires
@
text
@d12 4
d46 3
@


1.4.7.1
log
@branched from 1.4
@
text
@a11 4
 *  Revision 1.4  1996/10/03  14:51:28  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.4.7.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a11 3
 *  Revision 1.4.7.1  1997/05/12  10:27:26  hope
 *  branched from 1.4
 *
@


1.4.7.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a11 3
 *  Revision 1.4.7.1  1997/05/12  10:27:26  hope
 *  branched from 1.4
 *
@


1.4.7.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a11 3
 *  Revision 1.4.7.1  1997/05/12  10:27:26  hope
 *  branched from 1.4
 *
@


1.4.7.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a11 3
 *  Revision 1.4.7.1.1.1  1997/07/28  18:13:34  daveb
 *  branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.4.6.1
log
@branched from 1.4
@
text
@a11 4
 *  Revision 1.4  1996/10/03  14:51:28  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.4.5.1
log
@branched from 1.4
@
text
@a11 4
 *  Revision 1.4  1996/10/03  14:51:28  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.4.5.1.1.1
log
@branched from 1.4.5.1
@
text
@a11 3
 *  Revision 1.4.5.1  1996/12/17  17:41:30  hope
 *  branched from 1.4
 *
@


1.4.4.1
log
@branched from 1.4
@
text
@a11 4
 *  Revision 1.4  1996/10/03  14:51:28  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.4.3.1
log
@branched from 1.4
@
text
@a11 4
 *  Revision 1.4  1996/10/03  14:51:28  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.4.3.1.1.1
log
@branched from 1.4.3.1
@
text
@a11 3
 *  Revision 1.4.3.1  1996/11/14  12:42:05  hope
 *  branched from 1.4
 *
@


1.4.2.1
log
@branched from 1.4
@
text
@a11 4
 *  Revision 1.4  1996/10/03  14:51:28  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.4.1.1
log
@branched from 1.4
@
text
@a11 4
 *  Revision 1.4  1996/10/03  14:51:28  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.3
log
@drop should barf immediately on negative arguments rather than later
@
text
@d12 3
a37 3

require "toplevel";
require "__general";
d141 1
a141 1
    fun nth ([], _) = raise General.Subscript
d147 1
a147 1
      | take ([], _) = raise General.Subscript
d152 1
a152 1
	raise General.Subscript
d155 1
a155 1
	      | scan ([], _) = raise General.Subscript
d183 1
a183 1
	raise General.Size
@


1.3.1.1
log
@branched from 1.3
@
text
@a11 3
 *  Revision 1.3  1996/08/16  14:01:14  io
 *  drop should barf immediately on negative arguments rather than later
 *
@


1.2
log
@rewriting to use the expanded toplevel functions.
@
text
@d12 3
d149 11
a159 6


    fun drop (xs, 0) = xs
      | drop ([], _) = raise General.Subscript
      | drop (x::xs, n) = drop (xs, n-1)

@


1.1
log
@new unit
@
text
@d11 4
a14 1
 *  $Log: __lists.sml,v $
d40 1
a40 1
    exception Empty
d42 1
d48 4
d57 3
d61 1
d68 1
a68 1

d80 3
d85 1
a85 1

d113 4
d133 1
a133 1

d153 3
d158 1
a158 1

@
