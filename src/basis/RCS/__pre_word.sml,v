head	1.9;
access;
symbols
	MLW_daveb_inline_1_4_99:1.9.1
	MLWorks_21c0_1999_03_25:1.9
	MLWorks_20c1_1998_08_20:1.8
	MLWorks_20c0_1998_08_04:1.8
	MLWorks_20b2c2_1998_06_19:1.8
	MLWorks_20b2_Windows_1998_06_12:1.8
	MLWorks_20b1c1_1998_05_07:1.8
	MLWorks_20b0_1998_04_07:1.8
	MLWorks_20b0_1998_03_20:1.8
	MLWorks_20m2_1998_02_16:1.8
	MLWorks_20m1_1997_10_23:1.8
	MLWorks_11r1:1.8.1.1.1.1.1
	MLWorks_workspace_97:1.8.3
	MLWorks_dt_wizard:1.8.2
	MLWorks_11c0_1997_09_09:1.8.1.1.1.1
	MLWorks_10r3:1.8.1.1.3
	MLWorks_10r2_551:1.8.1.1.2
	MLWorks_11:1.8.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.8.1.1
	MLWorks_20m0_1997_06_20:1.8
	MLWorks_1_0_r2c2_1997_06_14:1.8.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.8.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.8.1
	MLWorks_BugFix_1997_04_24:1.8
	MLWorks_1_0_r2_Win32_1997_04_11:1.8
	MLWorks_1_0_r2_Unix_1997_04_04:1.8
	MLWorks_gui_1996_12_18:1.7.6
	MLWorks_1_0_Win32_1996_12_17:1.7.5
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.7.3.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.7.3.1
	MLWorks_1_0_Irix_1996_11_28:1.7.3.1.1
	MLWorks_1_0_Win32_1996_11_22:1.7.4
	MLWorks_1_0_Unix_1996_11_14:1.7.3
	MLWorks_Open_Beta2_1996_10_11:1.7.2
	MLWorks_License_dev:1.7.1
	MLWorks_1_open_beta_1996_09_13:1.5.1
	MLWorks_Open_Beta_1996_08_22:1.5
	MLWorks_Beta_1996_07_02:1.5
	MLWorks_Beta_1996_06_07:1.5
	MLWorks_Beta_1996_06_06:1.5
	MLWorks_Beta_1996_06_05:1.5
	MLWorks_Beta_1996_06_03:1.4
	MLWorks_Beta_1996_05_31:1.4
	MLWorks_Beta_1996_05_30:1.3;
locks; strict;
comment	@ *  @;


1.9
date	99.02.17.14.48.40;	author mitchell;	state Exp;
branches
	1.9.1.1;
next	1.8;

1.8
date	97.01.14.17.52.45;	author io;	state Exp;
branches
	1.8.1.1
	1.8.2.1
	1.8.3.1;
next	1.7;

1.7
date	96.10.03.14.56.28;	author io;	state Exp;
branches
	1.7.1.1
	1.7.2.1
	1.7.3.1
	1.7.4.1
	1.7.5.1
	1.7.6.1;
next	1.6;

1.6
date	96.10.03.12.56.09;	author io;	state Exp;
branches;
next	1.5;

1.5
date	96.06.04.16.05.51;	author io;	state Exp;
branches
	1.5.1.1;
next	1.4;

1.4
date	96.05.30.11.32.43;	author daveb;	state Exp;
branches;
next	1.3;

1.3
date	96.05.13.13.17.35;	author matthew;	state Exp;
branches;
next	1.2;

1.2
date	96.05.10.14.40.09;	author matthew;	state Exp;
branches;
next	1.1;

1.1
date	96.05.08.16.15.49;	author matthew;	state Exp;
branches;
next	;

1.5.1.1
date	96.09.13.11.10.50;	author hope;	state Exp;
branches;
next	;

1.7.1.1
date	96.10.07.16.01.35;	author hope;	state Exp;
branches;
next	;

1.7.2.1
date	96.10.17.11.19.50;	author hope;	state Exp;
branches;
next	;

1.7.3.1
date	96.11.14.12.43.24;	author hope;	state Exp;
branches
	1.7.3.1.1.1;
next	;

1.7.3.1.1.1
date	96.11.28.14.55.16;	author hope;	state Exp;
branches;
next	;

1.7.4.1
date	96.11.22.18.03.52;	author hope;	state Exp;
branches;
next	;

1.7.5.1
date	96.12.17.17.42.47;	author hope;	state Exp;
branches;
next	;

1.7.6.1
date	96.12.18.09.36.47;	author hope;	state Exp;
branches;
next	;

1.8.1.1
date	97.05.12.10.28.28;	author hope;	state Exp;
branches
	1.8.1.1.1.1
	1.8.1.1.2.1
	1.8.1.1.3.1;
next	;

1.8.1.1.1.1
date	97.07.28.18.14.28;	author daveb;	state Exp;
branches
	1.8.1.1.1.1.1.1;
next	;

1.8.1.1.1.1.1.1
date	97.10.07.11.39.32;	author jkbrook;	state Exp;
branches;
next	;

1.8.1.1.2.1
date	97.09.08.17.07.55;	author daveb;	state Exp;
branches;
next	;

1.8.1.1.3.1
date	97.09.09.14.03.05;	author daveb;	state Exp;
branches;
next	;

1.8.2.1
date	97.09.10.19.17.33;	author brucem;	state Exp;
branches;
next	;

1.8.3.1
date	97.09.11.20.48.18;	author daveb;	state Exp;
branches;
next	;

1.9.1.1
date	99.04.01.17.52.39;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
New stuff
@


1.9
log
@[Bug #190507]
Modify to satisfy CM constraints.
@
text
@(*  ==== INITIAL BASIS : Word structure ====
 *
 *  Copyright (C) 1995 Harlequin Ltd.
 *
 *  Description
 *  -----------
 *  This is part of the extended Initial Basis.
 *
 *  $Log: __pre_word.sml,v $
 *  Revision 1.8  1997/01/14  17:52:45  io
 *  [Bug #1892]
 *  rename __pre{integer,int32,real,word{,32}} to
 *         __pre_{int{,32},real,word{,32}}
 *
 *  Revision 1.7  1996/10/03  14:56:28  io
 *  [Bug #1614]
 *  remove redundant requires
 *
 *  Revision 1.6  1996/10/03  12:56:09  io
 *  [Bug #1614]
 *  update MLWorks.String
 *
 *  Revision 1.5  1996/06/04  16:05:51  io
 *  stringcvt -> string_cvt
 *
 *  Revision 1.4  1996/05/30  11:32:43  daveb
 *  ord is now at top level.
 *
 *  Revision 1.3  1996/05/13  13:17:35  matthew
 *  Use reals for reading words
 *
 *  Revision 1.2  1996/05/10  14:40:09  matthew
 *  Adding scan function
 *
 *  Revision 1.1  1996/05/08  16:15:49  matthew
 *  new unit
 *  New stuff
 *
 * Revision 1.2  1996/04/30  15:34:54  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
 * Revision 1.1  1996/04/18  11:35:33  jont
 * new unit
 *
 *
 * Default size words (30-bit).
 *
 *)

require "__pre_word32";
require "__pre_int32";
require "__string_cvt";

structure PreWord =
  struct
    type word = word
    val wordSize = 30

    val cast = MLWorks.Internal.Value.cast

    val toInt : word -> int =
      fn w =>
      if (cast w : int) < 0 then raise Overflow
      else cast w
    val toIntX : word -> int = cast
    val fromInt : int -> word = cast

    val realmax = 256.0 * 256.0 * 256.0 * 64.0

    val toLargeWord : word -> MLWorks.Internal.Types.word32 =
      PreWord32.fromInt o cast
    val toLargeWordX : word -> MLWorks.Internal.Types.word32 =
      MLWorks.Internal.Runtime.environment "word32 extend int to word32"
    val fromLargeWord : MLWorks.Internal.Types.word32 -> word =
      MLWorks.Internal.Runtime.environment "word32 word32 to word"
    val toLargeInt : word -> MLWorks.Internal.Types.int32 = 
      cast o toLargeWord
    val toLargeIntX : word -> MLWorks.Internal.Types.int32 =
      PreLargeInt.fromInt o cast
    val fromLargeInt : MLWorks.Internal.Types.int32 -> word = 
      fromLargeWord o cast

    val fromReal : real -> word =
      MLWorks.Internal.Runtime.environment "word real to word"
    val toReal : word -> real =
      MLWorks.Internal.Runtime.environment "word word to real"
    val orb = MLWorks.Internal.Word.word_orb
    val xorb = MLWorks.Internal.Word.word_xorb
    val andb = MLWorks.Internal.Word.word_andb
    val notb = MLWorks.Internal.Word.word_notb

    fun makeString (base,n) =
      if n = 0w0 then "0"
      else
        let
          fun make_digit digit =
            if digit >= 10 then chr (ord #"A" + digit - 10)
            else chr (ord #"0" + digit)
          fun makedigits (0w0,acc) = acc
            | makedigits (n,acc) =
              let
                val digit = toInt (n mod base)
                val n' = n div base
              in 
                makedigits (n',make_digit digit :: acc)
              end
        in
          implode (makedigits (n,[]))
        end

    fun tobase StringCvt.BIN = 0w2
      | tobase StringCvt.OCT = 0w8
      | tobase StringCvt.DEC = 0w10
      | tobase StringCvt.HEX = 0w16
      
    fun fmt radix n =
      makeString (tobase radix,n)

    fun toString n = fmt StringCvt.HEX n

    fun scan radix getc src =
      let
        val base = tobase radix
        val ibase = toInt base
        val rbase = real ibase

        fun skip_prefix src =
          case getc src of
            SOME (#"0",src') =>
              (case getc src' of
                 SOME (#"w",src'') => src''
               | _ => src)
          | _ => src

        fun isDigit a =
          if ibase <= 10
            then 
              a >= ord #"0" andalso
              a < ord #"0" + ibase
          else
            (a >= ord #"0" andalso a < ord #"0" + 10) orelse
            (a >= ord #"A" andalso a < ord #"A" + ibase - 10) orelse
            (a >= ord #"a" andalso a < ord #"a" + ibase - 10)

        exception Valof
        fun valof n =
          if n >= ord #"0" andalso n <= ord #"9"
            then n - ord #"0"
          else if n >= ord #"a" andalso n <= ord #"z"
                 then n - ord #"a" + 10
          else if n >= ord #"A" andalso n <= ord #"Z"
                 then n - ord #"A" + 10
               else raise Valof

        fun convert_digits s =
          let
            fun convert ([],acc) = acc
              | convert (c :: rest,acc) =
                convert (rest,acc * rbase + real (valof c))
            val x = convert (map ord (explode s),0.0)
          in
            if x >= realmax
              then raise Overflow
            else fromReal x
          end
        val src = skip_prefix (StringCvt.skipWS getc src)
      in
        case StringCvt.splitl (isDigit o ord) getc src of
          ("",src) => NONE
        | (digits,src) => 
            SOME (convert_digits digits,src)
      end

    val fromString = StringCvt.scanString (scan StringCvt.HEX)

    val op+ = op+ : word* word -> word
    val op- = op- : word* word -> word
    val op* = op* : word* word -> word
    val op div = op div : word* word -> word
    val op mod = op mod : word* word -> word

    val << = MLWorks.Internal.Word.word_lshift
    val >> = MLWorks.Internal.Word.word_rshift
    val ~>> = MLWorks.Internal.Word.word_arshift

    val op < = op < : word * word -> bool
    val op > = op > : word * word -> bool
    val op <= = op <= : word * word -> bool
    val op >= = op >= : word * word -> bool

    fun compare (w1,w2) =
      if w1 < w2 then LESS
      else if w1 = w2 then EQUAL
      else GREATER

    fun max (a,b) = if a > b then a else b
    fun min (a,b) = if a < b then a else b

  end

@


1.9.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a9 4
 *  Revision 1.9  1999/02/17  14:48:40  mitchell
 *  [Bug #190507]
 *  Modify to satisfy CM constraints.
 *
@


1.8
log
@[Bug #1892]
rename __pre{integer,int32,real,word{,32}} to
       __pre_{int{,32},real,word{,32}}
@
text
@d10 5
d57 1
a57 1
structure Word =
d74 1
a74 1
      Word32.fromInt o cast
d82 1
a82 1
      LargeInt.fromInt o cast
@


1.8.3.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a9 5
 *  Revision 1.8  1997/01/14  17:52:45  io
 *  [Bug #1892]
 *  rename __pre{integer,int32,real,word{,32}} to
 *         __pre_{int{,32},real,word{,32}}
 *
@


1.8.2.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a9 5
 *  Revision 1.8  1997/01/14  17:52:45  io
 *  [Bug #1892]
 *  rename __pre{integer,int32,real,word{,32}} to
 *         __pre_{int{,32},real,word{,32}}
 *
@


1.8.1.1
log
@branched from 1.8
@
text
@a9 5
 *  Revision 1.8  1997/01/14  17:52:45  io
 *  [Bug #1892]
 *  rename __pre{integer,int32,real,word{,32}} to
 *         __pre_{int{,32},real,word{,32}}
 *
@


1.8.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a9 3
 *  Revision 1.8.1.1  1997/05/12  10:28:28  hope
 *  branched from 1.8
 *
@


1.8.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a9 3
 *  Revision 1.8.1.1  1997/05/12  10:28:28  hope
 *  branched from 1.8
 *
@


1.8.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a9 3
 *  Revision 1.8.1.1  1997/05/12  10:28:28  hope
 *  branched from 1.8
 *
@


1.8.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a9 3
 *  Revision 1.8.1.1.1.1  1997/07/28  18:14:28  daveb
 *  branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.7
log
@[Bug #1614]
remove redundant requires
@
text
@d9 5
a13 1
 *  $Log: __preword.sml,v $
d48 2
a49 2
require "__preword32";
require "__preint32";
@


1.7.6.1
log
@branched from 1.7
@
text
@a9 4
 *  Revision 1.7  1996/10/03  14:56:28  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.7.5.1
log
@branched from 1.7
@
text
@a9 4
 *  Revision 1.7  1996/10/03  14:56:28  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.7.4.1
log
@branched from 1.7
@
text
@a9 4
 *  Revision 1.7  1996/10/03  14:56:28  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.7.3.1
log
@branched from 1.7
@
text
@a9 4
 *  Revision 1.7  1996/10/03  14:56:28  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.7.3.1.1.1
log
@branched from 1.7.3.1
@
text
@a9 3
 *  Revision 1.7.3.1  1996/11/14  12:43:24  hope
 *  branched from 1.7
 *
@


1.7.2.1
log
@branched from 1.7
@
text
@a9 4
 *  Revision 1.7  1996/10/03  14:56:28  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.7.1.1
log
@branched from 1.7
@
text
@a9 4
 *  Revision 1.7  1996/10/03  14:56:28  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.6
log
@[Bug #1614]
update MLWorks.String
@
text
@d10 4
a43 1
require "toplevel";
@


1.5
log
@stringcvt -> string_cvt
@
text
@d10 3
d88 2
a89 2
            if digit >= 10 then String.chr (String.ord "A" + digit - 10)
            else String.chr (String.ord "0" + digit)
d99 1
a99 1
          String.implode (makedigits (n,[]))
d151 1
a151 1
            val x = convert (map String.ord (String.explode s),0.0)
@


1.5.1.1
log
@branched from 1.5
@
text
@a9 3
 *  Revision 1.5  1996/06/04  16:05:51  io
 *  stringcvt -> string_cvt
 *
@


1.4
log
@ord is now at top level.
@
text
@d10 3
d40 1
a40 1
require "__stringcvt";
@


1.3
log
@Use reals for reading words
@
text
@d10 3
d123 2
a124 2
              a >= Char.ord #"0" andalso
              a < Char.ord #"0" + ibase
d126 3
a128 3
            (a >= Char.ord #"0" andalso a < Char.ord #"0" + 10) orelse
            (a >= Char.ord #"A" andalso a < Char.ord #"A" + ibase - 10) orelse
            (a >= Char.ord #"a" andalso a < Char.ord #"a" + ibase - 10)
d132 6
a137 6
          if n >= Char.ord #"0" andalso n <= Char.ord #"9"
            then n - Char.ord #"0"
          else if n >= Char.ord #"a" andalso n <= Char.ord #"z"
                 then n - Char.ord #"a" + 10
          else if n >= Char.ord #"A" andalso n <= Char.ord #"Z"
                 then n - Char.ord #"A" + 10
d153 1
a153 1
        case StringCvt.splitl (isDigit o Char.ord) getc src of
@


1.2
log
@Adding scan function
@
text
@d10 3
d50 2
d53 1
a53 1
      MLWorks.Internal.Runtime.environment "word32 word to word32"
d55 1
a55 1
      Word32.fromInt o cast
d65 4
d107 1
d112 3
a114 15
              (case radix of
                 StringCvt.HEX =>
                   (case getc src' of
                      SOME (#"w",src'') =>
                        (case getc src'' of
                           SOME (#"x",src''') => src'''
                         | SOME (#"X",src''') => src'''
                         | _ => src)
                    | SOME (#"x",src'') => src''
                    | SOME (#"X",src'') => src''
                    | _ => src)
               | _ =>
                   (case getc src' of
                      SOME (#"w",src'') => src''
                    | _ => src))
d141 2
a142 1
                convert (rest,acc * base + fromInt (valof c))
d144 3
a146 1
            convert (map String.ord (String.explode s),0w0)
a147 1

@


1.1
log
@new unit
New stuff
@
text
@d9 5
a13 1
 *  $Log: __word.sml,v $
a37 3
    exception Dummy of string
    fun dummy s = raise Dummy s

d81 1
a81 1
          String.implode ("0w" :: makedigits (n,[]))
d92 63
a154 2
    fun toString n = fmt StringCvt.DEC n
    fun fromString s = dummy "fromString"
d156 1
a156 1
    fun scan _ = dummy "scan"
@
