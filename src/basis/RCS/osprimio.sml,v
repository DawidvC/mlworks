head	1.6;
access;
symbols
	MLWorks_Beta_1996_07_02:1.4
	MLWorks_Beta_1996_06_07:1.4
	MLWorks_Beta_1996_06_06:1.4
	MLWorks_Beta_1996_06_05:1.4
	MLWorks_Beta_1996_06_03:1.4
	MLWorks_Beta_1996_05_31:1.4
	MLWorks_Beta_1996_05_30:1.4;
locks; strict;
comment	@ * @;


1.6
date	96.07.11.17.30.52;	author andreww;	state Exp;
branches;
next	1.5;

1.5
date	96.07.02.15.20.05;	author andreww;	state Exp;
branches;
next	1.4;

1.4
date	96.05.24.10.53.01;	author andreww;	state Exp;
branches;
next	1.3;

1.3
date	96.05.20.12.31.45;	author jont;	state Exp;
branches;
next	1.2;

1.2
date	96.05.15.12.48.01;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	96.04.18.11.44.31;	author jont;	state Exp;
branches;
next	;


desc
@new unit
@


1.6
log
@altering standard in, out and err.
@
text
@(*  ==== INITIAL BASIS : OS_PRIM_IO ====
 *
 *  Copyright (C) 1995 Harlequin Ltd.
 *
 *  Description
 *  -----------
 *  This is part of the extended Initial Basis.
 *
 *  Revision Log
 *  ------------
 *  $Log: osprimio.sml,v $
 * Revision 1.5  1996/07/02  15:20:05  andreww
 * return in, out and error streams for both the gui and the terminal.
 * Standard In, Out and Error can be constructed from these in TextIO.
 *
 * Revision 1.4  1996/05/24  10:53:01  andreww
 * exposing BinPrimIO and TextBinIO.
 *
 * Revision 1.3  1996/05/20  12:31:45  jont
 * signature changes
 *
 * Revision 1.2  1996/05/15  12:48:01  jont
 * pack_words moved to pack_word
 *
 * Revision 1.1  1996/04/18  11:44:31  jont
 * new unit
 *
 *  Revision 1.3  1996/03/28  12:44:42  matthew
 *  New language definition
 *
 *  Revision 1.2  1996/02/29  15:34:52  jont
 *  Removing mkReader, shouldn't be in the interface.
 *
 *  Revision 1.1  1995/04/13  14:04:15  jont
 *  new unit
 *  No reason given
 *
 *
 *)

require "prim_io";
require "__word8";
require "__char";

signature OS_PRIM_IO =
sig
   type file_desc
   type bin_reader
   type text_reader
   type bin_writer
   type text_writer
   val openRd : string -> bin_reader
   val openWr : string -> bin_writer
   val openApp: string -> bin_writer
   val stdIn : bin_reader
   val stdOut: bin_writer
   val stdErr: bin_writer
   val translateIn : bin_reader-> text_reader
   val translateOut : bin_writer-> text_writer
end

@


1.5
log
@return in, out and error streams for both the gui and the terminal.
Standard In, Out and Error can be constructed from these in TextIO.
@
text
@d12 4
d55 3
a57 6
   val guiIn : bin_reader
   val guiOut : bin_writer
   val guiErr : bin_writer
   val terminalIn : bin_reader
   val terminalOut : bin_writer
   val terminalErr : bin_writer
@


1.4
log
@exposing BinPrimIO and TextBinIO.
@
text
@d12 3
d51 6
a56 3
   val stdIn : bin_reader
   val stdOut : bin_writer
   val stdErr : bin_writer
@


1.3
log
@signature changes
@
text
@d12 3
a39 2
   structure BinPrimIO: PRIM_IO
   structure TextPrimIO: PRIM_IO
d41 12
a52 8
   val openRd : string -> BinPrimIO.reader
   val openWr : string -> BinPrimIO.writer
   val openApp: string -> BinPrimIO.writer
   val stdIn : BinPrimIO.reader
   val stdOut : BinPrimIO.writer
   val stdErr : BinPrimIO.writer
   val translateIn : BinPrimIO.reader->TextPrimIO.reader
   val translateOut : BinPrimIO.writer->TextPrimIO.writer
a53 2
where type BinPrimIO.elem = Word8.word
      and TextPrimIO.elem = Char.char
@


1.2
log
@pack_words moved to pack_word
@
text
@d12 3
d31 1
a31 1
require "primio";
@


1.1
log
@new unit
@
text
@d11 4
a14 1
 *  $Log$
d30 1
a30 1
require "__chars";
@
