head	1.4;
access;
symbols
	MLW_daveb_inline_1_4_99:1.4.10
	MLWorks_21c0_1999_03_25:1.4
	MLWorks_20c1_1998_08_20:1.4
	MLWorks_20c0_1998_08_04:1.4
	MLWorks_20b2c2_1998_06_19:1.4
	MLWorks_20b2_Windows_1998_06_12:1.4
	MLWorks_20b1c1_1998_05_07:1.4
	MLWorks_20b0_1998_04_07:1.4
	MLWorks_20b0_1998_03_20:1.4
	MLWorks_20m2_1998_02_16:1.4
	MLWorks_20m1_1997_10_23:1.4
	MLWorks_11r1:1.4.7.1.1.1.1
	MLWorks_workspace_97:1.4.9
	MLWorks_dt_wizard:1.4.8
	MLWorks_11c0_1997_09_09:1.4.7.1.1.1
	MLWorks_10r3:1.4.7.1.3
	MLWorks_10r2_551:1.4.7.1.2
	MLWorks_11:1.4.7.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.4.7.1
	MLWorks_20m0_1997_06_20:1.4
	MLWorks_1_0_r2c2_1997_06_14:1.4.7.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.4.7.1
	MLWorks_1_0_r2c1_1997_05_12:1.4.7
	MLWorks_BugFix_1997_04_24:1.4
	MLWorks_1_0_r2_Win32_1997_04_11:1.4
	MLWorks_1_0_r2_Unix_1997_04_04:1.4
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.4.5.1.1
	MLWorks_gui_1996_12_18:1.4.6
	MLWorks_1_0_Win32_1996_12_17:1.4.5
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.4.3.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.4.3.1
	MLWorks_1_0_Irix_1996_11_28:1.4.3.1.1
	MLWorks_1_0_Win32_1996_11_22:1.4.4
	MLWorks_1_0_Unix_1996_11_14:1.4.3
	MLWorks_Open_Beta2_1996_10_11:1.4.2
	MLWorks_License_dev:1.4.1
	MLWorks_1_open_beta_1996_09_13:1.3.1
	MLWorks_Open_Beta_1996_08_22:1.3
	MLWorks_Beta_1996_07_02:1.3
	MLWorks_Beta_1996_06_07:1.3
	MLWorks_Beta_1996_06_06:1.3
	MLWorks_Beta_1996_06_05:1.3
	MLWorks_Beta_1996_06_03:1.3
	MLWorks_Beta_1996_05_31:1.3
	MLWorks_Beta_1996_05_30:1.3;
locks; strict;
comment	@ * @;


1.4
date	96.10.03.15.07.04;	author io;	state Exp;
branches
	1.4.1.1
	1.4.2.1
	1.4.3.1
	1.4.4.1
	1.4.5.1
	1.4.6.1
	1.4.7.1
	1.4.8.1
	1.4.9.1
	1.4.10.1;
next	1.3;

1.3
date	96.05.21.09.31.15;	author matthew;	state Exp;
branches
	1.3.1.1;
next	1.2;

1.2
date	96.05.08.16.23.12;	author matthew;	state Exp;
branches;
next	1.1;

1.1
date	96.04.18.11.37.05;	author jont;	state Exp;
branches;
next	;

1.3.1.1
date	96.09.13.11.10.35;	author hope;	state Exp;
branches;
next	;

1.4.1.1
date	96.10.07.16.01.20;	author hope;	state Exp;
branches;
next	;

1.4.2.1
date	96.10.17.11.19.35;	author hope;	state Exp;
branches;
next	;

1.4.3.1
date	96.11.14.12.43.09;	author hope;	state Exp;
branches
	1.4.3.1.1.1;
next	;

1.4.3.1.1.1
date	96.11.28.14.55.02;	author hope;	state Exp;
branches;
next	;

1.4.4.1
date	96.11.22.18.03.38;	author hope;	state Exp;
branches;
next	;

1.4.5.1
date	96.12.17.17.42.33;	author hope;	state Exp;
branches
	1.4.5.1.1.1;
next	;

1.4.5.1.1.1
date	97.02.24.11.31.07;	author hope;	state Exp;
branches;
next	;

1.4.6.1
date	96.12.18.09.36.32;	author hope;	state Exp;
branches;
next	;

1.4.7.1
date	97.05.12.10.28.46;	author hope;	state Exp;
branches
	1.4.7.1.1.1
	1.4.7.1.2.1
	1.4.7.1.3.1;
next	;

1.4.7.1.1.1
date	97.07.28.18.13.31;	author daveb;	state Exp;
branches
	1.4.7.1.1.1.1.1;
next	;

1.4.7.1.1.1.1.1
date	97.10.07.11.38.41;	author jkbrook;	state Exp;
branches;
next	;

1.4.7.1.2.1
date	97.09.08.17.06.55;	author daveb;	state Exp;
branches;
next	;

1.4.7.1.3.1
date	97.09.09.14.02.15;	author daveb;	state Exp;
branches;
next	;

1.4.8.1
date	97.09.10.19.16.41;	author brucem;	state Exp;
branches;
next	;

1.4.9.1
date	97.09.11.20.46.51;	author daveb;	state Exp;
branches;
next	;

1.4.10.1
date	99.04.01.17.52.18;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
@


1.4
log
@[Bug #1614]
remove redundant requires
@
text
@(*  ==== INITIAL BASIS : WORDS  ====
 *
 *  Copyright (C) 1995 Harlequin Ltd.
 *
 *  Revision Log
 *  ------------
 *  $Log: __word8.sml,v $
 * Revision 1.3  1996/05/21  09:31:15  matthew
 * Changed type of shift amount
 *
 * Revision 1.2  1996/05/08  16:23:12  matthew
 * Updating
 *
 * Revision 1.1  1996/04/18  11:37:05  jont
 * new unit
 *
 *  Revision 1.2  1995/09/12  14:25:05  daveb
 *  Updated to use overloaded built-in type.
 *
 *  Revision 1.1  1995/03/22  20:21:44  brianm
 *  new unit
 *  New file.
 *
 *
 *)

require "word";
require "__word";

structure Word8: WORD =
struct
  type word = MLWorks.Internal.Types.word8

  val wordSize = 8
  val wwordSize = 0w8 : Word.word

  val cast = MLWorks.Internal.Value.cast

  (* Here be magic numbers *)
  fun toWord (w : word) : Word.word = cast w
  fun castFromWord (w: Word.word): word = cast w
  fun maskFromWord (w: Word.word): word =
    cast (Word.andb (cast 0xff, w))
  fun checkFromWord (w:Word.word) : word =
    if w < 0w100 then castFromWord w
    else raise Overflow

  val maxW = (Word.<< (0w1,0w8) - 0w1)
  fun extend (w : word) : Word.word =
    Word.~>> (Word.<< (toWord w,0w22),0w22)
    
  fun toInt w = Word.toInt (toWord w)
  fun toIntX w = Word.toIntX (extend w)

  fun fromInt x = maskFromWord (Word.fromInt x)
  fun toLargeWord x = Word.toLargeWord (toWord x)
  fun toLargeInt x = Word.toLargeInt (toWord x)
  fun toLargeWordX x = Word.toLargeWordX (extend x)
  fun toLargeIntX x = Word.toLargeIntX (extend x)
  fun fromLargeWord x = maskFromWord (Word.fromLargeWord x)
  fun fromLargeInt x = maskFromWord (Word.fromLargeInt x)

  val orb = cast Word.orb : word * word -> word
  val xorb = cast Word.xorb : word * word -> word
  val andb = cast Word.andb : word * word -> word

  fun notb (w: word) = maskFromWord (Word.notb (toWord w))

  fun << (w, n) = maskFromWord (Word.<< (toWord w, n))

  fun >> (w, n) = maskFromWord (Word.>> (toWord w, n))

  fun ~>> (w, n) =
    if n >= wwordSize then
      if w >= 0wx80 then 0wxFF else 0w0
    else
      let
        val w' = Word.<< (toWord w, 0w22)
      in
        maskFromWord (Word.~>> (w', Word.+ (n, 0w22)))
      end

  fun toString w = Word.toString (toWord w)
  fun fmt radix w = Word.fmt radix (toWord w)

  fun fromString s = 
    case Word.fromString s of
      SOME w => if w < 0wx100 then SOME (castFromWord w) else raise Overflow
    | _ => NONE
  fun scan radix getc src =
    case Word.scan radix getc src of
      SOME (w,src') => if w < 0wx100 then SOME (castFromWord w,src')
                       else raise Overflow
    | _ => NONE

  val op+ = op+ : word * word -> word
  val op- = op- : word * word -> word
  val op* = op* : word * word -> word
  val op div = op div : word * word -> word
  val op mod = op mod : word * word -> word
  val op < = op < : word * word -> bool
  val op > = op > : word * word -> bool
  val op <= = op <= : word * word -> bool
  val op >= = op >= : word * word -> bool

  fun compare (w1,w2) =
    if w1 < w2 then LESS
    else if w1 = w2 then EQUAL
    else GREATER

  fun max (a : word, b) = if a > b then a else b
  fun min (a : word, b) = if a < b then a else b

end;

@


1.4.10.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a7 4
 * Revision 1.4  1996/10/03  15:07:04  io
 * [Bug #1614]
 * remove redundant requires
 *
@


1.4.9.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a7 4
 * Revision 1.4  1996/10/03  15:07:04  io
 * [Bug #1614]
 * remove redundant requires
 *
@


1.4.8.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a7 4
 * Revision 1.4  1996/10/03  15:07:04  io
 * [Bug #1614]
 * remove redundant requires
 *
@


1.4.7.1
log
@branched from 1.4
@
text
@a7 4
 * Revision 1.4  1996/10/03  15:07:04  io
 * [Bug #1614]
 * remove redundant requires
 *
@


1.4.7.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a7 3
 * Revision 1.4.7.1  1997/05/12  10:28:46  hope
 * branched from 1.4
 *
@


1.4.7.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a7 3
 * Revision 1.4.7.1  1997/05/12  10:28:46  hope
 * branched from 1.4
 *
@


1.4.7.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a7 3
 * Revision 1.4.7.1  1997/05/12  10:28:46  hope
 * branched from 1.4
 *
@


1.4.7.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a7 3
 * Revision 1.4.7.1.1.1  1997/07/28  18:13:31  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.4.6.1
log
@branched from 1.4
@
text
@a7 4
 * Revision 1.4  1996/10/03  15:07:04  io
 * [Bug #1614]
 * remove redundant requires
 *
@


1.4.5.1
log
@branched from 1.4
@
text
@a7 4
 * Revision 1.4  1996/10/03  15:07:04  io
 * [Bug #1614]
 * remove redundant requires
 *
@


1.4.5.1.1.1
log
@branched from 1.4.5.1
@
text
@a7 3
 * Revision 1.4.5.1  1996/12/17  17:42:33  hope
 * branched from 1.4
 *
@


1.4.4.1
log
@branched from 1.4
@
text
@a7 4
 * Revision 1.4  1996/10/03  15:07:04  io
 * [Bug #1614]
 * remove redundant requires
 *
@


1.4.3.1
log
@branched from 1.4
@
text
@a7 4
 * Revision 1.4  1996/10/03  15:07:04  io
 * [Bug #1614]
 * remove redundant requires
 *
@


1.4.3.1.1.1
log
@branched from 1.4.3.1
@
text
@a7 3
 * Revision 1.4.3.1  1996/11/14  12:43:09  hope
 * branched from 1.4
 *
@


1.4.2.1
log
@branched from 1.4
@
text
@a7 4
 * Revision 1.4  1996/10/03  15:07:04  io
 * [Bug #1614]
 * remove redundant requires
 *
@


1.4.1.1
log
@branched from 1.4
@
text
@a7 4
 * Revision 1.4  1996/10/03  15:07:04  io
 * [Bug #1614]
 * remove redundant requires
 *
@


1.3
log
@Changed type of shift amount
@
text
@d8 3
a26 1
require "toplevel";
a28 1
require "__preinteger";
@


1.3.1.1
log
@branched from 1.3
@
text
@a7 3
 * Revision 1.3  1996/05/21  09:31:15  matthew
 * Changed type of shift amount
 *
@


1.2
log
@Updating
@
text
@d8 3
d34 1
d68 1
a68 1
  fun << (w, n) = maskFromWord (Word.<< (toWord w, toWord n))
d70 1
a70 1
  fun >> (w, n) = maskFromWord (Word.>> (toWord w, toWord n))
d73 8
a80 5
    let
      val w' = Word.<< (toWord w, 0w22)
    in
      maskFromWord (Word.~>> (w', Word.+ (toWord n, 0w22)))
    end
@


1.1
log
@new unit
@
text
@d7 4
a10 1
 *  $Log$
d21 1
d24 1
d30 57
a86 14
  structure IntCvt =
  struct
    type word = word
    type other = int

    fun from i = MLWorks.Internal.Value.cast (i mod 256)
    val to = MLWorks.Internal.Value.cast
    fun extend w =
      let
	val w' = MLWorks.Internal.Value.cast w
      in
	if w' <= 127 then w' else (w' - 256)
      end
  end;
a87 1
  val wordSize = 8
d98 4
a101 2
  local
    val cast = MLWorks.Internal.Value.cast
d103 2
a104 19
    fun mask (w: Word.word): word =
      cast (Word.andb (cast 0xff, w))
  in
    val orb = cast Word.orb : word * word -> word
    val xorb = cast Word.xorb : word * word -> word
    val andb = cast Word.andb : word * word -> word

    fun notb (w: word) = mask (Word.notb (cast w))

    fun << (w, n) = mask (Word.<< (cast w, cast n))

    fun >> (w, n) = cast (Word.>> (cast w, cast n))

    fun ~>> (w, n) =
      let
        val w' = Word.<< (cast w, cast 22)
      in
        mask (Word.~>> (w', Word.+ (cast n, cast 22)))
      end
a105 2
    fun makestring w = Word.makestring (cast w)
  end
@
