head	1.6;
access;
symbols
	MLW_daveb_inline_1_4_99:1.6.1
	MLWorks_21c0_1999_03_25:1.6
	MLWorks_20c1_1998_08_20:1.5
	MLWorks_20c0_1998_08_04:1.5
	MLWorks_20b2c2_1998_06_19:1.5
	MLWorks_20b2_Windows_1998_06_12:1.5
	MLWorks_20b1c1_1998_05_07:1.5
	MLWorks_20b0_1998_04_07:1.5
	MLWorks_20b0_1998_03_20:1.5
	MLWorks_20m2_1998_02_16:1.5
	MLWorks_20m1_1997_10_23:1.5
	MLWorks_11r1:1.4.7.1.1.1.1
	MLWorks_workspace_97:1.5.2
	MLWorks_dt_wizard:1.5.1
	MLWorks_11c0_1997_09_09:1.4.7.1.1.1
	MLWorks_10r3:1.4.7.1.3
	MLWorks_10r2_551:1.4.7.1.2
	MLWorks_11:1.4.7.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.4.7.1
	MLWorks_20m0_1997_06_20:1.5
	MLWorks_1_0_r2c2_1997_06_14:1.4.7.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.4.7.1
	MLWorks_1_0_r2c1_1997_05_12:1.4.7
	MLWorks_BugFix_1997_04_24:1.4
	MLWorks_1_0_r2_Win32_1997_04_11:1.4
	MLWorks_1_0_r2_Unix_1997_04_04:1.4
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.4.5.1.1
	MLWorks_gui_1996_12_18:1.4.6
	MLWorks_1_0_Win32_1996_12_17:1.4.5
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.4.3.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.4.3.1
	MLWorks_1_0_Irix_1996_11_28:1.4.3.1.1
	MLWorks_1_0_Win32_1996_11_22:1.4.4
	MLWorks_1_0_Unix_1996_11_14:1.4.3
	MLWorks_Open_Beta2_1996_10_11:1.4.2
	MLWorks_License_dev:1.4.1
	MLWorks_1_open_beta_1996_09_13:1.3.1
	MLWorks_Open_Beta_1996_08_22:1.3
	MLWorks_Beta_1996_07_02:1.3
	MLWorks_Beta_1996_06_07:1.3
	MLWorks_Beta_1996_06_06:1.3
	MLWorks_Beta_1996_06_05:1.3
	MLWorks_Beta_1996_06_03:1.2
	MLWorks_Beta_1996_05_31:1.2
	MLWorks_Beta_1996_05_30:1.2;
locks; strict;
comment	@ *  @;


1.6
date	99.02.17.14.31.13;	author mitchell;	state Exp;
branches
	1.6.1.1;
next	1.5;

1.5
date	97.05.27.14.24.54;	author matthew;	state Exp;
branches
	1.5.1.1
	1.5.2.1;
next	1.4;

1.4
date	96.10.03.14.45.53;	author io;	state Exp;
branches
	1.4.1.1
	1.4.2.1
	1.4.3.1
	1.4.4.1
	1.4.5.1
	1.4.6.1
	1.4.7.1;
next	1.3;

1.3
date	96.06.04.18.22.10;	author io;	state Exp;
branches
	1.3.1.1;
next	1.2;

1.2
date	96.05.07.11.55.49;	author io;	state Exp;
branches;
next	1.1;

1.1
date	96.05.02.19.27.15;	author io;	state Exp;
branches;
next	;

1.3.1.1
date	96.09.13.11.09.57;	author hope;	state Exp;
branches;
next	;

1.4.1.1
date	96.10.07.16.00.50;	author hope;	state Exp;
branches;
next	;

1.4.2.1
date	96.10.17.11.19.05;	author hope;	state Exp;
branches;
next	;

1.4.3.1
date	96.11.14.12.42.39;	author hope;	state Exp;
branches
	1.4.3.1.1.1;
next	;

1.4.3.1.1.1
date	96.11.28.14.54.32;	author hope;	state Exp;
branches;
next	;

1.4.4.1
date	96.11.22.18.03.08;	author hope;	state Exp;
branches;
next	;

1.4.5.1
date	96.12.17.17.42.03;	author hope;	state Exp;
branches
	1.4.5.1.1.1;
next	;

1.4.5.1.1.1
date	97.02.24.11.30.25;	author hope;	state Exp;
branches;
next	;

1.4.6.1
date	96.12.18.09.36.00;	author hope;	state Exp;
branches;
next	;

1.4.7.1
date	97.05.12.10.28.07;	author hope;	state Exp;
branches
	1.4.7.1.1.1
	1.4.7.1.2.1
	1.4.7.1.3.1;
next	;

1.4.7.1.1.1
date	97.07.28.18.14.07;	author daveb;	state Exp;
branches
	1.4.7.1.1.1.1.1;
next	;

1.4.7.1.1.1.1.1
date	97.10.07.11.39.14;	author jkbrook;	state Exp;
branches;
next	;

1.4.7.1.2.1
date	97.09.08.17.07.33;	author daveb;	state Exp;
branches;
next	;

1.4.7.1.3.1
date	97.09.09.14.02.47;	author daveb;	state Exp;
branches;
next	;

1.5.1.1
date	97.09.10.19.17.15;	author brucem;	state Exp;
branches;
next	;

1.5.2.1
date	97.09.11.20.47.51;	author daveb;	state Exp;
branches;
next	;

1.6.1.1
date	99.04.01.17.52.29;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
@


1.6
log
@[Bug #190507]
Modify to satisfy CM constraints.
@
text
@(*  ==== INITIAL BASIS : Bool structure ====
 *
 *  Copyright (C) 1996 Harlequin Ltd.
 *
 *  Description
 *  -----------
 *  This is part of the extended Initial Basis.
 *
 *  Revision Log
 *  ------------
 *  $Log: __bool.sml,v $
 *  Revision 1.5  1997/05/27  14:24:54  matthew
 *  Adding datatypes
 *
 *  Revision 1.4  1996/10/03  14:45:53  io
 *  [Bug #1614]
 *  remove redundant requires
 *
 *  Revision 1.3  1996/06/04  18:22:10  io
 *  stringcvt -> string_cvt
 *
 *  Revision 1.2  1996/05/07  11:55:49  io
 *  remove potential circularity conflict
 *
 *  Revision 1.1  1996/05/02  19:27:15  io
 *  new unit
 *
 *)
require "bool";
require "__pre_string_cvt";
require "__char";

structure Bool : BOOL = 
  struct
    datatype bool = datatype bool
    fun not false = true
      | not true = false
    fun toString true = "true"
      | toString false = "false"
    fun scan getc cs = 
      let val cs = PreStringCvt.skipWS getc cs
      in
        case getc cs of
          SOME (c, cs) =>
            (case Char.toLower c of
               #"t" =>
               (case PreStringCvt.splitlNC 3 (Char.contains "rueRUE") (Char.toLower) getc cs  of
                  ([#"r", #"u", #"e"], cs) => SOME (true, cs)
                | (_, _) => NONE)
             | #"f" =>
               (case PreStringCvt.splitlNC 4 (Char.contains "alseALSE") (Char.toLower) getc cs of
                  ([#"a", #"l", #"s", #"e"], cs) => SOME (false, cs)
                  | (_, _) => NONE)
             | _ => NONE)
        | NONE => NONE
      end
    fun fromString "" = NONE
      | fromString s = PreStringCvt.scanString scan s
  end
@


1.6.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a11 4
 *  Revision 1.6  1999/02/17  14:31:13  mitchell
 *  [Bug #190507]
 *  Modify to satisfy CM constraints.
 *
@


1.5
log
@Adding datatypes
@
text
@d12 3
d41 1
a41 1
      let val cs = StringCvt.skipWS getc cs
d47 1
a47 1
               (case StringCvt.splitlNC 3 (Char.contains "rueRUE") (Char.toLower) getc cs  of
d51 1
a51 1
               (case StringCvt.splitlNC 4 (Char.contains "alseALSE") (Char.toLower) getc cs of
d58 1
a58 1
      | fromString s = StringCvt.scanString scan s
@


1.5.2.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a11 3
 *  Revision 1.5  1997/05/27  14:24:54  matthew
 *  Adding datatypes
 *
@


1.5.1.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a11 3
 *  Revision 1.5  1997/05/27  14:24:54  matthew
 *  Adding datatypes
 *
@


1.4
log
@[Bug #1614]
remove redundant requires
@
text
@d12 4
d32 1
a32 1
    type bool = bool
@


1.4.7.1
log
@branched from 1.4
@
text
@a11 4
 *  Revision 1.4  1996/10/03  14:45:53  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.4.7.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a11 3
 *  Revision 1.4.7.1  1997/05/12  10:28:07  hope
 *  branched from 1.4
 *
@


1.4.7.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a11 3
 *  Revision 1.4.7.1  1997/05/12  10:28:07  hope
 *  branched from 1.4
 *
@


1.4.7.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a11 3
 *  Revision 1.4.7.1  1997/05/12  10:28:07  hope
 *  branched from 1.4
 *
@


1.4.7.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a11 3
 *  Revision 1.4.7.1.1.1  1997/07/28  18:14:07  daveb
 *  branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.4.6.1
log
@branched from 1.4
@
text
@a11 4
 *  Revision 1.4  1996/10/03  14:45:53  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.4.5.1
log
@branched from 1.4
@
text
@a11 4
 *  Revision 1.4  1996/10/03  14:45:53  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.4.5.1.1.1
log
@branched from 1.4.5.1
@
text
@a11 3
 *  Revision 1.4.5.1  1996/12/17  17:42:03  hope
 *  branched from 1.4
 *
@


1.4.4.1
log
@branched from 1.4
@
text
@a11 4
 *  Revision 1.4  1996/10/03  14:45:53  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.4.3.1
log
@branched from 1.4
@
text
@a11 4
 *  Revision 1.4  1996/10/03  14:45:53  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.4.3.1.1.1
log
@branched from 1.4.3.1
@
text
@a11 3
 *  Revision 1.4.3.1  1996/11/14  12:42:39  hope
 *  branched from 1.4
 *
@


1.4.2.1
log
@branched from 1.4
@
text
@a11 4
 *  Revision 1.4  1996/10/03  14:45:53  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.4.1.1
log
@branched from 1.4
@
text
@a11 4
 *  Revision 1.4  1996/10/03  14:45:53  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.3
log
@stringcvt -> string_cvt
@
text
@d12 3
a21 1
require "toplevel";
@


1.3.1.1
log
@branched from 1.3
@
text
@a11 3
 *  Revision 1.3  1996/06/04  18:22:10  io
 *  stringcvt -> string_cvt
 *
@


1.2
log
@remove potential circularity conflict
@
text
@d12 3
d21 2
a22 2
require "__pre_char";
require "__stringcvt";
d26 1
a26 26
    (* local *)
    fun getNChar (n:int) getc cs =
      let
        fun aux (acc, i, cs) = 
          if i < n then
            case getc cs of
              SOME (c, cs') => aux (PreChar.toLower c::acc, i+1, cs')
            | NONE => (acc, cs)
          else
            (acc, cs)
        val (acc, cs') = aux ([], 0, cs)
      in
        if acc = [] then
          NONE
        else
          SOME (rev acc, cs')
      end
    fun check_rue getc cs = 
      case getNChar 3 getc cs of
        SOME ([#"r", #"u", #"e"], cs') => SOME (true, cs')
      | _ => NONE
    fun check_alse getc cs = 
      case getNChar 4 getc cs of
        SOME ([#"a", #"l", #"s", #"e"], cs') => SOME (false, cs')
      | _ => NONE
    (* end of local stuff *)
d35 12
a46 10
          SOME (c, cs') =>
            let val c = PreChar.toLower c in
              if c = #"t" then
                check_rue getc cs'
              else if c = #"f" then
                check_alse getc cs'
              else
                NONE
            end
        | _ => NONE
@


1.1
log
@new unit
@
text
@d11 4
a14 1
 *  $Log$
d18 1
d23 1
a23 20
    (* sort where to move stuff to later 
     * needed to avoid circular dependency between basis/char, basis/string, basis/stringcvt
     *)
    val ctoi : char -> int = MLWorks.Internal.Value.cast
    val itoc : int -> char = MLWorks.Internal.Value.cast
    local
      val a : char = #"a"
      val A : char = #"A"
      val Z : char = #"Z"
      val isUpper : char -> bool = fn c=> 
        let val i = ctoi c in
          ctoi A <= i andalso i <= ctoi Z
        end
    in
      val isUpper : char -> bool = fn c=> A <= c andalso c <=  Z
      val toLower : char -> char = fn c=> 
        if isUpper c then itoc ((ctoi c) - (ctoi A) + (ctoi a))
        else c
    end
    (* local stuff *)
d29 1
a29 1
              SOME (c, cs') => aux (toLower c::acc, i+1, cs')
d58 1
a58 1
            let val c = toLower c in
@
