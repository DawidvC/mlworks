head	1.6;
access;
symbols
	MLW_daveb_inline_1_4_99:1.6.1
	MLWorks_21c0_1999_03_25:1.6
	MLWorks_20c1_1998_08_20:1.6
	MLWorks_20c0_1998_08_04:1.6
	MLWorks_20b2c2_1998_06_19:1.6
	MLWorks_20b2_Windows_1998_06_12:1.6
	MLWorks_20b1c1_1998_05_07:1.6
	MLWorks_20b0_1998_04_07:1.6
	MLWorks_20b0_1998_03_20:1.6
	MLWorks_20m2_1998_02_16:1.5
	MLWorks_20m1_1997_10_23:1.5
	MLWorks_11r1:1.4.7.1.1.2.1
	MLWorks_workspace_97:1.5.2
	MLWorks_dt_wizard:1.5.1
	MLWorks_11c0_1997_09_09:1.4.7.1.1.2
	MLWorks_10r3:1.4.7.1.3
	MLWorks_10r2_551:1.4.7.1.2
	MLWorks_11:1.4.7.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.4.7.1
	MLWorks_20m0_1997_06_20:1.4
	MLWorks_1_0_r2c2_1997_06_14:1.4.7.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.4.7.1
	MLWorks_1_0_r2c1_1997_05_12:1.4.7
	MLWorks_BugFix_1997_04_24:1.4
	MLWorks_1_0_r2_Win32_1997_04_11:1.4
	MLWorks_1_0_r2_Unix_1997_04_04:1.4
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.4.5.1.1
	MLWorks_gui_1996_12_18:1.4.6
	MLWorks_1_0_Win32_1996_12_17:1.4.5
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.4.3.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.4.3.1
	MLWorks_1_0_Irix_1996_11_28:1.4.3.1.1
	MLWorks_1_0_Win32_1996_11_22:1.4.4
	MLWorks_1_0_Unix_1996_11_14:1.4.3
	MLWorks_Open_Beta2_1996_10_11:1.4.2
	MLWorks_License_dev:1.4.1
	MLWorks_1_open_beta_1996_09_13:1.3.1
	MLWorks_Open_Beta_1996_08_22:1.3
	MLWorks_Beta_1996_07_02:1.3
	MLWorks_Beta_1996_06_07:1.3
	MLWorks_Beta_1996_06_06:1.3
	MLWorks_Beta_1996_06_05:1.3
	MLWorks_Beta_1996_06_03:1.3
	MLWorks_Beta_1996_05_31:1.3
	MLWorks_Beta_1996_05_30:1.3;
locks; strict;
comment	@ *  @;


1.6
date	98.02.19.16.43.28;	author mitchell;	state Exp;
branches
	1.6.1.1;
next	1.5;

1.5
date	97.08.08.16.27.32;	author brucem;	state Exp;
branches
	1.5.1.1
	1.5.2.1;
next	1.4;

1.4
date	96.10.03.15.00.11;	author io;	state Exp;
branches
	1.4.1.1
	1.4.2.1
	1.4.3.1
	1.4.4.1
	1.4.5.1
	1.4.6.1
	1.4.7.1;
next	1.3;

1.3
date	96.05.21.12.22.54;	author matthew;	state Exp;
branches
	1.3.1.1;
next	1.2;

1.2
date	96.05.17.11.41.01;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	96.05.07.16.49.54;	author jont;	state Exp;
branches;
next	;

1.3.1.1
date	96.09.13.11.10.04;	author hope;	state Exp;
branches;
next	;

1.4.1.1
date	96.10.07.16.00.57;	author hope;	state Exp;
branches;
next	;

1.4.2.1
date	96.10.17.11.19.12;	author hope;	state Exp;
branches;
next	;

1.4.3.1
date	96.11.14.12.42.44;	author hope;	state Exp;
branches
	1.4.3.1.1.1;
next	;

1.4.3.1.1.1
date	96.11.28.14.54.36;	author hope;	state Exp;
branches;
next	;

1.4.4.1
date	96.11.22.18.03.13;	author hope;	state Exp;
branches;
next	;

1.4.5.1
date	96.12.17.17.42.08;	author hope;	state Exp;
branches
	1.4.5.1.1.1;
next	;

1.4.5.1.1.1
date	97.02.24.11.30.32;	author hope;	state Exp;
branches;
next	;

1.4.6.1
date	96.12.18.09.36.05;	author hope;	state Exp;
branches;
next	;

1.4.7.1
date	97.05.12.10.28.15;	author hope;	state Exp;
branches
	1.4.7.1.1.1
	1.4.7.1.2.1
	1.4.7.1.3.1;
next	;

1.4.7.1.1.1
date	97.07.28.18.13.31;	author daveb;	state Exp;
branches;
next	1.4.7.1.1.2;

1.4.7.1.1.2
date	97.08.12.08.47.13;	author johnh;	state Exp;
branches
	1.4.7.1.1.2.1.1;
next	;

1.4.7.1.1.2.1.1
date	97.10.07.11.38.40;	author jkbrook;	state Exp;
branches;
next	;

1.4.7.1.2.1
date	97.09.08.17.06.54;	author daveb;	state Exp;
branches;
next	;

1.4.7.1.3.1
date	97.09.09.14.02.14;	author daveb;	state Exp;
branches;
next	;

1.5.1.1
date	97.09.10.19.16.40;	author brucem;	state Exp;
branches;
next	;

1.5.2.1
date	97.09.11.20.46.50;	author daveb;	state Exp;
branches;
next	;

1.6.1.1
date	99.04.01.17.52.18;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
@


1.6
log
@[Bug #30349]
Fix to avoid non-unit sequence warnings
@
text
@(*  ==== INITIAL BASIS :  VECTORS ====
 *
 *  Copyright (C) 1996 Harlequin Ltd.
 *
 *  Description
 *  -----------
 *  This is part of the extended Initial Basis.
 *
 *  Revision Log
 *  ------------
 *  $Log: __vector.sml,v $
 *  Revision 1.5  1997/08/08  16:27:32  brucem
 *  [Bug #30086]
 *  Add map and mapi.
 *
 *  Revision 1.4  1996/10/03  15:00:11  io
 *  [Bug #1614]
 *  remove redundant requires
 *
 *  Revision 1.3  1996/05/21  12:22:54  matthew
 *  Updating
 *
 *  Revision 1.2  1996/05/17  11:41:01  jont
 *  maxint has become maxInt
 *
 *  Revision 1.1  1996/05/07  16:49:54  jont
 *  new unit
 *
 *
 *)

require "vector";

structure Vector : VECTOR =
  struct
    structure Bits = MLWorks.Internal.Bits
    
    type 'a vector = 'a MLWorks.Internal.Vector.vector

    val maxLen = MLWorks.Internal.Vector.maxLen
    fun check_size n = if n < 0 orelse n > maxLen then raise Size else n
    fun fromList l = 
      (ignore(check_size (length l)); MLWorks.Internal.Vector.vector l)
    fun tabulate (n,f) = MLWorks.Internal.Vector.tabulate (check_size n, f)
    val length = MLWorks.Internal.Vector.length
    val sub = MLWorks.Internal.Vector.sub
    fun extract(vector, i, j) =
      let
        val veclen = length vector
	val len = case j of
	  SOME len => len
	| NONE => veclen - i
      in
        if i < 0 orelse i > veclen orelse len < 0 orelse i + len > veclen
          then raise Subscript
        else
          tabulate(len, fn n => sub(vector, i+n))
      end

    (* Damn fine bit of code this *)
    fun concat [] = fromList []
      | concat (veclist : 'a vector list) =
        let
          fun count ([],acc) = acc
            | count (a::l,acc) = count (l,length a + acc)
          val size = count (veclist,0)
          val _ = check_size size
          val vector : 'a vector =
                MLWorks.Internal.Value.cast
                  (MLWorks.Internal.Value.alloc_vector size)
          fun loop (i,[]) = ()
            | loop (i,a::l) =
              let
                val s = length a
                fun loop2 (j,k) =
                  if k = s then j
                  else
                    (MLWorks.Internal.Value.unsafe_record_update
                      (vector,j,sub (a,k));
                     loop2 (j+1,k+1))
              in
                loop (loop2 (i,0),l)
              end
        in
          loop (0,veclist);
          vector
        end
            
    fun check_slice (v, i, SOME j) =
      if i < 0 orelse j < 0 orelse i + j > length v
        then raise Subscript
      else j
      | check_slice (v, i, NONE) =
        let
          val l = length v
        in
          if i < 0 orelse i > l
            then raise Subscript
          else l - i
        end

    fun appi f (vector, i, j) =
      let
	val len = check_slice(vector, i, j)
	fun iterate n =
	  if n >= i+len then
	    ()
	  else
	    (ignore(f(n, sub(vector, n)));
	     iterate(n+1))
      in
	iterate i
      end

    fun app f vector =
      let
	val l = length vector
	fun iterate n =
	  if n = l then
	    ()
	  else
	    (ignore(f(sub(vector, n)));
	     iterate(n+1))
      in
	iterate 0
      end

    fun foldl f b vector =
      let
	val l = length vector
	fun reduce(n, x) =
	  if n = l then
	    x
	  else
	    reduce(n+1, f(sub(vector, n), x))
      in
	reduce(0, b)
      end

    fun foldr f b vector =
      let
	val l = length vector
	fun reduce(n, x) =
	  if n < 0 then
	    x
	  else
	    reduce(n-1, f(sub(vector, n), x))
      in
	reduce(l-1, b)
      end

    fun foldli f b (vector, i, j) =
      let
	val len = check_slice(vector, i, j)
	fun reduce(n, x) =
	  if n >= len then
	    x
	  else
	    reduce(n+1, f(n, sub(vector, n), x))
      in
	reduce(0, b)
      end

    fun foldri f b (vector, i, j) =
      let
	val len = check_slice (vector, i, j)
	fun reduce(n, x) =
	  if n < 0 then
	    x
	  else
	    reduce(n-1, f(n, sub(vector, n), x))
      in
	reduce(len-1, b)
      end

    fun map f v =
      let
        val l = length v
        fun f' i = f (sub(v, i))
      in
        tabulate (l, f')
      end

   fun mapi f (v, s, l) =
     let 
       val l' = check_slice (v, s, l)
       fun f' i = f (i+s, sub(v, i+s))
     in
       tabulate (l', f')
     end

  end (* of structure Vector *)
@


1.6.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a11 4
 *  Revision 1.6  1998/02/19  16:43:28  mitchell
 *  [Bug #30349]
 *  Fix to avoid non-unit sequence warnings
 *
@


1.5
log
@[Bug #30086]
Add map and mapi.
@
text
@d12 4
d43 1
a43 1
      (check_size (length l); MLWorks.Internal.Vector.vector l)
d109 1
a109 1
	    (f(n, sub(vector, n));
d122 1
a122 1
	    (f(sub(vector, n));
@


1.5.2.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a11 4
 *  Revision 1.5  1997/08/08  16:27:32  brucem
 *  [Bug #30086]
 *  Add map and mapi.
 *
@


1.5.1.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a11 4
 *  Revision 1.5  1997/08/08  16:27:32  brucem
 *  [Bug #30086]
 *  Add map and mapi.
 *
@


1.4
log
@[Bug #1614]
remove redundant requires
@
text
@d12 4
d64 3
a66 1
          val vector : 'a vector = MLWorks.Internal.Value.cast (MLWorks.Internal.Value.alloc_vector size)
d74 2
a75 1
                    (MLWorks.Internal.Value.unsafe_record_update (vector,j,sub (a,k));
d85 12
a96 32
(*        
	let
	  val len = length vec_list
	  val list_ref = ref vec_list
	  val hd_ref = ref hd
	  val start_index_ref = ref 0
	  val len_ref = ref(length hd)
	  fun next_elem n =
	    let
	      val vec = !hd_ref
	      val start = !start_index_ref
	    in
	      if n >= start + !len_ref then
		(* Off the end of this one *)
		let
		  val list = !list_ref
		  val hd = hd list
		  val tl = tl list
		in
		  list_ref := tl;
		  hd_ref := hd;
		  start_index_ref := n;
		  len_ref := length hd;
		  next_elem n
		end
	      else
		sub(!hd_ref, n-start)
	    end
	in
	  tabulate(len, next_elem)
	end
*)
d100 1
a100 4
	val l = length vector
	val len = case j of
	  SOME len => i+len
	| NONE => l
d102 1
a102 1
	  if n >= l then
d150 1
a150 4
	val l = length vector
	val len = case j of
	  SOME len => i+len
	| NONE => l
d162 1
a162 4
	val l = length vector
	val len = case j of
	  SOME len => i+len
	| NONE => l
d172 17
a188 1
  end
@


1.4.7.1
log
@branched from 1.4
@
text
@a11 4
 *  Revision 1.4  1996/10/03  15:00:11  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.4.7.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a11 3
 *  Revision 1.4.7.1  1997/05/12  10:28:15  hope
 *  branched from 1.4
 *
@


1.4.7.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a11 3
 *  Revision 1.4.7.1  1997/05/12  10:28:15  hope
 *  branched from 1.4
 *
@


1.4.7.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a11 3
 *  Revision 1.4.7.1  1997/05/12  10:28:15  hope
 *  branched from 1.4
 *
@


1.4.7.1.1.2
log
@[Bug #30086]
Merging - add map and mapi.
@
text
@a11 3
 *  Revision 1.4.7.1.1.1  1997/07/28  18:13:31  daveb
 *  branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
d67 1
a67 3
          val vector : 'a vector =
                MLWorks.Internal.Value.cast
                  (MLWorks.Internal.Value.alloc_vector size)
d75 1
a75 2
                    (MLWorks.Internal.Value.unsafe_record_update
                      (vector,j,sub (a,k));
d85 32
a116 12
    fun check_slice (v, i, SOME j) =
      if i < 0 orelse j < 0 orelse i + j > length v
        then raise Subscript
      else j
      | check_slice (v, i, NONE) =
        let
          val l = length v
        in
          if i < 0 orelse i > l
            then raise Subscript
          else l - i
        end
d120 4
a123 1
	val len = check_slice(vector, i, j)
d125 1
a125 1
	  if n >= i+len then
d173 4
a176 1
	val len = check_slice(vector, i, j)
d188 4
a191 1
	val len = check_slice (vector, i, j)
d201 1
a201 17
    fun map f v =
      let
        val l = length v
        fun f' i = f (sub(v, i))
      in
        tabulate (l, f')
      end

   fun mapi f (v, s, l) =
     let 
       val l' = check_slice (v, s, l)
       fun f' i = f (i+s, sub(v, i+s))
     in
       tabulate (l', f')
     end

  end (* of structure Vector *)
@


1.4.7.1.1.2.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a11 4
 *  Revision 1.4.7.1.1.2  1997/08/12  08:47:13  johnh
 *  [Bug #30086]
 *  Merging - add map and mapi.
 *
@


1.4.6.1
log
@branched from 1.4
@
text
@a11 4
 *  Revision 1.4  1996/10/03  15:00:11  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.4.5.1
log
@branched from 1.4
@
text
@a11 4
 *  Revision 1.4  1996/10/03  15:00:11  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.4.5.1.1.1
log
@branched from 1.4.5.1
@
text
@a11 3
 *  Revision 1.4.5.1  1996/12/17  17:42:08  hope
 *  branched from 1.4
 *
@


1.4.4.1
log
@branched from 1.4
@
text
@a11 4
 *  Revision 1.4  1996/10/03  15:00:11  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.4.3.1
log
@branched from 1.4
@
text
@a11 4
 *  Revision 1.4  1996/10/03  15:00:11  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.4.3.1.1.1
log
@branched from 1.4.3.1
@
text
@a11 3
 *  Revision 1.4.3.1  1996/11/14  12:42:44  hope
 *  branched from 1.4
 *
@


1.4.2.1
log
@branched from 1.4
@
text
@a11 4
 *  Revision 1.4  1996/10/03  15:00:11  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.4.1.1
log
@branched from 1.4
@
text
@a11 4
 *  Revision 1.4  1996/10/03  15:00:11  io
 *  [Bug #1614]
 *  remove redundant requires
 *
@


1.3
log
@Updating
@
text
@d12 3
a24 3
require "__integer";
require "__list";
require "toplevel";
d35 1
a35 1
      (check_size (List.length l); MLWorks.Internal.Vector.vector l)
d80 1
a80 1
	  val len = List.length vec_list
d94 2
a95 2
		  val hd = List.hd list
		  val tl = List.tl list
@


1.3.1.1
log
@branched from 1.3
@
text
@a11 3
 *  Revision 1.3  1996/05/21  12:22:54  matthew
 *  Updating
 *
@


1.2
log
@maxint has become maxInt
@
text
@d12 3
d28 2
d31 6
a36 3
    val MLWorks.Option.SOME maxLen = Int.maxInt
    val fromList = MLWorks.Internal.Vector.vector
    val tabulate = MLWorks.Internal.Vector.tabulate
d41 1
d44 1
a44 1
	| NONE => length vector-i
d46 4
a49 1
	tabulate(len, fn n => sub(vector, i+n))
d52 1
d54 25
a78 1
      | concat(vec_list as (hd :: _)) =
d109 1
@


1.1
log
@new unit
@
text
@d11 4
a14 1
 *  $Log$
d26 1
a26 1
    val MLWorks.Option.SOME maxLen = Int.maxint
@
