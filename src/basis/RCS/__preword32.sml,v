head	1.7;
access;
symbols
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.7.5.1.1
	MLWorks_gui_1996_12_18:1.7.6
	MLWorks_1_0_Win32_1996_12_17:1.7.5
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.7.3.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.7.3.1
	MLWorks_1_0_Irix_1996_11_28:1.7.3.1.1
	MLWorks_1_0_Win32_1996_11_22:1.7.4
	MLWorks_1_0_Unix_1996_11_14:1.7.3
	MLWorks_Open_Beta2_1996_10_11:1.7.2
	MLWorks_License_dev:1.7.1
	MLWorks_1_open_beta_1996_09_13:1.5.1
	MLWorks_Open_Beta_1996_08_22:1.5
	MLWorks_Beta_1996_07_02:1.5
	MLWorks_Beta_1996_06_07:1.5
	MLWorks_Beta_1996_06_06:1.5
	MLWorks_Beta_1996_06_05:1.5
	MLWorks_Beta_1996_06_03:1.4
	MLWorks_Beta_1996_05_31:1.4
	MLWorks_Beta_1996_05_30:1.3;
locks; strict;
comment	@ *  @;


1.7
date	96.10.03.14.14.53;	author io;	state Exp;
branches
	1.7.1.1
	1.7.2.1
	1.7.3.1
	1.7.4.1
	1.7.5.1
	1.7.6.1;
next	1.6;

1.6
date	96.10.03.12.59.36;	author io;	state Exp;
branches;
next	1.5;

1.5
date	96.06.04.18.09.01;	author io;	state Exp;
branches
	1.5.1.1;
next	1.4;

1.4
date	96.05.30.11.30.33;	author daveb;	state Exp;
branches;
next	1.3;

1.3
date	96.05.13.12.56.09;	author matthew;	state Exp;
branches;
next	1.2;

1.2
date	96.05.10.13.39.32;	author matthew;	state Exp;
branches;
next	1.1;

1.1
date	96.05.08.14.56.57;	author matthew;	state Exp;
branches;
next	;

1.5.1.1
date	96.09.13.11.09.55;	author hope;	state Exp;
branches;
next	;

1.7.1.1
date	96.10.07.16.00.47;	author hope;	state Exp;
branches;
next	;

1.7.2.1
date	96.10.17.11.19.02;	author hope;	state Exp;
branches;
next	;

1.7.3.1
date	96.11.14.12.42.36;	author hope;	state Exp;
branches
	1.7.3.1.1.1;
next	;

1.7.3.1.1.1
date	96.11.28.14.54.29;	author hope;	state Exp;
branches;
next	;

1.7.4.1
date	96.11.22.18.03.05;	author hope;	state Exp;
branches;
next	;

1.7.5.1
date	96.12.17.17.42.00;	author hope;	state Exp;
branches
	1.7.5.1.1.1;
next	;

1.7.5.1.1.1
date	97.02.24.11.30.22;	author hope;	state Exp;
branches;
next	;

1.7.6.1
date	96.12.18.09.35.57;	author hope;	state Exp;
branches;
next	;


desc
@new unit
New stuff
@


1.7
log
@[Bug #1614]
remove require general
@
text
@(*  ==== INITIAL BASIS : WORDS  ====
 *
 *  Copyright (C) 1995 Harlequin Ltd.
 *
 *  Revision Log
 *  ------------
 *  $Log: __preword32.sml,v $
 *  Revision 1.6  1996/10/03  12:59:36  io
 *  [Bug #1614]
 *  update MLWorks.String
 *
 *  Revision 1.5  1996/06/04  18:09:01  io
 *  stringcvt -> string_cvt
 *
 *  Revision 1.4  1996/05/30  11:30:33  daveb
 *  ord is now at top level.
 *
 *  Revision 1.3  1996/05/13  12:56:09  matthew
 *  Use reals for reading words
 *
 *  Revision 1.2  1996/05/10  13:39:32  matthew
 *  Adding scan
 *
 *  Revision 1.1  1996/05/08  14:56:57  matthew
 *  new unit
 *  New stuff
 *
 * Revision 1.1  1996/04/18  11:36:20  jont
 * new unit
 *
 *  Revision 1.5  1996/03/19  16:51:30  matthew
 *  Change for value polymorphism
 *
 *  Revision 1.4  1995/09/12  14:43:09  daveb
 *  Updated to use overloaded built-in type.
 *
 *  Revision 1.3  1995/08/08  10:57:09  matthew
 *  Changing representation from bytearrays to strings.
 *
 *  Revision 1.2  1995/04/04  10:19:07  brianm
 *  Changing repn. type back to bytearrays ...
 *
 * Revision 1.1  1995/03/22  20:20:26  brianm
 * new unit
 * New file.
 *
 *
 *)

require "__preinteger";
require "__string_cvt";

structure Word32 =
struct
  type word = MLWorks.Internal.Types.word32

  val wordSize = 32
  val env = MLWorks.Internal.Runtime.environment
  val cast =  MLWorks.Internal.Value.cast 

  val toInt  : word -> int = env "word32 word to int"
  val toIntX : word -> int = 
    fn w => Int.fromLarge (cast w)
  val fromInt : int -> word = env "word32 int to word32"

  fun toLargeWord x = x
  fun toLargeWordX x = x
  fun toLargeInt x = 
    let
      val i = cast x : MLWorks.Internal.Types.int32
    in
      if i < 0 then raise Overflow
        else i
    end
  fun toLargeIntX x = cast x
  fun fromLargeWord x = x
  fun fromLargeInt x = cast x

  val fromReal : real -> word =
    MLWorks.Internal.Runtime.environment "word real to word32"
  val toReal : word -> real =
    MLWorks.Internal.Runtime.environment "word word32 to real"

  val realmax = 256.0 * 256.0 * 256.0 * 256.0
  
  fun makeString (base,n) =
      if n = 0w0 then "0"
      else
        let
          fun make_digit digit =
            if digit >= 10 then chr (ord #"A" + digit - 10)
            else chr (ord #"0" + digit)
          fun makedigits (0w0,acc) = acc
            | makedigits (n,acc) =
              let
                val digit = toInt (n mod base)
                val n' = n div base
              in 
                makedigits (n',make_digit digit :: acc)
              end
        in
          implode (makedigits (n,[]))
        end

    fun tobase StringCvt.BIN = 0w2 : word
      | tobase StringCvt.OCT = 0w8 : word
      | tobase StringCvt.DEC = 0w10 : word
      | tobase StringCvt.HEX = 0w16 : word
      
    fun fmt radix n =
      makeString (tobase radix,n)

    fun toString n = fmt StringCvt.HEX n

    fun scan radix getc src =
      let
        val base = tobase radix
        val ibase = toInt base
        val rbase = real ibase

        fun skip_prefix src =
          case getc src of
            SOME (#"0",src') =>
              (case radix of
                 StringCvt.HEX =>
                   (case getc src' of
                      SOME (#"w",src'') =>
                        (case getc src'' of
                           SOME (#"x",src''') => src'''
                         | SOME (#"X",src''') => src'''
                         | _ => src)
                    | SOME (#"x",src'') => src''
                    | SOME (#"X",src'') => src''
                    | _ => src)
               | _ =>
                   (case getc src' of
                      SOME (#"w",src'') => src''
                    | _ => src))
          | _ => src

        fun isDigit a =
          if ibase <= 10
            then 
              a >= ord #"0" andalso
              a < ord #"0" + ibase
          else
            (a >= ord #"0" andalso a < ord #"0" + 10) orelse
            (a >= ord #"A" andalso a < ord #"A" + ibase - 10) orelse
            (a >= ord #"a" andalso a < ord #"a" + ibase - 10)

        exception Valof
        fun valof n =
          if n >= ord #"0" andalso n <= ord #"9"
            then n - ord #"0"
          else if n >= ord #"a" andalso n <= ord #"z"
                 then n - ord #"a" + 10
          else if n >= ord #"A" andalso n <= ord #"Z"
                 then n - ord #"A" + 10
               else raise Valof

        fun convert_digits s =
          let
            fun convert ([],acc) = acc
              | convert (c :: rest,acc) =
                convert (rest,acc * rbase + real (valof c))
	    val x = convert (map ord (explode s), 0.0)
          in
            if x >= realmax
              then raise Overflow
            else fromReal x
          end

        val src = skip_prefix (StringCvt.skipWS getc src)
      in
        case StringCvt.splitl (isDigit o ord) getc src of
          ("",src) => NONE
        | (digits,src) => 
            SOME (convert_digits digits,src)
      end

    val fromString = StringCvt.scanString (scan StringCvt.HEX)

  val op+ = op+ : word * word -> word
  val op- = op- : word * word -> word
  val op* = op* : word * word -> word
  val op div = op div : word * word -> word
  val op mod = op mod : word * word -> word
  val op < = op < : word * word -> bool
  val op > = op > : word * word -> bool
  val op <= = op <= : word * word -> bool
  val op >= = op >= : word * word -> bool

  fun compare (w1,w2) =
    if w1 < w2 then LESS
    else if w1 = w2 then EQUAL
    else GREATER

  val orb = MLWorks.Internal.Word32.word32_orb
  val xorb = MLWorks.Internal.Word32.word32_xorb
  val andb = MLWorks.Internal.Word32.word32_andb
  val notb = MLWorks.Internal.Word32.word32_notb

  val << = MLWorks.Internal.Word32.word32_lshift
  val >> = MLWorks.Internal.Word32.word32_rshift
  val ~>> = MLWorks.Internal.Word32.word32_arshift

  fun max (a,b) = if a > b then a else b
  fun min (a,b) = if a < b then a else b

end;

structure LargeWord = Word32;

@


1.7.6.1
log
@branched from 1.7
@
text
@a7 4
 *  Revision 1.7  1996/10/03  14:14:53  io
 *  [Bug #1614]
 *  remove require general
 *
@


1.7.5.1
log
@branched from 1.7
@
text
@a7 4
 *  Revision 1.7  1996/10/03  14:14:53  io
 *  [Bug #1614]
 *  remove require general
 *
@


1.7.5.1.1.1
log
@branched from 1.7.5.1
@
text
@a7 3
 *  Revision 1.7.5.1  1996/12/17  17:42:00  hope
 *  branched from 1.7
 *
@


1.7.4.1
log
@branched from 1.7
@
text
@a7 4
 *  Revision 1.7  1996/10/03  14:14:53  io
 *  [Bug #1614]
 *  remove require general
 *
@


1.7.3.1
log
@branched from 1.7
@
text
@a7 4
 *  Revision 1.7  1996/10/03  14:14:53  io
 *  [Bug #1614]
 *  remove require general
 *
@


1.7.3.1.1.1
log
@branched from 1.7.3.1
@
text
@a7 3
 *  Revision 1.7.3.1  1996/11/14  12:42:36  hope
 *  branched from 1.7
 *
@


1.7.2.1
log
@branched from 1.7
@
text
@a7 4
 *  Revision 1.7  1996/10/03  14:14:53  io
 *  [Bug #1614]
 *  remove require general
 *
@


1.7.1.1
log
@branched from 1.7
@
text
@a7 4
 *  Revision 1.7  1996/10/03  14:14:53  io
 *  [Bug #1614]
 *  remove require general
 *
@


1.6
log
@[Bug #1614]
update MLWorks.String
@
text
@d8 4
a49 2
require "toplevel";
require "__general";
@


1.5
log
@stringcvt -> string_cvt
@
text
@d8 3
d89 2
a90 2
            if digit >= 10 then String.chr (ord #"A" + digit - 10)
            else String.chr (ord #"0" + digit)
d100 1
a100 1
          String.implode (makedigits (n,[]))
d164 1
a164 1
            val x = convert (map String.ord (String.explode s),0.0)
@


1.5.1.1
log
@branched from 1.5
@
text
@a7 3
 *  Revision 1.5  1996/06/04  18:09:01  io
 *  stringcvt -> string_cvt
 *
@


1.4
log
@ord is now at top level.
@
text
@d8 3
d46 1
a46 1
require "__stringcvt";
d86 2
a87 2
            if digit >= 10 then String.chr (String.ord "A" + digit - 10)
            else String.chr (String.ord "0" + digit)
@


1.3
log
@Use reals for reading words
@
text
@d8 3
d136 2
a137 2
              a >= Char.ord #"0" andalso
              a < Char.ord #"0" + ibase
d139 3
a141 3
            (a >= Char.ord #"0" andalso a < Char.ord #"0" + 10) orelse
            (a >= Char.ord #"A" andalso a < Char.ord #"A" + ibase - 10) orelse
            (a >= Char.ord #"a" andalso a < Char.ord #"a" + ibase - 10)
d145 6
a150 6
          if n >= Char.ord #"0" andalso n <= Char.ord #"9"
            then n - Char.ord #"0"
          else if n >= Char.ord #"a" andalso n <= Char.ord #"z"
                 then n - Char.ord #"a" + 10
          else if n >= Char.ord #"A" andalso n <= Char.ord #"Z"
                 then n - Char.ord #"A" + 10
d167 1
a167 1
        case StringCvt.splitl (isDigit o Char.ord) getc src of
@


1.2
log
@Adding scan
@
text
@d8 3
d53 1
a53 1
  val fromInt : int -> word = env "word32 int to word"
d68 8
a75 1
    fun makeString (base,n) =
d91 1
a91 1
          String.implode ("0w" :: makedigits (n,[]))
d108 1
d154 2
a155 1
                convert (rest,acc * base + fromInt (valof c))
d157 3
a159 1
            convert (map String.ord (String.explode s),0w0)
@


1.1
log
@new unit
New stuff
@
text
@d7 5
a11 1
 *  $Log: __word32.sml,v $
a45 2
  exception Dummy of string
  fun dummy s = raise Dummy s
d92 63
a154 1
    fun toString n = fmt StringCvt.DEC n
d156 1
a156 2
  fun fromString x = dummy "fromString"
  fun scan _ = dummy "scan"
@
