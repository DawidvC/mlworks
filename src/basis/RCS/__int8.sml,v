head	1.7;
access;
symbols
	MLW_daveb_inline_1_4_99:1.7.3
	MLWorks_21c0_1999_03_25:1.7
	MLWorks_20c1_1998_08_20:1.7
	MLWorks_20c0_1998_08_04:1.7
	MLWorks_20b2c2_1998_06_19:1.7
	MLWorks_20b2_Windows_1998_06_12:1.7
	MLWorks_20b1c1_1998_05_07:1.7
	MLWorks_20b0_1998_04_07:1.7
	MLWorks_20b0_1998_03_20:1.7
	MLWorks_20m2_1998_02_16:1.7
	MLWorks_20m1_1997_10_23:1.7
	MLWorks_11r1:1.6.5.1.1.1.1
	MLWorks_workspace_97:1.7.2
	MLWorks_dt_wizard:1.7.1
	MLWorks_11c0_1997_09_09:1.6.5.1.1.1
	MLWorks_10r3:1.6.5.1.3
	MLWorks_10r2_551:1.6.5.1.2
	MLWorks_11:1.6.5.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.6.5.1
	MLWorks_20m0_1997_06_20:1.7
	MLWorks_1_0_r2c2_1997_06_14:1.6.5.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.6.5.1
	MLWorks_1_0_r2c1_1997_05_12:1.6.5
	MLWorks_BugFix_1997_04_24:1.6
	MLWorks_1_0_r2_Win32_1997_04_11:1.6
	MLWorks_1_0_r2_Unix_1997_04_04:1.6
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.6.3.1.1
	MLWorks_gui_1996_12_18:1.6.4
	MLWorks_1_0_Win32_1996_12_17:1.6.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.6.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.6.1.1
	MLWorks_1_0_Irix_1996_11_28:1.6.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.6.2
	MLWorks_1_0_Unix_1996_11_14:1.6.1
	MLWorks_Open_Beta2_1996_10_11:1.5.2
	MLWorks_License_dev:1.5.1
	MLWorks_1_open_beta_1996_09_13:1.4.1
	MLWorks_Open_Beta_1996_08_22:1.4
	MLWorks_Beta_1996_07_02:1.4
	MLWorks_Beta_1996_06_07:1.4
	MLWorks_Beta_1996_06_06:1.4
	MLWorks_Beta_1996_06_05:1.4
	MLWorks_Beta_1996_06_03:1.4
	MLWorks_Beta_1996_05_31:1.4
	MLWorks_Beta_1996_05_30:1.4;
locks; strict;
comment	@ * @;


1.7
date	97.05.01.17.31.52;	author jont;	state Exp;
branches
	1.7.1.1
	1.7.2.1
	1.7.3.1;
next	1.6;

1.6
date	96.11.06.10.49.08;	author matthew;	state Exp;
branches
	1.6.1.1
	1.6.2.1
	1.6.3.1
	1.6.4.1
	1.6.5.1;
next	1.5;

1.5
date	96.10.03.14.50.06;	author io;	state Exp;
branches
	1.5.1.1
	1.5.2.1;
next	1.4;

1.4
date	96.05.17.11.20.54;	author jont;	state Exp;
branches
	1.4.1.1;
next	1.3;

1.3
date	96.05.08.15.32.10;	author matthew;	state Exp;
branches;
next	1.2;

1.2
date	96.04.30.11.51.11;	author matthew;	state Exp;
branches;
next	1.1;

1.1
date	96.04.18.11.28.04;	author jont;	state Exp;
branches;
next	;

1.4.1.1
date	96.09.13.11.09.29;	author hope;	state Exp;
branches;
next	;

1.5.1.1
date	96.10.07.16.00.25;	author hope;	state Exp;
branches;
next	;

1.5.2.1
date	96.10.17.11.18.40;	author hope;	state Exp;
branches;
next	;

1.6.1.1
date	96.11.14.12.42.13;	author hope;	state Exp;
branches
	1.6.1.1.1.1;
next	;

1.6.1.1.1.1
date	96.11.28.14.54.06;	author hope;	state Exp;
branches;
next	;

1.6.2.1
date	96.11.22.18.02.42;	author hope;	state Exp;
branches;
next	;

1.6.3.1
date	96.12.17.17.41.37;	author hope;	state Exp;
branches
	1.6.3.1.1.1;
next	;

1.6.3.1.1.1
date	97.02.24.11.29.54;	author hope;	state Exp;
branches;
next	;

1.6.4.1
date	96.12.18.09.35.34;	author hope;	state Exp;
branches;
next	;

1.6.5.1
date	97.05.12.10.27.36;	author hope;	state Exp;
branches
	1.6.5.1.1.1
	1.6.5.1.2.1
	1.6.5.1.3.1;
next	;

1.6.5.1.1.1
date	97.07.28.18.13.43;	author daveb;	state Exp;
branches
	1.6.5.1.1.1.1.1;
next	;

1.6.5.1.1.1.1.1
date	97.10.07.11.38.52;	author jkbrook;	state Exp;
branches;
next	;

1.6.5.1.2.1
date	97.09.08.17.07.12;	author daveb;	state Exp;
branches;
next	;

1.6.5.1.3.1
date	97.09.09.14.02.26;	author daveb;	state Exp;
branches;
next	;

1.7.1.1
date	97.09.10.19.16.53;	author brucem;	state Exp;
branches;
next	;

1.7.2.1
date	97.09.11.20.47.13;	author daveb;	state Exp;
branches;
next	;

1.7.3.1
date	99.04.01.17.51.49;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
@


1.7
log
@[Bug #30096]
Change type of precision
@
text
@(*  ==== INITIAL BASIS : 8-bit Integer structure ====
 *
 *  Copyright (C) 1995 Harlequin Ltd.
 *
 *  Description
 *  -----------
 *  This is part of the extended Initial Basis.
 *
 *  $Log: __int8.sml,v $
 * Revision 1.6  1996/11/06  10:49:08  matthew
 * Renamed __integer to __int
 *
 * Revision 1.5  1996/10/03  14:50:06  io
 * [Bug #1614]
 * remove redundant requires
 *
 * Revision 1.4  1996/05/17  11:20:54  jont
 * Revise to latest signature
 *
 * Revision 1.3  1996/05/08  15:32:10  matthew
 * Adding scan,fmt
 *
 * Revision 1.2  1996/04/30  11:51:11  matthew
 * Removed MLWorks.Integer
 *
 * Revision 1.1  1996/04/18  11:28:04  jont
 * new unit
 *
 * Revision 1.2  1996/03/20  14:46:23  matthew
 * Changes for new language definition
 *
 * Revision 1.1  1995/09/15  17:10:04  daveb
 * new unit
 * 8-bit integers.
 *
 *)

require "integer";
require "__int";

structure Int8: INTEGER =
  struct
    type int = MLWorks.Internal.Types.int8

    val precision = SOME 8
    val minInt = SOME (~128: int)
    val maxInt = SOME (127: int)

    fun min(a, b) = if a < b then a else b: int
    fun max(a, b) = if a < b then b else a: int
    fun sign (x:int) = if x < 0 then ~1 else if x = 0 then 0 else 1: Int.int

    fun sameSign(a, b) = sign a = sign b
    val intmaxint = (128 : Int.int)

    local val cast = MLWorks.Internal.Value.cast
    in
    fun toInt x = cast x
    fun fromInt (x:Int.int) = 
      if x < intmaxint andalso x >= ~intmaxint
        then cast x
      else raise Overflow
    end

    val toString : int -> string = Int.toString o toInt
    fun fmt radix n = Int.fmt radix (toInt n)

    fun fromString s =
      case Int.fromString s of
        SOME n => SOME (fromInt n)
      | _ => NONE
    fun scan radix getc src =
      case Int.scan radix getc src of
        SOME (i,r) => SOME (fromInt i, r)
      | _ => NONE

    fun toLarge x = Int.toLarge (toInt x)
    fun fromLarge x = 
      let
        val intx = Int.fromLarge x
      in
        fromInt intx
      end

    val ~ : int -> int = ~
    val op* : int * int -> int = op*
    val op div : int * int -> int = op div
    val op mod : int * int -> int = op mod

    fun quot(a, b) =
      let
	val q = a div b
	val r = a mod b
      in
	if r = 0 orelse (a > 0 andalso b > 0) orelse (a < 0 andalso b < 0) then
	  q
	else
	  q + 1
      end
    fun rem(a, b) =
      let
	val r = a mod b
      in
	if r = 0 orelse (a > 0 andalso b > 0) orelse (a < 0 andalso b < 0) then
	  r
	else
	  r - b
      end

    val op + : int * int -> int = op +
    val op - : int * int -> int = op -
    val op > : int * int -> bool = op >
    val op >= : int * int -> bool = op >=
    val op < : int * int -> bool = op <
    val op <= : int * int -> bool = op <=
    val abs : int -> int = abs

    val compare = 
      fn (n,m) =>
      if n < m then LESS
      else if n > m then GREATER
      else EQUAL


  end
@


1.7.3.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a9 4
 * Revision 1.7  1997/05/01  17:31:52  jont
 * [Bug #30096]
 * Change type of precision
 *
@


1.7.2.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a9 4
 * Revision 1.7  1997/05/01  17:31:52  jont
 * [Bug #30096]
 * Change type of precision
 *
@


1.7.1.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a9 4
 * Revision 1.7  1997/05/01  17:31:52  jont
 * [Bug #30096]
 * Change type of precision
 *
@


1.6
log
@Renamed __integer to __int
@
text
@d10 3
d45 1
a45 1
    val precision = SOME (8: int)
@


1.6.5.1
log
@branched from 1.6
@
text
@a9 3
 * Revision 1.6  1996/11/06  10:49:08  matthew
 * Renamed __integer to __int
 *
@


1.6.5.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a9 3
 * Revision 1.6.5.1  1997/05/12  10:27:36  hope
 * branched from 1.6
 *
@


1.6.5.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a9 3
 * Revision 1.6.5.1  1997/05/12  10:27:36  hope
 * branched from 1.6
 *
@


1.6.5.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a9 3
 * Revision 1.6.5.1  1997/05/12  10:27:36  hope
 * branched from 1.6
 *
@


1.6.5.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a9 3
 * Revision 1.6.5.1.1.1  1997/07/28  18:13:43  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.6.4.1
log
@branched from 1.6
@
text
@a9 3
 * Revision 1.6  1996/11/06  10:49:08  matthew
 * Renamed __integer to __int
 *
@


1.6.3.1
log
@branched from 1.6
@
text
@a9 3
 * Revision 1.6  1996/11/06  10:49:08  matthew
 * Renamed __integer to __int
 *
@


1.6.3.1.1.1
log
@branched from 1.6.3.1
@
text
@a9 3
 * Revision 1.6.3.1  1996/12/17  17:41:37  hope
 * branched from 1.6
 *
@


1.6.2.1
log
@branched from 1.6
@
text
@a9 3
 * Revision 1.6  1996/11/06  10:49:08  matthew
 * Renamed __integer to __int
 *
@


1.6.1.1
log
@branched from 1.6
@
text
@a9 3
 * Revision 1.6  1996/11/06  10:49:08  matthew
 * Renamed __integer to __int
 *
@


1.6.1.1.1.1
log
@branched from 1.6.1.1
@
text
@a9 3
 * Revision 1.6.1.1  1996/11/14  12:42:13  hope
 * branched from 1.6
 *
@


1.5
log
@[Bug #1614]
remove redundant requires
@
text
@d10 4
d36 1
a36 1
require "__integer";
@


1.5.2.1
log
@branched from 1.5
@
text
@a9 4
 * Revision 1.5  1996/10/03  14:50:06  io
 * [Bug #1614]
 * remove redundant requires
 *
@


1.5.1.1
log
@branched from 1.5
@
text
@a9 4
 * Revision 1.5  1996/10/03  14:50:06  io
 * [Bug #1614]
 * remove redundant requires
 *
@


1.4
log
@Revise to latest signature
@
text
@d10 3
d31 1
a32 3

require "integer";
require "toplevel";
@


1.4.1.1
log
@branched from 1.4
@
text
@a9 3
 * Revision 1.4  1996/05/17  11:20:54  jont
 * Revise to latest signature
 *
@


1.3
log
@Adding scan,fmt
@
text
@d10 3
d38 2
a39 2
    val minint = SOME (~128: int)
    val maxint = SOME (127: int)
@


1.2
log
@Removed MLWorks.Integer
@
text
@d10 3
d55 2
d60 4
@


1.1
log
@new unit
@
text
@d9 4
a12 1
 *  $Log$
d22 2
d30 1
d35 30
d98 5
a102 6
    fun min(a, b) = if a < b then a else b: int
    fun max(a, b) = if a < b then b else a: int
    fun sign x = if x < 0 then ~1 else if x = 0 then 0 else 1: int

    fun sameSign(a, b) = sign a = sign b
    val makestring : int -> string = MLWorks.Internal.Value.cast MLWorks.Integer.makestring
a103 4
    (*
    fun toDefault x = x
    fun fromDefault x = x
    *)
@
