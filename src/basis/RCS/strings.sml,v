head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	96.05.13.13.47.47;	author io;	state Exp;
branches;
next	1.3;

1.3
date	96.05.10.12.15.57;	author io;	state Exp;
branches;
next	1.2;

1.2
date	96.05.07.09.55.14;	author io;	state Exp;
branches;
next	1.1;

1.1
date	96.04.18.11.46.00;	author jont;	state Exp;
branches;
next	;


desc
@new unit
@


1.4
log
@complete toString
@
text
@(*  ==== INITIAL BASIS : STRINGS ====
 *
 *  Copyright (C) 1995 Harlequin Ltd.
 *
 *  Description
 *  -----------
 *  This is part of the extended Initial Basis.
 *
 *  Revision Log
 *  ------------
 *  $Log: strings.sml,v $
 * Revision 1.3  1996/05/10  12:15:57  io
 * revising
 *
 * Revision 1.2  1996/05/07  09:55:14  io
 * revising...
 *
 * Revision 1.1  1996/04/18  11:46:00  jont
 * new unit
 *
 *  Revision 1.2  1995/03/17  21:20:45  brianm
 *  Added Char structure dependency - doesn't assume Char is opened.
 *
 * Revision 1.1  1995/03/08  16:25:49  brianm
 * new unit
 * New file.
 *
 *)

require "toplevel";
require "chars";

signature STRING =
  sig
    structure Char : CHAR
    eqtype char
      sharing type char = Char.char
    eqtype string
    val maxSize : int
    val size : string -> int
    val sub : (string * int) -> char
    val extract : (string * int * int option) -> string 
    val concat    : string list -> string
    val ^         : string * string -> string
    val implode   : char list -> string
    val explode : string -> char list
    val translate : (char -> string) -> string -> string 
    val compare : (string * string) -> order
    val str : char -> string
    val isPrefix : string -> string -> bool
    val substring : (string * int * int) -> string
    val fields : (char -> bool) -> string -> string list
    val tokens : (char -> bool) -> string -> string list
    val collate : (char * char -> order) -> (string * string) -> order

    val fromString : string -> string option
    val toString : string -> string
(*
    val fromCString : string -> string option
    val toCString : string -> string
*)
    val <= : string * string -> bool
    val <  : string * string -> bool
    val >= : string * string -> bool
    val >  : string * string -> bool
  end
@


1.3
log
@revising
@
text
@d12 3
d55 1
a55 1
(*
d58 1
@


1.2
log
@revising...
@
text
@d12 3
d39 1
a39 1
(*    val extract : (string * int * int option) -> string *)
d44 1
a44 1
(*    val translate : (char -> string) -> string -> string *)
d50 1
d52 6
@


1.1
log
@new unit
@
text
@d11 4
a14 1
 *  $Log$
d24 1
a28 1

a29 1

d32 5
a36 8

    type string

    val maxlen : int

    val size      : string -> int
    val sub       : (string * int) -> char
    val substring : string * int * int -> string
a38 1
    val str       : char -> string
d40 8
a47 2
    val explode   : string -> char list

a51 1

@
