head	1.12;
access;
symbols
	MLW_daveb_inline_1_4_99:1.12.1
	MLWorks_21c0_1999_03_25:1.12
	MLWorks_20c1_1998_08_20:1.11
	MLWorks_20c0_1998_08_04:1.11
	MLWorks_20b2c2_1998_06_19:1.11
	MLWorks_20b2_Windows_1998_06_12:1.11
	MLWorks_20b1c1_1998_05_07:1.11
	MLWorks_20b0_1998_04_07:1.11
	MLWorks_20b0_1998_03_20:1.11
	MLWorks_20m2_1998_02_16:1.11
	MLWorks_20m1_1997_10_23:1.11
	MLWorks_11r1:1.8.1.1.1.1.1
	MLWorks_workspace_97:1.9.2
	MLWorks_dt_wizard:1.9.1
	MLWorks_11c0_1997_09_09:1.8.1.1.1.1
	MLWorks_10r3:1.8.1.1.3
	MLWorks_10r2_551:1.8.1.1.2
	MLWorks_11:1.8.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.8.1.1
	MLWorks_20m0_1997_06_20:1.9
	MLWorks_1_0_r2c2_1997_06_14:1.8.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.8.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.8.1
	MLWorks_BugFix_1997_04_24:1.8
	MLWorks_1_0_r2_Win32_1997_04_11:1.8
	MLWorks_1_0_r2_Unix_1997_04_04:1.8
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.7.3.1.1
	MLWorks_gui_1996_12_18:1.7.4
	MLWorks_1_0_Win32_1996_12_17:1.7.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.7.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.7.1.1
	MLWorks_1_0_Irix_1996_11_28:1.7.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.7.2
	MLWorks_1_0_Unix_1996_11_14:1.7.1
	MLWorks_Open_Beta2_1996_10_11:1.5.3
	MLWorks_License_dev:1.5.2
	MLWorks_1_open_beta_1996_09_13:1.5.1
	MLWorks_Open_Beta_1996_08_22:1.5
	MLWorks_Beta_1996_07_02:1.5
	MLWorks_Beta_1996_06_07:1.5
	MLWorks_Beta_1996_06_06:1.5
	MLWorks_Beta_1996_06_05:1.5
	MLWorks_Beta_1996_06_03:1.5
	MLWorks_Beta_1996_05_31:1.5
	MLWorks_Beta_1996_05_30:1.4;
locks; strict;
comment	@ *  @;


1.12
date	99.02.02.15.57.46;	author mitchell;	state Exp;
branches
	1.12.1.1;
next	1.11;

1.11
date	97.10.21.10.52.49;	author daveb;	state Exp;
branches;
next	1.10;

1.10
date	97.09.25.10.55.52;	author jont;	state Exp;
branches;
next	1.9;

1.9
date	97.06.12.11.58.32;	author matthew;	state Exp;
branches
	1.9.1.1
	1.9.2.1;
next	1.8;

1.8
date	96.11.18.10.33.11;	author matthew;	state Exp;
branches
	1.8.1.1;
next	1.7;

1.7
date	96.11.07.17.12.14;	author matthew;	state Exp;
branches
	1.7.1.1
	1.7.2.1
	1.7.3.1
	1.7.4.1;
next	1.6;

1.6
date	96.11.05.18.42.17;	author andreww;	state Exp;
branches;
next	1.5;

1.5
date	96.05.30.13.50.15;	author daveb;	state Exp;
branches
	1.5.1.1
	1.5.2.1
	1.5.3.1;
next	1.4;

1.4
date	96.05.21.13.46.06;	author matthew;	state Exp;
branches;
next	1.3;

1.3
date	96.04.30.15.38.02;	author matthew;	state Exp;
branches;
next	1.2;

1.2
date	96.04.25.09.07.59;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	96.04.23.10.23.01;	author matthew;	state Exp;
branches;
next	;

1.5.1.1
date	96.09.13.11.10.55;	author hope;	state Exp;
branches;
next	;

1.5.2.1
date	96.10.07.16.01.40;	author hope;	state Exp;
branches;
next	;

1.5.3.1
date	96.10.17.11.19.55;	author hope;	state Exp;
branches;
next	;

1.7.1.1
date	96.11.14.12.43.30;	author hope;	state Exp;
branches
	1.7.1.1.1.1;
next	;

1.7.1.1.1.1
date	96.11.28.14.55.22;	author hope;	state Exp;
branches;
next	;

1.7.2.1
date	96.11.22.18.03.58;	author hope;	state Exp;
branches;
next	;

1.7.3.1
date	96.12.17.17.42.52;	author hope;	state Exp;
branches
	1.7.3.1.1.1;
next	;

1.7.3.1.1.1
date	97.02.24.11.31.28;	author hope;	state Exp;
branches;
next	;

1.7.4.1
date	96.12.18.09.36.52;	author hope;	state Exp;
branches;
next	;

1.8.1.1
date	97.05.12.10.29.01;	author hope;	state Exp;
branches
	1.8.1.1.1.1
	1.8.1.1.2.1
	1.8.1.1.3.1;
next	;

1.8.1.1.1.1
date	97.07.28.18.13.21;	author daveb;	state Exp;
branches
	1.8.1.1.1.1.1.1;
next	;

1.8.1.1.1.1.1.1
date	97.10.07.11.38.32;	author jkbrook;	state Exp;
branches;
next	1.8.1.1.1.1.1.2;

1.8.1.1.1.1.1.2
date	97.10.07.17.03.08;	author jkbrook;	state Exp;
branches;
next	;

1.8.1.1.2.1
date	97.09.08.17.06.43;	author daveb;	state Exp;
branches;
next	;

1.8.1.1.3.1
date	97.09.09.14.02.06;	author daveb;	state Exp;
branches;
next	1.8.1.1.3.2;

1.8.1.1.3.2
date	97.09.25.16.02.00;	author jkbrook;	state Exp;
branches;
next	;

1.9.1.1
date	97.09.10.19.16.29;	author brucem;	state Exp;
branches;
next	;

1.9.2.1
date	97.09.11.20.46.34;	author daveb;	state Exp;
branches;
next	;

1.12.1.1
date	99.04.01.17.51.45;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
Renamed from __maths.sml
@


1.12
log
@[Bug #190500]
Remove redundant require statements
@
text
@(*  ==== INITIAL BASIS : Math structure ====
 *
 *  Copyright (C) 1995 Harlequin Ltd.
 *
 *  Description
 *  -----------
 *  This is part of the extended Initial Basis.
 *
 *  Revision Log
 *  ------------
 *  $Log: __math.sml,v $
 *  Revision 1.11  1997/10/21  10:52:49  daveb
 *  [Bug #70011]
 *  Added checks for odd integer values in definition of pow.
 *
 *  Revision 1.10  1997/09/25  10:55:52  jont
 *  [Bug #70011]
 *  Deal more sensibly with 0.0 ** n (n <> 0)
 *
 *  Revision 1.9  1997/06/12  11:58:32  matthew
 *  [Bug #30101]
 *
 *  Revision 1.8  1996/11/18  10:33:11  matthew
 *  Improving real equality (again).
 *
 *  Revision 1.7  1996/11/07  17:12:14  matthew
 *  Correcting bungle in equal
 *
 *  Revision 1.6  1996/11/05  18:42:17  andreww
 *  [Bug #1711]
 *  real no longer equality type in sml'96.
 *
 *  Revision 1.5  1996/05/30  13:50:15  daveb
 *  Math functions are no longer at top level.
 *
 *  Revision 1.4  1996/05/21  13:46:06  matthew
 *  Problems with pow and atan2
 *
 *  Revision 1.3  1996/04/30  15:38:02  matthew
 *  Revisions
 *
 *  Revision 1.2  1996/04/25  09:07:59  jont
 *  Change maths to math
 *
 *  Revision 1.1  1996/04/23  10:23:01  matthew
 *  new unit
 *  Renamed from __maths.sml
 *
 * Revision 1.1  1996/04/18  11:30:34  jont
 * new unit
 *
 *  Revision 1.1  1995/04/13  13:24:14  jont
 *  new unit
 *  No reason given
 *
 *
 *)

require "math";

structure Math : MATH =
  struct

    type real = real

    (* first, we must make an equality function for the non-eqtype real *)
    val realEq : real * real -> bool = MLWorks.Internal.Value.real_equal

    infix realEq

    val env = MLWorks.Internal.Runtime.environment

    val atan : real -> real = MLWorks.Internal.Value.arctan
    val sqrt : real -> real = MLWorks.Internal.Value.sqrt
    val sin : real -> real = MLWorks.Internal.Value.sin
    val cos : real -> real = MLWorks.Internal.Value.cos
    val exp : real -> real = MLWorks.Internal.Value.exp

    val pi : real = 4.0 * atan 1.0
    val e : real = exp 1.0

    val tan : real -> real =
      fn x => (sin x / cos x)


    val atan2 : real * real -> real =
      fn (x, y) =>
      if x realEq 0.0 then
	if y realEq 0.0 then
	  0.0
	else
	  if y < 0.0 then
	    ~ pi / 2.0
	  else
	    pi / 2.0
      else
	let
	  val at = atan(y/x)
	in
	  if x > 0.0 then
	    at
	  else
	    if y < 0.0 then
	      at - pi
	    else
	      at + pi
	end

    val asin : real -> real =
      fn y =>
      let
        val x = sqrt(1.0 - y*y)
      in
        atan2(x, y)
      end

    val acos : real -> real =
      fn x =>
      let
        val y = sqrt(1.0 - x*x)
      in
        atan2(x, y)
      end


    val cpow : real * real -> real = env "real pow"

    local
      fun odd_integer y =
        let val y_over_2 = y/2.0
        in
          y realEq real (floor y) andalso
          not (y_over_2 realEq real (floor y_over_2))
        end
    in
      (* Need hacks since C doesn't necessarily implement what we want *)
      fun pow (x,y) =
        if y realEq 0.0 then
	  1.0
        else if not (y realEq y) then
	  y (* NaN *)
        else if x realEq 0.0 then
	  if y > 0.0 then
            if odd_integer y then
              (* preserve sign of zero*)
              x
            else
	      0.0
	  else  (* y < 0.0 *)
            if odd_integer y then
              (* copy sign of zero when y is an odd integer *)
	      1.0/x
            else
	      1.0/0.0
        else
	  cpow (x,y)
    end

    val ln : real -> real = env "real ln"
    val log10 : real -> real = fn x => ln x / ln 10.0

    fun sinh x = (exp x - exp (~x)) / 2.0
    fun cosh x = (exp x + exp (~x)) / 2.0
    fun tanh x = sinh x / cosh x

  end
@


1.12.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a11 4
 *  Revision 1.12  1999/02/02  15:57:46  mitchell
 *  [Bug #190500]
 *  Remove redundant require statements
 *
@


1.11
log
@[Bug #70011]
Added checks for odd integer values in definition of pow.
@
text
@d12 4
a57 2

require "__general";
@


1.10
log
@[Bug #70011]
Deal more sensibly with 0.0 ** n (n <> 0)
@
text
@d12 4
d126 27
a152 7
    (* Need hacks since C doesn't necessarily implement what we want *)
    fun pow (x,y) =
      if y realEq 0.0 then 1.0
      else if x realEq 0.0 then
        if y realEq y then
          (* Not a nan *)
          if y > 0.0 then 0.0 else 1.0/0.0
d154 2
a155 2
          y
      else cpow (x,y)
@


1.9
log
@[Bug #30101]
@
text
@d12 3
d125 6
a130 1
      else if x realEq 0.0 then 1.0 / (pow (1.0 / x, y))
@


1.9.2.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a11 3
 *  Revision 1.9  1997/06/12  11:58:32  matthew
 *  [Bug #30101]
 *
@


1.9.1.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a11 3
 *  Revision 1.9  1997/06/12  11:58:32  matthew
 *  [Bug #30101]
 *
@


1.8
log
@Improving real equality (again).
@
text
@d12 3
d64 5
a68 4
    val atan : real -> real = env "real arctan"
    val sqrt : real -> real = env "real square root"
    val sin : real -> real = env "real sin"
    val cos : real -> real = env "real cos"
a70 1
    val exp : real -> real = env "real exp"
@


1.8.1.1
log
@branched from 1.8
@
text
@a11 3
 *  Revision 1.8  1996/11/18  10:33:11  matthew
 *  Improving real equality (again).
 *
@


1.8.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a11 3
 *  Revision 1.8.1.1  1997/05/12  10:29:01  hope
 *  branched from 1.8
 *
@


1.8.1.1.3.2
log
@[Bug #70011]
Merging from trunk:
Improvements to pow function in special cases
@
text
@a11 3
 *  Revision 1.8.1.1.3.1  1997/09/09  14:02:06  daveb
 *  branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
 *
d125 1
a125 6
      else if x realEq 0.0 then
        if y realEq y then
          (* Not a nan *)
          if y > 0.0 then 0.0 else 1.0/0.0
        else
          y
@


1.8.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a11 3
 *  Revision 1.8.1.1  1997/05/12  10:29:01  hope
 *  branched from 1.8
 *
@


1.8.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a11 3
 *  Revision 1.8.1.1  1997/05/12  10:29:01  hope
 *  branched from 1.8
 *
@


1.8.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a11 3
 *  Revision 1.8.1.1.1.1  1997/07/28  18:13:21  daveb
 *  branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.8.1.1.1.1.1.2
log
@[Bug #70011]
Merging from MLWorks_10r3:
Improvements to pow function in special cases involving 0.0
@
text
@a11 3
 *  Revision 1.8.1.1.1.1.1.1  1997/10/07  11:38:32  jkbrook
 *  branched from MLWorks_11 for label MLWorks_11r1
 *
d128 1
a128 6
      else if x realEq 0.0 then
        if y realEq y then
          (* Not a nan *)
          if y > 0.0 then 0.0 else 1.0/0.0
        else
          y
@


1.7
log
@Correcting bungle in equal
@
text
@d12 3
d55 2
a56 1
    val realEq : real * real -> bool = fn (x,y) => x <= y andalso y <= x
@


1.7.4.1
log
@branched from 1.7
@
text
@a11 3
 *  Revision 1.7  1996/11/07  17:12:14  matthew
 *  Correcting bungle in equal
 *
@


1.7.3.1
log
@branched from 1.7
@
text
@a11 3
 *  Revision 1.7  1996/11/07  17:12:14  matthew
 *  Correcting bungle in equal
 *
@


1.7.3.1.1.1
log
@branched from 1.7.3.1
@
text
@a11 3
 *  Revision 1.7.3.1  1996/12/17  17:42:52  hope
 *  branched from 1.7
 *
@


1.7.2.1
log
@branched from 1.7
@
text
@a11 3
 *  Revision 1.7  1996/11/07  17:12:14  matthew
 *  Correcting bungle in equal
 *
@


1.7.1.1
log
@branched from 1.7
@
text
@a11 3
 *  Revision 1.7  1996/11/07  17:12:14  matthew
 *  Correcting bungle in equal
 *
@


1.7.1.1.1.1
log
@branched from 1.7.1.1
@
text
@a11 3
 *  Revision 1.7.1.1  1996/11/14  12:43:30  hope
 *  branched from 1.7
 *
@


1.6
log
@[Bug #1711]
real no longer equality type in sml'96.
@
text
@d12 4
d51 2
a52 7
      (* first, we must make an equality function for the non-eqtype real *)

    val equal : real * real -> bool = fn (x,y) => not(x < y orelse y > x)
    val isNan : real -> bool = fn x => not (equal(x,x))
    val realEq : real * real -> bool = 
      fn (x,y) => not (isNan x) andalso not (isNan y) andalso equal(x,y)      

a53 1
     
@


1.5
log
@Math functions are no longer at top level.
@
text
@d12 3
d44 1
d47 10
d71 1
d74 2
a75 2
      if x = 0.0 then
	if y = 0.0 then
d116 2
a117 2
      if y = 0.0 then 1.0
      else if x = 0.0 then 1.0 / (pow (1.0 / x, y))
@


1.5.3.1
log
@branched from 1.5
@
text
@a11 3
 *  Revision 1.5  1996/05/30  13:50:15  daveb
 *  Math functions are no longer at top level.
 *
@


1.5.2.1
log
@branched from 1.5
@
text
@a11 3
 *  Revision 1.5  1996/05/30  13:50:15  daveb
 *  Math functions are no longer at top level.
 *
@


1.5.1.1
log
@branched from 1.5
@
text
@a11 3
 *  Revision 1.5  1996/05/30  13:50:15  daveb
 *  Math functions are no longer at top level.
 *
@


1.4
log
@Problems with pow and atan2
@
text
@d12 3
d45 7
a51 1
    val pi : real = 4.0 * arctan 1.0
a53 3
    val sqrt : real -> real = sqrt
    val sin : real -> real = sin
    val cos : real -> real = cos
d56 1
a56 1
    val atan : real -> real = arctan
d69 1
a69 1
	  val at = arctan(y/x)
a95 1
    val exp : real -> real = exp
d105 1
a105 1
    val ln : real -> real = ln
@


1.3
log
@Revisions
@
text
@d12 3
d33 1
d40 2
d91 9
a99 1
    val pow : real * real -> real = fn (x, y) => exp(y * ln x)
d107 1
a107 1
  end (* signature MATH *)
@


1.2
log
@Change maths to math
@
text
@d12 3
a35 4
    exception Sqrt = General.Sqrt
    exception Trig
    exception Ln = General.Ln

d43 1
a43 3
      fn x =>
      (sin x / cos x) handle Div => raise Trig
			   | Overflow => raise Trig
d70 5
a74 8
      if abs y > 1.0 then
	raise Trig
      else
	let
	  val x = sqrt(1.0 - y*y)
	in
	  atan2(x, y)
	end
d78 5
a82 8
      if abs x > 1.0 then
	raise Trig
      else
	let
	  val y = sqrt(1.0 - x*x)
	in
	  atan2(x, y)
	end
d88 4
@


1.1
log
@new unit
Renamed from __maths.sml
@
text
@d11 5
a15 1
 *  $Log: __maths.sml,v $
d27 1
a27 1
require "maths";
@
