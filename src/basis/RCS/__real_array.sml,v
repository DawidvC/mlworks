head	1.4;
access;
symbols
	MLW_daveb_inline_1_4_99:1.4.1
	MLWorks_21c0_1999_03_25:1.4
	MLWorks_20c1_1998_08_20:1.2
	MLWorks_20c0_1998_08_04:1.2
	MLWorks_20b2c2_1998_06_19:1.2
	MLWorks_20b2_Windows_1998_06_12:1.2
	MLWorks_20b1c1_1998_05_07:1.2
	MLWorks_20b0_1998_04_07:1.2
	MLWorks_20b0_1998_03_20:1.2
	MLWorks_20m2_1998_02_16:1.1
	MLWorks_20m1_1997_10_23:1.1
	MLWorks_11r1:1.1.1.1.1.1.1
	MLWorks_workspace_97:1.1.3
	MLWorks_dt_wizard:1.1.2
	MLWorks_11c0_1997_09_09:1.1.1.1.1.1
	MLWorks_10r3:1.1.1.1.3
	MLWorks_10r2_551:1.1.1.1.2
	MLWorks_11:1.1.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.1.1.1
	MLWorks_20m0_1997_06_20:1.1
	MLWorks_1_0_r2c2_1997_06_14:1.1.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.1.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.1.1
	MLWorks_BugFix_1997_04_24:1.1
	MLWorks_1_0_r2_Win32_1997_04_11:1.1
	MLWorks_1_0_r2_Unix_1997_04_04:1.1;
locks; strict;
comment	@ *  @;


1.4
date	99.03.20.21.38.31;	author daveb;	state Exp;
branches
	1.4.1.1;
next	1.3;

1.3
date	99.02.17.14.39.59;	author mitchell;	state Exp;
branches;
next	1.2;

1.2
date	98.02.19.19.55.49;	author mitchell;	state Exp;
branches;
next	1.1;

1.1
date	97.01.30.16.53.10;	author andreww;	state Exp;
branches
	1.1.1.1
	1.1.2.1
	1.1.3.1;
next	;

1.1.1.1
date	97.05.12.10.28.55;	author hope;	state Exp;
branches
	1.1.1.1.1.1
	1.1.1.1.2.1
	1.1.1.1.3.1;
next	;

1.1.1.1.1.1
date	97.07.28.18.13.54;	author daveb;	state Exp;
branches
	1.1.1.1.1.1.1.1;
next	;

1.1.1.1.1.1.1.1
date	97.10.07.11.39.05;	author jkbrook;	state Exp;
branches;
next	;

1.1.1.1.2.1
date	97.09.08.17.07.25;	author daveb;	state Exp;
branches;
next	;

1.1.1.1.3.1
date	97.09.09.14.02.39;	author daveb;	state Exp;
branches;
next	;

1.1.2.1
date	97.09.10.19.17.07;	author brucem;	state Exp;
branches;
next	;

1.1.3.1
date	97.09.11.20.47.36;	author daveb;	state Exp;
branches;
next	;

1.4.1.1
date	99.04.01.17.52.27;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
New RealArray mono array which uses floatarray builtins.
@


1.4
log
@[Bug #20125]
Replaced substructure with type.
@
text
@(*  ==== INITIAL BASIS : REAL ARRAY ====
 *
 *  Copyright (C) 1997 Harlequin Ltd.
 *
 *  Implementation
 *  --------------
 *  Real arrays are identified with MLWorks floatarray objects - note that
 *  the basic MONO_ARRAY signature is reduced functionality from our own
 *  FloatArray signature.
 *  
 *
 *  Revision Log
 *  ------------
 *  $Log: __real_array.sml,v $
 *  Revision 1.3  1999/02/17  14:39:59  mitchell
 *  [Bug #190507]
 *  Modify to satisfy CM constraints.
 *
 *  Revision 1.2  1998/02/19  19:55:49  mitchell
 *  [Bug #30349]
 *  Fix to avoid non-unit sequence warnings
 *
 *  Revision 1.1  1997/01/30  16:53:10  andreww
 *  new unit
 *  New RealArray mono array which uses floatarray builtins.
 *
 * 
 *
 *)

require "mono_array";
require "__pre_real";
require "__real_vector";

structure RealArray : MONO_ARRAY where type elem = PreReal.real =
  struct
    type elem = PreReal.real
    type vector = RealVector.vector
    structure F = MLWorks.Internal.FloatArray

    type array = F.floatarray
    val maxLen = F.maxLen

    fun check_size n =
      if n < 0 orelse n > maxLen then raise Size else n


    fun array (i, e) = F.array (check_size i, e)
    fun tabulate (i, f) = F.tabulate (check_size i,f)

    (* uses toplevel List.length which is overridden afterwards *)

    fun fromList [] = F.array(0,0.0)
      | fromList l =
      if length l> maxLen then raise Size else F.from_list l
      
    val length = F.length
    val sub = F.sub
    val update = F.update
    val cast = MLWorks.Internal.Value.cast

    fun check_slice (array,i,SOME j) =
      if i < 0 orelse j < 0 orelse i + j > length array
        then raise Subscript
      else j
      | check_slice (array,i,NONE) =
        let
          val l = length array
        in
          if i < 0 orelse i > l
            then raise Subscript
          else l - i
        end




    (* In the following, we use casts to convert realarrays into
     * realvectors.  We know that they're both implemented as
     * floatarrays.
     *)

    fun extract(array, i, j): vector =
      let
        val len = check_slice (array,i,j)
      in
        cast(F.tabulate(len, fn n => sub (array, n+i)))
      end


    
    fun copy { src, si, len, dst, di } =
      let
        val srcLen = length src
        val l = case len
                  of SOME l => l
                   | NONE => srcLen - si
      in
        if si >= 0 
           andalso l >= 0 
           andalso si + l <= srcLen
           andalso di >= 0
           andalso di + l <= length dst
          then F.copy(src, si, si+l, dst, di)
        else raise Subscript
      end



    fun copyVec {src, si, len, dst, di} =
         copy {src=cast src,si=si,len=len,dst=dst,di=di}

    (* this is based on the assumption that real vectors are
     * implemented as floatarrays too.
     *)



    fun app f vector =
      let
	val l = length vector
	fun iterate n =
	  if n = l then
	    ()
	  else
	    (ignore(f(sub(vector, n)));
	     iterate(n+1))
      in
	iterate 0
      end

    fun appi f (array, i, j) =
      let
        val len = check_slice(array,i,j)

	fun iterate' n =
	  if n >= i+ len then
	    ()
	  else
	    (ignore(f (n, sub (array, n)));
	     iterate'(n+1))
      in
	iterate' i
      end

    fun foldl f b array =
      let
	val l = length array
	fun reduce(n, x) =
	  if n = l then
	    x
	  else
	    reduce(n+1, f(sub(array, n), x))
      in
	reduce(0, b)
      end

    fun foldr f b array =
      let
	val l = length array
	fun reduce(n, x) =
	  if n < 0 then
	    x
	  else
	    reduce(n-1, f(sub(array, n), x))
      in
	reduce(l-1, b)
      end

    fun foldli f b (array, i, j) =
      let
	val l = length array
	val len = check_slice(array,i,j)

	fun reduce (n, x) =
	  if n = i+len then
	    x
	  else
	    reduce(n+1, f(n, sub(array, n), x))
      in
	reduce(i, b)
      end

    fun foldri f b (array, i, j) =
      let
	val len = check_slice(array,i,j)

	fun reduce (n, x) =
	  if n < i then
	    x
	  else
	    reduce(n-1, f(n, sub(array, n), x))
      in
	reduce(i+len-1, b)
      end

    fun modify f array =
      let
	val l = length array
	fun iterate n =
	  if n = l then
	    ()
	  else
	    (update(array, n, f(sub(array, n)));
	     iterate(n+1))
      in
	iterate 0
      end

    fun modifyi f (array, i, j) =
      let
	val len = check_slice(array,i,j)

	fun iterate n =
	  if n = i+len then
	    ()
	  else
	    (update(array, n, f(n, sub(array, n)));
	     iterate(n+1))
      in
	iterate i
      end

  end
@


1.4.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a14 4
 *  Revision 1.4  1999/03/20  21:38:31  daveb
 *  [Bug #20125]
 *  Replaced substructure with type.
 *
@


1.3
log
@[Bug #190507]
Modify to satisfy CM constraints.
@
text
@d15 4
d38 1
a38 1
    structure Vector = RealVector
d83 1
a83 1
    fun extract(array, i, j): Vector.vector =
@


1.2
log
@[Bug #30349]
Fix to avoid non-unit sequence warnings
@
text
@d15 4
d28 1
a28 1
require "__real";
d31 1
a31 1
structure RealArray : MONO_ARRAY where type elem = Real.real =
d33 1
a33 1
    type elem = Real.real
@


1.1
log
@new unit
New RealArray mono array which uses floatarray builtins.
@
text
@d14 5
a18 1
 *  $Log:,v $
d118 1
a118 1
	    (f(sub(vector, n));
d132 1
a132 1
	    (f (n, sub (array, n));
@


1.1.3.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@d14 1
a14 5
 *  $Log: __real_array.sml,v $
 *  Revision 1.1  1997/01/30  16:53:10  andreww
 *  new unit
 *  New RealArray mono array which uses floatarray builtins.
 *
@


1.1.2.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@d14 1
a14 5
 *  $Log: __real_array.sml,v $
 *  Revision 1.1  1997/01/30  16:53:10  andreww
 *  new unit
 *  New RealArray mono array which uses floatarray builtins.
 *
@


1.1.1.1
log
@branched from 1.1
@
text
@d14 1
a14 5
 *  $Log: __real_array.sml,v $
 *  Revision 1.1  1997/01/30  16:53:10  andreww
 *  new unit
 *  New RealArray mono array which uses floatarray builtins.
 *
@


1.1.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a14 3
 *  Revision 1.1.1.1  1997/05/12  10:28:55  hope
 *  branched from 1.1
 *
@


1.1.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a14 3
 *  Revision 1.1.1.1  1997/05/12  10:28:55  hope
 *  branched from 1.1
 *
@


1.1.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a14 3
 *  Revision 1.1.1.1  1997/05/12  10:28:55  hope
 *  branched from 1.1
 *
@


1.1.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a14 3
 *  Revision 1.1.1.1.1.1  1997/07/28  18:13:54  daveb
 *  branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@
