head	1.3;
access;
symbols
	MLW_daveb_inline_1_4_99:1.3.1
	MLWorks_21c0_1999_03_25:1.3
	MLWorks_20c1_1998_08_20:1.2
	MLWorks_20c0_1998_08_04:1.2
	MLWorks_20b2c2_1998_06_19:1.2
	MLWorks_20b2_Windows_1998_06_12:1.2
	MLWorks_20b1c1_1998_05_07:1.2
	MLWorks_20b0_1998_04_07:1.2
	MLWorks_20b0_1998_03_20:1.2
	MLWorks_20m2_1998_02_16:1.1
	MLWorks_20m1_1997_10_23:1.1
	MLWorks_11r1:1.1.1.1.1.1.1
	MLWorks_workspace_97:1.1.3
	MLWorks_dt_wizard:1.1.2
	MLWorks_11c0_1997_09_09:1.1.1.1.1.1
	MLWorks_10r3:1.1.1.1.3
	MLWorks_10r2_551:1.1.1.1.2
	MLWorks_11:1.1.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.1.1.1
	MLWorks_20m0_1997_06_20:1.1
	MLWorks_1_0_r2c2_1997_06_14:1.1.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.1.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.1.1
	MLWorks_BugFix_1997_04_24:1.1
	MLWorks_1_0_r2_Win32_1997_04_11:1.1
	MLWorks_1_0_r2_Unix_1997_04_04:1.1;
locks; strict;
comment	@ *  @;


1.3
date	99.03.20.21.39.08;	author daveb;	state Exp;
branches
	1.3.1.1;
next	1.2;

1.2
date	98.02.19.16.22.17;	author mitchell;	state Exp;
branches;
next	1.1;

1.1
date	97.01.15.11.52.24;	author io;	state Exp;
branches
	1.1.1.1
	1.1.2.1
	1.1.3.1;
next	;

1.1.1.1
date	97.05.12.10.28.43;	author hope;	state Exp;
branches
	1.1.1.1.1.1
	1.1.1.1.2.1
	1.1.1.1.3.1;
next	;

1.1.1.1.1.1
date	97.07.28.18.14.14;	author daveb;	state Exp;
branches
	1.1.1.1.1.1.1.1;
next	;

1.1.1.1.1.1.1.1
date	97.10.07.11.39.19;	author jkbrook;	state Exp;
branches;
next	;

1.1.1.1.2.1
date	97.09.08.17.07.41;	author daveb;	state Exp;
branches;
next	;

1.1.1.1.3.1
date	97.09.09.14.02.53;	author daveb;	state Exp;
branches;
next	;

1.1.2.1
date	97.09.10.19.17.21;	author brucem;	state Exp;
branches;
next	;

1.1.3.1
date	97.09.11.20.48.01;	author daveb;	state Exp;
branches;
next	;

1.3.1.1
date	99.04.01.17.52.31;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
[Bug #1892]
rename __word{8,16,32}{array,vector} to __word{8,16,32}_{array,vector}
@


1.3
log
@[Bug #20125]
Replaced substructure with type.
@
text
@(*  ==== INITIAL BASIS : WORD 8 ARRAY ====
 *
 *  Copyright (C) 1995 Harlequin Ltd.
 *
 *  Implementation
 *  --------------
 *  Word8 arrays are identified with MLWorks bytearray objects - note that
 *  the basic MONO_ARRAY signature is reduced functionality from our own
 *  ByteArray signature.
 *  
 *
 *  Revision Log
 *  ------------
 *  $Log: __word8_array.sml,v $
 *  Revision 1.2  1998/02/19  16:22:17  mitchell
 *  [Bug #30349]
 *  Fix to avoid non-unit sequence warnings
 *
 *  Revision 1.1  1997/01/15  11:52:24  io
 *  new unit
 *  [Bug #1892]
 *  rename __word{8,16,32}{array,vector} to __word{8,16,32}_{array,vector}
 *
 * Revision 1.7  1996/09/18  15:23:54  io
 * [Bug #1603]
 * convert MLWorks.ByteArray to MLWorks.Internal.ByteArray or equivalent basis functions
 *
 * Revision 1.6  1996/08/16  15:53:35  daveb
 * Removed unused reference to ByteArray.from_string.
 *
 * Revision 1.5  1996/08/09  14:02:48  daveb
 * [Bug #1536]
 * [Bug #1536]
 * Word8Vector.vector no longer shares with string.
 *
 * Revision 1.4  1996/05/21  13:06:40  matthew
 * Updating
 *
 * Revision 1.3  1996/05/17  09:38:37  matthew
 * Moved Bits to MLWorks.Internal.Bits
 *
 * Revision 1.2  1996/05/15  13:03:29  jont
 * pack_words moved to pack_word
 *
 * Revision 1.1  1996/04/18  11:37:10  jont
 * new unit
 *
 *  Revision 1.3  1996/03/20  14:43:27  matthew
 *  Changes for new language definition
 *
 *  Revision 1.2  1995/05/16  14:21:09  daveb
 *  Added function to copy part of a string into a bytearray.
 *
 *  Revision 1.1  1995/03/22  20:22:09  brianm
 *  new unit
 *  New file.
 * 
 *
 *)

require "mono_array";
require "__word8";
require "__word8_vector";

structure Word8Array : MONO_ARRAY =
  struct
    type elem = Word8.word
    type vector = Word8Vector.vector
    datatype array = A of MLWorks.Internal.ByteArray.bytearray

    val maxLen = MLWorks.Internal.ByteArray.maxLen

    fun check_size n =
      if n < 0 orelse n > maxLen then raise Size else n

    fun array (i: int, e: elem) : array =
      A (MLWorks.Internal.ByteArray.array (check_size i, MLWorks.Internal.Value.cast e))

    fun tabulate (i : int, f : int -> elem) : array =
      A (MLWorks.Internal.ByteArray.tabulate (check_size i,MLWorks.Internal.Value.cast f))

    (* uses toplevel List.length which is overridden afterwords *)
    fun fromList (l : elem list) : array =
      (ignore(check_size (length l));
       A (MLWorks.Internal.ByteArray.arrayoflist (MLWorks.Internal.Value.cast l)))

    val length   : array -> int                     = MLWorks.Internal.Value.cast(MLWorks.Internal.ByteArray.length) 
    val sub      : (array * int) -> elem            = MLWorks.Internal.Value.cast(MLWorks.Internal.ByteArray.sub)
    val update   : (array * int * elem) -> unit     = MLWorks.Internal.Value.cast(MLWorks.Internal.ByteArray.update)

    val extract  : (array * int * int option ) -> vector =
      fn (A a,i,len) =>
      let
        val len =
          case len of
            SOME l => l
          | NONE => MLWorks.Internal.ByteArray.length a - i
      in 
        if i >= 0 andalso len >= 0 andalso i + len <= MLWorks.Internal.ByteArray.length a
          then MLWorks.Internal.Value.cast(MLWorks.Internal.ByteArray.substring (a,i,len))
        else raise Subscript
      end

    
    fun copy { src=A(src_ba), si, len, dst=A(dst_ba), di } =
      let
        val l = case len of
          SOME l => l
        | NONE => MLWorks.Internal.ByteArray.length src_ba - si
      in
        if si >= 0 andalso l >= 0 andalso si + l <= MLWorks.Internal.ByteArray.length src_ba
          andalso di >= 0 andalso di + l <= MLWorks.Internal.ByteArray.length dst_ba
          then MLWorks.Internal.ByteArray.copy(src_ba, si, si+l, dst_ba, di)
        else raise Subscript
      end

    fun copyv_ba (from, start, len, to, start') =
      let
        val finish = start+len
        val l1 = Word8Vector.length from
        val l2 = MLWorks.Internal.ByteArray.length to
        val unsafe_update = MLWorks.Internal.Value.unsafe_bytearray_update
        val unsafe_sub = MLWorks.Internal.Value.unsafe_string_sub
      in
        if start < 0 orelse start > l1 orelse start+len > l1 orelse
           start' < 0 orelse start' + len  > l2 then
          raise Subscript
        else
          let
            fun copy' 0 = ()
              | copy' n =
                let
                  val n' = n-1
                in
                  (unsafe_update (to, start'+n', unsafe_sub (MLWorks.Internal.Value.cast from, start+n'));
                   copy' n')
                end
          in
            copy' len
          end
      end

    fun copyVec {src, si, len, dst=A(dst_ba), di} =
      let
        val len =
          case len of
            SOME l => l
          | _ => Word8Vector.length src - si
      in
        copyv_ba(src, si, len, dst_ba, di)
      end

    fun app f vector =
      let
	val l = length vector
	fun iterate n =
	  if n = l then
	    ()
	  else
	    (ignore(f(sub(vector, n)));
	     iterate(n+1))
      in
	iterate 0
      end

    fun appi f (array, i, j) =
      let
	val l = length array
	val len = case j of
	  SOME len => i+len
	| NONE => l
	fun iterate' n =
	  if n >= len then
	    ()
	  else
	    (ignore(f (n, sub (array, n)));
	     iterate'(n+1))
      in
	iterate' i
      end

    fun foldl f b array =
      let
	val l = length array
	fun reduce(n, x) =
	  if n = l then
	    x
	  else
	    reduce(n+1, f(sub(array, n), x))
      in
	reduce(0, b)
      end

    fun foldr f b array =
      let
	val l = length array
	fun reduce(n, x) =
	  if n < 0 then
	    x
	  else
	    reduce(n-1, f(sub(array, n), x))
      in
	reduce(l-1, b)
      end

    fun foldli f b (array, i, j) =
      let
	val l = length array
	val len = case j of
	  SOME len => i+len
	| NONE => l
	fun reduce (n, x) =
	  if n >= l then
	    x
	  else
	    reduce(n+1, f(n, sub(array, n), x))
      in
	reduce(i, b)
      end

    fun foldri f b (array, i, j) =
      let
	val l = length array
	val len = case j of
	  SOME len => i+len
	| NONE => l
	fun reduce (n, x) =
	  if n < i then
	    x
	  else
	    reduce(n-1, f(n, sub(array, n), x))
      in
	reduce(len-1, b)
      end

    fun modify f array =
      let
	val l = length array
	fun iterate n =
	  if n = l then
	    ()
	  else
	    (update(array, n, f(sub(array, n)));
	     iterate(n+1))
      in
	iterate 0
      end

    fun modifyi f (array, i, j) =
      let
	val l = length array
	val len = case j of
	  SOME len => i+len
	| NONE => l
	fun iterate n =
	  if n >= l then
	    ()
	  else
	    (update(array, n, f(n, sub(array, n)));
	     iterate(n+1))
      in
	iterate i
      end

  end
@


1.3.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a14 4
 *  Revision 1.3  1999/03/20  21:39:08  daveb
 *  [Bug #20125]
 *  Replaced substructure with type.
 *
@


1.2
log
@[Bug #30349]
Fix to avoid non-unit sequence warnings
@
text
@d15 4
d68 1
a68 1
    structure Vector = Word8Vector
d91 1
a91 1
    val extract  : (array * int * int option ) -> Vector.vector =
d120 1
a120 1
        val l1 = Vector.length from
d148 1
a148 1
          | _ => Vector.length src - si
@


1.1
log
@new unit
[Bug #1892]
rename __word{8,16,32}{array,vector} to __word{8,16,32}_{array,vector}
@
text
@d14 6
a19 1
 *  $Log: __word8array.sml,v $
d80 1
a80 1
      (check_size (length l);
d156 1
a156 1
	    (f(sub(vector, n));
d172 1
a172 1
	    (f (n, sub (array, n));
@


1.1.3.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@d14 1
a14 6
 *  $Log: __word8_array.sml,v $
 *  Revision 1.1  1997/01/15  11:52:24  io
 *  new unit
 *  [Bug #1892]
 *  rename __word{8,16,32}{array,vector} to __word{8,16,32}_{array,vector}
 *
@


1.1.2.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@d14 1
a14 6
 *  $Log: __word8_array.sml,v $
 *  Revision 1.1  1997/01/15  11:52:24  io
 *  new unit
 *  [Bug #1892]
 *  rename __word{8,16,32}{array,vector} to __word{8,16,32}_{array,vector}
 *
@


1.1.1.1
log
@branched from 1.1
@
text
@d14 1
a14 6
 *  $Log: __word8_array.sml,v $
 *  Revision 1.1  1997/01/15  11:52:24  io
 *  new unit
 *  [Bug #1892]
 *  rename __word{8,16,32}{array,vector} to __word{8,16,32}_{array,vector}
 *
@


1.1.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a14 3
 *  Revision 1.1.1.1  1997/05/12  10:28:43  hope
 *  branched from 1.1
 *
@


1.1.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a14 3
 *  Revision 1.1.1.1  1997/05/12  10:28:43  hope
 *  branched from 1.1
 *
@


1.1.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a14 3
 *  Revision 1.1.1.1  1997/05/12  10:28:43  hope
 *  branched from 1.1
 *
@


1.1.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a14 3
 *  Revision 1.1.1.1.1.1  1997/07/28  18:14:14  daveb
 *  branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@
