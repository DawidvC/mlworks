head	1.2;
access;
symbols
	MLW_daveb_inline_1_4_99:1.2.3
	MLWorks_21c0_1999_03_25:1.2
	MLWorks_20c1_1998_08_20:1.2
	MLWorks_20c0_1998_08_04:1.2
	MLWorks_20b2c2_1998_06_19:1.2
	MLWorks_20b2_Windows_1998_06_12:1.2
	MLWorks_20b1c1_1998_05_07:1.2
	MLWorks_20b0_1998_04_07:1.2
	MLWorks_20b0_1998_03_20:1.2
	MLWorks_20m2_1998_02_16:1.2
	MLWorks_20m1_1997_10_23:1.2
	MLWorks_workspace_97:1.2.2
	MLWorks_dt_wizard:1.2.1;
locks; strict;
comment	@ *  @;


1.2
date	97.07.21.09.33.46;	author brucem;	state Exp;
branches
	1.2.1.1
	1.2.2.1
	1.2.3.1;
next	1.1;

1.1
date	97.07.21.09.19.13;	author brucem;	state Exp;
branches;
next	;

1.2.1.1
date	97.09.10.19.17.25;	author brucem;	state Exp;
branches;
next	;

1.2.2.1
date	97.09.11.20.48.08;	author daveb;	state Exp;
branches;
next	;

1.2.3.1
date	99.04.01.17.52.01;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
New structure in extended initial basis.
@


1.2
log
@Automatic checkin:
changed attribute _comment to ' *  '
@
text
@(*  ==== INITIAL BASIS : Option structure ====
 *
 *  Copyright (C) 1997 Harlequin Group Limited.  All rights reserved.
 *
 *  Description
 *  -----------
 *  This is part of the extended Initial Basis.
 *
 *  Revision Log
 *  ------------
 *  $Log:$
 *
 *)

require "option";

structure Option : OPTION =
  struct

    datatype option = datatype option (* Top level type *)

    exception Option = Option (* Top level exception *)

    (*
      (* The simple functions should be equivalent to: *)
      fun isSome (SOME _) = true | isSome _ = false

      fun valOf (SOME x) = x | valOf NONE = raise Option

      fun getOpt (NONE, d) = d
        | getOpt ((SOME x), _) = x
      (* They are not defined here as they are available from the top level. *)
     *)

    val isSome = isSome
    and valOf = valOf
    and getOpt = getOpt


    fun filter pred x = if (pred x) then (SOME x) else NONE

    fun map f NONE     = NONE
      | map f (SOME x) = SOME (f x)

    fun join NONE     = NONE
      | join (SOME x) = x

    fun mapPartial f = join o map f

    fun compose (f, g) x =
          (case (g x)
           of NONE => NONE
           | (SOME x) => SOME(f x) )
    fun composePartial (f, g) x =
          (case (g x) of
             NONE => NONE
          | (SOME x) => f x )

    (* Alternative definitions:
      fun compose  (f, g) = map f o g
      fun composePartial (f, g) = mapPartial f o g
    *)

  end

@


1.2.3.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@d11 1
a11 5
 *  $Log: __option.sml,v $
 *  Revision 1.2  1997/07/21  09:33:46  brucem
 *  Automatic checkin:
 *  changed attribute _comment to ' *  '
 *
@


1.2.2.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@d11 1
a11 5
 *  $Log: __option.sml,v $
 *  Revision 1.2  1997/07/21  09:33:46  brucem
 *  Automatic checkin:
 *  changed attribute _comment to ' *  '
 *
@


1.2.1.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@d11 1
a11 5
 *  $Log: __option.sml,v $
 *  Revision 1.2  1997/07/21  09:33:46  brucem
 *  Automatic checkin:
 *  changed attribute _comment to ' *  '
 *
@


1.1
log
@new unit
New structure in extended initial basis.
@
text
@@
