head	1.1;
access;
symbols
	MLW_daveb_inline_1_4_99:1.1.12
	MLWorks_21c0_1999_03_25:1.1
	MLWorks_20c1_1998_08_20:1.1
	MLWorks_20c0_1998_08_04:1.1
	MLWorks_20b2c2_1998_06_19:1.1
	MLWorks_20b2_Windows_1998_06_12:1.1
	MLWorks_20b1c1_1998_05_07:1.1
	MLWorks_20b0_1998_04_07:1.1
	MLWorks_20b0_1998_03_20:1.1
	MLWorks_20m2_1998_02_16:1.1
	MLWorks_20m1_1997_10_23:1.1
	MLWorks_11r1:1.1.9.1.1.1.1
	MLWorks_workspace_97:1.1.11
	MLWorks_dt_wizard:1.1.10
	MLWorks_11c0_1997_09_09:1.1.9.1.1.1
	MLWorks_10r3:1.1.9.1.3
	MLWorks_10r2_551:1.1.9.1.2
	MLWorks_11:1.1.9.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.1.9.1
	MLWorks_20m0_1997_06_20:1.1
	MLWorks_1_0_r2c2_1997_06_14:1.1.9.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.1.9.1
	MLWorks_1_0_r2c1_1997_05_12:1.1.9
	MLWorks_BugFix_1997_04_24:1.1
	MLWorks_1_0_r2_Win32_1997_04_11:1.1
	MLWorks_1_0_r2_Unix_1997_04_04:1.1
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.1.7.1.1
	MLWorks_gui_1996_12_18:1.1.8
	MLWorks_1_0_Win32_1996_12_17:1.1.7
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.1.5.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.1.5.1
	MLWorks_1_0_Irix_1996_11_28:1.1.5.1.1
	MLWorks_1_0_Win32_1996_11_22:1.1.6
	MLWorks_1_0_Unix_1996_11_14:1.1.5
	MLWorks_Open_Beta2_1996_10_11:1.1.4
	MLWorks_License_dev:1.1.3
	MLWorks_1_open_beta_1996_09_13:1.1.2
	MLWorks_Open_Beta_1996_08_22:1.1
	MLWorks_Beta_1996_07_02:1.1
	MLWorks_Beta_1996_06_07:1.1
	MLWorks_Beta_1996_06_06:1.1
	MLWorks_Beta_1996_06_05:1.1
	MLWorks_Beta_1996_06_03:1.1
	MLWorks_Beta_1996_05_31:1.1
	MLWorks_Beta_1996_05_30:1.1
	ML_beta_release_12/08/94:1.1
	ML_beta_release_03/08/94:1.1
	ML_revised_beta_release_25/05/94:1.1
	ML_final_beta_release_02/03/94:1.1
	mlworks-28-01-1994:1.1
	Release:1.1
	mlworks-beta-01-09-1993:1.1;
locks; strict;


1.1
date	93.02.12.15.24.29;	author matthew;	state Exp;
branches
	1.1.1.1
	1.1.2.1
	1.1.3.1
	1.1.4.1
	1.1.5.1
	1.1.6.1
	1.1.7.1
	1.1.8.1
	1.1.9.1
	1.1.10.1
	1.1.11.1
	1.1.12.1;
next	;

1.1.1.1
date	93.02.12.15.24.29;	author jont;	state Exp;
branches;
next	;

1.1.2.1
date	96.09.13.11.20.47;	author hope;	state Exp;
branches;
next	;

1.1.3.1
date	96.10.07.16.10.44;	author hope;	state Exp;
branches;
next	;

1.1.4.1
date	96.10.17.11.29.16;	author hope;	state Exp;
branches;
next	;

1.1.5.1
date	96.11.14.12.55.03;	author hope;	state Exp;
branches
	1.1.5.1.1.1;
next	;

1.1.5.1.1.1
date	96.11.28.15.05.45;	author hope;	state Exp;
branches;
next	;

1.1.6.1
date	96.11.22.18.13.33;	author hope;	state Exp;
branches;
next	;

1.1.7.1
date	96.12.17.17.52.02;	author hope;	state Exp;
branches
	1.1.7.1.1.1;
next	;

1.1.7.1.1.1
date	97.02.24.11.42.48;	author hope;	state Exp;
branches;
next	;

1.1.8.1
date	96.12.18.09.46.23;	author hope;	state Exp;
branches;
next	;

1.1.9.1
date	97.05.12.10.38.53;	author hope;	state Exp;
branches
	1.1.9.1.1.1
	1.1.9.1.2.1
	1.1.9.1.3.1;
next	;

1.1.9.1.1.1
date	97.07.28.18.23.51;	author daveb;	state Exp;
branches
	1.1.9.1.1.1.1.1;
next	;

1.1.9.1.1.1.1.1
date	97.10.07.11.49.37;	author jkbrook;	state Exp;
branches;
next	;

1.1.9.1.2.1
date	97.09.08.17.17.13;	author daveb;	state Exp;
branches;
next	;

1.1.9.1.3.1
date	97.09.09.14.13.22;	author daveb;	state Exp;
branches;
next	;

1.1.10.1
date	97.09.10.19.29.28;	author brucem;	state Exp;
branches;
next	;

1.1.11.1
date	97.09.11.20.59.18;	author daveb;	state Exp;
branches;
next	;

1.1.12.1
date	99.04.01.17.59.40;	author daveb;	state Exp;
branches;
next	;


desc
@Lisp code for converting ML grammar files into a lisp grammar file
@


1.1
log
@Initial revision
@
text
@(in-package ml)

(defun prefix-eq (string1 string2)
  (string= string1 string2 :end1 (length string2)))

(defun back-convert (stream start-outstream outstream end-outstream)
  (let ((line nil))
    (loop
     (setq line (read-line stream nil nil))
     (unless line (return))
     (format start-outstream "~A~%" line)
     (when (string= line "(* Do not delete this line 1 *)")
	   (return)))
    (loop while (and (setq line (read-line stream nil nil))
		     (not (string= line "(* Do not delete this line 2 *)")))
	  do
	  (cond
	   ((string= line "")
            (terpri outstream))
	   ((prefix-eq line " | _ => raise ActionError"))
	   ((prefix-eq line "(*")
	    (princ (subseq line 3 (- (length line) 3)) outstream)
            (terpri outstream))
           (t
            (princ ";#" outstream)
            (princ line outstream)
            (terpri outstream))))
    (format end-outstream "~A~%" line)
    (loop
     while (setq line (read-line stream nil nil))
     do (format end-outstream "~A~%" line))
    ))

(defun bc-file (pname start-outfile outfile end-outfile)
  (with-open-file (str pname)
    (with-open-file (start-out start-outfile :direction :output :if-exists :supersede)
       (with-open-file (out outfile :direction :output :if-exists :supersede)
         (with-open-file (end-out end-outfile :direction :output :if-exists :supersede)
	    (back-convert str start-out out end-out))))))

(defun back-convert-grammar ()
  (bc-file #P"../_actionfunctions.sml" #P"_actionfunctions-start" #P"new-grammar.lisp" #P"_actionfunctions-end"))

(defun back-convert-basics ()
  (bc-basics #P"../LRbasics.sml" '(#P"LRbasics-start" #P"LRbasics-end"))
  (bc-basics #P"../_LRbasics.sml" '(#P"_LRbasics-start" #P"_LRbasics-middle1" #P"_LRbasics-middle2" #P"_LRbasics-end")))

(defun bc-basics (file outfilelist)
  (with-open-file (stream file)
     (bc-stream stream outfilelist nil)))

(defun bc-stream (instream outfilelist start-line)
  (if (null outfilelist) nil
    (let ((outfile (car outfilelist))
	  (rest (cdr outfilelist)))
      (with-open-file (outstream outfile :direction :output :if-exists :supersede)
	 (when start-line (format outstream "~A~%" start-line))
	 (let ((line nil))
	   (loop
	    (setq line (read-line instream nil nil))
	    (unless line (return))
	    (format outstream "~A~%" line)
	    (when (string= line "(* Do not delete this line *)")
		  (return)))
	   (loop
	    (setq line (read-line instream nil nil))
	    (unless line (return))
	    (when (string= line "(* Do not delete this line *)")
		  (return)))))
      (bc-stream instream rest "(* Do not delete this line *)"))))

	    
@


1.1.12.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@@


1.1.11.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@@


1.1.10.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@@


1.1.9.1
log
@branched from 1.1
@
text
@@


1.1.9.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@@


1.1.9.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@@


1.1.9.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@@


1.1.9.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@


1.1.8.1
log
@branched from 1.1
@
text
@@


1.1.7.1
log
@branched from 1.1
@
text
@@


1.1.7.1.1.1
log
@branched from 1.1.7.1
@
text
@@


1.1.6.1
log
@branched from 1.1
@
text
@@


1.1.5.1
log
@branched from 1.1
@
text
@@


1.1.5.1.1.1
log
@branched from 1.1.5.1
@
text
@@


1.1.4.1
log
@branched from 1.1
@
text
@@


1.1.3.1
log
@branched from 1.1
@
text
@@


1.1.2.1
log
@branched from 1.1
@
text
@@


1.1.1.1
log
@Fork for bug fixing
@
text
@@
