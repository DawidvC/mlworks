head	1.20;
access;
symbols
	MLW_daveb_inline_1_4_99:1.20.8
	MLWorks_21c0_1999_03_25:1.20
	MLWorks_20c1_1998_08_20:1.20
	MLWorks_20c0_1998_08_04:1.20
	MLWorks_20b2c2_1998_06_19:1.20
	MLWorks_20b2_Windows_1998_06_12:1.20
	MLWorks_20b1c1_1998_05_07:1.20
	MLWorks_20b0_1998_04_07:1.20
	MLWorks_20b0_1998_03_20:1.20
	MLWorks_20m2_1998_02_16:1.20
	MLWorks_20m1_1997_10_23:1.20
	MLWorks_11r1:1.20.5.1.1.1.1
	MLWorks_workspace_97:1.20.7
	MLWorks_dt_wizard:1.20.6
	MLWorks_11c0_1997_09_09:1.20.5.1.1.1
	MLWorks_10r3:1.20.5.1.3
	MLWorks_10r2_551:1.20.5.1.2
	MLWorks_11:1.20.5.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.20.5.1
	MLWorks_20m0_1997_06_20:1.20
	MLWorks_1_0_r2c2_1997_06_14:1.20.5.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.20.5.1
	MLWorks_1_0_r2c1_1997_05_12:1.20.5
	MLWorks_BugFix_1997_04_24:1.20
	MLWorks_1_0_r2_Win32_1997_04_11:1.20
	MLWorks_1_0_r2_Unix_1997_04_04:1.20
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.20.3.1.1
	MLWorks_gui_1996_12_18:1.20.4
	MLWorks_1_0_Win32_1996_12_17:1.20.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.20.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.20.1.1
	MLWorks_1_0_Irix_1996_11_28:1.20.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.20.2
	MLWorks_1_0_Unix_1996_11_14:1.20.1
	MLWorks_Open_Beta2_1996_10_11:1.18.3
	MLWorks_License_dev:1.18.2
	MLWorks_1_open_beta_1996_09_13:1.18.1
	MLWorks_Open_Beta_1996_08_22:1.18
	MLWorks_Beta_1996_07_02:1.18
	MLWorks_Beta_1996_06_07:1.18
	MLWorks_Beta_1996_06_06:1.18
	MLWorks_Beta_1996_06_05:1.18
	MLWorks_Beta_1996_06_03:1.18
	MLWorks_Beta_1996_05_31:1.18
	MLWorks_Beta_1996_05_30:1.18
	ML_beta_release_12/08/94:1.11
	ML_beta_release_03/08/94:1.11
	ML_revised_beta_release_25/05/94:1.11
	ML_final_beta_release_02/03/94:1.11
	mlworks-28-01-1994:1.11
	Release:1.11
	mlworks-beta-01-09-1993:1.11
	MLWorks-1-0-4-29/01/1993:1.7
	MLWorks-1-0-3-21/12/1992:1.7
	MLWorks-1-0-2-15/12/1992:1.7
	MLWorks-1-0-1-04/12/1992:1.7
	checkpoint_17_08_92:1.7
	Ten15_release_19-11-91:1.3
	Ten15_release_21-08-91:1.3
	Ten15_release_19-08-91:1.3
	ten15_release:1.3;
locks; strict;
comment	@ * @;


1.20
date	96.11.06.10.51.06;	author matthew;	state Exp;
branches
	1.20.1.1
	1.20.2.1
	1.20.3.1
	1.20.4.1
	1.20.5.1
	1.20.6.1
	1.20.7.1
	1.20.8.1;
next	1.19;

1.19
date	96.10.09.11.52.09;	author io;	state Exp;
branches;
next	1.18;

1.18
date	96.04.30.17.33.06;	author jont;	state Exp;
branches
	1.18.1.1
	1.18.2.1
	1.18.3.1;
next	1.17;

1.17
date	96.04.29.13.17.41;	author matthew;	state Exp;
branches;
next	1.16;

1.16
date	96.03.18.16.20.59;	author matthew;	state Exp;
branches;
next	1.15;

1.15
date	95.07.28.14.30.21;	author matthew;	state Exp;
branches;
next	1.14;

1.14
date	95.07.24.15.22.26;	author jont;	state Exp;
branches;
next	1.13;

1.13
date	95.07.19.09.56.45;	author jont;	state Exp;
branches;
next	1.12;

1.12
date	95.03.17.14.32.17;	author matthew;	state Exp;
branches;
next	1.11;

1.11
date	93.05.20.11.32.11;	author matthew;	state Exp;
branches
	1.11.1.1;
next	1.10;

1.10
date	93.05.18.13.38.05;	author jont;	state Exp;
branches;
next	1.9;

1.9
date	93.03.29.11.09.03;	author daveb;	state Exp;
branches;
next	1.8;

1.8
date	93.02.12.15.35.22;	author matthew;	state Exp;
branches;
next	1.7;

1.7
date	92.08.15.15.39.45;	author davidt;	state Exp;
branches;
next	1.6;

1.6
date	92.05.14.12.00.05;	author richard;	state Exp;
branches;
next	1.5;

1.5
date	92.03.25.16.31.45;	author matthew;	state Exp;
branches;
next	1.4;

1.4
date	91.11.21.15.57.20;	author jont;	state Exp;
branches;
next	1.3;

1.3
date	91.06.20.19.56.48;	author nickh;	state Exp;
branches;
next	1.2;

1.2
date	91.06.20.17.49.13;	author nickh;	state Exp;
branches;
next	1.1;

1.1
date	91.06.07.10.55.49;	author colin;	state Exp;
branches;
next	;

1.11.1.1
date	93.05.20.11.32.11;	author jont;	state Exp;
branches;
next	;

1.18.1.1
date	96.09.13.11.09.03;	author hope;	state Exp;
branches;
next	;

1.18.2.1
date	96.10.07.16.00.00;	author hope;	state Exp;
branches;
next	;

1.18.3.1
date	96.10.17.11.18.20;	author hope;	state Exp;
branches;
next	;

1.20.1.1
date	96.11.14.12.41.53;	author hope;	state Exp;
branches
	1.20.1.1.1.1;
next	;

1.20.1.1.1.1
date	96.11.28.14.53.47;	author hope;	state Exp;
branches;
next	;

1.20.2.1
date	96.11.22.18.02.20;	author hope;	state Exp;
branches;
next	;

1.20.3.1
date	96.12.17.17.41.15;	author hope;	state Exp;
branches
	1.20.3.1.1.1;
next	;

1.20.3.1.1.1
date	97.02.24.11.29.29;	author hope;	state Exp;
branches;
next	;

1.20.4.1
date	96.12.18.09.35.13;	author hope;	state Exp;
branches;
next	;

1.20.5.1
date	97.05.12.10.27.13;	author hope;	state Exp;
branches
	1.20.5.1.1.1
	1.20.5.1.2.1
	1.20.5.1.3.1;
next	;

1.20.5.1.1.1
date	97.07.28.18.13.14;	author daveb;	state Exp;
branches
	1.20.5.1.1.1.1.1;
next	;

1.20.5.1.1.1.1.1
date	97.10.07.11.38.23;	author jkbrook;	state Exp;
branches;
next	;

1.20.5.1.2.1
date	97.09.08.17.06.35;	author daveb;	state Exp;
branches;
next	;

1.20.5.1.3.1
date	97.09.09.14.01.59;	author daveb;	state Exp;
branches;
next	;

1.20.6.1
date	97.09.10.19.16.21;	author brucem;	state Exp;
branches;
next	;

1.20.7.1
date	97.09.11.20.46.25;	author daveb;	state Exp;
branches;
next	;

1.20.8.1
date	99.04.01.17.51.41;	author daveb;	state Exp;
branches;
next	;


desc
@Datatype for Tokens (returned from the lexer)
@


1.20
log
@[Bug #1728]
__integer becomes __int
@
text
@(* _token.sml the functor *)
(*
$Log: _token.sml,v $
 * Revision 1.19  1996/10/09  11:52:09  io
 * moving String from toplevel
 *
 * Revision 1.18  1996/04/30  17:33:06  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
 * Revision 1.17  1996/04/29  13:17:41  matthew
 * Changes to Integer
 *
 * Revision 1.16  1996/03/18  16:20:59  matthew
 * New language definition
 *
 * Revision 1.15  1995/07/28  14:30:21  matthew
 * Removing MAGICCLOSE
 *
Revision 1.14  1995/07/24  15:22:26  jont
Add WORD token

Revision 1.13  1995/07/19  09:56:45  jont
Add char token

Revision 1.12  1995/03/17  14:32:17  matthew
Use ints as basic character representation

Revision 1.11  1993/05/20  11:32:11  matthew
Added code for abstractions.

Revision 1.10  1993/05/18  13:38:05  jont
Removed Integer parameter

Revision 1.9  1993/03/29  11:09:03  daveb
Added LexerState type.

Revision 1.8  1993/02/12  15:35:22  matthew
Added magic brackets tokens

Revision 1.7  1992/08/15  15:39:45  davidt
Fixed bug in printing of longids.

Revision 1.6  1992/05/14  12:00:05  richard
Added IGNORE token in order to remove recursion from lexer.

Revision 1.5  1992/03/25  16:31:45  matthew
Added a token print function, makestring

Revision 1.4  1991/11/21  15:57:20  jont
Added copyright message

Revision 1.3  91/06/20  19:56:48  nickh
Corrected cockup in datatype for 1.2

Revision 1.2  91/06/20  17:49:13  nickh
Added REQUIRE to the reserved words, for separate compilation.

Revision 1.1  91/06/07  10:55:49  colin
Initial revision

Copyright (c) 1991 Harlequin Ltd.
*)
require "symbol";
require "token";
require "../basis/__int";

functor Token (
  structure Symbol : SYMBOL
) : TOKEN =
  struct
    structure Symbol = Symbol

    datatype Reserved =
      
      ABSTYPE | AND | ANDALSO | AS | CASE | DO | DATATYPE | ELSE |
      END | EXCEPTION | FN | FUN | HANDLE | IF | IN | INFIX |
      INFIXR | LET | LOCAL | NONFIX | OF | OP | OPEN | ORELSE |
      RAISE | REC | REQUIRE | THEN | TYPE | VAL | WHERE | WITH | WITHTYPE | WHILE |
      
      EQTYPE | FUNCTOR | INCLUDE | SHARING |
      SIG | SIGNATURE | STRUCT | STRUCTURE |
      
      LPAR | RPAR | BRA | KET | LBRACE | RBRACE | COMMA | COLON | ABSCOLON |
      SEMICOLON | ELLIPSIS | UNDERBAR | VBAR | EQUAL | DARROW | ARROW |
      HASH | 

      ABSTRACTION | 

      MAGICOPEN


    datatype LexerState =
      PLAIN_STATE |
      IN_COMMENT of int | 	(* depth of nesting *)
      IN_STRING of int list	(* in \f .... f\ formatting sequence *)

    datatype Token = 
      RESERVED of Reserved |
      INTEGER of string |
      REAL of string | 
      STRING of string |
      CHAR of string |
      WORD of string |
      LONGID of Symbol.Symbol list * Symbol.Symbol |
      TYVAR of Symbol.Symbol * bool * bool |
      IGNORE |
      EOF of LexerState

  
    fun mkstring PLAIN_STATE = ""
    |   mkstring (IN_STRING _) = " (in string)"
    |   mkstring (IN_COMMENT n) =
	  " (in " ^ Int.toString n ^ " levels of comment)"

    fun makestring token =
      case token of
	RESERVED (reserved) =>
	  (case reserved of 
	     ABSTYPE => "abstype"
	   | AND => "and"
	   | ANDALSO => "andalso"
	   | AS => "as"
	   | CASE => "case"
	   | DO => "do"
	   | DATATYPE => "datatype"
	   | ELSE => "else"
	   | END => "end"
	   | EXCEPTION => "exception"
	   | FN => "fn"
	   | FUN => "fun"
	   | HANDLE => "handle"
	   | IF => "if"
	   | IN => "in"
	   | INFIX => "infix"
	   | INFIXR => "infixr"
	   | LET => "let" 
	   | LOCAL => "local" 
	   | NONFIX => "nonfix" 
	   | OF => "of" 
	   | OP => "op" 
	   | OPEN => "open" 
	   | ORELSE => "orelse"
	   | RAISE => "raise" 
	   | REC => "rec" 
	   | REQUIRE => "require" 
	   | THEN => "then" 
	   | TYPE => "type" 
	   | VAL => "val" 
	   | WHERE => "where" 
	   | WITH => "with" 
	   | WITHTYPE => "withtype" 
	   | WHILE => "while"
	   | EQTYPE => "eqtype"
	   | FUNCTOR => "functor" 
	   | INCLUDE => "include" 
	   | SHARING => "sharing" 
	   | SIG => "sig" 
	   | SIGNATURE => "signature" 
	   | STRUCT => "struct" 
	   | STRUCTURE => "structure"
	   | LPAR => "(" 
	   | RPAR => ")" 
	   | BRA => "[" 
	   | KET => "]"
	   | LBRACE => "{" 
	   | RBRACE => "}" 
	   | COMMA => "," 
	   | COLON => ":" 
	   | ABSCOLON => ":>" 
	   | SEMICOLON => ";" 
	   | ELLIPSIS => "..." 
	   | UNDERBAR => "_" 
	   | VBAR => "|"
	   | EQUAL => "=" 
	   | DARROW => "=>"
	   | ARROW => "->"
	   | HASH => "#" 
           | ABSTRACTION => "abstraction"
           | MAGICOPEN => "<<")
      | INTEGER (s) => s
      | REAL (s) => s
      | STRING (s) => s
      | CHAR (s) => s
      | WORD (s) => s
      | LONGID (slist, sym) => concat (map (fn sym => Symbol.symbol_name sym ^ ".") slist) ^ Symbol.symbol_name sym
      | TYVAR (sym, bool1, bool2) => Symbol.symbol_name sym
      | IGNORE => "ignore"
      | EOF ls => "eof" ^ mkstring ls
  end
@


1.20.8.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a3 4
 * Revision 1.20  1996/11/06  10:51:06  matthew
 * [Bug #1728]
 * __integer becomes __int
 *
@


1.20.7.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a3 4
 * Revision 1.20  1996/11/06  10:51:06  matthew
 * [Bug #1728]
 * __integer becomes __int
 *
@


1.20.6.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a3 4
 * Revision 1.20  1996/11/06  10:51:06  matthew
 * [Bug #1728]
 * __integer becomes __int
 *
@


1.20.5.1
log
@branched from 1.20
@
text
@a3 4
 * Revision 1.20  1996/11/06  10:51:06  matthew
 * [Bug #1728]
 * __integer becomes __int
 *
@


1.20.5.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a3 3
 * Revision 1.20.5.1  1997/05/12  10:27:13  hope
 * branched from 1.20
 *
@


1.20.5.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a3 3
 * Revision 1.20.5.1  1997/05/12  10:27:13  hope
 * branched from 1.20
 *
@


1.20.5.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a3 3
 * Revision 1.20.5.1  1997/05/12  10:27:13  hope
 * branched from 1.20
 *
@


1.20.5.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a3 3
 * Revision 1.20.5.1.1.1  1997/07/28  18:13:14  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.20.4.1
log
@branched from 1.20
@
text
@a3 4
 * Revision 1.20  1996/11/06  10:51:06  matthew
 * [Bug #1728]
 * __integer becomes __int
 *
@


1.20.3.1
log
@branched from 1.20
@
text
@a3 4
 * Revision 1.20  1996/11/06  10:51:06  matthew
 * [Bug #1728]
 * __integer becomes __int
 *
@


1.20.3.1.1.1
log
@branched from 1.20.3.1
@
text
@a3 3
 * Revision 1.20.3.1  1996/12/17  17:41:15  hope
 * branched from 1.20
 *
@


1.20.2.1
log
@branched from 1.20
@
text
@a3 4
 * Revision 1.20  1996/11/06  10:51:06  matthew
 * [Bug #1728]
 * __integer becomes __int
 *
@


1.20.1.1
log
@branched from 1.20
@
text
@a3 4
 * Revision 1.20  1996/11/06  10:51:06  matthew
 * [Bug #1728]
 * __integer becomes __int
 *
@


1.20.1.1.1.1
log
@branched from 1.20.1.1
@
text
@a3 3
 * Revision 1.20.1.1  1996/11/14  12:41:53  hope
 * branched from 1.20
 *
@


1.19
log
@moving String from toplevel
@
text
@d4 3
d68 1
a68 1
require "../basis/__integer";
@


1.18
log
@String functions explode, implode, chr and ord now only available from String
io functions and types
instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
now only available from MLWorks.IO
@
text
@d4 6
d185 1
a185 1
      | LONGID (slist, sym) => String.implode (map (fn sym => Symbol.symbol_name sym ^ ".") slist) ^ Symbol.symbol_name sym
@


1.18.3.1
log
@branched from 1.18
@
text
@a3 6
 * Revision 1.18  1996/04/30  17:33:06  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
@


1.18.2.1
log
@branched from 1.18
@
text
@a3 6
 * Revision 1.18  1996/04/30  17:33:06  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
@


1.18.1.1
log
@branched from 1.18
@
text
@a3 6
 * Revision 1.18  1996/04/30  17:33:06  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
@


1.17
log
@Changes to Integer
@
text
@d4 3
d179 1
a179 1
      | LONGID (slist, sym) => implode (map (fn sym => Symbol.symbol_name sym ^ ".") slist) ^ Symbol.symbol_name sym
@


1.16
log
@New language definition
@
text
@d4 3
d56 1
d104 1
a104 1
	  " (in " ^ MLWorks.Integer.makestring n ^ " levels of comment)"
@


1.15
log
@Removing MAGICCLOSE
@
text
@d4 3
d65 1
a65 1
      RAISE | REC | REQUIRE | THEN | TYPE | VAL | WITH | WITHTYPE | WHILE |
d70 1
a70 1
      LPAR | RPAR | BRA | KET | LBRACE | RBRACE | COMMA | COLON |
d136 1
d156 1
@


1.14
log
@Add WORD token
@
text
@d4 3
d73 1
a73 1
      MAGICOPEN | MAGICCLOSE
d161 1
a161 2
           | MAGICOPEN => "<<"
           | MAGICCLOSE => ">>")
@


1.13
log
@Add char token
@
text
@d4 3
d84 1
d164 1
@


1.12
log
@Use ints as basic character representation
@
text
@d4 3
d80 1
d159 1
@


1.11
log
@Added code for abstractions.
@
text
@d4 3
d70 1
a70 1
      IN_STRING of string list	(* in \f .... f\ formatting sequence *)
@


1.11.1.1
log
@Fork for bug fixing
@
text
@a3 3
Revision 1.11  1993/05/20  11:32:11  matthew
Added code for abstractions.

@


1.10
log
@Removed Integer parameter
@
text
@d4 3
d59 2
d146 1
@


1.9
log
@Added LexerState type.
@
text
@d4 3
a34 1
require "../utils/integer";
a37 1
  structure Integer : INTEGER
d78 1
a78 1
	  " (in " ^ Integer.makestring n ^ " levels of comment)"
@


1.8
log
@Added magic brackets tokens
@
text
@d4 3
d32 1
d34 4
a37 1
functor Token (structure Symbol : SYMBOL) : TOKEN =
d55 1
a55 1
      MAGICOPEN | MAGICCLOSE |
a56 1
      EOF
d58 4
d70 3
a72 1
      IGNORE of int
d74 5
d141 1
a141 2
           | MAGICCLOSE => ">>"
	   | EOF => "eof")
d147 2
a148 1
      | IGNORE _ => "ignore"
@


1.7
log
@Fixed bug in printing of longids.
@
text
@d4 3
d48 2
d123 2
@


1.6
log
@Added IGNORE token in order to remove recursion from lexer.
@
text
@d4 3
d58 67
a124 71
      let fun symbol_list_to_string [] = ""
            | symbol_list_to_string (sym :: l) = Symbol.symbol_name sym ^ "."
      in
        case token of
          RESERVED (reserved) =>
            (case reserved of 
               ABSTYPE => "abstype"
             | AND => "and"
             | ANDALSO => "andalso"
             | AS => "as"
             | CASE => "case"
             | DO => "do"
             | DATATYPE => "datatype"
             | ELSE => "else"
             | END => "end"
             | EXCEPTION => "exception"
             | FN => "fn"
             | FUN => "fun"
             | HANDLE => "handle"
             | IF => "if"
             | IN => "in"
             | INFIX => "infix"
             | INFIXR => "infixr"
             | LET => "let" 
             | LOCAL => "local" 
             | NONFIX => "nonfix" 
             | OF => "of" 
             | OP => "op" 
             | OPEN => "open" 
             | ORELSE => "orelse"
             | RAISE => "raise" 
             | REC => "rec" 
             | REQUIRE => "require" 
             | THEN => "then" 
             | TYPE => "type" 
             | VAL => "val" 
             | WITH => "with" 
             | WITHTYPE => "withtype" 
             | WHILE => "while"
             | EQTYPE => "eqtype"
             | FUNCTOR => "functor" 
             | INCLUDE => "include" 
             | SHARING => "sharing" 
             | SIG => "sig" 
             | SIGNATURE => "signature" 
             | STRUCT => "struct" 
             | STRUCTURE => "structure"
             | LPAR => "(" 
             | RPAR => ")" 
             | BRA => "[" 
             | KET => "]"
             | LBRACE => "{" 
             | RBRACE => "}" 
             | COMMA => "," 
             | COLON => ":" 
             | SEMICOLON => ";" 
             | ELLIPSIS => "..." 
             | UNDERBAR => "_" 
             | VBAR => "|"
             | EQUAL => "=" 
             | DARROW => "=>"
             | ARROW => "->"
             | HASH => "#" 
             | EOF => "eof")
        | INTEGER (s) => s
        | REAL (s) => s
        | STRING (s) => s
        | LONGID (slist, sym) => (symbol_list_to_string slist) ^ Symbol.symbol_name sym
        | TYVAR (sym, bool1, bool2) => Symbol.symbol_name sym
        | IGNORE _ => "ignore"
      end
@


1.5
log
@Added a token print function, makestring
@
text
@d4 3
d51 2
a52 1
      TYVAR of Symbol.Symbol * bool * bool
d124 1
@


1.4
log
@Added copyright message
@
text
@d3 4
a6 1
$Log:	_token.sml,v $
d49 73
a121 1
    end
@


1.3
log
@Corrected cockup in datatype for 1.2
@
text
@d1 1
d4 3
d13 1
@


1.2
log
@Added REQUIRE to the reserved words, for separate compilation.
@
text
@d3 3
d22 1
a22 1
      RAISE | REC | | REQUIRE | THEN | TYPE | VAL | WITH | WITHTYPE | WHILE |
@


1.1
log
@Initial revision
@
text
@d2 4
a5 1
$Log$
d19 1
a19 1
      RAISE | REC | THEN | TYPE | VAL | WITH | WITHTYPE | WHILE |
@
