head	1.18;
access;
symbols
	MLW_daveb_inline_1_4_99:1.18.11
	MLWorks_21c0_1999_03_25:1.18
	MLWorks_20c1_1998_08_20:1.18
	MLWorks_20c0_1998_08_04:1.18
	MLWorks_20b2c2_1998_06_19:1.18
	MLWorks_20b2_Windows_1998_06_12:1.18
	MLWorks_20b1c1_1998_05_07:1.18
	MLWorks_20b0_1998_04_07:1.18
	MLWorks_20b0_1998_03_20:1.18
	MLWorks_20m2_1998_02_16:1.18
	MLWorks_20m1_1997_10_23:1.18
	MLWorks_11r1:1.18.8.1.1.1.1
	MLWorks_workspace_97:1.18.10
	MLWorks_dt_wizard:1.18.9
	MLWorks_11c0_1997_09_09:1.18.8.1.1.1
	MLWorks_10r3:1.18.8.1.3
	MLWorks_10r2_551:1.18.8.1.2
	MLWorks_11:1.18.8.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.18.8.1
	MLWorks_20m0_1997_06_20:1.18
	MLWorks_1_0_r2c2_1997_06_14:1.18.8.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.18.8.1
	MLWorks_1_0_r2c1_1997_05_12:1.18.8
	MLWorks_BugFix_1997_04_24:1.18
	MLWorks_1_0_r2_Win32_1997_04_11:1.18
	MLWorks_1_0_r2_Unix_1997_04_04:1.18
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.18.6.1.1
	MLWorks_gui_1996_12_18:1.18.7
	MLWorks_1_0_Win32_1996_12_17:1.18.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.18.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.18.4.1
	MLWorks_1_0_Irix_1996_11_28:1.18.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.18.5
	MLWorks_1_0_Unix_1996_11_14:1.18.4
	MLWorks_Open_Beta2_1996_10_11:1.18.3
	MLWorks_License_dev:1.18.2
	MLWorks_1_open_beta_1996_09_13:1.18.1
	MLWorks_Open_Beta_1996_08_22:1.18
	MLWorks_Beta_1996_07_02:1.18
	MLWorks_Beta_1996_06_07:1.18
	MLWorks_Beta_1996_06_06:1.18
	MLWorks_Beta_1996_06_05:1.18
	MLWorks_Beta_1996_06_03:1.18
	MLWorks_Beta_1996_05_31:1.18
	MLWorks_Beta_1996_05_30:1.18
	ML_beta_release_12/08/94:1.11
	ML_beta_release_03/08/94:1.11
	ML_revised_beta_release_25/05/94:1.11
	ML_final_beta_release_02/03/94:1.9
	mlworks-28-01-1994:1.8
	Release:1.8
	mlworks-beta-01-09-1993:1.8
	MLWorks-1-0-4-29/01/1993:1.8
	MLWorks-1-0-3-21/12/1992:1.8
	MLWorks-1-0-2-15/12/1992:1.7
	MLWorks-1-0-1-04/12/1992:1.7
	checkpoint_17_08_92:1.6
	Ten15_release_19-11-91:1.3
	Ten15_release_21-08-91:1.3
	Ten15_release_19-08-91:1.3
	ten15_release:1.3;
locks; strict;
comment	@ * @;


1.18
date	95.09.08.17.42.38;	author daveb;	state Exp;
branches
	1.18.1.1
	1.18.2.1
	1.18.3.1
	1.18.4.1
	1.18.5.1
	1.18.6.1
	1.18.7.1
	1.18.8.1
	1.18.9.1
	1.18.10.1
	1.18.11.1;
next	1.17;

1.17
date	95.07.27.16.25.22;	author jont;	state Exp;
branches;
next	1.16;

1.16
date	95.07.24.15.52.38;	author jont;	state Exp;
branches;
next	1.15;

1.15
date	95.07.19.15.56.59;	author jont;	state Exp;
branches;
next	1.14;

1.14
date	95.07.19.09.45.30;	author jont;	state Exp;
branches;
next	1.13;

1.13
date	95.07.17.16.50.54;	author jont;	state Exp;
branches;
next	1.12;

1.12
date	95.07.13.11.33.32;	author matthew;	state Exp;
branches;
next	1.11;

1.11
date	94.05.13.15.17.52;	author daveb;	state Exp;
branches;
next	1.10;

1.10
date	94.05.04.12.30.08;	author daveb;	state Exp;
branches;
next	1.9;

1.9
date	93.12.03.13.20.04;	author nosa;	state Exp;
branches;
next	1.8;

1.8
date	92.12.17.16.35.12;	author matthew;	state Exp;
branches
	1.8.1.1;
next	1.7;

1.7
date	92.09.15.17.12.38;	author jont;	state Exp;
branches;
next	1.6;

1.6
date	92.08.04.12.02.15;	author jont;	state Exp;
branches;
next	1.5;

1.5
date	92.02.27.17.30.26;	author jont;	state Exp;
branches;
next	1.4;

1.4
date	91.11.21.15.56.20;	author jont;	state Exp;
branches;
next	1.3;

1.3
date	91.07.24.12.17.49;	author davida;	state Exp;
branches;
next	1.2;

1.2
date	91.07.16.15.48.32;	author colin;	state Exp;
branches;
next	1.1;

1.1
date	91.06.07.10.55.17;	author colin;	state Exp;
branches;
next	;

1.8.1.1
date	92.12.17.16.35.12;	author jont;	state Exp;
branches;
next	;

1.18.1.1
date	96.09.13.11.08.53;	author hope;	state Exp;
branches;
next	;

1.18.2.1
date	96.10.07.15.59.53;	author hope;	state Exp;
branches;
next	;

1.18.3.1
date	96.10.17.11.18.13;	author hope;	state Exp;
branches;
next	;

1.18.4.1
date	96.11.14.12.41.46;	author hope;	state Exp;
branches
	1.18.4.1.1.1;
next	;

1.18.4.1.1.1
date	96.11.28.14.53.39;	author hope;	state Exp;
branches;
next	;

1.18.5.1
date	96.11.22.18.02.12;	author hope;	state Exp;
branches;
next	;

1.18.6.1
date	96.12.17.17.41.08;	author hope;	state Exp;
branches
	1.18.6.1.1.1;
next	;

1.18.6.1.1.1
date	97.02.24.11.29.16;	author hope;	state Exp;
branches;
next	;

1.18.7.1
date	96.12.18.09.35.04;	author hope;	state Exp;
branches;
next	;

1.18.8.1
date	97.05.12.10.27.06;	author hope;	state Exp;
branches
	1.18.8.1.1.1
	1.18.8.1.2.1
	1.18.8.1.3.1;
next	;

1.18.8.1.1.1
date	97.07.28.18.13.07;	author daveb;	state Exp;
branches
	1.18.8.1.1.1.1.1;
next	;

1.18.8.1.1.1.1.1
date	97.10.07.11.38.09;	author jkbrook;	state Exp;
branches;
next	;

1.18.8.1.2.1
date	97.09.08.17.06.25;	author daveb;	state Exp;
branches;
next	;

1.18.8.1.3.1
date	97.09.09.14.01.49;	author daveb;	state Exp;
branches;
next	;

1.18.9.1
date	97.09.10.19.16.14;	author brucem;	state Exp;
branches;
next	;

1.18.10.1
date	97.09.11.20.46.13;	author daveb;	state Exp;
branches;
next	;

1.18.11.1
date	99.04.01.17.51.33;	author daveb;	state Exp;
branches;
next	;


desc
@Datatypes for identifier classes and special constants
@


1.18
log
@Added realint_tyvar for abs and ~; removed real_tyvar and int_tyvar.
@
text
@(* _ident.sml the functor *)
(*
$Log: _ident.sml,v $
Revision 1.17  1995/07/27  16:25:22  jont
Add tyvars for dealing with overloading on ints and words

Revision 1.16  1995/07/24  15:52:38  jont
Add WORD SCon

Revision 1.15  1995/07/19  15:56:59  jont
Remove bignum references

Revision 1.14  1995/07/19  09:45:30  jont
Add special constant char type

Revision 1.13  1995/07/17  16:50:54  jont
Modify scon_eqrep function to use bignums where necessary,
and to deal with hex integers

Revision 1.12  1995/07/13  11:33:32  matthew
Moving Compiler.identifier type to Ident

Revision 1.11  1994/05/13  15:17:52  daveb
Distinguished symbols for literal tyvars.

Revision 1.10  1994/05/04  12:30:08  daveb
Added tyvars for new overloading scheme.

Revision 1.9  1993/12/03  13:20:04  nosa
TYCON' for type function functions in lambda code for Modules Debugger.

Revision 1.8  1992/12/17  16:35:12  matthew
Changed int and real scons to carry a location around

Revision 1.7  1992/09/15  17:12:38  jont
Added strict less than functions for all the symbol types

Revision 1.6  1992/08/04  12:02:15  jont
Tidied up functor argument to reducing number of parameters and sharing

Revision 1.5  1992/02/27  17:30:26  jont
Added equality functions for all symbol based objects

Revision 1.4  1991/11/21  15:56:20  jont
Added copyright message

Revision 1.3  91/07/24  12:17:49  davida
Added equality of representation test on SCons

Revision 1.2  91/07/16  15:48:32  colin
Added function valid_eq which compares valids by symbol name only

Revision 1.1  91/06/07  10:55:17  colin
Initial revision

Copyright (c) 1991 Harlequin Ltd.
*)

require "symbol";
require "location";
require "ident";

functor Ident (structure Symbol : SYMBOL
               structure Location : LOCATION
                 ) : IDENT =
  struct
    structure Symbol = Symbol
    structure Location = Location

    (* first we have the identifiers in the core language *)
          
    datatype ValId =
      VAR of Symbol.Symbol
    | CON of Symbol.Symbol
    | EXCON of Symbol.Symbol
    | TYCON' of Symbol.Symbol

    val symbol_order = Symbol.symbol_order
    val symbol_lt = Symbol.symbol_lt

    local
      fun get_symbol(VAR s) = s
	| get_symbol(CON s) = s
	| get_symbol(EXCON s) = s
        | get_symbol(TYCON' s) = s
      val eq_symbol = Symbol.eq_symbol
    in
      fun valid_eq (TYCON' v1, TYCON' v2) = eq_symbol(v1, v2)
        | valid_eq (TYCON' _, _) = false
        | valid_eq (_, TYCON' _) = false
        | valid_eq (v1,v2) = eq_symbol(get_symbol v1, get_symbol v2)
      fun valid_order (TYCON' v1, TYCON' v2) = symbol_order(v1, v2)
        | valid_order (TYCON' _, _) = true
        | valid_order (_, TYCON' _) = false
        | valid_order (v1,v2) = symbol_order(get_symbol v1, get_symbol v2)
      fun valid_lt (TYCON' v1, TYCON' v2) = symbol_lt(v1, v2)
        | valid_lt (TYCON' _, _) = true
        | valid_lt (_, TYCON' _) = false
        | valid_lt (v1,v2) = symbol_lt(get_symbol v1, get_symbol v2)
    end

    (* the two bools are for equality and imperative attributes *)

    datatype TyVar = TYVAR of Symbol.Symbol * bool * bool

    fun tyvar_eq(TYVAR(s1,b1,c1),TYVAR(s2,b2,c2)) =
      b1 = b2 andalso c1 = c2 andalso Symbol.eq_symbol(s1,s2)
    fun tyvar_order(TYVAR(s1,_,_),TYVAR(s2,_,_)) = symbol_order(s1,s2)
    fun tyvar_lt(TYVAR(s1,_,_),TYVAR(s2,_,_)) = symbol_lt(s1,s2)

    val int_literal_tyvar =
      TYVAR(Symbol.find_symbol "int literal", true, false)
    val real_literal_tyvar =
      TYVAR(Symbol.find_symbol "real literal", true, false)
    val word_literal_tyvar =
      TYVAR(Symbol.find_symbol "word literal", true, false)
    val real_tyvar = TYVAR(Symbol.find_symbol "real", true, false)
    val wordint_tyvar = TYVAR(Symbol.find_symbol "wordint", true, false)
    val realint_tyvar = TYVAR(Symbol.find_symbol "realint", true, false)
    val num_tyvar = TYVAR(Symbol.find_symbol "num", true, false)
    val numtext_tyvar = TYVAR(Symbol.find_symbol "numtext", true, false)

    datatype TyCon = TYCON of Symbol.Symbol    
    datatype Lab = LAB of Symbol.Symbol    
    datatype StrId = STRID of Symbol.Symbol    

    fun tycon_eq(TYCON(s1),TYCON(s2)) = Symbol.eq_symbol(s1,s2)
    fun tycon_order(TYCON(s1),TYCON(s2)) = symbol_order(s1,s2)
    fun tycon_lt(TYCON(s1),TYCON(s2)) = symbol_lt(s1,s2)
    fun lab_eq(LAB s1,LAB s2) = Symbol.eq_symbol(s1,s2)
    fun lab_order(LAB s1,LAB s2) = symbol_order(s1,s2)
    fun lab_lt(LAB s1,LAB s2) = symbol_lt(s1,s2)
    fun strid_eq(STRID s1,STRID s2) = Symbol.eq_symbol(s1,s2)
    fun strid_order(STRID s1,STRID s2) = symbol_order(s1,s2)
    fun strid_lt(STRID s1,STRID s2) = symbol_lt(s1,s2)
                 
    (* and then for modules *)

    datatype SigId = SIGID of Symbol.Symbol
    datatype FunId = FUNID of Symbol.Symbol
	    
    fun sigid_eq(SIGID s1,SIGID s2) = Symbol.eq_symbol(s1,s2)
    fun sigid_order(SIGID s1,SIGID s2) = symbol_order(s1,s2)
    fun sigid_lt(SIGID s1,SIGID s2) = symbol_lt(s1,s2)
    fun funid_eq(FUNID s1,FUNID s2) = Symbol.eq_symbol(s1,s2)
    fun funid_order(FUNID s1,FUNID s2) = symbol_order(s1,s2)
    fun funid_lt(FUNID s1,FUNID s2) = symbol_lt(s1,s2)

    (* for long identifiers *)

    datatype Path = NOPATH | PATH of Symbol.Symbol * Path

    fun mkPath nil = NOPATH
      | mkPath (sym::syms) = PATH (sym,mkPath syms)

    fun followPath f =
      let
	fun follow (NOPATH,v) = v
	  | follow (PATH (sym,path),v) = follow (path,f (STRID sym, v))
      in
	follow
      end
    
    local 
      exception FollowPath'
    in
      fun followPath' (f,g) =
	let
	  fun follow (NOPATH,v) = v
	    | follow (PATH (sym,path),v) = follow (path,g (STRID sym, v))
	      
	  fun follow' (NOPATH,v) = raise FollowPath'
	    | follow' (PATH (sym,path),v) = follow (path,f (STRID sym, v))
	in
	  follow'
	end
    end
  
    fun isemptyPath NOPATH = true
      | isemptyPath _ = false

    datatype LongValId = LONGVALID of Path * ValId
    datatype LongTyCon = LONGTYCON of Path * TyCon
    datatype LongStrId = LONGSTRID of Path * StrId

    (* special constants form a pseudo identifier class as they also appear in
       the abstract syntax tree in the same way that real identifiers do *)

    datatype SCon = INT of (string * Location.T) | REAL of (string * Location.T) | STRING of string | CHAR of string | WORD of (string * Location.T)

    val ref_valid = CON (Symbol.find_symbol "ref")
    val eq_valid = VAR (Symbol.find_symbol "=")

    datatype Identifier =
      VALUE of ValId |
      TYPE of TyCon |
      STRUCTURE of StrId |
      SIGNATURE of SigId |
      FUNCTOR of FunId

    val dummy_identifier = VALUE (VAR (Symbol.find_symbol "it"))

    fun compare_identifiers (VALUE i, VALUE i') = valid_lt (i, i')
    |   compare_identifiers (VALUE _, _) = true
    |   compare_identifiers (_, VALUE _) = false
    |   compare_identifiers (TYPE i, TYPE i') = tycon_lt (i, i')
    |   compare_identifiers (TYPE _, _) = true
    |   compare_identifiers (_, TYPE _) = false
    |   compare_identifiers (STRUCTURE i, STRUCTURE i') = strid_lt (i, i')
    |   compare_identifiers (STRUCTURE _, _) = true
    |   compare_identifiers (_, STRUCTURE _) = false
    |   compare_identifiers (SIGNATURE i, SIGNATURE i') = sigid_lt (i, i')
    |   compare_identifiers (SIGNATURE _, _) = true
    |   compare_identifiers (FUNCTOR _, SIGNATURE _) = false
    |   compare_identifiers (FUNCTOR i, FUNCTOR i') = funid_lt (i, i')

  end
@


1.18.11.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a3 3
 * Revision 1.18  1995/09/08  17:42:38  daveb
 * Added realint_tyvar for abs and ~; removed real_tyvar and int_tyvar.
 *
@


1.18.10.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a3 3
 * Revision 1.18  1995/09/08  17:42:38  daveb
 * Added realint_tyvar for abs and ~; removed real_tyvar and int_tyvar.
 *
@


1.18.9.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a3 3
 * Revision 1.18  1995/09/08  17:42:38  daveb
 * Added realint_tyvar for abs and ~; removed real_tyvar and int_tyvar.
 *
@


1.18.8.1
log
@branched from 1.18
@
text
@a3 3
 * Revision 1.18  1995/09/08  17:42:38  daveb
 * Added realint_tyvar for abs and ~; removed real_tyvar and int_tyvar.
 *
@


1.18.8.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a3 3
 * Revision 1.18.8.1  1997/05/12  10:27:06  hope
 * branched from 1.18
 *
@


1.18.8.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a3 3
 * Revision 1.18.8.1  1997/05/12  10:27:06  hope
 * branched from 1.18
 *
@


1.18.8.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a3 3
 * Revision 1.18.8.1  1997/05/12  10:27:06  hope
 * branched from 1.18
 *
@


1.18.8.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a3 3
 * Revision 1.18.8.1.1.1  1997/07/28  18:13:07  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.18.7.1
log
@branched from 1.18
@
text
@a3 3
 * Revision 1.18  1995/09/08  17:42:38  daveb
 * Added realint_tyvar for abs and ~; removed real_tyvar and int_tyvar.
 *
@


1.18.6.1
log
@branched from 1.18
@
text
@a3 3
 * Revision 1.18  1995/09/08  17:42:38  daveb
 * Added realint_tyvar for abs and ~; removed real_tyvar and int_tyvar.
 *
@


1.18.6.1.1.1
log
@branched from 1.18.6.1
@
text
@a3 3
 * Revision 1.18.6.1  1996/12/17  17:41:08  hope
 * branched from 1.18
 *
@


1.18.5.1
log
@branched from 1.18
@
text
@a3 3
 * Revision 1.18  1995/09/08  17:42:38  daveb
 * Added realint_tyvar for abs and ~; removed real_tyvar and int_tyvar.
 *
@


1.18.4.1
log
@branched from 1.18
@
text
@a3 3
 * Revision 1.18  1995/09/08  17:42:38  daveb
 * Added realint_tyvar for abs and ~; removed real_tyvar and int_tyvar.
 *
@


1.18.4.1.1.1
log
@branched from 1.18.4.1
@
text
@a3 3
 * Revision 1.18.4.1  1996/11/14  12:41:46  hope
 * branched from 1.18
 *
@


1.18.3.1
log
@branched from 1.18
@
text
@a3 3
 * Revision 1.18  1995/09/08  17:42:38  daveb
 * Added realint_tyvar for abs and ~; removed real_tyvar and int_tyvar.
 *
@


1.18.2.1
log
@branched from 1.18
@
text
@a3 3
 * Revision 1.18  1995/09/08  17:42:38  daveb
 * Added realint_tyvar for abs and ~; removed real_tyvar and int_tyvar.
 *
@


1.18.1.1
log
@branched from 1.18
@
text
@a3 3
 * Revision 1.18  1995/09/08  17:42:38  daveb
 * Added realint_tyvar for abs and ~; removed real_tyvar and int_tyvar.
 *
@


1.17
log
@Add tyvars for dealing with overloading on ints and words
@
text
@d4 3
d111 2
a112 3
    val int_tyvar = TYVAR(Symbol.find_symbol "int", true, false)
    val int_literal_tyvar = TYVAR(Symbol.find_symbol "int literal", true, false)
    val real_tyvar = TYVAR(Symbol.find_symbol "real", true, false)
d115 5
a119 2
    val word_tyvar = TYVAR(Symbol.find_symbol "word", true, false)
    val word_literal_tyvar = TYVAR(Symbol.find_symbol "word literal", true, false)
a121 1
    val wordint_tyvar = TYVAR(Symbol.find_symbol "wordint", true, false)
@


1.16
log
@Add WORD SCon
@
text
@d4 3
d113 2
d117 1
@


1.15
log
@Remove bignum references
@
text
@d4 3
d179 1
a179 1
    datatype SCon = INT of (string * Location.T) | REAL of (string * Location.T) | STRING of string | CHAR of string
@


1.14
log
@Add special constant char type
@
text
@d4 3
d49 1
a49 1
require "../utils/bignum";
a55 1
	       structure BigNum : BIGNUM
a176 54

    fun is_hex s =
      size s >= 2 andalso
      case String.substring(s, 0, 2) of
	"0x" => true
      | _ => false

    fun sign s = String.ordof(s, 0) = ord"~"

    fun strip_zeroes(s, i) =
      if i >= size s then ""
      else
	if String.ordof(s, i) = ord"0" then
	  strip_zeroes(s, i + 1)
	else
	  String.substring(s, i, size s - i)

    fun is_zero s =
      let
	val ptr = if sign s then 1 else 0
      in
	strip_zeroes(s, if is_hex s then 2+ptr else ptr) = ""
      end

    fun scon_eqrep (INT (s,_), INT (t,_)) =
      s = t orelse
      (is_zero s andalso is_zero t)
      orelse
      (* Tricky one. There may be leading zeroes, or even hex representation *)
      (* First fail if signs different since not both zero *)
      ((sign s = sign t) andalso
       let
	 val s_is_hex = is_hex s
	 val t_is_hex = is_hex t
       in
	 if s_is_hex = t_is_hex then
	   let
	     val ptr = if sign s then 1 else 0
	     val ptr = if s_is_hex then ptr+2 else ptr
	   in
	     strip_zeroes(s, ptr) = strip_zeroes(t, ptr)
	   end
	 else
	   (* One hex, one decimal *)
	   if s_is_hex then
	     BigNum.eq(BigNum.hex_string_to_bignum s, BigNum.string_to_bignum t)
	   else
	     BigNum.eq(BigNum.hex_string_to_bignum t, BigNum.string_to_bignum s)
       end)

      | scon_eqrep (REAL (s,_), REAL(t,_)) = s = t
      | scon_eqrep (STRING s, STRING t) = s = t
      | scon_eqrep (CHAR s, CHAR t) = s = t
      | scon_eqrep (_, _) = false
@


1.13
log
@Modify scon_eqrep function to use bignums where necessary,
and to deal with hex integers
@
text
@d4 4
d174 1
a174 1
    datatype SCon = INT of (string * Location.T) | REAL of (string * Location.T) | STRING of string
d225 3
a227 2
      | scon_eqrep (REAL (s,_), REAL(t,_)) = t=s
      | scon_eqrep (STRING s, STRING t) = t=s
@


1.12
log
@Moving Compiler.identifier type to Ident
@
text
@d4 3
d17 1
a17 1
> Changed int and real scons to carry a location around
d42 1
d49 1
d172 49
a220 1
    fun scon_eqrep (INT (s,_), INT (t,_)) = t=s
@


1.11
log
@Distinguished symbols for literal tyvars.
@
text
@d4 3
d174 23
@


1.10
log
@Added tyvars for new overloading scheme.
@
text
@d4 3
d89 1
a89 1
    val int_literal_tyvar = TYVAR(Symbol.find_symbol "int", true, false)
d91 2
a92 1
    val real_literal_tyvar = TYVAR(Symbol.find_symbol "real", true, false)
@


1.9
log
@TYCON' for type function functions in lambda code for Modules Debugger.
@
text
@d4 3
d84 7
@


1.8
log
@> Changed int and real scons to carry a location around
@
text
@d4 3
d47 1
d56 1
d59 12
a70 3
      fun valid_eq (v1,v2) = eq_symbol(get_symbol v1, get_symbol v2)
      fun valid_order (v1,v2) = symbol_order (get_symbol v1, get_symbol v2)
      fun valid_lt (v1,v2) = symbol_lt (get_symbol v1, get_symbol v2)
@


1.8.1.1
log
@Fork for bug fixing
@
text
@a3 3
Revision 1.8  1992/12/17  16:35:12  matthew
> Changed int and real scons to carry a location around

@


1.7
log
@Added strict less than functions for all the symbol types
@
text
@d4 3
d28 1
d31 3
a33 1
functor Ident (structure Symbol : SYMBOL) : IDENT =
d36 1
d134 1
a134 1
    datatype SCon = INT of string | REAL of string | STRING of string
d136 2
a137 2
    fun scon_eqrep (INT s, INT t) = t=s
      | scon_eqrep (REAL s, REAL t) = t=s
@


1.6
log
@Tidied up functor argument to reducing number of parameters and sharing
@
text
@d4 3
d38 3
a45 1
      val symbol_order = Symbol.symbol_order
d49 1
d58 2
a59 1
    fun tyvar_order(TYVAR(s1,_,_),TYVAR(s2,_,_)) = Symbol.symbol_order(s1,s2)
d66 2
a67 1
    fun tycon_order(TYCON(s1),TYCON(s2)) = Symbol.symbol_order(s1,s2)
d69 2
a70 1
    fun lab_order(LAB s1,LAB s2) = Symbol.symbol_order(s1,s2)
d72 2
a73 1
    fun strid_order(STRID s1,STRID s2) = Symbol.symbol_order(s1,s2)
d81 2
a82 1
    fun sigid_order(SIGID s1,SIGID s2) = Symbol.symbol_order(s1,s2)
d84 2
a85 1
    fun funid_order(FUNID s1,FUNID s2) = Symbol.symbol_order(s1,s2)
@


1.5
log
@Added equality functions for all symbol based objects
@
text
@d4 3
a20 1
require "../utils/lists";
d24 1
a24 2
functor Ident (structure Symbol : SYMBOL
	       structure Lists : LISTS) : IDENT =
@


1.4
log
@Added copyright message
@
text
@d3 4
a6 1
$Log:	_ident.sml,v $
d38 2
d41 2
a42 3
      fun valid_eq (v1,v2) = get_symbol v1 = get_symbol v2
      fun valid_order (v1,v2) = 
	Symbol.symbol_order (get_symbol v1, get_symbol v2)
d49 2
d57 1
d59 1
d61 1
d69 1
d71 1
@


1.3
log
@Added equality of representation test on SCons
@
text
@d1 1
d4 3
d13 1
@


1.2
log
@Added function valid_eq which compares valids by symbol name only
@
text
@d3 3
d99 5
@


1.1
log
@Initial revision
@
text
@d2 4
a5 1
$Log$
d28 3
a30 2
      fun valid_order(v1,v2) = Symbol.symbol_order(get_symbol(v1),
						   get_symbol(v2))
@
