head	1.15;
access;
symbols
	MLWorks_20b0_1998_04_07:1.15
	MLWorks_20b0_1998_03_20:1.15
	MLWorks_20m2_1998_02_16:1.15
	MLWorks_20m1_1997_10_23:1.14
	MLWorks_11r1:1.13.1.1.1.1.1
	MLWorks_workspace_97:1.14.2
	MLWorks_dt_wizard:1.14.1
	MLWorks_11c0_1997_09_09:1.13.1.1.1.1
	MLWorks_10r3:1.13.1.1.3
	MLWorks_10r2_551:1.13.1.1.2
	MLWorks_11:1.13.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.13.1.1
	MLWorks_20m0_1997_06_20:1.14
	MLWorks_1_0_r2c2_1997_06_14:1.13.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.13.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.13.1
	MLWorks_BugFix_1997_04_24:1.13
	MLWorks_1_0_r2_Win32_1997_04_11:1.13
	MLWorks_1_0_r2_Unix_1997_04_04:1.13
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.12.6.1.1
	MLWorks_gui_1996_12_18:1.12.7
	MLWorks_1_0_Win32_1996_12_17:1.12.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.12.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.12.4.1
	MLWorks_1_0_Irix_1996_11_28:1.12.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.12.5
	MLWorks_1_0_Unix_1996_11_14:1.12.4
	MLWorks_Open_Beta2_1996_10_11:1.12.3
	MLWorks_License_dev:1.12.2
	MLWorks_1_open_beta_1996_09_13:1.12.1
	MLWorks_Open_Beta_1996_08_22:1.11
	MLWorks_Beta_1996_07_02:1.11
	MLWorks_Beta_1996_06_07:1.11
	MLWorks_Beta_1996_06_06:1.11
	MLWorks_Beta_1996_06_05:1.11
	MLWorks_Beta_1996_06_03:1.11
	MLWorks_Beta_1996_05_31:1.11
	MLWorks_Beta_1996_05_30:1.11
	ML_beta_release_12/08/94:1.3
	ML_beta_release_03/08/94:1.3
	ML_revised_beta_release_25/05/94:1.3
	ML_final_beta_release_02/03/94:1.2;
locks; strict;
comment	@ * @;


1.15
date	97.10.20.15.35.43;	author jont;	state Exp;
branches;
next	1.14;

1.14
date	97.05.01.12.25.44;	author jont;	state Exp;
branches
	1.14.1.1
	1.14.2.1;
next	1.13;

1.13
date	97.02.11.18.12.38;	author daveb;	state Exp;
branches
	1.13.1.1;
next	1.12;

1.12
date	96.08.27.12.20.58;	author daveb;	state Exp;
branches
	1.12.1.1
	1.12.2.1
	1.12.3.1
	1.12.4.1
	1.12.5.1
	1.12.6.1
	1.12.7.1;
next	1.11;

1.11
date	96.03.25.15.12.20;	author daveb;	state Exp;
branches;
next	1.10;

1.10
date	96.03.15.16.51.19;	author daveb;	state Exp;
branches;
next	1.9;

1.9
date	95.12.12.11.45.26;	author daveb;	state Exp;
branches;
next	1.8;

1.8
date	95.12.05.14.43.14;	author daveb;	state Exp;
branches;
next	1.7;

1.7
date	95.04.28.15.23.28;	author jont;	state Exp;
branches;
next	1.6;

1.6
date	95.04.21.10.11.43;	author daveb;	state Exp;
branches;
next	1.5;

1.5
date	95.02.01.17.31.16;	author daveb;	state Exp;
branches;
next	1.4;

1.4
date	95.01.16.14.41.33;	author daveb;	state Exp;
branches;
next	1.3;

1.3
date	94.03.25.16.13.19;	author daveb;	state Exp;
branches;
next	1.2;

1.2
date	94.02.08.14.02.23;	author daveb;	state Exp;
branches;
next	1.1;

1.1
date	94.02.02.13.37.09;	author johnk;	state Exp;
branches;
next	;

1.12.1.1
date	96.09.13.11.09.06;	author hope;	state Exp;
branches;
next	;

1.12.2.1
date	96.10.07.16.00.04;	author hope;	state Exp;
branches;
next	;

1.12.3.1
date	96.10.17.11.18.22;	author hope;	state Exp;
branches;
next	;

1.12.4.1
date	96.11.14.12.41.55;	author hope;	state Exp;
branches
	1.12.4.1.1.1;
next	;

1.12.4.1.1.1
date	96.11.28.14.53.49;	author hope;	state Exp;
branches;
next	;

1.12.5.1
date	96.11.22.18.02.22;	author hope;	state Exp;
branches;
next	;

1.12.6.1
date	96.12.17.17.41.17;	author hope;	state Exp;
branches
	1.12.6.1.1.1;
next	;

1.12.6.1.1.1
date	97.02.24.11.29.33;	author hope;	state Exp;
branches;
next	;

1.12.7.1
date	96.12.18.09.35.15;	author hope;	state Exp;
branches;
next	;

1.13.1.1
date	97.05.12.10.27.15;	author hope;	state Exp;
branches
	1.13.1.1.1.1
	1.13.1.1.2.1
	1.13.1.1.3.1;
next	;

1.13.1.1.1.1
date	97.07.28.18.12.47;	author daveb;	state Exp;
branches
	1.13.1.1.1.1.1.1;
next	;

1.13.1.1.1.1.1.1
date	97.10.07.11.37.51;	author jkbrook;	state Exp;
branches;
next	;

1.13.1.1.2.1
date	97.09.08.17.06.07;	author daveb;	state Exp;
branches;
next	;

1.13.1.1.3.1
date	97.09.09.14.01.33;	author daveb;	state Exp;
branches;
next	;

1.14.1.1
date	97.09.10.19.15.57;	author brucem;	state Exp;
branches;
next	;

1.14.2.1
date	97.09.11.20.45.44;	author daveb;	state Exp;
branches;
next	1.14.2.2;

1.14.2.2
date	97.10.29.13.45.48;	author daveb;	state Exp;
branches;
next	;


desc
@new file
@


1.15
log
@[Bug #30089]
Changing use of MLWorks.Time for basis Time
@
text
@(*  MODULE - ModuleId + Directory.
 *
 *  Copyright (C) 1997 The Harlequin Group Limited.  All rights reserved.
 *
 *  $Log: module.sml,v $
 * Revision 1.14  1997/05/01  12:25:44  jont
 * [Bug #30088]
 * Get rid of MLWorks.Option
 *
 * Revision 1.13  1997/02/11  18:12:38  daveb
 * Review edit <URI:spring://ML_Notebook/Review/basics/*module.sml>
 * -- Changed name and type of Module.find_sml and Module.sml_name.
 *
 * Revision 1.12  1996/08/27  12:20:58  daveb
 * Added comments (in preparation for a code review).
 *
 * Revision 1.11  1996/03/25  15:12:20  daveb
 * Revised with_source_path; removed call to find_file.  This is now done in
 * Incremental.match_source_path.
 *
 * Revision 1.10  1996/03/15  16:51:19  daveb
 * Module.mo_name now takes an Info.options argument.
 *
 * Revision 1.9  1995/12/12  11:45:26  daveb
 * Added message parameter to with_source_path.
 *
 * Revision 1.8  1995/12/05  14:43:14  daveb
 * Removed caches.
 *
 * Revision 1.7  1995/04/28  15:23:28  jont
 * Add filename component to find_mo, in place of Module
 *
 * Revision 1.6  1995/04/21  10:11:43  daveb
 * with_source_path now takes a filename argument for error reporting.
 *
 * Revision 1.5  1995/02/01  17:31:16  daveb
 * Removed check_search_path.
 *
 * Revision 1.4  1995/01/16  14:41:33  daveb
 * Replaced structure Option with references to MLWorks.Option.
 * Replaced the Directory type with string.
 *
 * Revision 1.3  1994/03/25  16:13:19  daveb
 * Added with_source_path.
 *
 * Revision 1.2  1994/02/08  14:02:23  daveb
 * module_and_path is now called find_file, and is functional.
 * check_search_path returns an option instead of raising an exception.
 *
 * Revision 1.1  1994/02/02  13:37:09  johnk
 * new file
 *
 *
 *)

(* The Module type locates a file as a pair of an entry on the source
   path and a module id.  It is used by functions that work out the
   module id of a file given the full path name, and by functions
   that need both the full path name and the module id. *)

(* The object path consists of a pathname, in which one
   arc may be %C and one %S.  %S is replaced by the entry from the
   source path, and %C by the component part of the module name. *)

require "../system/__time";

signature MODULE =
  sig
    type ModuleId	(* See basics/module_id. *)
    type Location	(* See basics/location. *)
    type InfoOptions 	(* See main/info. *)

    (* The type of modules *)
    type Module
    
    (* Projection functions *)
    val module_id	: Module -> ModuleId
    val module_dir	: Module -> string

    (* sml_name and mo_name return the full path name of the file.
       mo_name expands the object path appropriately. *)
    val sourceName	: Module -> string
    val objectName	: InfoOptions * Location -> Module -> string

    (* findSource, findObject, findPervasiveSource and findPervasiveObject
       find the file that corresponds to the given module_id, searching the
       source path and/or expanding the object path as appropriate.   They 
       return the real path for the file, the module, and the modification
       time.  findObject and findPervasiveObject print a warning if the
       object path expansion fails. *)
    val findSource :
      (InfoOptions * Location) -> ModuleId ->
      (string * Module * Time.time) option

    val findObject :
      (InfoOptions * Location) -> ModuleId ->
      (string * Module * Time.time) option

    val findPervasiveSource :
      (InfoOptions * Location) -> ModuleId ->
      (string * Module * Time.time) option

    val findPervasiveObject :
      (InfoOptions * Location) -> ModuleId ->
      (string * Module * Time.time) option

    (* find_file finds the named file and checks whether it is on the
       source path.  If it is on the source path, find_file returns true,
       paired with a module that consists of the appropriate entry from
       the path and the corresponding module id.  If it isn't on the
       source path, find_file returns false, paired with a module id
       constructed from the base name of the file and the directory
       containing it.  

       The Location argument is used for error messages.
       
       find_file raises BadHomeName if the file begins with a "~user/"
       that does not exist, and raise NoSuchFile if the file specified
       does not exist.  *)

    exception NoSuchFile of string
    exception BadHomeName of string
    val find_file : string * Location -> bool * Module

    (* with_source_path extends the source path with the directory part
       of the module argument while evaluating the function argument
       applied to the module_id part.  It propogates any exceptions
       raised by the function argument, resetting the source path first.
       The string argument is a description of the action from which
       with_source_path was called, e.g. "compiling", used in an error
       message. *)
    val with_source_path : Module * string -> (ModuleId -> 'a) -> 'a
  end;
@


1.14
log
@[Bug #30088]
Get rid of MLWorks.Option
@
text
@d6 4
d65 2
d93 1
a93 1
      (string * Module * MLWorks.Time.time) option
d97 1
a97 1
      (string * Module * MLWorks.Time.time) option
d101 1
a101 1
      (string * Module * MLWorks.Time.time) option
d105 1
a105 1
      (string * Module * MLWorks.Time.time) option
@


1.14.2.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a5 4
 * Revision 1.14  1997/05/01  12:25:44  jont
 * [Bug #30088]
 * Get rid of MLWorks.Option
 *
@


1.14.2.2
log
@[Bug #30089]
Merged from trunk:
Changing use of MLWorks.Time for basis Time
@
text
@a5 4
 *
 * Revision 1.14.2.1  1997/09/11  20:45:44  daveb
 * branched from trunk for label MLWorks_workspace_97
 *
a64 2
require "../system/__time";

d91 1
a91 1
      (string * Module * Time.time) option
d95 1
a95 1
      (string * Module * Time.time) option
d99 1
a99 1
      (string * Module * Time.time) option
d103 1
a103 1
      (string * Module * Time.time) option
@


1.14.1.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a5 4
 * Revision 1.14  1997/05/01  12:25:44  jont
 * [Bug #30088]
 * Get rid of MLWorks.Option
 *
@


1.13
log
@Review edit <URI:spring://ML_Notebook/Review/basics/*module.sml>
-- Changed name and type of Module.find_sml and Module.sml_name.
@
text
@d6 4
d87 1
a87 1
      (string * Module * MLWorks.Time.time) MLWorks.Option.option
d91 1
a91 1
      (string * Module * MLWorks.Time.time) MLWorks.Option.option
d95 1
a95 1
      (string * Module * MLWorks.Time.time) MLWorks.Option.option
d99 1
a99 1
      (string * Module * MLWorks.Time.time) MLWorks.Option.option
@


1.13.1.1
log
@branched from 1.13
@
text
@a5 4
 * Revision 1.13  1997/02/11  18:12:38  daveb
 * Review edit <URI:spring://ML_Notebook/Review/basics/*module.sml>
 * -- Changed name and type of Module.find_sml and Module.sml_name.
 *
@


1.13.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a5 3
 * Revision 1.13.1.1  1997/05/12  10:27:15  hope
 * branched from 1.13
 *
@


1.13.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a5 3
 * Revision 1.13.1.1  1997/05/12  10:27:15  hope
 * branched from 1.13
 *
@


1.13.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a5 3
 * Revision 1.13.1.1  1997/05/12  10:27:15  hope
 * branched from 1.13
 *
@


1.13.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a5 3
 * Revision 1.13.1.1.1.1  1997/07/28  18:12:47  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.12
log
@Added comments (in preparation for a code review).
@
text
@d3 1
a3 1
 *  Copyright (C) 1994 Harlequin Ltd.
d6 3
d53 4
d59 7
a65 6
    type ModuleId
    type Location
    type InfoOptions

    datatype Module = MODULE of string * ModuleId

d72 2
a73 2
    val sml_name	: Module -> string
    val mo_name		: InfoOptions -> Module -> string
d75 8
a82 5
    (* find_sml, find_mo and find_pervasive_mo find the file that
       corresponds to the given module_id, searching the source
       path and expanding the object path as appropriate. *)
    val find_sml :
      InfoOptions -> ModuleId ->
d85 2
a86 2
    val find_mo :
      InfoOptions -> ModuleId ->
d89 2
a90 2
    val find_pervasive_mo :
      InfoOptions -> ModuleId ->
d93 18
a110 6
    (* find_file finds the named file and checks whether it is on the source
       path.  If it is on the source path, find_file returns true, paired with
       a module that consists of the appropriate entry from the path and the
       corresponding module id.  If it isn't on the source path, find_file
       returns false, paired with a module id constructed from the base name
       of the file and the directory containing it.  *)
d117 5
a121 1
       applied to the module_id part. *)
@


1.12.7.1
log
@branched from 1.12
@
text
@a5 3
 * Revision 1.12  1996/08/27  12:20:58  daveb
 * Added comments (in preparation for a code review).
 *
@


1.12.6.1
log
@branched from 1.12
@
text
@a5 3
 * Revision 1.12  1996/08/27  12:20:58  daveb
 * Added comments (in preparation for a code review).
 *
@


1.12.6.1.1.1
log
@branched from 1.12.6.1
@
text
@a5 3
 * Revision 1.12.6.1  1996/12/17  17:41:17  hope
 * branched from 1.12
 *
@


1.12.5.1
log
@branched from 1.12
@
text
@a5 3
 * Revision 1.12  1996/08/27  12:20:58  daveb
 * Added comments (in preparation for a code review).
 *
@


1.12.4.1
log
@branched from 1.12
@
text
@a5 3
 * Revision 1.12  1996/08/27  12:20:58  daveb
 * Added comments (in preparation for a code review).
 *
@


1.12.4.1.1.1
log
@branched from 1.12.4.1
@
text
@a5 3
 * Revision 1.12.4.1  1996/11/14  12:41:55  hope
 * branched from 1.12
 *
@


1.12.3.1
log
@branched from 1.12
@
text
@a5 3
 * Revision 1.12  1996/08/27  12:20:58  daveb
 * Added comments (in preparation for a code review).
 *
@


1.12.2.1
log
@branched from 1.12
@
text
@a5 3
 * Revision 1.12  1996/08/27  12:20:58  daveb
 * Added comments (in preparation for a code review).
 *
@


1.12.1.1
log
@branched from 1.12
@
text
@a5 3
 * Revision 1.12  1996/08/27  12:20:58  daveb
 * Added comments (in preparation for a code review).
 *
@


1.11
log
@Revised with_source_path; removed call to find_file.  This is now done in
Incremental.match_source_path.
@
text
@d6 4
d45 5
d58 1
d62 2
d67 3
@


1.10
log
@Module.mo_name now takes an Info.options argument.
@
text
@d6 3
d74 1
d77 4
a80 6
    (* with_source_path expands the string argument to a full file name,
       and calls find_file with that argument.  If successful, it calls
       the function with the appropriate ModuleId.  The fourth parameter
       is a message that describes the action being done on the module,
       e.g. "compiling", "checking dependencies of". *)
    val with_source_path: (ModuleId -> 'a) * Location * string * string -> 'a
@


1.9
log
@Added message parameter to with_source_path.
@
text
@d6 3
d42 1
d50 1
a50 1
    val mo_name		: Module -> string
d53 2
a54 1
      ModuleId -> (string * Module * MLWorks.Time.time) MLWorks.Option.option
d57 2
a58 1
      ModuleId -> (string * Module * MLWorks.Time.time) MLWorks.Option.option
d61 2
a62 1
      ModuleId -> (string * Module * MLWorks.Time.time) MLWorks.Option.option
@


1.8
log
@Removed caches.
@
text
@d6 3
d67 5
a71 3
       and call find_file with that argument.  If successful, it calls
       the function with the appropriate ModuleId.  *)
    val with_source_path: (ModuleId -> 'a) * Location * string -> 'a
@


1.7
log
@Add filename component to find_mo, in place of Module
@
text
@d6 3
a36 3
    type Cache
    (* Caches map of moduleids to filenames and timestamps. *)

d46 1
a46 2
      ModuleId * Cache ->
        (string * Module * MLWorks.Time.time) MLWorks.Option.option * Cache
d49 1
a49 2
      ModuleId * Cache ->
        (string * Module * MLWorks.Time.time) MLWorks.Option.option * Cache
d52 1
a52 9
      ModuleId * Cache ->
        (string * Module * MLWorks.Time.time) MLWorks.Option.option * Cache

    val empty_cache	: Cache
    val update_cache :
      Cache * ModuleId * (string * Module * MLWorks.Time.time) -> Cache
    val cache_size : Cache -> int
    val cache_list : Cache -> ModuleId list

@


1.6
log
@with_source_path now takes a filename argument for error reporting.
@
text
@d6 17
a22 14
# Revision 1.5  1995/02/01  17:31:16  daveb
# Removed check_search_path.
#
# Revision 1.4  1995/01/16  14:41:33  daveb
# Replaced structure Option with references to MLWorks.Option.
# Replaced the Directory type with string.
#
# Revision 1.3  1994/03/25  16:13:19  daveb
# Added with_source_path.
#
# Revision 1.2  1994/02/08  14:02:23  daveb
# module_and_path is now called find_file, and is functional.
# check_search_path returns an option instead of raising an exception.
#
a43 1
    val relative_mo 	: string * ModuleId -> string
d47 1
a47 1
        (Module * MLWorks.Time.time) MLWorks.Option.option * Cache
d51 1
a51 1
        (Module * MLWorks.Time.time) MLWorks.Option.option * Cache
d55 1
a55 1
        (Module * MLWorks.Time.time) MLWorks.Option.option * Cache
d59 1
a59 1
      Cache * ModuleId * (Module * MLWorks.Time.time) -> Cache
@


1.5
log
@Removed check_search_path.
@
text
@d6 3
d71 4
a74 1
    val with_source_path: (ModuleId -> 'a) * string -> 'a
@


1.4
log
@Replaced structure Option with references to MLWorks.Option.
Replaced the Directory type with string.
@
text
@d6 4
a64 2
    val check_search_path : string * Location -> Module MLWorks.Option.option

@


1.3
log
@Added with_source_path.
@
text
@d6 3
a18 2
require "../utils/option";

a20 3
    structure Option : OPTION

    type Directory
d27 1
a27 1
    datatype Module = MODULE of Directory * ModuleId
d30 1
a30 2
    val module_dir	: Module -> Directory
    val dir_string      : Directory -> string
d34 1
a34 1
    val relative_mo 	: Directory * ModuleId -> string
d36 12
a47 6
    val find_sml   	: ModuleId * Cache ->
			    (Module * MLWorks.Time.time) Option.opt * Cache
    val find_mo	   	: ModuleId * Cache ->
			    (Module * MLWorks.Time.time) Option.opt * Cache
    val find_pervasive_mo   	: ModuleId * Cache ->
			    (Module * MLWorks.Time.time) Option.opt * Cache
d49 2
a50 2
    val update_cache	: Cache * ModuleId * (Module * MLWorks.Time.time) ->
			    Cache
d61 2
a62 1
    val check_search_path : string * Location -> Module Option.opt
@


1.2
log
@module_and_path is now called find_file, and is functional.
check_search_path returns an option instead of raising an exception.
@
text
@d6 4
d62 1
@


1.1
log
@new file
@
text
@d5 3
a7 1
 *  $Log$
d9 1
a46 2
    exception NotOnSearchPath
    val check_search_path : string * Location -> Module
d48 7
a54 4
    (* module_and_path finds the named file, sees whether it is on the source
       path, and if not it adds the directory containing the file.  It returns
       the old source path so that it can be reset after compilation.
       Arguably the source path should be an argument to the compiler. *)
d56 1
a56 1
    val module_and_path : string * Location -> Module * string list
@
