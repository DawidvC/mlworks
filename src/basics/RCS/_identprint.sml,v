head	1.20;
access;
symbols
	MLW_daveb_inline_1_4_99:1.20.8
	MLWorks_21c0_1999_03_25:1.20
	MLWorks_20c1_1998_08_20:1.20
	MLWorks_20c0_1998_08_04:1.20
	MLWorks_20b2c2_1998_06_19:1.20
	MLWorks_20b2_Windows_1998_06_12:1.20
	MLWorks_20b1c1_1998_05_07:1.20
	MLWorks_20b0_1998_04_07:1.20
	MLWorks_20b0_1998_03_20:1.20
	MLWorks_20m2_1998_02_16:1.20
	MLWorks_20m1_1997_10_23:1.20
	MLWorks_11r1:1.20.5.1.1.1.1
	MLWorks_workspace_97:1.20.7
	MLWorks_dt_wizard:1.20.6
	MLWorks_11c0_1997_09_09:1.20.5.1.1.1
	MLWorks_10r3:1.20.5.1.3
	MLWorks_10r2_551:1.20.5.1.2
	MLWorks_11:1.20.5.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.20.5.1
	MLWorks_20m0_1997_06_20:1.20
	MLWorks_1_0_r2c2_1997_06_14:1.20.5.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.20.5.1
	MLWorks_1_0_r2c1_1997_05_12:1.20.5
	MLWorks_BugFix_1997_04_24:1.20
	MLWorks_1_0_r2_Win32_1997_04_11:1.20
	MLWorks_1_0_r2_Unix_1997_04_04:1.20
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.20.3.1.1
	MLWorks_gui_1996_12_18:1.20.4
	MLWorks_1_0_Win32_1996_12_17:1.20.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.20.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.20.1.1
	MLWorks_1_0_Irix_1996_11_28:1.20.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.20.2
	MLWorks_1_0_Unix_1996_11_14:1.20.1
	MLWorks_Open_Beta2_1996_10_11:1.19.3
	MLWorks_License_dev:1.19.2
	MLWorks_1_open_beta_1996_09_13:1.19.1
	MLWorks_Open_Beta_1996_08_22:1.19
	MLWorks_Beta_1996_07_02:1.19
	MLWorks_Beta_1996_06_07:1.19
	MLWorks_Beta_1996_06_06:1.19
	MLWorks_Beta_1996_06_05:1.19
	MLWorks_Beta_1996_06_03:1.18
	MLWorks_Beta_1996_05_31:1.18
	MLWorks_Beta_1996_05_30:1.18
	ML_beta_release_12/08/94:1.12
	ML_beta_release_03/08/94:1.12
	ML_revised_beta_release_25/05/94:1.12
	ML_final_beta_release_02/03/94:1.12
	mlworks-28-01-1994:1.10
	Release:1.9
	mlworks-beta-01-09-1993:1.9
	MLWorks-1-0-4-29/01/1993:1.7
	MLWorks-1-0-3-21/12/1992:1.7
	MLWorks-1-0-2-15/12/1992:1.6
	MLWorks-1-0-1-04/12/1992:1.6
	checkpoint_17_08_92:1.4
	Ten15_release_19-11-91:1.2
	Ten15_release_21-08-91:1.2
	Ten15_release_19-08-91:1.2
	ten15_release:1.2;
locks; strict;
comment	@ * @;


1.20
date	96.10.09.11.52.06;	author io;	state Exp;
branches
	1.20.1.1
	1.20.2.1
	1.20.3.1
	1.20.4.1
	1.20.5.1
	1.20.6.1
	1.20.7.1
	1.20.8.1;
next	1.19;

1.19
date	96.06.04.11.00.40;	author jont;	state Exp;
branches
	1.19.1.1
	1.19.2.1
	1.19.3.1;
next	1.18;

1.18
date	96.04.30.15.06.53;	author jont;	state Exp;
branches;
next	1.17;

1.17
date	95.09.12.12.24.45;	author daveb;	state Exp;
branches;
next	1.16;

1.16
date	95.07.24.15.52.03;	author jont;	state Exp;
branches;
next	1.15;

1.15
date	95.07.19.10.20.54;	author jont;	state Exp;
branches;
next	1.14;

1.14
date	95.02.17.11.42.34;	author daveb;	state Exp;
branches;
next	1.13;

1.13
date	95.02.06.15.53.40;	author matthew;	state Exp;
branches;
next	1.12;

1.12
date	94.02.21.17.07.24;	author nosa;	state Exp;
branches;
next	1.11;

1.11
date	94.02.14.16.18.13;	author nickh;	state Exp;
branches;
next	1.10;

1.10
date	93.11.26.15.10.39;	author matthew;	state Exp;
branches;
next	1.9;

1.9
date	93.03.03.18.29.03;	author matthew;	state Exp;
branches
	1.9.1.1;
next	1.8;

1.8
date	93.02.01.14.50.20;	author matthew;	state Exp;
branches;
next	1.7;

1.7
date	92.12.17.16.36.41;	author matthew;	state Exp;
branches;
next	1.6;

1.6
date	92.11.25.18.53.16;	author daveb;	state Exp;
branches;
next	1.5;

1.5
date	92.09.16.08.36.23;	author daveb;	state Exp;
branches;
next	1.4;

1.4
date	92.01.22.19.30.14;	author jont;	state Exp;
branches;
next	1.3;

1.3
date	91.11.21.15.56.50;	author jont;	state Exp;
branches;
next	1.2;

1.2
date	91.07.23.15.16.12;	author davida;	state Exp;
branches;
next	1.1;

1.1
date	91.06.07.10.55.34;	author colin;	state Exp;
branches;
next	;

1.9.1.1
date	93.03.03.18.29.03;	author jont;	state Exp;
branches;
next	;

1.19.1.1
date	96.09.13.11.09.02;	author hope;	state Exp;
branches;
next	;

1.19.2.1
date	96.10.07.15.59.59;	author hope;	state Exp;
branches;
next	;

1.19.3.1
date	96.10.17.11.18.19;	author hope;	state Exp;
branches;
next	;

1.20.1.1
date	96.11.14.12.41.52;	author hope;	state Exp;
branches
	1.20.1.1.1.1;
next	;

1.20.1.1.1.1
date	96.11.28.14.53.46;	author hope;	state Exp;
branches;
next	;

1.20.2.1
date	96.11.22.18.02.19;	author hope;	state Exp;
branches;
next	;

1.20.3.1
date	96.12.17.17.41.14;	author hope;	state Exp;
branches
	1.20.3.1.1.1;
next	;

1.20.3.1.1.1
date	97.02.24.11.29.28;	author hope;	state Exp;
branches;
next	;

1.20.4.1
date	96.12.18.09.35.11;	author hope;	state Exp;
branches;
next	;

1.20.5.1
date	97.05.12.10.27.12;	author hope;	state Exp;
branches
	1.20.5.1.1.1
	1.20.5.1.2.1
	1.20.5.1.3.1;
next	;

1.20.5.1.1.1
date	97.07.28.18.13.13;	author daveb;	state Exp;
branches
	1.20.5.1.1.1.1.1;
next	;

1.20.5.1.1.1.1.1
date	97.10.07.11.38.20;	author jkbrook;	state Exp;
branches;
next	;

1.20.5.1.2.1
date	97.09.08.17.06.35;	author daveb;	state Exp;
branches;
next	;

1.20.5.1.3.1
date	97.09.09.14.01.58;	author daveb;	state Exp;
branches;
next	;

1.20.6.1
date	97.09.10.19.16.20;	author brucem;	state Exp;
branches;
next	;

1.20.7.1
date	97.09.11.20.46.24;	author daveb;	state Exp;
branches;
next	;

1.20.8.1
date	99.04.01.17.51.41;	author daveb;	state Exp;
branches;
next	;


desc
@Printing routines for identifiers
@


1.20
log
@moving String from toplevel
@
text
@(* _identprint.sml the functor *)
(*
$Log: _identprint.sml,v $
 * Revision 1.19  1996/06/04  11:00:40  jont
 * Add unbound flexible structure and tycon error messages
 *
 * Revision 1.18  1996/04/30  15:06:53  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
 * Revision 1.17  1995/09/12  12:24:45  daveb
 * Added "word literal" case to printTyvar.
 *
Revision 1.16  1995/07/24  15:52:03  jont
Add WORD SCon

Revision 1.15  1995/07/19  10:20:54  jont
Add ident.CHAR to printing of SCons

Revision 1.14  1995/02/17  11:42:34  daveb
Changed printing of overloading literal tyvars.

Revision 1.13  1995/02/06  15:53:40  matthew
Adding unbound value message functions

Revision 1.12  1994/02/21  17:07:24  nosa
TYCON' for type function functions in lambda code for Modules Debugger.

Revision 1.11  1994/02/14  16:18:13  nickh
Moved convert_string to MLWorks.String.ml_string.

Revision 1.10  1993/11/26  15:10:39  matthew
Changed printSCon of string to escape characters rather than just
printing the string.  This should really use a library function convert_string

Revision 1.9  1993/03/03  18:29:03  matthew
Options & Info changes

Revision 1.8  1993/02/01  14:50:20  matthew
Added sharing constraint.

Revision 1.7  1992/12/17  16:36:41  matthew
Changed int and real scons to carry a location around

Revision 1.6  1992/11/25  18:53:16  daveb
Changes to make show_id_class and show_eq_info part of Info structure
instead of references.

Revision 1.5  1992/09/16  08:36:23  daveb
Renamed include_class to show_id_class and added it to the signature.

Revision 1.4  1992/01/22  19:30:14  jont
Added require "ident" which was missing

Revision 1.3  1991/11/21  15:56:50  jont
Added copyright message

Revision 1.2  91/07/23  15:16:12  davida
Altered to print class of ValIds.

Revision 1.1  91/06/07  10:55:34  colin
Initial revision

Copyright (c) 1991 Harlequin Ltd.
*)
require "../main/options";
require "ident";
require "identprint";

functor IdentPrint (
  structure Ident : IDENT
  structure Options  : OPTIONS
                    ) : IDENTPRINT =
  struct
    structure Ident = Ident
    structure Options = Options

    val name = Ident.Symbol.symbol_name

    fun appclass show_id_class c s =
      if show_id_class then (name s) ^ " <" ^ c ^ ">" else (name s)
			   
    fun printValId' show_id_class (Ident.VAR sym) =
	  appclass show_id_class "VAR" sym
      | printValId' show_id_class (Ident.CON sym) =
	  appclass show_id_class "CON" sym
      | printValId' show_id_class (Ident.EXCON sym) =
	  appclass show_id_class "EXCON" sym
      | printValId' show_id_class (Ident.TYCON' sym) =
	  appclass show_id_class "TYCON'" sym

    fun debug_printValId id = printValId' true id

    fun printValId (Options.PRINTOPTIONS options) id =
	  printValId' (#show_id_class options) id

    fun printTyVar (Ident.TYVAR(sym,_,_)) =
      case name sym
      of "int literal" => "int"
      |  "word literal" => "word"
      |  "real literal" => "real"
      |  "wordint" => "int_or_word"
      |  "realint" => "real_or_int"
      |  "num" => "num"
      |  "numtext" => "text_or_num"
      |  str => str

    fun printTyCon (Ident.TYCON sym) = name sym
    fun printLab   (Ident.LAB   sym) = name sym
    fun printStrId (Ident.STRID sym) = name sym
    fun printSigId (Ident.SIGID sym) = name sym
    fun printFunId (Ident.FUNID sym) = name sym

    local 
      val follow = 
	Ident.followPath (fn (strid,string) =>
			  string ^ (printStrId strid) ^ ".")
    in
      fun printPath path = follow (path,"")
    end

    fun printLongValId options (Ident.LONGVALID (path,valid)) =
      printPath path ^ printValId options valid

    fun printLongTyCon (Ident.LONGTYCON (path,tycon)) =
      printPath path ^ printTyCon tycon
 
   fun printLongStrId (Ident.LONGSTRID (path,strid)) =
      printPath path ^ printStrId strid

   (* This should get maximums string size from options *)
   fun printSCon (Ident.INT (x,_)) = x
     | printSCon (Ident.REAL (x,_)) = x
     | printSCon (Ident.STRING x) =
       "\"" ^ MLWorks.String.ml_string(x,20) ^ "\""
     | printSCon (Ident.CHAR x) =
       "#\"" ^ MLWorks.String.ml_string(x,20) ^ "\""
     | printSCon(Ident.WORD (x, _)) = x

   fun valid_unbound_strid_message (strid,lvalid,print_options) =
      concat ["Unbound structure ", printStrId strid, " in ",
               printLongValId print_options lvalid]

   fun tycon_unbound_strid_message (strid,ltycon) =
      concat ["Unbound structure ", printStrId strid, " in ",
               printLongTyCon ltycon]

   fun tycon_unbound_flex_strid_message (strid,ltycon) =
      concat ["Unbound flexible structure ", printStrId strid, " in ",
               printLongTyCon ltycon]

   fun strid_unbound_strid_message (strid,lstrid,print_options) =
     concat (["Unbound structure ",printStrId strid] @@
              (case lstrid of 
                 Ident.LONGSTRID (Ident.NOPATH,_) => []
               | _ => [" in ", printLongStrId lstrid]))

   fun unbound_longvalid_message (valid,lvalid,class,print_options) =
     let
       val message = ["Unbound ", class, " ", printValId print_options valid]
     in
       case lvalid of
         Ident.LONGVALID (Ident.NOPATH,_) =>
           concat message
       | _ => concat (message @@ [" in ", printLongValId print_options lvalid])
     end

   fun unbound_lt_message message =
     fn (tycon, ltycon) =>
     let
       val message = [message, printTyCon tycon]
     in
       case ltycon of
         Ident.LONGTYCON (Ident.NOPATH,_) =>
           concat message
       | _ => concat (message @@ [" in ", printLongTyCon ltycon])
     end

   val unbound_longtycon_message = unbound_lt_message "Unbound type constructor "

   val unbound_flex_longtycon_message = unbound_lt_message "Unbound flexible type constructor "
  end
@


1.20.8.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a3 3
 * Revision 1.20  1996/10/09  11:52:06  io
 * moving String from toplevel
 *
@


1.20.7.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a3 3
 * Revision 1.20  1996/10/09  11:52:06  io
 * moving String from toplevel
 *
@


1.20.6.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a3 3
 * Revision 1.20  1996/10/09  11:52:06  io
 * moving String from toplevel
 *
@


1.20.5.1
log
@branched from 1.20
@
text
@a3 3
 * Revision 1.20  1996/10/09  11:52:06  io
 * moving String from toplevel
 *
@


1.20.5.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a3 3
 * Revision 1.20.5.1  1997/05/12  10:27:12  hope
 * branched from 1.20
 *
@


1.20.5.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a3 3
 * Revision 1.20.5.1  1997/05/12  10:27:12  hope
 * branched from 1.20
 *
@


1.20.5.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a3 3
 * Revision 1.20.5.1  1997/05/12  10:27:12  hope
 * branched from 1.20
 *
@


1.20.5.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a3 3
 * Revision 1.20.5.1.1.1  1997/07/28  18:13:13  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.20.4.1
log
@branched from 1.20
@
text
@a3 3
 * Revision 1.20  1996/10/09  11:52:06  io
 * moving String from toplevel
 *
@


1.20.3.1
log
@branched from 1.20
@
text
@a3 3
 * Revision 1.20  1996/10/09  11:52:06  io
 * moving String from toplevel
 *
@


1.20.3.1.1.1
log
@branched from 1.20.3.1
@
text
@a3 3
 * Revision 1.20.3.1  1996/12/17  17:41:14  hope
 * branched from 1.20
 *
@


1.20.2.1
log
@branched from 1.20
@
text
@a3 3
 * Revision 1.20  1996/10/09  11:52:06  io
 * moving String from toplevel
 *
@


1.20.1.1
log
@branched from 1.20
@
text
@a3 3
 * Revision 1.20  1996/10/09  11:52:06  io
 * moving String from toplevel
 *
@


1.20.1.1.1.1
log
@branched from 1.20.1.1
@
text
@a3 3
 * Revision 1.20.1.1  1996/11/14  12:41:52  hope
 * branched from 1.20
 *
@


1.19
log
@Add unbound flexible structure and tycon error messages
@
text
@d4 3
d143 1
a143 1
      String.implode ["Unbound structure ", printStrId strid, " in ",
d147 1
a147 1
      String.implode ["Unbound structure ", printStrId strid, " in ",
d151 1
a151 1
      String.implode ["Unbound flexible structure ", printStrId strid, " in ",
d155 1
a155 1
     String.implode (["Unbound structure ",printStrId strid] @@
d166 2
a167 2
           String.implode message
       | _ => String.implode (message @@ [" in ", printLongValId print_options lvalid])
d177 2
a178 2
           String.implode message
       | _ => String.implode (message @@ [" in ", printLongTyCon ltycon])
@


1.19.3.1
log
@branched from 1.19
@
text
@a3 3
 * Revision 1.19  1996/06/04  11:00:40  jont
 * Add unbound flexible structure and tycon error messages
 *
@


1.19.2.1
log
@branched from 1.19
@
text
@a3 3
 * Revision 1.19  1996/06/04  11:00:40  jont
 * Add unbound flexible structure and tycon error messages
 *
@


1.19.1.1
log
@branched from 1.19
@
text
@a3 3
 * Revision 1.19  1996/06/04  11:00:40  jont
 * Add unbound flexible structure and tycon error messages
 *
@


1.18
log
@String functions explode, implode, chr and ord now only available from String
io functions and types
instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
now only available from MLWorks.IO
@
text
@d4 6
d147 4
d167 2
a168 1
   fun unbound_longtycon_message (tycon,ltycon) =
d170 1
a170 1
       val message = ["Unbound type constructor ",printTyCon tycon]
d177 4
@


1.17
log
@Added "word literal" case to printTyvar.
@
text
@d4 3
d134 1
a134 1
      implode ["Unbound structure ", printStrId strid, " in ",
d138 1
a138 1
      implode ["Unbound structure ", printStrId strid, " in ",
d142 1
a142 1
     implode (["Unbound structure ",printStrId strid] @@
d153 2
a154 2
           implode message
       | _ => implode (message @@ [" in ", printLongValId print_options lvalid])
d163 2
a164 2
           implode message
       | _ => implode (message @@ [" in ", printLongTyCon ltycon])
@


1.16
log
@Add WORD SCon
@
text
@d4 3
d90 1
d92 4
@


1.15
log
@Add ident.CHAR to printing of SCons
@
text
@d4 3
d120 1
@


1.14
log
@Changed printing of overloading literal tyvars.
@
text
@d4 3
d114 3
a116 1
       "\"" ^ MLWorks.String.ml_string (x,20) ^ "\""
@


1.13
log
@Adding unbound value message functions
@
text
@d4 3
d78 6
a83 1
    fun printTyVar (Ident.TYVAR (sym,_,_)) = name sym
@


1.12
log
@TYCON' for type function functions in lambda code for Modules Debugger.
@
text
@d4 3
d104 34
a137 1
      
@


1.11
log
@Moved convert_string to MLWorks.String.ml_string.
@
text
@d4 3
d8 1
a8 1
 Changed printSCon of string to escape characters rather than just
d18 1
a18 1
> Changed int and real scons to carry a location around
d34 1
a34 1
> Altered to print class of ValIds.
d64 2
@


1.10
log
@ Changed printSCon of string to escape characters rather than just
printing the string.  This should really use a library function convert_string
@
text
@d4 4
a90 42
   (* This is lifted whole from _value_printer -- make a utility? *)
   fun convert_string (s, max_str_size) =
     let
       fun make_digits n =
         let
           val d1 = n mod 10
           val n1 = n div 10
           val d2 = n1 mod 10
           val n2 = n1 div 10
           val d3 = n2 mod 3
         in
           (d1,d2,d3)
         end
       fun aux ([],result,_) = implode (rev result)
         | aux (_,result,0) = implode (rev ("\\..." :: result))
         | aux (char::rest,result,n) =
           let val newbit =
             case char of 
               "\n" => ["n","\\"]
             | "\t" => ["t","\\"]
             | "\"" => ["\"","\\"]
             | "\\" => ["\\","\\"]
             | c =>
                 (if (ord c) < 32
                    then [chr (64 + ord c),"^","\\"]
                  else
                    if (ord c) >= 127
                      then
                        let val (d1,d2,d3) = make_digits (ord c)
                          fun to_digit n = chr (n + ord "0")
                        in
                          [to_digit d1,to_digit d2,to_digit d3,"\\"]
                        end
                    else
                      [c])
           in
             aux (rest, newbit @@ result, if n < 0 then n else n - 1)
           end
     in
       aux (explode s,[],max_str_size)
     end

d94 2
a95 1
     | printSCon (Ident.STRING x) = "\"" ^ convert_string (x,20) ^ "\""
@


1.9
log
@Options & Info changes
@
text
@d4 3
d87 43
d132 1
a132 1
     | printSCon (Ident.STRING x) = "\"" ^ x ^ "\""
@


1.9.1.1
log
@Fork for bug fixing
@
text
@a3 3
Revision 1.9  1993/03/03  18:29:03  matthew
Options & Info changes

@


1.8
log
@Added sharing constraint.
@
text
@d4 3
d31 1
a31 1
require "../main/info";
d37 1
a37 3
  structure Info  : INFO

  sharing Ident.Location = Info.Location
d41 1
a41 1
    structure Info = Info
d57 1
a57 1
    fun printValId (Info.OPTIONS options) id =
@


1.7
log
@> Changed int and real scons to carry a location around
@
text
@d4 3
d35 3
a37 1
) : IDENTPRINT =
@


1.6
log
@Changes to make show_id_class and show_eq_info part of Info structure
instead of references.
@
text
@d4 4
d78 2
a79 2
   fun printSCon (Ident.INT x) = x
     | printSCon (Ident.REAL x) = x
@


1.5
log
@Renamed include_class to show_id_class and added it to the signature.
@
text
@d4 3
d21 1
d25 4
a28 1
functor IdentPrint (structure Ident : IDENT) : IDENTPRINT =
d31 2
d35 2
a36 4
    val show_id_class = ref false;
	
    fun appclass c s = if !show_id_class then (name s)^" <"^c^">" 
		       else (name s)
d38 11
a48 3
    fun printValId (Ident.VAR sym) = appclass "VAR" sym
      | printValId (Ident.CON sym) = appclass "CON" sym
      | printValId (Ident.EXCON sym) = appclass "EXCON" sym
d65 2
a66 2
    fun printLongValId (Ident.LONGVALID (path,valid)) =
      printPath path ^ printValId valid
@


1.4
log
@Added require "ident" which was missing
@
text
@d4 3
d26 1
a26 1
    val include_class = ref true;
d28 1
a28 1
    fun appclass c s = if !include_class then (name s)^" <"^c^">" 
@


1.3
log
@Added copyright message
@
text
@d3 4
a6 1
$Log:	_identprint.sml,v $
d15 1
@


1.2
log
@> Altered to print class of ValIds.
@
text
@d1 1
d4 3
d10 1
@


1.1
log
@Initial revision
@
text
@d2 4
a5 1
$Log$
d14 8
a21 3
    fun printValId (Ident.VAR sym) = name sym
      | printValId (Ident.CON sym) = name sym
      | printValId (Ident.EXCON sym) = name sym
@
