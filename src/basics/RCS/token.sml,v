head	1.14;
access;
symbols
	MLW_daveb_inline_1_4_99:1.14.11
	MLWorks_21c0_1999_03_25:1.14
	MLWorks_20c1_1998_08_20:1.14
	MLWorks_20c0_1998_08_04:1.14
	MLWorks_20b2c2_1998_06_19:1.14
	MLWorks_20b2_Windows_1998_06_12:1.14
	MLWorks_20b1c1_1998_05_07:1.14
	MLWorks_20b0_1998_04_07:1.14
	MLWorks_20b0_1998_03_20:1.14
	MLWorks_20m2_1998_02_16:1.14
	MLWorks_20m1_1997_10_23:1.14
	MLWorks_11r1:1.14.8.1.1.1.1
	MLWorks_workspace_97:1.14.10
	MLWorks_dt_wizard:1.14.9
	MLWorks_11c0_1997_09_09:1.14.8.1.1.1
	MLWorks_10r3:1.14.8.1.3
	MLWorks_10r2_551:1.14.8.1.2
	MLWorks_11:1.14.8.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.14.8.1
	MLWorks_20m0_1997_06_20:1.14
	MLWorks_1_0_r2c2_1997_06_14:1.14.8.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.14.8.1
	MLWorks_1_0_r2c1_1997_05_12:1.14.8
	MLWorks_BugFix_1997_04_24:1.14
	MLWorks_1_0_r2_Win32_1997_04_11:1.14
	MLWorks_1_0_r2_Unix_1997_04_04:1.14
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.14.6.1.1
	MLWorks_gui_1996_12_18:1.14.7
	MLWorks_1_0_Win32_1996_12_17:1.14.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.14.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.14.4.1
	MLWorks_1_0_Irix_1996_11_28:1.14.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.14.5
	MLWorks_1_0_Unix_1996_11_14:1.14.4
	MLWorks_Open_Beta2_1996_10_11:1.14.3
	MLWorks_License_dev:1.14.2
	MLWorks_1_open_beta_1996_09_13:1.14.1
	MLWorks_Open_Beta_1996_08_22:1.14
	MLWorks_Beta_1996_07_02:1.14
	MLWorks_Beta_1996_06_07:1.14
	MLWorks_Beta_1996_06_06:1.14
	MLWorks_Beta_1996_06_05:1.14
	MLWorks_Beta_1996_06_03:1.14
	MLWorks_Beta_1996_05_31:1.14
	MLWorks_Beta_1996_05_30:1.14
	ML_beta_release_12/08/94:1.9
	ML_beta_release_03/08/94:1.9
	ML_revised_beta_release_25/05/94:1.9
	ML_final_beta_release_02/03/94:1.9
	mlworks-28-01-1994:1.9
	Release:1.9
	mlworks-beta-01-09-1993:1.9
	MLWorks-1-0-4-29/01/1993:1.6
	MLWorks-1-0-3-21/12/1992:1.6
	MLWorks-1-0-2-15/12/1992:1.6
	MLWorks-1-0-1-04/12/1992:1.6
	checkpoint_17_08_92:1.6
	Ten15_release_19-11-91:1.2.1.1
	Ten15_release_21-08-91:1.2
	Ten15_release_19-08-91:1.2
	ten15_release:1.2;
locks; strict;
comment	@ * @;


1.14
date	96.03.18.16.20.34;	author matthew;	state Exp;
branches
	1.14.1.1
	1.14.2.1
	1.14.3.1
	1.14.4.1
	1.14.5.1
	1.14.6.1
	1.14.7.1
	1.14.8.1
	1.14.9.1
	1.14.10.1
	1.14.11.1;
next	1.13;

1.13
date	95.07.28.14.30.08;	author matthew;	state Exp;
branches;
next	1.12;

1.12
date	95.07.24.15.21.45;	author jont;	state Exp;
branches;
next	1.11;

1.11
date	95.07.19.09.55.32;	author jont;	state Exp;
branches;
next	1.10;

1.10
date	95.03.17.14.31.50;	author matthew;	state Exp;
branches;
next	1.9;

1.9
date	93.05.20.11.31.41;	author matthew;	state Exp;
branches
	1.9.1.1;
next	1.8;

1.8
date	93.03.30.10.03.48;	author daveb;	state Exp;
branches;
next	1.7;

1.7
date	93.02.12.15.32.22;	author matthew;	state Exp;
branches;
next	1.6;

1.6
date	92.05.14.12.00.08;	author richard;	state Exp;
branches;
next	1.5;

1.5
date	92.03.25.16.29.08;	author matthew;	state Exp;
branches;
next	1.4;

1.4
date	91.11.21.16.00.24;	author jont;	state Exp;
branches;
next	1.3;

1.3
date	91.11.19.12.16.28;	author jont;	state Exp;
branches;
next	1.2;

1.2
date	91.06.20.17.48.39;	author nickh;	state Exp;
branches
	1.2.1.1;
next	1.1;

1.1
date	91.06.07.10.58.02;	author colin;	state Exp;
branches;
next	;

1.2.1.1
date	91.11.19.11.05.23;	author jont;	state Exp;
branches;
next	;

1.9.1.1
date	93.05.20.11.31.41;	author jont;	state Exp;
branches;
next	;

1.14.1.1
date	96.09.13.11.09.04;	author hope;	state Exp;
branches;
next	;

1.14.2.1
date	96.10.07.16.00.01;	author hope;	state Exp;
branches;
next	;

1.14.3.1
date	96.10.17.11.18.21;	author hope;	state Exp;
branches;
next	;

1.14.4.1
date	96.11.14.12.41.53;	author hope;	state Exp;
branches
	1.14.4.1.1.1;
next	;

1.14.4.1.1.1
date	96.11.28.14.53.48;	author hope;	state Exp;
branches;
next	;

1.14.5.1
date	96.11.22.18.02.21;	author hope;	state Exp;
branches;
next	;

1.14.6.1
date	96.12.17.17.41.16;	author hope;	state Exp;
branches
	1.14.6.1.1.1;
next	;

1.14.6.1.1.1
date	97.02.24.11.29.31;	author hope;	state Exp;
branches;
next	;

1.14.7.1
date	96.12.18.09.35.14;	author hope;	state Exp;
branches;
next	;

1.14.8.1
date	97.05.12.10.27.14;	author hope;	state Exp;
branches
	1.14.8.1.1.1
	1.14.8.1.2.1
	1.14.8.1.3.1;
next	;

1.14.8.1.1.1
date	97.07.28.18.13.15;	author daveb;	state Exp;
branches
	1.14.8.1.1.1.1.1;
next	;

1.14.8.1.1.1.1.1
date	97.10.07.11.38.25;	author jkbrook;	state Exp;
branches;
next	;

1.14.8.1.2.1
date	97.09.08.17.06.37;	author daveb;	state Exp;
branches;
next	;

1.14.8.1.3.1
date	97.09.09.14.02.01;	author daveb;	state Exp;
branches;
next	;

1.14.9.1
date	97.09.10.19.16.23;	author brucem;	state Exp;
branches;
next	;

1.14.10.1
date	97.09.11.20.46.27;	author daveb;	state Exp;
branches;
next	;

1.14.11.1
date	99.04.01.17.51.42;	author daveb;	state Exp;
branches;
next	;


desc
@Datatype for Tokens (returned from the lexer)
@


1.14
log
@New language definition
@
text
@(* token.sml the signature *)
(*
$Log: token.sml,v $
 * Revision 1.13  1995/07/28  14:30:08  matthew
 * Removing MAGICCLOSE
 *
Revision 1.12  1995/07/24  15:21:45  jont
Add WORD token

Revision 1.11  1995/07/19  09:55:32  jont
Add char token

Revision 1.10  1995/03/17  14:31:50  matthew
Use ints as basic character representation

Revision 1.9  1993/05/20  11:31:41  matthew
Added code for abstractions.

Revision 1.8  1993/03/30  10:03:48  daveb
Added LexerState type.

Revision 1.7  1993/02/12  15:32:22  matthew
Added magic brackets tokens

Revision 1.6  1992/05/14  12:00:08  richard
Added IGNORE token in order to remove recursion from lexer.

Revision 1.5  1992/03/25  16:29:08  matthew
Added a token print function, makestring

Revision 1.4  1991/11/21  16:00:24  jont
Added copyright message

Revision 1.3  91/11/19  12:16:28  jont
Merging in comments from Ten15 branch to main trunk

Revision 1.2.1.1  91/11/19  11:05:23  jont
Added comments for DRA on functions

Revision 1.2  91/06/20  17:48:39  nickh
Added REQUIRE to the reserved words, for separate compilation.

Revision 1.1  91/06/07  10:58:02  colin
Initial revision

Copyright (c) 1991 Harlequin Ltd.
*)

(* 

This module defines a type Token which is the unit of information
handed from the lexer (lexer/lexer.sml) to the parser
(parser/parser.sml). Tokens are divided by the Definition into
reserved words, special constants, and identifiers. Here special
constants are further subdivided into integers (which can also appear
as labels in records), reals and strings, and identifiers are
separated into type variables (prefixed with a ', and accompanied by
equality and imperative attributes) and others (which may have
structure qualifiers).

The reserved words are treated as an enumerated type, since this
(which amounts to an inteeger) is more efficient than handling
strings. 

When called from the shell, the end of line is treated as an end of
file.  The lexer may reach the end of a line in the middle of a comment
or string, with this being legal input.  The status of the lexer in
such a case is indicated by the LexerState type.

The function makestring makes a string from a token

*)

require "symbol";

signature TOKEN =
    sig
        structure Symbol : SYMBOL

        datatype Reserved =

           ABSTYPE | AND | ANDALSO | AS | CASE | DO | DATATYPE | ELSE |
           END | EXCEPTION | FN | FUN | HANDLE | IF | IN | INFIX |
           INFIXR | LET | LOCAL | NONFIX | OF | OP | OPEN | ORELSE |
           RAISE | REC | REQUIRE | THEN | TYPE | VAL | WHERE | WITH | WITHTYPE | WHILE |

           EQTYPE | FUNCTOR | INCLUDE | SHARING |
           SIG | SIGNATURE | STRUCT | STRUCTURE |

           LPAR | RPAR | BRA | KET | LBRACE | RBRACE | COMMA | COLON | ABSCOLON |
           SEMICOLON | ELLIPSIS | UNDERBAR | VBAR | EQUAL | DARROW | ARROW |
           HASH |

           ABSTRACTION | 

           MAGICOPEN

	datatype LexerState =
	    PLAIN_STATE |
	    IN_COMMENT of int |		(* depth of nesting *)
	    IN_STRING of int list	(* in \f .... f\ formatting sequence *)

        datatype Token = 
            RESERVED of Reserved |
            INTEGER of string |
            REAL of string | 
            STRING of string|
            CHAR of string|
            WORD of string|
            LONGID of Symbol.Symbol list * Symbol.Symbol |
            TYVAR of Symbol.Symbol * bool * bool |
            IGNORE |
	    EOF of LexerState

        val makestring: Token -> string

    end
@


1.14.11.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a3 3
 * Revision 1.14  1996/03/18  16:20:34  matthew
 * New language definition
 *
@


1.14.10.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a3 3
 * Revision 1.14  1996/03/18  16:20:34  matthew
 * New language definition
 *
@


1.14.9.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a3 3
 * Revision 1.14  1996/03/18  16:20:34  matthew
 * New language definition
 *
@


1.14.8.1
log
@branched from 1.14
@
text
@a3 3
 * Revision 1.14  1996/03/18  16:20:34  matthew
 * New language definition
 *
@


1.14.8.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a3 3
 * Revision 1.14.8.1  1997/05/12  10:27:14  hope
 * branched from 1.14
 *
@


1.14.8.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a3 3
 * Revision 1.14.8.1  1997/05/12  10:27:14  hope
 * branched from 1.14
 *
@


1.14.8.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a3 3
 * Revision 1.14.8.1  1997/05/12  10:27:14  hope
 * branched from 1.14
 *
@


1.14.8.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a3 3
 * Revision 1.14.8.1.1.1  1997/07/28  18:13:15  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.14.7.1
log
@branched from 1.14
@
text
@a3 3
 * Revision 1.14  1996/03/18  16:20:34  matthew
 * New language definition
 *
@


1.14.6.1
log
@branched from 1.14
@
text
@a3 3
 * Revision 1.14  1996/03/18  16:20:34  matthew
 * New language definition
 *
@


1.14.6.1.1.1
log
@branched from 1.14.6.1
@
text
@a3 3
 * Revision 1.14.6.1  1996/12/17  17:41:16  hope
 * branched from 1.14
 *
@


1.14.5.1
log
@branched from 1.14
@
text
@a3 3
 * Revision 1.14  1996/03/18  16:20:34  matthew
 * New language definition
 *
@


1.14.4.1
log
@branched from 1.14
@
text
@a3 3
 * Revision 1.14  1996/03/18  16:20:34  matthew
 * New language definition
 *
@


1.14.4.1.1.1
log
@branched from 1.14.4.1
@
text
@a3 3
 * Revision 1.14.4.1  1996/11/14  12:41:53  hope
 * branched from 1.14
 *
@


1.14.3.1
log
@branched from 1.14
@
text
@a3 3
 * Revision 1.14  1996/03/18  16:20:34  matthew
 * New language definition
 *
@


1.14.2.1
log
@branched from 1.14
@
text
@a3 3
 * Revision 1.14  1996/03/18  16:20:34  matthew
 * New language definition
 *
@


1.14.1.1
log
@branched from 1.14
@
text
@a3 3
 * Revision 1.14  1996/03/18  16:20:34  matthew
 * New language definition
 *
@


1.13
log
@Removing MAGICCLOSE
@
text
@d4 3
d85 1
a85 1
           RAISE | REC | REQUIRE | THEN | TYPE | VAL | WITH | WITHTYPE | WHILE |
d90 1
a90 1
           LPAR | RPAR | BRA | KET | LBRACE | RBRACE | COMMA | COLON |
@


1.12
log
@Add WORD token
@
text
@d4 3
d93 1
a93 1
           MAGICOPEN | MAGICCLOSE
@


1.11
log
@Add char token
@
text
@d4 3
d103 1
@


1.10
log
@Use ints as basic character representation
@
text
@d4 3
d99 1
@


1.9
log
@Added code for abstractions.
@
text
@d4 3
d89 1
a89 1
	    IN_STRING of string list	(* in \f .... f\ formatting sequence *)
@


1.9.1.1
log
@Fork for bug fixing
@
text
@a3 3
Revision 1.9  1993/05/20  11:31:41  matthew
Added code for abstractions.

@


1.8
log
@Added LexerState type.
@
text
@d4 3
d78 2
@


1.7
log
@Added magic brackets tokens
@
text
@d4 3
d47 5
d76 6
a81 3
           MAGICOPEN | MAGICCLOSE |
	   
           EOF
d90 2
a91 1
            IGNORE of int
@


1.6
log
@Added IGNORE token in order to remove recursion from lexer.
@
text
@d4 3
d66 3
a68 1
           HASH | 
@


1.5
log
@Added a token print function, makestring
@
text
@d4 3
d73 2
a74 1
            TYVAR of Symbol.Symbol * bool * bool
@


1.4
log
@Added copyright message
@
text
@d3 4
a6 1
$Log:	token.sml,v $
d38 1
a38 1
No functions are provided by this module.
d71 3
@


1.3
log
@Merging in comments from Ten15 branch to main trunk
@
text
@d1 1
d4 3
d16 1
@


1.2
log
@Added REQUIRE to the reserved words, for separate compilation.
@
text
@d3 6
d13 21
@


1.2.1.1
log
@Added comments for DRA on functions
@
text
@a2 3
Revision 1.2  91/06/20  17:48:39  nickh
Added REQUIRE to the reserved words, for separate compilation.

a6 21

(* 

This module defines a type Token which is the unit of information
handed from the lexer (lexer/lexer.sml) to the parser
(parser/parser.sml). Tokens are divided by the Definition into
reserved words, special constants, and identifiers. Here special
constants are further subdivided into integers (which can also appear
as labels in records), reals and strings, and identifiers are
separated into type variables (prefixed with a ', and accompanied by
equality and imperative attributes) and others (which may have
structure qualifiers).

The reserved words are treated as an enumerated type, since this
(which amounts to an inteeger) is more efficient than handling
strings. 

No functions are provided by this module.

*)

@


1.1
log
@Initial revision
@
text
@d2 4
a5 1
$Log$
d18 1
a18 1
           RAISE | REC | THEN | TYPE | VAL | WITH | WITHTYPE | WHILE |
@
