head	1.6;
access;
symbols
	MLWorks_20b2c2_1998_06_19:1.6
	MLWorks_20b2_Windows_1998_06_12:1.6
	MLWorks_20b1c1_1998_05_07:1.6
	MLWorks_20b0_1998_04_07:1.6
	MLWorks_20b0_1998_03_20:1.6
	MLWorks_20m2_1998_02_16:1.6
	MLWorks_20m1_1997_10_23:1.6
	MLWorks_11r1:1.6.8.1.1.1.1
	MLWorks_workspace_97:1.6.10
	MLWorks_dt_wizard:1.6.9
	MLWorks_11c0_1997_09_09:1.6.8.1.1.1
	MLWorks_10r3:1.6.8.1.3
	MLWorks_10r2_551:1.6.8.1.2
	MLWorks_11:1.6.8.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.6.8.1
	MLWorks_20m0_1997_06_20:1.6
	MLWorks_1_0_r2c2_1997_06_14:1.6.8.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.6.8.1
	MLWorks_1_0_r2c1_1997_05_12:1.6.8
	MLWorks_BugFix_1997_04_24:1.6
	MLWorks_1_0_r2_Win32_1997_04_11:1.6
	MLWorks_1_0_r2_Unix_1997_04_04:1.6
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.6.6.1.1
	MLWorks_gui_1996_12_18:1.6.7
	MLWorks_1_0_Win32_1996_12_17:1.6.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.6.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.6.4.1
	MLWorks_1_0_Irix_1996_11_28:1.6.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.6.5
	MLWorks_1_0_Unix_1996_11_14:1.6.4
	MLWorks_Open_Beta2_1996_10_11:1.6.3
	MLWorks_License_dev:1.6.2
	MLWorks_1_open_beta_1996_09_13:1.6.1
	MLWorks_Open_Beta_1996_08_22:1.6
	MLWorks_Beta_1996_07_02:1.6
	MLWorks_Beta_1996_06_07:1.6
	MLWorks_Beta_1996_06_06:1.6
	MLWorks_Beta_1996_06_05:1.6
	MLWorks_Beta_1996_06_03:1.6
	MLWorks_Beta_1996_05_31:1.6
	MLWorks_Beta_1996_05_30:1.6
	ML_beta_release_12/08/94:1.5
	ML_beta_release_03/08/94:1.5
	ML_revised_beta_release_25/05/94:1.5
	ML_final_beta_release_02/03/94:1.5
	mlworks-28-01-1994:1.5
	Release:1.5
	mlworks-beta-01-09-1993:1.5
	MLWorks-1-0-4-29/01/1993:1.4
	MLWorks-1-0-3-21/12/1992:1.4
	MLWorks-1-0-2-15/12/1992:1.3
	MLWorks-1-0-1-04/12/1992:1.3
	checkpoint_17_08_92:1.1;
locks; strict;
comment	@ * @;


1.6
date	96.05.21.11.48.15;	author matthew;	state Exp;
branches
	1.6.1.1
	1.6.2.1
	1.6.3.1
	1.6.4.1
	1.6.5.1
	1.6.6.1
	1.6.7.1
	1.6.8.1
	1.6.9.1
	1.6.10.1;
next	1.5;

1.5
date	93.02.25.18.13.17;	author matthew;	state Exp;
branches
	1.5.1.1;
next	1.4;

1.4
date	92.12.21.12.41.04;	author daveb;	state Exp;
branches;
next	1.3;

1.3
date	92.08.25.13.51.36;	author richard;	state Exp;
branches;
next	1.2;

1.2
date	92.08.20.12.24.43;	author richard;	state Exp;
branches;
next	1.1;

1.1
date	92.08.07.10.17.13;	author davidt;	state Exp;
branches;
next	;

1.5.1.1
date	93.02.25.18.13.17;	author jont;	state Exp;
branches;
next	;

1.6.1.1
date	96.09.13.11.21.02;	author hope;	state Exp;
branches;
next	;

1.6.2.1
date	96.10.07.16.11.00;	author hope;	state Exp;
branches;
next	;

1.6.3.1
date	96.10.17.11.29.35;	author hope;	state Exp;
branches;
next	;

1.6.4.1
date	96.11.14.12.55.25;	author hope;	state Exp;
branches
	1.6.4.1.1.1;
next	;

1.6.4.1.1.1
date	96.11.28.15.06.06;	author hope;	state Exp;
branches;
next	;

1.6.5.1
date	96.11.22.18.13.49;	author hope;	state Exp;
branches;
next	;

1.6.6.1
date	96.12.17.17.52.18;	author hope;	state Exp;
branches
	1.6.6.1.1.1;
next	;

1.6.6.1.1.1
date	97.02.24.11.43.06;	author hope;	state Exp;
branches;
next	;

1.6.7.1
date	96.12.18.09.46.43;	author hope;	state Exp;
branches;
next	;

1.6.8.1
date	97.05.12.10.39.11;	author hope;	state Exp;
branches
	1.6.8.1.1.1
	1.6.8.1.2.1
	1.6.8.1.3.1;
next	;

1.6.8.1.1.1
date	97.07.28.18.24.08;	author daveb;	state Exp;
branches
	1.6.8.1.1.1.1.1;
next	;

1.6.8.1.1.1.1.1
date	97.10.07.11.49.56;	author jkbrook;	state Exp;
branches;
next	;

1.6.8.1.2.1
date	97.09.08.17.17.31;	author daveb;	state Exp;
branches;
next	;

1.6.8.1.3.1
date	97.09.09.14.13.40;	author daveb;	state Exp;
branches;
next	;

1.6.9.1
date	97.09.10.19.29.48;	author brucem;	state Exp;
branches;
next	;

1.6.10.1
date	97.09.11.20.59.36;	author daveb;	state Exp;
branches;
next	;


desc
@Signature for Array pervasive structure.
@


1.6
log
@Removing Copy exception, (replacing with Subscript)
@
text
@(*
 * The arrays module.
 *
 * Copyright (c) 1992 Harlequin Ltd.
 *
 * $Log: array.sml,v $
 * Revision 1.5  1993/02/25  18:13:17  matthew
 * Removed Array.T from signature
 *
 *  Revision 1.4  1992/12/21  12:41:04  daveb
 *  Added the agreed 'Array' structure.  Renamed the existing Array structure
 *  to ExtendedArray.
 *
 *  Revision 1.3  1992/08/25  13:51:36  richard
 *  Strengthened the types of all values for which it was possible.
 *  Added tabulate.
 *
 *  Revision 1.2  1992/08/20  12:24:43  richard
 *  Enriched the ARRAY signature.
 *
 *  Revision 1.1  1992/08/07  10:17:13  davidt
 *  Initial revision
 *
 *
 *)

signature ARRAY =
  sig
    eqtype 'a array
(*
    eqtype 'a T
    sharing type T = array
*)
    exception Size
    exception Subscript
    val array: int * '_a -> '_a array
    val arrayoflist: '_a list -> '_a array
    val tabulate: int * (int -> '_a) -> '_a array
    val sub: 'a array * int -> 'a
    val update: 'a array * int * 'a -> unit
    val length: 'a array -> int
  end

signature EXTENDED_ARRAY =
  sig
    (* include "ARRAY" -- omitted to keep SML/NJ happy. *)
    eqtype 'a array
(*
    eqtype 'a T
    sharing type T = array
*)
    exception Size
    exception Subscript
    exception Find

    val array		: int * '_a -> '_a array
    val length		: 'a array -> int
    val update		: 'a array * int * 'a -> unit
    val sub		: 'a array * int -> 'a
    val arrayoflist	: '_a list -> '_a array
    val tabulate	: int * (int -> '_a) -> '_a array

    val from_list	: '_a list -> '_a array
    val to_list		: 'a array -> 'a list
    val fill		: 'a array * 'a -> unit
    val map		: ('a -> '_b) -> 'a array -> '_b array
    val map_index	: (int * 'a -> '_b) -> 'a array -> '_b array
    val iterate		: ('a -> unit) -> 'a array -> unit
    val iterate_index	: (int * 'a -> unit) -> 'a array -> unit
    val rev		: '_a array -> '_a array
    val duplicate	: '_a array -> '_a array
    val subarray	: '_a array * int * int -> '_a array
    val append		: '_a array * '_a array -> '_a array
    val reducel		: ('a * 'b -> 'a) -> ('a * 'b array) -> 'a
    val reducer		: ('a * 'b -> 'b) -> ('a array * 'b) -> 'b
    val reducel_index	: (int * 'a * 'b -> 'a) -> ('a * 'b array) -> 'a
    val reducer_index	: (int * 'a * 'b -> 'b) -> ('a array * 'b) -> 'b
    val copy		: 'a array * int * int * 'a array * int -> unit
    val fill_range	: 'a array * int * int * 'a -> unit
    val find		: ('a -> bool) -> 'a array -> int
    val find_default	: (('a -> bool) * int) -> 'a array -> int
    val maxLen          : int
  end;
@


1.6.10.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a6 3
 * Revision 1.6  1996/05/21  11:48:15  matthew
 * Removing Copy exception, (replacing with Subscript)
 *
@


1.6.9.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a6 3
 * Revision 1.6  1996/05/21  11:48:15  matthew
 * Removing Copy exception, (replacing with Subscript)
 *
@


1.6.8.1
log
@branched from 1.6
@
text
@a6 3
 * Revision 1.6  1996/05/21  11:48:15  matthew
 * Removing Copy exception, (replacing with Subscript)
 *
@


1.6.8.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a6 3
 * Revision 1.6.8.1  1997/05/12  10:39:11  hope
 * branched from 1.6
 *
@


1.6.8.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a6 3
 * Revision 1.6.8.1  1997/05/12  10:39:11  hope
 * branched from 1.6
 *
@


1.6.8.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a6 3
 * Revision 1.6.8.1  1997/05/12  10:39:11  hope
 * branched from 1.6
 *
@


1.6.8.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a6 3
 * Revision 1.6.8.1.1.1  1997/07/28  18:24:08  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.6.7.1
log
@branched from 1.6
@
text
@a6 3
 * Revision 1.6  1996/05/21  11:48:15  matthew
 * Removing Copy exception, (replacing with Subscript)
 *
@


1.6.6.1
log
@branched from 1.6
@
text
@a6 3
 * Revision 1.6  1996/05/21  11:48:15  matthew
 * Removing Copy exception, (replacing with Subscript)
 *
@


1.6.6.1.1.1
log
@branched from 1.6.6.1
@
text
@a6 3
 * Revision 1.6.6.1  1996/12/17  17:52:18  hope
 * branched from 1.6
 *
@


1.6.5.1
log
@branched from 1.6
@
text
@a6 3
 * Revision 1.6  1996/05/21  11:48:15  matthew
 * Removing Copy exception, (replacing with Subscript)
 *
@


1.6.4.1
log
@branched from 1.6
@
text
@a6 3
 * Revision 1.6  1996/05/21  11:48:15  matthew
 * Removing Copy exception, (replacing with Subscript)
 *
@


1.6.4.1.1.1
log
@branched from 1.6.4.1
@
text
@a6 3
 * Revision 1.6.4.1  1996/11/14  12:55:25  hope
 * branched from 1.6
 *
@


1.6.3.1
log
@branched from 1.6
@
text
@a6 3
 * Revision 1.6  1996/05/21  11:48:15  matthew
 * Removing Copy exception, (replacing with Subscript)
 *
@


1.6.2.1
log
@branched from 1.6
@
text
@a6 3
 * Revision 1.6  1996/05/21  11:48:15  matthew
 * Removing Copy exception, (replacing with Subscript)
 *
@


1.6.1.1
log
@branched from 1.6
@
text
@a6 3
 * Revision 1.6  1996/05/21  11:48:15  matthew
 * Removing Copy exception, (replacing with Subscript)
 *
@


1.5
log
@Removed Array.T from signature
@
text
@d7 3
a53 3
    exception Subarray of int * int
    exception Copy of int * int * int
    exception Fill of int * int
d82 1
@


1.5.1.1
log
@Fork for bug fixing
@
text
@a6 3
 *  Revision 1.5  1993/02/25  18:13:17  matthew
 *  Removed Array.T from signature
 *
@


1.4
log
@Added the agreed 'Array' structure.  Renamed the existing Array structure
to ExtendedArray.
@
text
@d7 4
d27 1
d30 1
a30 1

d45 1
d48 1
a48 1

@


1.3
log
@Strengthened the types of all values for which it was possible.
Added tabulate.
@
text
@d7 4
d28 17
d55 1
a56 1
    val tabulate	: int * (int -> '_a) -> '_a array
@


1.2
log
@Enriched the ARRAY signature.
@
text
@d7 3
d27 1
d30 3
a32 3
    val length		: '_a array -> int
    val update		: '_a array * int * '_a -> unit
    val sub		: '_a array * int -> '_a
d35 1
d37 6
a42 6
    val to_list		: '_a array -> '_a list
    val fill		: '_a array * '_a -> unit
    val map		: ('_a -> '_b) -> '_a array -> '_b array
    val map_index	: (int * '_a -> '_b) -> '_a array -> '_b array
    val iterate		: ('_a -> unit) -> '_a array -> unit
    val iterate_index	: (int * '_a -> unit) -> '_a array -> unit
d47 8
a54 6
    val reducel		: ('a * '_b -> 'a) -> ('a * '_b array) -> 'a
    val reducer		: ('_a * 'b -> 'b) -> ('_a array * 'b) -> 'b
    val reducel_index	: (int * 'a * '_b -> 'a) -> ('a * '_b array) -> 'a
    val reducer_index	: (int * '_a * 'b -> 'b) -> ('_a array * 'b) -> 'b
    val copy		: '_a array * int * int * '_a array * int -> unit
    val fill_range	: '_a array * int * int * '_a -> unit
@


1.1
log
@Initial revision
@
text
@d6 3
a8 1
 * $Log$
d10 1
d16 3
d21 27
a47 5
    val array : int * '_a -> '_a array
    val length : 'a array -> int
    val update : 'a array * int * 'a -> unit
    val sub : 'a array * int -> 'a
    val arrayoflist : '_a list -> '_a array 
@
