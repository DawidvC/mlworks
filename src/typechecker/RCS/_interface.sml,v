head	1.11;
access;
symbols
	ML_final_beta_release_02/03/94:1.11
	mlworks-28-01-1994:1.11
	Release:1.11
	mlworks-beta-01-09-1993:1.11
	MLWorks-1-0-4-29/01/1993:1.9
	MLWorks-1-0-3-21/12/1992:1.9
	MLWorks-1-0-2-15/12/1992:1.9
	MLWorks-1-0-1-04/12/1992:1.9
	checkpoint_17_08_92:1.7
	Ten15_release_19-11-91:1.4
	Ten15_release_21-08-91:1.4
	Ten15_release_19-08-91:1.4
	ten15_release:1.4;
locks; strict;


1.11
date	93.07.07.16.37.18;	author daveb;	state Exp;
branches
	1.11.1.1;
next	1.10;

1.10
date	93.02.02.10.51.18;	author matthew;	state Exp;
branches;
next	1.9;

1.9
date	92.10.27.19.12.25;	author jont;	state Exp;
branches;
next	1.8;

1.8
date	92.10.02.16.13.01;	author clive;	state Exp;
branches;
next	1.7;

1.7
date	92.08.11.16.54.34;	author jont;	state Exp;
branches;
next	1.6;

1.6
date	92.08.06.19.34.01;	author jont;	state Exp;
branches;
next	1.5;

1.5
date	91.11.21.16.45.58;	author jont;	state Exp;
branches;
next	1.4;

1.4
date	91.07.12.17.12.37;	author colin;	state Exp;
branches;
next	1.3;

1.3
date	91.07.10.13.26.44;	author colin;	state Exp;
branches;
next	1.2;

1.2
date	91.06.27.18.20.20;	author colin;	state Exp;
branches;
next	1.1;

1.1
date	91.06.27.16.57.19;	author colin;	state Exp;
branches;
next	;

1.11.1.1
date	93.07.07.16.37.18;	author jont;	state Exp;
branches;
next	;


desc
@Interface - "view" of a structure in dynamic semantics
@


1.11
log
@THIS FILE IS NO LONGER USED
Removed exception environments anyway.
@
text
@(* _interface.sml the functor *)
THIS FILE IS NO LONGER USED
(*
$Log: _interface.sml,v $
Revision 1.10  1993/02/02  10:51:18  matthew
Removed inter function
(moved to lambda/_environ)
Sharing changes

Revision 1.9  1992/10/27  19:12:25  jont
Modified to use less than functions for maps

Revision 1.8  1992/10/02  16:13:01  clive
Change to NewMap.empty which now takes < and = functions instead of the single-function

Revision 1.7  1992/08/11  16:54:34  jont
Removed some redundant structure arguments and sharing
Converted where relevant to use NewMap.{forall,exists,iterate}

Revision 1.6  1992/08/06  19:34:01  jont
Anel's changes to use NewMap instead of Map

Revision 1.5  1991/11/21  16:45:58  jont
Added copyright message

Revision 1.4  91/07/12  17:12:37  colin
 Extended interface with Dom ExConEnv as in The Definition

Revision 1.3  91/07/10  13:26:44  colin
changed inter to make all valids in the interface VARs (rather than CONs
and EXCONs)

Revision 1.2  91/06/27  18:20:20  colin
Added log

Copyright (c) 1991 Harlequin Ltd.
*)

require "../basics/ident";
require "../utils/newmap";
require "interface";


functor Interface(structure Ident : IDENT
                  structure NewMap : NEWMAP
                    ) : INTERFACE =
  struct
    structure NewMap = NewMap
    structure Ident = Ident

    datatype EnvVal = ABSENT | PRESENT of MLWorks.Internal.Value.ml_value

    datatype
      IntEnv = INTENV of (Ident.StrId,Int) NewMap.T
    and
      (*              IE        Dom VE      *)
      Int = INT of (IntEnv * Ident.ValId list * EnvVal ref)
      
    val emptyIntEnv = INTENV (NewMap.empty' Ident.strid_lt)
    val emptyInt = INT (emptyIntEnv,nil,ref ABSENT)

  end

@


1.11.1.1
log
@Fork for bug fixing
@
text
@a4 4
Revision 1.11  1993/07/07  16:37:18  daveb
THIS FILE IS NO LONGER USED
Removed exception environments anyway.

@


1.10
log
@Removed inter function
(moved to lambda/_environ)
Sharing changes
@
text
@d2 1
d5 5
d56 2
a57 2
      (*              IE        Dom VE             Dom EE      *)
      Int = INT of (IntEnv * Ident.ValId list * Ident.ValId list * EnvVal ref)
d60 1
a60 1
    val emptyInt = INT (emptyIntEnv,nil,nil,ref ABSENT)
@


1.9
log
@Modified to use less than functions for maps
@
text
@d4 3
d33 2
a34 1
require "datatypes";
d38 3
a40 3
functor Interface(
  structure Datatypes : DATATYPES
		  ) : INTERFACE =
d42 4
a45 3
    structure NewMap = Datatypes.NewMap
    structure Ident = Datatypes.Ident
    structure Datatypes = Datatypes
d51 1
a51 1
      Int = INT of (IntEnv * Ident.ValId list * Ident.ValId list)
d54 1
a54 1
    val emptyInt = INT (emptyIntEnv,nil,nil)
a55 30
    (* converts from a static environment to an interface. Note we ignore TE 
       because type constructors are not visible in the dynamic semantics *)

    fun inter (Datatypes.ENV (Datatypes.SE se_map,
			      _,
			      Datatypes.VE (_,ve_map),
			      Datatypes.VE (_,ee_map))) =
      let
	fun make_intenv (intenv, strid, _) =
	  let
	    val Datatypes.STR (_,env) = NewMap.apply'(se_map, strid)
	  in
	    NewMap.define(intenv,strid,inter env)
	  end

	val vars = 
	  (* we change cons to valids as this is how they're put in the *)
	  (* code generator's variable environment *)
	  
	  map (fn Ident.CON sym => Ident.VAR sym
	        | Ident.EXCON sym => Ident.VAR sym
	        | var as (Ident.VAR sym) => var) (NewMap.domain_ordered ve_map)

	val excons = NewMap.domain_ordered ee_map
      in
	INT (INTENV (NewMap.fold make_intenv
		     (NewMap.empty (Ident.strid_lt,Ident.strid_eq), se_map)),
             vars,excons)
      end
      
@


1.8
log
@Change to NewMap.empty which now takes < and = functions instead of the single-function
@
text
@d4 3
d48 1
a48 1
    val emptyIntEnv = INTENV (NewMap.empty' Ident.strid_order)
d77 1
a77 1
		     (NewMap.empty (Datatypes.strid_order,Datatypes.strid_equal), se_map)),
@


1.7
log
@Removed some redundant structure arguments and sharing
Converted where relevant to use NewMap.{forall,exists,iterate}
@
text
@d4 4
d74 1
a74 1
		     (NewMap.empty Datatypes.strid_order, se_map)),
@


1.6
log
@Anel's changes to use NewMap instead of Map
@
text
@d4 3
a22 2
require "../utils/newmap";
require "../basics/ident";
d27 3
a29 7
functor Interface (structure Ident : IDENT
		   structure NewMap : NEWMAP
		   structure Datatypes : DATATYPES

		   sharing Datatypes.NewMap = NewMap
		   sharing Datatypes.Ident = Ident
		     ) : INTERFACE =
d31 2
a32 2
    structure NewMap = NewMap
    structure Ident = Ident
d52 6
a57 8
	fun make_intenv (nil,intenv) = intenv
	  | make_intenv (strid::strids,intenv) =
	    let
	      val Datatypes.STR (_,env) = NewMap.apply se_map strid
	    in
	      make_intenv (strids,
			   NewMap.define (intenv,strid,inter env))
	    end
a58 2
	val strids = NewMap.domain se_map

d69 2
a70 1
	INT (INTENV (make_intenv (strids,NewMap.empty Datatypes.strid_order)),
@


1.5
log
@Added copyright message
@
text
@d3 4
a6 1
$Log:	_interface.sml,v $
d20 1
a20 1
require "../utils/map";
d27 1
a27 1
		   structure Map : MAP
d30 1
a30 1
		   sharing Datatypes.Mapping = Map
d34 1
a34 1
    structure Map = Map
d39 1
a39 1
      IntEnv = INTENV of (Ident.StrId,Int) Map.Map
d44 1
a44 1
    val emptyIntEnv = INTENV (Map.empty_map)
d53 1
a53 1
			      Datatypes.VE (_,ece_map))) =
d58 1
a58 1
	      val Datatypes.STR (_,env) = Map.lookup (strid,se_map)
d61 1
a61 3
			   Map.add ((strid,inter env),
				    intenv,
				    Ident.strid_order))
d64 1
a64 1
	val strids = Map.domain se_map
d72 1
a72 1
	        | var as (Ident.VAR sym) => var) (Map.domain ve_map)
d74 1
a74 1
	val excons = Map.domain ece_map
d76 2
a77 1
	INT (INTENV (make_intenv (strids,Map.empty_map)),vars,excons)
d81 1
@


1.4
log
@ Extended interface with Dom ExConEnv as in The Definition
@
text
@d1 1
d4 3
d14 1
@


1.3
log
@changed inter to make all valids in the interface VARs (rather than CONs
and EXCONs)
@
text
@d3 4
d33 2
a34 1
      Int = INT of (IntEnv * Ident.ValId list)
d37 1
a37 1
    val emptyInt = INT (emptyIntEnv,nil)
d40 1
a40 3
       because type constructors are not visible in the dynamic semantics and
       we ignore EE (second ValEnv) because exceptions are also put in VE
       (first ValEnv) *)
d45 1
a45 1
			      _)) =
d58 3
a60 1
	val valids = 
d66 1
a66 1
	        | x => x) (Map.domain ve_map)
d68 1
a68 1
	val strids = Map.domain se_map
d70 1
a70 1
	INT (INTENV (make_intenv (strids,Map.empty_map)),valids)
@


1.2
log
@Added log
@
text
@d2 4
a5 1
$Log$
d55 8
a62 1
	val valids = Map.domain ve_map
@


1.1
log
@Initial revision
@
text
@d1 4
@
