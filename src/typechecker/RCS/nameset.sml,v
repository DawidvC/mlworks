head	1.21;
access;
symbols
	MLW_daveb_inline_1_4_99:1.21.9
	MLWorks_21c0_1999_03_25:1.21
	MLWorks_20c1_1998_08_20:1.21
	MLWorks_20c0_1998_08_04:1.21
	MLWorks_20b2c2_1998_06_19:1.21
	MLWorks_20b2_Windows_1998_06_12:1.21
	MLWorks_20b1c1_1998_05_07:1.21
	MLWorks_20b0_1998_04_07:1.21
	MLWorks_20b0_1998_03_20:1.21
	MLWorks_20m2_1998_02_16:1.21
	MLWorks_20m1_1997_10_23:1.21
	MLWorks_11r1:1.21.6.1.1.1.1
	MLWorks_workspace_97:1.21.8
	MLWorks_dt_wizard:1.21.7
	MLWorks_11c0_1997_09_09:1.21.6.1.1.1
	MLWorks_10r3:1.21.6.1.3
	MLWorks_10r2_551:1.21.6.1.2
	MLWorks_11:1.21.6.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.21.6.1
	MLWorks_20m0_1997_06_20:1.21
	MLWorks_1_0_r2c2_1997_06_14:1.21.6.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.21.6.1
	MLWorks_1_0_r2c1_1997_05_12:1.21.6
	MLWorks_BugFix_1997_04_24:1.21
	MLWorks_1_0_r2_Win32_1997_04_11:1.21
	MLWorks_1_0_r2_Unix_1997_04_04:1.21
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.21.4.1.1
	MLWorks_gui_1996_12_18:1.21.5
	MLWorks_1_0_Win32_1996_12_17:1.21.4
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.21.2.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.21.2.1
	MLWorks_1_0_Irix_1996_11_28:1.21.2.1.1
	MLWorks_1_0_Win32_1996_11_22:1.21.3
	MLWorks_1_0_Unix_1996_11_14:1.21.2
	MLWorks_Open_Beta2_1996_10_11:1.21.1
	MLWorks_License_dev:1.20.2
	MLWorks_1_open_beta_1996_09_13:1.20.1
	MLWorks_Open_Beta_1996_08_22:1.20
	MLWorks_Beta_1996_07_02:1.20
	MLWorks_Beta_1996_06_07:1.20
	MLWorks_Beta_1996_06_06:1.20
	MLWorks_Beta_1996_06_05:1.20
	MLWorks_Beta_1996_06_03:1.20
	MLWorks_Beta_1996_05_31:1.20
	MLWorks_Beta_1996_05_30:1.20
	ML_beta_release_12/08/94:1.19
	ML_beta_release_03/08/94:1.19
	ML_revised_beta_release_25/05/94:1.19
	ML_final_beta_release_02/03/94:1.19
	mlworks-28-01-1994:1.19
	Release:1.17
	mlworks-beta-01-09-1993:1.17
	MLWorks-1-0-4-29/01/1993:1.11
	MLWorks-1-0-3-21/12/1992:1.11
	MLWorks-1-0-2-15/12/1992:1.11
	MLWorks-1-0-1-04/12/1992:1.11
	checkpoint_17_08_92:1.8
	Ten15_release_19-11-91:1.1.1.1
	Ten15_release_21-08-91:1.1
	Ten15_release_19-08-91:1.1
	ten15_release:1.1;
locks; strict;
comment	@ * @;


1.21
date	96.10.04.16.04.07;	author andreww;	state Exp;
branches
	1.21.1.1
	1.21.2.1
	1.21.3.1
	1.21.4.1
	1.21.5.1
	1.21.6.1
	1.21.7.1
	1.21.8.1
	1.21.9.1;
next	1.20;

1.20
date	95.03.24.15.08.45;	author matthew;	state Exp;
branches
	1.20.1.1
	1.20.2.1;
next	1.19;

1.19
date	94.01.05.12.05.06;	author matthew;	state Exp;
branches;
next	1.18;

1.18
date	93.12.09.19.37.48;	author jont;	state Exp;
branches;
next	1.17;

1.17
date	93.05.20.12.50.10;	author jont;	state Exp;
branches
	1.17.1.1;
next	1.16;

1.16
date	93.04.08.11.46.23;	author matthew;	state Exp;
branches;
next	1.15;

1.15
date	93.03.17.18.25.36;	author matthew;	state Exp;
branches;
next	1.14;

1.14
date	93.03.04.10.32.30;	author matthew;	state Exp;
branches;
next	1.13;

1.13
date	93.02.08.17.56.20;	author matthew;	state Exp;
branches;
next	1.12;

1.12
date	93.02.01.14.21.00;	author matthew;	state Exp;
branches;
next	1.11;

1.11
date	92.11.25.19.54.20;	author daveb;	state Exp;
branches;
next	1.10;

1.10
date	92.10.30.15.55.25;	author jont;	state Exp;
branches;
next	1.9;

1.9
date	92.10.27.12.13.05;	author jont;	state Exp;
branches;
next	1.8;

1.8
date	92.08.11.17.39.26;	author jont;	state Exp;
branches;
next	1.7;

1.7
date	92.07.17.10.21.08;	author jont;	state Exp;
branches;
next	1.6;

1.6
date	92.07.04.17.16.04;	author jont;	state Exp;
branches;
next	1.5;

1.5
date	92.06.30.10.27.14;	author jont;	state Exp;
branches;
next	1.4;

1.4
date	92.02.11.10.08.06;	author clive;	state Exp;
branches;
next	1.3;

1.3
date	91.11.21.18.19.47;	author jont;	state Exp;
branches;
next	1.2;

1.2
date	91.11.19.12.19.01;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	91.06.07.11.44.28;	author colin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	91.11.19.11.12.58;	author jont;	state Exp;
branches;
next	;

1.17.1.1
date	93.05.20.12.50.10;	author jont;	state Exp;
branches;
next	;

1.20.1.1
date	96.09.13.11.42.27;	author hope;	state Exp;
branches;
next	;

1.20.2.1
date	96.10.07.16.35.33;	author hope;	state Exp;
branches;
next	;

1.21.1.1
date	96.10.17.11.54.38;	author hope;	state Exp;
branches;
next	;

1.21.2.1
date	96.11.14.13.22.56;	author hope;	state Exp;
branches
	1.21.2.1.1.1;
next	;

1.21.2.1.1.1
date	96.11.28.15.33.24;	author hope;	state Exp;
branches;
next	;

1.21.3.1
date	96.11.22.18.40.00;	author hope;	state Exp;
branches;
next	;

1.21.4.1
date	96.12.17.18.19.02;	author hope;	state Exp;
branches
	1.21.4.1.1.1;
next	;

1.21.4.1.1.1
date	97.02.24.12.13.19;	author hope;	state Exp;
branches;
next	;

1.21.5.1
date	96.12.18.10.14.22;	author hope;	state Exp;
branches;
next	;

1.21.6.1
date	97.05.12.10.52.34;	author hope;	state Exp;
branches
	1.21.6.1.1.1
	1.21.6.1.2.1
	1.21.6.1.3.1;
next	;

1.21.6.1.1.1
date	97.07.28.18.34.26;	author daveb;	state Exp;
branches
	1.21.6.1.1.1.1.1;
next	;

1.21.6.1.1.1.1.1
date	97.10.07.12.00.21;	author jkbrook;	state Exp;
branches;
next	;

1.21.6.1.2.1
date	97.09.08.17.27.25;	author daveb;	state Exp;
branches;
next	;

1.21.6.1.3.1
date	97.09.09.14.24.22;	author daveb;	state Exp;
branches;
next	;

1.21.7.1
date	97.09.10.19.43.17;	author brucem;	state Exp;
branches;
next	;

1.21.8.1
date	97.09.11.21.10.45;	author daveb;	state Exp;
branches;
next	;

1.21.9.1
date	99.04.01.18.09.04;	author daveb;	state Exp;
branches;
next	;


desc
@NameSet (bound type and structure names in modules)
@


1.21
log
@[Bug #1592]
Adding extra "level" argument to nameset_rigid_copy, nameset_copy
and new_names_from_scratch.
@
text
@(* nameset.sml the signature *)
(*
$Log: nameset.sml,v $
 * Revision 1.20  1995/03/24  15:08:45  matthew
 * Use Stamp instead of Tyname_id etc.
 *
Revision 1.19  1994/01/05  12:05:06  matthew
Added --
 remove_strname -- delete a strname from a nameset
 simple_copy -- make a duplicate nameset

Revision 1.18  1993/12/09  19:37:48  jont
Added copyright message

Revision 1.17  1993/05/20  12:50:10  jont
Added nameset_rehash to deal with the effects of sharing and realisation

Revision 1.16  1993/04/08  11:46:23  matthew
Added nameset_rigid_copy

Revision 1.15  1993/03/17  18:25:36  matthew
BasisTypes & Nameset signature changes

Revision 1.14  1993/03/04  10:32:30  matthew
Options & Info changes

Revision 1.13  1993/02/08  17:56:20  matthew
Removed open Datatypes, Changes for BASISTYPES signature

Revision 1.12  1993/02/01  14:21:00  matthew
Added sharing.

Revision 1.11  1992/11/25  19:54:20  daveb
Changes to make show_id_class and show_eq_info part of Info structure
instead of references.

Revision 1.10  1992/10/30  15:55:25  jont
Added special maps for tyfun_id, tyname_id, strname_id

Revision 1.9  1992/10/27  12:13:05  jont
Rempoved unused functions from the signature

Revision 1.8  1992/08/11  17:39:26  jont
Removed some redundant structure arguments and sharing
Converted where relevant to use NewMap.{forall,exists,iterate}

Revision 1.7  1992/07/17  10:21:08  jont
Changed to use btrees for renaming of tynames and strnames

Revision 1.6  1992/07/04  17:16:04  jont
Anel's changes for improved structure copying

Revision 1.5  1992/06/30  10:27:14  jont
Changed to imperative implementation of namesets with hashing

Revision 1.4  1992/02/11  10:08:06  clive
New pervasive library code - cut some things out of the initial type basis

Revision 1.3  1991/11/21  18:19:47  jont
Added copyright message

Revision 1.2  91/11/19  12:19:01  jont
Merging in comments from Ten15 branch to main trunk

Revision 1.1.1.1  91/11/19  11:12:58  jont
Added comments for DRA on functions

Revision 1.1  91/06/07  11:44:28  colin
Initial revision

 * Copyright (c) 1993 Harlequin Ltd.
*)

(* The type Nameset corresponds to the class NameSet of semantic
objects as defined in the Definition (p31): a pair of sets of
structure names and type names respectively, representing those names
free in a semantic object. There are many functions defined on
NameSets in the Definition, and these are all defined and implemented
in this module. *)

require "../typechecker/datatypes";
require "../main/options";

signature NAMESET = 
  sig
    structure Datatypes : DATATYPES
    structure Options : OPTIONS

    type Nameset

    val empty_nameset : unit -> Nameset
    val union : Nameset * Nameset -> Nameset
    val intersection : Nameset * Nameset -> Nameset
    val add_tyname : Datatypes.Tyname * Nameset -> Nameset
    val add_strname : Datatypes.Strname * Nameset -> Nameset
    val member_of_tynames : Datatypes.Tyname * Nameset -> bool
    val member_of_strnames : Datatypes.Strname * Nameset -> bool
    val tynames_in_nameset : Datatypes.Tyname list * Nameset -> Nameset
    val remove_tyname : Datatypes.Tyname * Nameset -> Nameset
    val remove_strname : Datatypes.Strname * Nameset -> Nameset
    val nameset_eq : Nameset * Nameset -> bool
    val emptyp : Nameset -> bool
    val no_tynames : Nameset -> bool
    val diff : Nameset * Nameset -> Nameset
    val initial_nameset : Nameset
    val initial_nameset_for_builtin_library : Nameset
    val string_nameset : Options.print_options -> Nameset -> string
    val simple_copy : Nameset -> Nameset


      (* NB, in the next three functions, the int argument is
         simply the level to be assigned to any new TYNAMES. *)

    val nameset_copy :
      Nameset * 
      Datatypes.Strname Datatypes.StampMap * 
      Datatypes.Tyname Datatypes.StampMap -> int ->
      Nameset * Datatypes.Strname Datatypes.StampMap * 
      Datatypes.Tyname Datatypes.StampMap

    val nameset_rigid_copy :
      Nameset * 
      Datatypes.Strname Datatypes.StampMap *
      Datatypes.Tyname Datatypes.StampMap -> int -> 
      Nameset * Datatypes.Strname Datatypes.StampMap *
      Datatypes.Tyname Datatypes.StampMap

    val nameset_rehash : Nameset -> unit

    val new_names_from_scratch :
      Nameset -> int ->
      Nameset * 
      Datatypes.Strname Datatypes.StampMap *
      Datatypes.Tyname Datatypes.StampMap

(* these 3 functions added 6.6.91 by nickh to enable the spec-encoding
and decoding of namesets *)

    val tynames_of_nameset : Nameset -> Datatypes.Tyname list
    val strnames_of_nameset : Nameset -> Datatypes.Strname list
    val nameset_of_name_lists : 
      Datatypes.Tyname list * 
      Datatypes.Strname list -> 
      Nameset
  end


@


1.21.9.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a3 5
 * Revision 1.21  1996/10/04  16:04:07  andreww
 * [Bug #1592]
 * Adding extra "level" argument to nameset_rigid_copy, nameset_copy
 * and new_names_from_scratch.
 *
@


1.21.8.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a3 5
 * Revision 1.21  1996/10/04  16:04:07  andreww
 * [Bug #1592]
 * Adding extra "level" argument to nameset_rigid_copy, nameset_copy
 * and new_names_from_scratch.
 *
@


1.21.7.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a3 5
 * Revision 1.21  1996/10/04  16:04:07  andreww
 * [Bug #1592]
 * Adding extra "level" argument to nameset_rigid_copy, nameset_copy
 * and new_names_from_scratch.
 *
@


1.21.6.1
log
@branched from 1.21
@
text
@a3 5
 * Revision 1.21  1996/10/04  16:04:07  andreww
 * [Bug #1592]
 * Adding extra "level" argument to nameset_rigid_copy, nameset_copy
 * and new_names_from_scratch.
 *
@


1.21.6.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a3 3
 * Revision 1.21.6.1  1997/05/12  10:52:34  hope
 * branched from 1.21
 *
@


1.21.6.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a3 3
 * Revision 1.21.6.1  1997/05/12  10:52:34  hope
 * branched from 1.21
 *
@


1.21.6.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a3 3
 * Revision 1.21.6.1  1997/05/12  10:52:34  hope
 * branched from 1.21
 *
@


1.21.6.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a3 3
 * Revision 1.21.6.1.1.1  1997/07/28  18:34:26  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.21.5.1
log
@branched from 1.21
@
text
@a3 5
 * Revision 1.21  1996/10/04  16:04:07  andreww
 * [Bug #1592]
 * Adding extra "level" argument to nameset_rigid_copy, nameset_copy
 * and new_names_from_scratch.
 *
@


1.21.4.1
log
@branched from 1.21
@
text
@a3 5
 * Revision 1.21  1996/10/04  16:04:07  andreww
 * [Bug #1592]
 * Adding extra "level" argument to nameset_rigid_copy, nameset_copy
 * and new_names_from_scratch.
 *
@


1.21.4.1.1.1
log
@branched from 1.21.4.1
@
text
@a3 3
 * Revision 1.21.4.1  1996/12/17  18:19:02  hope
 * branched from 1.21
 *
@


1.21.3.1
log
@branched from 1.21
@
text
@a3 5
 * Revision 1.21  1996/10/04  16:04:07  andreww
 * [Bug #1592]
 * Adding extra "level" argument to nameset_rigid_copy, nameset_copy
 * and new_names_from_scratch.
 *
@


1.21.2.1
log
@branched from 1.21
@
text
@a3 5
 * Revision 1.21  1996/10/04  16:04:07  andreww
 * [Bug #1592]
 * Adding extra "level" argument to nameset_rigid_copy, nameset_copy
 * and new_names_from_scratch.
 *
@


1.21.2.1.1.1
log
@branched from 1.21.2.1
@
text
@a3 3
 * Revision 1.21.2.1  1996/11/14  13:22:56  hope
 * branched from 1.21
 *
@


1.21.1.1
log
@branched from 1.21
@
text
@a3 5
 * Revision 1.21  1996/10/04  16:04:07  andreww
 * [Bug #1592]
 * Adding extra "level" argument to nameset_rigid_copy, nameset_copy
 * and new_names_from_scratch.
 *
@


1.20
log
@Use Stamp instead of Tyname_id etc.
@
text
@d4 3
d109 5
d116 4
a119 2
      Datatypes.Strname Datatypes.StampMap * Datatypes.Tyname Datatypes.StampMap -> 
      Nameset * Datatypes.Strname Datatypes.StampMap * Datatypes.Tyname Datatypes.StampMap
d124 1
a124 1
      Datatypes.Tyname Datatypes.StampMap -> 
d131 1
a131 1
      Nameset -> 
@


1.20.2.1
log
@branched from 1.20
@
text
@a3 3
 * Revision 1.20  1995/03/24  15:08:45  matthew
 * Use Stamp instead of Tyname_id etc.
 *
@


1.20.1.1
log
@branched from 1.20
@
text
@a3 3
 * Revision 1.20  1995/03/24  15:08:45  matthew
 * Use Stamp instead of Tyname_id etc.
 *
@


1.19
log
@Added --
 remove_strname -- delete a strname from a nameset
 simple_copy -- make a duplicate nameset
@
text
@d4 5
d108 2
a109 4
      (Datatypes.Strname) Datatypes.Strname_id.Map.T *
      (Datatypes.Tyname) Datatypes.Tyfun_id.Map.T -> 
      Nameset * (Datatypes.Strname) Datatypes.Strname_id.Map.T *
      (Datatypes.Tyname) Datatypes.Tyfun_id.Map.T
d113 4
a116 4
      (Datatypes.Strname) Datatypes.Strname_id.Map.T *
      (Datatypes.Tyname) Datatypes.Tyfun_id.Map.T -> 
      Nameset * (Datatypes.Strname) Datatypes.Strname_id.Map.T *
      (Datatypes.Tyname) Datatypes.Tyfun_id.Map.T
d123 2
a124 2
      (Datatypes.Strname) Datatypes.Strname_id.Map.T *
      (Datatypes.Tyname) Datatypes.Tyfun_id.Map.T
@


1.18
log
@Added copyright message
@
text
@d4 3
d92 1
d100 1
a100 1

@


1.17
log
@Added nameset_rehash to deal with the effects of sharing and realisation
@
text
@d4 3
d60 1
@


1.17.1.1
log
@Fork for bug fixing
@
text
@a3 3
Revision 1.17  1993/05/20  12:50:10  jont
Added nameset_rehash to deal with the effects of sharing and realisation

@


1.16
log
@Added nameset_rigid_copy
@
text
@d4 3
d106 2
@


1.15
log
@BasisTypes & Nameset signature changes
@
text
@d4 3
d83 1
d89 1
d96 8
@


1.14
log
@Options & Info changes
@
text
@d4 3
d60 1
a60 1
require "../typechecker/basistypes";
d65 1
a65 1
    structure BasisTypes : BASISTYPES
d68 17
a84 15
    val empty_nameset : unit -> BasisTypes.Nameset
    val union : BasisTypes.Nameset * BasisTypes.Nameset -> BasisTypes.Nameset
    val intersection : BasisTypes.Nameset * BasisTypes.Nameset -> BasisTypes.Nameset
    val add_tyname : BasisTypes.Datatypes.Tyname * BasisTypes.Nameset -> BasisTypes.Nameset
    val add_strname : BasisTypes.Datatypes.Strname * BasisTypes.Nameset -> BasisTypes.Nameset
    val member_of_tynames : BasisTypes.Datatypes.Tyname * BasisTypes.Nameset -> bool
    val member_of_strnames : BasisTypes.Datatypes.Strname * BasisTypes.Nameset -> bool
    val tynames_in_nameset : BasisTypes.Datatypes.Tyname list * BasisTypes.Nameset -> BasisTypes.Nameset
    val remove_tyname : BasisTypes.Datatypes.Tyname * BasisTypes.Nameset -> BasisTypes.Nameset
    val nameset_eq : BasisTypes.Nameset * BasisTypes.Nameset -> bool
    val no_tynames : BasisTypes.Nameset -> bool
    val diff : BasisTypes.Nameset * BasisTypes.Nameset -> BasisTypes.Nameset
    val initial_nameset : BasisTypes.Nameset
    val initial_nameset_for_builtin_library : BasisTypes.Nameset
    val string_nameset : Options.print_options -> BasisTypes.Nameset -> string
d86 5
a90 5
BasisTypes.Nameset * 
      (BasisTypes.Datatypes.Strname) BasisTypes.Datatypes.Strname_id.Map.T *
      (BasisTypes.Datatypes.Tyname) BasisTypes.Datatypes.Tyfun_id.Map.T -> 
      BasisTypes.Nameset * (BasisTypes.Datatypes.Strname) BasisTypes.Datatypes.Strname_id.Map.T *
      (BasisTypes.Datatypes.Tyname) BasisTypes.Datatypes.Tyfun_id.Map.T
d92 4
a95 4
      BasisTypes.Nameset -> 
      BasisTypes.Nameset * 
      (BasisTypes.Datatypes.Strname) BasisTypes.Datatypes.Strname_id.Map.T *
      (BasisTypes.Datatypes.Tyname) BasisTypes.Datatypes.Tyfun_id.Map.T
d100 2
a101 2
    val tynames_of_nameset : BasisTypes.Nameset -> BasisTypes.Datatypes.Tyname list
    val strnames_of_nameset : BasisTypes.Nameset -> BasisTypes.Datatypes.Strname list
d103 3
a105 3
      BasisTypes.Datatypes.Tyname list * 
      BasisTypes.Datatypes.Strname list -> 
      BasisTypes.Nameset
@


1.13
log
@Removed open Datatypes, Changes for BASISTYPES signature
@
text
@d4 3
d58 1
d63 1
d79 1
a79 1
    val string_nameset : BasisTypes.Info.options -> BasisTypes.Nameset -> string
@


1.12
log
@Added sharing.
@
text
@d4 3
d54 1
a54 2
require "../main/info";
require "../typechecker/datatypes";
d58 23
a80 27
    structure Datatypes : DATATYPES
    structure Info : INFO
    sharing Info.Location = Datatypes.Ident.Location

    open Datatypes

    type Nameset

    val empty_nameset : unit -> Nameset
    val union : Nameset * Nameset -> Nameset
    val intersection : Nameset * Nameset -> Nameset
    val add_tyname : Tyname * Nameset -> Nameset
    val add_strname : Strname * Nameset -> Nameset
    val member_of_tynames : Tyname * Nameset -> bool
    val member_of_strnames : Strname * Nameset -> bool
    val tynames_in_nameset : Tyname list * Nameset -> Nameset
    val remove_tyname : Tyname * Nameset -> Nameset
    val nameset_eq : Nameset * Nameset -> bool
    val no_tynames : Nameset -> bool
    val diff : Nameset * Nameset -> Nameset
    val initial_nameset : Nameset
    val initial_nameset_for_builtin_library : Nameset
    val string_nameset : Info.options -> Nameset -> string
    val nameset_copy : Nameset * (Strname) Strname_id.Map.T *
      (Tyname) Tyfun_id.Map.T -> 
      Nameset * (Strname) Strname_id.Map.T *
      (Tyname) Tyfun_id.Map.T
d82 4
a85 2
      Nameset -> Nameset * (Strname) Strname_id.Map.T *
      (Tyname) Tyfun_id.Map.T
d90 6
a95 3
    val tynames_of_nameset : Nameset -> Tyname list
    val strnames_of_nameset : Nameset -> Strname list
    val nameset_of_name_lists : Tyname list * Strname list -> Nameset
@


1.11
log
@Changes to make show_id_class and show_eq_info part of Info structure
instead of references.
@
text
@d4 4
d58 1
@


1.10
log
@Added special maps for tyfun_id, tyname_id, strname_id
@
text
@d4 3
d47 1
d53 1
d73 1
a73 1
    val string_nameset : Nameset -> string
@


1.9
log
@Rempoved unused functions from the signature
@
text
@d4 3
d69 4
a72 4
    val nameset_copy : Nameset * (Strname_id.Strname_id, Strname) NewMap.T *
      (Tyfun_id.Tyfun_id, Tyname) NewMap.T -> 
      Nameset * (Strname_id.Strname_id, Strname) NewMap.T *
      (Tyfun_id.Tyfun_id, Tyname) NewMap.T
d74 2
a75 2
      Nameset -> Nameset * (Strname_id.Strname_id, Strname) NewMap.T *
      (Tyfun_id.Tyfun_id, Tyname) NewMap.T
@


1.8
log
@Removed some redundant structure arguments and sharing
Converted where relevant to use NewMap.{forall,exists,iterate}
@
text
@d4 4
a65 6
(*    val nameset_copy : Nameset * (Strname * Strname) list *
      (Tyname * Tyname) list -> Nameset * (Strname * Strname) list *
      (Tyname * Tyname) list 
    val new_names : Nameset * (Strname * Strname) list *
      (Tyname * Tyname) list -> Nameset * (Strname * Strname) list *
      (Tyname * Tyname) list *)
a67 4
      Nameset * (Strname_id.Strname_id, Strname) NewMap.T *
      (Tyfun_id.Tyfun_id, Tyname) NewMap.T
    val new_names : Nameset * (Strname_id.Strname_id, Strname) NewMap.T *
      (Tyfun_id.Tyfun_id, Tyname) NewMap.T ->
@


1.7
log
@Changed to use btrees for renaming of tynames and strnames
@
text
@d4 3
a36 1
require "../utils/newmap";
a40 1
    structure NewMap : NEWMAP
@


1.6
log
@Anel's changes for improved structure copying
@
text
@d4 3
d34 1
d39 1
d67 11
a77 8
    val nameset_copy : Nameset * (Strname_id.Strname_id * Strname) list *
      (Tyfun_id.Tyfun_id * Tyname) list -> 
      Nameset * (Strname_id.Strname_id * Strname) list * 
      (Tyfun_id.Tyfun_id * Tyname) list 
    val new_names : Nameset * (Strname_id.Strname_id * Strname) list *
      (Tyfun_id.Tyfun_id * Tyname) list ->
      Nameset * (Strname_id.Strname_id * Strname) list *
      (Tyfun_id.Tyfun_id * Tyname) list 
@


1.5
log
@Changed to imperative implementation of namesets with hashing
@
text
@d4 3
d56 1
a56 1
    val nameset_copy : Nameset * (Strname * Strname) list *
d61 10
a70 1
      (Tyname * Tyname) list 
@


1.4
log
@New pervasive library code - cut some things out of the initial type basis
@
text
@d1 1
d4 3
d38 1
a38 5
    val empty_nameset : Nameset
(*
    val tynames_of_nameset : Nameset -> Tyname list
    val strnames_of_nameset : Nameset -> Strname list
*)
a58 1

@


1.3
log
@Added copyright message
@
text
@d2 4
a5 1
$Log:	nameset.sml,v $
d51 1
@


1.2
log
@Merging in comments from Ten15 branch to main trunk
@
text
@d3 3
d32 1
d35 1
@


1.1
log
@Initial revision
@
text
@d2 7
a8 1
$Log$
d10 8
@


1.1.1.1
log
@Added comments for DRA on functions
@
text
@d2 1
a2 4
$Log:	nameset.sml,v $
Revision 1.1  91/06/07  11:44:28  colin
Initial revision

a3 8

(* The type Nameset corresponds to the class NameSet of semantic
objects as defined in the Definition (p31): a pair of sets of
structure names and type names respectively, representing those names
free in a semantic object. There are many functions defined on
NameSets in the Definition, and these are all defined and implemented
in this module. *)

@
