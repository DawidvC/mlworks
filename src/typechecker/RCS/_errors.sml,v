head	1.5;
access;
symbols
	ML_final_beta_release_02/03/94:1.5
	mlworks-28-01-1994:1.5
	Release:1.5
	mlworks-beta-01-09-1993:1.5
	MLWorks-1-0-4-29/01/1993:1.5
	MLWorks-1-0-3-21/12/1992:1.5
	MLWorks-1-0-2-15/12/1992:1.5
	MLWorks-1-0-1-04/12/1992:1.5
	checkpoint_17_08_92:1.4
	Ten15_release_19-11-91:1.2
	Ten15_release_21-08-91:1.2
	Ten15_release_19-08-91:1.2
	ten15_release:1.2;
locks; strict;


1.5
date	92.09.02.15.43.52;	author richard;	state Exp;
branches
	1.5.1.1;
next	1.4;

1.4
date	92.08.11.18.45.33;	author jont;	state Exp;
branches;
next	1.3;

1.3
date	91.11.21.16.45.33;	author jont;	state Exp;
branches;
next	1.2;

1.2
date	91.07.11.14.00.11;	author colin;	state Exp;
branches;
next	1.1;

1.1
date	91.06.07.11.36.22;	author colin;	state Exp;
branches;
next	;

1.5.1.1
date	92.09.02.15.43.52;	author jont;	state Exp;
branches;
next	;


desc
@The error handler
@


1.5
log
@Installed central error reporting mechanism.
@
text
@(* _errors.sml the functor *)
(*
$Log: _errors.sml,v $
Revision 1.4  1992/08/11  18:45:33  jont
Removed some redundant structure arguments and sharing
Converted where relevant to use NewMap.{forall,exists,iterate}

Revision 1.3  1991/11/21  16:45:33  jont
Added copyright message

Revision 1.2  91/07/11  14:00:11  colin
Added functions reset_error_count and error_count

Revision 1.1  91/06/07  11:36:22  colin
Initial revision

Copyright (c) 1991 Harlequin Ltd.
*)
require "../utils/print";
require "../typechecker/valenv";
require "../typechecker/basis";
require "errors";

THIS FILE IS NO LONGER USED

(**** The error handler ****)

functor Errors
 (structure Print          : PRINT
  
  structure Valenv         : VALENV
  structure Basis          : BASIS
  sharing Valenv.Datatypes = Basis.Tyvarenv.Datatypes

    ) : ERRORS =

struct
  structure Datatypes = Basis.Tyvarenv.Datatypes
  structure Basis     = Basis

  (*****
   The max number of errors allowed before compilation is stopped 
   *****)

  val max_errors = ref 10

  (*****
  Print a list of messages.
  *****)

  fun print_list [] = ()
    | print_list (message :: rest) =
      (Print.print message ; print_list rest)

  (*****
  A counter for the number of errors found so far.
  *****)

  val errors_count = ref 0

  fun reset_error_count () = errors_count := 0

  fun error_count () = !errors_count


  (*****
  Generate a fresh type variable.
  *****)

  fun fresh_tyvar acontext =
    Datatypes.METATYVAR
    (ref (Basis.level acontext,Datatypes.NULLTYPE), false, false)

  (*****
  This exception is raised when we want to stop compilation.
  *****)

  exception Stop_compilation

  (*****
  default gives the value to return.
  *****)

  type 'a action = {default  : Basis.Context -> 'a}

  (*****
  This action always returns a fresh type variable as its result,
  simply giving the user the standard debugger menu.
  *****)

  val return_alpha = {default = fresh_tyvar}
  
  fun return_val value = {default = fn _ => value}

  (*****
  Announce an error and writing log file.
  *****)

  fun announce_error acontext {default} messages =
    let
      val ? = errors_count := !errors_count + 1
    in
      if !errors_count <= !max_errors then
	(print_list messages ; default acontext)
      else
	(print_list messages;
	 print_list 
	 ["\nMaximum number of errors exceeded (compilation aborted)\n"];
	 raise Stop_compilation)
    end
  
end
@


1.5.1.1
log
@Fork for bug fixing
@
text
@a3 3
Revision 1.5  1992/09/02  15:43:52  richard
Installed central error reporting mechanism.

@


1.4
log
@Removed some redundant structure arguments and sharing
Converted where relevant to use NewMap.{forall,exists,iterate}
@
text
@d4 4
d23 2
@


1.3
log
@Added copyright message
@
text
@d3 4
a6 1
$Log:	_errors.sml,v $
a15 1
require "../typechecker/datatypes";
a23 1
  structure Datatypes      : DATATYPES
d26 2
a27 1
  sharing Valenv.Datatypes = Datatypes
a28 2
  structure Basis          : BASIS
  sharing Basis.Datatypes  = Datatypes
d32 1
a32 1
  structure Datatypes = Datatypes
@


1.2
log
@Added functions reset_error_count and error_count
@
text
@d1 1
d4 3
d10 1
@


1.1
log
@Initial revision
@
text
@d2 4
a5 1
$Log$
d49 5
@
