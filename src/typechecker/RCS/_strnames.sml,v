head	1.17;
access;
symbols
	MLW_daveb_inline_1_4_99:1.17.3
	MLWorks_21c0_1999_03_25:1.17
	MLWorks_20c1_1998_08_20:1.17
	MLWorks_20c0_1998_08_04:1.17
	MLWorks_20b2c2_1998_06_19:1.17
	MLWorks_20b2_Windows_1998_06_12:1.17
	MLWorks_20b1c1_1998_05_07:1.17
	MLWorks_20b0_1998_04_07:1.17
	MLWorks_20b0_1998_03_20:1.17
	MLWorks_20m2_1998_02_16:1.17
	MLWorks_20m1_1997_10_23:1.17
	MLWorks_11r1:1.16.8.1.1.1.1
	MLWorks_workspace_97:1.17.2
	MLWorks_dt_wizard:1.17.1
	MLWorks_11c0_1997_09_09:1.16.8.1.1.1
	MLWorks_10r3:1.16.8.1.3
	MLWorks_10r2_551:1.16.8.1.2
	MLWorks_11:1.16.8.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.16.8.1
	MLWorks_20m0_1997_06_20:1.17
	MLWorks_1_0_r2c2_1997_06_14:1.16.8.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.16.8.1
	MLWorks_1_0_r2c1_1997_05_12:1.16.8
	MLWorks_BugFix_1997_04_24:1.16
	MLWorks_1_0_r2_Win32_1997_04_11:1.16
	MLWorks_1_0_r2_Unix_1997_04_04:1.16
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.16.6.1.1
	MLWorks_gui_1996_12_18:1.16.7
	MLWorks_1_0_Win32_1996_12_17:1.16.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.16.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.16.4.1
	MLWorks_1_0_Irix_1996_11_28:1.16.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.16.5
	MLWorks_1_0_Unix_1996_11_14:1.16.4
	MLWorks_Open_Beta2_1996_10_11:1.16.3
	MLWorks_License_dev:1.16.2
	MLWorks_1_open_beta_1996_09_13:1.16.1
	MLWorks_Open_Beta_1996_08_22:1.16
	MLWorks_Beta_1996_07_02:1.16
	MLWorks_Beta_1996_06_07:1.16
	MLWorks_Beta_1996_06_06:1.16
	MLWorks_Beta_1996_06_05:1.16
	MLWorks_Beta_1996_06_03:1.16
	MLWorks_Beta_1996_05_31:1.16
	MLWorks_Beta_1996_05_30:1.16
	ML_beta_release_12/08/94:1.13
	ML_beta_release_03/08/94:1.13
	ML_revised_beta_release_25/05/94:1.13
	ML_final_beta_release_02/03/94:1.13
	mlworks-28-01-1994:1.13
	Release:1.13
	mlworks-beta-01-09-1993:1.13
	MLWorks-1-0-4-29/01/1993:1.11
	MLWorks-1-0-3-21/12/1992:1.11
	MLWorks-1-0-2-15/12/1992:1.11
	MLWorks-1-0-1-04/12/1992:1.11
	checkpoint_17_08_92:1.6
	Ten15_release_19-11-91:1.1
	Ten15_release_21-08-91:1.1
	Ten15_release_19-08-91:1.1
	ten15_release:1.1;
locks; strict;
comment	@ * @;


1.17
date	97.05.01.12.54.30;	author jont;	state Exp;
branches
	1.17.1.1
	1.17.2.1
	1.17.3.1;
next	1.16;

1.16
date	95.03.28.16.24.35;	author matthew;	state Exp;
branches
	1.16.1.1
	1.16.2.1
	1.16.3.1
	1.16.4.1
	1.16.5.1
	1.16.6.1
	1.16.7.1
	1.16.8.1;
next	1.15;

1.15
date	95.02.02.14.01.03;	author matthew;	state Exp;
branches;
next	1.14;

1.14
date	94.10.13.10.34.07;	author matthew;	state Exp;
branches;
next	1.13;

1.13
date	93.05.21.12.45.18;	author matthew;	state Exp;
branches
	1.13.1.1;
next	1.12;

1.12
date	93.05.18.19.08.01;	author jont;	state Exp;
branches;
next	1.11;

1.11
date	92.11.23.17.03.16;	author jont;	state Exp;
branches;
next	1.10;

1.10
date	92.10.30.15.17.36;	author jont;	state Exp;
branches;
next	1.9;

1.9
date	92.10.01.11.12.28;	author jont;	state Exp;
branches;
next	1.8;

1.8
date	92.08.27.20.15.19;	author davidt;	state Exp;
branches;
next	1.7;

1.7
date	92.08.27.19.01.50;	author davidt;	state Exp;
branches;
next	1.6;

1.6
date	92.07.17.15.53.57;	author jont;	state Exp;
branches;
next	1.5;

1.5
date	92.07.04.17.15.58;	author jont;	state Exp;
branches;
next	1.4;

1.4
date	92.05.05.14.09.23;	author jont;	state Exp;
branches;
next	1.3;

1.3
date	92.01.27.20.15.37;	author jont;	state Exp;
branches;
next	1.2;

1.2
date	91.11.21.16.47.58;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	91.06.07.11.38.40;	author colin;	state Exp;
branches;
next	;

1.13.1.1
date	93.05.21.12.45.18;	author jont;	state Exp;
branches;
next	;

1.16.1.1
date	96.09.13.11.41.24;	author hope;	state Exp;
branches;
next	;

1.16.2.1
date	96.10.07.16.34.27;	author hope;	state Exp;
branches;
next	;

1.16.3.1
date	96.10.17.11.53.35;	author hope;	state Exp;
branches;
next	;

1.16.4.1
date	96.11.14.13.21.10;	author hope;	state Exp;
branches
	1.16.4.1.1.1;
next	;

1.16.4.1.1.1
date	96.11.28.15.32.13;	author hope;	state Exp;
branches;
next	;

1.16.5.1
date	96.11.22.18.38.56;	author hope;	state Exp;
branches;
next	;

1.16.6.1
date	96.12.17.18.17.57;	author hope;	state Exp;
branches
	1.16.6.1.1.1;
next	;

1.16.6.1.1.1
date	97.02.24.12.12.13;	author hope;	state Exp;
branches;
next	;

1.16.7.1
date	96.12.18.10.13.13;	author hope;	state Exp;
branches;
next	;

1.16.8.1
date	97.05.12.10.51.31;	author hope;	state Exp;
branches
	1.16.8.1.1.1
	1.16.8.1.2.1
	1.16.8.1.3.1;
next	;

1.16.8.1.1.1
date	97.07.28.18.33.22;	author daveb;	state Exp;
branches
	1.16.8.1.1.1.1.1;
next	;

1.16.8.1.1.1.1.1
date	97.10.07.11.59.20;	author jkbrook;	state Exp;
branches;
next	;

1.16.8.1.2.1
date	97.09.08.17.26.27;	author daveb;	state Exp;
branches;
next	;

1.16.8.1.3.1
date	97.09.09.14.23.18;	author daveb;	state Exp;
branches;
next	;

1.17.1.1
date	97.09.10.19.42.15;	author brucem;	state Exp;
branches;
next	;

1.17.2.1
date	97.09.11.21.09.46;	author daveb;	state Exp;
branches;
next	;

1.17.3.1
date	99.04.01.18.08.31;	author daveb;	state Exp;
branches;
next	;


desc
@Structure Names
See The Definition (section 4.1)
@


1.17
log
@[Bug #30088]
Get rid of MLWorks.Option
@
text
@(* _strnames.sml the functor *)
(*
$Log: _strnames.sml,v $
 * Revision 1.16  1995/03/28  16:24:35  matthew
 * Use Stamp instead of Tyname_id etc.
 *
Revision 1.15  1995/02/02  14:01:03  matthew
Removing debug stuff

Revision 1.14  1994/10/13  10:34:07  matthew
Use pervasive Option.option for return values in NewMap

Revision 1.13  1993/05/21  12:45:18  matthew
Added Strname_id.Map.Undefined handler

Revision 1.12  1993/05/18  19:08:01  jont
Removed integer parameter

Revision 1.11  1992/11/23  17:03:16  jont
More simplifications to strname_eq and metastrname_eq

Revision 1.10  1992/10/30  15:17:36  jont
Added special maps for tyfun_id, tyname_id, strname_id

Revision 1.9  1992/10/01  11:12:28  jont
Improved strname_eq, and took out the debugging which was using half its time

Revision 1.8  1992/08/27  20:15:19  davidt
Yet more changes to get structure copying working better.

Revision 1.7  1992/08/27  19:01:50  davidt
Made various changes so that structure copying can be
done more efficiently.

Revision 1.6  1992/07/17  15:53:57  jont
Changed to use btrees for renaming of tynames and strnames

Revision 1.5  1992/07/04  17:15:58  jont
Anel's changes for improved structure copying

Revision 1.4  1992/05/05  14:09:23  jont
Anel's fixes

Revision 1.3  1992/01/27  20:15:37  jont
Added use of variable from ty_debug, with local copy, to control
debug output. For efficiency reasons

Revision 1.2  1991/11/21  16:47:58  jont
Added copyright message

Revision 1.1  91/06/07  11:38:40  colin
Initial revision

Copyright (c) 1991 Harlequin Ltd.
*)

require "../utils/crash";
require "../utils/print";
require "../typechecker/datatypes";
require "stamp";
require "../typechecker/strnames";

functor Strnames(
  structure Datatypes : DATATYPES
  structure Stamp : STAMP
  structure Crash : CRASH
  structure Print : PRINT
  sharing type Datatypes.Stamp = Stamp.Stamp
  sharing type Datatypes.StampMap = Stamp.Map.T
    ) : STRNAMES =
  struct
    structure Datatypes = Datatypes
    open Datatypes
      
    (****
     Operations on the data structure for structure names.
     ****)

    local
      fun metap (METASTRNAME _) = true
	| metap (_) = false
    in
      fun string_strname (NULLNAME id) = 
	"NULLNAME" ^ Stamp.string_stamp id
	| string_strname (STRNAME id) = "m" ^ Stamp.string_stamp id
	| string_strname (METASTRNAME (ref name)) = 
(*	  if metap name 
	    then string_strname name
	  else *) "metastr (" ^ string_strname name ^ ")"
    end

    fun uninstantiated (METASTRNAME (ref (NULLNAME _))) = true
      | uninstantiated (METASTRNAME (ref name)) = uninstantiated name
      | uninstantiated (_) = false

    (****
     strname_eq returns false when comparing two uninstantiated 
     metastrnames not containing the same reference. 
     ****)

    local
      fun strip(m as METASTRNAME(ref name)) =
	(case name of
	   NULLNAME _ => m
	 | _ => strip name)
	| strip name = name
    in
      fun strname_eq(name, name') = strip name = strip name'

      fun metastrname_eq(name, name') =
	let
	  val name = strip name
	in
	  case name of
	    METASTRNAME _ => name = strip name'
	  | _ => false
	end

    end
	
    (****
     Order function on structure names.
     ****)

    fun strname_ord (STRNAME id, STRNAME id') = 
      Stamp.stamp_lt (id,id')
      | strname_ord (NULLNAME _,_) = false
      | strname_ord (_,NULLNAME _) = true
      | strname_ord (METASTRNAME (ref name),name') = strname_ord (name,name')
      | strname_ord (name,METASTRNAME (ref name')) = strname_ord (name,name')

    fun strip (name as METASTRNAME (ref (NULLNAME _))) = name
      | strip (METASTRNAME (ref name)) = strip name
      | strip name = name
      
    (****
     Used during copying of signatures when elaborating structure descriptions.
     ****)

    fun create_strname_copy rigid =
      let
        fun copy (strname_copies,METASTRNAME (ref (NULLNAME id))) = 
          (case Stamp.Map.tryApply'(strname_copies, id) of
             SOME _ => strname_copies
           | NONE =>
               let
                 val new_strname =
                   if rigid then STRNAME (Stamp.make_stamp())
                   else METASTRNAME (ref (NULLNAME (Stamp.make_stamp ())))
               in
                 Stamp.Map.define(strname_copies, id, new_strname)
               end)
          | copy (strname_copies,METASTRNAME (ref strname)) = 
            copy (strname_copies,strname)
          | copy (strname_copies,STRNAME stamp) = 
            (case Stamp.Map.tryApply'(strname_copies, stamp) of
               SOME _ => strname_copies
             | NONE =>
                 Stamp.Map.define(strname_copies, stamp, STRNAME (Stamp.make_stamp ())))
          | copy (strname_copies,NULLNAME _) = 
            Crash.impossible "create_strname_copy"
      in
        copy
      end

    fun strname_copy (name as METASTRNAME (ref (NULLNAME id)), strname_copies) = 
      (case Stamp.Map.tryApply'(strname_copies, id) of
         SOME newname => newname
       | _ => name)
      | strname_copy (METASTRNAME (ref strname), strname_copies) = 
	strname_copy (strname,strname_copies)
      | strname_copy (name as STRNAME id,strname_copies) =
          (case Stamp.Map.tryApply'(strname_copies, id) of
             SOME newname => newname
           | _ => name)
      | strname_copy (NULLNAME _, _) = Crash.impossible "strname_copy"
  end
@


1.17.3.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a3 4
 * Revision 1.17  1997/05/01  12:54:30  jont
 * [Bug #30088]
 * Get rid of MLWorks.Option
 *
@


1.17.2.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a3 4
 * Revision 1.17  1997/05/01  12:54:30  jont
 * [Bug #30088]
 * Get rid of MLWorks.Option
 *
@


1.17.1.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a3 4
 * Revision 1.17  1997/05/01  12:54:30  jont
 * [Bug #30088]
 * Get rid of MLWorks.Option
 *
@


1.16
log
@Use Stamp instead of Tyname_id etc.
@
text
@d4 3
d144 2
a145 2
             MLWorks.Option.SOME _ => strname_copies
           | MLWorks.Option.NONE =>
d157 2
a158 2
               MLWorks.Option.SOME _ => strname_copies
             | MLWorks.Option.NONE =>
d168 1
a168 1
         MLWorks.Option.SOME newname => newname
d174 1
a174 1
             MLWorks.Option.SOME newname => newname
@


1.16.8.1
log
@branched from 1.16
@
text
@a3 3
 * Revision 1.16  1995/03/28  16:24:35  matthew
 * Use Stamp instead of Tyname_id etc.
 *
@


1.16.8.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a3 3
 * Revision 1.16.8.1  1997/05/12  10:51:31  hope
 * branched from 1.16
 *
@


1.16.8.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a3 3
 * Revision 1.16.8.1  1997/05/12  10:51:31  hope
 * branched from 1.16
 *
@


1.16.8.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a3 3
 * Revision 1.16.8.1  1997/05/12  10:51:31  hope
 * branched from 1.16
 *
@


1.16.8.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a3 3
 * Revision 1.16.8.1.1.1  1997/07/28  18:33:22  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.16.7.1
log
@branched from 1.16
@
text
@a3 3
 * Revision 1.16  1995/03/28  16:24:35  matthew
 * Use Stamp instead of Tyname_id etc.
 *
@


1.16.6.1
log
@branched from 1.16
@
text
@a3 3
 * Revision 1.16  1995/03/28  16:24:35  matthew
 * Use Stamp instead of Tyname_id etc.
 *
@


1.16.6.1.1.1
log
@branched from 1.16.6.1
@
text
@a3 3
 * Revision 1.16.6.1  1996/12/17  18:17:57  hope
 * branched from 1.16
 *
@


1.16.5.1
log
@branched from 1.16
@
text
@a3 3
 * Revision 1.16  1995/03/28  16:24:35  matthew
 * Use Stamp instead of Tyname_id etc.
 *
@


1.16.4.1
log
@branched from 1.16
@
text
@a3 3
 * Revision 1.16  1995/03/28  16:24:35  matthew
 * Use Stamp instead of Tyname_id etc.
 *
@


1.16.4.1.1.1
log
@branched from 1.16.4.1
@
text
@a3 3
 * Revision 1.16.4.1  1996/11/14  13:21:10  hope
 * branched from 1.16
 *
@


1.16.3.1
log
@branched from 1.16
@
text
@a3 3
 * Revision 1.16  1995/03/28  16:24:35  matthew
 * Use Stamp instead of Tyname_id etc.
 *
@


1.16.2.1
log
@branched from 1.16
@
text
@a3 3
 * Revision 1.16  1995/03/28  16:24:35  matthew
 * Use Stamp instead of Tyname_id etc.
 *
@


1.16.1.1
log
@branched from 1.16
@
text
@a3 3
 * Revision 1.16  1995/03/28  16:24:35  matthew
 * Use Stamp instead of Tyname_id etc.
 *
@


1.15
log
@Removing debug stuff
@
text
@d4 3
d57 1
d62 1
d65 2
d81 2
a82 2
	"NULLNAME" ^ Strname_id.string_strname_id id
	| string_strname (STRNAME id) = "m" ^ Strname_id.string_strname_id id
d123 1
a123 1
      Strname_id.strname_id_lt (id,id')
a133 8
     Used during copying of signatures before matching against structures.
     ****)

    fun copy_metastrname (METASTRNAME (ref (NULLNAME id))) = 
      METASTRNAME (ref (NULLNAME id))
      | copy_metastrname _ = Crash.impossible "Strnames.copy_metastrname"

    (****
d137 25
a161 12
    fun new_metastrname (METASTRNAME (ref (NULLNAME id))) = 
        METASTRNAME (ref (NULLNAME (Strname_id.make_strname_id ())))
      | new_metastrname _ = Crash.impossible "Strnames.new_metastrname"

    fun create_strname_copy (name as METASTRNAME (ref (NULLNAME id)), strname_copies, copy_fun) = 
        (case Strname_id.Map.tryApply'(strname_copies, id) of
	   MLWorks.Option.SOME _ => strname_copies
	 | MLWorks.Option.NONE =>
	     Strname_id.Map.define(strname_copies, id, copy_fun name))
      | create_strname_copy (METASTRNAME (ref strname), strname_copies, copy_fun) = 
	create_strname_copy (strname,strname_copies,copy_fun)
      | create_strname_copy (strname,strname_copies,_) = strname_copies
d164 3
a166 2
      (Strname_id.Map.apply'(strname_copies, id)
       handle Strname_id.Map.Undefined => name)
d169 5
a173 1
      | strname_copy (strname, _) = strname
@


1.14
log
@Use pervasive Option.option for return values in NewMap
@
text
@d4 3
a52 1
require "../typechecker/ty_debug";
a56 1
  structure Ty_Debug : TY_DEBUG
a58 5
  structure Debug :
		 sig
		   val set_debug_level : int -> unit
		   val debug_level : unit -> int
		 end
a62 1
    val do_debug = Ty_Debug.do_debug
@


1.13
log
@Added Strname_id.Map.Undefined handler
@
text
@d4 3
d149 2
a150 2
	   Strname_id.Map.YES _ => strname_copies
	 | Strname_id.Map.NO =>
@


1.13.1.1
log
@Fork for bug fixing
@
text
@a3 3
Revision 1.13  1993/05/21  12:45:18  matthew
Added Strname_id.Map.Undefined handler

@


1.12
log
@Removed integer parameter
@
text
@d4 3
d154 2
a155 1
        Strname_id.Map.apply'(strname_copies, id)
@


1.11
log
@More simplifications to strname_eq and metastrname_eq
@
text
@d4 3
a43 1
require "../utils/integer";
a46 1
require "../typechecker/simpletypes";
a50 2
  structure Strname_id : STRNAME_ID
  structure Integer : INTEGER
@


1.10
log
@Added special maps for tyfun_id, tyname_id, strname_id
@
text
@d4 3
d92 4
a95 2
      fun strip(m as METASTRNAME(ref(NULLNAME _))) = m
	| strip(METASTRNAME(ref name)) = strip name
d98 1
a98 38
      fun strname_eq (a as STRNAME name,a' as STRNAME name') = 
	((*if do_debug andalso Debug.debug_level () > 10 then 
	   (Print.print ("strname_eq " ^ (string_strname a) ^ 
			 (string_strname a'));
	    Print.print ("\n"))
	 else ();*)
	   name = name'
	   )
	| strname_eq (a as NULLNAME id,a' as NULLNAME id') = 
	  ((*if do_debug andalso Debug.debug_level () > 10 then 
	     (Print.print ("strname_eq " ^ (string_strname a) ^ 
			   (string_strname a'));
	      Print.print ("\n"))
	   else ();*)
	     id = id')
	| strname_eq (a as METASTRNAME (r as ref (NULLNAME _)),
		      a' as METASTRNAME (r' as ref (NULLNAME _))) =
	  ((*if do_debug andalso Debug.debug_level () > 10 then 
	     (Print.print ("strname_eq " ^ (string_strname a) ^ 
			   (string_strname a'));
	      Print.print ("\n"))
	   else ();*)
	     r = r')
	| strname_eq (a,a') = 
	  ((*if do_debug andalso Debug.debug_level () > 10 then 
	     (Print.print ("strname_eq " ^ (string_strname a) ^ 
			   (string_strname a'));
	      Print.print ("\n"))
	   else ();*)
	     false)
      val strname_eq =
	fn (name, name') =>
	let
	  val name = strip name
	  val name' = strip name'
	in
	  strname_eq(name, name')
	end
d100 1
a100 16
      fun metastrname_eq (METASTRNAME (r as ref (NULLNAME _)),
			  METASTRNAME (r' as ref (NULLNAME _))) = 
	(r = r')
(*
	| metastrname_eq (name as METASTRNAME (ref (NULLNAME _)),
			  METASTRNAME (ref name')) = 
	  metastrname_eq (name,name')
	| metastrname_eq (METASTRNAME (ref name),
			  name' as METASTRNAME (ref (NULLNAME _))) = 
	  metastrname_eq (name,name')
	| metastrname_eq (METASTRNAME (ref name),METASTRNAME (ref name')) = 
	  metastrname_eq (name,name')
*)
	| metastrname_eq _ = false
      val metastrname_eq =
	fn (name, name') =>
a102 1
	  val name' = strip name'
d104 3
a106 1
	  metastrname_eq(name, name')
@


1.9
log
@Improved strname_eq, and took out the debugging which was using half its time
@
text
@d4 3
a57 1
    structure NewMap = Datatypes.NewMap
d189 4
a192 3
        (case NewMap.tryApply'(strname_copies, id) of
	   NewMap.YES _ => strname_copies
	 | NewMap.NO => NewMap.define(strname_copies, id, copy_fun name))
d198 1
a198 1
        NewMap.apply'(strname_copies, id)
@


1.8
log
@Yet more changes to get structure copying working better.
@
text
@d4 3
d86 7
a92 9
    fun strname_eq (a as STRNAME name,a' as STRNAME name') = 
      (if do_debug andalso Debug.debug_level () > 10 then 
	 (Print.print ("strname_eq " ^ (string_strname a) ^ 
		       (string_strname a'));
	  Print.print ("\n"))
       else ();
	 name = name')
      | strname_eq (a as NULLNAME id,a' as NULLNAME id') = 
	(if do_debug andalso Debug.debug_level () > 10 then 
d96 58
a153 47
	 else ();
	id = id')
      | strname_eq (a as METASTRNAME (r as ref (NULLNAME _)),
		    a' as METASTRNAME (r' as ref (NULLNAME _))) =
	(if do_debug andalso Debug.debug_level () > 10 then 
	   (Print.print ("strname_eq " ^ (string_strname a) ^ 
			 (string_strname a'));
	    Print.print ("\n"))
	 else ();
	r = r')
      | strname_eq (name as METASTRNAME (ref (NULLNAME _)),
		    a' as METASTRNAME (ref name')) =
	(if do_debug andalso Debug.debug_level () > 10 then 
	   (Print.print ("strname_eq " ^ (string_strname name) ^ 
			 (string_strname a'));
	    Print.print ("\n"))
	 else ();
	strname_eq (name,name'))
      | strname_eq (a as METASTRNAME (ref name),
		    name' as METASTRNAME (ref (NULLNAME _))) = 
	(if do_debug andalso Debug.debug_level () > 10 then 
	   (Print.print ("strname_eq " ^ (string_strname a) ^ 
			 (string_strname name'));
	    Print.print ("\n"))
	 else ();
	strname_eq (name,name'))
      | strname_eq (a as METASTRNAME (ref name),name') =
	(if do_debug andalso Debug.debug_level () > 10 then 
	   (Print.print ("strname_eq " ^ (string_strname a) ^ 
			 (string_strname name'));
	    Print.print ("\n"))
	 else ();
	strname_eq (name,name'))
      | strname_eq (name,a' as METASTRNAME (ref name')) = 
	(if do_debug andalso Debug.debug_level () > 10 then 
	   (Print.print ("strname_eq " ^ (string_strname name) ^ 
			 (string_strname a'));
	    Print.print ("\n"))
	 else ();
	   strname_eq (name,name'))
      | strname_eq (a,a') = 
	(if do_debug andalso Debug.debug_level () > 10 then 
	   (Print.print ("strname_eq " ^ (string_strname a) ^ 
			 (string_strname a'));
	    Print.print ("\n"))
	 else ();
	false)
a154 13
    fun metastrname_eq (METASTRNAME (r as ref (NULLNAME _)),
			METASTRNAME (r' as ref (NULLNAME _))) = 
      (r = r')
      | metastrname_eq (name as METASTRNAME (ref (NULLNAME _)),
			METASTRNAME (ref name')) = 
	metastrname_eq (name,name')
      | metastrname_eq (METASTRNAME (ref name),
			name' as METASTRNAME (ref (NULLNAME _))) = 
	metastrname_eq (name,name')
      | metastrname_eq (METASTRNAME (ref name),METASTRNAME (ref name')) = 
	metastrname_eq (name,name')
      | metastrname_eq (_,_) = false

@


1.7
log
@Made various changes so that structure copying can be
done more efficiently.
@
text
@d4 4
d195 1
a195 1
    fun strname_copy (name as METASTRNAME (ref (NULLNAME id)), strname_copies, copy_fun) = 
d197 3
a199 3
      | strname_copy (METASTRNAME (ref strname), strname_copies,copy_fun) = 
	strname_copy (strname,strname_copies,copy_fun)
      | strname_copy (strname, _, _) = strname
@


1.6
log
@Changed to use btrees for renaming of tynames and strnames
@
text
@d4 3
a25 1
require "../utils/newmap";
a34 1
  structure NewMap : NEWMAP
d48 1
a48 1
    structure NewMap = NewMap
d180 1
a180 1
      METASTRNAME (ref (NULLNAME (Strname_id.make_strname_id ())))
d183 13
a195 62
(*    local
      exception NoStrnameCopy

      fun find_copy (name,[]) = raise NoStrnameCopy
	| find_copy (name,(name',copy)::t) = 
	  if strname_eq (name,name') 
	    then 
	      copy
	  else 
	    find_copy (name,t)
    in
      fun strname_copy (name as METASTRNAME (ref (NULLNAME id)),
			strname_copies,copy_fun) = 
	((find_copy (name,strname_copies),strname_copies)
           handle NoStrnameCopy => 
             (let 
                val name' = copy_fun name 
              in 
                (name',(name,name')::strname_copies)
               end))
	| strname_copy (name as METASTRNAME (r as ref strname),
			strname_copies,copy_fun) = 
	  strname_copy (strname,strname_copies,copy_fun)
	| strname_copy (strname,strname_copies,_) = (strname,strname_copies)
    end    
*)
    local
(*
      exception NoStrnameCopy

      fun find_copy (_,[]) = raise NoStrnameCopy
	| find_copy (id,(id',copy)::t) = 
	  if id = id'
	    then copy
	  else find_copy (id,t)
*)
    in
      fun strname_copy (name as METASTRNAME (ref (NULLNAME id)),
			strname_copies,copy_fun) = 
	((NewMap.apply'(strname_copies, id), strname_copies)
	 handle NewMap.Undefined =>
	   let
	     val name' = copy_fun name
	   in
	     (name', NewMap.define(strname_copies, id, name'))
	   end)
(*
	((find_copy (id,strname_copies),strname_copies)
           handle NoStrnameCopy => 
             (let 
                val name' = copy_fun name 
              in 
                (name',(id,name')::strname_copies)
               end))
*)
	| strname_copy (name as METASTRNAME (r as ref strname),
			strname_copies,copy_fun) = 
	  strname_copy (strname,strname_copies,copy_fun)
	| strname_copy (strname,strname_copies,_) = (strname,strname_copies)

    end    

a196 1

@


1.5
log
@Anel's changes for improved structure copying
@
text
@d4 3
d23 1
d33 1
d44 2
a45 1
  structure Print : PRINT) : STRNAMES =
d47 1
a48 1
      
d209 1
d217 1
d221 8
d236 1
d241 1
@


1.4
log
@Anel's fixes
@
text
@d4 3
d176 1
a176 1
    local
d201 25
@


1.3
log
@Added use of variable from ty_debug, with local copy, to control
debug output. For efficiency reasons
@
text
@d4 4
a173 1
      (* This exception should never be raised and is therefore not caught *)
d175 1
a175 3
      fun member (name,[]) = false 
	| member (name,(name',_)::t) = 
	  strname_eq (name,name') orelse member (name,t)
d186 7
a192 8
	if member (name,strname_copies) 
	  then 
	    (find_copy (name,strname_copies),strname_copies)
	else 
	  let val copy = copy_fun name
	  in
	    (copy,(name,copy)::strname_copies)
	  end
@


1.2
log
@Added copyright message
@
text
@d3 4
a6 1
$Log:	_strnames.sml,v $
d12 1
a12 3
require "../typechecker/strnames";
require "../typechecker/datatypes";
require "../typechecker/simpletypes";
d16 4
d21 12
a32 8
functor Strnames (structure Datatypes : DATATYPES
		  structure Strname_id : STRNAME_ID
		  structure Integer : INTEGER
		  structure Crash : CRASH
		  structure Debug : sig val set_debug_level : int -> unit
					val debug_level : unit -> int
				    end
		  structure Print : PRINT) : STRNAMES =
d36 1
d66 1
a66 1
      (if Debug.debug_level () > 10 then 
d73 1
a73 1
	(if Debug.debug_level () > 10 then 
d81 1
a81 1
	(if Debug.debug_level () > 10 then 
d89 1
a89 1
	(if Debug.debug_level () > 10 then 
d97 1
a97 1
	(if Debug.debug_level () > 10 then 
d104 1
a104 1
	(if Debug.debug_level () > 10 then 
d111 1
a111 1
	(if Debug.debug_level () > 10 then 
d118 1
a118 1
	(if Debug.debug_level () > 10 then 
@


1.1
log
@Initial revision
@
text
@d1 1
d3 5
a7 1
$Log$
@
