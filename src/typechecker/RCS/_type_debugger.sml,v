head	1.18;
access;
symbols
	MLW_daveb_inline_1_4_99:1.18.3
	MLWorks_21c0_1999_03_25:1.18
	MLWorks_20c1_1998_08_20:1.18
	MLWorks_20c0_1998_08_04:1.18
	MLWorks_20b2c2_1998_06_19:1.18
	MLWorks_20b2_Windows_1998_06_12:1.18
	MLWorks_20b1c1_1998_05_07:1.18
	MLWorks_20b0_1998_04_07:1.18
	MLWorks_20b0_1998_03_20:1.18
	MLWorks_20m2_1998_02_16:1.18
	MLWorks_20m1_1997_10_23:1.18
	MLWorks_11r1:1.17.5.1.1.1.1
	MLWorks_workspace_97:1.18.2
	MLWorks_dt_wizard:1.18.1
	MLWorks_11c0_1997_09_09:1.17.5.1.1.1
	MLWorks_10r3:1.17.5.1.3
	MLWorks_10r2_551:1.17.5.1.2
	MLWorks_11:1.17.5.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.17.5.1
	MLWorks_20m0_1997_06_20:1.18
	MLWorks_1_0_r2c2_1997_06_14:1.17.5.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.17.5.1
	MLWorks_1_0_r2c1_1997_05_12:1.17.5
	MLWorks_BugFix_1997_04_24:1.17
	MLWorks_1_0_r2_Win32_1997_04_11:1.17
	MLWorks_1_0_r2_Unix_1997_04_04:1.17
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.17.3.1.1
	MLWorks_gui_1996_12_18:1.17.4
	MLWorks_1_0_Win32_1996_12_17:1.17.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.17.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.17.1.1
	MLWorks_1_0_Irix_1996_11_28:1.17.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.17.2
	MLWorks_1_0_Unix_1996_11_14:1.17.1
	MLWorks_Open_Beta2_1996_10_11:1.16.1
	MLWorks_License_dev:1.15.1
	MLWorks_1_open_beta_1996_09_13:1.14.1
	MLWorks_Open_Beta_1996_08_22:1.14
	MLWorks_Beta_1996_07_02:1.13
	MLWorks_Beta_1996_06_07:1.13
	MLWorks_Beta_1996_06_06:1.13
	MLWorks_Beta_1996_06_05:1.13
	MLWorks_Beta_1996_06_03:1.13
	MLWorks_Beta_1996_05_31:1.13
	MLWorks_Beta_1996_05_30:1.13
	ML_beta_release_12/08/94:1.8
	ML_beta_release_03/08/94:1.8
	ML_revised_beta_release_25/05/94:1.8
	ML_final_beta_release_02/03/94:1.8
	mlworks-28-01-1994:1.7
	Release:1.4
	mlworks-beta-01-09-1993:1.4;
locks; strict;
comment	@ * @;


1.18
date	97.05.19.12.58.23;	author jont;	state Exp;
branches
	1.18.1.1
	1.18.2.1
	1.18.3.1;
next	1.17;

1.17
date	96.10.29.14.04.53;	author io;	state Exp;
branches
	1.17.1.1
	1.17.2.1
	1.17.3.1
	1.17.4.1
	1.17.5.1;
next	1.16;

1.16
date	96.09.25.17.39.51;	author andreww;	state Exp;
branches
	1.16.1.1;
next	1.15;

1.15
date	96.09.03.17.44.53;	author andreww;	state Exp;
branches
	1.15.1.1;
next	1.14;

1.14
date	96.08.05.16.35.00;	author andreww;	state Exp;
branches
	1.14.1.1;
next	1.13;

1.13
date	96.04.30.16.03.51;	author jont;	state Exp;
branches;
next	1.12;

1.12
date	96.03.28.15.07.44;	author matthew;	state Exp;
branches;
next	1.11;

1.11
date	96.03.25.16.57.49;	author matthew;	state Exp;
branches;
next	1.10;

1.10
date	95.08.31.13.42.53;	author jont;	state Exp;
branches;
next	1.9;

1.9
date	94.09.14.12.28.26;	author matthew;	state Exp;
branches;
next	1.8;

1.8
date	94.02.21.22.50.06;	author nosa;	state Exp;
branches;
next	1.7;

1.7
date	93.12.03.17.10.22;	author nickh;	state Exp;
branches;
next	1.6;

1.6
date	93.11.25.09.36.57;	author matthew;	state Exp;
branches;
next	1.5;

1.5
date	93.08.12.11.43.04;	author nosa;	state Exp;
branches;
next	1.4;

1.4
date	93.08.06.14.28.43;	author matthew;	state Exp;
branches
	1.4.1.1;
next	1.3;

1.3
date	93.07.02.16.50.00;	author daveb;	state Exp;
branches;
next	1.2;

1.2
date	93.05.20.12.46.37;	author matthew;	state Exp;
branches;
next	1.1;

1.1
date	93.05.11.11.17.45;	author matthew;	state Exp;
branches;
next	;

1.4.1.1
date	93.08.06.14.28.43;	author jont;	state Exp;
branches;
next	;

1.14.1.1
date	96.09.13.11.41.55;	author hope;	state Exp;
branches;
next	;

1.15.1.1
date	96.10.07.16.35.00;	author hope;	state Exp;
branches;
next	;

1.16.1.1
date	96.10.17.11.54.06;	author hope;	state Exp;
branches;
next	;

1.17.1.1
date	96.11.14.13.21.59;	author hope;	state Exp;
branches
	1.17.1.1.1.1;
next	;

1.17.1.1.1.1
date	96.11.28.15.32.48;	author hope;	state Exp;
branches;
next	;

1.17.2.1
date	96.11.22.18.39.28;	author hope;	state Exp;
branches;
next	;

1.17.3.1
date	96.12.17.18.18.29;	author hope;	state Exp;
branches
	1.17.3.1.1.1;
next	;

1.17.3.1.1.1
date	97.02.24.12.12.45;	author hope;	state Exp;
branches;
next	;

1.17.4.1
date	96.12.18.10.13.47;	author hope;	state Exp;
branches;
next	;

1.17.5.1
date	97.05.12.10.52.02;	author hope;	state Exp;
branches
	1.17.5.1.1.1
	1.17.5.1.2.1
	1.17.5.1.3.1;
next	;

1.17.5.1.1.1
date	97.07.28.18.33.49;	author daveb;	state Exp;
branches
	1.17.5.1.1.1.1.1;
next	;

1.17.5.1.1.1.1.1
date	97.10.07.11.59.49;	author jkbrook;	state Exp;
branches;
next	;

1.17.5.1.2.1
date	97.09.08.17.26.55;	author daveb;	state Exp;
branches;
next	;

1.17.5.1.3.1
date	97.09.09.14.23.47;	author daveb;	state Exp;
branches;
next	;

1.18.1.1
date	97.09.10.19.42.45;	author brucem;	state Exp;
branches;
next	;

1.18.2.1
date	97.09.11.21.10.14;	author daveb;	state Exp;
branches;
next	;

1.18.3.1
date	99.04.01.18.08.47;	author daveb;	state Exp;
branches;
next	;


desc
@Type debugger utilities.
@


1.18
log
@[Bug #30090]
Translate output std_out to print
@
text
@(* _type_debugger.sml. Utilities for type checking information *)
(*
* $Log: _type_debugger.sml,v $
 * Revision 1.17  1996/10/29  14:04:53  io
 * [Bug #1614]
 * basifying String
 *
 * Revision 1.16  1996/09/25  17:39:51  andreww
 * [Bug #1592]
 * threading location into Absyn.LOCALexp.
 *
 * Revision 1.15  1996/09/03  17:44:53  andreww
 * [Bug #1577]
 * Adding typechecking rules for datatype replication.
 *
 * Revision 1.14  1996/08/05  16:35:00  andreww
 * [Bug #1521]
 * Propagating changes made to _types.sml
 *
 * Revision 1.13  1996/04/30  16:03:51  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
 * Revision 1.12  1996/03/28  15:07:44  matthew
 * Absyn changes
 *
 * Revision 1.11  1996/03/25  16:57:49  matthew
 * Change to VALdec
 *
 * Revision 1.10  1995/08/31  13:42:53  jont
 * Add location info to wild pats
 *
Revision 1.9  1994/09/14  12:28:26  matthew
Abstraction of debug information

Revision 1.8  1994/02/21  22:50:06  nosa
Type function, debugger structure, and structure recording for Modules Debugger.

Revision 1.7  1993/12/03  17:10:22  nickh
Remove TYNAME, fix substitution reference, remove old debugging code,
tidy up comments.

Revision 1.6  1993/11/25  09:36:57  matthew
Added absyn annotations

Revision 1.5  1993/08/12  11:43:04  nosa
Runtime-instance in VALpats and LAYEREDpats and Compilation-instance
in VALexps for polymorphic debugger.

Revision 1.4  1993/08/06  14:28:43  matthew
Added location information to matches

Revision 1.3  1993/07/02  16:50:00  daveb
Added field to some topdecs to indicate when signature matching is required
to match an exception against a value specification.

Revision 1.2  1993/05/20  12:46:37  matthew
Added code for abstractions.

Revision 1.1  1993/05/11  11:17:45  matthew
Initial revision

*
* Copyright (c) 1993 Harlequin Ltd.
*)

require "../utils/lists";
require "../basics/absyn";
require "../basics/identprint";
require "types";

require "type_debugger";

functor TypeDebugger (structure Lists : LISTS
                      structure Types : TYPES
                      structure Absyn : ABSYN
                      structure IdentPrint : IDENTPRINT

                      sharing Types.Options = IdentPrint.Options
                      sharing IdentPrint.Ident = Absyn.Ident
                      sharing type Absyn.Type = Types.Datatypes.Type
                      ) : TYPE_DEBUGGER =
  struct
    structure Ident = Absyn.Ident
    structure Location = Ident.Location
    structure Options = IdentPrint.Options
    structure Absyn = Absyn

    fun gather_vartypes absyn_tree =
      let
        open Absyn
        fun do_id ((Ident.LONGVALID (_,var as Ident.VAR _),ty,loc),acc) =
          (var,ty,loc) :: acc
          | do_id (_,acc) = acc
        fun gather_pat (WILDpat _,acc) = acc
          | gather_pat (SCONpat _, acc) = acc
          | gather_pat (VALpat ((id,(ref ty,_)),loc), acc) =
            do_id ((id,ty,loc),acc)
          | gather_pat (RECORDpat (labpatlist,_,_),acc) =
            Lists.reducel
            (fn (acc,(lab,pat)) => gather_pat(pat,acc))
            (acc,labpatlist)
          | gather_pat (APPpat(id,pat,loc,_),acc) =
            gather_pat (pat,acc)
          | gather_pat (TYPEDpat (pat,ty,loc),acc) =
            gather_pat (pat,acc)
          | gather_pat (LAYEREDpat ((id,(ref ty,_)), pat), acc) =
            gather_pat (pat,(id,ty,Location.UNKNOWN) :: acc)
        fun gather_dec (VALdec (l1,l2,_,_),acc) =
          let
            fun do_one (acc,(pat,exp,_)) = gather_pat (pat,(gather_exp (exp,acc)))
          in
            Lists.reducel do_one (Lists.reducel do_one (acc,l1), l2)
          end
          | gather_dec (TYPEdec _,acc) = acc
          | gather_dec (DATATYPEdec _,acc) = acc
          | gather_dec (DATATYPErepl _,acc) = acc
          | gather_dec (ABSTYPEdec (_,_,dec),acc) = gather_dec(dec,acc)
          | gather_dec (EXCEPTIONdec _,acc) = acc
          | gather_dec (LOCALdec(dec,dec'),acc) =
            gather_dec (dec',gather_dec(dec,acc))
          | gather_dec (OPENdec _, acc) = acc
          | gather_dec (SEQUENCEdec declist,acc) =
            Lists.reducel (fn (acc,dec) => gather_dec(dec,acc)) (acc,declist)
        and gather_exp (SCONexp _,acc) = acc
          | gather_exp (VALexp _,acc) = acc
          | gather_exp (RECORDexp labexplist,acc) =
            Lists.reducel (fn (acc,(lab,exp)) => gather_exp (exp,acc)) (acc,labexplist)
          | gather_exp (LOCALexp (dec,exp,_),acc) =
            gather_exp (exp, gather_dec (dec,acc))
          | gather_exp (APPexp (exp,exp',_,_,_), acc) =
            gather_exp (exp', gather_exp (exp,acc))
          | gather_exp (TYPEDexp (exp,_,_),acc) = gather_exp (exp,acc)
          | gather_exp (HANDLEexp (exp,_,patexplist,_,_),acc) =
            Lists.reducel
            (fn (acc,(pat,exp,_)) => gather_exp(exp,gather_pat(pat,acc)))
            (gather_exp (exp,acc),patexplist)
          | gather_exp (RAISEexp (exp,_),acc) =
            gather_exp (exp,acc)
          | gather_exp (FNexp (patexplist,_,_,_),acc) =
            Lists.reducel
            (fn (acc,(pat,exp,_)) => gather_exp(exp,gather_pat(pat,acc)))
            (acc,patexplist)
          | gather_exp (DYNAMICexp (exp,_,_),acc) =
            gather_exp (exp,acc)
          | gather_exp (COERCEexp (exp,_,_,_),acc) =
            gather_exp (exp,acc)
          | gather_exp (MLVALUEexp _,acc) = acc
        fun gather_strexp (NEWstrexp strdec,acc) = gather_strdec (strdec,acc)
          | gather_strexp (OLDstrexp _,acc) = acc
          | gather_strexp (APPstrexp (_,strexp,_,_,_),acc) = gather_strexp (strexp,acc)
          | gather_strexp (LOCALstrexp(strdec,strexp),acc) =
            gather_strexp (strexp,gather_strdec (strdec,acc))
          | gather_strexp (CONSTRAINTstrexp (strexp,sigexp,abs,_,_),acc) =
            gather_strexp (strexp,acc)
        and gather_strdec (DECstrdec dec,acc) = gather_dec (dec,acc)
          | gather_strdec (STRUCTUREstrdec l,acc) =
            Lists.reducel
            (fn (acc,(_,_,strexp,_,_,_,_)) => gather_strexp (strexp,acc))
            (acc,l)
          | gather_strdec (ABSTRACTIONstrdec l,acc) =
            Lists.reducel
            (fn (acc,(_,_,strexp,_,_,_,_)) => gather_strexp (strexp,acc))
            (acc,l)
          | gather_strdec (LOCALstrdec (strdec,strdec'),acc) =
            gather_strdec (strdec',(gather_strdec (strdec,acc)))
          | gather_strdec (SEQUENCEstrdec l,acc) =
            Lists.reducel (fn (acc,strdec) => gather_strdec(strdec,acc)) (acc,l)
        fun gather_topdec (STRDECtopdec (strdec,_),acc) =
          gather_strdec (strdec,acc)
          | gather_topdec (FUNCTORtopdec (funbind_list,_),acc) =
            Lists.reducel
            (fn (acc,FUNBIND l) =>
             (Lists.reducel
              (fn (acc,(_,_,_,strexp,_,_,_,_,_,_)) =>
               gather_strexp(strexp,acc))
               (acc,l)))
            (acc,funbind_list)
          | gather_topdec (_,acc) = acc
      in
        rev (gather_topdec (absyn_tree,[]))
      end

    fun print_vartypes options l =
      let
        val Options.OPTIONS{print_options,...} = options
        val print_id = IdentPrint.printValId print_options
        val print_type = Types.print_type options
      in
        app
        (fn (id,ty,loc) =>
         print(concat[print_id id,
		      ": ",
		      print_type ty,
		      " [", Location.to_string loc,"]",
		      "\n"]))
        l
      end
  end

@


1.18.3.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a3 4
 * Revision 1.18  1997/05/19  12:58:23  jont
 * [Bug #30090]
 * Translate output std_out to print
 *
@


1.18.2.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a3 4
 * Revision 1.18  1997/05/19  12:58:23  jont
 * [Bug #30090]
 * Translate output std_out to print
 *
@


1.18.1.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a3 4
 * Revision 1.18  1997/05/19  12:58:23  jont
 * [Bug #30090]
 * Translate output std_out to print
 *
@


1.17
log
@[Bug #1614]
basifying String
@
text
@d4 4
d194 5
a198 6
         MLWorks.IO.output(MLWorks.IO.std_out,
                concat[print_id id,
                        ": ",
                        print_type ty,
                        " [", Location.to_string loc,"]",
                        "\n"]))
@


1.17.5.1
log
@branched from 1.17
@
text
@a3 4
 * Revision 1.17  1996/10/29  14:04:53  io
 * [Bug #1614]
 * basifying String
 *
@


1.17.5.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a3 3
 * Revision 1.17.5.1  1997/05/12  10:52:02  hope
 * branched from 1.17
 *
@


1.17.5.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a3 3
 * Revision 1.17.5.1  1997/05/12  10:52:02  hope
 * branched from 1.17
 *
@


1.17.5.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a3 3
 * Revision 1.17.5.1  1997/05/12  10:52:02  hope
 * branched from 1.17
 *
@


1.17.5.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a3 3
 * Revision 1.17.5.1.1.1  1997/07/28  18:33:49  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.17.4.1
log
@branched from 1.17
@
text
@a3 4
 * Revision 1.17  1996/10/29  14:04:53  io
 * [Bug #1614]
 * basifying String
 *
@


1.17.3.1
log
@branched from 1.17
@
text
@a3 4
 * Revision 1.17  1996/10/29  14:04:53  io
 * [Bug #1614]
 * basifying String
 *
@


1.17.3.1.1.1
log
@branched from 1.17.3.1
@
text
@a3 3
 * Revision 1.17.3.1  1996/12/17  18:18:29  hope
 * branched from 1.17
 *
@


1.17.2.1
log
@branched from 1.17
@
text
@a3 4
 * Revision 1.17  1996/10/29  14:04:53  io
 * [Bug #1614]
 * basifying String
 *
@


1.17.1.1
log
@branched from 1.17
@
text
@a3 4
 * Revision 1.17  1996/10/29  14:04:53  io
 * [Bug #1614]
 * basifying String
 *
@


1.17.1.1.1.1
log
@branched from 1.17.1.1
@
text
@a3 3
 * Revision 1.17.1.1  1996/11/14  13:21:59  hope
 * branched from 1.17
 *
@


1.16
log
@[Bug #1592]
threading location into Absyn.LOCALexp.
@
text
@d4 4
d188 1
a188 1
        Lists.iterate
d191 1
a191 1
                String.implode[print_id id,
@


1.16.1.1
log
@branched from 1.16
@
text
@a3 4
 * Revision 1.16  1996/09/25  17:39:51  andreww
 * [Bug #1592]
 * threading location into Absyn.LOCALexp.
 *
@


1.15
log
@[Bug #1577]
Adding typechecking rules for datatype replication.
@
text
@d4 4
d123 1
a123 1
          | gather_exp (LOCALexp (dec,exp),acc) =
@


1.15.1.1
log
@branched from 1.15
@
text
@a3 4
 * Revision 1.15  1996/09/03  17:44:53  andreww
 * [Bug #1577]
 * Adding typechecking rules for datatype replication.
 *
@


1.14
log
@[Bug #1521]
Propagating changes made to _types.sml
@
text
@d4 4
d107 1
@


1.14.1.1
log
@branched from 1.14
@
text
@a3 4
 * Revision 1.14  1996/08/05  16:35:00  andreww
 * [Bug #1521]
 * Propagating changes made to _types.sml
 *
@


1.13
log
@String functions explode, implode, chr and ord now only available from String
io functions and types
instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
now only available from MLWorks.IO
@
text
@d4 6
d171 2
a172 1
        val print_id = IdentPrint.printValId options
@


1.12
log
@Absyn changes
@
text
@d4 3
d170 2
a171 2
         output(std_out,
                implode[print_id id,
@


1.11
log
@Change to VALdec
@
text
@d4 3
d130 1
a130 1
          | gather_strexp (CONSTRAINTstrexp (strexp,sigexp,abs,_),acc) =
@


1.10
log
@Add location info to wild pats
@
text
@d4 3
d83 1
a83 1
        fun gather_dec (VALdec (l1,l2,_),acc) =
d127 2
@


1.9
log
@Abstraction of debug information
@
text
@d4 3
d66 1
a66 1
        fun gather_pat (WILDpat,acc) = acc
@


1.8
log
@Type function, debugger structure, and structure recording for Modules Debugger.
@
text
@d4 3
d65 1
a65 1
          | gather_pat (VALpat ((id,ref (ty,_,_)),loc), acc) =
d75 1
a75 1
          | gather_pat (LAYEREDpat ((id,ref (ty,_,_)), pat), acc) =
@


1.7
log
@Remove TYNAME, fix substitution reference, remove old debugging code,
tidy up comments.
@
text
@d4 4
d62 1
a62 1
          | gather_pat (VALpat ((id,ref (ty,_)),loc), acc) =
d72 1
a72 1
          | gather_pat (LAYEREDpat ((id,ref (ty,_)), pat), acc) =
d115 1
a115 1
          | gather_strexp (APPstrexp (_,strexp,_,_),acc) = gather_strexp (strexp,acc)
d121 1
a121 1
            (fn (acc,(_,_,strexp,_,_)) => gather_strexp (strexp,acc))
d125 1
a125 1
            (fn (acc,(_,_,strexp,_,_)) => gather_strexp (strexp,acc))
d137 1
a137 1
              (fn (acc,(_,_,_,strexp,_,_,_,_)) =>
@


1.6
log
@Added absyn annotations
@
text
@d4 3
d106 1
a106 1
          | gather_exp (COERCEexp (exp,_,_),acc) =
@


1.5
log
@Runtime-instance in VALpats and LAYEREDpats and Compilation-instance
in VALexps for polymorphic debugger.
@
text
@d4 4
d61 1
a61 1
          | gather_pat (APPpat(id,pat,loc),acc) =
d88 1
a88 1
          | gather_exp (APPexp (exp,exp',_,_), acc) =
@


1.4
log
@Added location information to matches
@
text
@d4 3
d51 1
a51 1
          | gather_pat (VALpat ((id,ref ty),loc), acc) =
d61 1
a61 1
          | gather_pat (LAYEREDpat ((id,ref ty), pat), acc) =
@


1.4.1.1
log
@Fork for bug fixing
@
text
@a3 3
Revision 1.4  1993/08/06  14:28:43  matthew
Added location information to matches

@


1.3
log
@Added field to some topdecs to indicate when signature matching is required
to match an exception against a value specification.
@
text
@d4 4
d86 1
a86 1
            (fn (acc,(pat,exp)) => gather_exp(exp,gather_pat(pat,acc)))
d92 1
a92 1
            (fn (acc,(pat,exp)) => gather_exp(exp,gather_pat(pat,acc)))
@


1.2
log
@Added code for abstractions.
@
text
@d4 3
d97 1
a97 1
          | gather_strexp (APPstrexp (_,strexp,_),acc) = gather_strexp (strexp,acc)
d103 1
a103 1
            (fn (acc,(_,_,strexp,_)) => gather_strexp (strexp,acc))
d107 1
a107 1
            (fn (acc,(_,_,strexp,_)) => gather_strexp (strexp,acc))
d119 1
a119 1
              (fn (acc,(_,_,_,strexp,_,_,_)) =>
@


1.1
log
@Initial revision
@
text
@d4 3
d99 4
@
