head	1.9;
access;
symbols
	MLW_daveb_inline_1_4_99:1.9.8
	MLWorks_21c0_1999_03_25:1.9
	MLWorks_20c1_1998_08_20:1.9
	MLWorks_20c0_1998_08_04:1.9
	MLWorks_20b2c2_1998_06_19:1.9
	MLWorks_20b2_Windows_1998_06_12:1.9
	MLWorks_20b1c1_1998_05_07:1.9
	MLWorks_20b0_1998_04_07:1.9
	MLWorks_20b0_1998_03_20:1.9
	MLWorks_20m2_1998_02_16:1.9
	MLWorks_20m1_1997_10_23:1.9
	MLWorks_11r1:1.9.5.1.1.1.1
	MLWorks_workspace_97:1.9.7
	MLWorks_dt_wizard:1.9.6
	MLWorks_11c0_1997_09_09:1.9.5.1.1.1
	MLWorks_10r3:1.9.5.1.3
	MLWorks_10r2_551:1.9.5.1.2
	MLWorks_11:1.9.5.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.9.5.1
	MLWorks_20m0_1997_06_20:1.9
	MLWorks_1_0_r2c2_1997_06_14:1.9.5.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.9.5.1
	MLWorks_1_0_r2c1_1997_05_12:1.9.5
	MLWorks_BugFix_1997_04_24:1.9
	MLWorks_1_0_r2_Win32_1997_04_11:1.9
	MLWorks_1_0_r2_Unix_1997_04_04:1.9
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.9.3.1.1
	MLWorks_gui_1996_12_18:1.9.4
	MLWorks_1_0_Win32_1996_12_17:1.9.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.9.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.9.1.1
	MLWorks_1_0_Irix_1996_11_28:1.9.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.9.2
	MLWorks_1_0_Unix_1996_11_14:1.9.1
	MLWorks_Open_Beta2_1996_10_11:1.8.3
	MLWorks_License_dev:1.8.2
	MLWorks_1_open_beta_1996_09_13:1.8.1
	MLWorks_Open_Beta_1996_08_22:1.8
	MLWorks_Beta_1996_07_02:1.8
	MLWorks_Beta_1996_06_07:1.8
	MLWorks_Beta_1996_06_06:1.8
	MLWorks_Beta_1996_06_05:1.8
	MLWorks_Beta_1996_06_03:1.8
	MLWorks_Beta_1996_05_31:1.8
	MLWorks_Beta_1996_05_30:1.8
	ML_beta_release_12/08/94:1.6
	ML_beta_release_03/08/94:1.6
	ML_revised_beta_release_25/05/94:1.6
	ML_final_beta_release_02/03/94:1.5
	mlworks-28-01-1994:1.5
	Release:1.4
	mlworks-beta-01-09-1993:1.4
	MLWorks-1-0-4-29/01/1993:1.2
	MLWorks-1-0-3-21/12/1992:1.1
	MLWorks-1-0-2-15/12/1992:1.1
	MLWorks-1-0-1-04/12/1992:1.1
	checkpoint_17_08_92:1.1;
locks; strict;
comment	@ * @;


1.9
date	96.10.29.13.42.07;	author io;	state Exp;
branches
	1.9.1.1
	1.9.2.1
	1.9.3.1
	1.9.4.1
	1.9.5.1
	1.9.6.1
	1.9.7.1
	1.9.8.1;
next	1.8;

1.8
date	96.04.30.15.19.39;	author jont;	state Exp;
branches
	1.8.1.1
	1.8.2.1
	1.8.3.1;
next	1.7;

1.7
date	95.03.24.14.54.20;	author matthew;	state Exp;
branches;
next	1.6;

1.6
date	94.05.05.13.50.03;	author daveb;	state Exp;
branches;
next	1.5;

1.5
date	93.08.16.10.35.53;	author nosa;	state Exp;
branches;
next	1.4;

1.4
date	93.07.09.12.34.31;	author nosa;	state Exp;
branches
	1.4.1.1;
next	1.3;

1.3
date	93.03.02.16.42.26;	author matthew;	state Exp;
branches;
next	1.2;

1.2
date	92.12.07.16.38.48;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	92.04.22.19.17.18;	author jont;	state Exp;
branches;
next	;

1.4.1.1
date	93.07.09.12.34.31;	author jont;	state Exp;
branches;
next	;

1.8.1.1
date	96.09.13.11.41.17;	author hope;	state Exp;
branches;
next	;

1.8.2.1
date	96.10.07.16.34.19;	author hope;	state Exp;
branches;
next	;

1.8.3.1
date	96.10.17.11.53.28;	author hope;	state Exp;
branches;
next	;

1.9.1.1
date	96.11.14.13.21.03;	author hope;	state Exp;
branches
	1.9.1.1.1.1;
next	;

1.9.1.1.1.1
date	96.11.28.15.32.05;	author hope;	state Exp;
branches;
next	;

1.9.2.1
date	96.11.22.18.38.49;	author hope;	state Exp;
branches;
next	;

1.9.3.1
date	96.12.17.18.17.50;	author hope;	state Exp;
branches
	1.9.3.1.1.1;
next	;

1.9.3.1.1.1
date	97.02.24.12.12.06;	author hope;	state Exp;
branches;
next	;

1.9.4.1
date	96.12.18.10.13.06;	author hope;	state Exp;
branches;
next	;

1.9.5.1
date	97.05.12.10.51.24;	author hope;	state Exp;
branches
	1.9.5.1.1.1
	1.9.5.1.2.1
	1.9.5.1.3.1;
next	;

1.9.5.1.1.1
date	97.07.28.18.34.48;	author daveb;	state Exp;
branches
	1.9.5.1.1.1.1.1;
next	;

1.9.5.1.1.1.1.1
date	97.10.07.12.00.35;	author jkbrook;	state Exp;
branches;
next	;

1.9.5.1.2.1
date	97.09.08.17.27.38;	author daveb;	state Exp;
branches;
next	;

1.9.5.1.3.1
date	97.09.09.14.24.39;	author daveb;	state Exp;
branches;
next	;

1.9.6.1
date	97.09.10.19.43.35;	author brucem;	state Exp;
branches;
next	;

1.9.7.1
date	97.09.11.21.10.59;	author daveb;	state Exp;
branches;
next	;

1.9.8.1
date	99.04.01.18.09.11;	author daveb;	state Exp;
branches;
next	;


desc
@Hashing for types, strnames, tyfuns and tynames
@


1.9
log
@[Bug #1614]
basifying String
@
text
@(* _namehash.sml the functor *)
(*
$Log: _namehash.sml,v $
 * Revision 1.8  1996/04/30  15:19:39  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
 * Revision 1.7  1995/03/24  14:54:20  matthew
 * Use Stamp instead of Tyname_id etc.
 *
Revision 1.6  1994/05/05  13:50:03  daveb
META_OVERLOADED has an extra argument.

Revision 1.5  1993/08/16  10:35:53  nosa
Instances for METATYVARs and TYVARs and in schemes for polymorphic debugger.

Revision 1.4  1993/07/09  12:34:31  nosa
Changed type of constructor NULL_TYFUN for value printing in
local and closure variable inspection in the debugger.

Revision 1.3  1993/03/02  16:42:26  matthew
DataTypes to Datatypes
Changed use of Mapping to use of Types structure

Revision 1.2  1992/12/07  16:38:48  jont
Anel's last changes

Revision 1.1  1992/04/22  19:17:18  jont
Initial revision

Copyright (c) 1992 Harlequin Ltd.
*)

require "^.utils.lists";
require "^.typechecker.types";
require "^.typechecker.namehash";

functor NameHash(
  structure Lists : LISTS
  structure Types : TYPES
                 ) : NAMEHASH =
  struct
    structure Datatypes = Types.Datatypes
    structure Ident = Datatypes.Ident

    fun sy_hash (str:string):int = Lists.reducel (fn (x,y)=>x+ord y) (size str, explode str)

    fun strname_hash(Datatypes.STRNAME id) =
      3 + Types.stamp_num id
    | strname_hash(Datatypes.NULLNAME id) =
      5 + Types.stamp_num id
    | strname_hash(Datatypes.METASTRNAME(ref s)) = strname_hash s

    fun tyname_hash(Datatypes.TYNAME{1=id, ...}) =
      3 + Types.stamp_num id
    | tyname_hash(Datatypes.METATYNAME{1=ref(Datatypes.ETA_TYFUN tyname),
				       ...}) =
      tyname_hash tyname
    | tyname_hash(Datatypes.METATYNAME{1=ref tyfun, ...}) =
      tyfun_hash tyfun

    and tyfun_hash(Datatypes.TYFUN(ty, _)) = type_hash ty
    | tyfun_hash(Datatypes.ETA_TYFUN tyname) = tyname_hash tyname
    | tyfun_hash(Datatypes.NULL_TYFUN (id,_)) = 5 + Types.stamp_num id

    and type_hash(Datatypes.METATYVAR(ref(_, ty,_), _, _)) = type_hash ty
    | type_hash(Datatypes.META_OVERLOADED {1=ref ty,...}) = type_hash ty
    | type_hash(Datatypes.TYVAR(_, Datatypes.Ident.TYVAR(sy, _, _))) =
      7 + sy_hash(Ident.Symbol.symbol_name sy)
    | type_hash(Datatypes.METARECTYPE(ref{3=ty, ...})) = type_hash ty
    | type_hash(ty as Datatypes.RECTYPE _) =
      let
	val domain = Types.rectype_domain ty
      in
	Lists.reducel
	(fn (x, Ident.LAB y) => x +
	 sy_hash(Ident.Symbol.symbol_name y))
	(11 + length domain, domain)
      end
    | type_hash(Datatypes.FUNTYPE(ty, ty')) =
      type_hash ty + type_hash ty'
    | type_hash(Datatypes.CONSTYPE(_, tyname)) = tyname_hash tyname
    | type_hash(Datatypes.DEBRUIJN _) = 13
    | type_hash Datatypes.NULLTYPE = 17
  end
@


1.9.8.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a3 4
 * Revision 1.9  1996/10/29  13:42:07  io
 * [Bug #1614]
 * basifying String
 *
@


1.9.7.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a3 4
 * Revision 1.9  1996/10/29  13:42:07  io
 * [Bug #1614]
 * basifying String
 *
@


1.9.6.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a3 4
 * Revision 1.9  1996/10/29  13:42:07  io
 * [Bug #1614]
 * basifying String
 *
@


1.9.5.1
log
@branched from 1.9
@
text
@a3 4
 * Revision 1.9  1996/10/29  13:42:07  io
 * [Bug #1614]
 * basifying String
 *
@


1.9.5.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a3 3
 * Revision 1.9.5.1  1997/05/12  10:51:24  hope
 * branched from 1.9
 *
@


1.9.5.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a3 3
 * Revision 1.9.5.1  1997/05/12  10:51:24  hope
 * branched from 1.9
 *
@


1.9.5.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a3 3
 * Revision 1.9.5.1  1997/05/12  10:51:24  hope
 * branched from 1.9
 *
@


1.9.5.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a3 3
 * Revision 1.9.5.1.1.1  1997/07/28  18:34:48  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.9.4.1
log
@branched from 1.9
@
text
@a3 4
 * Revision 1.9  1996/10/29  13:42:07  io
 * [Bug #1614]
 * basifying String
 *
@


1.9.3.1
log
@branched from 1.9
@
text
@a3 4
 * Revision 1.9  1996/10/29  13:42:07  io
 * [Bug #1614]
 * basifying String
 *
@


1.9.3.1.1.1
log
@branched from 1.9.3.1
@
text
@a3 3
 * Revision 1.9.3.1  1996/12/17  18:17:50  hope
 * branched from 1.9
 *
@


1.9.2.1
log
@branched from 1.9
@
text
@a3 4
 * Revision 1.9  1996/10/29  13:42:07  io
 * [Bug #1614]
 * basifying String
 *
@


1.9.1.1
log
@branched from 1.9
@
text
@a3 4
 * Revision 1.9  1996/10/29  13:42:07  io
 * [Bug #1614]
 * basifying String
 *
@


1.9.1.1.1.1
log
@branched from 1.9.1.1
@
text
@a3 3
 * Revision 1.9.1.1  1996/11/14  13:21:03  hope
 * branched from 1.9
 *
@


1.8
log
@String functions explode, implode, chr and ord now only available from String
io functions and types
instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
now only available from MLWorks.IO
@
text
@d4 6
d36 3
a38 3
require "../utils/lists";
require "../typechecker/types";
require "../typechecker/namehash";
d48 1
a48 4
    fun sy_hash str =
      Lists.reducel
      (fn (x, y) => x + String.ord y)
      (size str, String.explode str)
d80 1
a80 1
	(11 + Lists.length domain, domain)
@


1.8.3.1
log
@branched from 1.8
@
text
@a3 6
 * Revision 1.8  1996/04/30  15:19:39  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
@


1.8.2.1
log
@branched from 1.8
@
text
@a3 6
 * Revision 1.8  1996/04/30  15:19:39  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
@


1.8.1.1
log
@branched from 1.8
@
text
@a3 6
 * Revision 1.8  1996/04/30  15:19:39  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
@


1.7
log
@Use Stamp instead of Tyname_id etc.
@
text
@d4 3
d44 2
a45 2
      (fn (x, y) => x + ord y)
      (size str, explode str)
@


1.6
log
@META_OVERLOADED has an extra argument.
@
text
@d4 3
d37 1
d45 1
a45 1
      3 + Datatypes.Strname_id.strname_id id
d47 1
a47 1
      5 + Datatypes.Strname_id.strname_id id
d51 1
a51 1
      3 + Datatypes.Tyname_id.tyname_id id
d60 1
a60 1
    | tyfun_hash(Datatypes.NULL_TYFUN (id,_)) = 5 + Datatypes.Tyfun_id.tyfun_id id
d65 1
a65 1
      7 + sy_hash(Datatypes.Ident.Symbol.symbol_name sy)
d72 2
a73 2
	(fn (x, Datatypes.Ident.LAB y) => x +
	 sy_hash(Datatypes.Ident.Symbol.symbol_name y))
@


1.5
log
@Instances for METATYVARs and TYVARs and in schemes for polymorphic debugger.
@
text
@d4 3
d59 1
a59 1
    | type_hash(Datatypes.META_OVERLOADED(ref ty,_)) = type_hash ty
@


1.4
log
@Changed type of constructor NULL_TYFUN for value printing in
local and closure variable inspection in the debugger.
@
text
@d4 4
d55 1
a55 1
    and type_hash(Datatypes.METATYVAR(ref(_, ty), _, _)) = type_hash ty
@


1.4.1.1
log
@Fork for bug fixing
@
text
@a3 4
Revision 1.4  1993/07/09  12:34:31  nosa
Changed type of constructor NULL_TYFUN for value printing in
local and closure variable inspection in the debugger.

@


1.3
log
@DataTypes to Datatypes
Changed use of Mapping to use of Types structure
@
text
@d4 4
d49 1
a49 1
    | tyfun_hash(Datatypes.NULL_TYFUN id) = 5 + Datatypes.Tyfun_id.tyfun_id id
@


1.2
log
@Anel's last changes
@
text
@d4 3
d14 1
a14 1
require "../typechecker/datatypes";
d19 2
a20 2
  structure DataTypes : DATATYPES
) : NAMEHASH =
d22 1
a22 1
    structure DataTypes = DataTypes
d29 9
a37 9
    fun strname_hash(DataTypes.STRNAME id) =
      3 + DataTypes.Strname_id.strname_id id
    | strname_hash(DataTypes.NULLNAME id) =
      5 + DataTypes.Strname_id.strname_id id
    | strname_hash(DataTypes.METASTRNAME(ref s)) = strname_hash s

    fun tyname_hash(DataTypes.TYNAME{1=id, ...}) =
      3 + DataTypes.Tyname_id.tyname_id id
    | tyname_hash(DataTypes.METATYNAME{1=ref(DataTypes.ETA_TYFUN tyname),
d40 1
a40 1
    | tyname_hash(DataTypes.METATYNAME{1=ref tyfun, ...}) =
d43 10
a52 10
    and tyfun_hash(DataTypes.TYFUN(ty, _)) = type_hash ty
    | tyfun_hash(DataTypes.ETA_TYFUN tyname) = tyname_hash tyname
    | tyfun_hash(DataTypes.NULL_TYFUN id) = 5 + DataTypes.Tyfun_id.tyfun_id id

    and type_hash(DataTypes.METATYVAR(ref(_, ty), _, _)) = type_hash ty
    | type_hash(DataTypes.META_OVERLOADED(ref ty,_)) = type_hash ty
    | type_hash(DataTypes.TYVAR(_, DataTypes.Ident.TYVAR(sy, _, _))) =
      7 + sy_hash(DataTypes.Ident.Symbol.symbol_name sy)
    | type_hash(DataTypes.METARECTYPE(ref{3=ty, ...})) = type_hash ty
    | type_hash(DataTypes.RECTYPE mapping) =
d54 1
a54 1
	val assoc = DataTypes.Mapping.assoc mapping
d57 3
a59 3
	(fn (x, (DataTypes.Ident.LAB y, _)) => x +
	 sy_hash(DataTypes.Ident.Symbol.symbol_name y))
	(11 + Lists.length assoc, assoc)
d61 1
a61 1
    | type_hash(DataTypes.FUNTYPE(ty, ty')) =
d63 3
a65 3
    | type_hash(DataTypes.CONSTYPE(_, tyname)) = tyname_hash tyname
    | type_hash(DataTypes.DEBRUIJN _) = 13
    | type_hash DataTypes.NULLTYPE = 17
@


1.1
log
@Initial revision
@
text
@d3 4
a6 1
$Log$
d45 1
a45 1
    | type_hash(DataTypes.META_OVERLOADED(ref ty)) = type_hash ty
@
