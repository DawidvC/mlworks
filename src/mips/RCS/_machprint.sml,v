head	1.10;
access;
symbols
	MLW_daveb_inline_1_4_99:1.10.1
	MLWorks_21c0_1999_03_25:1.10
	MLWorks_20c1_1998_08_20:1.10
	MLWorks_20c0_1998_08_04:1.10
	MLWorks_20b2c2_1998_06_19:1.10
	MLWorks_20b2_Windows_1998_06_12:1.10
	MLWorks_20b1c1_1998_05_07:1.10
	MLWorks_20b0_1998_04_07:1.9
	MLWorks_20b0_1998_03_20:1.9
	MLWorks_20m2_1998_02_16:1.9
	MLWorks_20m1_1997_10_23:1.9
	MLWorks_11r1:1.8.5.1.1.1.1
	MLWorks_workspace_97:1.9.2
	MLWorks_dt_wizard:1.9.1
	MLWorks_11c0_1997_09_09:1.8.5.1.1.1
	MLWorks_10r3:1.8.5.1.3
	MLWorks_10r2_551:1.8.5.1.2
	MLWorks_11:1.8.5.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.8.5.1
	MLWorks_20m0_1997_06_20:1.9
	MLWorks_1_0_r2c2_1997_06_14:1.8.5.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.8.5.1
	MLWorks_1_0_r2c1_1997_05_12:1.8.5
	MLWorks_BugFix_1997_04_24:1.8
	MLWorks_1_0_r2_Win32_1997_04_11:1.8
	MLWorks_1_0_r2_Unix_1997_04_04:1.8
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.8.3.1.1
	MLWorks_gui_1996_12_18:1.8.4
	MLWorks_1_0_Win32_1996_12_17:1.8.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.8.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.8.1.1
	MLWorks_1_0_Irix_1996_11_28:1.8.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.8.2
	MLWorks_1_0_Unix_1996_11_14:1.8.1
	MLWorks_Open_Beta2_1996_10_11:1.7.3
	MLWorks_License_dev:1.7.2
	MLWorks_1_open_beta_1996_09_13:1.7.1
	MLWorks_Open_Beta_1996_08_22:1.7
	MLWorks_Beta_1996_07_02:1.7
	MLWorks_Beta_1996_06_07:1.7
	MLWorks_Beta_1996_06_06:1.7
	MLWorks_Beta_1996_06_05:1.7
	MLWorks_Beta_1996_06_03:1.7
	MLWorks_Beta_1996_05_31:1.7
	MLWorks_Beta_1996_05_30:1.7
	ML_beta_release_12/08/94:1.5
	ML_beta_release_03/08/94:1.5
	ML_revised_beta_release_25/05/94:1.4
	ML_final_beta_release_02/03/94:1.4
	mlworks-28-01-1994:1.2;
locks; strict;
comment	@ * @;


1.10
date	98.04.23.11.16.01;	author mitchell;	state Exp;
branches
	1.10.1.1;
next	1.9;

1.9
date	97.05.22.13.19.42;	author jont;	state Exp;
branches
	1.9.1.1
	1.9.2.1;
next	1.8;

1.8
date	96.10.09.17.01.11;	author io;	state Exp;
branches
	1.8.1.1
	1.8.2.1
	1.8.3.1
	1.8.4.1
	1.8.5.1;
next	1.7;

1.7
date	96.05.01.12.10.00;	author jont;	state Exp;
branches
	1.7.1.1
	1.7.2.1
	1.7.3.1;
next	1.6;

1.6
date	94.10.19.12.34.15;	author matthew;	state Exp;
branches;
next	1.5;

1.5
date	94.04.26.15.25.39;	author io;	state Exp;
branches;
next	1.4;

1.4
date	94.02.22.12.47.14;	author jont;	state Exp;
branches;
next	1.3;

1.3
date	94.02.01.10.31.20;	author io;	state Exp;
branches;
next	1.2;

1.2
date	93.11.16.16.14.19;	author io;	state Exp;
branches;
next	1.1;

1.1
date	93.10.28.14.31.06;	author simon;	state Exp;
branches;
next	;

1.7.1.1
date	96.09.13.11.19.41;	author hope;	state Exp;
branches;
next	;

1.7.2.1
date	96.10.07.16.09.34;	author hope;	state Exp;
branches;
next	;

1.7.3.1
date	96.10.17.11.27.53;	author hope;	state Exp;
branches;
next	;

1.8.1.1
date	96.11.14.12.53.27;	author hope;	state Exp;
branches
	1.8.1.1.1.1;
next	;

1.8.1.1.1.1
date	96.11.28.15.04.22;	author hope;	state Exp;
branches;
next	;

1.8.2.1
date	96.11.22.18.12.25;	author hope;	state Exp;
branches;
next	;

1.8.3.1
date	96.12.17.17.50.54;	author hope;	state Exp;
branches
	1.8.3.1.1.1;
next	;

1.8.3.1.1.1
date	97.02.24.11.41.20;	author hope;	state Exp;
branches;
next	;

1.8.4.1
date	96.12.18.09.45.05;	author hope;	state Exp;
branches;
next	;

1.8.5.1
date	97.05.12.10.37.35;	author hope;	state Exp;
branches
	1.8.5.1.1.1
	1.8.5.1.2.1
	1.8.5.1.3.1;
next	;

1.8.5.1.1.1
date	97.07.28.18.22.47;	author daveb;	state Exp;
branches
	1.8.5.1.1.1.1.1;
next	;

1.8.5.1.1.1.1.1
date	97.10.07.11.48.29;	author jkbrook;	state Exp;
branches;
next	;

1.8.5.1.2.1
date	97.09.08.17.16.10;	author daveb;	state Exp;
branches;
next	;

1.8.5.1.3.1
date	97.09.09.14.12.07;	author daveb;	state Exp;
branches;
next	;

1.9.1.1
date	97.09.10.19.28.10;	author brucem;	state Exp;
branches;
next	;

1.9.2.1
date	97.09.11.20.58.08;	author daveb;	state Exp;
branches;
next	;

1.10.1.1
date	99.04.01.17.58.44;	author daveb;	state Exp;
branches;
next	;


desc
@Default RCS description
Copyright Harlequin Ltd., 1991
@


1.10
log
@[Bug #30349]
Fix non-unit non-final expression warnings
@
text
@(*
 Copyright (c) 1993 Harlequin Ltd.
 
 based on Revision 1.9 
 Revision Log
 ------------
 $Log: _machprint.sml,v $
 * Revision 1.9  1997/05/22  13:19:42  jont
 * [Bug #30090]
 * Replace MLWorks.IO with TextIO where applicable
 *
 * Revision 1.8  1996/10/09  17:01:11  io
 * basify
 *
 * Revision 1.7  1996/05/01  12:10:00  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
 * Revision 1.6  1994/10/19  12:34:15  matthew
 * Improved label printing.  Added align function.
 *
Revision 1.5  1994/04/26  15:25:39  io
adding labels

Revision 1.4  1994/02/22  12:47:14  jont
Put back consistent version

Revision 1.2  1993/11/16  16:14:19  io
Deleted old SPARC comments and fixed type errors

 *)

require "^.basis.__string_cvt";
require "^.basis.__text_io";

require "../utils/lists";
require "mips_assembly";
require "../main/machprint";

functor MachPrint(
  structure Lists : LISTS
  structure Mips_Assembly : MIPS_ASSEMBLY
) : MACHPRINT =
struct
  structure Mips_Assembly = Mips_Assembly

  type Opcode = Mips_Assembly.opcode

  val opcol = 35
  val labcol = 7

  fun pad columns x = StringCvt.padRight #" " columns x
  (* Double word align starts of procedures *)

  fun align i = if i mod 2 = 0 then i else i+1

  (* The way instructions are indexed should be consistent with _mip_assembly *)
  fun print_code (stream, labmap) (i, ((tag, code), name)) = 
    (TextIO.output(stream, ("[Mips_Assembly Code]" ^ " for " ^ name ^ "\n"));
     Lists.reducel 
     (fn (i,(opcode,comment)) => 
      let
        val (lab, instr) = Mips_Assembly.labprint(opcode,i,labmap)
        val line = if size comment = 0 then
          concat [pad labcol lab, instr, "\n"]
                   else concat [pad labcol lab, pad opcol instr, "; ", comment, "\n"]
      in
        TextIO.output(stream, line);
        i+1
      end)
     (align i+2,code))


    fun print_mach_code code_list_list stream = let
      val labmap = Mips_Assembly.make_labmap
	(map (fn code_list =>
	      map (fn ((tag,code),name) => 
		   (map (fn (x,y) => x) code))
	      code_list)
	 code_list_list)
    in
      ignore(
        Lists.reducel 
        (fn (n,code_list) => Lists.reducel (print_code (stream,labmap)) (align n,code_list))
        (0,code_list_list));
      ()
    end (* print_mach_code *) 	      

end (* functor *)
@


1.10.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a7 4
 * Revision 1.10  1998/04/23  11:16:01  mitchell
 * [Bug #30349]
 * Fix non-unit non-final expression warnings
 *
@


1.9
log
@[Bug #30090]
Replace MLWorks.IO with TextIO where applicable
@
text
@d8 4
d84 4
a87 3
      Lists.reducel 
      (fn (n,code_list) => Lists.reducel (print_code (stream,labmap)) (align n,code_list))
      (0,code_list_list);
@


1.9.2.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a7 4
 * Revision 1.9  1997/05/22  13:19:42  jont
 * [Bug #30090]
 * Replace MLWorks.IO with TextIO where applicable
 *
@


1.9.1.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a7 4
 * Revision 1.9  1997/05/22  13:19:42  jont
 * [Bug #30090]
 * Replace MLWorks.IO with TextIO where applicable
 *
@


1.8
log
@basify
@
text
@d8 3
d32 2
d57 1
a57 1
    (MLWorks.IO.output(stream, ("[Mips_Assembly Code]" ^ " for " ^ name ^ "\n"));
d66 1
a66 1
        MLWorks.IO.output(stream, line);
@


1.8.5.1
log
@branched from 1.8
@
text
@a7 3
 * Revision 1.8  1996/10/09  17:01:11  io
 * basify
 *
@


1.8.5.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a7 3
 * Revision 1.8.5.1  1997/05/12  10:37:35  hope
 * branched from 1.8
 *
@


1.8.5.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a7 3
 * Revision 1.8.5.1  1997/05/12  10:37:35  hope
 * branched from 1.8
 *
@


1.8.5.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a7 3
 * Revision 1.8.5.1  1997/05/12  10:37:35  hope
 * branched from 1.8
 *
@


1.8.5.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a7 3
 * Revision 1.8.5.1.1.1  1997/07/28  18:22:47  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.8.4.1
log
@branched from 1.8
@
text
@a7 3
 * Revision 1.8  1996/10/09  17:01:11  io
 * basify
 *
@


1.8.3.1
log
@branched from 1.8
@
text
@a7 3
 * Revision 1.8  1996/10/09  17:01:11  io
 * basify
 *
@


1.8.3.1.1.1
log
@branched from 1.8.3.1
@
text
@a7 3
 * Revision 1.8.3.1  1996/12/17  17:50:54  hope
 * branched from 1.8
 *
@


1.8.2.1
log
@branched from 1.8
@
text
@a7 3
 * Revision 1.8  1996/10/09  17:01:11  io
 * basify
 *
@


1.8.1.1
log
@branched from 1.8
@
text
@a7 3
 * Revision 1.8  1996/10/09  17:01:11  io
 * basify
 *
@


1.8.1.1.1.1
log
@branched from 1.8.1.1
@
text
@a7 3
 * Revision 1.8.1.1  1996/11/14  12:53:27  hope
 * branched from 1.8
 *
@


1.7
log
@String functions explode, implode, chr and ord now only available from String
io functions and types
instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
now only available from MLWorks.IO
@
text
@d8 6
d28 1
d45 1
a45 12
  fun make_spaces (string,n) =
    let
      fun mk (0,acc) = acc
        | mk (n,acc) = mk (n-1," " :: acc)
    in
      String.implode (string :: mk (n,[]))
    end

  fun pad columns x = 
    if size x < columns then make_spaces (x, columns - size x)
    else x

d58 2
a59 2
          String.implode [pad labcol lab, instr, "\n"]
                   else String.implode [pad labcol lab, pad opcol instr, "; ", comment, "\n"]
@


1.7.3.1
log
@branched from 1.7
@
text
@a7 6
 * Revision 1.7  1996/05/01  12:10:00  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
@


1.7.2.1
log
@branched from 1.7
@
text
@a7 6
 * Revision 1.7  1996/05/01  12:10:00  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
@


1.7.1.1
log
@branched from 1.7
@
text
@a7 6
 * Revision 1.7  1996/05/01  12:10:00  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
@


1.6
log
@Improved label printing.  Added align function.
@
text
@d8 3
d43 1
a43 1
      implode (string :: mk (n,[]))
d56 1
a56 1
    (output(stream, ("[Mips_Assembly Code]" ^ " for " ^ name ^ "\n"));
d62 2
a63 2
          implode [pad labcol lab, instr, "\n"]
                   else implode [pad labcol lab, pad opcol instr, "; ", comment, "\n"]
d65 1
a65 1
        output(stream, line);
@


1.5
log
@adding labels
@
text
@d8 3
d33 1
a33 1
  val labcol = 5
d47 3
d51 2
a52 1
  fun print_code (stream, labmap) (n, ((tag, code), name)) = 
d54 12
a65 10
     Lists.reducel (fn (n,(x,y)) => let
       val (lab, ass) = Mips_Assembly.labprint(x,n,labmap)
       val line = if size y = 0 then
		    implode [pad labcol lab, ass, "\n"]
		  else implode [pad labcol lab, pad opcol ass, "; ",y,"\n"]
     in
       output(stream, line);
       n+1
     end)
     (n+2,code))
d76 2
a77 3
      Lists.reducel (fn (n,code_list) => Lists.reducel 
		     (print_code (stream,labmap))
		     (n-2,code_list))
a82 5





@


1.4
log
@Put back consistent version
@
text
@d8 3
d29 2
a30 1
  val columns = 20
d39 3
a41 4
  fun pad x =
    if size x < columns
      then 
        make_spaces (x,columns-size x)
d44 2
a45 1
  fun print_code stream ((tag, code),name) =
d47 32
a78 19
     Lists.iterate
     (fn (x,y) =>
      let
        val ass = Mips_Assembly.print x
        val line =
          if size y = 0
            then ass ^ "\n"
          else
            implode [pad ass,"; ",y,"\n"]
      in
        output(stream,line)
      end)
     code)

  fun print_mach_code code_list_list stream =
    Lists.iterate
    (fn code_list => Lists.iterate (print_code stream) code_list)
    code_list_list
end
@


1.3
log
@bringing into line with other sources, moved sigs from mips/ to main/
@
text
@@


1.2
log
@Deleted old SPARC comments and fixed type errors
@
text
@d7 4
a10 1
 $Log$
d15 1
a15 1
require "machprint";
@


1.1
log
@Initial revision
@
text
@a0 1
(* _machprint.sml the functor *)
d2 7
a8 21
$Log: _machprint.sml,v $
Revision 1.9  1993/05/28  15:19:59  matthew
Align comments.

;;; Copyright 1991 Harlequin Ltd.
;;; $Log$

Revision 1.8  1993/03/12  11:55:38  matthew
Added type OpCode

Revision 1.7  1993/01/05  15:28:00  jont
Modified to print final machine code

Revision 1.6  1992/02/27  16:03:42  richard
Changed the way virtual registers are handled.  See MirTypes.

Revision 1.5  1992/02/07  12:48:56  richard
Abolished PRESERVE_ALL_REGS.

Copyright (c) 1991 Harlequin Ltd.
*)
@
