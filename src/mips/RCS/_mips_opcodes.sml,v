head	1.9;
access;
symbols
	MLW_daveb_inline_1_4_99:1.9.1
	MLWorks_21c0_1999_03_25:1.9
	MLWorks_20c1_1998_08_20:1.9
	MLWorks_20c0_1998_08_04:1.9
	MLWorks_20b2c2_1998_06_19:1.9
	MLWorks_20b2_Windows_1998_06_12:1.9
	MLWorks_20b1c1_1998_05_07:1.9
	MLWorks_20b0_1998_04_07:1.9
	MLWorks_20b0_1998_03_20:1.9
	MLWorks_20m2_1998_02_16:1.9
	MLWorks_20m1_1997_10_23:1.9
	MLWorks_11r1:1.8.1.1.1.1.1
	MLWorks_workspace_97:1.8.3
	MLWorks_dt_wizard:1.8.2
	MLWorks_11c0_1997_09_09:1.8.1.1.1.1
	MLWorks_10r3:1.8.1.1.3
	MLWorks_10r2_551:1.8.1.1.2
	MLWorks_11:1.8.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.8.1.1
	MLWorks_20m0_1997_06_20:1.8
	MLWorks_1_0_r2c2_1997_06_14:1.8.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.8.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.8.1
	MLWorks_BugFix_1997_04_24:1.8
	MLWorks_1_0_r2_Win32_1997_04_11:1.8
	MLWorks_1_0_r2_Unix_1997_04_04:1.8
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.7.3.1.1
	MLWorks_gui_1996_12_18:1.7.4
	MLWorks_1_0_Win32_1996_12_17:1.7.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.7.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.7.1.1
	MLWorks_1_0_Irix_1996_11_28:1.7.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.7.2
	MLWorks_1_0_Unix_1996_11_14:1.7.1
	MLWorks_Open_Beta2_1996_10_11:1.6.3
	MLWorks_License_dev:1.6.2
	MLWorks_1_open_beta_1996_09_13:1.6.1
	MLWorks_Open_Beta_1996_08_22:1.6
	MLWorks_Beta_1996_07_02:1.6
	MLWorks_Beta_1996_06_07:1.6
	MLWorks_Beta_1996_06_06:1.6
	MLWorks_Beta_1996_06_05:1.6
	MLWorks_Beta_1996_06_03:1.6
	MLWorks_Beta_1996_05_31:1.6
	MLWorks_Beta_1996_05_30:1.6
	ML_beta_release_12/08/94:1.3
	ML_beta_release_03/08/94:1.3
	ML_revised_beta_release_25/05/94:1.3
	ML_final_beta_release_02/03/94:1.2
	mlworks-28-01-1994:1.2;
locks; strict;
comment	@ * @;


1.9
date	97.09.19.09.41.35;	author brucem;	state Exp;
branches
	1.9.1.1;
next	1.8;

1.8
date	97.01.13.12.11.41;	author matthew;	state Exp;
branches
	1.8.1.1
	1.8.2.1
	1.8.3.1;
next	1.7;

1.7
date	96.10.09.12.01.35;	author io;	state Exp;
branches
	1.7.1.1
	1.7.2.1
	1.7.3.1
	1.7.4.1;
next	1.6;

1.6
date	96.05.17.09.40.47;	author matthew;	state Exp;
branches
	1.6.1.1
	1.6.2.1
	1.6.3.1;
next	1.5;

1.5
date	96.05.01.12.01.11;	author jont;	state Exp;
branches;
next	1.4;

1.4
date	95.06.20.15.41.04;	author matthew;	state Exp;
branches;
next	1.3;

1.3
date	94.03.08.14.29.00;	author jont;	state Exp;
branches;
next	1.2;

1.2
date	93.11.16.17.04.06;	author io;	state Exp;
branches;
next	1.1;

1.1
date	93.10.28.14.31.17;	author simon;	state Exp;
branches;
next	;

1.6.1.1
date	96.09.13.11.19.39;	author hope;	state Exp;
branches;
next	;

1.6.2.1
date	96.10.07.16.09.31;	author hope;	state Exp;
branches;
next	;

1.6.3.1
date	96.10.17.11.27.51;	author hope;	state Exp;
branches;
next	;

1.7.1.1
date	96.11.14.12.53.25;	author hope;	state Exp;
branches
	1.7.1.1.1.1;
next	;

1.7.1.1.1.1
date	96.11.28.15.04.20;	author hope;	state Exp;
branches;
next	;

1.7.2.1
date	96.11.22.18.12.23;	author hope;	state Exp;
branches;
next	;

1.7.3.1
date	96.12.17.17.50.52;	author hope;	state Exp;
branches
	1.7.3.1.1.1;
next	;

1.7.3.1.1.1
date	97.02.24.11.41.18;	author hope;	state Exp;
branches;
next	;

1.7.4.1
date	96.12.18.09.45.03;	author hope;	state Exp;
branches;
next	;

1.8.1.1
date	97.05.12.10.37.33;	author hope;	state Exp;
branches
	1.8.1.1.1.1
	1.8.1.1.2.1
	1.8.1.1.3.1;
next	;

1.8.1.1.1.1
date	97.07.28.18.22.46;	author daveb;	state Exp;
branches
	1.8.1.1.1.1.1.1;
next	;

1.8.1.1.1.1.1.1
date	97.10.07.11.48.27;	author jkbrook;	state Exp;
branches;
next	;

1.8.1.1.2.1
date	97.09.08.17.16.09;	author daveb;	state Exp;
branches;
next	;

1.8.1.1.3.1
date	97.09.09.14.12.05;	author daveb;	state Exp;
branches;
next	;

1.8.2.1
date	97.09.10.19.28.08;	author brucem;	state Exp;
branches;
next	;

1.8.3.1
date	97.09.11.20.58.06;	author daveb;	state Exp;
branches;
next	;

1.9.1.1
date	99.04.01.17.58.40;	author daveb;	state Exp;
branches;
next	;


desc
@Default RCS description
Copyright Harlequin Ltd., 1991
@


1.9
log
@[Bug #30153]
Remove references to Old,
@
text
@(* 
 Copyright (c) 1993 Harlequin Ltd.

 based on ???
 
 Revision Log
 ------------
 $Log: _mips_opcodes.sml,v $
 * Revision 1.8  1997/01/13  12:11:41  matthew
 * Adding mult_result
 *
 * Revision 1.7  1996/10/09  12:01:35  io
 * moving String from toplevel
 *
 * Revision 1.6  1996/05/17  09:40:47  matthew
 * Moving Bits to Internal
 *
 * Revision 1.5  1996/05/01  12:01:11  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
 * Revision 1.4  1995/06/20  15:41:04  matthew
 * Fixing problem with large shift counts
 *
Revision 1.3  1994/03/08  14:29:00  jont
Add OFFSET type for straight integers

Revision 1.2  1993/11/16  17:04:06  io
Deleted old SPARC comments and fixed type errors

 *)

require "$.basis.__string";
require "../utils/crash";
require "machtypes";
require "mips_opcodes";

functor Mips_Opcodes(
  structure Crash : CRASH
  structure MachTypes : MACHTYPES
) : MIPS_OPCODES =
struct

  structure Bits = MLWorks.Internal.Bits
  structure MachTypes = MachTypes

  exception not_done_yet

  datatype opcode =
    FORMATI of int (*op*) * MachTypes.Mips_Reg (*rs*) * MachTypes.Mips_Reg (*rt*) * 
    int (*imm16*)
  | FORMATI2 of int (*op*) * int (*rs*) * int (*rt*) * int (*imm16*)
  | FORMATJ of int (*op*) * int (*target26*)
  | FORMATR of int (*op*) * MachTypes.Mips_Reg (*rs*) * MachTypes.Mips_Reg (*rt*) * 
    MachTypes.Mips_Reg (*rd*) * int (*shamt*) * int (*funct*)
  | FORMATR2 of int * int * int * int * int * int
  | OFFSET of int

  fun register_val MachTypes.R0 = 0
    | register_val MachTypes.R1 = 1
    | register_val MachTypes.R2 = 2
    | register_val MachTypes.R3 = 3
    | register_val MachTypes.R4 = 4
    | register_val MachTypes.R5 = 5
    | register_val MachTypes.R6 = 6
    | register_val MachTypes.R7 = 7
    | register_val MachTypes.R8 = 8
    | register_val MachTypes.R9 = 9
    | register_val MachTypes.R10 = 10
    | register_val MachTypes.R11 = 11
    | register_val MachTypes.R12 = 12
    | register_val MachTypes.R13 = 13
    | register_val MachTypes.R14 = 14
    | register_val MachTypes.R15 = 15
    | register_val MachTypes.R16 = 16
    | register_val MachTypes.R17 = 17
    | register_val MachTypes.R18 = 18
    | register_val MachTypes.R19 = 19
    | register_val MachTypes.R20 = 20
    | register_val MachTypes.R21 = 21
    | register_val MachTypes.R22 = 22
    | register_val MachTypes.R23 = 23
    | register_val MachTypes.R24 = 24
    | register_val MachTypes.R25 = 25
    | register_val MachTypes.R26 = 26
    | register_val MachTypes.R27 = 27
    | register_val MachTypes.R28 = 28
    | register_val MachTypes.R29 = 29
    | register_val MachTypes.R30 = 30
    | register_val MachTypes.R31 = 31
    | register_val MachTypes.cond = Crash.impossible"register_val cond"
    | register_val MachTypes.heap = Crash.impossible"register_val heap"
    | register_val MachTypes.stack = Crash.impossible"register_val stack"
    | register_val MachTypes.mult_result = Crash.impossible"register_val mult_result"
    | register_val MachTypes.nil_v = Crash.impossible"register_val nil_v"

  fun bool_val false = 0
  | bool_val true = 1

  fun make_list(bytes, value, acc) =
    if bytes <= 0 then acc
    else
      make_list(bytes-1, value div 256, String.str(chr(value mod 256)) :: acc)

  fun output_int(bytes, value) =
    make_list(bytes, value, [])

  fun output_opcode(FORMATI(op1, rs, rt, imm16)) =
      concat
      (output_int(2, Bits.lshift(op1,10) + Bits.lshift(register_val rs,5) + register_val rt) @@
       output_int(2, imm16))
    | output_opcode(FORMATI2(op1, rs, rt, imm16)) =
      concat
      (output_int(2, Bits.lshift(op1,10) + Bits.lshift(rs,5) + rt) @@
       output_int(2, imm16))
    | output_opcode(FORMATJ(op1, target26)) =
      let
	val top = Bits.andb(Bits.rshift(target26, 24), 4)
	val bottom3 = Bits.andb(target26, (256*256*256)-1)
      in
	concat
	(String.str(chr(Bits.lshift(op1,2) + top)) ::
	 output_int(3, bottom3))
      end
    | output_opcode(FORMATR(op1, rs, rt, rd, shamt, funct)) =
      (* Ensure shamt is a 5 bit quantity *)
      concat
      (output_int(2, Bits.lshift(op1,10) + Bits.lshift(register_val rs,5) + register_val rt) @@
       output_int(2, Bits.lshift(register_val rd,11) + Bits.lshift(Bits.andb (shamt,31),6) + funct))
    | output_opcode(FORMATR2(op1, fmt, ft, fs, fd, funct)) =
      concat
      (output_int(2, Bits.lshift(op1,10) + Bits.lshift(fmt,5) + ft) @@
       output_int(2, Bits.lshift(fs, 11) + Bits.lshift(fd, 6) + funct))
    | output_opcode(OFFSET i) =
      concat(output_int(4, i))
end
@


1.9.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a8 4
 * Revision 1.9  1997/09/19  09:41:35  brucem
 * [Bug #30153]
 * Remove references to Old,
 *
@


1.8
log
@Adding mult_result
@
text
@d9 3
d35 1
a38 1
require "^.basis.__old";
d105 1
a105 1
      make_list(bytes-1, value div 256, Old.chr(value mod 256) :: acc)
d124 1
a124 1
	(Old.chr(Bits.lshift(op1,2) + top) ::
@


1.8.3.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a8 3
 * Revision 1.8  1997/01/13  12:11:41  matthew
 * Adding mult_result
 *
@


1.8.2.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a8 3
 * Revision 1.8  1997/01/13  12:11:41  matthew
 * Adding mult_result
 *
@


1.8.1.1
log
@branched from 1.8
@
text
@a8 3
 * Revision 1.8  1997/01/13  12:11:41  matthew
 * Adding mult_result
 *
@


1.8.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a8 3
 * Revision 1.8.1.1  1997/05/12  10:37:33  hope
 * branched from 1.8
 *
@


1.8.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a8 3
 * Revision 1.8.1.1  1997/05/12  10:37:33  hope
 * branched from 1.8
 *
@


1.8.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a8 3
 * Revision 1.8.1.1  1997/05/12  10:37:33  hope
 * branched from 1.8
 *
@


1.8.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a8 3
 * Revision 1.8.1.1.1.1  1997/07/28  18:22:46  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.7
log
@moving String from toplevel
@
text
@d9 3
d93 1
@


1.7.4.1
log
@branched from 1.7
@
text
@a8 3
 * Revision 1.7  1996/10/09  12:01:35  io
 * moving String from toplevel
 *
@


1.7.3.1
log
@branched from 1.7
@
text
@a8 3
 * Revision 1.7  1996/10/09  12:01:35  io
 * moving String from toplevel
 *
@


1.7.3.1.1.1
log
@branched from 1.7.3.1
@
text
@a8 3
 * Revision 1.7.3.1  1996/12/17  17:50:52  hope
 * branched from 1.7
 *
@


1.7.2.1
log
@branched from 1.7
@
text
@a8 3
 * Revision 1.7  1996/10/09  12:01:35  io
 * moving String from toplevel
 *
@


1.7.1.1
log
@branched from 1.7
@
text
@a8 3
 * Revision 1.7  1996/10/09  12:01:35  io
 * moving String from toplevel
 *
@


1.7.1.1.1.1
log
@branched from 1.7.1.1
@
text
@a8 3
 * Revision 1.7.1.1  1996/11/14  12:53:25  hope
 * branched from 1.7
 *
@


1.6
log
@Moving Bits to Internal
@
text
@d9 3
d32 1
d98 1
a98 1
      make_list(bytes-1, value div 256, String.chr(value mod 256) :: acc)
d104 1
a104 1
      String.implode
d108 1
a108 1
      String.implode
d116 2
a117 2
	String.implode
	(String.chr(Bits.lshift(op1,2) + top) ::
d122 1
a122 1
      String.implode
d126 1
a126 1
      String.implode
d130 1
a130 1
      String.implode(output_int(4, i))
@


1.6.3.1
log
@branched from 1.6
@
text
@a8 3
 * Revision 1.6  1996/05/17  09:40:47  matthew
 * Moving Bits to Internal
 *
@


1.6.2.1
log
@branched from 1.6
@
text
@a8 3
 * Revision 1.6  1996/05/17  09:40:47  matthew
 * Moving Bits to Internal
 *
@


1.6.1.1
log
@branched from 1.6
@
text
@a8 3
 * Revision 1.6  1996/05/17  09:40:47  matthew
 * Moving Bits to Internal
 *
@


1.5
log
@String functions explode, implode, chr and ord now only available from String
io functions and types
instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
now only available from MLWorks.IO
@
text
@d9 6
d35 2
@


1.4
log
@Fixing problem with large shift counts
@
text
@d9 3
d86 1
a86 1
      make_list(bytes-1, value div 256, chr(value mod 256) :: acc)
d92 1
a92 1
      implode
d96 1
a96 1
      implode
d104 2
a105 2
	implode
	(chr(Bits.lshift(op1,2) + top) ::
d110 1
a110 1
      implode
d114 1
a114 1
      implode
d118 1
a118 1
      implode(output_int(4, i))
@


1.3
log
@Add OFFSET type for straight integers
@
text
@d9 3
d106 1
d109 1
a109 1
       output_int(2, Bits.lshift(register_val rd,11) + Bits.lshift(shamt,6) + funct))
@


1.2
log
@Deleted old SPARC comments and fixed type errors
@
text
@d8 4
a11 1
 $Log$
d35 1
d110 2
@


1.1
log
@Initial revision
@
text
@d1 2
a2 5
(* _mips_opcodes.sml the functor *)
(*
$Log: _mips_opcodes.sml,v $
Revision 1.1  1993/08/02  14:27  simon
Initial revision for mips.
d4 6
a9 5
;;; Copyright 1991 Harlequin Ltd.
;;; $Log$

Copyright (c) 1993 Harlequin Ltd.
*)
@
