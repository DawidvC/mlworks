head	1.2;
access;
symbols
	ML_final_beta_release_02/03/94:1.2
	mlworks-28-01-1994:1.2;
locks; strict;


1.2
date	93.11.17.14.10.01;	author io;	state Exp;
branches;
next	1.1;

1.1
date	93.10.28.14.31.33;	author simon;	state Exp;
branches;
next	;


desc
@Default RCS description
Copyright Harlequin Ltd., 1991
@


1.2
log
@Deleted old SPARC comments and fixed type errors
@
text
@(* 
 Copyright (c) 1993 Harlequin Ltd.

 based on Revision 1.21

 Revision Log
 ------------
 $Log$
 *)

require "../utils/set";
require "../utils/option";

signature MACHSPEC =

  sig

    structure Set	 : SET
    structure Option	 : OPTION

    (*  === MACHINE REGISTERS ===  *)

    eqtype register


    (*  == General registers ==
     *
     *  These are the general purpose allocatable registers for the
     *  different types of virtual register.  The order is significant:
     *  earlier registers should be used in preference to later ones.
     *
     *  gcs:		int/ptr visible to garbage collector
     *  non_gcs:	int/ptr not visible to garbage collector
     *  fps:		floating point registers
     *)

    val gcs		: register list
    val non_gcs		: register list
    val fps		: register list


    (*  == Special purpose reserved registers ==  *)

    val caller_arg 	: register	(* function argument from caller *)
    val callee_arg	: register 	(* ditto to callees (may be same) *)
    val caller_closure	: register	(* closure pointer from caller *)
    val callee_closure	: register	(* ditto to callees (may be same) *)
    val fp		: register	(* frame pointer *)
    val sp		: register	(* stack pointer *)
    val lr		: register	(* link register *)
    val handler		: register	(* pointer to exception handler code *)
    val global		: register	(* not affected by PRESERVE/RESTORE *)
    val fp_global	: register	(* spare for fp temporaries *)
    val gc1		: register	(* reserved for garbage collector *)
    val gc2		: register	(* reserved for garbage collector *)
    val implicit	: register	(* Always holds the implicit vector *)
    val stack_limit     : register      
                                   (* Holds the limit of the current stack *)
    val zero		: register Option.opt
    					(* Register which is always zero *)

    (*  == Calling conventions ==  *)

    val corrupted_by_callee : {gc     : register Set.Set,
                               non_gc : register Set.Set,
                               fp     : register Set.Set}


    (*  == Reserved registers ==
     *
     *  These can never be used for anything except their special purpose,
     *  they can't even be temporarily spilled.
     *)

    val reserved : {gc : register Set.Set, non_gc : register Set.Set, fp : register Set.Set}


    (*  == Temporary registers ==
     *
     *  These are the recommended registers to use for temporaries when
     *  spilling.  They are in order of preference.
     *)

    val temporary : {gc     : register list,
                     non_gc : register list,
                     fp     : register list}


    (*  == Allocation order ==
     *
     *  Given two registers this determines the order in which they should
     *  be allocated.  If LESS the first should be allocated in preference
     *  to the second, the other way if GREATER.  If EQUAL they should be
     *  allocated equally and will be selected at random.
     *)

    val allocation_order :
      {gc     : register * register -> bool,
       non_gc : register * register -> bool,
       fp     : register * register -> bool}

    val allocation_equal :
      {gc     : register * register -> bool,
       non_gc : register * register -> bool,
       fp     : register * register -> bool}


    (*  == Register printing ==  *)

    val print_register	: register -> string



    (*  === MACHINE LIMITS ===  *)

    val largest_int	: string
    val smallest_int	: string
  end
@


1.1
log
@Initial revision
@
text
@d1 2
a2 84
(*   ==== MACHINE SPECIFICATION ====
 *              SIGNATURE
 *
 *  Copyright (C) 1991 Harlequin Ltd.
 *
 *  Description
 *  -----------
 *  This module contains all the information necessary to generate MIR code
 *  suitable for the machine code generator.  For example, it specifies the
 *  register model and which pervasives can be generated as in-line code.
 *  Inlining of pervasives now moved to machperv
 *
 *  Revision Log
 *  ------------
 *  $Log: machspec.sml,v $
 *  Revision 1.21  1993/05/28  14:42:01  nosa
 *  Changed Option.T to Option.opt.
 *
 *  Revision 1.20  1992/11/21  19:33:07  jont
 *  Removed is_inline to machperv in order to remove dependence of entire
 *  mir stage on pervasives
 *
 *  Revision 1.19  1992/10/02  17:02:08  clive
 *  Change to NewMap.empty which now takes < and = functions instead of the single-function
 *
 *  Revision 1.18  1992/06/08  15:21:17  richard
 *  Added allocation_order.
 *
 *  Revision 1.17  1992/06/03  16:27:49  richard
 *  The reserved registers are now complete sets rather than a list
 *  of preferences.
 *
 *  Revision 1.16  1992/04/07  10:11:10  richard
 *  Partitioned corrupted_by_callee according to register type to
 *  avoid naming clashes.
 *
 *  Revision 1.15  1992/02/06  10:55:52  richard
 *  Added `temporary'.
 *
 *  Revision 1.14  1992/01/07  09:17:03  clive
 *  Added stack limit register definitions
 *
 *  Revision 1.13  1992/01/03  15:44:00  richard
 *  Added the zero register.
 *
 *  Revision 1.12  1991/12/04  13:08:29  richard
 *  Tidied up the documentation.
 *
 *  Revision 1.11  91/11/29  11:47:12  richard
 *  Added `reserved' to prevent register allocation from very special
 *  registers.
 *  
 *  Revision 1.10  91/11/25  15:33:05  jont
 *  Added fp_global as a temporary for conversions from fp to int
 *  
 *  Revision 1.9  91/11/14  10:56:54  richard
 *  Removed references to fp_double registers.
 *  
 *  Revision 1.8  91/11/12  16:54:28  jont
 *  Added is_inline function to the signature
 *  
 *  Revision 1.7  91/10/29  14:16:08  jont
 *  Added values indicating existence on machin level multiply, divide
 *  and modulus
 *  
 *  Revision 1.6  91/10/24  15:29:01  davidt
 *  Now knows about the `implicit' register.
 *  
 *  Revision 1.5  91/10/15  15:14:58  richard
 *  Changed corrupted_by_callee to a set rather than a list.
 *  
 *  Revision 1.4  91/10/14  14:31:33  richard
 *  Added corrupted_by_callee.
 *  
 *  Revision 1.3  91/10/10  14:28:50  richard
 *  indicates allocation preferences. after_preserve and after_restore
 *  discarded.
 *  
 *  Revision 1.2  91/10/09  14:27:05  richard
 *  Added some new register definitions
 *  
 *  Revision 1.1  91/10/07  11:22:56  richard
 *  Initial revision
 *)
d4 1
a4 2
;;; Copyright 1991 Harlequin Ltd.
;;; $Log$
d6 4
@
