head	1.10;
access;
symbols
	MLW_daveb_inline_1_4_99:1.10.4
	MLWorks_21c0_1999_03_25:1.10
	MLWorks_20c1_1998_08_20:1.10
	MLWorks_20c0_1998_08_04:1.10
	MLWorks_20b2c2_1998_06_19:1.10
	MLWorks_20b2_Windows_1998_06_12:1.10
	MLWorks_20b1c1_1998_05_07:1.10
	MLWorks_20b0_1998_04_07:1.10
	MLWorks_20b0_1998_03_20:1.10
	MLWorks_20m2_1998_02_16:1.10
	MLWorks_20m1_1997_10_23:1.10
	MLWorks_11r1:1.10.1.1.1.1.1
	MLWorks_workspace_97:1.10.3
	MLWorks_dt_wizard:1.10.2
	MLWorks_11c0_1997_09_09:1.10.1.1.1.1
	MLWorks_10r3:1.10.1.1.3
	MLWorks_10r2_551:1.10.1.1.2
	MLWorks_11:1.10.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.10.1.1
	MLWorks_20m0_1997_06_20:1.10
	MLWorks_1_0_r2c2_1997_06_14:1.10.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.10.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.10.1
	MLWorks_BugFix_1997_04_24:1.10
	MLWorks_1_0_r2_Win32_1997_04_11:1.10
	MLWorks_1_0_r2_Unix_1997_04_04:1.10
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.9.6.1.1
	MLWorks_gui_1996_12_18:1.9.7
	MLWorks_1_0_Win32_1996_12_17:1.9.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.9.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.9.4.1
	MLWorks_1_0_Irix_1996_11_28:1.9.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.9.5
	MLWorks_1_0_Unix_1996_11_14:1.9.4
	MLWorks_Open_Beta2_1996_10_11:1.9.3
	MLWorks_License_dev:1.9.2
	MLWorks_1_open_beta_1996_09_13:1.9.1
	MLWorks_Open_Beta_1996_08_22:1.9
	MLWorks_Beta_1996_07_02:1.9
	MLWorks_Beta_1996_06_07:1.9
	MLWorks_Beta_1996_06_06:1.9
	MLWorks_Beta_1996_06_05:1.9
	MLWorks_Beta_1996_06_03:1.9
	MLWorks_Beta_1996_05_31:1.9
	MLWorks_Beta_1996_05_30:1.9
	ML_beta_release_12/08/94:1.7
	ML_beta_release_03/08/94:1.7
	ML_revised_beta_release_25/05/94:1.5
	ML_final_beta_release_02/03/94:1.4
	mlworks-28-01-1994:1.2;
locks; strict;
comment	@ * @;


1.10
date	97.01.13.12.01.27;	author matthew;	state Exp;
branches
	1.10.1.1
	1.10.2.1
	1.10.3.1
	1.10.4.1;
next	1.9;

1.9
date	95.08.14.12.05.06;	author jont;	state Exp;
branches
	1.9.1.1
	1.9.2.1
	1.9.3.1
	1.9.4.1
	1.9.5.1
	1.9.6.1
	1.9.7.1;
next	1.8;

1.8
date	95.07.25.15.45.14;	author jont;	state Exp;
branches;
next	1.7;

1.7
date	94.06.14.13.09.50;	author io;	state Exp;
branches;
next	1.6;

1.6
date	94.05.06.10.34.21;	author io;	state Exp;
branches;
next	1.5;

1.5
date	94.03.08.18.00.51;	author jont;	state Exp;
branches;
next	1.4;

1.4
date	94.02.22.12.47.45;	author jont;	state Exp;
branches;
next	1.3;

1.3
date	94.02.16.10.37.34;	author io;	state Exp;
branches;
next	1.2;

1.2
date	93.11.17.14.11.11;	author io;	state Exp;
branches;
next	1.1;

1.1
date	93.10.28.14.31.37;	author simon;	state Exp;
branches;
next	;

1.9.1.1
date	96.09.13.11.19.22;	author hope;	state Exp;
branches;
next	;

1.9.2.1
date	96.10.07.16.09.15;	author hope;	state Exp;
branches;
next	;

1.9.3.1
date	96.10.17.11.27.31;	author hope;	state Exp;
branches;
next	;

1.9.4.1
date	96.11.14.12.53.05;	author hope;	state Exp;
branches
	1.9.4.1.1.1;
next	;

1.9.4.1.1.1
date	96.11.28.15.04.02;	author hope;	state Exp;
branches;
next	;

1.9.5.1
date	96.11.22.18.12.07;	author hope;	state Exp;
branches;
next	;

1.9.6.1
date	96.12.17.17.50.36;	author hope;	state Exp;
branches
	1.9.6.1.1.1;
next	;

1.9.6.1.1.1
date	97.02.24.11.40.56;	author hope;	state Exp;
branches;
next	;

1.9.7.1
date	96.12.18.09.44.45;	author hope;	state Exp;
branches;
next	;

1.10.1.1
date	97.05.12.10.37.16;	author hope;	state Exp;
branches
	1.10.1.1.1.1
	1.10.1.1.2.1
	1.10.1.1.3.1;
next	;

1.10.1.1.1.1
date	97.07.28.18.22.29;	author daveb;	state Exp;
branches
	1.10.1.1.1.1.1.1;
next	;

1.10.1.1.1.1.1.1
date	97.10.07.11.48.09;	author jkbrook;	state Exp;
branches;
next	;

1.10.1.1.2.1
date	97.09.08.17.15.52;	author daveb;	state Exp;
branches;
next	;

1.10.1.1.3.1
date	97.09.09.14.11.49;	author daveb;	state Exp;
branches;
next	;

1.10.2.1
date	97.09.10.19.27.52;	author brucem;	state Exp;
branches;
next	;

1.10.3.1
date	97.09.11.20.57.47;	author daveb;	state Exp;
branches;
next	;

1.10.4.1
date	99.04.01.17.58.29;	author daveb;	state Exp;
branches;
next	;


desc
@Default RCS description
Copyright Harlequin Ltd., 1991
@


1.10
log
@Adding mult_result to registers
@
text
@(*
 Copyright (c) 1993 Harlequin Ltd.
 
 based on Revision 1.28
 
 Revsion Log
 -----------
 $Log: machtypes.sml,v $
 * Revision 1.9  1995/08/14  12:05:06  jont
 * Add bits_per_word
 * Remove smallest_int, largest_int, largest_word
 *
Revision 1.8  1995/07/25  15:45:14  jont
Add largest_word

Revision 1.7  1994/06/14  13:09:50  io
simplifying callee_arg and caller_arg

Revision 1.6  1994/05/06  10:34:21  io
added dummy_reg to identify ignored bits of tree

Revision 1.5  1994/03/08  18:00:51  jont
Remove module type into separate file

Revision 1.4  1994/02/22  12:47:45  jont
Put back consistent version

Revision 1.2  1993/11/17  14:11:11  io
Deleted old SPARC comments and fixed type errors

 *)
 
signature MACHTYPES = sig
  datatype Mips_Reg =
    R0 |
    R1 |
    R2 |
    R3 |
    R4 |
    R5 |
    R6 |
    R7 |
    R8 |
    R9 |
    R10 |
    R11 |
    R12 |
    R13 |
    R14 |
    R15 |
    R16 |
    R17 |
    R18 |
    R19 |
    R20 |
    R21 |
    R22 |
    R23 |
    R24 |
    R25 |
    R26 |
    R27 |
    R28 |
    R29 |
    R30 |
    R31 |
    cond |
    heap |
    stack |
    mult_result |
    nil_v

  val F0 : Mips_Reg
  val F1 : Mips_Reg
  val F2 : Mips_Reg
  val F3 : Mips_Reg
  val F4 : Mips_Reg
  val F5 : Mips_Reg
  val F6 : Mips_Reg
  val F7 : Mips_Reg
  val F8 : Mips_Reg
  val F9 : Mips_Reg
  val F10 : Mips_Reg
  val F11 : Mips_Reg
  val F12 : Mips_Reg
  val F13 : Mips_Reg
  val F14 : Mips_Reg
  val F15 : Mips_Reg
  val F16 : Mips_Reg
  val F17 : Mips_Reg
  val F18 : Mips_Reg
  val F19 : Mips_Reg
  val F20 : Mips_Reg
  val F21 : Mips_Reg
  val F22 : Mips_Reg
  val F23 : Mips_Reg
  val F24 : Mips_Reg
  val F25 : Mips_Reg
  val F26 : Mips_Reg
  val F27 : Mips_Reg
  val F28 : Mips_Reg
  val F29 : Mips_Reg
  val F30 : Mips_Reg
  val F31 : Mips_Reg

  val next_reg : Mips_Reg -> Mips_Reg

  datatype fp_type = single | double | extended

  val fp_used : fp_type

  val reg_to_string : Mips_Reg -> string
  val fp_reg_to_string : Mips_Reg -> string

  val digits_in_real : int
  val bits_per_word : int

  val zero_reg : Mips_Reg
  val dummy_reg: Mips_Reg
(*
  used when unnecessary filler arguments are needed
  for instance:
     bgtz reg offset
  needs to be stored as:
     bgtz reg reg offset
  thus, to make it more readable:
     bgtz reg dummy offset
*)

  val arg : Mips_Reg
  val caller_closure : Mips_Reg
  val callee_closure : Mips_Reg
  val fp : Mips_Reg
  val sp : Mips_Reg
  val lr : Mips_Reg
  val handler : Mips_Reg
  val global : Mips_Reg
  val fp_global : Mips_Reg
  val gc1 : Mips_Reg
  val gc2 : Mips_Reg
  val implicit : Mips_Reg
  val stack_limit : Mips_Reg
  exception OutOfScope of Mips_Reg
  val after_preserve : Mips_Reg -> Mips_Reg
  val after_restore : Mips_Reg -> Mips_Reg


  exception Ord
  exception Chr

  val ord: string -> int
  val chr: int -> string

  exception NeedsPreserve

  val check_reg : Mips_Reg -> unit
end
@


1.10.4.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a8 3
 * Revision 1.10  1997/01/13  12:01:27  matthew
 * Adding mult_result to registers
 *
@


1.10.3.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a8 3
 * Revision 1.10  1997/01/13  12:01:27  matthew
 * Adding mult_result to registers
 *
@


1.10.2.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a8 3
 * Revision 1.10  1997/01/13  12:01:27  matthew
 * Adding mult_result to registers
 *
@


1.10.1.1
log
@branched from 1.10
@
text
@a8 3
 * Revision 1.10  1997/01/13  12:01:27  matthew
 * Adding mult_result to registers
 *
@


1.10.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a8 3
 * Revision 1.10.1.1  1997/05/12  10:37:16  hope
 * branched from 1.10
 *
@


1.10.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a8 3
 * Revision 1.10.1.1  1997/05/12  10:37:16  hope
 * branched from 1.10
 *
@


1.10.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a8 3
 * Revision 1.10.1.1  1997/05/12  10:37:16  hope
 * branched from 1.10
 *
@


1.10.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a8 3
 * Revision 1.10.1.1.1.1  1997/07/28  18:22:29  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.9
log
@Add bits_per_word
Remove smallest_int, largest_int, largest_word
@
text
@d9 4
d70 1
@


1.9.7.1
log
@branched from 1.9
@
text
@a8 4
 * Revision 1.9  1995/08/14  12:05:06  jont
 * Add bits_per_word
 * Remove smallest_int, largest_int, largest_word
 *
@


1.9.6.1
log
@branched from 1.9
@
text
@a8 4
 * Revision 1.9  1995/08/14  12:05:06  jont
 * Add bits_per_word
 * Remove smallest_int, largest_int, largest_word
 *
@


1.9.6.1.1.1
log
@branched from 1.9.6.1
@
text
@a8 3
 * Revision 1.9.6.1  1996/12/17  17:50:36  hope
 * branched from 1.9
 *
@


1.9.5.1
log
@branched from 1.9
@
text
@a8 4
 * Revision 1.9  1995/08/14  12:05:06  jont
 * Add bits_per_word
 * Remove smallest_int, largest_int, largest_word
 *
@


1.9.4.1
log
@branched from 1.9
@
text
@a8 4
 * Revision 1.9  1995/08/14  12:05:06  jont
 * Add bits_per_word
 * Remove smallest_int, largest_int, largest_word
 *
@


1.9.4.1.1.1
log
@branched from 1.9.4.1
@
text
@a8 3
 * Revision 1.9.4.1  1996/11/14  12:53:05  hope
 * branched from 1.9
 *
@


1.9.3.1
log
@branched from 1.9
@
text
@a8 4
 * Revision 1.9  1995/08/14  12:05:06  jont
 * Add bits_per_word
 * Remove smallest_int, largest_int, largest_word
 *
@


1.9.2.1
log
@branched from 1.9
@
text
@a8 4
 * Revision 1.9  1995/08/14  12:05:06  jont
 * Add bits_per_word
 * Remove smallest_int, largest_int, largest_word
 *
@


1.9.1.1
log
@branched from 1.9
@
text
@a8 4
 * Revision 1.9  1995/08/14  12:05:06  jont
 * Add bits_per_word
 * Remove smallest_int, largest_int, largest_word
 *
@


1.8
log
@Add largest_word
@
text
@d9 3
a109 3
  val largest_int: string
  val smallest_int: string
  val largest_word: string
d111 1
@


1.7
log
@simplifying callee_arg and caller_arg
@
text
@d9 3
d109 1
@


1.6
log
@added dummy_reg to identify ignored bits of tree
@
text
@d9 3
d120 1
a120 2
  val caller_arg : Mips_Reg
  val callee_arg : Mips_Reg
@


1.5
log
@Remove module type into separate file
@
text
@d9 3
d106 11
@


1.4
log
@Put back consistent version
@
text
@d9 3
a17 15

  datatype wordset = WORD_SET of string list * (int * int * string) list * bool list * int list
  datatype module_element =
    REAL of int * string |
    STRING of int * string |
    MLVALUE of int * MLWorks.Internal.Value.ml_value |
    WORDSET of wordset |
    EXTERNAL of int * string |
    VAR of int * string |
    EXN of int * string |
    STRUCT of int * string |
    FUNCT of int * string

  datatype Module = MODULE of module_element list

@


1.3
log
@no change
@
text
@@


1.2
log
@Deleted old SPARC comments and fixed type errors
@
text
@d8 4
a11 1
 $Log$
a128 1

@


1.1
log
@Initial revision
@
text
@a0 1
(* machtypes.sml the signature *)
d2 9
a10 104
$Log: machtypes.sml,v $
Revision 1.1  1993/08/02  12:08  simon
Initial revision for mips.

;;; Copyright 1991 Harlequin Ltd.
;;; $Log$



Revision 1.28  1993/03/18  10:08:25  jont
Added leaf and offsets lists into WORDSET

Revision 1.27  1993/03/11  11:07:01  matthew
Signature revisions

Revision 1.26  1993/03/01  14:27:32  matthew
Added MLVALUEs

Revision 1.25  1993/02/03  15:34:03  jont
Changes for code vector reform.

Revision 1.24  1993/01/15  11:33:57  jont
Split store into three areas of heap, stack and nil vector for scheduling improvement

Revision 1.23  1992/09/15  10:53:35  clive
Checked and corrected the specification for the floating point registers

Revision 1.22  1992/06/18  11:19:07  jont
Added furhter constructors to the module element type to express
interpretive stuff

Revision 1.21  1992/01/13  14:19:43  clive
Added code for non_gc spills number in front of code objects in a closure
by changing wordset definition

Revision 1.20  1992/01/07  09:08:17  clive
Added stack limit register definitions

Revision 1.19  1991/11/25  15:48:38  jont
Added fp_global as a temporary for conversions from fp to int

Revision 1.18  91/11/20  17:07:56  jont
Added check_reg function from mach_cg to see when save/restore is needed

Revision 1.17  91/11/13  12:35:12  jont
Added next_reg to signature

Revision 1.16  91/11/11  18:02:26  jont
Added a maximum number of real digits, and a type to determine the
type of floating point in use

Revision 1.15  91/11/08  11:28:10  jont
Added printing of floating point registers

Revision 1.14  91/10/28  11:54:25  jont
Added store register for detection of load/store interaction

Revision 1.13  91/10/24  15:56:55  davidt
Now knows about the `implicit' register.

Revision 1.12  91/10/24  13:17:52  jont
Added cond register to represent the condition for the benefit of the
instruction scheduler

Revision 1.11  91/10/16  12:55:55  jont
New improved simplified module structure

Revision 1.10  91/10/15  16:53:50  jont
Changed defn of FN_CALL

Revision 1.9  91/10/09  14:33:25  richard
Added some new register definitions

Revision 1.8  91/10/08  18:46:51  jont
New module structure with lists of functions

Revision 1.7  91/10/07  11:46:35  richard
Moved some system dependent stuff to MachSpec.

Revision 1.6  91/10/03  09:42:45  richard
Changed the name of spillable_regs to gc_registers for consistency,
and added fp_registers and fp_double_registers. These are currently set
to the empty set.

Revision 1.5  91/10/02  10:30:55  jont
More register names and fixed translations

Revision 1.4  91/09/06  13:15:47  jont
Added register definitions etc

Revision 1.3  91/08/27  12:24:19  davida
Added exceptions Ord and Chr

Revision 1.2  91/08/22  11:01:33  jont
Added string to int and int to string conversion functions in case we
want variations between host and target

Revision 1.1  91/08/09  17:21:47  jont
Initial revision

Copyright (c) 1993 Harlequin Ltd.
*)


@
