head	1.15;
access;
symbols
	MLW_daveb_inline_1_4_99:1.15.3
	MLWorks_21c0_1999_03_25:1.15
	MLWorks_20c1_1998_08_20:1.15
	MLWorks_20c0_1998_08_04:1.15
	MLWorks_20b2c2_1998_06_19:1.15
	MLWorks_20b2_Windows_1998_06_12:1.15
	MLWorks_20b1c1_1998_05_07:1.15
	MLWorks_20b0_1998_04_07:1.15
	MLWorks_20b0_1998_03_20:1.15
	MLWorks_20m2_1998_02_16:1.15
	MLWorks_20m1_1997_10_23:1.15
	MLWorks_11r1:1.14.1.1.1.1.1
	MLWorks_workspace_97:1.15.2
	MLWorks_dt_wizard:1.15.1
	MLWorks_11c0_1997_09_09:1.14.1.1.1.1
	MLWorks_10r3:1.14.1.1.3
	MLWorks_10r2_551:1.14.1.1.2
	MLWorks_11:1.14.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.14.1.1
	MLWorks_20m0_1997_06_20:1.15
	MLWorks_1_0_r2c2_1997_06_14:1.14.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.14.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.14.1
	MLWorks_BugFix_1997_04_24:1.14
	MLWorks_1_0_r2_Win32_1997_04_11:1.14
	MLWorks_1_0_r2_Unix_1997_04_04:1.14
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.13.6.1.1
	MLWorks_gui_1996_12_18:1.13.7
	MLWorks_1_0_Win32_1996_12_17:1.13.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.13.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.13.4.1
	MLWorks_1_0_Irix_1996_11_28:1.13.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.13.5
	MLWorks_1_0_Unix_1996_11_14:1.13.4
	MLWorks_Open_Beta2_1996_10_11:1.13.3
	MLWorks_License_dev:1.13.2
	MLWorks_1_open_beta_1996_09_13:1.13.1
	MLWorks_Open_Beta_1996_08_22:1.13
	MLWorks_Beta_1996_07_02:1.13
	MLWorks_Beta_1996_06_07:1.13
	MLWorks_Beta_1996_06_06:1.13
	MLWorks_Beta_1996_06_05:1.13
	MLWorks_Beta_1996_06_03:1.13
	MLWorks_Beta_1996_05_31:1.13
	MLWorks_Beta_1996_05_30:1.13
	ML_beta_release_12/08/94:1.7
	ML_beta_release_03/08/94:1.7
	ML_revised_beta_release_25/05/94:1.5
	ML_final_beta_release_02/03/94:1.2
	mlworks-28-01-1994:1.2;
locks; strict;
comment	@ * @;


1.15
date	97.05.01.12.47.49;	author jont;	state Exp;
branches
	1.15.1.1
	1.15.2.1
	1.15.3.1;
next	1.14;

1.14
date	97.01.28.15.16.06;	author matthew;	state Exp;
branches
	1.14.1.1;
next	1.13;

1.13
date	95.12.22.13.18.12;	author jont;	state Exp;
branches
	1.13.1.1
	1.13.2.1
	1.13.3.1
	1.13.4.1
	1.13.5.1
	1.13.6.1
	1.13.7.1;
next	1.12;

1.12
date	95.09.08.13.35.22;	author jont;	state Exp;
branches;
next	1.11;

1.11
date	95.08.21.11.01.55;	author io;	state Exp;
branches;
next	1.10;

1.10
date	95.08.09.18.02.19;	author io;	state Exp;
branches;
next	1.9;

1.9
date	95.03.07.16.15.56;	author matthew;	state Exp;
branches;
next	1.8;

1.8
date	94.11.22.17.11.37;	author io;	state Exp;
branches;
next	1.7;

1.7
date	94.06.09.18.05.20;	author io;	state Exp;
branches;
next	1.6;

1.6
date	94.04.21.15.32.01;	author io;	state Exp;
branches;
next	1.5;

1.5
date	94.03.10.12.03.45;	author jont;	state Exp;
branches;
next	1.4;

1.4
date	94.03.08.13.50.51;	author jont;	state Exp;
branches;
next	1.3;

1.3
date	94.03.08.12.06.28;	author jont;	state Exp;
branches;
next	1.2;

1.2
date	93.11.17.14.12.04;	author io;	state Exp;
branches;
next	1.1;

1.1
date	93.10.28.14.31.39;	author simon;	state Exp;
branches;
next	;

1.13.1.1
date	96.09.13.11.19.30;	author hope;	state Exp;
branches;
next	;

1.13.2.1
date	96.10.07.16.09.23;	author hope;	state Exp;
branches;
next	;

1.13.3.1
date	96.10.17.11.27.39;	author hope;	state Exp;
branches;
next	;

1.13.4.1
date	96.11.14.12.53.14;	author hope;	state Exp;
branches
	1.13.4.1.1.1;
next	;

1.13.4.1.1.1
date	96.11.28.15.04.11;	author hope;	state Exp;
branches;
next	;

1.13.5.1
date	96.11.22.18.12.14;	author hope;	state Exp;
branches;
next	;

1.13.6.1
date	96.12.17.17.50.43;	author hope;	state Exp;
branches
	1.13.6.1.1.1;
next	;

1.13.6.1.1.1
date	97.02.24.11.41.06;	author hope;	state Exp;
branches;
next	;

1.13.7.1
date	96.12.18.09.44.54;	author hope;	state Exp;
branches;
next	;

1.14.1.1
date	97.05.12.10.37.24;	author hope;	state Exp;
branches
	1.14.1.1.1.1
	1.14.1.1.2.1
	1.14.1.1.3.1;
next	;

1.14.1.1.1.1
date	97.07.28.18.22.38;	author daveb;	state Exp;
branches
	1.14.1.1.1.1.1.1;
next	;

1.14.1.1.1.1.1.1
date	97.10.07.11.48.17;	author jkbrook;	state Exp;
branches;
next	;

1.14.1.1.2.1
date	97.09.08.17.15.59;	author daveb;	state Exp;
branches;
next	;

1.14.1.1.3.1
date	97.09.09.14.11.56;	author daveb;	state Exp;
branches;
next	;

1.15.1.1
date	97.09.10.19.28.00;	author brucem;	state Exp;
branches;
next	;

1.15.2.1
date	97.09.11.20.57.57;	author daveb;	state Exp;
branches;
next	;

1.15.3.1
date	99.04.01.17.58.34;	author daveb;	state Exp;
branches;
next	;


desc
@Default RCS description
Copyright Harlequin Ltd., 1991
@


1.15
log
@[Bug #30088]
Get rid of MLWorks.Option
@
text
@(*
 Copyright (c) 1993 Harlequin Ltd.
 
 based on ???
 
 Revision Log
 ------------
 $Log: mips_assembly.sml,v $
 * Revision 1.14  1997/01/28  15:16:06  matthew
 * Adding trace_nop_code
 *
 * Revision 1.13  1995/12/22  13:18:12  jont
 * Add extra field to procedure_parameters to contain old (pre register allocation)
 * spill sizes. This is for the i386, where spill assignment is done in the backend
 *
Revision 1.12  1995/09/08  13:35:22  jont
Add a fixed branch type which can't be expanded beyond the 16 bit limit
This can be used to detect disastrous code generation in computed gotos
If this ever occurs, we can then fix the bug

Revision 1.11  1995/08/21  11:01:55  io
adding beqz

Revision 1.10  1995/08/09  18:02:19  io
add BNEZ and R4k branch likely instrs eg bnel bltzl blezl bgtzl bgezl beql

Revision 1.9  1995/03/07  16:15:56  matthew
Improving debugger annotations

Revision 1.8  1994/11/22  17:11:37  io
added new instructions: CFC1 & CTC1
changed C_DF_D to C_SF_D (misspelling)

Revision 1.7  1994/06/09  18:05:20  io
adding comment to nop code

Revision 1.6  1994/04/21  15:32:01  io
adding labels and other misc spelling stuff

Revision 1.5  1994/03/10  12:03:45  jont
Adding support for load offset

Revision 1.4  1994/03/08  13:50:51  jont
Add an offset opcode for jump tables

Revision 1.3  1994/03/08  12:06:28  jont
Add inverse_branch to signature

Revision 1.2  1993/11/17  14:12:04  io
Deleted old SPARC comments and fixed type errors

 *)
 
require "../mir/mirtypes";
require "mips_opcodes";

signature MIPS_ASSEMBLY = sig
  structure MirTypes : MIRTYPES
  structure Mips_Opcodes : MIPS_OPCODES

  datatype load_and_store =
    LB |
    LBU |
    LH |
    LHU |
    LW |
    LWL |
    LWR |
    SB |
    SH |
    SW |
    SWL |
    SWR

  datatype load_and_store_float =
    LWC1 |
    SWC1 |
    MTC1 |
    MFC1 |
    CFC1 |
    CTC1

  datatype arithmetic_and_logical =
    ADD |
    ADDI |
    ADDIU |
    ADDU |
    SUB |
    SUBU |
    AND |
    ANDI |
    OR |
    ORI |
    XOR |
    XORI |
    NOR |
    SLT |
    SLTU |
    SLTI |
    SLTIU |
    SLL |
    SRL |
    SRA |
    SLLV |
    SRLV |
    SRAV

  datatype load_offset = LEO

  datatype special_arithmetic = ADD_AND_MASK

  datatype special_load_offset =
    LOAD_OFFSET_AND_MASK |
    LOAD_OFFSET_HIGH

  datatype mult_and_div =
    MULT |
    MULTU |
    DIV |
    DIVU

  datatype mult_and_div_result =
    MFHI |
    MFLO |
    MTHI |
    MTLO

  datatype sethi = LUI

  datatype branch =
    BA |
    BEQ |
    BNE |
    BEQZ |
    BNEZ |
    BLEZ |
    BGTZ |
    BLTZ |
    BGEZ |
    (* r4k *)
    BNEL |
    BLTZL |
    BLEZL |
    BGTZL |
    BGEZL |
    BEQL

  datatype call = 
    BLTZAL |
    BGEZAL

  datatype jump = 
    JAL |
    JALR |
    J |
    JR

  datatype conv_op =
    CVT_S_D |
    CVT_S_W |
    CVT_D_W |
    CVT_D_S |
    CVT_W_D |
    CVT_W_S

  datatype funary =
    MOV_S |
    MOV_D |
    NEG_S |
    NEG_D |
    ABS_S |
    ABS_D

  datatype fbinary =
    ADD_D |
    ADD_S |
    DIV_D |
    DIV_S |
    MUL_D |
    MUL_S |
    SUB_D |
    SUB_S

  datatype fcmp =
    C_F_S | C_UN_S | C_EQ_S | C_UEQ_S | C_OLT_S | C_ULT_S | C_OLE_S | C_ULE_S |
    C_SF_S | C_NGLE_S | C_SEQ_S | C_NGL_S | C_LT_S | C_NGE_S | C_LE_S | C_NGT_S |
    C_F_D | C_UN_D | C_EQ_D | C_UEQ_D | C_OLT_D | C_ULT_D | C_OLE_D | C_ULE_D |
    C_SF_D | C_NGLE_D | C_SEQ_D | C_NGL_D | C_LT_D | C_NGE_D | C_LE_D | C_NGT_D

  datatype fbranch =
    BC1T |
    BC1F

  datatype reg_or_imm =
    REG of Mips_Opcodes.MachTypes.Mips_Reg |
    IMM of int

  datatype opcode =
    LOAD_AND_STORE of
    load_and_store * Mips_Opcodes.MachTypes.Mips_Reg 
    * Mips_Opcodes.MachTypes.Mips_Reg * int
  | LOAD_AND_STORE_FLOAT of
    load_and_store_float * Mips_Opcodes.MachTypes.Mips_Reg 
    * Mips_Opcodes.MachTypes.Mips_Reg * reg_or_imm
  | ARITHMETIC_AND_LOGICAL of
    arithmetic_and_logical * Mips_Opcodes.MachTypes.Mips_Reg
    * Mips_Opcodes.MachTypes.Mips_Reg * reg_or_imm
  | SPECIAL_ARITHMETIC of special_arithmetic * Mips_Opcodes.MachTypes.Mips_Reg 
    * reg_or_imm * Mips_Opcodes.MachTypes.Mips_Reg
  | MULT_AND_DIV of
    mult_and_div * Mips_Opcodes.MachTypes.Mips_Reg * Mips_Opcodes.MachTypes.Mips_Reg
  | MULT_AND_DIV_RESULT of
    mult_and_div_result * Mips_Opcodes.MachTypes.Mips_Reg
  | SETHI of sethi * Mips_Opcodes.MachTypes.Mips_Reg * int
  | BRANCH of branch * Mips_Opcodes.MachTypes.Mips_Reg * Mips_Opcodes.MachTypes.Mips_Reg * int
  | FIXED_BRANCH of branch * Mips_Opcodes.MachTypes.Mips_Reg * Mips_Opcodes.MachTypes.Mips_Reg * int
  | CALL of call * Mips_Opcodes.MachTypes.Mips_Reg * int *
    MirTypes.Debugger_Types.Backend_Annotation
  | JUMP of jump * reg_or_imm * Mips_Opcodes.MachTypes.Mips_Reg * 
    MirTypes.Debugger_Types.Backend_Annotation
  | FBRANCH of fbranch * int
  | CONV_OP of conv_op * Mips_Opcodes.MachTypes.Mips_Reg * Mips_Opcodes.MachTypes.Mips_Reg
  | FUNARY of funary * Mips_Opcodes.MachTypes.Mips_Reg * Mips_Opcodes.MachTypes.Mips_Reg
  | FBINARY of fbinary * Mips_Opcodes.MachTypes.Mips_Reg * Mips_Opcodes.MachTypes.Mips_Reg *
    Mips_Opcodes.MachTypes.Mips_Reg
  | FCMP of fcmp * Mips_Opcodes.MachTypes.Mips_Reg * Mips_Opcodes.MachTypes.Mips_Reg
  | OFFSET of int
  | LOAD_OFFSET of load_offset * Mips_Opcodes.MachTypes.Mips_Reg * int
  | SPECIAL_LOAD_OFFSET of special_load_offset * Mips_Opcodes.MachTypes.Mips_Reg * Mips_Opcodes.MachTypes.Mips_Reg * int

  val assemble : opcode -> Mips_Opcodes.opcode

  type LabMap

  val make_labmap : opcode list list list -> LabMap

  val print : opcode -> string
  val labprint : opcode * int * LabMap -> string * string

  val reverse_branch : branch -> branch
  val inverse_branch : branch -> branch
  val defines_and_uses :
    opcode ->
    Mips_Opcodes.MachTypes.Mips_Reg MirTypes.Set.Set * Mips_Opcodes.MachTypes.Mips_Reg MirTypes.Set.Set *
    Mips_Opcodes.MachTypes.Mips_Reg MirTypes.Set.Set * Mips_Opcodes.MachTypes.Mips_Reg MirTypes.Set.Set
  val nop_code : opcode
  val other_nop_code : opcode
  val trace_nop_code : opcode
  val nop : opcode * MirTypes.tag option * string
  val nopc : string -> (opcode * MirTypes.tag option * string)
end
@


1.15.3.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a8 4
 * Revision 1.15  1997/05/01  12:47:49  jont
 * [Bug #30088]
 * Get rid of MLWorks.Option
 *
@


1.15.2.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a8 4
 * Revision 1.15  1997/05/01  12:47:49  jont
 * [Bug #30088]
 * Get rid of MLWorks.Option
 *
@


1.15.1.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a8 4
 * Revision 1.15  1997/05/01  12:47:49  jont
 * [Bug #30088]
 * Get rid of MLWorks.Option
 *
@


1.14
log
@Adding trace_nop_code
@
text
@d9 3
d249 2
a250 2
  val nop : opcode * MirTypes.tag MLWorks.Option.option * string
  val nopc : string -> (opcode * MirTypes.tag MLWorks.Option.option * string)
@


1.14.1.1
log
@branched from 1.14
@
text
@a8 3
 * Revision 1.14  1997/01/28  15:16:06  matthew
 * Adding trace_nop_code
 *
@


1.14.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a8 3
 * Revision 1.14.1.1  1997/05/12  10:37:24  hope
 * branched from 1.14
 *
@


1.14.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a8 3
 * Revision 1.14.1.1  1997/05/12  10:37:24  hope
 * branched from 1.14
 *
@


1.14.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a8 3
 * Revision 1.14.1.1  1997/05/12  10:37:24  hope
 * branched from 1.14
 *
@


1.14.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a8 3
 * Revision 1.14.1.1.1.1  1997/07/28  18:22:38  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.13
log
@Add extra field to procedure_parameters to contain old (pre register allocation)
spill sizes. This is for the i386, where spill assignment is done in the backend
@
text
@d9 4
d245 1
@


1.13.7.1
log
@branched from 1.13
@
text
@a8 4
 * Revision 1.13  1995/12/22  13:18:12  jont
 * Add extra field to procedure_parameters to contain old (pre register allocation)
 * spill sizes. This is for the i386, where spill assignment is done in the backend
 *
@


1.13.6.1
log
@branched from 1.13
@
text
@a8 4
 * Revision 1.13  1995/12/22  13:18:12  jont
 * Add extra field to procedure_parameters to contain old (pre register allocation)
 * spill sizes. This is for the i386, where spill assignment is done in the backend
 *
@


1.13.6.1.1.1
log
@branched from 1.13.6.1
@
text
@a8 3
 * Revision 1.13.6.1  1996/12/17  17:50:43  hope
 * branched from 1.13
 *
@


1.13.5.1
log
@branched from 1.13
@
text
@a8 4
 * Revision 1.13  1995/12/22  13:18:12  jont
 * Add extra field to procedure_parameters to contain old (pre register allocation)
 * spill sizes. This is for the i386, where spill assignment is done in the backend
 *
@


1.13.4.1
log
@branched from 1.13
@
text
@a8 4
 * Revision 1.13  1995/12/22  13:18:12  jont
 * Add extra field to procedure_parameters to contain old (pre register allocation)
 * spill sizes. This is for the i386, where spill assignment is done in the backend
 *
@


1.13.4.1.1.1
log
@branched from 1.13.4.1
@
text
@a8 3
 * Revision 1.13.4.1  1996/11/14  12:53:14  hope
 * branched from 1.13
 *
@


1.13.3.1
log
@branched from 1.13
@
text
@a8 4
 * Revision 1.13  1995/12/22  13:18:12  jont
 * Add extra field to procedure_parameters to contain old (pre register allocation)
 * spill sizes. This is for the i386, where spill assignment is done in the backend
 *
@


1.13.2.1
log
@branched from 1.13
@
text
@a8 4
 * Revision 1.13  1995/12/22  13:18:12  jont
 * Add extra field to procedure_parameters to contain old (pre register allocation)
 * spill sizes. This is for the i386, where spill assignment is done in the backend
 *
@


1.13.1.1
log
@branched from 1.13
@
text
@a8 4
 * Revision 1.13  1995/12/22  13:18:12  jont
 * Add extra field to procedure_parameters to contain old (pre register allocation)
 * spill sizes. This is for the i386, where spill assignment is done in the backend
 *
@


1.12
log
@Add a fixed branch type which can't be expanded beyond the 16 bit limit
This can be used to detect disastrous code generation in computed gotos
If this ever occurs, we can then fix the bug
@
text
@d9 5
d241 2
a242 2
  val nop : opcode * MirTypes.tag MirTypes.Option.opt * string
  val nopc : string -> (opcode * MirTypes.tag MirTypes.Option.opt * string)
@


1.11
log
@adding beqz
@
text
@d9 3
d204 1
@


1.10
log
@add BNEZ and R4k branch likely instrs eg bnel bltzl blezl bgtzl bgezl beql
@
text
@d9 3
d119 1
@


1.9
log
@Improving debugger annotations
@
text
@d9 3
d116 1
d120 8
a127 1
    BGEZ
@


1.8
log
@added new instructions: CFC1 & CTC1
changed C_DF_D to C_SF_D (misspelling)
@
text
@d9 4
d186 4
a189 3
  | CALL of call * Mips_Opcodes.MachTypes.Mips_Reg * int
  | JUMP of jump * reg_or_imm * Mips_Opcodes.MachTypes.Mips_Reg
    * MirTypes.Debugger_Types.Backend_Annotation
@


1.7
log
@adding comment to nop code
@
text
@d9 3
d54 3
a56 1
    MFC1
d154 1
a154 1
    C_DF_D | C_NGLE_D | C_SEQ_D | C_NGL_D | C_LT_D | C_NGE_D | C_LE_D | C_NGT_D
@


1.6
log
@adding labels and other misc spelling stuff
@
text
@d9 3
d208 1
@


1.5
log
@Adding support for load offset
@
text
@d9 3
d188 5
d194 2
@


1.4
log
@Add an offset opcode for jump tables
@
text
@d9 3
d72 2
d76 4
d181 2
@


1.3
log
@Add inverse_branch to signature
@
text
@d9 3
d171 1
@


1.2
log
@Deleted old SPARC comments and fixed type errors
@
text
@d8 4
a11 1
 $Log$
d172 1
@


1.1
log
@Initial revision
@
text
@a0 1
(* mips_assembly.sml the signature *)
d2 9
a10 7
$Log
Copyright (c) 1993 Harlequin Ltd.
*)

;;; Copyright 1991 Harlequin Ltd.
;;; $Log$

@
