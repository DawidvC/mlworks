head	1.5;
access;
symbols
	MLW_daveb_inline_1_4_99:1.5.3
	MLWorks_21c0_1999_03_25:1.5
	MLWorks_20c1_1998_08_20:1.5
	MLWorks_20c0_1998_08_04:1.5
	MLWorks_20b2c2_1998_06_19:1.5
	MLWorks_20b2_Windows_1998_06_12:1.5
	MLWorks_20b1c1_1998_05_07:1.5
	MLWorks_20b0_1998_04_07:1.5
	MLWorks_20b0_1998_03_20:1.5
	MLWorks_20m2_1998_02_16:1.5
	MLWorks_20m1_1997_10_23:1.5
	MLWorks_11r1:1.4.8.1.1.1.1
	MLWorks_workspace_97:1.5.2
	MLWorks_dt_wizard:1.5.1
	MLWorks_11c0_1997_09_09:1.4.8.1.1.1
	MLWorks_10r3:1.4.8.1.3
	MLWorks_10r2_551:1.4.8.1.2
	MLWorks_11:1.4.8.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.4.8.1
	MLWorks_20m0_1997_06_20:1.5
	MLWorks_1_0_r2c2_1997_06_14:1.4.8.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.4.8.1
	MLWorks_1_0_r2c1_1997_05_12:1.4.8
	MLWorks_BugFix_1997_04_24:1.4
	MLWorks_1_0_r2_Win32_1997_04_11:1.4
	MLWorks_1_0_r2_Unix_1997_04_04:1.4
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.4.6.1.1
	MLWorks_gui_1996_12_18:1.4.7
	MLWorks_1_0_Win32_1996_12_17:1.4.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.4.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.4.4.1
	MLWorks_1_0_Irix_1996_11_28:1.4.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.4.5
	MLWorks_1_0_Unix_1996_11_14:1.4.4
	MLWorks_Open_Beta2_1996_10_11:1.4.3
	MLWorks_License_dev:1.4.2
	MLWorks_1_open_beta_1996_09_13:1.4.1
	MLWorks_Open_Beta_1996_08_22:1.4
	MLWorks_Beta_1996_07_02:1.4
	MLWorks_Beta_1996_06_07:1.4
	MLWorks_Beta_1996_06_06:1.4
	MLWorks_Beta_1996_06_05:1.4
	MLWorks_Beta_1996_06_03:1.4
	MLWorks_Beta_1996_05_31:1.4
	MLWorks_Beta_1996_05_30:1.3;
locks; strict;
comment	@ * @;


1.5
date	97.05.28.11.25.31;	author daveb;	state Exp;
branches
	1.5.1.1
	1.5.2.1
	1.5.3.1;
next	1.4;

1.4
date	96.05.30.12.46.28;	author daveb;	state Exp;
branches
	1.4.1.1
	1.4.2.1
	1.4.3.1
	1.4.4.1
	1.4.5.1
	1.4.6.1
	1.4.7.1
	1.4.8.1;
next	1.3;

1.3
date	96.04.30.17.17.35;	author jont;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.10.57.08;	author daveb;	state Exp;
branches;
next	1.1;

1.1
date	95.12.05.10.57.48;	author daveb;	state Exp;
branches;
next	;

1.4.1.1
date	96.09.13.11.18.56;	author hope;	state Exp;
branches;
next	;

1.4.2.1
date	96.10.07.16.08.49;	author hope;	state Exp;
branches;
next	;

1.4.3.1
date	96.10.17.11.27.04;	author hope;	state Exp;
branches;
next	;

1.4.4.1
date	96.11.14.12.52.34;	author hope;	state Exp;
branches
	1.4.4.1.1.1;
next	;

1.4.4.1.1.1
date	96.11.28.15.03.32;	author hope;	state Exp;
branches;
next	;

1.4.5.1
date	96.11.22.18.11.41;	author hope;	state Exp;
branches;
next	;

1.4.6.1
date	96.12.17.17.50.11;	author hope;	state Exp;
branches
	1.4.6.1.1.1;
next	;

1.4.6.1.1.1
date	97.02.24.11.40.28;	author hope;	state Exp;
branches;
next	;

1.4.7.1
date	96.12.18.09.44.19;	author hope;	state Exp;
branches;
next	;

1.4.8.1
date	97.05.12.10.36.48;	author hope;	state Exp;
branches
	1.4.8.1.1.1
	1.4.8.1.2.1
	1.4.8.1.3.1;
next	;

1.4.8.1.1.1
date	97.07.28.18.22.05;	author daveb;	state Exp;
branches
	1.4.8.1.1.1.1.1;
next	;

1.4.8.1.1.1.1.1
date	97.10.07.11.47.44;	author jkbrook;	state Exp;
branches;
next	;

1.4.8.1.2.1
date	97.09.08.17.15.27;	author daveb;	state Exp;
branches;
next	;

1.4.8.1.3.1
date	97.09.09.14.11.21;	author daveb;	state Exp;
branches;
next	;

1.5.1.1
date	97.09.10.19.27.25;	author brucem;	state Exp;
branches;
next	;

1.5.2.1
date	97.09.11.20.57.25;	author daveb;	state Exp;
branches;
next	;

1.5.3.1
date	99.04.01.17.58.19;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
Read dependency information from .sml files (taken from make/_recompile).
@


1.5
log
@[Bug #30090]
Converted lexer to Basis IO.
@
text
@(* _depend.sml the functor *)
(*
 * $Log: _depend.sml,v $
 * Revision 1.4  1996/05/30  12:46:28  daveb
 * The Io exception is no longer at top level.
 *
 * Revision 1.3  1996/04/30  17:17:35  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
 * Revision 1.2  1995/12/14  10:57:08  daveb
 * Removed unnecessary dependencies.
 *
 *  Revision 1.1  1995/12/05  10:57:48  daveb
 *  new unit
 *  Read dependency information from .sml files (taken from make/_recompile).
 *

 Copyright (c) 1995 Harlequin Ltd.
*)

require "../basis/__io";
require "../basis/__text_io";

require "../basics/module_id";
require "../lexer/lexer";
require "../main/options";

require "depend";

functor Depend
  (structure Lexer      : LEXER
   structure ModuleId	: MODULE_ID
   structure Options	: OPTIONS

   sharing type ModuleId.Symbol = Lexer.Token.Symbol.Symbol
   sharing type ModuleId.Location = Lexer.Info.Location.T
   sharing type Options.options = Lexer.Options
) : DEPEND =
  struct
    structure Lexer = Lexer
    structure Info = Lexer.Info
    structure Token = Lexer.Token

    type ModuleId = ModuleId.ModuleId;

    (* Returns reversed list of imports *)
    fun get_imports_from_stream (is_pervasive, error_info, ts, imports) =
      let
	val options = Options.default_options
      in
	case Lexer.getToken error_info (options, Token.PLAIN_STATE, ts) of
	  Token.RESERVED Token.REQUIRE =>
	    (case Lexer.getToken error_info (options, Token.PLAIN_STATE, ts) of
	       Token.STRING filename =>
		 let
		   val _ =
	             case Lexer.getToken
		    	    error_info
			    (options, Token.PLAIN_STATE, ts)
	             of Token.RESERVED Token.SEMICOLON =>
		       ()
	             |  _ =>
		       Info.error' error_info
				    (Info.RECOVERABLE,
				     Lexer.locate ts,
				     "missing `;' after `require'")
		
		   val module_id =
		     if is_pervasive then
		       ModuleId.perv_from_require_string
			 (filename, Lexer.locate ts)
		     else
		       ModuleId.from_require_string
			 (filename, Lexer.locate ts)
		 in
		   get_imports_from_stream
		     (is_pervasive, error_info, ts, module_id :: imports)
		 end
	     | _ =>
		 Info.error' error_info
			     (Info.FATAL,
			      Lexer.locate ts,
		              "missing string after `require'"))
	| _ => imports
      end

    (* Returns list of imports *)
    fun get_imports (is_pervasive, error_info, filename) =
      let
	val stream = TextIO.openIn filename
        val ts = Lexer.mkFileTokenStream (stream, filename)
	val imports =
	  get_imports_from_stream (is_pervasive, error_info, ts, [])
      in
	TextIO.closeIn stream;
	rev imports
      end handle IO.Io _ => []

  end
@


1.5.3.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a3 4
 * Revision 1.5  1997/05/28  11:25:31  daveb
 * [Bug #30090]
 * Converted lexer to Basis IO.
 *
@


1.5.2.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a3 4
 * Revision 1.5  1997/05/28  11:25:31  daveb
 * [Bug #30090]
 * Converted lexer to Basis IO.
 *
@


1.5.1.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a3 4
 * Revision 1.5  1997/05/28  11:25:31  daveb
 * [Bug #30090]
 * Converted lexer to Basis IO.
 *
@


1.4
log
@The Io exception is no longer at top level.
@
text
@d4 3
d24 3
d93 1
a93 1
	val stream = MLWorks.IO.open_in filename
d98 1
a98 1
	MLWorks.IO.close_in stream;
d100 1
a100 1
      end handle MLWorks.IO.Io _ => []
@


1.4.8.1
log
@branched from 1.4
@
text
@a3 3
 * Revision 1.4  1996/05/30  12:46:28  daveb
 * The Io exception is no longer at top level.
 *
@


1.4.8.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a3 3
 * Revision 1.4.8.1  1997/05/12  10:36:48  hope
 * branched from 1.4
 *
@


1.4.8.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a3 3
 * Revision 1.4.8.1  1997/05/12  10:36:48  hope
 * branched from 1.4
 *
@


1.4.8.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a3 3
 * Revision 1.4.8.1  1997/05/12  10:36:48  hope
 * branched from 1.4
 *
@


1.4.8.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a3 3
 * Revision 1.4.8.1.1.1  1997/07/28  18:22:05  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.4.7.1
log
@branched from 1.4
@
text
@a3 3
 * Revision 1.4  1996/05/30  12:46:28  daveb
 * The Io exception is no longer at top level.
 *
@


1.4.6.1
log
@branched from 1.4
@
text
@a3 3
 * Revision 1.4  1996/05/30  12:46:28  daveb
 * The Io exception is no longer at top level.
 *
@


1.4.6.1.1.1
log
@branched from 1.4.6.1
@
text
@a3 3
 * Revision 1.4.6.1  1996/12/17  17:50:11  hope
 * branched from 1.4
 *
@


1.4.5.1
log
@branched from 1.4
@
text
@a3 3
 * Revision 1.4  1996/05/30  12:46:28  daveb
 * The Io exception is no longer at top level.
 *
@


1.4.4.1
log
@branched from 1.4
@
text
@a3 3
 * Revision 1.4  1996/05/30  12:46:28  daveb
 * The Io exception is no longer at top level.
 *
@


1.4.4.1.1.1
log
@branched from 1.4.4.1
@
text
@a3 3
 * Revision 1.4.4.1  1996/11/14  12:52:34  hope
 * branched from 1.4
 *
@


1.4.3.1
log
@branched from 1.4
@
text
@a3 3
 * Revision 1.4  1996/05/30  12:46:28  daveb
 * The Io exception is no longer at top level.
 *
@


1.4.2.1
log
@branched from 1.4
@
text
@a3 3
 * Revision 1.4  1996/05/30  12:46:28  daveb
 * The Io exception is no longer at top level.
 *
@


1.4.1.1
log
@branched from 1.4
@
text
@a3 3
 * Revision 1.4  1996/05/30  12:46:28  daveb
 * The Io exception is no longer at top level.
 *
@


1.3
log
@String functions explode, implode, chr and ord now only available from String
io functions and types
instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
now only available from MLWorks.IO
@
text
@d4 6
d94 1
a94 1
      end handle Io _ => []
@


1.2
log
@Removed unnecessary dependencies.
@
text
@d4 3
d81 1
a81 1
	val stream = open_in filename
d86 1
a86 1
	close_in stream;
@


1.1
log
@new unit
Read dependency information from .sml files (taken from make/_recompile).
@
text
@d3 5
a7 1
$Log$
a11 2
require "../utils/crash";
require "../basics/module";
a12 1
require "../make/os";
a13 2
require "../main/encapsulate";
require "../main/io";
a14 1
require "../utils/diagnostic";
d19 1
a19 5
  (structure Crash	: CRASH
   structure Module	: MODULE
   structure Os		: OS
   structure Lexer      : LEXER
   structure Io		: IO
a20 1
   structure Diagnostic	: DIAGNOSTIC
a22 1
   sharing type ModuleId.ModuleId = Module.ModuleId
d24 1
a24 1
   sharing type ModuleId.Location = Lexer.Info.Location.T = Module.Location
a27 1
    structure Diagnostic = Diagnostic
d32 1
a32 12
    type Options = Lexer.Options;
    type ModuleId = Module.ModuleId;

    val _ = Diagnostic.set 0;

    fun diagnostic (level, output_function) =
      Diagnostic.output level
      (fn verbosity => "Recompile " :: (output_function verbosity))

    fun crash message =
      Info.error' Info.default_options
		  (Info.FAULT, Info.Location.UNKNOWN, "Recompile: " ^ message)
d40 1
a40 1
	  Lexer.Token.RESERVED Lexer.Token.REQUIRE =>
d42 1
a42 1
	       Lexer.Token.STRING filename =>
d48 1
a48 1
	             of Lexer.Token.RESERVED Lexer.Token.SEMICOLON =>
d75 1
a75 1
    (* Returns reversed list of imports *)
a77 3
	(*
	val _ = output (std_out, "reading imports for " ^ filename ^ "\n")
	*)
@
