head	1.28;
access;
symbols
	MLW_daveb_inline_1_4_99:1.28.11
	MLWorks_21c0_1999_03_25:1.28
	MLWorks_20c1_1998_08_20:1.28
	MLWorks_20c0_1998_08_04:1.28
	MLWorks_20b2c2_1998_06_19:1.28
	MLWorks_20b2_Windows_1998_06_12:1.28
	MLWorks_20b1c1_1998_05_07:1.28
	MLWorks_20b0_1998_04_07:1.28
	MLWorks_20b0_1998_03_20:1.28
	MLWorks_20m2_1998_02_16:1.28
	MLWorks_20m1_1997_10_23:1.28
	MLWorks_11r1:1.28.8.1.1.1.1
	MLWorks_workspace_97:1.28.10
	MLWorks_dt_wizard:1.28.9
	MLWorks_11c0_1997_09_09:1.28.8.1.1.1
	MLWorks_10r3:1.28.8.1.3
	MLWorks_10r2_551:1.28.8.1.2
	MLWorks_11:1.28.8.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.28.8.1
	MLWorks_20m0_1997_06_20:1.28
	MLWorks_1_0_r2c2_1997_06_14:1.28.8.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.28.8.1
	MLWorks_1_0_r2c1_1997_05_12:1.28.8
	MLWorks_BugFix_1997_04_24:1.28
	MLWorks_1_0_r2_Win32_1997_04_11:1.28
	MLWorks_1_0_r2_Unix_1997_04_04:1.28
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.28.6.1.1
	MLWorks_gui_1996_12_18:1.28.7
	MLWorks_1_0_Win32_1996_12_17:1.28.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.28.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.28.4.1
	MLWorks_1_0_Irix_1996_11_28:1.28.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.28.5
	MLWorks_1_0_Unix_1996_11_14:1.28.4
	MLWorks_Open_Beta2_1996_10_11:1.28.3
	MLWorks_License_dev:1.28.2
	MLWorks_1_open_beta_1996_09_13:1.28.1
	MLWorks_Open_Beta_1996_08_22:1.28
	MLWorks_Beta_1996_07_02:1.28
	MLWorks_Beta_1996_06_07:1.28
	MLWorks_Beta_1996_06_06:1.28
	MLWorks_Beta_1996_06_05:1.28
	MLWorks_Beta_1996_06_03:1.28
	MLWorks_Beta_1996_05_31:1.28
	MLWorks_Beta_1996_05_30:1.28
	ML_beta_release_12/08/94:1.27
	ML_beta_release_03/08/94:1.27
	ML_revised_beta_release_25/05/94:1.27
	ML_final_beta_release_02/03/94:1.27
	mlworks-28-01-1994:1.25
	Release:1.25
	mlworks-beta-01-09-1993:1.25
	MLWorks-1-0-4-29/01/1993:1.21
	MLWorks-1-0-3-21/12/1992:1.21
	MLWorks-1-0-2-15/12/1992:1.21
	MLWorks-1-0-1-04/12/1992:1.21
	checkpoint_17_08_92:1.15
	Ten15_release_21-08-91:1.10
	Ten15_release_19-08-91:1.10
	ten15_release:1.10;
locks; strict;
comment	@ * @;


1.28
date	95.02.13.15.12.42;	author matthew;	state Exp;
branches
	1.28.1.1
	1.28.2.1
	1.28.3.1
	1.28.4.1
	1.28.5.1
	1.28.6.1
	1.28.7.1
	1.28.8.1
	1.28.9.1
	1.28.10.1
	1.28.11.1;
next	1.27;

1.27
date	94.02.28.07.10.26;	author nosa;	state Exp;
branches;
next	1.26;

1.26
date	94.02.25.12.51.15;	author daveb;	state Exp;
branches;
next	1.25;

1.25
date	93.06.25.08.36.08;	author daveb;	state Exp;
branches
	1.25.1.1;
next	1.24;

1.24
date	93.03.10.16.29.26;	author matthew;	state Exp;
branches;
next	1.23;

1.23
date	93.03.09.13.05.14;	author matthew;	state Exp;
branches;
next	1.22;

1.22
date	93.02.01.16.20.04;	author matthew;	state Exp;
branches;
next	1.21;

1.21
date	92.11.04.15.47.04;	author matthew;	state Exp;
branches;
next	1.20;

1.20
date	92.09.23.15.10.46;	author jont;	state Exp;
branches;
next	1.19;

1.19
date	92.09.10.09.17.36;	author richard;	state Exp;
branches;
next	1.18;

1.18
date	92.09.02.14.21.54;	author richard;	state Exp;
branches;
next	1.17;

1.17
date	92.08.26.12.21.36;	author jont;	state Exp;
branches;
next	1.16;

1.16
date	92.08.25.14.45.08;	author clive;	state Exp;
branches;
next	1.15;

1.15
date	92.08.05.16.58.49;	author jont;	state Exp;
branches;
next	1.14;

1.14
date	92.03.17.18.31.34;	author jont;	state Exp;
branches;
next	1.13;

1.13
date	92.02.20.12.23.14;	author jont;	state Exp;
branches;
next	1.12;

1.12
date	92.01.09.16.59.01;	author jont;	state Exp;
branches;
next	1.11;

1.11
date	92.01.06.12.54.16;	author jont;	state Exp;
branches;
next	1.10;

1.10
date	91.07.11.10.34.27;	author jont;	state Exp;
branches;
next	1.9;

1.9
date	91.07.09.15.52.41;	author jont;	state Exp;
branches;
next	1.8;

1.8
date	91.07.09.13.49.57;	author jont;	state Exp;
branches;
next	1.7;

1.7
date	91.07.08.17.07.07;	author jont;	state Exp;
branches;
next	1.6;

1.6
date	91.06.26.12.59.46;	author jont;	state Exp;
branches;
next	1.5;

1.5
date	91.06.19.13.41.00;	author jont;	state Exp;
branches;
next	1.4;

1.4
date	91.06.17.13.12.00;	author jont;	state Exp;
branches;
next	1.3;

1.3
date	91.06.13.10.41.00;	author jont;	state Exp;
branches;
next	1.2;

1.2
date	91.06.11.16.55.11;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	91.06.11.10.03.23;	author jont;	state Exp;
branches;
next	;

1.25.1.1
date	93.06.25.08.36.08;	author jont;	state Exp;
branches;
next	;

1.28.1.1
date	96.09.13.11.17.13;	author hope;	state Exp;
branches;
next	;

1.28.2.1
date	96.10.07.16.06.59;	author hope;	state Exp;
branches;
next	;

1.28.3.1
date	96.10.17.11.25.16;	author hope;	state Exp;
branches;
next	;

1.28.4.1
date	96.11.14.12.50.15;	author hope;	state Exp;
branches
	1.28.4.1.1.1;
next	;

1.28.4.1.1.1
date	96.11.28.15.01.23;	author hope;	state Exp;
branches;
next	;

1.28.5.1
date	96.11.22.18.09.42;	author hope;	state Exp;
branches;
next	;

1.28.6.1
date	96.12.17.17.48.21;	author hope;	state Exp;
branches
	1.28.6.1.1.1;
next	;

1.28.6.1.1.1
date	97.02.24.11.38.16;	author hope;	state Exp;
branches;
next	;

1.28.7.1
date	96.12.18.09.42.22;	author hope;	state Exp;
branches;
next	;

1.28.8.1
date	97.05.12.10.34.51;	author hope;	state Exp;
branches
	1.28.8.1.1.1
	1.28.8.1.2.1
	1.28.8.1.3.1;
next	;

1.28.8.1.1.1
date	97.07.28.18.20.12;	author daveb;	state Exp;
branches
	1.28.8.1.1.1.1.1;
next	;

1.28.8.1.1.1.1.1
date	97.10.07.11.45.20;	author jkbrook;	state Exp;
branches;
next	;

1.28.8.1.2.1
date	97.09.08.17.13.43;	author daveb;	state Exp;
branches;
next	;

1.28.8.1.3.1
date	97.09.09.14.09.25;	author daveb;	state Exp;
branches;
next	;

1.28.9.1
date	97.09.10.19.25.06;	author brucem;	state Exp;
branches;
next	;

1.28.10.1
date	97.09.11.20.55.33;	author daveb;	state Exp;
branches;
next	;

1.28.11.1
date	99.04.01.17.57.13;	author daveb;	state Exp;
branches;
next	;


desc
@Abstract syntax to lambda calculus translation. Also defines types.
@


1.28
log
@Removed Options structure from Debugger_Types
@
text
@(* lambda.sml the signature *)
(*
$Log: lambda.sml,v $
Revision 1.27  1994/02/28  07:10:26  nosa
Debugger environments for Modules Debugger.

Revision 1.26  1994/02/25  12:51:15  daveb
removing old parameter to trans_top_dec.

Revision 1.25  1993/06/25  08:36:08  daveb
Added BasisTypes structure.

Revision 1.24  1993/03/10  16:29:26  matthew
Signature revisions

Revision 1.23  1993/03/09  13:05:14  matthew
Options & Info changes
Absyn changes

Revision 1.22  1993/02/01  16:20:04  matthew
Added sharing constraints

Revision 1.21  1992/11/04  15:47:04  matthew
Changed Error structure to Info

Revision 1.20  1992/09/23  15:10:46  jont
Removed add_fn_names (obsolete)

Revision 1.19  1992/09/10  09:17:36  richard
Created a type `information' which wraps up the debugger information
needed in so many parts of the compiler.

Revision 1.18  1992/09/02  14:21:54  richard
Installed central error reporting mechanism.

Revision 1.17  1992/08/26  12:21:36  jont
Removed some redundant structures and sharing

Revision 1.16  1992/08/25  14:45:08  clive
Added the recording of information about exceptions

Revision 1.15  1992/08/05  16:58:49  jont
Removed some structures and sharing

Revision 1.14  1992/03/17  18:31:34  jont
Added bool ref for add_fn_names to control addition of function names

Revision 1.13  1992/02/20  12:23:14  jont
Added show_match to control printing of match trees

Revision 1.12  1992/01/09  16:59:01  jont
Added diagnostic parameter

Revision 1.11  1992/01/06  12:54:16  jont
Changed trans_topdec and complete_struct_from_topenv to use new
binding type

Revision 1.10  1991/07/11  10:34:27  jont
New LETREC with expression in it again.

Revision 1.9  91/07/09  15:52:41  jont
More trouble with Regbind

Revision 1.8  91/07/09  13:49:57  jont
Removed trans_str_dec from signature. Regbind problems (temporarily?)
gone away

Revision 1.7  91/07/08  17:07:07  jont
Changed environments to top environments to cope with functors

Revision 1.6  91/06/26  12:59:46  jont
Removed superfluous definitions, all except trans_str_dec, as the functor
fails to compile if I remove this as well.

Revision 1.5  91/06/19  13:41:00  jont
Removed trans_exp, trans_dec, trans_match from signature,
as these should not be needed externally. Eventually there
will only be a trans_top_dec function I suspect.

Revision 1.4  91/06/17  13:12:00  jont
Added trans_str_exp.
Removed subs from parameter list for trans_dec

Revision 1.3  91/06/13  10:41:00  jont
Added trans_strdec

Revision 1.2  91/06/11  16:55:11  jont
Abstracted out the types from the functions

Copyright (c) 1991 Harlequin Ltd.
*)

require "../basics/absyn";
require "../main/info";
require "../main/options";
require "../typechecker/basistypes";
require "environtypes";

signature LAMBDA = sig
  structure Absyn: ABSYN
  structure EnvironTypes: ENVIRONTYPES
  structure Info : INFO
  structure Options : OPTIONS
  structure BasisTypes : BASISTYPES

  type DebugInformation

  sharing Info.Location = Absyn.Ident.Location

  sharing Absyn.Ident = EnvironTypes.LambdaTypes.Ident

  sharing type Absyn.Type = EnvironTypes.LambdaTypes.Type = BasisTypes.Datatypes.Type

  val trans_top_dec :
    Info.options ->
    Options.options * Absyn.TopDec * 
    EnvironTypes.Top_Env * EnvironTypes.DebuggerEnv * 
    DebugInformation * BasisTypes.Basis * bool ->
    EnvironTypes.Top_Env * EnvironTypes.DebuggerEnv * 
    EnvironTypes.LambdaTypes.binding list * DebugInformation
end
@


1.28.11.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a3 3
 * Revision 1.28  1995/02/13  15:12:42  matthew
 * Removed Options structure from Debugger_Types
 *
@


1.28.10.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a3 3
 * Revision 1.28  1995/02/13  15:12:42  matthew
 * Removed Options structure from Debugger_Types
 *
@


1.28.9.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a3 3
 * Revision 1.28  1995/02/13  15:12:42  matthew
 * Removed Options structure from Debugger_Types
 *
@


1.28.8.1
log
@branched from 1.28
@
text
@a3 3
 * Revision 1.28  1995/02/13  15:12:42  matthew
 * Removed Options structure from Debugger_Types
 *
@


1.28.8.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a3 3
 * Revision 1.28.8.1  1997/05/12  10:34:51  hope
 * branched from 1.28
 *
@


1.28.8.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a3 3
 * Revision 1.28.8.1  1997/05/12  10:34:51  hope
 * branched from 1.28
 *
@


1.28.8.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a3 3
 * Revision 1.28.8.1  1997/05/12  10:34:51  hope
 * branched from 1.28
 *
@


1.28.8.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a3 3
 * Revision 1.28.8.1.1.1  1997/07/28  18:20:12  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.28.7.1
log
@branched from 1.28
@
text
@a3 3
 * Revision 1.28  1995/02/13  15:12:42  matthew
 * Removed Options structure from Debugger_Types
 *
@


1.28.6.1
log
@branched from 1.28
@
text
@a3 3
 * Revision 1.28  1995/02/13  15:12:42  matthew
 * Removed Options structure from Debugger_Types
 *
@


1.28.6.1.1.1
log
@branched from 1.28.6.1
@
text
@a3 3
 * Revision 1.28.6.1  1996/12/17  17:48:21  hope
 * branched from 1.28
 *
@


1.28.5.1
log
@branched from 1.28
@
text
@a3 3
 * Revision 1.28  1995/02/13  15:12:42  matthew
 * Removed Options structure from Debugger_Types
 *
@


1.28.4.1
log
@branched from 1.28
@
text
@a3 3
 * Revision 1.28  1995/02/13  15:12:42  matthew
 * Removed Options structure from Debugger_Types
 *
@


1.28.4.1.1.1
log
@branched from 1.28.4.1
@
text
@a3 3
 * Revision 1.28.4.1  1996/11/14  12:50:15  hope
 * branched from 1.28
 *
@


1.28.3.1
log
@branched from 1.28
@
text
@a3 3
 * Revision 1.28  1995/02/13  15:12:42  matthew
 * Removed Options structure from Debugger_Types
 *
@


1.28.2.1
log
@branched from 1.28
@
text
@a3 3
 * Revision 1.28  1995/02/13  15:12:42  matthew
 * Removed Options structure from Debugger_Types
 *
@


1.28.1.1
log
@branched from 1.28
@
text
@a3 3
 * Revision 1.28  1995/02/13  15:12:42  matthew
 * Removed Options structure from Debugger_Types
 *
@


1.27
log
@Debugger environments for Modules Debugger.
@
text
@d4 3
a92 1
require "../utils/diagnostic";
a93 1
require "../debugger/debugger_types";
d95 1
a99 1
  structure Diagnostic : DIAGNOSTIC
a101 1
  structure Debugger_Types : DEBUGGER_TYPES
d103 1
d105 2
a106 1
    
d112 1
a112 2
  sharing type Absyn.Type = Debugger_Types.Type =
	  EnvironTypes.LambdaTypes.Type = BasisTypes.Datatypes.Type
d116 1
a116 1
    Debugger_Types.Options.options * Absyn.TopDec * 
d118 1
a118 1
    Debugger_Types.information * BasisTypes.Basis * bool ->
d120 1
a120 1
    EnvironTypes.LambdaTypes.binding list * Debugger_Types.information
@


1.26
log
@removing old parameter to trans_top_dec.
@
text
@d4 3
d115 5
a119 4
    Debugger_Types.Options.options * Absyn.TopDec * EnvironTypes.Top_Env *
      Debugger_Types.information * BasisTypes.Basis ->
    EnvironTypes.Top_Env * EnvironTypes.LambdaTypes.binding list *
      Debugger_Types.information
@


1.25
log
@Added BasisTypes structure.
@
text
@d4 3
d113 1
a113 1
      bool * Debugger_Types.information * BasisTypes.Basis ->
@


1.25.1.1
log
@Fork for bug fixing
@
text
@a3 3
Revision 1.25  1993/06/25  08:36:08  daveb
Added BasisTypes structure.

@


1.24
log
@Signature revisions
@
text
@d4 3
d88 1
d97 1
d104 2
a105 5
  sharing type Absyn.Type = Debugger_Types.Type = EnvironTypes.LambdaTypes.Type

  val complete_struct_from_topenv:
    EnvironTypes.Top_Env * EnvironTypes.LambdaTypes.binding list
    -> EnvironTypes.Top_Env * EnvironTypes.LambdaTypes.LambdaExp
d109 4
a112 4
    Debugger_Types.Options.options * Absyn.TopDec * EnvironTypes.Top_Env * bool * Debugger_Types.information ->
    EnvironTypes.Top_Env * EnvironTypes.LambdaTypes.binding list * Debugger_Types.information

  val show_match : bool ref
@


1.23
log
@Options & Info changes
Absyn changes
@
text
@d4 4
a94 1
  sharing EnvironTypes.LambdaTypes.Datatypes = Debugger_Types.Datatypes
d97 1
a97 1
  sharing Absyn.Ident = Debugger_Types.Datatypes.Ident
d99 1
a99 2
  sharing type Absyn.Type = Debugger_Types.Datatypes.Type
  sharing type Absyn.Structure = Debugger_Types.Datatypes.Structure
d107 1
a107 1
    Debugger_Types.Options.print_options * Absyn.TopDec * EnvironTypes.Top_Env * bool * Debugger_Types.information ->
@


1.22
log
@Added sharing constraints
@
text
@d4 3
d89 6
d96 2
a97 3
  sharing EnvironTypes.LambdaTypes.Datatypes = Debugger_Types.Datatypes = Absyn.Datatypes
  sharing Info = Debugger_Types.Info
  sharing Info.Location = Absyn.Location
d105 1
a105 1
    Absyn.TopDec * EnvironTypes.Top_Env * bool * Debugger_Types.information ->
@


1.21
log
@Changed Error structure to Info
@
text
@d4 3
d86 4
@


1.20
log
@Removed add_fn_names (obsolete)
@
text
@d4 3
d74 1
a74 1
require "../main/error";
d82 1
a82 1
  structure Error : ERROR
d89 1
@


1.19
log
@Created a type `information' which wraps up the debugger information
needed in so many parts of the compiler.
@
text
@d4 4
a89 1
  val add_fn_names : bool ref
@


1.18
log
@Installed central error reporting mechanism.
@
text
@d4 3
d81 3
a83 6
  val trans_top_dec: Absyn.TopDec * EnvironTypes.Top_Env *
    bool * (string,EnvironTypes.LambdaTypes.Datatypes.Type * bool *
            (int * Debugger_Types.Backend_Annotation) list) Debugger_Types.Datatypes.NewMap.T ->
    EnvironTypes.Top_Env * EnvironTypes.LambdaTypes.binding list *
    (string,EnvironTypes.LambdaTypes.Datatypes.Type * bool *
     (int * Debugger_Types.Backend_Annotation) list) Debugger_Types.Datatypes.NewMap.T
@


1.17
log
@Removed some redundant structures and sharing
@
text
@d4 3
d64 1
d72 1
@


1.16
log
@Added the recording of information about exceptions
@
text
@d4 3
d75 1
a75 1
            (int * Debugger_Types.Backend_Annotation) list) Debugger_Types.Map.T ->
d78 1
a78 1
     (int * Debugger_Types.Backend_Annotation) list) Debugger_Types.Map.T
@


1.15
log
@Removed some structures and sharing
@
text
@d4 3
d57 1
d64 1
d70 6
a75 2
  val trans_top_dec: Absyn.TopDec * EnvironTypes.Top_Env ->
    EnvironTypes.Top_Env * EnvironTypes.LambdaTypes.binding list
@


1.14
log
@Added bool ref for add_fn_names to control addition of function names
@
text
@d4 3
a53 1
require "lambdatypes";
a59 1
  structure LambdaTypes: LAMBDATYPES
d62 2
a63 2
    EnvironTypes.Top_Env * LambdaTypes.binding list
    -> EnvironTypes.Top_Env * LambdaTypes.LambdaExp
d66 1
a66 1
    EnvironTypes.Top_Env * LambdaTypes.binding list
@


1.13
log
@Added show_match to control printing of match trees
@
text
@d4 3
d68 1
a68 1

@


1.12
log
@Added diagnostic parameter
@
text
@d4 3
d63 3
@


1.11
log
@Changed trans_topdec and complete_struct_from_topenv to use new
binding type
@
text
@d4 4
d43 1
d49 1
a52 5

(*
  val trans_str_dec: Absyn.StrDec * EnvironTypes.Top_Env ->
    EnvironTypes.Env * (LambdaTypes.LVar * LambdaTypes.LambdaExp) list
*)
@


1.10
log
@New LETREC with expression in it again.
@
text
@d3 4
a6 1
$Log:	lambda.sml,v $
d54 1
a54 1
    EnvironTypes.Top_Env * (LambdaTypes.LVar * LambdaTypes.LambdaExp) list
d58 1
a58 1
    EnvironTypes.Top_Env * (LambdaTypes.LVar * LambdaTypes.LambdaExp) list
@


1.9
log
@More trouble with Regbind
@
text
@d4 3
d45 1
d48 5
@


1.8
log
@Removed trans_str_dec from signature. Regbind problems (temporarily?)
gone away
@
text
@d4 4
d41 1
a41 1
(*
d44 1
a44 1
*)
@


1.7
log
@Changed environments to top environments to cope with functors
@
text
@d4 3
d37 2
a38 1
  val trans_str_dec: Absyn.StrDec * EnvironTypes.Env ->
d40 1
@


1.6
log
@Removed superfluous definitions, all except trans_str_dec, as the functor
fails to compile if I remove this as well.
@
text
@d4 4
d36 2
a37 2
  val trans_top_dec: Absyn.TopDec * EnvironTypes.Env ->
    EnvironTypes.Env * (LambdaTypes.LVar * LambdaTypes.LambdaExp) list
@


1.5
log
@Removed trans_exp, trans_dec, trans_match from signature,
as these should not be needed externally. Eventually there
will only be a trans_top_dec function I suspect.
@
text
@d4 5
d30 1
a30 6
  structure Ident: sig type SCon end
  structure Match: sig type Matchvar and Tree end

(*
  val trans_exp: Absyn.Exp * EnvironTypes.Env -> LambdaTypes.LambdaExp
  val trans_dec: Absyn.Dec * EnvironTypes.Env ->
d32 1
a32 9
    (* Produce a new environment and an *)
    (* association of Lambda variables and *)
    (* Lambda expressions giving their values *)
  val trans_match: (Match.Matchvar * Match.Tree) * EnvironTypes.Env ->
    LambdaTypes.LambdaExp
  val trans_str_exp: Absyn.StrExp * EnvironTypes.Env ->
    EnvironTypes.Env * LambdaTypes.LambdaExp
*)
  val trans_str_dec: Absyn.StrDec * EnvironTypes.Env ->
@


1.4
log
@Added trans_str_exp.
Removed subs from parameter list for trans_dec
@
text
@d4 4
d28 1
d39 1
@


1.3
log
@Added trans_strdec
@
text
@d4 3
d25 1
a25 1
  val trans_dec: Absyn.Dec * EnvironTypes.Env * EnvironTypes.Env ->
d32 2
@


1.2
log
@Abstracted out the types from the functions
@
text
@d3 4
a6 1
$Log$
d10 1
d15 1
a15 1
  structure Absyn: sig type Exp and Dec end
d29 2
a30 1

@


1.1
log
@Initial revision
@
text
@d2 4
d7 3
a10 1

d12 2
a13 1
  structure Environ: sig type LVar and primitive and Env end
d17 8
a24 32
  type LVar
  sharing type LVar = Environ.LVar
  exception not_done_yet of string
  exception impossible of string
  datatype 'a Opt = PRESENT of 'a | ABSENT
  datatype Construc =
    CON_TAG of int           (* basic datatype tagging type *)
  | SCON_TAG of Ident.SCon   (* simple int, real, string ... *)
  datatype Lambda =
    VAR of LVar                    (* variable lookup *)
  | FN of (LVar * Lambda)          (* function definition *)
  | LETREC of                      (* allows recursive definitions *)
    (LVar list * Lambda list * Lambda)
  | APP of (Lambda * Lambda)       (* function application *)
  | SCON of Ident.SCon             (* int, real, string ... *)
  | SWITCH of                      (* like a case statement *)
    (Lambda * (Construc * Lambda) list * Lambda Opt)
  | STRUCT of Lambda list          (* structure definition *)
  | SELECT of (int * Lambda)       (* field selector *)
  | RAISE of Lambda                (* Exceptions --- throw ... *)
  | HANDLE of (Lambda * Lambda)    (*            ... and catch *)
  | BUILTIN of Environ.primitive   (* built-in functions --
				    These functions are
				    primitive to the abstract
				    machine. *)

  val trans_exp: Absyn.Exp * Environ.Env -> Lambda
  val trans_dec: Absyn.Dec * Environ.Env * Environ.Env -> Environ.Env
    * (LVar * Lambda) list (* Produce a new environment and an *)
                           (* association of Lambda variables and *)
		           (* Lambda expressions giving their values *)
  val trans_match: (Match.Matchvar * Match.Tree) * Environ.Env -> Lambda
@
