head	1.29;
access;
symbols
	MLW_daveb_inline_1_4_99:1.29.4
	MLWorks_21c0_1999_03_25:1.29
	MLWorks_20c1_1998_08_20:1.29
	MLWorks_20c0_1998_08_04:1.29
	MLWorks_20b2c2_1998_06_19:1.29
	MLWorks_20b2_Windows_1998_06_12:1.29
	MLWorks_20b1c1_1998_05_07:1.29
	MLWorks_20b0_1998_04_07:1.29
	MLWorks_20b0_1998_03_20:1.29
	MLWorks_20m2_1998_02_16:1.29
	MLWorks_20m1_1997_10_23:1.29
	MLWorks_11r1:1.29.1.1.1.1.1
	MLWorks_workspace_97:1.29.3
	MLWorks_dt_wizard:1.29.2
	MLWorks_11c0_1997_09_09:1.29.1.1.1.1
	MLWorks_10r3:1.29.1.1.3
	MLWorks_10r2_551:1.29.1.1.2
	MLWorks_11:1.29.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.29.1.1
	MLWorks_20m0_1997_06_20:1.29
	MLWorks_1_0_r2c2_1997_06_14:1.29.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.29.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.29.1
	MLWorks_BugFix_1997_04_24:1.29
	MLWorks_1_0_r2_Win32_1997_04_11:1.29
	MLWorks_1_0_r2_Unix_1997_04_04:1.29
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.28.6.1.1
	MLWorks_gui_1996_12_18:1.28.7
	MLWorks_1_0_Win32_1996_12_17:1.28.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.28.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.28.4.1
	MLWorks_1_0_Irix_1996_11_28:1.28.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.28.5
	MLWorks_1_0_Unix_1996_11_14:1.28.4
	MLWorks_Open_Beta2_1996_10_11:1.28.3
	MLWorks_License_dev:1.28.2
	MLWorks_1_open_beta_1996_09_13:1.28.1
	MLWorks_Open_Beta_1996_08_22:1.28
	MLWorks_Beta_1996_07_02:1.27
	MLWorks_Beta_1996_06_07:1.27
	MLWorks_Beta_1996_06_06:1.27
	MLWorks_Beta_1996_06_05:1.27
	MLWorks_Beta_1996_06_03:1.27
	MLWorks_Beta_1996_05_31:1.27
	MLWorks_Beta_1996_05_30:1.27
	ML_beta_release_12/08/94:1.22
	ML_beta_release_03/08/94:1.22
	ML_revised_beta_release_25/05/94:1.21
	ML_final_beta_release_02/03/94:1.21
	mlworks-28-01-1994:1.20
	Release:1.19
	mlworks-beta-01-09-1993:1.19
	MLWorks-1-0-4-29/01/1993:1.14
	MLWorks-1-0-3-21/12/1992:1.14
	MLWorks-1-0-2-15/12/1992:1.14
	MLWorks-1-0-1-04/12/1992:1.14
	checkpoint_17_08_92:1.8;
locks; strict;
comment	@ * @;


1.29
date	96.12.02.15.42.46;	author matthew;	state Exp;
branches
	1.29.1.1
	1.29.2.1
	1.29.3.1
	1.29.4.1;
next	1.28;

1.28
date	96.08.06.12.10.21;	author andreww;	state Exp;
branches
	1.28.1.1
	1.28.2.1
	1.28.3.1
	1.28.4.1
	1.28.5.1
	1.28.6.1
	1.28.7.1;
next	1.27;

1.27
date	95.08.10.16.43.10;	author daveb;	state Exp;
branches;
next	1.26;

1.26
date	95.02.28.12.25.50;	author matthew;	state Exp;
branches;
next	1.25;

1.25
date	95.01.13.16.05.23;	author matthew;	state Exp;
branches;
next	1.24;

1.24
date	94.10.10.10.10.25;	author matthew;	state Exp;
branches;
next	1.23;

1.23
date	94.09.22.09.39.24;	author matthew;	state Exp;
branches;
next	1.22;

1.22
date	94.07.19.13.35.16;	author matthew;	state Exp;
branches;
next	1.21;

1.21
date	93.11.19.16.45.43;	author nosa;	state Exp;
branches;
next	1.20;

1.20
date	93.08.16.12.04.56;	author nosa;	state Exp;
branches;
next	1.19;

1.19
date	93.07.29.16.23.58;	author nosa;	state Exp;
branches
	1.19.1.1;
next	1.18;

1.18
date	93.03.10.17.00.49;	author matthew;	state Exp;
branches;
next	1.17;

1.17
date	93.03.04.13.14.32;	author matthew;	state Exp;
branches;
next	1.16;

1.16
date	93.03.01.14.02.35;	author matthew;	state Exp;
branches;
next	1.15;

1.15
date	93.02.01.17.18.36;	author matthew;	state Exp;
branches;
next	1.14;

1.14
date	92.11.10.13.39.21;	author matthew;	state Exp;
branches;
next	1.13;

1.13
date	92.10.26.18.17.29;	author daveb;	state Exp;
branches;
next	1.12;

1.12
date	92.09.10.09.35.19;	author richard;	state Exp;
branches;
next	1.11;

1.11
date	92.09.09.10.40.33;	author clive;	state Exp;
branches;
next	1.10;

1.10
date	92.08.26.13.37.16;	author jont;	state Exp;
branches;
next	1.9;

1.9
date	92.08.24.16.12.25;	author clive;	state Exp;
branches;
next	1.8;

1.8
date	92.08.05.17.05.12;	author jont;	state Exp;
branches;
next	1.7;

1.7
date	92.08.03.12.54.04;	author davidt;	state Exp;
branches;
next	1.6;

1.6
date	92.07.14.10.13.05;	author clive;	state Exp;
branches;
next	1.5;

1.5
date	92.07.06.16.14.48;	author clive;	state Exp;
branches;
next	1.4;

1.4
date	92.07.01.12.04.02;	author davida;	state Exp;
branches;
next	1.3;

1.3
date	92.06.29.09.25.56;	author clive;	state Exp;
branches;
next	1.2;

1.2
date	92.06.11.10.50.28;	author clive;	state Exp;
branches;
next	1.1;

1.1
date	92.05.05.13.13.58;	author jont;	state Exp;
branches;
next	;

1.19.1.1
date	93.07.29.16.23.58;	author jont;	state Exp;
branches;
next	;

1.28.1.1
date	96.09.13.11.17.33;	author hope;	state Exp;
branches;
next	;

1.28.2.1
date	96.10.07.16.07.18;	author hope;	state Exp;
branches;
next	;

1.28.3.1
date	96.10.17.11.25.36;	author hope;	state Exp;
branches;
next	;

1.28.4.1
date	96.11.14.12.50.38;	author hope;	state Exp;
branches
	1.28.4.1.1.1;
next	;

1.28.4.1.1.1
date	96.11.28.15.01.45;	author hope;	state Exp;
branches;
next	;

1.28.5.1
date	96.11.22.18.10.02;	author hope;	state Exp;
branches;
next	;

1.28.6.1
date	96.12.17.17.48.40;	author hope;	state Exp;
branches
	1.28.6.1.1.1;
next	;

1.28.6.1.1.1
date	97.02.24.11.38.40;	author hope;	state Exp;
branches;
next	;

1.28.7.1
date	96.12.18.09.42.42;	author hope;	state Exp;
branches;
next	;

1.29.1.1
date	97.05.12.10.35.09;	author hope;	state Exp;
branches
	1.29.1.1.1.1
	1.29.1.1.2.1
	1.29.1.1.3.1;
next	;

1.29.1.1.1.1
date	97.07.28.18.20.33;	author daveb;	state Exp;
branches
	1.29.1.1.1.1.1.1;
next	;

1.29.1.1.1.1.1.1
date	97.10.07.11.45.49;	author jkbrook;	state Exp;
branches;
next	;

1.29.1.1.2.1
date	97.09.08.17.14.01;	author daveb;	state Exp;
branches;
next	;

1.29.1.1.3.1
date	97.09.09.14.09.45;	author daveb;	state Exp;
branches;
next	;

1.29.2.1
date	97.09.10.19.25.43;	author brucem;	state Exp;
branches;
next	;

1.29.3.1
date	97.09.11.20.55.52;	author daveb;	state Exp;
branches;
next	;

1.29.4.1
date	99.04.01.17.57.21;	author daveb;	state Exp;
branches;
next	;


desc
@Augmented lambda calculus, with information on static gc objects
@


1.29
log
@Removing reference to MLWorks.Option
@
text
@(* auglambda.sml the signature *)
(*
$Log: auglambda.sml,v $
 * Revision 1.28  1996/08/06  12:10:21  andreww
 * [Bug #1521]
 * Propagating changes made to typechecker/_types.sml (essentially
 * just passing options rather than print_options).
 *
 * Revision 1.27  1995/08/10  16:43:10  daveb
 * Added types for different lengths of words, ints and reals.
 *
Revision 1.26  1995/02/28  12:25:50  matthew
Changes to FunInfo type

Revision 1.25  1995/01/13  16:05:23  matthew
Rationalizing debugger

Revision 1.24  1994/10/10  10:10:25  matthew
Simplifications of lambda expressions

Revision 1.23  1994/09/22  09:39:24  matthew
Abstraction of debug information

Revision 1.22  1994/07/19  13:35:16  matthew
Functions and applications take a list of parameters

Revision 1.21  1993/11/19  16:45:43  nosa
Type function spills for Modules Debugger.

Revision 1.20  1993/08/16  12:04:56  nosa
FNs now passed closed-over type variables and
stack frame-offset for runtime-instance for polymorphic debugger.

Revision 1.19  1993/07/29  16:23:58  nosa
Changed Tags and LETs for local and closure variable inspection
in the debugger.

Revision 1.18  1993/03/10  17:00:49  matthew
Signature revisions

Revision 1.17  1993/03/04  13:14:32  matthew
Options & Info changes

Revision 1.16  1993/03/01  14:02:35  matthew
Added MLVALUE lambda exp

Revision 1.15  1993/02/01  17:18:36  matthew
Rationalised parameter structure

Revision 1.14  1992/11/10  13:39:21  matthew
Changed Error structure to Info

Revision 1.13  1992/10/26  18:17:29  daveb
Changed type of SWITCH; pointer defaults are no longer used, but information
about value-carrying and constant constructors is added.

Revision 1.12  1992/09/10  09:35:19  richard
Created a type `information' which wraps up the debugger information
needed in so many parts of the compiler.

Revision 1.11  1992/09/09  10:40:33  clive
Added a flag to inhibit warning for debugger unable to generate recipe

Revision 1.10  1992/08/26  13:37:16  jont
Removed some redundant structures and sharing

Revision 1.9  1992/08/24  16:12:25  clive
Added details about leafness to the debug information

Revision 1.8  1992/08/05  17:05:12  jont
Removed some structures and sharing

Revision 1.7  1992/08/03  12:54:04  davidt
Added stuff to support optimisation of BECOMES and UPDATE.

Revision 1.6  1992/07/14  10:13:05  clive
Added the debug information recording for the setup function

Revision 1.5  1992/07/06  16:14:48  clive
Generation of function call point debug information

Revision 1.4  1992/07/01  12:04:02  davida
Added LET constructor and new slot to APP.

Revision 1.3  1992/06/29  09:25:56  clive
Added type annotation information at applications

Revision 1.2  1992/06/11  10:50:28  clive
Added types to the fnexp of the lambda tree for the debugger to use

Revision 1.1  1992/05/05  13:13:58  jont
Initial revision

Copyright (c) 1992 Harlequin Ltd.
*)

require "../lambda/lambdatypes";
require "../debugger/debugger_types";

signature AUGLAMBDA = sig
  structure LambdaTypes : LAMBDATYPES
  structure Debugger_Types : DEBUGGER_TYPES

  datatype Tag =
    VCC_TAG of string * int           (* value carrying constructor *)
  | IMM_TAG of string * int           (* constant constructor *)
  | SCON_TAG of LambdaTypes.Ident.SCon * int option
			     (* simple int, real, string ... *)
			     (* The int option is the size of a numeric type *)
  | EXP_TAG of {size:int, lexp:AugLambdaExp}
  (* more complex tag, for dynamic switching *)

  and AugLambdaExp =
    VAR of LambdaTypes.LVar             (* variable lookup *)
  | FN of ((LambdaTypes.LVar list * LambdaTypes.LVar list) * {size:int, lexp:AugLambdaExp} * string 
           * LambdaTypes.FunInfo)
    (* function definition *)
  | LET of (LambdaTypes.LVar * LambdaTypes.VarInfo ref option * {size:int, lexp:AugLambdaExp}) * 
           {size:int, lexp:AugLambdaExp}
    (* non-rec def's *)
  | LETREC of                           (* allows recursive definitions *)
    ((LambdaTypes.LVar * LambdaTypes.VarInfo ref option) list *
     {size:int, lexp:AugLambdaExp} list *
     {size:int, lexp:AugLambdaExp})
  | APP of ({size:int, lexp:AugLambdaExp} *
	    ({size:int, lexp:AugLambdaExp} list *
             {size:int, lexp:AugLambdaExp} list) *
	    Debugger_Types.Backend_Annotation)
    (* function application *)
  | SCON of LambdaTypes.Ident.SCon * int option
				(* int, real, string as strings *)
			        (* The int option is the size of a numeric type *)
  | MLVALUE of MLWorks.Internal.Value.ml_value (* immediate constants *)
  | INT of int                          (* int as int (for tags) *)
  | SWITCH of                           (* like a case statement *)
    ({size:int, lexp:AugLambdaExp} *
     {num_vccs: int, num_imms: int} option *
     (Tag * {size:int, lexp:AugLambdaExp}) list *
     {size:int, lexp:AugLambdaExp} option)
  (* The second argument contains enough information about the type being
     matched for the code generator to choose an appropriate representation.
     The LVar is bound to the argument of a value carrying constructor.
  *)
  | STRUCT of {size:int, lexp:AugLambdaExp} list
    (* structure definition *)
  | SELECT of {index : int, size : int} * {size:int, lexp:AugLambdaExp}
    (* field selector *)
  | RAISE of {size:int, lexp:AugLambdaExp} 
    (* Exceptions --- throw ... *)
  | HANDLE of ({size:int, lexp:AugLambdaExp} * {size:int, lexp:AugLambdaExp})
    (*            ... and catch *)
  | BUILTIN of LambdaTypes.Primitive * LambdaTypes.Type
		      (* built-in functions -- These functions are
		       primitive to the abstract
		       machine. *)

  val count_gc_objects : Debugger_Types.Options.options *
    LambdaTypes.LambdaExp * bool * Debugger_Types.information * string ->
    {size:int, lexp:AugLambdaExp} * Debugger_Types.information
end
@


1.29.4.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a3 3
 * Revision 1.29  1996/12/02  15:42:46  matthew
 * Removing reference to MLWorks.Option
 *
@


1.29.3.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a3 3
 * Revision 1.29  1996/12/02  15:42:46  matthew
 * Removing reference to MLWorks.Option
 *
@


1.29.2.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a3 3
 * Revision 1.29  1996/12/02  15:42:46  matthew
 * Removing reference to MLWorks.Option
 *
@


1.29.1.1
log
@branched from 1.29
@
text
@a3 3
 * Revision 1.29  1996/12/02  15:42:46  matthew
 * Removing reference to MLWorks.Option
 *
@


1.29.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a3 3
 * Revision 1.29.1.1  1997/05/12  10:35:09  hope
 * branched from 1.29
 *
@


1.29.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a3 3
 * Revision 1.29.1.1  1997/05/12  10:35:09  hope
 * branched from 1.29
 *
@


1.29.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a3 3
 * Revision 1.29.1.1  1997/05/12  10:35:09  hope
 * branched from 1.29
 *
@


1.29.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a3 3
 * Revision 1.29.1.1.1.1  1997/07/28  18:20:33  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.28
log
@[Bug #1521]
Propagating changes made to typechecker/_types.sml (essentially
just passing options rather than print_options).
@
text
@d4 5
d107 1
a107 1
  | SCON_TAG of LambdaTypes.Ident.SCon * int MLWorks.Option.option
d115 1
a115 1
  | FN of (LambdaTypes.LVar list * {size:int, lexp:AugLambdaExp} * string 
d118 1
a118 1
  | LET of (LambdaTypes.LVar * LambdaTypes.VarInfo ref MLWorks.Option.option * {size:int, lexp:AugLambdaExp}) * 
d122 1
a122 1
    ((LambdaTypes.LVar * LambdaTypes.VarInfo ref MLWorks.Option.option) list *
d126 2
a127 1
	    {size:int, lexp:AugLambdaExp} list *
d130 1
a130 1
  | SCON of LambdaTypes.Ident.SCon * int MLWorks.Option.option
d137 1
a137 1
     {num_vccs: int, num_imms: int} MLWorks.Option.option *
d139 1
a139 1
     {size:int, lexp:AugLambdaExp} MLWorks.Option.option)
@


1.28.7.1
log
@branched from 1.28
@
text
@a3 5
 * Revision 1.28  1996/08/06  12:10:21  andreww
 * [Bug #1521]
 * Propagating changes made to typechecker/_types.sml (essentially
 * just passing options rather than print_options).
 *
@


1.28.6.1
log
@branched from 1.28
@
text
@a3 5
 * Revision 1.28  1996/08/06  12:10:21  andreww
 * [Bug #1521]
 * Propagating changes made to typechecker/_types.sml (essentially
 * just passing options rather than print_options).
 *
@


1.28.6.1.1.1
log
@branched from 1.28.6.1
@
text
@a3 3
 * Revision 1.28.6.1  1996/12/17  17:48:40  hope
 * branched from 1.28
 *
@


1.28.5.1
log
@branched from 1.28
@
text
@a3 5
 * Revision 1.28  1996/08/06  12:10:21  andreww
 * [Bug #1521]
 * Propagating changes made to typechecker/_types.sml (essentially
 * just passing options rather than print_options).
 *
@


1.28.4.1
log
@branched from 1.28
@
text
@a3 5
 * Revision 1.28  1996/08/06  12:10:21  andreww
 * [Bug #1521]
 * Propagating changes made to typechecker/_types.sml (essentially
 * just passing options rather than print_options).
 *
@


1.28.4.1.1.1
log
@branched from 1.28.4.1
@
text
@a3 3
 * Revision 1.28.4.1  1996/11/14  12:50:38  hope
 * branched from 1.28
 *
@


1.28.3.1
log
@branched from 1.28
@
text
@a3 5
 * Revision 1.28  1996/08/06  12:10:21  andreww
 * [Bug #1521]
 * Propagating changes made to typechecker/_types.sml (essentially
 * just passing options rather than print_options).
 *
@


1.28.2.1
log
@branched from 1.28
@
text
@a3 5
 * Revision 1.28  1996/08/06  12:10:21  andreww
 * [Bug #1521]
 * Propagating changes made to typechecker/_types.sml (essentially
 * just passing options rather than print_options).
 *
@


1.28.1.1
log
@branched from 1.28
@
text
@a3 5
 * Revision 1.28  1996/08/06  12:10:21  andreww
 * [Bug #1521]
 * Propagating changes made to typechecker/_types.sml (essentially
 * just passing options rather than print_options).
 *
@


1.27
log
@Added types for different lengths of words, ints and reals.
@
text
@d4 3
d151 1
a151 1
  val count_gc_objects :
@


1.26
log
@Changes to FunInfo type
@
text
@d4 3
d99 1
a99 1
  | SCON_TAG of LambdaTypes.Ident.SCon
d101 1
d110 1
a110 1
  | LET of (LambdaTypes.LVar * LambdaTypes.VarInfo ref LambdaTypes.Option.opt * {size:int, lexp:AugLambdaExp}) * 
d114 1
a114 1
    ((LambdaTypes.LVar * LambdaTypes.VarInfo ref LambdaTypes.Option.opt) list *
d121 3
a123 2
  | SCON of LambdaTypes.Ident.SCon   
					(* int, real, string as strings *)
d128 1
a128 1
     {num_vccs: int, num_imms: int} LambdaTypes.Option.opt *
d130 1
a130 1
     {size:int, lexp:AugLambdaExp} LambdaTypes.Option.opt)
@


1.25
log
@Rationalizing debugger
@
text
@d4 3
d104 1
a104 1
           * LambdaTypes.FunInfo LambdaTypes.Option.opt)
@


1.24
log
@Simplifications of lambda expressions
@
text
@d4 3
a84 1
require "../debugger/debugger_type_utilities";
a88 4
  structure Debugger_Type_Utilities : DEBUGGER_TYPE_UTILITIES

  sharing Debugger_Type_Utilities.Debugger_Types = Debugger_Types
  sharing type Debugger_Types.Type = LambdaTypes.Type
d141 1
a141 1
    LambdaTypes.LambdaExp * bool * Debugger_Types.information * string * bool ->
@


1.23
log
@Abstraction of debug information
@
text
@d4 3
d105 3
a107 4
  | LET of (LambdaTypes.LVar * LambdaTypes.VarInfo ref LambdaTypes.Option.opt * 
            (* non-rec def's *)
	    {size:int, lexp:AugLambdaExp} *
	    {size:int, lexp:AugLambdaExp})
@


1.22
log
@Functions and applications take a list of parameters
@
text
@d4 3
d100 1
a100 1
           * ((int * LambdaTypes.Type * LambdaTypes.Instance) ref list * (int,int) LambdaTypes.Option.option ref LambdaTypes.Option.opt) LambdaTypes.Option.opt)
d102 1
a102 4
  | LET of ((LambdaTypes.LVar,(LambdaTypes.LVar * (string * (LambdaTypes.Type 
                                      * LambdaTypes.Instance ref LambdaTypes.Option.opt
                   * (LambdaTypes.Tyfun ref * (int,int) LambdaTypes.Option.option ref) list) ref 
              * (int,int) LambdaTypes.Option.option ref LambdaTypes.Option.opt) LambdaTypes.Option.opt)ref) LambdaTypes.Option.option * 
d107 2
a108 5
    ((LambdaTypes.LVar,(LambdaTypes.LVar * (string * (LambdaTypes.Type 
                                     * LambdaTypes.Instance ref LambdaTypes.Option.opt
                   * (LambdaTypes.Tyfun ref * (int,int) LambdaTypes.Option.option ref) list) ref 
                                            * (int,int) LambdaTypes.Option.option ref LambdaTypes.Option.opt) LambdaTypes.Option.opt)ref) 
     LambdaTypes.Option.option list * {size:int, lexp:AugLambdaExp} list *
d120 1
a120 1
     {lv: LambdaTypes.LVar, num_vccs: int, num_imms: int} LambdaTypes.Option.opt *
@


1.21
log
@Type function spills for Modules Debugger.
@
text
@d4 3
d96 1
a96 1
  | FN of (LambdaTypes.LVar * {size:int, lexp:AugLambdaExp} * string 
d114 1
a114 1
	    {size:int, lexp:AugLambdaExp} *
@


1.20
log
@FNs now passed closed-over type variables and
stack frame-offset for runtime-instance for polymorphic debugger.
@
text
@d4 4
d97 2
a98 1
                                      * LambdaTypes.Instance ref LambdaTypes.Option.opt) ref 
d105 2
a106 1
                                     * LambdaTypes.Instance ref LambdaTypes.Option.opt) ref 
@


1.19
log
@Changed Tags and LETs for local and closure variable inspection
in the debugger.
@
text
@d4 4
d89 2
a90 1
  | FN of (LambdaTypes.LVar * {size:int, lexp:AugLambdaExp} * string)
d92 3
a94 1
  | LET of ((LambdaTypes.LVar,(LambdaTypes.LVar * (string * LambdaTypes.Type ref) LambdaTypes.Option.opt)ref) LambdaTypes.Option.option * 
d99 3
a101 1
    ((LambdaTypes.LVar,(LambdaTypes.LVar * (string * LambdaTypes.Type ref) LambdaTypes.Option.opt)ref) 
@


1.19.1.1
log
@Fork for bug fixing
@
text
@a3 4
Revision 1.19  1993/07/29  16:23:58  nosa
Changed Tags and LETs for local and closure variable inspection
in the debugger.

@


1.18
log
@Signature revisions
@
text
@d4 3
d76 2
a77 2
    VCC_TAG of int           (* value carrying constructor *)
  | IMM_TAG of int           (* constant constructor *)
d87 2
a88 1
  | LET of (LambdaTypes.LVar *          (* non-rec def's *)
d92 2
a93 1
    (LambdaTypes.LVar list * {size:int, lexp:AugLambdaExp} list *
d105 1
a105 1
     {lv: LambdaTypes.LVar, num_vccs: int, num_imms: int} LambdaTypes.Opt *
d107 1
a107 1
     {size:int, lexp:AugLambdaExp} LambdaTypes.Opt)
d116 1
a116 1
  | RAISE of {size:int, lexp:AugLambdaExp}
d124 1
@


1.17
log
@Options & Info changes
@
text
@d4 3
d70 1
a70 1
  sharing Debugger_Types.Datatypes = LambdaTypes.Datatypes
d75 1
a75 1
  | SCON_TAG of LambdaTypes.Datatypes.Ident.SCon
d94 1
a94 1
  | SCON of LambdaTypes.Datatypes.Ident.SCon   
d115 1
a115 1
  | BUILTIN of LambdaTypes.Primitive * LambdaTypes.Datatypes.Type
@


1.16
log
@Added MLVALUE lambda exp
@
text
@d4 3
a57 1
require "../main/info";
a64 1
  structure Info : INFO
a67 1
  sharing Info = Debugger_Types.Info
a116 1
    Info.options ->
@


1.15
log
@Rationalised parameter structure
@
text
@d4 3
d93 1
@


1.14
log
@Changed Error structure to Info
@
text
@d4 3
d61 4
@


1.13
log
@Changed type of SWITCH; pointer defaults are no longer used, but information
about value-carrying and constant constructors is added.
@
text
@d4 4
d49 1
d57 1
d106 1
@


1.12
log
@Created a type `information' which wraps up the debugger information
needed in so many parts of the compiler.
@
text
@d4 4
d54 4
a57 2
    CON_TAG of int           (* basic datatype tagging type *)
  | SCON_TAG of LambdaTypes.Datatypes.Ident.SCon   (* simple int, real, string ... *)
d60 1
d62 1
a62 1
    VAR of LambdaTypes.LVar                       (* variable lookup *)
d65 1
a65 1
  | LET of (LambdaTypes.LVar *                    (* non-rec def's *)
d68 1
a68 1
  | LETREC of                         (* allows recursive definitions *)
d71 3
a73 1
  | APP of ({size:int, lexp:AugLambdaExp} * {size:int, lexp:AugLambdaExp} * Debugger_Types.Backend_Annotation)
d75 4
a78 3
  | SCON of LambdaTypes.Datatypes.Ident.SCon    (* int, real, string as strings *)
  | INT of int                        (* int as int (for tags) *)
  | SWITCH of                         (* like a case statement *)
d80 1
a81 1
     {size:int, lexp:AugLambdaExp} LambdaTypes.Opt *
d83 4
a86 2
    (* First default for constructor not in list, second for not a constructor
     so we can efficiently check for non-nullary constructors *)
@


1.11
log
@Added a flag to inhibit warning for debugger unable to generate recipe
@
text
@d4 3
d88 2
a89 4
    LambdaTypes.LambdaExp * bool * 
    (string,LambdaTypes.Datatypes.Type * bool * (int * Debugger_Types.Backend_Annotation) list) Debugger_Types.Datatypes.NewMap.T * string * bool
    -> {size:int, lexp:AugLambdaExp} * 
    (string,LambdaTypes.Datatypes.Type * bool * (int * Debugger_Types.Backend_Annotation) list) Debugger_Types.Datatypes.NewMap.T
@


1.10
log
@Removed some redundant structures and sharing
@
text
@d4 3
d86 1
a86 1
    (string,LambdaTypes.Datatypes.Type * bool * (int * Debugger_Types.Backend_Annotation) list) Debugger_Types.Datatypes.NewMap.T * string
@


1.9
log
@Added details about leafness to the debug information
@
text
@d4 3
d45 1
a45 1
  | SCON_TAG of LambdaTypes.Ident.SCon   (* simple int, real, string ... *)
d60 1
a60 1
  | SCON of LambdaTypes.Ident.SCon    (* int, real, string as strings *)
d83 1
a83 1
    (string,LambdaTypes.Datatypes.Type * bool * (int * Debugger_Types.Backend_Annotation) list) Debugger_Types.Map.T * string
d85 1
a85 1
    (string,LambdaTypes.Datatypes.Type * bool * (int * Debugger_Types.Backend_Annotation) list) Debugger_Types.Map.T
@


1.8
log
@Removed some structures and sharing
@
text
@d4 3
d80 1
a80 1
    (string,LambdaTypes.Datatypes.Type * (int * Debugger_Types.Backend_Annotation) list) Debugger_Types.Map.T * string
d82 1
a82 1
    (string,LambdaTypes.Datatypes.Type * (int * Debugger_Types.Backend_Annotation) list) Debugger_Types.Map.T
@


1.7
log
@Added stuff to support optimisation of BECOMES and UPDATE.
@
text
@d4 3
a28 1
require "../basics/ident";
a33 1
  structure Ident: IDENT
d39 1
a39 1
  | SCON_TAG of Ident.SCon   (* simple int, real, string ... *)
d54 1
a54 1
  | SCON of Ident.SCon                (* int, real, string as strings *)
@


1.6
log
@Added the debug information recording for the setup function
@
text
@d4 3
d70 1
a70 1
  | BUILTIN of LambdaTypes.Primitive
@


1.5
log
@Generation of function call point debug information
@
text
@d4 3
d73 1
a73 1
    (string,LambdaTypes.Datatypes.Type * (int * Debugger_Types.Backend_Annotation) list) Debugger_Types.Map.T
@


1.4
log
@Added LET constructor and new slot to APP.
@
text
@d4 3
d22 1
d28 1
d69 4
a72 1
    LambdaTypes.LambdaExp * bool * bool -> {size:int, lexp:AugLambdaExp} * (string * LambdaTypes.Datatypes.Type) list
@


1.3
log
@Added type annotation information at applications
@
text
@d4 3
d34 3
@


1.2
log
@Added types to the fnexp of the lambda tree for the debugger to use
@
text
@d4 3
d15 1
d20 2
d34 1
a34 1
  | APP of ({size:int, lexp:AugLambdaExp} * {size:int, lexp:AugLambdaExp})
@


1.1
log
@Initial revision
@
text
@d3 4
a6 1
$Log$
d52 1
a52 1
    LambdaTypes.LambdaExp -> {size:int, lexp:AugLambdaExp}
@
