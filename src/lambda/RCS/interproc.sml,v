head	1.10;
access;
symbols
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.10.6.1.1
	MLWorks_gui_1996_12_18:1.10.7
	MLWorks_1_0_Win32_1996_12_17:1.10.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.10.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.10.4.1
	MLWorks_1_0_Irix_1996_11_28:1.10.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.10.5
	MLWorks_1_0_Unix_1996_11_14:1.10.4
	MLWorks_Open_Beta2_1996_10_11:1.10.3
	MLWorks_License_dev:1.10.2
	MLWorks_1_open_beta_1996_09_13:1.10.1
	MLWorks_Open_Beta_1996_08_22:1.10
	MLWorks_Beta_1996_07_02:1.10
	MLWorks_Beta_1996_06_07:1.10
	MLWorks_Beta_1996_06_06:1.10
	MLWorks_Beta_1996_06_05:1.10
	MLWorks_Beta_1996_06_03:1.10
	MLWorks_Beta_1996_05_31:1.10
	MLWorks_Beta_1996_05_30:1.10
	ML_beta_release_12/08/94:1.9
	ML_beta_release_03/08/94:1.9
	ML_revised_beta_release_25/05/94:1.9
	ML_final_beta_release_02/03/94:1.9
	mlworks-28-01-1994:1.9
	Release:1.9
	mlworks-beta-01-09-1993:1.9
	MLWorks-1-0-4-29/01/1993:1.9
	MLWorks-1-0-3-21/12/1992:1.9
	MLWorks-1-0-2-15/12/1992:1.9
	MLWorks-1-0-1-04/12/1992:1.9
	checkpoint_17_08_92:1.6;
locks; strict;
comment	@ * @;


1.10
date	95.12.04.11.58.12;	author matthew;	state Exp;
branches
	1.10.1.1
	1.10.2.1
	1.10.3.1
	1.10.4.1
	1.10.5.1
	1.10.6.1
	1.10.7.1;
next	1.9;

1.9
date	92.11.04.16.38.02;	author jont;	state Exp;
branches
	1.9.1.1;
next	1.8;

1.8
date	92.10.30.13.36.19;	author jont;	state Exp;
branches;
next	1.7;

1.7
date	92.08.24.12.28.32;	author jont;	state Exp;
branches;
next	1.6;

1.6
date	92.06.05.15.31.27;	author jont;	state Exp;
branches;
next	1.5;

1.5
date	92.05.05.15.20.15;	author jont;	state Exp;
branches;
next	1.4;

1.4
date	92.01.07.13.05.46;	author jont;	state Exp;
branches;
next	1.3;

1.3
date	92.01.03.17.55.49;	author jont;	state Exp;
branches;
next	1.2;

1.2
date	91.11.07.14.47.28;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	91.10.29.18.25.23;	author jont;	state Exp;
branches;
next	;

1.9.1.1
date	92.11.04.16.38.02;	author jont;	state Exp;
branches;
next	;

1.10.1.1
date	96.09.13.11.17.28;	author hope;	state Exp;
branches;
next	;

1.10.2.1
date	96.10.07.16.07.13;	author hope;	state Exp;
branches;
next	;

1.10.3.1
date	96.10.17.11.25.29;	author hope;	state Exp;
branches;
next	;

1.10.4.1
date	96.11.14.12.50.32;	author hope;	state Exp;
branches
	1.10.4.1.1.1;
next	;

1.10.4.1.1.1
date	96.11.28.15.01.38;	author hope;	state Exp;
branches;
next	;

1.10.5.1
date	96.11.22.18.09.57;	author hope;	state Exp;
branches;
next	;

1.10.6.1
date	96.12.17.17.48.35;	author hope;	state Exp;
branches
	1.10.6.1.1.1;
next	;

1.10.6.1.1.1
date	97.02.24.11.38.33;	author hope;	state Exp;
branches;
next	;

1.10.7.1
date	96.12.18.09.42.36;	author hope;	state Exp;
branches;
next	;


desc
@Interprocedural analysis (simple), for spotting functions whose result
doesn't involve the entire argument. This is intended to allow (one day)
parameter passing on the stack
@


1.10
log
@Simplifying LambdaTypes
@
text
@(* interproc.sml the signature *)
(*
$Log: interproc.sml,v $
Revision 1.9  1992/11/04  16:38:02  jont
Exposed an escapes function as a preliminary to possible stack
allocation of closures

Revision 1.8  1992/10/30  13:36:19  jont
Changed type of escape_map to use LambdaTypes.Map

Revision 1.7  1992/08/24  12:28:32  jont
Added list of escaping primitives

Revision 1.6  1992/06/05  15:31:27  jont
Modified to use newmap

Revision 1.5  1992/05/05  15:20:15  jont
Removed escapes function, not used externally

Revision 1.4  1992/01/07  13:05:46  jont
Added function to return variable and function bindings for
curried function optimisation

Revision 1.3  1992/01/03  17:55:49  jont
Added function to return list of function bindings

Revision 1.2  1991/11/07  14:47:28  jont
Added function to produce a lambda var to bool map of whether the
referenced function has an escaping argument or not

Revision 1.1  91/10/29  18:25:23  jont
Initial revision

Copyright (c) 1991 Harlequin Ltd.
*)

require "lambdatypes";

signature INTERPROC = sig
  structure LambdaTypes : LAMBDATYPES
  type 'a Map

  val escaping_prim_list : LambdaTypes.Primitive list
  val binding_list :
    LambdaTypes.LambdaExp -> (LambdaTypes.LVar * LambdaTypes.LambdaExp) list
  (* Just gives the function bindings, with all VAR references followed *)
  val fn_and_var_binding_list :
    LambdaTypes.LambdaExp -> (LambdaTypes.LVar * LambdaTypes.LambdaExp) list
  (* Gives the function and VAR bindings, with var references not followed *)
  (* This is for the purposes of currying *)
  val escape_map :
    (LambdaTypes.LVar * LambdaTypes.LambdaExp) list -> bool Map
  val escapes : (LambdaTypes.LVar * LambdaTypes.LambdaExp) -> bool
end
@


1.10.7.1
log
@branched from 1.10
@
text
@a3 3
 * Revision 1.10  1995/12/04  11:58:12  matthew
 * Simplifying LambdaTypes
 *
@


1.10.6.1
log
@branched from 1.10
@
text
@a3 3
 * Revision 1.10  1995/12/04  11:58:12  matthew
 * Simplifying LambdaTypes
 *
@


1.10.6.1.1.1
log
@branched from 1.10.6.1
@
text
@a3 3
 * Revision 1.10.6.1  1996/12/17  17:48:35  hope
 * branched from 1.10
 *
@


1.10.5.1
log
@branched from 1.10
@
text
@a3 3
 * Revision 1.10  1995/12/04  11:58:12  matthew
 * Simplifying LambdaTypes
 *
@


1.10.4.1
log
@branched from 1.10
@
text
@a3 3
 * Revision 1.10  1995/12/04  11:58:12  matthew
 * Simplifying LambdaTypes
 *
@


1.10.4.1.1.1
log
@branched from 1.10.4.1
@
text
@a3 3
 * Revision 1.10.4.1  1996/11/14  12:50:32  hope
 * branched from 1.10
 *
@


1.10.3.1
log
@branched from 1.10
@
text
@a3 3
 * Revision 1.10  1995/12/04  11:58:12  matthew
 * Simplifying LambdaTypes
 *
@


1.10.2.1
log
@branched from 1.10
@
text
@a3 3
 * Revision 1.10  1995/12/04  11:58:12  matthew
 * Simplifying LambdaTypes
 *
@


1.10.1.1
log
@branched from 1.10
@
text
@a3 3
 * Revision 1.10  1995/12/04  11:58:12  matthew
 * Simplifying LambdaTypes
 *
@


1.9
log
@Exposed an escapes function as a preliminary to possible stack
allocation of closures
@
text
@d4 4
d41 1
d52 1
a52 1
    (LambdaTypes.LVar * LambdaTypes.LambdaExp) list -> bool LambdaTypes.Map.T
@


1.9.1.1
log
@Fork for bug fixing
@
text
@a3 4
Revision 1.9  1992/11/04  16:38:02  jont
Exposed an escapes function as a preliminary to possible stack
allocation of closures

@


1.8
log
@Changed type of escape_map to use LambdaTypes.Map
@
text
@d4 3
d48 1
@


1.7
log
@Added list of escaping primitives
@
text
@d4 3
d44 1
a44 2
    (LambdaTypes.LVar * LambdaTypes.LambdaExp) list ->
    (LambdaTypes.LVar, bool) LambdaTypes.Datatypes.NewMap.T
@


1.6
log
@Modified to use newmap
@
text
@d4 3
a27 1
require "../utils/newmap";
a30 1
  structure NewMap : NEWMAP
d32 1
d42 1
a42 1
    (LambdaTypes.LVar, bool) NewMap.T
@


1.5
log
@Removed escapes function, not used externally
@
text
@d4 3
d25 1
a25 1
require "../utils/map";
d29 1
a29 1
  structure Map : MAP
d40 1
a40 1
    (LambdaTypes.LVar, bool) Map.Map
@


1.4
log
@Added function to return variable and function bindings for
curried function optimisation
@
text
@d4 4
a27 1
  val escapes : LambdaTypes.LVar * LambdaTypes.LambdaExp -> bool
@


1.3
log
@Added function to return list of function bindings
@
text
@d4 3
d27 5
@


1.2
log
@> Added function to produce a lambda var to bool map of whether the
referenced function has an escaping argument or not
@
text
@d3 5
a7 1
$Log:	interproc.sml,v $
d22 5
a26 1
  val escape_map : LambdaTypes.LambdaExp -> (LambdaTypes.LVar, bool)Map.Map
@


1.1
log
@Initial revision
@
text
@d3 4
a6 1
$Log$
d11 1
a11 1
require "../basics/ident";
d15 1
d18 1
@
