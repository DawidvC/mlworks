head	1.36;
access;
symbols
	MLW_daveb_inline_1_4_99:1.36.4
	MLWorks_21c0_1999_03_25:1.36
	MLWorks_20c1_1998_08_20:1.36
	MLWorks_20c0_1998_08_04:1.36
	MLWorks_20b2c2_1998_06_19:1.36
	MLWorks_20b2_Windows_1998_06_12:1.36
	MLWorks_20b1c1_1998_05_07:1.36
	MLWorks_20b0_1998_04_07:1.36
	MLWorks_20b0_1998_03_20:1.36
	MLWorks_20m2_1998_02_16:1.36
	MLWorks_20m1_1997_10_23:1.36
	MLWorks_11r1:1.36.1.1.1.1.1
	MLWorks_workspace_97:1.36.3
	MLWorks_dt_wizard:1.36.2
	MLWorks_11c0_1997_09_09:1.36.1.1.1.1
	MLWorks_10r3:1.36.1.1.3
	MLWorks_10r2_551:1.36.1.1.2
	MLWorks_11:1.36.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.36.1.1
	MLWorks_20m0_1997_06_20:1.36
	MLWorks_1_0_r2c2_1997_06_14:1.36.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.36.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.36.1
	MLWorks_BugFix_1997_04_24:1.36
	MLWorks_1_0_r2_Win32_1997_04_11:1.36
	MLWorks_1_0_r2_Unix_1997_04_04:1.36
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.35.6.1.1
	MLWorks_gui_1996_12_18:1.35.7
	MLWorks_1_0_Win32_1996_12_17:1.35.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.35.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.35.4.1
	MLWorks_1_0_Irix_1996_11_28:1.35.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.35.5
	MLWorks_1_0_Unix_1996_11_14:1.35.4
	MLWorks_Open_Beta2_1996_10_11:1.35.3
	MLWorks_License_dev:1.35.2
	MLWorks_1_open_beta_1996_09_13:1.35.1
	MLWorks_Open_Beta_1996_08_22:1.35
	MLWorks_Beta_1996_07_02:1.35
	MLWorks_Beta_1996_06_07:1.35
	MLWorks_Beta_1996_06_06:1.35
	MLWorks_Beta_1996_06_05:1.35
	MLWorks_Beta_1996_06_03:1.35
	MLWorks_Beta_1996_05_31:1.35
	MLWorks_Beta_1996_05_30:1.35
	ML_beta_release_12/08/94:1.32
	ML_beta_release_03/08/94:1.32
	ML_revised_beta_release_25/05/94:1.32
	ML_final_beta_release_02/03/94:1.32
	mlworks-28-01-1994:1.31
	Release:1.30
	mlworks-beta-01-09-1993:1.30
	MLWorks-1-0-4-29/01/1993:1.26
	MLWorks-1-0-3-21/12/1992:1.26
	MLWorks-1-0-2-15/12/1992:1.26
	MLWorks-1-0-1-04/12/1992:1.25
	checkpoint_17_08_92:1.20
	Ten15_release_21-08-91:1.15
	Ten15_release_19-08-91:1.15
	ten15_release:1.15;
locks; strict;
comment	@ * @;


1.36
date	96.11.22.12.05.54;	author matthew;	state Exp;
branches
	1.36.1.1
	1.36.2.1
	1.36.3.1
	1.36.4.1;
next	1.35;

1.35
date	95.08.01.15.32.53;	author jont;	state Exp;
branches
	1.35.1.1
	1.35.2.1
	1.35.3.1
	1.35.4.1
	1.35.5.1
	1.35.6.1
	1.35.7.1;
next	1.34;

1.34
date	95.08.01.09.50.22;	author matthew;	state Exp;
branches;
next	1.33;

1.33
date	95.03.27.16.40.09;	author jont;	state Exp;
branches;
next	1.32;

1.32
date	94.02.28.05.35.45;	author nosa;	state Exp;
branches;
next	1.31;

1.31
date	93.10.28.14.40.00;	author nickh;	state Exp;
branches;
next	1.30;

1.30
date	93.07.07.16.40.24;	author daveb;	state Exp;
branches
	1.30.1.1;
next	1.29;

1.29
date	93.03.10.15.37.22;	author matthew;	state Exp;
branches;
next	1.28;

1.28
date	93.03.09.12.56.07;	author matthew;	state Exp;
branches;
next	1.27;

1.27
date	93.02.02.10.13.07;	author matthew;	state Exp;
branches;
next	1.26;

1.26
date	92.12.08.18.52.17;	author jont;	state Exp;
branches;
next	1.25;

1.25
date	92.10.28.11.46.22;	author jont;	state Exp;
branches;
next	1.24;

1.24
date	92.10.02.16.19.06;	author clive;	state Exp;
branches;
next	1.23;

1.23
date	92.09.22.13.48.53;	author richard;	state Exp;
branches;
next	1.22;

1.22
date	92.08.26.11.39.17;	author jont;	state Exp;
branches;
next	1.21;

1.21
date	92.08.18.19.39.21;	author davidt;	state Exp;
branches;
next	1.20;

1.20
date	92.08.05.17.03.05;	author jont;	state Exp;
branches;
next	1.19;

1.19
date	92.06.17.15.23.38;	author jont;	state Exp;
branches;
next	1.18;

1.18
date	92.06.10.15.10.48;	author jont;	state Exp;
branches;
next	1.17;

1.17
date	92.06.03.14.38.10;	author jont;	state Exp;
branches;
next	1.16;

1.16
date	92.01.09.17.27.10;	author jont;	state Exp;
branches;
next	1.15;

1.15
date	91.07.12.17.09.16;	author jont;	state Exp;
branches;
next	1.14;

1.14
date	91.07.11.09.40.55;	author jont;	state Exp;
branches;
next	1.13;

1.13
date	91.07.10.12.00.15;	author jont;	state Exp;
branches;
next	1.12;

1.12
date	91.07.09.17.10.04;	author jont;	state Exp;
branches;
next	1.11;

1.11
date	91.07.08.17.16.12;	author jont;	state Exp;
branches;
next	1.10;

1.10
date	91.07.08.15.33.23;	author jont;	state Exp;
branches;
next	1.9;

1.9
date	91.07.05.15.01.04;	author jont;	state Exp;
branches;
next	1.8;

1.8
date	91.06.27.12.47.44;	author jont;	state Exp;
branches;
next	1.7;

1.7
date	91.06.24.11.32.50;	author jont;	state Exp;
branches;
next	1.6;

1.6
date	91.06.21.10.30.46;	author jont;	state Exp;
branches;
next	1.5;

1.5
date	91.06.19.17.44.00;	author jont;	state Exp;
branches;
next	1.4;

1.4
date	91.06.17.14.49.00;	author jont;	state Exp;
branches;
next	1.3;

1.3
date	91.06.12.13.44.00;	author jont;	state Exp;
branches;
next	1.2;

1.2
date	91.06.11.16.54.29;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	91.06.11.10.05.01;	author jont;	state Exp;
branches;
next	;

1.30.1.1
date	93.07.07.16.40.24;	author jont;	state Exp;
branches;
next	1.30.1.2;

1.30.1.2
date	93.10.27.16.31.48;	author nickh;	state Exp;
branches;
next	;

1.35.1.1
date	96.09.13.11.17.12;	author hope;	state Exp;
branches;
next	;

1.35.2.1
date	96.10.07.16.06.59;	author hope;	state Exp;
branches;
next	;

1.35.3.1
date	96.10.17.11.25.15;	author hope;	state Exp;
branches;
next	;

1.35.4.1
date	96.11.14.12.50.14;	author hope;	state Exp;
branches
	1.35.4.1.1.1;
next	;

1.35.4.1.1.1
date	96.11.28.15.01.22;	author hope;	state Exp;
branches;
next	;

1.35.5.1
date	96.11.22.18.09.41;	author hope;	state Exp;
branches;
next	;

1.35.6.1
date	96.12.17.17.48.20;	author hope;	state Exp;
branches
	1.35.6.1.1.1;
next	;

1.35.6.1.1.1
date	97.02.24.11.38.15;	author hope;	state Exp;
branches;
next	;

1.35.7.1
date	96.12.18.09.42.21;	author hope;	state Exp;
branches;
next	;

1.36.1.1
date	97.05.12.10.34.50;	author hope;	state Exp;
branches
	1.36.1.1.1.1
	1.36.1.1.2.1
	1.36.1.1.3.1;
next	;

1.36.1.1.1.1
date	97.07.28.18.20.11;	author daveb;	state Exp;
branches
	1.36.1.1.1.1.1.1;
next	;

1.36.1.1.1.1.1.1
date	97.10.07.11.45.19;	author jkbrook;	state Exp;
branches;
next	;

1.36.1.1.2.1
date	97.09.08.17.13.42;	author daveb;	state Exp;
branches;
next	;

1.36.1.1.3.1
date	97.09.09.14.09.24;	author daveb;	state Exp;
branches;
next	;

1.36.2.1
date	97.09.10.19.25.04;	author brucem;	state Exp;
branches;
next	;

1.36.3.1
date	97.09.11.20.55.32;	author daveb;	state Exp;
branches;
next	;

1.36.4.1
date	99.04.01.17.57.13;	author daveb;	state Exp;
branches;
next	;


desc
@Abstract syntax to lambda calculus environment
@


1.36
log
@Removing reference to MLWorks.Option
@
text
@(* environ.sml  the signature *)
(*
$Log: environ.sml,v $
 * Revision 1.35  1995/08/01  15:32:53  jont
 * Modification to the detection of overloaded valids
 *
Revision 1.34  1995/08/01  09:50:22  matthew
Adding environment simplifier

Revision 1.33  1995/03/27  16:40:09  jont
Remove Builtin_p and modify FindBuiltin

Revision 1.32  1994/02/28  05:35:45  nosa
Debugger environments for Modules Debugger.

Revision 1.31  1993/10/28  14:40:00  nickh
Merging in code change.

Revision 1.30.1.2  1993/10/27  16:31:48  nickh
Added a new function number_envs, to replace uses of Lists.number_with_size,
a function which was too ugly (and inefficient) to live.

Revision 1.30.1.1  1993/07/07  16:40:24  jont
Fork for bug fixing

Revision 1.30  1993/07/07  16:40:24  daveb
Removed exception environments and interfaces.

Revision 1.29  1993/03/10  15:37:22  matthew
Added type Structure

Revision 1.28  1993/03/09  12:56:07  matthew
Str to Structure

Revision 1.27  1993/02/02  10:13:07  matthew
Added make_interface_from_str.
Rationalised substructures

Revision 1.26  1992/12/08  18:52:17  jont
Removed a number of duplicated signatures and structures

Revision 1.25  1992/10/28  11:46:22  jont
Removed some irrelevant ident comparison functions

Revision 1.24  1992/10/02  16:19:06  clive
Change to NewMap.empty which now takes < and = functions instead of the single-function

Revision 1.23  1992/09/22  13:48:53  richard
Added make_str_env.

Revision 1.22  1992/08/26  11:39:17  jont
Removed some redundant structures and sharing

Revision 1.21  1992/08/18  19:39:21  davidt
Added sigid_order and symbol_order functions.

Revision 1.20  1992/08/05  17:03:05  jont
Removed some structures and sharing

Revision 1.19  1992/06/17  15:23:38  jont
Added make_external for benefit of interpreter

Revision 1.18  1992/06/10  15:10:48  jont
Changed to use newmap

Revision 1.17  1992/06/03  14:38:10  jont
Added assign_fields function

Revision 1.16  1992/01/09  17:27:10  jont
Changed paramter ordering in environment update to allow use with
Lists.foldl

Revision 1.15  1991/07/12  17:09:16  jont
Added exception environment to env

Revision 1.14  91/07/11  09:40:55  jont
Added empty_fun_env, add_funid_env

Revision 1.13  91/07/10  12:00:15  jont
Removed make_imperative_primitives (now in main/primitives)

Revision 1.12  91/07/09  17:10:04  jont
Added empty_top_env and lookup_funid

Revision 1.11  91/07/08  17:16:12  jont
Added augment_top_env

Revision 1.10  91/07/08  15:33:23  jont
Added function to find imperative primitives

Revision 1.9  91/07/05  15:01:04  jont
Added overload environment to handle overloaded primitives such as +

Revision 1.8  91/06/27  12:47:44  jont
Removed Findconst from signature, as it's never used

Revision 1.7  91/06/24  11:32:50  jont
Removed match support, as this is internal to _lambda

Revision 1.6  91/06/21  10:30:46  jont
Modified match environment functions for use with fold. Changed
names to be consistent with value environment

Revision 1.5  91/06/19  17:44:00  jont
Added match environment type, and changed the types of matchvar
lookup and generate

Revision 1.4  91/06/17  14:49:00  jont
Change add_valid_env and add_strid_env to have type 'a * Env -> Env
to allow use with foldleft or foldright

Revision 1.3  91/06/12  13:44:00  jont
Added is_empty function for environments

Revision 1.2  91/06/11  16:54:29  jont
Abstracted out the types from the functions

Copyright (c) 1991 Harlequin Ltd.
*)

require "environtypes";

signature ENVIRON =
sig
  structure EnvironTypes: ENVIRONTYPES

  type Structure

  val empty_env: EnvironTypes.Env
  val empty_fun_env: EnvironTypes.Fun_Env
  val empty_top_env: EnvironTypes.Top_Env

  val empty_denv: EnvironTypes.DebuggerEnv

  val add_valid_env: EnvironTypes.Env * (EnvironTypes.LambdaTypes.Ident.ValId * EnvironTypes.comp) ->
    EnvironTypes.Env
    (* Add one ValId translation to an existing environment *)

  val add_strid_env:
    EnvironTypes.Env * (EnvironTypes.LambdaTypes.Ident.StrId * (EnvironTypes.Env * EnvironTypes.comp * bool))
      -> EnvironTypes.Env
    (* Add one StrId translation to an existing environment *)

  val add_valid_denv: EnvironTypes.DebuggerEnv * (EnvironTypes.LambdaTypes.Ident.ValId * EnvironTypes.DebuggerExp) ->
    EnvironTypes.DebuggerEnv
    (* Add one ValId translation to an existing environment *)

  val add_strid_denv:
    EnvironTypes.DebuggerEnv * 
    (EnvironTypes.LambdaTypes.Ident.StrId * EnvironTypes.DebuggerStrExp)
      -> EnvironTypes.DebuggerEnv
    (* Add one StrId translation to an existing environment *)

  val augment_env: EnvironTypes.Env * EnvironTypes.Env -> EnvironTypes.Env
    (* augment env by new env *)

  val augment_denv : 
    EnvironTypes.DebuggerEnv * EnvironTypes.DebuggerEnv -> EnvironTypes.DebuggerEnv
    (* augment env by new env *)

  val lookup_valid: EnvironTypes.LambdaTypes.Ident.ValId * EnvironTypes.Env -> EnvironTypes.comp

  val lookup_strid: EnvironTypes.LambdaTypes.Ident.StrId * EnvironTypes.Env ->
    EnvironTypes.Env * EnvironTypes.comp * bool

  val lookup_valid': EnvironTypes.LambdaTypes.Ident.ValId * EnvironTypes.DebuggerEnv -> EnvironTypes.DebuggerExp

  val lookup_strid': EnvironTypes.LambdaTypes.Ident.StrId * EnvironTypes.DebuggerEnv ->
    EnvironTypes.DebuggerStrExp

  val FindBuiltin: EnvironTypes.LambdaTypes.Ident.LongValId * EnvironTypes.Env ->
    EnvironTypes.LambdaTypes.Primitive option

  val define_overloaded_ops: (string * EnvironTypes.LambdaTypes.Primitive) list -> unit

  val overloaded_op: EnvironTypes.LambdaTypes.Ident.ValId -> 
    EnvironTypes.LambdaTypes.Primitive option

  val add_funid_env:
    EnvironTypes.Fun_Env *
    (EnvironTypes.LambdaTypes.Ident.FunId * (EnvironTypes.comp * EnvironTypes.Env * bool))
    -> EnvironTypes.Fun_Env
    (* Add one FunId translation to an existing environment *)

  val augment_top_env:
    EnvironTypes.Top_Env * EnvironTypes.Top_Env -> EnvironTypes.Top_Env
    (* augment top env by new top env *)

  val lookup_funid: EnvironTypes.LambdaTypes.Ident.FunId * EnvironTypes.Fun_Env ->
    EnvironTypes.comp * EnvironTypes.Env * bool

  val assign_fields : EnvironTypes.Top_Env -> EnvironTypes.Top_Env

  val number_envs : ('a list * 'b list * 'c list) ->
                     (('a * EnvironTypes.comp) list *
		      ('b * EnvironTypes.comp) list *
		      ('c * EnvironTypes.comp) list)

  val make_external : EnvironTypes.Top_Env -> EnvironTypes.Top_Env

  (* Take a Str and turn it into a lambda environment in which all *)
  (* identifiers are mapped to appropriately numbered fields.  Substructures *)
  (* are treated recursively. *)

  val make_str_env : Structure * bool -> EnvironTypes.Env

  val make_str_dexp : Structure -> EnvironTypes.DebuggerStrExp

  val simplify_topenv : EnvironTypes.Top_Env * EnvironTypes.LambdaTypes.LambdaExp -> EnvironTypes.Top_Env

end
@


1.36.4.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a3 3
 * Revision 1.36  1996/11/22  12:05:54  matthew
 * Removing reference to MLWorks.Option
 *
@


1.36.3.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a3 3
 * Revision 1.36  1996/11/22  12:05:54  matthew
 * Removing reference to MLWorks.Option
 *
@


1.36.2.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a3 3
 * Revision 1.36  1996/11/22  12:05:54  matthew
 * Removing reference to MLWorks.Option
 *
@


1.36.1.1
log
@branched from 1.36
@
text
@a3 3
 * Revision 1.36  1996/11/22  12:05:54  matthew
 * Removing reference to MLWorks.Option
 *
@


1.36.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a3 3
 * Revision 1.36.1.1  1997/05/12  10:34:50  hope
 * branched from 1.36
 *
@


1.36.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a3 3
 * Revision 1.36.1.1  1997/05/12  10:34:50  hope
 * branched from 1.36
 *
@


1.36.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a3 3
 * Revision 1.36.1.1  1997/05/12  10:34:50  hope
 * branched from 1.36
 *
@


1.36.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a3 3
 * Revision 1.36.1.1.1.1  1997/07/28  18:20:11  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.35
log
@Modification to the detection of overloaded valids
@
text
@d4 3
d172 1
a172 1
    EnvironTypes.LambdaTypes.Primitive MLWorks.Option.option
d177 1
a177 1
    EnvironTypes.LambdaTypes.Primitive MLWorks.Option.option
@


1.35.7.1
log
@branched from 1.35
@
text
@a3 3
 * Revision 1.35  1995/08/01  15:32:53  jont
 * Modification to the detection of overloaded valids
 *
@


1.35.6.1
log
@branched from 1.35
@
text
@a3 3
 * Revision 1.35  1995/08/01  15:32:53  jont
 * Modification to the detection of overloaded valids
 *
@


1.35.6.1.1.1
log
@branched from 1.35.6.1
@
text
@a3 3
 * Revision 1.35.6.1  1996/12/17  17:48:20  hope
 * branched from 1.35
 *
@


1.35.5.1
log
@branched from 1.35
@
text
@a3 3
 * Revision 1.35  1995/08/01  15:32:53  jont
 * Modification to the detection of overloaded valids
 *
@


1.35.4.1
log
@branched from 1.35
@
text
@a3 3
 * Revision 1.35  1995/08/01  15:32:53  jont
 * Modification to the detection of overloaded valids
 *
@


1.35.4.1.1.1
log
@branched from 1.35.4.1
@
text
@a3 3
 * Revision 1.35.4.1  1996/11/14  12:50:14  hope
 * branched from 1.35
 *
@


1.35.3.1
log
@branched from 1.35
@
text
@a3 3
 * Revision 1.35  1995/08/01  15:32:53  jont
 * Modification to the detection of overloaded valids
 *
@


1.35.2.1
log
@branched from 1.35
@
text
@a3 3
 * Revision 1.35  1995/08/01  15:32:53  jont
 * Modification to the detection of overloaded valids
 *
@


1.35.1.1
log
@branched from 1.35
@
text
@a3 3
 * Revision 1.35  1995/08/01  15:32:53  jont
 * Modification to the detection of overloaded valids
 *
@


1.34
log
@Adding environment simplifier
@
text
@d4 3
d171 1
a171 1
  val define_overloaded_ops: string list -> unit
d173 2
a174 1
  val is_overloaded_op: EnvironTypes.LambdaTypes.Ident.ValId -> bool
@


1.33
log
@Remove Builtin_p and modify FindBuiltin
@
text
@d4 3
d201 2
@


1.32
log
@Debugger environments for Modules Debugger.
@
text
@d4 3
a161 2
  val Builtin_p: EnvironTypes.LambdaTypes.Ident.LongValId * EnvironTypes.Env -> bool

d163 1
a163 1
    EnvironTypes.LambdaTypes.Primitive
@


1.31
log
@Merging in code change.
@
text
@d4 3
d121 2
d128 1
a128 1
    EnvironTypes.Env * (EnvironTypes.LambdaTypes.Ident.StrId * (EnvironTypes.Env * EnvironTypes.comp))
d132 10
d145 4
d152 3
a154 1
    EnvironTypes.Env * EnvironTypes.comp
d156 3
d170 1
a170 1
    (EnvironTypes.LambdaTypes.Ident.FunId * (EnvironTypes.comp * EnvironTypes.Env))
d179 1
a179 1
    EnvironTypes.comp * EnvironTypes.Env
d194 3
a196 1
  val make_str_env : Structure -> EnvironTypes.Env
@


1.30
log
@Removed exception environments and interfaces.
@
text
@d4 10
d158 5
@


1.30.1.1
log
@Fork for bug fixing
@
text
@a3 3
Revision 1.30  1993/07/07  16:40:24  daveb
Removed exception environments and interfaces.

@


1.30.1.2
log
@Added a new function number_envs, to replace uses of Lists.number_with_size,
a function which was too ugly (and inefficient) to live.
@
text
@a3 3
Revision 1.30.1.1  1993/07/07  16:40:24  jont
Fork for bug fixing

a150 5

  val number_envs : ('a list * 'b list * 'c list) ->
                     (('a * EnvironTypes.comp) list *
		      ('b * EnvironTypes.comp) list *
		      ('c * EnvironTypes.comp) list)
@


1.29
log
@Added type Structure
@
text
@d4 3
d111 1
a111 3
  val add_exn_env: EnvironTypes.Env * (EnvironTypes.LambdaTypes.Ident.ValId * EnvironTypes.comp) ->
    EnvironTypes.Env
    (* Add one exception translation to an existing environment *)
d116 1
d119 1
d121 1
a121 1
  val lookup_exn: EnvironTypes.LambdaTypes.Ident.ValId * EnvironTypes.Env -> EnvironTypes.comp
d124 1
d126 1
d129 1
d131 1
d133 1
d136 1
a136 1
    (EnvironTypes.LambdaTypes.Ident.FunId * (EnvironTypes.comp * EnvironTypes.Interface * EnvironTypes.Env))
d139 1
d143 1
d145 2
a146 1
    EnvironTypes.comp * EnvironTypes.Interface * EnvironTypes.Env
d148 1
a154 2
  val make_env_from_interface: EnvironTypes.Interface -> EnvironTypes.Env
  val make_interface_from_str: Structure -> EnvironTypes.Interface
d156 1
@


1.28
log
@Str to Structure
@
text
@d4 3
d98 3
d105 1
a105 1
  val add_valid_env: EnvironTypes.Env * (EnvironTypes.LambdaTypes.Datatypes.Ident.ValId * EnvironTypes.comp) ->
d108 1
a108 1
  val add_exn_env: EnvironTypes.Env * (EnvironTypes.LambdaTypes.Datatypes.Ident.ValId * EnvironTypes.comp) ->
d112 1
a112 1
    EnvironTypes.Env * (EnvironTypes.LambdaTypes.Datatypes.Ident.StrId * (EnvironTypes.Env * EnvironTypes.comp))
d117 3
a119 3
  val lookup_valid: EnvironTypes.LambdaTypes.Datatypes.Ident.ValId * EnvironTypes.Env -> EnvironTypes.comp
  val lookup_exn: EnvironTypes.LambdaTypes.Datatypes.Ident.ValId * EnvironTypes.Env -> EnvironTypes.comp
  val lookup_strid: EnvironTypes.LambdaTypes.Datatypes.Ident.StrId * EnvironTypes.Env ->
d121 2
a122 2
  val Builtin_p: EnvironTypes.LambdaTypes.Datatypes.Ident.LongValId * EnvironTypes.Env -> bool
  val FindBuiltin: EnvironTypes.LambdaTypes.Datatypes.Ident.LongValId * EnvironTypes.Env ->
d125 1
a125 1
  val is_overloaded_op: EnvironTypes.LambdaTypes.Datatypes.Ident.ValId -> bool
d128 1
a128 1
    (EnvironTypes.LambdaTypes.Datatypes.Ident.FunId * (EnvironTypes.comp * EnvironTypes.LambdaTypes.Datatypes.Interface.Int * EnvironTypes.Env))
d134 2
a135 2
  val lookup_funid: EnvironTypes.LambdaTypes.Datatypes.Ident.FunId * EnvironTypes.Fun_Env ->
    EnvironTypes.comp * EnvironTypes.LambdaTypes.Datatypes.Interface.Int * EnvironTypes.Env
d143 3
a145 4
  val make_env_from_interface: EnvironTypes.LambdaTypes.Datatypes.Interface.Int -> EnvironTypes.Env
  val make_interface_from_str:
    EnvironTypes.LambdaTypes.Datatypes.Structure -> EnvironTypes.LambdaTypes.Datatypes.Interface.Int
  val make_str_env : EnvironTypes.LambdaTypes.Datatypes.Structure -> EnvironTypes.Env
@


1.27
log
@Added make_interface_from_str.
Rationalised substructures
@
text
@d4 4
d139 2
a140 2
    EnvironTypes.LambdaTypes.Datatypes.Str -> EnvironTypes.LambdaTypes.Datatypes.Interface.Int
  val make_str_env : EnvironTypes.LambdaTypes.Datatypes.Str -> EnvironTypes.Env
@


1.26
log
@Removed a number of duplicated signatures and structures
@
text
@d4 3
a85 1
require "../typechecker/interface";
a90 3
  structure Interface: INTERFACE
  sharing Interface.Datatypes = EnvironTypes.LambdaTypes.Datatypes
  sharing Interface = EnvironTypes.Interface
d118 1
a118 1
    (EnvironTypes.LambdaTypes.Datatypes.Ident.FunId * (EnvironTypes.comp * Interface.Int * EnvironTypes.Env))
d125 1
a125 2
    EnvironTypes.comp * Interface.Int * EnvironTypes.Env
  val make_env_from_interface: Interface.Int -> EnvironTypes.Env
d133 3
@


1.25
log
@Removed some irrelevant ident comparison functions
@
text
@d4 3
d90 2
a91 1
  sharing EnvironTypes.Interface = Interface
@


1.24
log
@Change to NewMap.empty which now takes < and = functions instead of the single-function
@
text
@d4 3
a90 12

  val valid_order  : EnvironTypes.LambdaTypes.Datatypes.Ident.ValId * EnvironTypes.LambdaTypes.Datatypes.Ident.ValId -> bool
  val strid_order  : EnvironTypes.LambdaTypes.Datatypes.Ident.StrId * EnvironTypes.LambdaTypes.Datatypes.Ident.StrId -> bool
  val funid_order  : EnvironTypes.LambdaTypes.Datatypes.Ident.FunId * EnvironTypes.LambdaTypes.Datatypes.Ident.FunId -> bool
  val sigid_order  : EnvironTypes.LambdaTypes.Datatypes.Ident.SigId * EnvironTypes.LambdaTypes.Datatypes.Ident.SigId -> bool
  val symbol_order : EnvironTypes.LambdaTypes.Datatypes.Ident.Symbol.Symbol * EnvironTypes.LambdaTypes.Datatypes.Ident.Symbol.Symbol -> bool

  val valid_equal  : EnvironTypes.LambdaTypes.Datatypes.Ident.ValId * EnvironTypes.LambdaTypes.Datatypes.Ident.ValId -> bool
  val strid_equal  : EnvironTypes.LambdaTypes.Datatypes.Ident.StrId * EnvironTypes.LambdaTypes.Datatypes.Ident.StrId -> bool
  val funid_equal  : EnvironTypes.LambdaTypes.Datatypes.Ident.FunId * EnvironTypes.LambdaTypes.Datatypes.Ident.FunId -> bool
  val sigid_equal  : EnvironTypes.LambdaTypes.Datatypes.Ident.SigId * EnvironTypes.LambdaTypes.Datatypes.Ident.SigId -> bool
  val symbol_equal : EnvironTypes.LambdaTypes.Datatypes.Ident.Symbol.Symbol * EnvironTypes.LambdaTypes.Datatypes.Ident.Symbol.Symbol -> bool
@


1.23
log
@Added make_str_env.
@
text
@d4 3
d89 11
a99 5
  val valid_order  : EnvironTypes.LambdaTypes.Datatypes.Ident.ValId * EnvironTypes.LambdaTypes.Datatypes.Ident.ValId -> EnvironTypes.LambdaTypes.Datatypes.NewMap.relation
  val strid_order  : EnvironTypes.LambdaTypes.Datatypes.Ident.StrId * EnvironTypes.LambdaTypes.Datatypes.Ident.StrId -> EnvironTypes.LambdaTypes.Datatypes.NewMap.relation
  val funid_order  : EnvironTypes.LambdaTypes.Datatypes.Ident.FunId * EnvironTypes.LambdaTypes.Datatypes.Ident.FunId -> EnvironTypes.LambdaTypes.Datatypes.NewMap.relation
  val sigid_order  : EnvironTypes.LambdaTypes.Datatypes.Ident.SigId * EnvironTypes.LambdaTypes.Datatypes.Ident.SigId -> EnvironTypes.LambdaTypes.Datatypes.NewMap.relation
  val symbol_order : EnvironTypes.LambdaTypes.Datatypes.Ident.Symbol.Symbol * EnvironTypes.LambdaTypes.Datatypes.Ident.Symbol.Symbol -> EnvironTypes.LambdaTypes.Datatypes.NewMap.relation
@


1.22
log
@Removed some redundant structures and sharing
@
text
@d4 3
d126 6
@


1.21
log
@Added sigid_order and symbol_order functions.
@
text
@d4 3
a70 1
require "../basics/ident";
a75 1
  structure Ident: IDENT
a77 1
  sharing EnvironTypes.Ident = Ident
d83 5
a87 5
  val valid_order  : Ident.ValId * Ident.ValId -> EnvironTypes.NewMap.relation
  val strid_order  : Ident.StrId * Ident.StrId -> EnvironTypes.NewMap.relation
  val funid_order  : Ident.FunId * Ident.FunId -> EnvironTypes.NewMap.relation
  val sigid_order  : Ident.SigId * Ident.SigId -> EnvironTypes.NewMap.relation
  val symbol_order : Ident.Symbol.Symbol * Ident.Symbol.Symbol -> EnvironTypes.NewMap.relation
d89 1
a89 1
  val add_valid_env: EnvironTypes.Env * (Ident.ValId * EnvironTypes.comp) ->
d92 1
a92 1
  val add_exn_env: EnvironTypes.Env * (Ident.ValId * EnvironTypes.comp) ->
d96 1
a96 1
    EnvironTypes.Env * (Ident.StrId * (EnvironTypes.Env * EnvironTypes.comp))
d101 3
a103 3
  val lookup_valid: Ident.ValId * EnvironTypes.Env -> EnvironTypes.comp
  val lookup_exn: Ident.ValId * EnvironTypes.Env -> EnvironTypes.comp
  val lookup_strid: Ident.StrId * EnvironTypes.Env ->
d105 2
a106 2
  val Builtin_p: Ident.LongValId * EnvironTypes.Env -> bool
  val FindBuiltin: Ident.LongValId * EnvironTypes.Env ->
d109 1
a109 1
  val is_overloaded_op: Ident.ValId -> bool
d112 1
a112 1
    (Ident.FunId * (EnvironTypes.comp * Interface.Int * EnvironTypes.Env))
d118 1
a118 1
  val lookup_funid: Ident.FunId * EnvironTypes.Fun_Env ->
@


1.20
log
@Removed some structures and sharing
@
text
@d4 3
d74 1
a74 1
  structure Ident: IDENTCLASS
d83 5
a87 3
  val valid_order : Ident.ValId * Ident.ValId -> EnvironTypes.NewMap.relation
  val strid_order : Ident.StrId * Ident.StrId -> EnvironTypes.NewMap.relation
  val funid_order : Ident.FunId * Ident.FunId -> EnvironTypes.NewMap.relation
@


1.19
log
@Added make_external for benefit of interpreter
@
text
@d4 3
a67 1
require "lambdatypes";
a72 1
  structure LambdaTypes: LAMBDATYPES
a73 1
  sharing EnvironTypes.LambdaTypes = LambdaTypes
a99 3
(*
  val is_empty: EnvironTypes.Env -> bool
*)
d101 2
a102 1
  val FindBuiltin: Ident.LongValId * EnvironTypes.Env -> LambdaTypes.Primitive
@


1.18
log
@Changed to use newmap
@
text
@d4 3
d119 1
@


1.17
log
@Added assign_fields function
@
text
@d4 3
a59 2
require "../utils/map";
require "../utils/set";
a68 2
  structure Map: MAP
  structure Set: SET
a71 1
  sharing EnvironTypes.Map = Map
d77 4
d97 1
d99 1
@


1.16
log
@Changed paramter ordering in environment update to allow use with
Lists.foldl
@
text
@d4 4
d111 1
@


1.15
log
@Added exception environment to env
@
text
@d3 4
a6 1
$Log:	environ.sml,v $
d75 1
a75 1
  val add_valid_env: (Ident.ValId * EnvironTypes.comp) * EnvironTypes.Env ->
d78 1
a78 1
  val add_exn_env: (Ident.ValId * EnvironTypes.comp) * EnvironTypes.Env ->
d82 1
a82 1
    (Ident.StrId * (EnvironTypes.Env * EnvironTypes.comp)) * EnvironTypes.Env
d97 3
a99 3
    (Ident.FunId * (EnvironTypes.comp * Interface.Int * EnvironTypes.Env)) *
      EnvironTypes.Fun_Env
        -> EnvironTypes.Fun_Env
@


1.14
log
@Added empty_fun_env, add_funid_env
@
text
@d4 3
d75 3
d85 1
d103 1
@


1.13
log
@Removed make_imperative_primitives (now in main/primitives)
@
text
@d4 3
d66 1
d86 5
a90 4
(*
  val make_imperative_primitives:
    EnvironTypes.Env -> LambdaTypes.Primitive Set.Set
*)
d95 1
a95 1
    LambdaTypes.LVar * Interface.Int * EnvironTypes.Env
@


1.12
log
@Added empty_top_env and lookup_funid
@
text
@d4 3
d80 1
a80 1
  val define_overloaded_ops: EnvironTypes.Env -> unit
d82 1
d85 1
@


1.11
log
@Added augment_top_env
@
text
@d4 3
d43 1
d47 2
a48 1
signature ENVIRON = sig
d54 1
d58 1
a58 1

d60 1
d84 2
@


1.10
log
@Added function to find imperative primitives
@
text
@d4 3
d74 3
@


1.9
log
@Added overload environment to handle overloaded primitives such as +
@
text
@d4 3
d36 1
d45 1
d69 2
@


1.8
log
@Removed Findconst from signature, as it's never used
@
text
@d4 3
d62 2
@


1.7
log
@Removed match support, as this is internal to _lambda
@
text
@d4 3
a58 1
  val FindConst: string -> LambdaTypes.Primitive
@


1.6
log
@Modified match environment functions for use with fold. Changed
names to be consistent with value environment
@
text
@d4 4
a34 1
  structure Match: sig type Matchvar and Label end
a38 2
  datatype MatchEnv = ME of (Match.Matchvar, LambdaTypes.LVar) Map.Map

a39 1
  val empty_match_env: MatchEnv
a56 5
  val add_match_env: (Match.Matchvar * LambdaTypes.LVar) * MatchEnv -> MatchEnv
    (* Bind LVar to MV *)
  val lookup_match: Match.Matchvar * MatchEnv -> LambdaTypes.LVar
    (* Lookup LVar from MV *)
  val LabeltoLVar: Match.Label -> LambdaTypes.LVar
@


1.5
log
@Added match environment type, and changed the types of matchvar
lookup and generate
@
text
@d4 4
d57 1
a57 1
  val MVtoLVar: Match.Matchvar * LambdaTypes.LVar * MatchEnv -> MatchEnv
d59 1
a59 1
  val LVarFromMV: Match.Matchvar * MatchEnv -> LambdaTypes.LVar
@


1.4
log
@Change add_valid_env and add_strid_env to have type 'a * Env -> Env
to allow use with foldleft or foldright
@
text
@d4 4
d18 1
d26 1
d30 7
a48 1
  val empty_env: EnvironTypes.Env
d53 4
a56 2
  val MVtoLVar: Match.Matchvar -> LambdaTypes.LVar (* Bind LVar to MV *)
  val LVarFromMV: Match.Matchvar -> LambdaTypes.LVar (* Lookup LVar from MV *)
@


1.3
log
@Added is_empty function for environments
@
text
@d4 3
d24 2
a25 1
  val add_valid_env: Ident.ValId * EnvironTypes.comp * EnvironTypes.Env -> EnvironTypes.Env
d28 2
a29 2
    Ident.StrId * (EnvironTypes.Env * EnvironTypes.comp) * EnvironTypes.Env ->
      EnvironTypes.Env
@


1.2
log
@Abstracted out the types from the functions
@
text
@d3 4
a6 1
$Log$
d33 1
@


1.1
log
@Initial revision
@
text
@d2 5
d8 2
a11 1
  type primitive
d13 2
d16 21
a36 37
  structure Map: sig type ('a,'b) Map end
  type LVar
  datatype comp =
      LAMB of LVar |    (* Lambda variables names *)
      FIELD of int |    (* Field selectors in structures *)
      PRIM of primitive (* Primitive functions, numbers on the wall *)

  datatype Env =
      ENV of (Ident.ValId, comp) Map.Map * (Ident.StrId, Env * comp) Map.Map
    
  exception impossible of string
  exception not_done_yet of string
  val add_valid_env: Ident.ValId * comp * Env -> Env (* Add one translation *)
                                                     (* to an existing *)
					             (* environment *)
  val add_strid_env: Ident.StrId * (Env * comp) * Env -> Env
                                                     (* Add one translation *)
                                                     (* to an existing *)
					             (* environment *)
  val augment_env: Env * Env -> Env                  (* augment env by new *)
                                                     (* env *)
  val lookup_valid: Ident.ValId * Env -> comp
  val lookup_strid: Ident.StrId * Env -> Env * comp
  val empty_env: Env
  val Builtin_p: Ident.LongValId * Env -> bool
  val FindBuiltin: Ident.LongValId * Env -> primitive
  val FindConst: string -> primitive
  val MVtoLVar: Match.Matchvar -> LVar (* Bind a LVar to a MV *)
  val LVarFromMV: Match.Matchvar -> LVar (* Lookup a LVar from a MV *)
  val LabeltoLVar: Match.Label -> LVar
  val new_LVar: unit -> LVar
  val alter_LVar_count: LVar -> unit
  val init_LVar: unit -> unit
  val printLVar: LVar -> string
  val printprim: primitive -> string
end;
		    
@
