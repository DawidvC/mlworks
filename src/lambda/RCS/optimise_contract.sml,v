head	1.7;
access;
symbols
	ML_beta_release_12/08/94:1.7
	ML_beta_release_03/08/94:1.7
	ML_revised_beta_release_25/05/94:1.7
	ML_final_beta_release_02/03/94:1.7
	mlworks-28-01-1994:1.7
	Release:1.7
	mlworks-beta-01-09-1993:1.7
	MLWorks-1-0-4-29/01/1993:1.6
	MLWorks-1-0-3-21/12/1992:1.6
	MLWorks-1-0-2-15/12/1992:1.6
	MLWorks-1-0-1-04/12/1992:1.6
	checkpoint_17_08_92:1.6;
locks; strict;
comment	@ * @;


1.7
date	93.05.28.10.49.11;	author nosa;	state Exp;
branches
	1.7.1.1;
next	1.6;

1.6
date	92.07.09.17.29.55;	author davida;	state Exp;
branches;
next	1.5;

1.5
date	92.01.03.12.30.59;	author jont;	state Exp;
branches;
next	1.4;

1.4
date	91.10.22.13.57.51;	author davidt;	state Exp;
branches;
next	1.3;

1.3
date	91.09.16.10.44.59;	author davida;	state Exp;
branches;
next	1.2;

1.2
date	91.09.10.16.49.18;	author davida;	state Exp;
branches;
next	1.1;

1.1
date	91.09.09.10.01.16;	author davida;	state Exp;
branches;
next	;

1.7.1.1
date	93.05.28.10.49.11;	author jont;	state Exp;
branches;
next	;


desc
@Strictly contracting optimisations.
@


1.7
log
@structure Option.
@
text
@
(*  Lambda-Calculus Optimisation:  optimise_contract  *)

      (*  Contraction-phase Optimisations:  *)


(*  Copyright (c) 1991 Harlequin Ltd. *)

require "lambdatypes";

signature OPTIMISE_CONTRACT =
  sig
    structure LT : LAMBDATYPES

    (* basic transforms *)

    val beta_reduce : LT.LambdaExp -> LT.LambdaExp
    val select_elim : LT.LambdaInfo -> LT.LambdaExp -> LT.LambdaExp
    val switch_weed : LT.LambdaInfo -> LT.LambdaExp -> LT.LambdaExp
    val switch_elim : LT.LambdaInfo -> LT.LambdaExp -> LT.LambdaExp
    val struct_elim : LT.LambdaInfo ->
      LT.LambdaExp LT.Option.opt -> LT.LambdaExp -> LT.LambdaExp
    val letrec_elim : LT.LambdaInfo -> LT.LambdaExp -> LT.LambdaExp
    val raise_cut   : LT.LambdaInfo -> LT.LambdaExp -> LT.LambdaExp

    val show_debug_info : bool ref
  end;
@


1.7.1.1
log
@Fork for bug fixing
@
text
@@


1.6
log
@Added switch_weed, removed eta_reduce, changed type
of beta_reduce.
@
text
@d22 1
a22 1
      LT.LambdaExp LT.Opt -> LT.LambdaExp -> LT.LambdaExp
@


1.5
log
@Changed struct_elim to be usable with apply_innermost_with_context
@
text
@d17 1
a17 2
    val beta_reduce : LT.LambdaInfo -> LT.LambdaExp -> LT.LambdaExp
    val eta_reduce  : LT.LambdaInfo -> LT.LambdaExp -> LT.LambdaExp
d19 1
@


1.4
log
@Replaced impossible exception with Crash.impossible calls.
@
text
@d21 2
a22 1
    val struct_elim : LT.LambdaInfo -> LT.LambdaExp -> LT.LambdaExp
@


1.3
log
@Added raise_cut optimisation.
@
text
@a8 1

a10 1

d12 2
a13 2
   sig
      structure LT : LAMBDATYPES
d15 1
a15 1
      (* basic transforms *)
d17 7
a23 7
      val beta_reduce : LT.LambdaInfo -> LT.LambdaExp -> LT.LambdaExp
      val eta_reduce  : LT.LambdaInfo -> LT.LambdaExp -> LT.LambdaExp
      val select_elim : LT.LambdaInfo -> LT.LambdaExp -> LT.LambdaExp
      val switch_elim : LT.LambdaInfo -> LT.LambdaExp -> LT.LambdaExp
      val struct_elim : LT.LambdaInfo -> LT.LambdaExp -> LT.LambdaExp
      val letrec_elim : LT.LambdaInfo -> LT.LambdaExp -> LT.LambdaExp
      val raise_cut   : LT.LambdaInfo -> LT.LambdaExp -> LT.LambdaExp
d25 2
a26 3
      exception impossible of string
      val show_debug_info : bool ref
   end
@


1.2
log
@Added new letrec_elim optimisation.
@
text
@d25 1
@


1.1
log
@Initial revision
@
text
@d24 1
@
