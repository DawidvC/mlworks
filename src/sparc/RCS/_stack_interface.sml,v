head	1.12;
access;
symbols
	MLW_daveb_inline_1_4_99:1.12.1
	MLWorks_21c0_1999_03_25:1.12
	MLWorks_20c1_1998_08_20:1.12
	MLWorks_20c0_1998_08_04:1.12
	MLWorks_20b2c2_1998_06_19:1.12
	MLWorks_20b2_Windows_1998_06_12:1.12
	MLWorks_20b1c1_1998_05_07:1.12
	MLWorks_20b0_1998_04_07:1.12
	MLWorks_20b0_1998_03_20:1.11
	MLWorks_20m2_1998_02_16:1.11
	MLWorks_20m1_1997_10_23:1.11
	MLWorks_11r1:1.11.1.1.1.1.1
	MLWorks_workspace_97:1.11.3
	MLWorks_dt_wizard:1.11.2
	MLWorks_11c0_1997_09_09:1.11.1.1.1.1
	MLWorks_10r3:1.11.1.1.3
	MLWorks_10r2_551:1.11.1.1.2
	MLWorks_11:1.11.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.11.1.1
	MLWorks_20m0_1997_06_20:1.11
	MLWorks_1_0_r2c2_1997_06_14:1.11.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.11.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.11.1
	MLWorks_BugFix_1997_04_24:1.11
	MLWorks_1_0_r2_Win32_1997_04_11:1.11
	MLWorks_1_0_r2_Unix_1997_04_04:1.11
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.10.6.1.1
	MLWorks_gui_1996_12_18:1.10.7
	MLWorks_1_0_Win32_1996_12_17:1.10.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.10.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.10.4.1
	MLWorks_1_0_Irix_1996_11_28:1.10.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.10.5
	MLWorks_1_0_Unix_1996_11_14:1.10.4
	MLWorks_Open_Beta2_1996_10_11:1.10.3
	MLWorks_License_dev:1.10.2
	MLWorks_1_open_beta_1996_09_13:1.10.1
	MLWorks_Open_Beta_1996_08_22:1.10
	MLWorks_Beta_1996_07_02:1.10
	MLWorks_Beta_1996_06_07:1.10
	MLWorks_Beta_1996_06_06:1.10
	MLWorks_Beta_1996_06_05:1.10
	MLWorks_Beta_1996_06_03:1.10
	MLWorks_Beta_1996_05_31:1.10
	MLWorks_Beta_1996_05_30:1.10;
locks; strict;
comment	@ * @;


1.12
date	98.03.23.15.02.16;	author jont;	state Exp;
branches
	1.12.1.1;
next	1.11;

1.11
date	97.03.20.15.31.02;	author stephenb;	state Exp;
branches
	1.11.1.1
	1.11.2.1
	1.11.3.1;
next	1.10;

1.10
date	96.05.17.09.54.39;	author matthew;	state Exp;
branches
	1.10.1.1
	1.10.2.1
	1.10.3.1
	1.10.4.1
	1.10.5.1
	1.10.6.1
	1.10.7.1;
next	1.9;

1.9
date	96.05.17.09.44.22;	author matthew;	state Exp;
branches;
next	1.8;

1.8
date	96.05.01.09.54.01;	author jont;	state Exp;
branches;
next	1.7;

1.7
date	96.03.20.14.33.39;	author matthew;	state Exp;
branches;
next	1.6;

1.6
date	96.02.07.15.13.18;	author stephenb;	state Exp;
branches;
next	1.5;

1.5
date	95.10.17.12.23.48;	author matthew;	state Exp;
branches;
next	1.4;

1.4
date	95.05.01.10.26.25;	author jont;	state Exp;
branches;
next	1.3;

1.3
date	95.04.21.14.30.06;	author matthew;	state Exp;
branches;
next	1.2;

1.2
date	95.04.21.14.30.06;	author matthew;	state Exp;
branches;
next	1.1;

1.1
date	95.03.20.11.03.36;	author matthew;	state Exp;
branches;
next	;

1.10.1.1
date	96.09.13.11.26.40;	author hope;	state Exp;
branches;
next	;

1.10.2.1
date	96.10.07.16.17.11;	author hope;	state Exp;
branches;
next	;

1.10.3.1
date	96.10.17.11.36.56;	author hope;	state Exp;
branches;
next	;

1.10.4.1
date	96.11.14.13.04.47;	author hope;	state Exp;
branches
	1.10.4.1.1.1;
next	;

1.10.4.1.1.1
date	96.11.28.15.14.14;	author hope;	state Exp;
branches;
next	;

1.10.5.1
date	96.11.22.18.22.15;	author hope;	state Exp;
branches;
next	;

1.10.6.1
date	96.12.17.18.00.15;	author hope;	state Exp;
branches
	1.10.6.1.1.1;
next	;

1.10.6.1.1.1
date	97.02.24.11.51.54;	author hope;	state Exp;
branches;
next	;

1.10.7.1
date	96.12.18.09.55.37;	author hope;	state Exp;
branches;
next	;

1.11.1.1
date	97.05.12.10.50.17;	author hope;	state Exp;
branches
	1.11.1.1.1.1
	1.11.1.1.2.1
	1.11.1.1.3.1;
next	;

1.11.1.1.1.1
date	97.07.28.18.32.30;	author daveb;	state Exp;
branches
	1.11.1.1.1.1.1.1;
next	;

1.11.1.1.1.1.1.1
date	97.10.07.11.58.38;	author jkbrook;	state Exp;
branches;
next	;

1.11.1.1.2.1
date	97.09.08.17.25.46;	author daveb;	state Exp;
branches;
next	;

1.11.1.1.3.1
date	97.09.09.14.22.24;	author daveb;	state Exp;
branches;
next	;

1.11.2.1
date	97.09.10.19.41.30;	author brucem;	state Exp;
branches;
next	;

1.11.3.1
date	97.09.11.21.09.03;	author daveb;	state Exp;
branches;
next	;

1.12.1.1
date	99.04.01.18.07.51;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
Machine dependent debugger stuff.
@


1.12
log
@[Bug #30090]
Remove use of MLWorks.IO
@
text
@(* _stack_interface the structure *)
(*
$Log: _stack_interface.sml,v $
 * Revision 1.11  1997/03/20  15:31:02  stephenb
 * [Bug #1822]
 * Add frame and ml_value types as which have been introduced
 * into the signature <URI:hope://MLWsrc/main/stack_interface.sml>
 * in version 1.4.
 *
 * Revision 1.10  1996/05/17  09:54:39  matthew
 * Moved Bits to MLWorks.Internal.Bits
 *
 * Revision 1.9  1996/05/17  09:44:22  matthew
 * Moved Bits to MLWorks.Internal
 *
 * Revision 1.8  1996/05/01  09:54:01  jont
 * String functions explode, implode, chr and ord now only available from String
 * io functions and types
 * instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
 * now only available from MLWorks.IO
 *
 * Revision 1.7  1996/03/20  14:33:39  matthew
 * Changes for new language definition
 *
 * Revision 1.6  1996/02/07  15:13:18  stephenb
 * Add frame_code in order to support "next" command in debugger.
 *
 * Revision 1.5  1995/10/17  12:23:48  matthew
 * Adding "set_return_value" function
 *
 * for use in tracing.
 *
 * Revision 1.4  1995/05/01  10:26:25  jont
 * Get require statements right
 *
 * Revision 1.3  1995/04/21  14:30:06  matthew
 * Switching off debugging
 *
 * Revision 1.1  1995/03/20  11:03:36  matthew
 * new unit
 * Machine dependent debugger stuff.
 *
*)

require "^.basis.__text_io";
require "^.rts.gen.tags";
require "^.utils.crash";
require "^.main.stack_interface";

functor StackInterface (structure Tags : TAGS
                        structure Crash : CRASH
                          ) : STACK_INTERFACE =
  struct

    type frame = MLWorks.Internal.Value.Frame.frame

    type ml_value = MLWorks.Internal.Value.ml_value

    structure Bits = MLWorks.Internal.Bits

    val do_debug = false

    fun debug f =
      if do_debug
        then TextIO.output(TextIO.stdErr,"  # " ^ f () ^ "\n")
      else ()

    (* Miscellaneous utilities *)
    (* Maybe these should be elsewhere *)

    val is_ml_frame = MLWorks.Internal.Value.Frame.is_ml_frame
    val cast = MLWorks.Internal.Value.cast


    (* SPARC specific stuff *)
    val sp_offset = 14
    val closure_offset = 9
    val arg_offset = 8

    fun frame_arg frame = MLWorks.Internal.Value.Frame.sub (frame,arg_offset)
    fun set_frame_return_value (frame,value) = MLWorks.Internal.Value.Frame.update (frame,arg_offset,value)

    (* "Generic" frame function *)

    (* SPARC version *)
    fun next_frame frame : frame = 
      cast (MLWorks.Internal.Value.Frame.sub (frame,sp_offset))

    fun get_basic_frames (bottom,base_frame) =
      let
        fun scan (bottom,acc) =
          let
            val (another,next,offset) = MLWorks.Internal.Value.Frame.frame_next bottom
          in
            if another andalso next <> base_frame
              then
                scan (next,(next,offset,offset <> 0)::acc)
            else
              (if next <> base_frame then debug (fn _ => "No base frame") else ();
                 acc)
          end
        (* Skip a frame *)
        val bottom = next_frame bottom
        val acc = [(bottom,0,is_ml_frame bottom)]
      in
        (* omit bottom frame (this is the one above the base frame) *)
        (* This depends on our mechanism for setting up the base frame *)
        case scan (bottom,acc) of
          (_::rest) => rest
        | rest => rest
      end

    fun variable_debug_frame frame = frame

    (* End SPARC specific stuff *)

    fun frame_code frame =
      let
        open MLWorks.Internal.Value
        val closure = Frame.sub (frame, closure_offset)
        val primary = primary closure
        val offset = 
          if primary = Tags.PAIRPTR then 0
          else if primary = Tags.POINTER then 1
          else Crash.impossible "bad primary for frame_name"
      in
        sub (closure, offset)
      end


    fun frame_name frame = MLWorks.Internal.Value.code_name (frame_code frame)

    fun frame_closure frame = MLWorks.Internal.Value.Frame.sub (frame,closure_offset)

    fun is_stack_extension_frame frame = 
      let
        val closure = frame_closure frame
      in
        cast closure = Bits.rshift (Tags.STACK_EXTENSION,2)
      end

  end

    
@


1.12.1.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a3 4
 * Revision 1.12  1998/03/23  15:02:16  jont
 * [Bug #30090]
 * Remove use of MLWorks.IO
 *
@


1.11
log
@[Bug #1822]
Add frame and ml_value types as which have been introduced
into the signature <URI:hope://MLWsrc/main/stack_interface.sml>
in version 1.4.
@
text
@d4 6
d45 1
d65 1
a65 1
        then MLWorks.IO.output(MLWorks.IO.std_err,"  # " ^ f () ^ "\n")
@


1.11.3.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a3 6
 * Revision 1.11  1997/03/20  15:31:02  stephenb
 * [Bug #1822]
 * Add frame and ml_value types as which have been introduced
 * into the signature <URI:hope://MLWsrc/main/stack_interface.sml>
 * in version 1.4.
 *
@


1.11.2.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a3 6
 * Revision 1.11  1997/03/20  15:31:02  stephenb
 * [Bug #1822]
 * Add frame and ml_value types as which have been introduced
 * into the signature <URI:hope://MLWsrc/main/stack_interface.sml>
 * in version 1.4.
 *
@


1.11.1.1
log
@branched from 1.11
@
text
@a3 6
 * Revision 1.11  1997/03/20  15:31:02  stephenb
 * [Bug #1822]
 * Add frame and ml_value types as which have been introduced
 * into the signature <URI:hope://MLWsrc/main/stack_interface.sml>
 * in version 1.4.
 *
@


1.11.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a3 3
 * Revision 1.11.1.1  1997/05/12  10:50:17  hope
 * branched from 1.11
 *
@


1.11.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a3 3
 * Revision 1.11.1.1  1997/05/12  10:50:17  hope
 * branched from 1.11
 *
@


1.11.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a3 3
 * Revision 1.11.1.1  1997/05/12  10:50:17  hope
 * branched from 1.11
 *
@


1.11.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a3 3
 * Revision 1.11.1.1.1.1  1997/07/28  18:32:30  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.10
log
@Moved Bits to MLWorks.Internal.Bits
@
text
@d4 3
d39 3
a41 4
require "../rts/gen/tags";

require "../utils/crash";
require "../main/stack_interface";
d48 4
d79 1
a79 1
    fun next_frame frame : MLWorks.Internal.Value.Frame.frame = 
@


1.10.7.1
log
@branched from 1.10
@
text
@a3 3
 * Revision 1.10  1996/05/17  09:54:39  matthew
 * Moved Bits to MLWorks.Internal.Bits
 *
@


1.10.6.1
log
@branched from 1.10
@
text
@a3 3
 * Revision 1.10  1996/05/17  09:54:39  matthew
 * Moved Bits to MLWorks.Internal.Bits
 *
@


1.10.6.1.1.1
log
@branched from 1.10.6.1
@
text
@a3 3
 * Revision 1.10.6.1  1996/12/17  18:00:15  hope
 * branched from 1.10
 *
@


1.10.5.1
log
@branched from 1.10
@
text
@a3 3
 * Revision 1.10  1996/05/17  09:54:39  matthew
 * Moved Bits to MLWorks.Internal.Bits
 *
@


1.10.4.1
log
@branched from 1.10
@
text
@a3 3
 * Revision 1.10  1996/05/17  09:54:39  matthew
 * Moved Bits to MLWorks.Internal.Bits
 *
@


1.10.4.1.1.1
log
@branched from 1.10.4.1
@
text
@a3 3
 * Revision 1.10.4.1  1996/11/14  13:04:47  hope
 * branched from 1.10
 *
@


1.10.3.1
log
@branched from 1.10
@
text
@a3 3
 * Revision 1.10  1996/05/17  09:54:39  matthew
 * Moved Bits to MLWorks.Internal.Bits
 *
@


1.10.2.1
log
@branched from 1.10
@
text
@a3 3
 * Revision 1.10  1996/05/17  09:54:39  matthew
 * Moved Bits to MLWorks.Internal.Bits
 *
@


1.10.1.1
log
@branched from 1.10
@
text
@a3 3
 * Revision 1.10  1996/05/17  09:54:39  matthew
 * Moved Bits to MLWorks.Internal.Bits
 *
@


1.9
log
@Moved Bits to MLWorks.Internal
@
text
@d4 3
a102 3

    structure Bits = MLWorks.Bits

@


1.8
log
@String functions explode, implode, chr and ord now only available from String
io functions and types
instream, oustream, open_in, open_out, close_in, close_out, input, output and end_of_stream
now only available from MLWorks.IO
@
text
@d4 6
d42 2
@


1.7
log
@Changes for new language definition
@
text
@d4 3
d41 1
a41 1
        then output(MLWorks.IO.std_err,"  # " ^ f () ^ "\n")
@


1.6
log
@Add frame_code in order to support "next" command in debugger.
@
text
@d4 3
d45 1
a45 1
    val castit : 'a -> 'b = MLWorks.Internal.Value.cast (fn x => x)
d60 1
a60 1
      castit (MLWorks.Internal.Value.Frame.sub (frame,sp_offset))
d109 1
d111 6
a116 9

      fun frame_closure frame = MLWorks.Internal.Value.Frame.sub (frame,closure_offset)

      fun is_stack_extension_frame frame = 
        let
          val closure = frame_closure frame
        in
          castit closure = Bits.rshift (Tags.STACK_EXTENSION,2)
        end
@


1.5
log
@Adding "set_return_value" function

for use in tracing.
@
text
@d4 5
d89 2
a90 1
    fun frame_name frame = 
d100 1
a100 1
        code_name (sub (closure, offset))
d102 5
@


1.4
log
@Get require statements right
@
text
@d4 3
d46 1
@


1.3
log
@Switching off debugging
@
text
@d4 7
a10 4
# Revision 1.1  1995/03/20  11:03:36  matthew
# new unit
# Machine dependent debugger stuff.
#
d13 1
a13 1
require "rts/gen/tags";
@


1.2
log
@Switching off debugging
@
text
@@


1.1
log
@new unit
Machine dependent debugger stuff.
@
text
@d3 5
a7 1
$Log: stack_interface.sml,v $
d20 1
a20 1
    val do_debug = true
@
