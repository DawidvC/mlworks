head	1.34;
access;
symbols
	MLW_daveb_inline_1_4_99:1.34.4
	MLWorks_21c0_1999_03_25:1.34
	MLWorks_20c1_1998_08_20:1.34
	MLWorks_20c0_1998_08_04:1.34
	MLWorks_20b2c2_1998_06_19:1.34
	MLWorks_20b2_Windows_1998_06_12:1.34
	MLWorks_20b1c1_1998_05_07:1.34
	MLWorks_20b0_1998_04_07:1.34
	MLWorks_20b0_1998_03_20:1.34
	MLWorks_20m2_1998_02_16:1.34
	MLWorks_20m1_1997_10_23:1.34
	MLWorks_11r1:1.34.1.1.1.1.1
	MLWorks_workspace_97:1.34.3
	MLWorks_dt_wizard:1.34.2
	MLWorks_11c0_1997_09_09:1.34.1.1.1.1
	MLWorks_10r3:1.34.1.1.3
	MLWorks_10r2_551:1.34.1.1.2
	MLWorks_11:1.34.1.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.34.1.1
	MLWorks_20m0_1997_06_20:1.34
	MLWorks_1_0_r2c2_1997_06_14:1.34.1.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.34.1.1
	MLWorks_1_0_r2c1_1997_05_12:1.34.1
	MLWorks_BugFix_1997_04_24:1.34
	MLWorks_1_0_r2_Win32_1997_04_11:1.34
	MLWorks_1_0_r2_Unix_1997_04_04:1.34
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.33.6.1.1
	MLWorks_gui_1996_12_18:1.33.7
	MLWorks_1_0_Win32_1996_12_17:1.33.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.33.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.33.4.1
	MLWorks_1_0_Irix_1996_11_28:1.33.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.33.5
	MLWorks_1_0_Unix_1996_11_14:1.33.4
	MLWorks_Open_Beta2_1996_10_11:1.33.3
	MLWorks_License_dev:1.33.2
	MLWorks_1_open_beta_1996_09_13:1.33.1
	MLWorks_Open_Beta_1996_08_22:1.33
	MLWorks_Beta_1996_07_02:1.33
	MLWorks_Beta_1996_06_07:1.33
	MLWorks_Beta_1996_06_06:1.33
	MLWorks_Beta_1996_06_05:1.33
	MLWorks_Beta_1996_06_03:1.33
	MLWorks_Beta_1996_05_31:1.33
	MLWorks_Beta_1996_05_30:1.33
	ML_beta_release_12/08/94:1.30
	ML_beta_release_03/08/94:1.30
	ML_revised_beta_release_25/05/94:1.29
	ML_final_beta_release_02/03/94:1.28
	mlworks-28-01-1994:1.28
	Release:1.28
	mlworks-beta-01-09-1993:1.28
	MLWorks-1-0-4-29/01/1993:1.24
	MLWorks-1-0-3-21/12/1992:1.23
	MLWorks-1-0-2-15/12/1992:1.23
	MLWorks-1-0-1-04/12/1992:1.23
	checkpoint_17_08_92:1.22
	Ten15_release_19-08-91:1.1;
locks; strict;
comment	@ * @;


1.34
date	97.01.17.13.07.48;	author matthew;	state Exp;
branches
	1.34.1.1
	1.34.2.1
	1.34.3.1
	1.34.4.1;
next	1.33;

1.33
date	95.08.14.11.27.44;	author jont;	state Exp;
branches
	1.33.1.1
	1.33.2.1
	1.33.3.1
	1.33.4.1
	1.33.5.1
	1.33.6.1
	1.33.7.1;
next	1.32;

1.32
date	95.07.25.10.29.18;	author jont;	state Exp;
branches;
next	1.31;

1.31
date	94.07.29.11.32.18;	author matthew;	state Exp;
branches;
next	1.30;

1.30
date	94.07.22.16.13.23;	author matthew;	state Exp;
branches;
next	1.29;

1.29
date	94.03.08.18.13.42;	author jont;	state Exp;
branches;
next	1.28;

1.28
date	93.03.18.10.08.25;	author jont;	state Exp;
branches
	1.28.1.1;
next	1.27;

1.27
date	93.03.11.11.07.01;	author matthew;	state Exp;
branches;
next	1.26;

1.26
date	93.03.01.14.27.32;	author matthew;	state Exp;
branches;
next	1.25;

1.25
date	93.02.03.15.34.03;	author jont;	state Exp;
branches;
next	1.24;

1.24
date	93.01.15.11.33.57;	author jont;	state Exp;
branches;
next	1.23;

1.23
date	92.09.15.10.53.35;	author clive;	state Exp;
branches;
next	1.22;

1.22
date	92.06.18.11.19.07;	author jont;	state Exp;
branches;
next	1.21;

1.21
date	92.01.13.14.19.43;	author clive;	state Exp;
branches;
next	1.20;

1.20
date	92.01.07.09.08.17;	author clive;	state Exp;
branches;
next	1.19;

1.19
date	91.11.25.15.48.38;	author jont;	state Exp;
branches;
next	1.18;

1.18
date	91.11.20.17.07.56;	author jont;	state Exp;
branches;
next	1.17;

1.17
date	91.11.13.12.35.12;	author jont;	state Exp;
branches;
next	1.16;

1.16
date	91.11.11.18.02.26;	author jont;	state Exp;
branches;
next	1.15;

1.15
date	91.11.08.11.28.10;	author jont;	state Exp;
branches;
next	1.14;

1.14
date	91.10.28.11.54.25;	author jont;	state Exp;
branches;
next	1.13;

1.13
date	91.10.24.15.56.55;	author davidt;	state Exp;
branches;
next	1.12;

1.12
date	91.10.24.13.17.52;	author jont;	state Exp;
branches;
next	1.11;

1.11
date	91.10.16.12.55.55;	author jont;	state Exp;
branches;
next	1.10;

1.10
date	91.10.15.16.53.50;	author jont;	state Exp;
branches;
next	1.9;

1.9
date	91.10.09.14.33.25;	author richard;	state Exp;
branches;
next	1.8;

1.8
date	91.10.08.18.46.51;	author jont;	state Exp;
branches;
next	1.7;

1.7
date	91.10.07.11.46.35;	author richard;	state Exp;
branches;
next	1.6;

1.6
date	91.10.03.09.42.45;	author richard;	state Exp;
branches;
next	1.5;

1.5
date	91.10.02.10.30.55;	author jont;	state Exp;
branches;
next	1.4;

1.4
date	91.09.06.13.15.47;	author jont;	state Exp;
branches;
next	1.3;

1.3
date	91.08.27.12.24.19;	author davida;	state Exp;
branches;
next	1.2;

1.2
date	91.08.22.11.01.33;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	91.08.09.17.21.47;	author jont;	state Exp;
branches;
next	;

1.28.1.1
date	93.03.18.10.08.25;	author jont;	state Exp;
branches;
next	;

1.33.1.1
date	96.09.13.11.26.21;	author hope;	state Exp;
branches;
next	;

1.33.2.1
date	96.10.07.16.16.51;	author hope;	state Exp;
branches;
next	;

1.33.3.1
date	96.10.17.11.36.25;	author hope;	state Exp;
branches;
next	;

1.33.4.1
date	96.11.14.13.04.28;	author hope;	state Exp;
branches
	1.33.4.1.1.1;
next	;

1.33.4.1.1.1
date	96.11.28.15.13.54;	author hope;	state Exp;
branches;
next	;

1.33.5.1
date	96.11.22.18.21.55;	author hope;	state Exp;
branches;
next	;

1.33.6.1
date	96.12.17.17.59.53;	author hope;	state Exp;
branches
	1.33.6.1.1.1;
next	;

1.33.6.1.1.1
date	97.02.24.11.51.31;	author hope;	state Exp;
branches;
next	;

1.33.7.1
date	96.12.18.09.55.15;	author hope;	state Exp;
branches;
next	;

1.34.1.1
date	97.05.12.10.49.57;	author hope;	state Exp;
branches
	1.34.1.1.1.1
	1.34.1.1.2.1
	1.34.1.1.3.1;
next	;

1.34.1.1.1.1
date	97.07.28.18.32.10;	author daveb;	state Exp;
branches
	1.34.1.1.1.1.1.1;
next	;

1.34.1.1.1.1.1.1
date	97.10.07.11.58.17;	author jkbrook;	state Exp;
branches;
next	;

1.34.1.1.2.1
date	97.09.08.17.25.24;	author daveb;	state Exp;
branches;
next	;

1.34.1.1.3.1
date	97.09.09.14.22.04;	author daveb;	state Exp;
branches;
next	;

1.34.2.1
date	97.09.10.19.41.07;	author brucem;	state Exp;
branches;
next	;

1.34.3.1
date	97.09.11.21.08.43;	author daveb;	state Exp;
branches;
next	;

1.34.4.1
date	99.04.01.18.07.33;	author daveb;	state Exp;
branches;
next	;


desc
@Machine limits etc for Sparc
@


1.34
log
@Adding y register
@
text
@(* machtypes.sml the signature *)
(*
$Log: machtypes.sml,v $
 * Revision 1.33  1995/08/14  11:27:44  jont
 * Add bits_per_word, remove max and min integer s and words
 *
Revision 1.32  1995/07/25  10:29:18  jont
Add largest_word machine limit

Revision 1.31  1994/07/29  11:32:18  matthew
Added *_arg_regs
Removed *_arg2

Revision 1.30  1994/07/22  16:13:23  matthew
Added extra argument register
hdiff sparc/_machspec.sml

Revision 1.29  1994/03/08  18:13:42  jont
Remove module type to separate file

Revision 1.28  1993/03/18  10:08:25  jont
Added leaf and offsets lists into WORDSET

Revision 1.27  1993/03/11  11:07:01  matthew
Signature revisions

Revision 1.26  1993/03/01  14:27:32  matthew
Added MLVALUEs

Revision 1.25  1993/02/03  15:34:03  jont
Changes for code vector reform.

Revision 1.24  1993/01/15  11:33:57  jont
Split store into three areas of heap, stack and nil vector for scheduling improvement

Revision 1.23  1992/09/15  10:53:35  clive
Checked and corrected the specification for the floating point registers

Revision 1.22  1992/06/18  11:19:07  jont
Added furhter constructors to the module element type to express
interpretive stuff

Revision 1.21  1992/01/13  14:19:43  clive
Added code for non_gc spills number in front of code objects in a closure
by changing wordset definition

Revision 1.20  1992/01/07  09:08:17  clive
Added stack limit register definitions

Revision 1.19  1991/11/25  15:48:38  jont
Added fp_global as a temporary for conversions from fp to int

Revision 1.18  91/11/20  17:07:56  jont
Added check_reg function from mach_cg to see when save/restore is needed

Revision 1.17  91/11/13  12:35:12  jont
Added next_reg to signature

Revision 1.16  91/11/11  18:02:26  jont
Added a maximum number of real digits, and a type to determine the
type of floating point in use

Revision 1.15  91/11/08  11:28:10  jont
Added printing of floating point registers

Revision 1.14  91/10/28  11:54:25  jont
Added store register for detection of load/store interaction

Revision 1.13  91/10/24  15:56:55  davidt
Now knows about the `implicit' register.

Revision 1.12  91/10/24  13:17:52  jont
Added cond register to represent the condition for the benefit of the
instruction scheduler

Revision 1.11  91/10/16  12:55:55  jont
New improved simplified module structure

Revision 1.10  91/10/15  16:53:50  jont
Changed defn of FN_CALL

Revision 1.9  91/10/09  14:33:25  richard
Added some new register definitions

Revision 1.8  91/10/08  18:46:51  jont
New module structure with lists of functions

Revision 1.7  91/10/07  11:46:35  richard
Moved some system dependent stuff to MachSpec.

Revision 1.6  91/10/03  09:42:45  richard
Changed the name of spillable_regs to gc_registers for consistency,
and added fp_registers and fp_double_registers. These are currently set
to the empty set.

Revision 1.5  91/10/02  10:30:55  jont
More register names and fixed translations

Revision 1.4  91/09/06  13:15:47  jont
Added register definitions etc

Revision 1.3  91/08/27  12:24:19  davida
Added exceptions Ord and Chr

Revision 1.2  91/08/22  11:01:33  jont
Added string to int and int to string conversion functions in case we
want variations between host and target

Revision 1.1  91/08/09  17:21:47  jont
Initial revision

Copyright (c) 1991 Harlequin Ltd.
*)


signature MACHTYPES = sig
  datatype Sparc_Reg =
    I0 |
    I1 |
    I2 |
    I3 |
    I4 |
    I5 |
    I6 |
    I7 |
    L0 |
    L1 |
    L2 |
    L3 |
    L4 |
    L5 |
    L6 |
    L7 |
    O0 |
    O1 |
    O2 |
    O3 |
    O4 |
    O5 |
    O6 |
    O7 |
    G0 |
    G1 |
    G2 |
    G3 |
    G4 |
    G5 |
    G6 |
    G7 |
    cond |
    heap |
    stack |
    y_reg |
    nil_v

  val F0 : Sparc_Reg
  val F1 : Sparc_Reg
  val F2 : Sparc_Reg
  val F3 : Sparc_Reg
  val F4 : Sparc_Reg
  val F5 : Sparc_Reg
  val F6 : Sparc_Reg
  val F7 : Sparc_Reg
  val F8 : Sparc_Reg
  val F9 : Sparc_Reg
  val F10 : Sparc_Reg
  val F11 : Sparc_Reg
  val F12 : Sparc_Reg
  val F13 : Sparc_Reg
  val F14 : Sparc_Reg
  val F15 : Sparc_Reg
  val F16 : Sparc_Reg
  val F17 : Sparc_Reg
  val F18 : Sparc_Reg
  val F19 : Sparc_Reg
  val F20 : Sparc_Reg
  val F21 : Sparc_Reg
  val F22 : Sparc_Reg
  val F23 : Sparc_Reg
  val F24 : Sparc_Reg
  val F25 : Sparc_Reg
  val F26 : Sparc_Reg
  val F27 : Sparc_Reg
  val F28 : Sparc_Reg
  val F29 : Sparc_Reg
  val F30 : Sparc_Reg
  val F31 : Sparc_Reg


  val next_reg : Sparc_Reg -> Sparc_Reg

  datatype fp_type = single | double | extended

  val fp_used : fp_type

  val reg_to_string : Sparc_Reg -> string
  val fp_reg_to_string : Sparc_Reg -> string

  val digits_in_real : int
  val bits_per_word : int

  val caller_arg : Sparc_Reg
  val callee_arg : Sparc_Reg
  val caller_arg_regs : Sparc_Reg list
  val callee_arg_regs : Sparc_Reg list
  val caller_closure : Sparc_Reg
  val callee_closure : Sparc_Reg
  val fp : Sparc_Reg
  val sp : Sparc_Reg
  val lr : Sparc_Reg
  val handler : Sparc_Reg
  val global : Sparc_Reg
  val fp_global : Sparc_Reg
  val gc1 : Sparc_Reg
  val gc2 : Sparc_Reg
  val implicit : Sparc_Reg
  val stack_limit : Sparc_Reg

  exception OutOfScope of Sparc_Reg
  val after_preserve : Sparc_Reg -> Sparc_Reg
  val after_restore : Sparc_Reg -> Sparc_Reg


  exception Ord
  exception Chr

  val ord: string -> int
  val chr: int -> string

  exception NeedsPreserve

  val check_reg : Sparc_Reg -> unit
end
@


1.34.4.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@a3 3
 * Revision 1.34  1997/01/17  13:07:48  matthew
 * Adding y register
 *
@


1.34.3.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@a3 3
 * Revision 1.34  1997/01/17  13:07:48  matthew
 * Adding y register
 *
@


1.34.2.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@a3 3
 * Revision 1.34  1997/01/17  13:07:48  matthew
 * Adding y register
 *
@


1.34.1.1
log
@branched from 1.34
@
text
@a3 3
 * Revision 1.34  1997/01/17  13:07:48  matthew
 * Adding y register
 *
@


1.34.1.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@a3 3
 * Revision 1.34.1.1  1997/05/12  10:49:57  hope
 * branched from 1.34
 *
@


1.34.1.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@a3 3
 * Revision 1.34.1.1  1997/05/12  10:49:57  hope
 * branched from 1.34
 *
@


1.34.1.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@a3 3
 * Revision 1.34.1.1  1997/05/12  10:49:57  hope
 * branched from 1.34
 *
@


1.34.1.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@a3 3
 * Revision 1.34.1.1.1.1  1997/07/28  18:32:10  daveb
 * branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
 *
@


1.33
log
@Add bits_per_word, remove max and min integer s and words
@
text
@d4 3
d153 1
@


1.33.7.1
log
@branched from 1.33
@
text
@a3 3
 * Revision 1.33  1995/08/14  11:27:44  jont
 * Add bits_per_word, remove max and min integer s and words
 *
@


1.33.6.1
log
@branched from 1.33
@
text
@a3 3
 * Revision 1.33  1995/08/14  11:27:44  jont
 * Add bits_per_word, remove max and min integer s and words
 *
@


1.33.6.1.1.1
log
@branched from 1.33.6.1
@
text
@a3 3
 * Revision 1.33.6.1  1996/12/17  17:59:53  hope
 * branched from 1.33
 *
@


1.33.5.1
log
@branched from 1.33
@
text
@a3 3
 * Revision 1.33  1995/08/14  11:27:44  jont
 * Add bits_per_word, remove max and min integer s and words
 *
@


1.33.4.1
log
@branched from 1.33
@
text
@a3 3
 * Revision 1.33  1995/08/14  11:27:44  jont
 * Add bits_per_word, remove max and min integer s and words
 *
@


1.33.4.1.1.1
log
@branched from 1.33.4.1
@
text
@a3 3
 * Revision 1.33.4.1  1996/11/14  13:04:28  hope
 * branched from 1.33
 *
@


1.33.3.1
log
@branched from 1.33
@
text
@a3 3
 * Revision 1.33  1995/08/14  11:27:44  jont
 * Add bits_per_word, remove max and min integer s and words
 *
@


1.33.2.1
log
@branched from 1.33
@
text
@a3 3
 * Revision 1.33  1995/08/14  11:27:44  jont
 * Add bits_per_word, remove max and min integer s and words
 *
@


1.33.1.1
log
@branched from 1.33
@
text
@a3 3
 * Revision 1.33  1995/08/14  11:27:44  jont
 * Add bits_per_word, remove max and min integer s and words
 *
@


1.32
log
@Add largest_word machine limit
@
text
@d4 3
a194 3
  val largest_int: string
  val smallest_int: string
  val largest_word: string
d196 1
@


1.31
log
@Added *_arg_regs
Removed *_arg2
@
text
@d4 4
d194 1
@


1.30
log
@Added extra argument register
hdiff sparc/_machspec.sml
@
text
@d4 4
d194 2
a195 2
  val caller_arg2 : Sparc_Reg
  val callee_arg2 : Sparc_Reg
@


1.29
log
@Remove module type to separate file
@
text
@d4 3
d190 2
@


1.28
log
@Added leaf and offsets lists into WORDSET
@
text
@d4 3
a99 15

  datatype wordset = WORD_SET of string list * (int * int * string) list * bool list * int list
  datatype module_element =
    REAL of int * string |
    STRING of int * string |
    MLVALUE of int * MLWorks.Internal.Value.ml_value |
    WORDSET of wordset |
    EXTERNAL of int * string |
    VAR of int * string |
    EXN of int * string |
    STRUCT of int * string |
    FUNCT of int * string

  datatype Module = MODULE of module_element list

@


1.28.1.1
log
@Fork for bug fixing
@
text
@a3 3
Revision 1.28  1993/03/18  10:08:25  jont
Added leaf and offsets lists into WORDSET

@


1.27
log
@Signature revisions
@
text
@d4 3
d98 1
a98 1
  datatype wordset = WORD_SET of string list * (int * int * string) list
@


1.26
log
@Added MLVALUEs
@
text
@d4 3
d107 1
a107 1
  datatype module = MODULE of module_element list
@


1.25
log
@Changes for code vector reform.
@
text
@d4 3
d96 1
@


1.24
log
@Split store into three areas of heap, stack and nil vector for scheduling improvement
@
text
@d4 3
d89 1
a89 11
(*
module		::= module_size [element]
element		::= real | string | wordset | external
wordset		::= opcode_wordset wordset_size total_size [words]
words		::= offset words_size [<u_int32>]
real		::= opcode_real offset real_size [<u_int32>]
string		::= opcode_string offset string_size [char]
external	::= opcode_external offset string_value
offset		::= <u_int32>
*)
  datatype wordset = WORD_SET of (int * int * string) list
@


1.23
log
@Checked and corrected the specification for the floating point registers
@
text
@d4 3
d143 3
a145 1
    store
@


1.22
log
@Added furhter constructors to the module element type to express
interpretive stuff
@
text
@d4 4
d141 34
@


1.21
log
@Added code for non_gc spills number in front of code objects in a closure
by changing wordset definition
@
text
@d4 4
d94 6
a99 1
    EXTERNAL of int * string
@


1.20
log
@Added stack limit register definitions
@
text
@d4 3
d85 1
a85 1
  datatype wordset = WORD_SET of (int * string) list
@


1.19
log
@Added fp_global as a temporary for conversions from fp to int
@
text
@d3 4
a6 1
$Log:	machtypes.sml,v $
d152 1
@


1.18
log
@Added check_reg function from mach_cg to see when save/restore is needed
@
text
@d4 3
d145 1
@


1.17
log
@Added next_reg to signature
@
text
@d4 3
d156 4
@


1.16
log
@Added a maximum number of real digits, and a type to determine the
type of floating point in use
@
text
@d4 4
d116 2
@


1.15
log
@Added printing of floating point registers
@
text
@d4 3
d113 4
d122 1
@


1.14
log
@Added store register for detection of load/store interaction
@
text
@d4 3
d111 1
@


1.13
log
@Now knows about the `implicit' register.
@
text
@d4 3
d104 2
a105 1
    cond
@


1.12
log
@Added cond register to represent the condition for the benefit of the
instruction scheduler
@
text
@d4 4
d119 1
a119 1

@


1.11
log
@New improved simplified module structure
@
text
@d4 3
d96 3
a98 1
    G7
@


1.10
log
@Changed defn of FN_CALL
@
text
@d4 3
d8 1
a8 1
 Added some new register definitions
d44 8
a51 26
module			::= <module_size> [<module_element>]
module_size		::= <u_int32>
module_element		::= <real> | <string> | <wordset> | <record> |
			| <integer> | <fn_call>
wordset			::= code_wordset <wordset_len> <wordset_size> [words]
wordset_len		::= <u_int32>
wordset_size		::= <u_int32>
words			::= code_words <words_size> [<u_int32>]
words_size		::= <u_int32>
fn_call			::= code_fn_call <fn_number> <record_element>
fn_number		::= <u_int32>
record			::= code_record <record_size> [<record_element>]
record_size		::= <u_int32>
record_element		::= <integer> | <local_reference> |
			<external_reference>
integer			::= code_int <u_int32>
real			::= code_real <real_value>
real_value		::= <real_size> [<u_int32>]
string			::= code_string <string_value>
string_value		::= <string_size> [<char>]
string_size		::= <u_int32>
local_reference		::= code_loc_ref <u_int32>
external_reference	::= code_ext_ref <string_value> <index>
index			::= <index_size> <index_value>
index_size		::= <u_int32>
index_value		::= [<u_int32>]
d53 1
a53 9
  datatype ext_ref = EXT of string (* Note index not required *)
  datatype local_ref = LOC of int
  datatype record_element =
    INT of int |
    LOC_REF of local_ref |
    EXT_REF of ext_ref
  datatype record = REC of record_element list
  datatype fn_call = CALL of int * int
  datatype wordset = WORD_SET of string list
d55 2
a56 2
    REAL of string |
    STRING of string |
d58 1
a58 3
    RECORD of record |
    INTEGER of string |
    FN_CALL of fn_call
@


1.9
log
@ Added some new register definitions
@
text
@d4 3
d75 1
a75 1
  datatype fn_call = CALL of int * record_element
@


1.8
log
@New module structure with lists of functions
@
text
@d4 3
d121 4
a124 2
  val fn_arg : Sparc_Reg
  val cl_arg : Sparc_Reg
@


1.7
log
@Moved some system dependent stuff to MachSpec.
@
text
@d4 3
d37 1
a37 1
module_element		::= <real> | <string> | <words> | <record> |
d39 3
d70 1
d74 1
a74 1
    WORDS of string |
@


1.6
log
@Changed the name of spillable_regs to gc_registers for consistency,
and added fp_registers and fp_double_registers. These are currently set
to the empty set.
@
text
@d4 5
a27 1
require "../utils/set";
d30 1
a30 1
  structure Set : SET
d107 1
d110 1
a110 4
  val gc_registers : Sparc_Reg Set.Set
  val non_gc_registers : Sparc_Reg Set.Set
  val fp_registers : Sparc_Reg Set.Set
  val fp_double_registers : Sparc_Reg Set.Set
d120 3
d125 2
a126 1
  exception Bad_Reg
d129 1
@


1.5
log
@More register names and fixed translations
@
text
@d4 3
d105 1
a105 1
  val spillable_regs : Sparc_Reg Set.Set
d107 2
@


1.4
log
@Added register definitions etc
@
text
@d4 3
d24 42
d99 1
a101 1
  val fixed_regs : Sparc_Reg Set.Set
d103 1
a103 1
  val scratch_regs : Sparc_Reg Set.Set
a105 1
  val cl_arg' : Sparc_Reg
d109 4
@


1.3
log
@Added exceptions Ord and Chr
@
text
@d4 3
d8 1
a8 1
> Added string to int and int to string conversion functions in case we
d17 2
d20 34
d56 12
@


1.2
log
@> Added string to int and int to string conversion functions in case we
want variations between host and target
@
text
@d4 4
d17 2
@


1.1
log
@Initial revision
@
text
@d3 4
a6 1
$Log$
d13 2
@
