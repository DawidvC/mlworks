head	1.1;
access;
symbols
	MLW_daveb_inline_1_4_99:1.1.8
	MLWorks_21c0_1999_03_25:1.1
	MLWorks_20c1_1998_08_20:1.1
	MLWorks_20c0_1998_08_04:1.1
	MLWorks_20b2c2_1998_06_19:1.1
	MLWorks_20b2_Windows_1998_06_12:1.1
	MLWorks_20b1c1_1998_05_07:1.1
	MLWorks_20b0_1998_04_07:1.1
	MLWorks_20b0_1998_03_20:1.1
	MLWorks_20m2_1998_02_16:1.1
	MLWorks_20m1_1997_10_23:1.1
	MLWorks_11r1:1.1.5.1.1.1.1
	MLWorks_workspace_97:1.1.7
	MLWorks_dt_wizard:1.1.6
	MLWorks_11c0_1997_09_09:1.1.5.1.1.1
	MLWorks_10r3:1.1.5.1.3
	MLWorks_10r2_551:1.1.5.1.2
	MLWorks_11:1.1.5.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.1.5.1
	MLWorks_20m0_1997_06_20:1.1
	MLWorks_1_0_r2c2_1997_06_14:1.1.5.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.1.5.1
	MLWorks_1_0_r2c1_1997_05_12:1.1.5
	MLWorks_BugFix_1997_04_24:1.1
	MLWorks_1_0_r2_Win32_1997_04_11:1.1
	MLWorks_1_0_r2_Unix_1997_04_04:1.1
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.1.3.1.1
	MLWorks_gui_1996_12_18:1.1.4
	MLWorks_1_0_Win32_1996_12_17:1.1.3
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.1.1.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.1.1.1
	MLWorks_1_0_Irix_1996_11_28:1.1.1.1.1
	MLWorks_1_0_Win32_1996_11_22:1.1.2
	MLWorks_1_0_Unix_1996_11_14:1.1.1;
locks; strict;
comment	@; @;


1.1
date	96.11.04.16.15.41;	author matthew;	state Exp;
branches
	1.1.1.1
	1.1.2.1
	1.1.3.1
	1.1.4.1
	1.1.5.1
	1.1.6.1
	1.1.7.1
	1.1.8.1;
next	;

1.1.1.1
date	96.11.14.13.05.08;	author hope;	state Exp;
branches
	1.1.1.1.1.1;
next	;

1.1.1.1.1.1
date	96.11.28.15.14.39;	author hope;	state Exp;
branches;
next	;

1.1.2.1
date	96.11.22.18.22.36;	author hope;	state Exp;
branches;
next	;

1.1.3.1
date	96.12.17.18.00.37;	author hope;	state Exp;
branches
	1.1.3.1.1.1;
next	;

1.1.3.1.1.1
date	97.02.24.11.52.18;	author hope;	state Exp;
branches;
next	;

1.1.4.1
date	96.12.18.09.55.59;	author hope;	state Exp;
branches;
next	;

1.1.5.1
date	97.05.12.10.50.41;	author hope;	state Exp;
branches
	1.1.5.1.1.1
	1.1.5.1.2.1
	1.1.5.1.3.1;
next	;

1.1.5.1.1.1
date	97.07.28.18.32.53;	author daveb;	state Exp;
branches
	1.1.5.1.1.1.1.1;
next	;

1.1.5.1.1.1.1.1
date	97.10.07.11.58.55;	author jkbrook;	state Exp;
branches;
next	;

1.1.5.1.2.1
date	97.09.08.17.26.03;	author daveb;	state Exp;
branches;
next	;

1.1.5.1.3.1
date	97.09.09.14.22.49;	author daveb;	state Exp;
branches;
next	;

1.1.6.1
date	97.09.10.19.41.49;	author brucem;	state Exp;
branches;
next	;

1.1.7.1
date	97.09.11.21.09.21;	author daveb;	state Exp;
branches;
next	;

1.1.8.1
date	99.04.01.18.08.09;	author daveb;	state Exp;
branches;
next	;


desc
@new unit
New unit
@


1.1
log
@new unit
New unit
@
text
@;;; sml-font.el --- Highlighting for sml-mode using font-lock.
;;;
;;; Copyright (C) 1995 Frederick Knabe
;;;
;;; Author:     Fritz Knabe <knabe@@ecrc.de>
;;;             ECRC GmbH, Arabellastr. 17, 81925 Munich, Germany
;;; Created:    26 June 1995
;;;
;;; $Revision: 1.5 $
;;; $Date: 1995/07/20 15:45:12 $
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; If you did not receive a copy of the GNU General Public License with
;;; this program, write to the Free Software Foundation, Inc., 675 Mass
;;; Ave, Cambridge, MA 02139, USA.
;;;
;;;
;;; DESCRIPTION
;;;
;;; This package sets up highlighting of SML using font-lock.  If you
;;; use the new version of font-lock distributed in GNU Emacs, SML's
;;; nested comments as well as its special string escapes will be
;;; handled properly.  The version of font-lock distributed with XEmacs
;;; can also be used, but these special cases will not be handled.
;;;
;;; Should the fontification become incorrect while editing (for
;;; example, when uncommenting), M-x font-lock-fontify-buffer will clear
;;; things up.
;;;
;;; To install (assuming that you use sml-mode 3.1), put the following
;;; in your .emacs:
;;;
;;;       (setq sml-hilite nil)     ; Turn off highlighting based on hilit19
;;;
;;;	  ;; For GNU Emacs
;;;       (eval-after-load "sml-mode" '(require 'sml-font))
;;;
;;;       ;; For XEmacs
;;;       (require 'sml-font)
;;;
;;;
;;; Versions 3.2 and later of sml-mode define sml-load-hook (and the
;;; variable sml-hilite is spurious), so you can simply put:
;;;
;;;       (setq sml-load-hook
;;;             '(lambda() "Fontify SML." (require 'sml-font)))
;;;
;;; By default, font-lock will be turned on automatically for every SML
;;; buffer.  If you don't want this, also add the following:
;;;
;;;       (setq sml-font-lock-auto-on nil)
;;;
;;; If you want to add to the keywords that will be fontified, set the
;;; variable sml-font-lock-extra-keywords (see its documentation).
;;;
;;; Thanks to Matthew Morley <morley@@gmd.de> for suggestions and fixes.
;;; 

(require 'font-lock)

(defvar sml-font-lock-auto-on t
  "*If non-nil, turn on font-lock unconditionally for every SML buffer.")

(defvar sml-font-lock-extra-keywords nil
  ;; The example is easier to read if you load this package and use C-h v
  ;; to view the documentation.
  "*List of regexps to fontify as additional SML keywords.

For example, to add `xfun', `xfn', `special', and `=>', the value could be

	(\"\\=\\=\\=\\\\=\\=\\=\\<xfu?n\\\\|special\\\\>\" \"=>\")

The word delimiters in the first pattern prevent spurious highlighting
of keywords embedded inside other words (e.g., we don't want the tail of
`myxfun' to be highlighted).  You cannot use word delimiters with
symbolic patterns, however, because only alphanumerics are defined as
Emacs word constituents.  The second pattern would match the tail of a
symbolic identifier such as `==>', which might not be what you want.")

(defvar sml-font-lock-standard-keywords
  ;; "abstraction" "abstype" "and" "andalso" "as" "case" "datatype"
  ;; "else" "end" "eqtype" "exception" "do" "fn" "fun" "functor"
  ;; "handle" "if" "in" "infix" "infixr" "let" "local" "nonfix" "of"
  ;; "op" "open" "orelse" "overload" "raise" "rec" "sharing" "sig"
  ;; "signature" "struct" "structure" "then" "type" "val" "while"
  ;; "with" "withtype"
  ;; Generated with Simon Marshall's make-regexp:
  "\\<\\(a\\(bst\\(raction\\|ype\\)\\|nd\\(\\|also\\)\\|s\\)\\|case\\|\
d\\(atatype\\|o\\)\\|e\\(lse\\|nd\\|qtype\\|xception\\)\\|f\\(n\\|un\\(\\|\
ctor\\)\\)\\|handle\\|i\\([fn]\\|nfixr?\\)\\|l\\(et\\|ocal\\)\\|nonfix\\|\
o\\([fp]\\|pen\\|relse\\|verload\\)\\|r\\(aise\\|ec\\)\\|s\\(haring\\|\
ig\\(\\|nature\\)\\|truct\\(\\|ure\\)\\)\\|t\\(hen\\|ype\\)\\|val\\|\
w\\(hile\\|ith\\(\\|type\\)\\)\\)\\>"
  "Regexp matching standard SML keywords.")

(defvar sml-font-lock-all nil
  "Font-lock matchers for SML.")

(defun sml-font-lock-setup ()
  "Set buffer-local font-lock variables and possibly turn on font-lock."
  (let ((new-font-lock (boundp 'font-lock-defaults)))
    ;; If new-font-lock is t, use sml-font-comments-and-strings to do
    ;; fontification of comments and strings.  Otherwise, do
    ;; fontification using the SML syntax table (which will not always
    ;; be correct).
    (or sml-font-lock-all
	(setq sml-font-lock-all
	      (append
	       (and new-font-lock (list (list 'sml-font-comments-and-strings)))
	       sml-font-lock-extra-keywords
	       (list (list sml-font-lock-standard-keywords 1
			   'font-lock-keyword-face)))))
    (cond (new-font-lock
	   (make-local-variable 'font-lock-defaults)
	   (setq font-lock-defaults '(sml-font-lock-all t)))
	  (t
	   (setq font-lock-keywords sml-font-lock-all))))
  (and sml-font-lock-auto-on (turn-on-font-lock)))

(add-hook 'sml-mode-hook 'sml-font-lock-setup)

(defvar sml-font-cache '((0 . normal))
  "List of (POSITION . STATE) pairs for an SML buffer.
The STATE is either `normal', `comment', or `string'.  The POSITION is
immediately after the token that caused the state change.")

(make-variable-buffer-local 'sml-font-cache)

(defun sml-font-comments-and-strings (limit)
  "Fontify SML comments and strings up to LIMIT.
Handles nested comments and SML's escapes for breaking a string over lines.
Uses sml-font-cache to maintain the fontification state over the buffer."
  (let ((beg (point))
	last class)
    (while (< beg limit)
      (while (and sml-font-cache
		  (> (car (car sml-font-cache)) beg))
	(setq sml-font-cache (cdr sml-font-cache)))
      (setq last (car (car sml-font-cache)))
      (setq class (cdr (car sml-font-cache)))
      (goto-char last)
      (cond
       ((eq class 'normal)
	(cond
	 ((not (re-search-forward "\\((\\*\\)\\|\\(\"\\)" limit t))
	  (goto-char limit))
	 ((match-beginning 1)
	  (setq sml-font-cache (cons (cons (point) 'comment) sml-font-cache)))
	 ((match-beginning 2)
	  (setq sml-font-cache (cons (cons (point) 'string) sml-font-cache)))))
       ((eq class 'comment)
	(cond
	 ((let ((nest 1))
	    (while (and (> nest 0)
			(re-search-forward "\\((\\*\\)\\|\\(\\*)\\)" limit t))
	      (cond
	       ((match-beginning 1) (setq nest (+ nest 1)))
	       ((match-beginning 2) (setq nest (- nest 1)))))
	    (> nest 0))
	  (goto-char limit))
	 (t
	  (setq sml-font-cache (cons (cons (point) 'normal) sml-font-cache))))
	(put-text-property (- last 2) (point) 'face 'font-lock-comment-face))
       ((eq class 'string)
	(while (and (re-search-forward
		     "\\(\"\\)\\|\\(\\\\\\s-*\\\\\\)\\|\\(\\\\\"\\)" limit t)
		     (not (match-beginning 1))))
	(cond
	 ((match-beginning 1)
	  (setq sml-font-cache (cons (cons (point) 'normal) sml-font-cache)))
	 (t
	  (goto-char limit)))
	(put-text-property (- last 1) (point) 'face 'font-lock-string-face)))
      (setq beg (point)))))

(provide 'sml-font)
@


1.1.8.1
log
@branched from trunk for label MLW_daveb_inline_1_4_99
@
text
@d9 2
a10 2
;;; $Revision: 1.1 $
;;; $Date: 1996/11/04 16:15:41 $
@


1.1.7.1
log
@branched from trunk for label MLWorks_workspace_97
@
text
@d9 2
a10 2
;;; $Revision: 1.1 $
;;; $Date: 1996/11/04 16:15:41 $
@


1.1.6.1
log
@branched from trunk for label MLWorks_dt_wizard
@
text
@d9 2
a10 2
;;; $Revision: 1.1 $
;;; $Date: 1996/11/04 16:15:41 $
@


1.1.5.1
log
@branched from 1.1
@
text
@d9 2
a10 2
;;; $Revision: 1.1 $
;;; $Date: 1996/11/04 16:15:41 $
@


1.1.5.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@d9 2
a10 2
;;; $Revision: 1.1.5.1 $
;;; $Date: 1997/05/12 10:50:41 $
@


1.1.5.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@d9 2
a10 2
;;; $Revision: 1.1.5.1 $
;;; $Date: 1997/05/12 10:50:41 $
@


1.1.5.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@d9 2
a10 2
;;; $Revision: 1.1.5.1 $
;;; $Date: 1997/05/12 10:50:41 $
@


1.1.5.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@d9 2
a10 2
;;; $Revision: 1.1.5.1.1.1 $
;;; $Date: 1997/07/28 18:32:53 $
@


1.1.4.1
log
@branched from 1.1
@
text
@d9 2
a10 2
;;; $Revision: 1.1 $
;;; $Date: 1996/11/04 16:15:41 $
@


1.1.3.1
log
@branched from 1.1
@
text
@d9 2
a10 2
;;; $Revision: 1.1 $
;;; $Date: 1996/11/04 16:15:41 $
@


1.1.3.1.1.1
log
@branched from 1.1.3.1
@
text
@d9 2
a10 2
;;; $Revision: 1.1.3.1 $
;;; $Date: 1996/12/17 18:00:37 $
@


1.1.2.1
log
@branched from 1.1
@
text
@d9 2
a10 2
;;; $Revision: 1.1 $
;;; $Date: 1996/11/04 16:15:41 $
@


1.1.1.1
log
@branched from 1.1
@
text
@d9 2
a10 2
;;; $Revision: 1.1 $
;;; $Date: 1996/11/04 16:15:41 $
@


1.1.1.1.1.1
log
@branched from 1.1.1.1
@
text
@d9 2
a10 2
;;; $Revision: 1.1.1.1 $
;;; $Date: 1996/11/14 13:05:08 $
@
