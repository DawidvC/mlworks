head	1.2;
access;
symbols
	MLWorks_21c0_1999_03_25:1.2
	MLWorks_20c1_1998_08_20:1.2
	MLWorks_20c0_1998_08_04:1.2
	MLWorks_20b2c2_1998_06_19:1.2
	MLWorks_20b2_Windows_1998_06_12:1.2;
locks; strict;
comment	@ * @;


1.2
date	98.06.02.15.44.57;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	98.06.02.13.04.39;	author jont;	state Exp;
branches;
next	;


desc
@new unit
Putting application tests into hope and daily
@


1.2
log
@Automatic checkin:
changed attribute _comment to ' * '
@
text
@(*
 *
 * $Log$
 *
 *)
RCS "$Id: Act.sig,v 1.2 1994/12/04 15:17:56 pxs Exp $";
(************************************ Act ************************************)
(*                                                                           *)
(*  This is the definition of "Actions".                                     *)
(*                                                                           *)
(*****************************************************************************)

signature ACT =
sig
   structure P : PART

   exception Parse of string

   eqtype act

   val tau      : act
   val eps      : act

(*an amatuerish hashing function.*)
   val hashval  : act -> int
(* 'a <--> a *)
   val inverse  : act -> act
(* answer "are these complementary actions?" *)
   val inverses : act * act -> bool
(* make an action out of a string, using conventional 'a, tau, eps, 1*)
   val mkact    : string -> act
   val mkstr    : act -> string
   val mkstr1   : act -> string

   val ispart   : act -> bool
   val parts    : act -> P.part list

   val product  : act * act -> act
   val relabel  : (act * P.part) list -> act -> act
   val permit   : P.part list -> act -> bool

   val eq       : act * act -> bool
   val le       : act * act -> bool
end

@


1.1
log
@new unit
Putting application tests into hope and daily
@
text
@@
