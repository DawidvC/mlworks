head	1.2;
access;
symbols
	MLWorks_21c0_1999_03_25:1.2
	MLWorks_20c1_1998_08_20:1.2
	MLWorks_20c0_1998_08_04:1.2
	MLWorks_20b2c2_1998_06_19:1.2
	MLWorks_20b2_Windows_1998_06_12:1.2;
locks; strict;
comment	@ * @;


1.2
date	98.06.02.15.50.15;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	98.06.02.13.04.40;	author jont;	state Exp;
branches;
next	;


desc
@new unit
Putting application tests into hope and daily
@


1.2
log
@Automatic checkin:
changed attribute _comment to ' * '
@
text
@(*
 *
 * $Log$
 *
 *)
RCS "$Id: Part.str,v 1.2 1994/12/05 17:11:26 pxs Exp $";

functor Part () : PART =
struct
   datatype part = Name of Name.name | Coname of Name.name

   fun hashval (Name a) = Name.hashOf a
     | hashval (Coname a) = Name.hashOf a

   val eq : part * part -> bool = (op =)

   fun le (Name _, Coname _) = true
     | le (Name x, Name y) = Name.stringOf x <= Name.stringOf y
     | le (Coname x, Coname y) = Name.stringOf x <= Name.stringOf y
     | le (Coname _, Name _) = false

   fun mkstr (Name s) = Name.stringOf s
     | mkstr (Coname s) = "'"^(Name.stringOf s)

   fun name (Name x) = Name x
     | name (Coname x) = Name x

   fun isname (Name _) = true
     | isname (Coname _) = false

   fun inverse (Name s) = Coname s
     | inverse (Coname s) = Name s

   fun mkpart s =
       let val L = explode s
        in if hd L = "'" then inverse(mkpart(implode(tl L)))
           else Name (Name.mkName s)
       end
end
@


1.1
log
@new unit
Putting application tests into hope and daily
@
text
@@
