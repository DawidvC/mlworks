head	1.2;
access;
symbols
	MLWorks_21c0_1999_03_25:1.2
	MLWorks_20c1_1998_08_20:1.2
	MLWorks_20c0_1998_08_04:1.2
	MLWorks_20b2c2_1998_06_19:1.2
	MLWorks_20b2_Windows_1998_06_12:1.2;
locks; strict;
comment	@ * @;


1.2
date	98.06.02.15.18.31;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	98.06.02.13.04.31;	author jont;	state Exp;
branches;
next	;


desc
@new unit
Putting application tests into hope and daily
@


1.2
log
@Automatic checkin:
changed attribute _comment to ' * '
@
text
@(*
 *
 * $Log$
 *
 *)
RCS "$Id: DivComp.sig,v 1.3 1994/12/03 14:41:57 pxs Exp $";
(********************************** DivComp **********************************)
(*                                                                           *)
(* This Module handles divergence. It provides functions which:              *)
(*   A) check whether a state has divergence properties                      *)
(*   B) compute the divergence information for a specific transition system  *)
(*                                                                           *)
(* strgldivinf puts the primitive divergence information prdiv in the field  *)
(* referenced by gldiv.                                                      *)
(* strlocdivinf is the extension of the divergence information above to      *)
(* local divergence information (divergence reachable by a visible move).    *)
(* weakgldivinf considers a potential of an infinite invisible behaviour     *)
(* as divergence                                                             *)
(* weaklocdivinf is the extension of the divergence information above to     *)
(* local divergence information (divergence reachable by a visible move).    *)
(* This computation is based on compweakgldivinf. This information is        *)
(* in testdivinf, successors of divergent states are considered as divergent *)
(*****************************************************************************)

signature DIVCOMP =
sig
   structure Elem : ELEM

   val globdivpred   : Elem.Preinf Elem.PG.state ref  ->  bool
   val locdivpred    : Elem.Preinf Elem.PG.state ref * Elem.PG.act ->  bool
   val strgldivinf   : Elem.Preinf Elem.PG.state ref list  ->  bool
   val strlocdivinf  : Elem.Preinf Elem.PG.state ref list  ->  bool
   val weakgldivinf  : Elem.Preinf Elem.PG.state ref list  ->  bool
   val weaklocdivinf : Elem.Preinf Elem.PG.state ref list  ->  bool
   val testdivinf    : Elem.Preinf Elem.PG.state ref list  ->  bool
end

@


1.1
log
@new unit
Putting application tests into hope and daily
@
text
@@
