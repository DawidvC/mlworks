head	1.2;
access;
symbols
	MLWorks_21c0_1999_03_25:1.2
	MLWorks_20c1_1998_08_20:1.2
	MLWorks_20c0_1998_08_04:1.2
	MLWorks_20b2c2_1998_06_19:1.2
	MLWorks_20b2_Windows_1998_06_12:1.2;
locks; strict;
comment	@ * @;


1.2
date	98.06.02.15.19.15;	author jont;	state Exp;
branches;
next	1.1;

1.1
date	98.06.02.13.04.31;	author jont;	state Exp;
branches;
next	;


desc
@new unit
Putting application tests into hope and daily
@


1.2
log
@Automatic checkin:
changed attribute _comment to ' * '
@
text
@(*
 *
 * $Log$
 *
 *)
RCS "$Id: DivPre.sig,v 1.3 1994/12/03 14:43:09 pxs Exp $";
(********************************** DivPre ***********************************)
(*                                                                           *)
(*             Signature for Preorder Checking                               *)
(*                                                                           *)
(*  Modified to run under Bell ML compiler - April 1989 - Jo Blishen         *)
(*                                                                           *)
(*****************************************************************************)

signature DIVPRE =
sig
   structure Elem : ELEM

   val strongpreorder :
       (Elem.Preinf Elem.PG.state ref * Elem.Preinf Elem.PG.state ref list) *
       (Elem.Preinf Elem.PG.state ref * Elem.Preinf Elem.PG.state ref list)
       ->  bool
   val weakpreorder :
       (Elem.Preinf Elem.PG.state ref * Elem.Preinf Elem.PG.state ref list) *
       (Elem.Preinf Elem.PG.state ref * Elem.Preinf Elem.PG.state ref list)
       ->  bool
   val precongruence :
       (Elem.Preinf Elem.PG.state ref * Elem.Preinf Elem.PG.state ref list) *
       (Elem.Preinf Elem.PG.state ref * Elem.Preinf Elem.PG.state ref list)
       ->  bool
   val strongequivalence :
       (Elem.Preinf Elem.PG.state ref * Elem.Preinf Elem.PG.state ref list) *
       (Elem.Preinf Elem.PG.state ref * Elem.Preinf Elem.PG.state ref list)
       ->  bool
   val weakequivalence :
       (Elem.Preinf Elem.PG.state ref * Elem.Preinf Elem.PG.state ref list) *
       (Elem.Preinf Elem.PG.state ref * Elem.Preinf Elem.PG.state ref list)
       ->  bool
   val weakcongruence :
       (Elem.Preinf Elem.PG.state ref * Elem.Preinf Elem.PG.state ref list) *
       (Elem.Preinf Elem.PG.state ref * Elem.Preinf Elem.PG.state ref list)
       ->  bool
   val twothirds :
       (Elem.Preinf Elem.PG.state ref * Elem.Preinf Elem.PG.state ref list) *
       (Elem.Preinf Elem.PG.state ref * Elem.Preinf Elem.PG.state ref list)
       ->  bool
end

@


1.1
log
@new unit
Putting application tests into hope and daily
@
text
@@
