head	1.1;
access;
symbols
	MLWorks_21c0_1999_03_25:1.1
	MLWorks_20c1_1998_08_20:1.1
	MLWorks_20c0_1998_08_04:1.1
	MLWorks_20b2c2_1998_06_19:1.1
	MLWorks_20b2_Windows_1998_06_12:1.1
	MLWorks_20b1c1_1998_05_07:1.1
	MLWorks_20b0_1998_04_07:1.1
	MLWorks_20b0_1998_03_20:1.1
	MLWorks_20m2_1998_02_16:1.1
	MLWorks_20m1_1997_10_23:1.1
	MLWorks_11r1:1.1.7.1.1.1.1
	MLWorks_11c0_1997_09_09:1.1.7.1.1.1
	MLWorks_10r3:1.1.7.1.3
	MLWorks_10r2_551:1.1.7.1.2
	MLWorks_11:1.1.7.1.1
	MLWorks_1_0_r2c2_1997_07_28:1.1.7.1
	MLWorks_20m0_1997_06_20:1.1
	MLWorks_1_0_r2c2_1997_06_14:1.1.7.1
	MLWorks_1_0_r2c1_released_1997_05_23:1.1.7.1
	MLWorks_1_0_r2c1_1997_05_12:1.1.7
	MLWorks_BugFix_1997_04_24:1.1
	MLWorks_1_0_r2_Win32_1997_04_11:1.1
	MLWorks_1_0_r2_Unix_1997_04_04:1.1
	MLWorks_1_0_1_ULTRASPARC_1997_02_24:1.1.6.1.1
	MLWorks_1_0_Win32_1996_12_17:1.1.6
	MLWorks_1_0_Irix_1996_11_28_released_1996_12_17:1.1.4.1.1.1
	MLWorks_1_0_Unix_1996_11_14_released_1996_12_17:1.1.4.1
	MLWorks_1_0_Irix_1996_11_28:1.1.4.1.1
	MLWorks_1_0_Win32_1996_11_22:1.1.5
	MLWorks_1_0_Unix_1996_11_14:1.1.4
	MLWorks_Open_Beta2_1996_10_11:1.1.3
	MLWorks_License_dev:1.1.2
	MLWorks_1_open_beta_1996_09_13:1.1.1
	MLWorks_Open_Beta_1996_08_22:1.1
	MLWorks_Beta_1996_07_02:1.1
	MLWorks_Beta_1996_06_07:1.1
	MLWorks_Beta_1996_06_06:1.1
	MLWorks_Beta_1996_06_05:1.1
	MLWorks_Beta_1996_06_03:1.1
	MLWorks_Beta_1996_05_31:1.1
	MLWorks_Beta_1996_05_30:1.1
	ML_beta_release_12/08/94:1.1
	ML_beta_release_03/08/94:1.1
	ML_revised_beta_release_25/05/94:1.1
	ML_final_beta_release_02/03/94:1.1;
locks; strict;
comment	@# @;


1.1
date	94.01.28.16.24.08;	author johnk;	state Exp;
branches
	1.1.1.1
	1.1.2.1
	1.1.3.1
	1.1.4.1
	1.1.5.1
	1.1.6.1
	1.1.7.1;
next	;

1.1.1.1
date	96.09.13.11.08.01;	author hope;	state Exp;
branches;
next	;

1.1.2.1
date	96.10.07.15.59.10;	author hope;	state Exp;
branches;
next	;

1.1.3.1
date	96.10.17.11.17.33;	author hope;	state Exp;
branches;
next	;

1.1.4.1
date	96.11.14.12.41.03;	author hope;	state Exp;
branches
	1.1.4.1.1.1;
next	;

1.1.4.1.1.1
date	96.11.28.14.52.58;	author hope;	state Exp;
branches;
next	;

1.1.5.1
date	96.11.22.18.01.30;	author hope;	state Exp;
branches;
next	;

1.1.6.1
date	96.12.17.17.40.26;	author hope;	state Exp;
branches
	1.1.6.1.1.1;
next	;

1.1.6.1.1.1
date	97.02.24.11.27.48;	author hope;	state Exp;
branches;
next	;

1.1.7.1
date	97.05.12.10.25.27;	author hope;	state Exp;
branches
	1.1.7.1.1.1
	1.1.7.1.2.1
	1.1.7.1.3.1;
next	;

1.1.7.1.1.1
date	97.07.28.18.11.24;	author daveb;	state Exp;
branches
	1.1.7.1.1.1.1.1;
next	;

1.1.7.1.1.1.1.1
date	97.10.07.11.36.13;	author jkbrook;	state Exp;
branches;
next	;

1.1.7.1.2.1
date	97.09.08.17.04.42;	author daveb;	state Exp;
branches;
next	;

1.1.7.1.3.1
date	97.09.09.13.59.50;	author daveb;	state Exp;
branches;
next	;


desc
@new file
@


1.1
log
@new file
@
text
@This is an attempt to deal with the problems posed by real numbers. It
merely addresses the calling/preservation problems.

Across a procedure call there are some registers that will be
preserved, and some that will be corrupted. For example, for Sparc
integers, assuming the register windowing mechanisms are used, these
are respectively the I and L registers, and the O registers. The G
registers are somewhat indeterminate here. This convention is
implemented by the SAVE/RESTORE instructions, however, it could
equally well be done explicitly (though less efficiently).

It therefore seems reasonable to propose to split the available fp
registers into two sets, one of which will be preserved across
procedure calls, and the other of which will be corrupted. The
register allocator can allocate given this discipline, and the code
generator can produce the appropriate preservation instructions at
procedure entry and restoration instructions at procedure exit.

Thus the problem is handled by a combination of the register allocator
and the third stage code generator (mach_cg). Given the lack of any
automatic register saving for floating point registers, it can be done
manually using suitable quantities of STF and STDF instructions,
storing only those fp registers used by the procedure in question
(information supplied by the register allocator (it is more vital here
that such information be correct)) whose preservation is expected by a
caller (ie callee save by need). The manipulation of the rest of the
offsets within the stack will be done automatically by mach_cg.
@


1.1.7.1
log
@branched from 1.1
@
text
@@


1.1.7.1.3.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r3
@
text
@@


1.1.7.1.2.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_10r2_551
@
text
@@


1.1.7.1.1.1
log
@branched from MLWorks_1_0_r2c1_1997_05_12 for label MLWorks_11
@
text
@@


1.1.7.1.1.1.1.1
log
@branched from MLWorks_11 for label MLWorks_11r1
@
text
@@


1.1.6.1
log
@branched from 1.1
@
text
@@


1.1.6.1.1.1
log
@branched from 1.1.6.1
@
text
@@


1.1.5.1
log
@branched from 1.1
@
text
@@


1.1.4.1
log
@branched from 1.1
@
text
@@


1.1.4.1.1.1
log
@branched from 1.1.4.1
@
text
@@


1.1.3.1
log
@branched from 1.1
@
text
@@


1.1.2.1
log
@branched from 1.1
@
text
@@


1.1.1.1
log
@branched from 1.1
@
text
@@
